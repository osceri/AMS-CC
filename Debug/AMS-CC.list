
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08018c08  08018c08  00028c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019000  08019000  000314ac  2**0
                  CONTENTS
  4 .ARM          00000008  08019000  08019000  00029000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019008  08019008  000314ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019008  08019008  00029008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801900c  0801900c  0002900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  08019010  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000314ac  2**0
                  CONTENTS
 10 .bss          0001d4dc  200014b0  200014b0  000314b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001e98c  2001e98c  000314b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000314ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f887  00000000  00000000  000314dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009166  00000000  00000000  00070d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002450  00000000  00000000  00079ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f28  00000000  00000000  0007c320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297ab  00000000  00000000  0007e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003119f  00000000  00000000  000a79f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ede68  00000000  00000000  000d8b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  001c69fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009264  00000000  00000000  001c6ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018bf0 	.word	0x08018bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	08018bf0 	.word	0x08018bf0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001e8d8 	.word	0x2001e8d8

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <inc_res+0x20>
		ptr[0]++;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 8000f82:	e002      	b.n	8000f8a <inc_res+0x26>
		ptr[0] = 0;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <COM_voltages_ok_d+0xd4>)
 8000faa:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 8000fac:	4b30      	ldr	r3, [pc, #192]	; (8001070 <COM_voltages_ok_d+0xd8>)
 8000fae:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e052      	b.n	800105c <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fc8:	6938      	ldr	r0, [r7, #16]
 8000fca:	f7ff faaf 	bl	800052c <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fd91 	bl	8000afc <__aeabi_dcmpgt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <COM_voltages_ok_d+0x4c>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <COM_voltages_ok_d+0x4e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4922      	ldr	r1, [pc, #136]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8000fec:	440b      	add	r3, r1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f7ff ffb7 	bl	8000f64 <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fa95 	bl	800052c <__aeabi_f2d>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fd75 	bl	8000afc <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <COM_voltages_ok_d+0x84>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <COM_voltages_ok_d+0x86>
 800101c:	2300      	movs	r3, #0
 800101e:	b2da      	uxtb	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4915      	ldr	r1, [pc, #84]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001024:	440b      	add	r3, r1
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff ff9b 	bl	8000f64 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <COM_voltages_ok_d+0xdc>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	883a      	ldrh	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d201      	bcs.n	8001042 <COM_voltages_ok_d+0xaa>
			return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e010      	b.n	8001064 <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <COM_voltages_ok_d+0xe0>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	883a      	ldrh	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d201      	bcs.n	8001056 <COM_voltages_ok_d+0xbe>
			return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e006      	b.n	8001064 <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b7d      	cmp	r3, #125	; 0x7d
 8001060:	dda9      	ble.n	8000fb6 <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 8001062:	2301      	movs	r3, #1

}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	4086147b 	.word	0x4086147b
 8001070:	4033d70a 	.word	0x4033d70a
 8001074:	200014cc 	.word	0x200014cc
 8001078:	2000154c 	.word	0x2000154c

0800107c <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <COM_temperatures_ok_d+0xd4>)
 800108e:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <COM_temperatures_ok_d+0xd8>)
 8001092:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e052      	b.n	8001140 <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010ac:	6938      	ldr	r0, [r7, #16]
 80010ae:	f7ff fa3d 	bl	800052c <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fd1f 	bl	8000afc <__aeabi_dcmpgt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <COM_temperatures_ok_d+0x4c>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <COM_temperatures_ok_d+0x4e>
 80010c8:	2300      	movs	r3, #0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	4922      	ldr	r1, [pc, #136]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 80010d0:	440b      	add	r3, r1
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff ff45 	bl	8000f64 <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00f      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa23 	bl	800052c <__aeabi_f2d>
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fd03 	bl	8000afc <__aeabi_dcmpgt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <COM_temperatures_ok_d+0x84>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <COM_temperatures_ok_d+0x86>
 8001100:	2300      	movs	r3, #0
 8001102:	b2da      	uxtb	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001108:	440b      	add	r3, r1
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff ff29 	bl	8000f64 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <COM_temperatures_ok_d+0xdc>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	883a      	ldrh	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d201      	bcs.n	8001126 <COM_temperatures_ok_d+0xaa>
			return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e010      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <COM_temperatures_ok_d+0xe0>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	883a      	ldrh	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d201      	bcs.n	800113a <COM_temperatures_ok_d+0xbe>
			return 0;
 8001136:	2300      	movs	r3, #0
 8001138:	e006      	b.n	8001148 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b3b      	cmp	r3, #59	; 0x3b
 8001144:	dda9      	ble.n	800109a <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001146:	2301      	movs	r3, #1

}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	42700000 	.word	0x42700000
 8001154:	c1a00000 	.word	0xc1a00000
 8001158:	200015cc 	.word	0x200015cc
 800115c:	20001608 	.word	0x20001608

08001160 <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
 800116c:	4613      	mov	r3, r2
 800116e:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <COM_current_ok_d+0xa4>)
 8001172:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <COM_current_ok_d+0xa8>)
 8001176:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d010      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff f9d1 	bl	800052c <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff fcb3 	bl	8000afc <__aeabi_dcmpgt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <COM_current_ok_d+0x40>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <COM_current_ok_d+0x42>
 80011a0:	2300      	movs	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4919      	ldr	r1, [pc, #100]	; (800120c <COM_current_ok_d+0xac>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fedc 	bl	8000f64 <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f7ff f9ba 	bl	800052c <__aeabi_f2d>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fc9d 	bl	8000afc <__aeabi_dcmpgt>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <COM_current_ok_d+0x6c>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <COM_current_ok_d+0x6e>
 80011cc:	2300      	movs	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	490f      	ldr	r1, [pc, #60]	; (8001210 <COM_current_ok_d+0xb0>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec6 	bl	8000f64 <inc_res>

	if (over_current > sample_constraint) {
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <COM_current_ok_d+0xac>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	883a      	ldrh	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d201      	bcs.n	80011e8 <COM_current_ok_d+0x88>
		return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e008      	b.n	80011fa <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <COM_current_ok_d+0xb0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	883a      	ldrh	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d201      	bcs.n	80011f8 <COM_current_ok_d+0x98>
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <COM_current_ok_d+0x9a>
	}

	return 1;
 80011f8:	2301      	movs	r3, #1

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	42200000 	.word	0x42200000
 8001208:	c2c80000 	.word	0xc2c80000
 800120c:	20001644 	.word	0x20001644
 8001210:	20001645 	.word	0x20001645

08001214 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <FAN_initialize+0x4c>)
 800121e:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001220:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001264 <FAN_initialize+0x50>
 8001224:	ed97 7a03 	vldr	s14, [r7, #12]
 8001228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0852      	lsrs	r2, r2, #1
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001250:	2108      	movs	r1, #8
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f010 fe2c 	bl	8011eb0 <HAL_TIM_PWM_Start>

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	447a0000 	.word	0x447a0000
 8001264:	477fff00 	.word	0x477fff00

08001268 <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001274:	edd7 7a00 	vldr	s15, [r7]
 8001278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d502      	bpl.n	8001288 <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001288:	edd7 7a00 	vldr	s15, [r7]
 800128c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012e0 <FAN_duty_cycle+0x78>
 8001290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	dd01      	ble.n	800129e <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <FAN_duty_cycle+0x7c>)
 800129c:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 800129e:	edd7 7a00 	vldr	s15, [r7]
 80012a2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80012e0 <FAN_duty_cycle+0x78>
 80012a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c4:	ee17 2a90 	vmov	r2, s15
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	42c80000 	.word	0x42c80000
 80012e4:	42c80000 	.word	0x42c80000

080012e8 <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	float ante = 0;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
	float conq = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d13c      	bne.n	8001384 <HAL_TIM_IC_CaptureCallback+0x9c>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800130a:	2104      	movs	r1, #4
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f011 fc65 	bl	8012bdc <HAL_TIM_ReadCapturedValue>
 8001312:	ee07 0a90 	vmov	s15, r0
 8001316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131a:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f011 fc5b 	bl	8012bdc <HAL_TIM_ReadCapturedValue>
 8001326:	ee07 0a90 	vmov	s15, r0
 800132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132e:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001332:	edd7 6a05 	vldr	s13, [r7, #20]
 8001336:	ed97 7a04 	vldr	s14, [r7, #16]
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001340:	edc3 7a00 	vstr	s15, [r3]
		IMD.frequency = 100000000 / (conq + 1);
 8001344:	edd7 7a04 	vldr	s15, [r7, #16]
 8001348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800134c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001350:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001390 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800135a:	edc3 7a01 	vstr	s15, [r3, #4]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	2302      	movs	r3, #2
 8001368:	4908      	ldr	r1, [pc, #32]	; (800138c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800136a:	f012 ff17 	bl	801419c <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_TIM_IC_CaptureCallback+0x9c>
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f3bf 8f4f 	dsb	sy
 8001380:	f3bf 8f6f 	isb	sy
	}
}
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20001648 	.word	0x20001648
 8001390:	4cbebc20 	.word	0x4cbebc20
 8001394:	2001b588 	.word	0x2001b588
 8001398:	e000ed04 	.word	0xe000ed04

0800139c <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <initialize_IMD+0x3c>)
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 80013ac:	2100      	movs	r1, #0
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f010 ff7c 	bl	80122ac <HAL_TIM_IC_Start_IT>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <initialize_IMD+0x22>
		Error_Handler();
 80013ba:	f002 fabb 	bl	8003934 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 80013be:	2104      	movs	r1, #4
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f010 fe97 	bl	80120f4 <HAL_TIM_IC_Start>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <initialize_IMD+0x34>
		Error_Handler();
 80013cc:	f002 fab2 	bl	8003934 <Error_Handler>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0280de80 	.word	0x0280de80

080013dc <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f103 0218 	add.w	r2, r3, #24
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	617a      	str	r2, [r7, #20]
 8001410:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	edd7 7a04 	vldr	s15, [r7, #16]
 800141c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	edd3 6a01 	vldr	s13, [r3, #4]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	edd3 7a03 	vldr	s15, [r3, #12]
 800142c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001430:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	edd3 6a02 	vldr	s13, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ed93 7a02 	vldr	s14, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 7a05 	vldr	s15, [r3, #20]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d503      	bpl.n	800148e <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed93 7a04 	vldr	s14, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 7a02 	vldr	s15, [r3, #8]
 800149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d503      	bpl.n	80014ac <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
	}

	return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af00      	add	r7, sp, #0
 80014c0:	61f8      	str	r0, [r7, #28]
 80014c2:	ed87 0a06 	vstr	s0, [r7, #24]
 80014c6:	edc7 0a05 	vstr	s1, [r7, #20]
 80014ca:	ed87 1a04 	vstr	s2, [r7, #16]
 80014ce:	edc7 1a03 	vstr	s3, [r7, #12]
 80014d2:	ed87 2a02 	vstr	s4, [r7, #8]
 80014d6:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 80014da:	ed97 7a01 	vldr	s14, [r7, #4]
 80014de:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	d501      	bpl.n	80014f0 <PID_initialize+0x36>
		return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e024      	b.n	800153a <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3318      	adds	r3, #24
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f016 fd0a 	bl	8017f4c <arm_pid_init_f32>

	return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <_cbSendSystemDesc+0x14>)
 800154a:	f016 fa7f 	bl	8017a4c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <_cbSendSystemDesc+0x18>)
 8001550:	f016 fa7c 	bl	8017a4c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08018c08 	.word	0x08018c08
 800155c:	08018c34 	.word	0x08018c34

08001560 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SEGGER_SYSVIEW_Conf+0x20>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SEGGER_SYSVIEW_Conf+0x20>)
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SEGGER_SYSVIEW_Conf+0x24>)
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <SEGGER_SYSVIEW_Conf+0x28>)
 8001570:	f015 fdea 	bl	8017148 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001578:	f015 fe2a 	bl	80171d0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000080 	.word	0x20000080
 8001584:	08001545 	.word	0x08001545
 8001588:	08018d68 	.word	0x08018d68

0800158c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e048      	b.n	800162a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001598:	4929      	ldr	r1, [pc, #164]	; (8001640 <_cbSendTaskList+0xb4>)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f014 f919 	bl	80157e0 <uxTaskGetStackHighWaterMark>
 80015ae:	4601      	mov	r1, r0
 80015b0:	4823      	ldr	r0, [pc, #140]	; (8001640 <_cbSendTaskList+0xb4>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4403      	add	r3, r0
 80015be:	3310      	adds	r3, #16
 80015c0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <_cbSendTaskList+0xb4>)
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <_cbSendTaskList+0xb4>)
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3304      	adds	r3, #4
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4c16      	ldr	r4, [pc, #88]	; (8001640 <_cbSendTaskList+0xb4>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4423      	add	r3, r4
 80015f2:	3308      	adds	r3, #8
 80015f4:	681c      	ldr	r4, [r3, #0]
 80015f6:	4d12      	ldr	r5, [pc, #72]	; (8001640 <_cbSendTaskList+0xb4>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	442b      	add	r3, r5
 8001604:	330c      	adds	r3, #12
 8001606:	681d      	ldr	r5, [r3, #0]
 8001608:	4e0d      	ldr	r6, [pc, #52]	; (8001640 <_cbSendTaskList+0xb4>)
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4433      	add	r3, r6
 8001616:	3310      	adds	r3, #16
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	462b      	mov	r3, r5
 800161e:	4622      	mov	r2, r4
 8001620:	f000 f8b6 	bl	8001790 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <_cbSendTaskList+0xb8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3b1      	bcc.n	8001598 <_cbSendTaskList+0xc>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	bf00      	nop
 8001640:	20001650 	.word	0x20001650
 8001644:	20001790 	.word	0x20001790

08001648 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800164e:	f013 fd9f 	bl	8015190 <xTaskGetTickCountFromISR>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800165e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	f04f 0400 	mov.w	r4, #0
 800166a:	f04f 0500 	mov.w	r5, #0
 800166e:	015d      	lsls	r5, r3, #5
 8001670:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001674:	0154      	lsls	r4, r2, #5
 8001676:	4622      	mov	r2, r4
 8001678:	462b      	mov	r3, r5
 800167a:	1a12      	subs	r2, r2, r0
 800167c:	eb63 0301 	sbc.w	r3, r3, r1
 8001680:	f04f 0400 	mov.w	r4, #0
 8001684:	f04f 0500 	mov.w	r5, #0
 8001688:	009d      	lsls	r5, r3, #2
 800168a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800168e:	0094      	lsls	r4, r2, #2
 8001690:	4622      	mov	r2, r4
 8001692:	462b      	mov	r3, r5
 8001694:	1812      	adds	r2, r2, r0
 8001696:	eb41 0303 	adc.w	r3, r1, r3
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	00d9      	lsls	r1, r3, #3
 80016a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016a8:	00d0      	lsls	r0, r2, #3
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80016b2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}

080016c0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80016ce:	2205      	movs	r2, #5
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <SYSVIEW_AddTask+0xc0>)
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f016 fc84 	bl	8017fe0 <memcmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d04b      	beq.n	8001776 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	d903      	bls.n	80016ee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80016e6:	4828      	ldr	r0, [pc, #160]	; (8001788 <SYSVIEW_AddTask+0xc8>)
 80016e8:	f016 fbd4 	bl	8017e94 <SEGGER_SYSVIEW_Warn>
    return;
 80016ec:	e044      	b.n	8001778 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4926      	ldr	r1, [pc, #152]	; (800178c <SYSVIEW_AddTask+0xcc>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4921      	ldr	r1, [pc, #132]	; (800178c <SYSVIEW_AddTask+0xcc>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	491b      	ldr	r1, [pc, #108]	; (800178c <SYSVIEW_AddTask+0xcc>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3308      	adds	r3, #8
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4916      	ldr	r1, [pc, #88]	; (800178c <SYSVIEW_AddTask+0xcc>)
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	330c      	adds	r3, #12
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4910      	ldr	r1, [pc, #64]	; (800178c <SYSVIEW_AddTask+0xcc>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3310      	adds	r3, #16
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <SYSVIEW_AddTask+0xc4>)
 8001762:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f80e 	bl	8001790 <SYSVIEW_SendTaskInfo>
 8001774:	e000      	b.n	8001778 <SYSVIEW_AddTask+0xb8>
    return;
 8001776:	bf00      	nop

}
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08018c44 	.word	0x08018c44
 8001784:	20001790 	.word	0x20001790
 8001788:	08018c4c 	.word	0x08018c4c
 800178c:	20001650 	.word	0x20001650

08001790 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2214      	movs	r2, #20
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f016 fc36 	bl	8018018 <memset>
  TaskInfo.TaskID     = TaskID;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4618      	mov	r0, r3
 80017c6:	f016 f849 	bl	801785c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <state_machine_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
void state_machine_step(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	static __called = 0;
	if (!__called++) {
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <state_machine_step+0xe0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	4935      	ldr	r1, [pc, #212]	; (80018b4 <state_machine_step+0xe0>)
 80017e0:	600a      	str	r2, [r1, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <state_machine_step+0x18>
		state = STATE_ENTRY;
 80017e6:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <state_machine_step+0xe4>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
	}

	switch (state) {
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <state_machine_step+0xe4>)
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	3301      	adds	r3, #1
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d84d      	bhi.n	8001894 <state_machine_step+0xc0>
 80017f8:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <state_machine_step+0x2c>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001825 	.word	0x08001825
 8001804:	08001895 	.word	0x08001895
 8001808:	08001833 	.word	0x08001833
 800180c:	08001841 	.word	0x08001841
 8001810:	0800184f 	.word	0x0800184f
 8001814:	0800185d 	.word	0x0800185d
 8001818:	0800186b 	.word	0x0800186b
 800181c:	08001879 	.word	0x08001879
 8001820:	08001887 	.word	0x08001887
	case STATE_ERROR:
		state = state_error_step();
 8001824:	f000 f850 	bl	80018c8 <state_error_step>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <state_machine_step+0xe4>)
 800182e:	701a      	strb	r2, [r3, #0]
		break;
 8001830:	e030      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_ENTRY:
		state = state_entry_step();
 8001832:	f000 f84e 	bl	80018d2 <state_entry_step>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <state_machine_step+0xe4>)
 800183c:	701a      	strb	r2, [r3, #0]
		break;
 800183e:	e029      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_IDLE:
		state = state_idle_step();
 8001840:	f000 f870 	bl	8001924 <state_idle_step>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <state_machine_step+0xe4>)
 800184a:	701a      	strb	r2, [r3, #0]
		break;
 800184c:	e022      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_PRECHARGE_DRIVE:
		state = state_precharge_drive_step();
 800184e:	f000 f8b7 	bl	80019c0 <state_precharge_drive_step>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <state_machine_step+0xe4>)
 8001858:	701a      	strb	r2, [r3, #0]
		break;
 800185a:	e01b      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_DRIVE:
		state = state_drive_step();
 800185c:	f000 f99e 	bl	8001b9c <state_drive_step>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <state_machine_step+0xe4>)
 8001866:	701a      	strb	r2, [r3, #0]
		break;
 8001868:	e014      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_PRECHARGE_CHARGE:
		state = state_precharge_charge_step();
 800186a:	f000 f9a5 	bl	8001bb8 <state_precharge_charge_step>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <state_machine_step+0xe4>)
 8001874:	701a      	strb	r2, [r3, #0]
		break;
 8001876:	e00d      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_CHARGE:
		state = state_charge_step();
 8001878:	f000 fbda 	bl	8002030 <state_charge_step>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <state_machine_step+0xe4>)
 8001882:	701a      	strb	r2, [r3, #0]
		break;
 8001884:	e006      	b.n	8001894 <state_machine_step+0xc0>
	case STATE_BALANCE:
		state = state_balance_step();
 8001886:	f000 fb07 	bl	8001e98 <state_balance_step>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <state_machine_step+0xe4>)
 8001890:	701a      	strb	r2, [r3, #0]
		break;
 8001892:	bf00      	nop
	}

	xQueueOverwrite(state_queue, &state);
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <state_machine_step+0xe8>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	2302      	movs	r3, #2
 800189a:	2200      	movs	r2, #0
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <state_machine_step+0xe4>)
 800189e:	f012 fb57 	bl	8013f50 <xQueueGenericSend>
	xQueueOverwrite(charge_state_queue, &charge_state);
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <state_machine_step+0xec>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	2302      	movs	r3, #2
 80018a8:	2200      	movs	r2, #0
 80018aa:	4906      	ldr	r1, [pc, #24]	; (80018c4 <state_machine_step+0xf0>)
 80018ac:	f012 fb50 	bl	8013f50 <xQueueGenericSend>

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000179c 	.word	0x2000179c
 80018b8:	20001794 	.word	0x20001794
 80018bc:	2001b574 	.word	0x2001b574
 80018c0:	2001b5a8 	.word	0x2001b5a8
 80018c4:	20001795 	.word	0x20001795

080018c8 <state_error_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_error_step(void) {
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
	/* WAIT FOR WATCHDOG TO KILL PROGRAMME */
	__disable_irq();
	for (;;)
 80018d0:	e7fe      	b.n	80018d0 <state_error_step+0x8>

080018d2 <state_entry_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_entry_step(void) {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0

	/* ALL PERIPHERALS SHOULD BE INITIALIZED AT THIS POINT. */
	/* .. IT WOULD BE A GOOD IDEA TO xQueueReceive() EVERY QUEUE/DATA PORT TO MAKE SURE THAT THEY ARE RUNNING*/

	set_precharge_ext(0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f002 f879 	bl	80039d0 <set_precharge_ext>
	set_air_plus_ext(0);
 80018de:	2000      	movs	r0, #0
 80018e0:	f002 f82e 	bl	8003940 <set_air_plus_ext>
	set_air_minus_ext(0);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f002 f84f 	bl	8003988 <set_air_minus_ext>
	set_enable_charge_ext(0);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f002 f8f6 	bl	8003adc <set_enable_charge_ext>

	for (int i = 0; i < 126; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	e009      	b.n	800190a <state_entry_step+0x38>
		set_balance_ext(0, i, NULL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	2000      	movs	r0, #0
 8001900:	f002 f900 	bl	8003b04 <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b7d      	cmp	r3, #125	; 0x7d
 800190e:	ddf2      	ble.n	80018f6 <state_entry_step+0x24>
	}

	osDelay(TICK2HZ * 5);
 8001910:	f44f 706e 	mov.w	r0, #952	; 0x3b8
 8001914:	f012 f8a7 	bl	8013a66 <osDelay>

	return STATE_IDLE;
 8001918:	2302      	movs	r3, #2
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <state_idle_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_idle_step(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	if (!get_sc_probe_ext() && SIM0_U.drive && SIM0_U.charge) {
 8001928:	f002 f88e 	bl	8003a48 <get_sc_probe_ext>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <state_idle_step+0x42>
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <state_idle_step+0x94>)
 8001934:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	f7ff f8b4 	bl	8000aac <__aeabi_dcmpeq>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <state_idle_step+0x42>
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <state_idle_step+0x94>)
 800194c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	f7ff f8a8 	bl	8000aac <__aeabi_dcmpeq>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <state_idle_step+0x42>
		return STATE_BALANCE;
 8001962:	2307      	movs	r3, #7
 8001964:	e026      	b.n	80019b4 <state_idle_step+0x90>
	}
	if (get_sc_probe_ext() && SIM0_U.drive) {
 8001966:	f002 f86f 	bl	8003a48 <get_sc_probe_ext>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <state_idle_step+0x68>
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <state_idle_step+0x94>)
 8001972:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f7ff f895 	bl	8000aac <__aeabi_dcmpeq>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <state_idle_step+0x68>
		return STATE_PRECHARGE_DRIVE;
 8001988:	2303      	movs	r3, #3
 800198a:	e013      	b.n	80019b4 <state_idle_step+0x90>
	}
	if (get_sc_probe_ext() && SIM0_U.charge) {
 800198c:	f002 f85c 	bl	8003a48 <get_sc_probe_ext>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00d      	beq.n	80019b2 <state_idle_step+0x8e>
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <state_idle_step+0x94>)
 8001998:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7ff f882 	bl	8000aac <__aeabi_dcmpeq>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <state_idle_step+0x8e>
		return STATE_PRECHARGE_CHARGE;
 80019ae:	2305      	movs	r3, #5
 80019b0:	e000      	b.n	80019b4 <state_idle_step+0x90>
	}

	return STATE_IDLE;
 80019b2:	2302      	movs	r3, #2
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2001e410 	.word	0x2001e410
 80019bc:	00000000 	.word	0x00000000

080019c0 <state_precharge_drive_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_precharge_drive_step(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
	float DELAY = 1.0 / 0.2;
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <state_precharge_drive_step+0x1d0>)
 80019c8:	61fb      	str	r3, [r7, #28]
	ivt_msg_result_u1_t U1;
	ivt_msg_result_u3_t U3;

	uint16_t precharge_timed_out = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* First we close the negative AIR */
	set_air_minus_ext(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f001 ffda 	bl	8003988 <set_air_minus_ext>
	osDelay(TICK2HZ * DELAY);
 80019d4:	69f8      	ldr	r0, [r7, #28]
 80019d6:	f7fe fda9 	bl	800052c <__aeabi_f2d>
 80019da:	a369      	add	r3, pc, #420	; (adr r3, 8001b80 <state_precharge_drive_step+0x1c0>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fdfc 	bl	80005dc <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8ce 	bl	8000b8c <__aeabi_d2uiz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f012 f837 	bl	8013a66 <osDelay>
	if (get_air_minus_ext() == 0) {
 80019f8:	f001 ffda 	bl	80039b0 <get_air_minus_ext>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <state_precharge_drive_step+0x46>

		return STATE_IDLE;
 8001a02:	2302      	movs	r3, #2
 8001a04:	e0b7      	b.n	8001b76 <state_precharge_drive_step+0x1b6>
	}

	/* Then we close the precharge resistor relay */
	set_precharge_ext(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f001 ffe2 	bl	80039d0 <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 8001a0c:	69f8      	ldr	r0, [r7, #28]
 8001a0e:	f7fe fd8d 	bl	800052c <__aeabi_f2d>
 8001a12:	a35b      	add	r3, pc, #364	; (adr r3, 8001b80 <state_precharge_drive_step+0x1c0>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fde0 	bl	80005dc <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f8b2 	bl	8000b8c <__aeabi_d2uiz>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f012 f81b 	bl	8013a66 <osDelay>
	if (get_precharge_ext() == 0) {
 8001a30:	f001 ffe2 	bl	80039f8 <get_precharge_ext>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <state_precharge_drive_step+0x7e>

		return STATE_IDLE;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e09b      	b.n	8001b76 <state_precharge_drive_step+0x1b6>

	/*
	 * Now we wait a minimum of 0.5s and a maximum of 15s for the inverter (vehicle) voltage to
	 * reach 95% of the accumulator (cell) voltage.
	 */
	uint32_t initial_tick = osKernelGetTickCount();
 8001a3e:	f011 ff6b 	bl	8013918 <osKernelGetTickCount>
 8001a42:	61b8      	str	r0, [r7, #24]
	uint32_t current_tick = osKernelGetTickCount();
 8001a44:	f011 ff68 	bl	8013918 <osKernelGetTickCount>
 8001a48:	6238      	str	r0, [r7, #32]
	uint32_t min_tick = TICK2HZ * 0.5 / 0.2; // Wait at least 0.5 seconds
 8001a4a:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8001a4e:	617b      	str	r3, [r7, #20]
	uint32_t max_tick = TICK2HZ * 25 / 0.2; // Wait at most 15 seconds
 8001a50:	f645 5301 	movw	r3, #23809	; 0x5d01
 8001a54:	613b      	str	r3, [r7, #16]

	/* We want the data to be up-to-date. Clear whatever is currently gathered */
	xQueueReceive(ivt_msg_result_u1_queue, &U1, 0);
 8001a56:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <state_precharge_drive_step+0x1d4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f107 0108 	add.w	r1, r7, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f012 fc4b 	bl	80142fc <xQueueReceive>
	xQueueReceive(ivt_msg_result_u3_queue, &U3, 0);
 8001a66:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <state_precharge_drive_step+0x1d8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4639      	mov	r1, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f012 fc44 	bl	80142fc <xQueueReceive>

	for (;; current_tick = osKernelGetTickCount()) {
		osDelay(TICK2HZ * 0.100);
 8001a74:	2013      	movs	r0, #19
 8001a76:	f011 fff6 	bl	8013a66 <osDelay>

		/* Skip the first few loops */
		if (min_tick > (current_tick - initial_tick)) {
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d832      	bhi.n	8001aec <state_precharge_drive_step+0x12c>
			continue;
		}

		/* If 15s have gone by and we haven't left this loop, then we should exit */
		if ((current_tick - initial_tick) > max_tick) {
 8001a86:	6a3a      	ldr	r2, [r7, #32]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d202      	bcs.n	8001a98 <state_precharge_drive_step+0xd8>
			precharge_timed_out = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8001a96:	e030      	b.n	8001afa <state_precharge_drive_step+0x13a>
		}

		/* If no new voltage data is retrieved we shouldn't go on */
		if (!(xQueueReceive(ivt_msg_result_u1_queue, &U1, 0)
 8001a98:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <state_precharge_drive_step+0x1d4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f107 0108 	add.w	r1, r7, #8
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f012 fc2a 	bl	80142fc <xQueueReceive>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d020      	beq.n	8001af0 <state_precharge_drive_step+0x130>
				&& xQueueReceive(ivt_msg_result_u3_queue, &U3, 0))) {
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <state_precharge_drive_step+0x1d8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4639      	mov	r1, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f012 fc20 	bl	80142fc <xQueueReceive>
 8001abc:	4603      	mov	r3, r0
		if (!(xQueueReceive(ivt_msg_result_u1_queue, &U1, 0)
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <state_precharge_drive_step+0x130>
			continue;
		}

		/* If we are within time constraints and the data is up-to-date and satisfactory, then go on! */
		if (0.95 * U1.u_cells < U3.u_vehicle) {
 8001ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac6:	a330      	add	r3, pc, #192	; (adr r3, 8001b88 <state_precharge_drive_step+0x1c8>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fd86 	bl	80005dc <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001adc:	f7fe fff0 	bl	8000ac0 <__aeabi_dcmplt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <state_precharge_drive_step+0x132>
			precharge_timed_out = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8001aea:	e006      	b.n	8001afa <state_precharge_drive_step+0x13a>
			continue;
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <state_precharge_drive_step+0x132>
			continue;
 8001af0:	bf00      	nop
	for (;; current_tick = osKernelGetTickCount()) {
 8001af2:	f011 ff11 	bl	8013918 <osKernelGetTickCount>
 8001af6:	6238      	str	r0, [r7, #32]
		osDelay(TICK2HZ * 0.100);
 8001af8:	e7bc      	b.n	8001a74 <state_precharge_drive_step+0xb4>
		}

	}
	if (precharge_timed_out == 1) {
 8001afa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <state_precharge_drive_step+0x144>

		return STATE_IDLE;
 8001b00:	2302      	movs	r3, #2
 8001b02:	e038      	b.n	8001b76 <state_precharge_drive_step+0x1b6>
	}

	/* Now we close the positive AIR */
	set_air_plus_ext(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f001 ff1b 	bl	8003940 <set_air_plus_ext>
	osDelay(TICK2HZ * DELAY);
 8001b0a:	69f8      	ldr	r0, [r7, #28]
 8001b0c:	f7fe fd0e 	bl	800052c <__aeabi_f2d>
 8001b10:	a31b      	add	r3, pc, #108	; (adr r3, 8001b80 <state_precharge_drive_step+0x1c0>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd61 	bl	80005dc <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f833 	bl	8000b8c <__aeabi_d2uiz>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f011 ff9c 	bl	8013a66 <osDelay>
	if (get_air_plus_ext() == 0) {
 8001b2e:	f001 ff1b 	bl	8003968 <get_air_plus_ext>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <state_precharge_drive_step+0x17c>

		return STATE_IDLE;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e01c      	b.n	8001b76 <state_precharge_drive_step+0x1b6>
	}

	/* At last we open the precharge resistor relay, so we don't burn it if the positive AIR opens unexpectedly */
	set_precharge_ext(0);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f001 ff47 	bl	80039d0 <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 8001b42:	69f8      	ldr	r0, [r7, #28]
 8001b44:	f7fe fcf2 	bl	800052c <__aeabi_f2d>
 8001b48:	a30d      	add	r3, pc, #52	; (adr r3, 8001b80 <state_precharge_drive_step+0x1c0>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fd45 	bl	80005dc <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f817 	bl	8000b8c <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f011 ff80 	bl	8013a66 <osDelay>
	if (get_precharge_ext() == 1) {
 8001b66:	f001 ff47 	bl	80039f8 <get_precharge_ext>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <state_precharge_drive_step+0x1b4>

		return STATE_IDLE;
 8001b70:	2302      	movs	r3, #2
 8001b72:	e000      	b.n	8001b76 <state_precharge_drive_step+0x1b6>
	}

	return STATE_DRIVE;
 8001b74:	2304      	movs	r3, #4
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	f3cf3cf4 	.word	0xf3cf3cf4
 8001b84:	4067cf3c 	.word	0x4067cf3c
 8001b88:	66666666 	.word	0x66666666
 8001b8c:	3fee6666 	.word	0x3fee6666
 8001b90:	40a00000 	.word	0x40a00000
 8001b94:	2001b59c 	.word	0x2001b59c
 8001b98:	2001b584 	.word	0x2001b584

08001b9c <state_drive_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_drive_step(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	if (!get_sc_probe_ext()) {
 8001ba0:	f001 ff52 	bl	8003a48 <get_sc_probe_ext>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <state_drive_step+0x12>
		return STATE_IDLE;
 8001baa:	2302      	movs	r3, #2
 8001bac:	e000      	b.n	8001bb0 <state_drive_step+0x14>
	}
	return STATE_DRIVE;
 8001bae:	2304      	movs	r3, #4
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	0000      	movs	r0, r0
	...

08001bb8 <state_precharge_charge_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_precharge_charge_step(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
	float DELAY = 1.0 / 0.2;
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <state_precharge_charge_step+0x1f0>)
 8001bc0:	61fb      	str	r3, [r7, #28]
	ivt_msg_result_u1_t U1;
	ivt_msg_result_u3_t U3;

	set_charger_voltage_limit_ext(4.15 * 126);
 8001bc2:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8001d88 <state_precharge_charge_step+0x1d0>
 8001bc6:	f001 ff61 	bl	8003a8c <set_charger_voltage_limit_ext>
	set_charger_current_limit_ext(2 * 6.6);
 8001bca:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8001d90 <state_precharge_charge_step+0x1d8>
 8001bce:	f001 ff71 	bl	8003ab4 <set_charger_current_limit_ext>

	uint16_t precharge_timed_out = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* First we close the negative AIR */
	set_air_minus_ext(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f001 fed6 	bl	8003988 <set_air_minus_ext>
	osDelay(TICK2HZ * DELAY);
 8001bdc:	69f8      	ldr	r0, [r7, #28]
 8001bde:	f7fe fca5 	bl	800052c <__aeabi_f2d>
 8001be2:	a36d      	add	r3, pc, #436	; (adr r3, 8001d98 <state_precharge_charge_step+0x1e0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fcf8 	bl	80005dc <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ffca 	bl	8000b8c <__aeabi_d2uiz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f011 ff33 	bl	8013a66 <osDelay>
	if (get_air_minus_ext() == 0) {
 8001c00:	f001 fed6 	bl	80039b0 <get_air_minus_ext>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <state_precharge_charge_step+0x56>

		return STATE_IDLE;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0b7      	b.n	8001d7e <state_precharge_charge_step+0x1c6>
	}

	/* Then we close the precharge resistor relay */
	set_precharge_ext(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f001 fede 	bl	80039d0 <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 8001c14:	69f8      	ldr	r0, [r7, #28]
 8001c16:	f7fe fc89 	bl	800052c <__aeabi_f2d>
 8001c1a:	a35f      	add	r3, pc, #380	; (adr r3, 8001d98 <state_precharge_charge_step+0x1e0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fcdc 	bl	80005dc <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ffae 	bl	8000b8c <__aeabi_d2uiz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f011 ff17 	bl	8013a66 <osDelay>
	if (get_precharge_ext() == 0) {
 8001c38:	f001 fede 	bl	80039f8 <get_precharge_ext>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <state_precharge_charge_step+0x8e>

		return STATE_IDLE;
 8001c42:	2302      	movs	r3, #2
 8001c44:	e09b      	b.n	8001d7e <state_precharge_charge_step+0x1c6>

	/*
	 * Now we wait a minimum of 0.5s and a maximum of 15s for the inverter (vehicle) voltage to
	 * reach 95% of the accumulator (cell) voltage.
	 */
	uint32_t initial_tick = osKernelGetTickCount();
 8001c46:	f011 fe67 	bl	8013918 <osKernelGetTickCount>
 8001c4a:	61b8      	str	r0, [r7, #24]
	uint32_t current_tick = osKernelGetTickCount();
 8001c4c:	f011 fe64 	bl	8013918 <osKernelGetTickCount>
 8001c50:	6238      	str	r0, [r7, #32]
	uint32_t min_tick = TICK2HZ * 0.5 / 0.2; // Wait at least 0.5 seconds
 8001c52:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8001c56:	617b      	str	r3, [r7, #20]
	uint32_t max_tick = TICK2HZ * 25 / 0.2; // Wait at most 15 seconds
 8001c58:	f645 5301 	movw	r3, #23809	; 0x5d01
 8001c5c:	613b      	str	r3, [r7, #16]

	/* We want the data to be up-to-date. Clear whatever is currently gathered */
	xQueueReceive(ivt_msg_result_u1_queue, &U1, 0);
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <state_precharge_charge_step+0x1f4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f107 0108 	add.w	r1, r7, #8
 8001c66:	2200      	movs	r2, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f012 fb47 	bl	80142fc <xQueueReceive>
	xQueueReceive(ivt_msg_result_u3_queue, &U3, 0);
 8001c6e:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <state_precharge_charge_step+0x1f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4639      	mov	r1, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f012 fb40 	bl	80142fc <xQueueReceive>

	for (;; current_tick = osKernelGetTickCount()) {
		osDelay(TICK2HZ * 0.100);
 8001c7c:	2013      	movs	r0, #19
 8001c7e:	f011 fef2 	bl	8013a66 <osDelay>

		/* Skip the first few loops */
		if (min_tick > (current_tick - initial_tick)) {
 8001c82:	6a3a      	ldr	r2, [r7, #32]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d832      	bhi.n	8001cf4 <state_precharge_charge_step+0x13c>
			continue;
		}

		/* If 15s have gone by and we haven't left this loop, then we should exit */
		if ((current_tick - initial_tick) > max_tick) {
 8001c8e:	6a3a      	ldr	r2, [r7, #32]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d202      	bcs.n	8001ca0 <state_precharge_charge_step+0xe8>
			precharge_timed_out = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8001c9e:	e030      	b.n	8001d02 <state_precharge_charge_step+0x14a>
		}

		/* If no new voltage data is retrieved we shouldn't go on */
		if (!(xQueueReceive(ivt_msg_result_u1_queue, &U1, 0)
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <state_precharge_charge_step+0x1f4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f107 0108 	add.w	r1, r7, #8
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f012 fb26 	bl	80142fc <xQueueReceive>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d020      	beq.n	8001cf8 <state_precharge_charge_step+0x140>
				&& xQueueReceive(ivt_msg_result_u3_queue, &U3, 0))) {
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <state_precharge_charge_step+0x1f8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4639      	mov	r1, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f012 fb1c 	bl	80142fc <xQueueReceive>
 8001cc4:	4603      	mov	r3, r0
		if (!(xQueueReceive(ivt_msg_result_u1_queue, &U1, 0)
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d016      	beq.n	8001cf8 <state_precharge_charge_step+0x140>
			continue;
		}

		/* If we are within time constraints and the data is up-to-date and satisfactory, then go on! */
		if (0.95 * U1.u_cells < U3.u_vehicle) {
 8001cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cce:	a334      	add	r3, pc, #208	; (adr r3, 8001da0 <state_precharge_charge_step+0x1e8>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc82 	bl	80005dc <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ce4:	f7fe feec 	bl	8000ac0 <__aeabi_dcmplt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <state_precharge_charge_step+0x142>
			precharge_timed_out = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8001cf2:	e006      	b.n	8001d02 <state_precharge_charge_step+0x14a>
			continue;
 8001cf4:	bf00      	nop
 8001cf6:	e000      	b.n	8001cfa <state_precharge_charge_step+0x142>
			continue;
 8001cf8:	bf00      	nop
	for (;; current_tick = osKernelGetTickCount()) {
 8001cfa:	f011 fe0d 	bl	8013918 <osKernelGetTickCount>
 8001cfe:	6238      	str	r0, [r7, #32]
		osDelay(TICK2HZ * 0.100);
 8001d00:	e7bc      	b.n	8001c7c <state_precharge_charge_step+0xc4>
		}

	}
	if (precharge_timed_out == 1) {
 8001d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <state_precharge_charge_step+0x154>

		return STATE_IDLE;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e038      	b.n	8001d7e <state_precharge_charge_step+0x1c6>
	}

	/* Now we close the positive AIR */
	set_air_plus_ext(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f001 fe17 	bl	8003940 <set_air_plus_ext>
	osDelay(TICK2HZ * DELAY);
 8001d12:	69f8      	ldr	r0, [r7, #28]
 8001d14:	f7fe fc0a 	bl	800052c <__aeabi_f2d>
 8001d18:	a31f      	add	r3, pc, #124	; (adr r3, 8001d98 <state_precharge_charge_step+0x1e0>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc5d 	bl	80005dc <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff2f 	bl	8000b8c <__aeabi_d2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f011 fe98 	bl	8013a66 <osDelay>
	if (get_air_plus_ext() == 0) {
 8001d36:	f001 fe17 	bl	8003968 <get_air_plus_ext>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <state_precharge_charge_step+0x18c>

		return STATE_IDLE;
 8001d40:	2302      	movs	r3, #2
 8001d42:	e01c      	b.n	8001d7e <state_precharge_charge_step+0x1c6>
	}

	/* At last we open the precharge resistor relay, so we don't burn it if the positive AIR opens unexpectedly */
	set_precharge_ext(0);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f001 fe43 	bl	80039d0 <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 8001d4a:	69f8      	ldr	r0, [r7, #28]
 8001d4c:	f7fe fbee 	bl	800052c <__aeabi_f2d>
 8001d50:	a311      	add	r3, pc, #68	; (adr r3, 8001d98 <state_precharge_charge_step+0x1e0>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fc41 	bl	80005dc <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe ff13 	bl	8000b8c <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f011 fe7c 	bl	8013a66 <osDelay>
	if (get_precharge_ext() == 1) {
 8001d6e:	f001 fe43 	bl	80039f8 <get_precharge_ext>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <state_precharge_charge_step+0x1c4>

		return STATE_IDLE;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e000      	b.n	8001d7e <state_precharge_charge_step+0x1c6>
	}

	return STATE_CHARGE;
 8001d7c:	2306      	movs	r3, #6
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	33333334 	.word	0x33333334
 8001d8c:	40805733 	.word	0x40805733
 8001d90:	66666666 	.word	0x66666666
 8001d94:	402a6666 	.word	0x402a6666
 8001d98:	f3cf3cf4 	.word	0xf3cf3cf4
 8001d9c:	4067cf3c 	.word	0x4067cf3c
 8001da0:	66666666 	.word	0x66666666
 8001da4:	3fee6666 	.word	0x3fee6666
 8001da8:	40a00000 	.word	0x40a00000
 8001dac:	2001b59c 	.word	0x2001b59c
 8001db0:	2001b584 	.word	0x2001b584

08001db4 <gnome_cmp>:
static double *voltages;
double mean;
double var;


uint8_t gnome_cmp(uint8_t x) {
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	return (voltages[I[x]] <= voltages[I[x - 1]]);
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <gnome_cmp+0x4c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	490f      	ldr	r1, [pc, #60]	; (8001e04 <gnome_cmp+0x50>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <gnome_cmp+0x4c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	; (8001e04 <gnome_cmp+0x50>)
 8001dda:	5ce3      	ldrb	r3, [r4, r3]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	2401      	movs	r4, #1
 8001de6:	f7fe fe75 	bl	8000ad4 <__aeabi_dcmple>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <gnome_cmp+0x40>
 8001df0:	2300      	movs	r3, #0
 8001df2:	461c      	mov	r4, r3
 8001df4:	b2e3      	uxtb	r3, r4
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20001798 	.word	0x20001798
 8001e04:	20000000 	.word	0x20000000

08001e08 <gnome_swap>:

uint8_t gnome_swap(uint8_t x) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	uint8_t c = I[x];
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <gnome_swap+0x38>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	73fb      	strb	r3, [r7, #15]
	I[x] = I[x - 1];
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4907      	ldr	r1, [pc, #28]	; (8001e40 <gnome_swap+0x38>)
 8001e22:	5c89      	ldrb	r1, [r1, r2]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <gnome_swap+0x38>)
 8001e26:	54d1      	strb	r1, [r2, r3]
	I[x - 1] = c;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <gnome_swap+0x38>)
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	54ca      	strb	r2, [r1, r3]
}
 8001e32:	bf00      	nop
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	20000000 	.word	0x20000000

08001e44 <gnome_sort>:

void gnome_sort() {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	uint8_t pos = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	while (pos < 126) {
 8001e4e:	e018      	b.n	8001e82 <gnome_sort+0x3e>
		if (pos == 0) {
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <gnome_sort+0x1a>
			pos++;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	e011      	b.n	8001e82 <gnome_sort+0x3e>
		} else if (gnome_cmp(pos)) {
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ffa7 	bl	8001db4 <gnome_cmp>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <gnome_sort+0x30>
			pos++;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e006      	b.n	8001e82 <gnome_sort+0x3e>
		} else {
			gnome_swap(pos);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ffc6 	bl	8001e08 <gnome_swap>
			pos--;
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
	while (pos < 126) {
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b7d      	cmp	r3, #125	; 0x7d
 8001e86:	d9e3      	bls.n	8001e50 <gnome_sort+0xc>
		}
	}

}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	0000      	movs	r0, r0
 8001e94:	0000      	movs	r0, r0
	...

08001e98 <state_balance_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_balance_step(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
	static k = 0;

	if (xQueuePeek(voltages_d_queue, &voltages, 0)) {
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <state_balance_step+0x178>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	495b      	ldr	r1, [pc, #364]	; (8002014 <state_balance_step+0x17c>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f012 fb38 	bl	801451c <xQueuePeek>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80a4 	beq.w	8001ffc <state_balance_step+0x164>
		mean = 0;
 8001eb4:	4958      	ldr	r1, [pc, #352]	; (8002018 <state_balance_step+0x180>)
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9c1 2300 	strd	r2, r3, [r1]
		var = 0;
 8001ec2:	4956      	ldr	r1, [pc, #344]	; (800201c <state_balance_step+0x184>)
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]
		double svar = 0;
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9c7 2300 	strd	r2, r3, [r7]

		for (int i = 0; i < 126; i++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e013      	b.n	8001f0a <state_balance_step+0x72>
			mean += voltages[i];
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <state_balance_step+0x17c>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef0:	4b49      	ldr	r3, [pc, #292]	; (8002018 <state_balance_step+0x180>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe f9bb 	bl	8000270 <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4946      	ldr	r1, [pc, #280]	; (8002018 <state_balance_step+0x180>)
 8001f00:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 126; i++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b7d      	cmp	r3, #125	; 0x7d
 8001f0e:	dde8      	ble.n	8001ee2 <state_balance_step+0x4a>
		}
		mean /= 126;
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <state_balance_step+0x180>)
 8001f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <state_balance_step+0x188>)
 8001f1c:	f7fe fc88 	bl	8000830 <__aeabi_ddiv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	493c      	ldr	r1, [pc, #240]	; (8002018 <state_balance_step+0x180>)
 8001f26:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 126; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e01d      	b.n	8001f6c <state_balance_step+0xd4>
			svar = voltages[i] - mean;
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <state_balance_step+0x17c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <state_balance_step+0x180>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe f992 	bl	800026c <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	e9c7 2300 	strd	r2, r3, [r7]
			var = svar * svar;
 8001f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f58:	f7fe fb40 	bl	80005dc <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	492e      	ldr	r1, [pc, #184]	; (800201c <state_balance_step+0x184>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 126; i++) {
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b7d      	cmp	r3, #125	; 0x7d
 8001f70:	ddde      	ble.n	8001f30 <state_balance_step+0x98>
		}

		if (var < 0.000001) {
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <state_balance_step+0x184>)
 8001f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f78:	a323      	add	r3, pc, #140	; (adr r3, 8002008 <state_balance_step+0x170>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fd9f 	bl	8000ac0 <__aeabi_dcmplt>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <state_balance_step+0xf4>
			return STATE_ENTRY;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e038      	b.n	8001ffe <state_balance_step+0x166>
		}

		gnome_sort();
 8001f8c:	f7ff ff5a 	bl	8001e44 <gnome_sort>


		if (k == 0) {
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <state_balance_step+0x18c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d121      	bne.n	8001fdc <state_balance_step+0x144>
			for (int i = 0; i < 126; i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e009      	b.n	8001fb2 <state_balance_step+0x11a>
				set_balance_ext(0, i, NULL);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f001 fdac 	bl	8003b04 <set_balance_ext>
			for (int i = 0; i < 126; i++) {
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b7d      	cmp	r3, #125	; 0x7d
 8001fb6:	ddf2      	ble.n	8001f9e <state_balance_step+0x106>
			}
			for (int i = 0; i < 42; i++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	e00b      	b.n	8001fd6 <state_balance_step+0x13e>
				set_balance_ext(1, I[i], NULL);
 8001fbe:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <state_balance_step+0x190>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f001 fd9a 	bl	8003b04 <set_balance_ext>
			for (int i = 0; i < 42; i++) {
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b29      	cmp	r3, #41	; 0x29
 8001fda:	ddf0      	ble.n	8001fbe <state_balance_step+0x126>
			}

		}


		k = (k + 1) % 300;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <state_balance_step+0x18c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <state_balance_step+0x194>)
 8001fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fe8:	1159      	asrs	r1, r3, #5
 8001fea:	17d3      	asrs	r3, r2, #31
 8001fec:	1acb      	subs	r3, r1, r3
 8001fee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <state_balance_step+0x18c>)
 8001ffa:	6013      	str	r3, [r2, #0]

	}

	return STATE_BALANCE;
 8001ffc:	2307      	movs	r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	a0b5ed8d 	.word	0xa0b5ed8d
 800200c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002010:	2001b5a4 	.word	0x2001b5a4
 8002014:	20001798 	.word	0x20001798
 8002018:	2001b5b8 	.word	0x2001b5b8
 800201c:	2001b5c0 	.word	0x2001b5c0
 8002020:	405f8000 	.word	0x405f8000
 8002024:	200017a0 	.word	0x200017a0
 8002028:	20000000 	.word	0x20000000
 800202c:	1b4e81b5 	.word	0x1b4e81b5

08002030 <state_charge_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_charge_step(void) {
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
	set_enable_charge_ext(1);
 8002036:	2001      	movs	r0, #1
 8002038:	f001 fd50 	bl	8003adc <set_enable_charge_ext>

	SIM0_U.VoltageLimit = 4.15 * 126;
 800203c:	4930      	ldr	r1, [pc, #192]	; (8002100 <state_charge_step+0xd0>)
 800203e:	a32a      	add	r3, pc, #168	; (adr r3, 80020e8 <state_charge_step+0xb8>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	SIM0_U.CurrentLimit = 2 * 6.6;
 8002048:	492d      	ldr	r1, [pc, #180]	; (8002100 <state_charge_step+0xd0>)
 800204a:	a329      	add	r3, pc, #164	; (adr r3, 80020f0 <state_charge_step+0xc0>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	if (xQueuePeek(voltages_d_queue, &voltages, 0)) {
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <state_charge_step+0xd4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	492b      	ldr	r1, [pc, #172]	; (8002108 <state_charge_step+0xd8>)
 800205c:	4618      	mov	r0, r3
 800205e:	f012 fa5d 	bl	801451c <xQueuePeek>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d038      	beq.n	80020da <state_charge_step+0xaa>
		float max = 0;
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 126; i++) {
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	e022      	b.n	80020ba <state_charge_step+0x8a>
			if (voltages[i] > max) {
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <state_charge_step+0xd8>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fa52 	bl	800052c <__aeabi_f2d>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe fd34 	bl	8000afc <__aeabi_dcmpgt>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <state_charge_step+0x84>
				max = voltages[i];
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <state_charge_step+0xd8>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fd8e 	bl	8000bcc <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 126; i++) {
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b7d      	cmp	r3, #125	; 0x7d
 80020be:	ddd9      	ble.n	8002074 <state_charge_step+0x44>
			}
		}
		if (max > 4.15) {
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fa33 	bl	800052c <__aeabi_f2d>
 80020c6:	a30c      	add	r3, pc, #48	; (adr r3, 80020f8 <state_charge_step+0xc8>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe fd16 	bl	8000afc <__aeabi_dcmpgt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <state_charge_step+0xaa>
			return STATE_ENTRY;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <state_charge_step+0xac>
		}
	}

	return STATE_CHARGE;
 80020da:	2306      	movs	r3, #6
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdb0      	pop	{r4, r5, r7, pc}
 80020e4:	f3af 8000 	nop.w
 80020e8:	33333334 	.word	0x33333334
 80020ec:	40805733 	.word	0x40805733
 80020f0:	66666666 	.word	0x66666666
 80020f4:	402a6666 	.word	0x402a6666
 80020f8:	9999999a 	.word	0x9999999a
 80020fc:	40109999 	.word	0x40109999
 8002100:	2001e410 	.word	0x2001e410
 8002104:	2001b5a4 	.word	0x2001b5a4
 8002108:	20001798 	.word	0x20001798

0800210c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002112:	463b      	mov	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002120:	4a37      	ldr	r2, [pc, #220]	; (8002200 <MX_ADC1_Init+0xf4>)
 8002122:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002124:	4b35      	ldr	r3, [pc, #212]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800212a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <MX_ADC1_Init+0xf0>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002134:	2201      	movs	r2, #1
 8002136:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <MX_ADC1_Init+0xf0>)
 800213a:	2200      	movs	r2, #0
 800213c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <MX_ADC1_Init+0xf0>)
 800215e:	2204      	movs	r2, #4
 8002160:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <MX_ADC1_Init+0xf0>)
 800216c:	2201      	movs	r2, #1
 800216e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002170:	4822      	ldr	r0, [pc, #136]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002172:	f00d f985 	bl	800f480 <HAL_ADC_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800217c:	f001 fbda 	bl	8003934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002180:	2301      	movs	r3, #1
 8002182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002184:	2301      	movs	r3, #1
 8002186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002188:	2302      	movs	r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	481a      	ldr	r0, [pc, #104]	; (80021fc <MX_ADC1_Init+0xf0>)
 8002192:	f00d fc27 	bl	800f9e4 <HAL_ADC_ConfigChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800219c:	f001 fbca 	bl	8003934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021a0:	2302      	movs	r3, #2
 80021a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4813      	ldr	r0, [pc, #76]	; (80021fc <MX_ADC1_Init+0xf0>)
 80021ae:	f00d fc19 	bl	800f9e4 <HAL_ADC_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80021b8:	f001 fbbc 	bl	8003934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021bc:	2303      	movs	r3, #3
 80021be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80021c0:	2303      	movs	r3, #3
 80021c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c4:	463b      	mov	r3, r7
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <MX_ADC1_Init+0xf0>)
 80021ca:	f00d fc0b 	bl	800f9e4 <HAL_ADC_ConfigChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80021d4:	f001 fbae 	bl	8003934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021d8:	2304      	movs	r3, #4
 80021da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80021dc:	2304      	movs	r3, #4
 80021de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_ADC1_Init+0xf0>)
 80021e6:	f00d fbfd 	bl	800f9e4 <HAL_ADC_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80021f0:	f001 fba0 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2001b5c8 	.word	0x2001b5c8
 8002200:	40012000 	.word	0x40012000

08002204 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_ADC_MspInit+0xec>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d15f      	bne.n	80022e6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_ADC_MspInit+0xf0>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_ADC_MspInit+0xf0>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_ADC_MspInit+0xf0>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_ADC_MspInit+0xf0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_ADC_MspInit+0xf0>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_ADC_MspInit+0xf0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 800225e:	231e      	movs	r3, #30
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002262:	2303      	movs	r3, #3
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4821      	ldr	r0, [pc, #132]	; (80022f8 <HAL_ADC_MspInit+0xf4>)
 8002272:	f00e fde7 	bl	8010e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 8002278:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_ADC_MspInit+0xfc>)
 800227a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 8002290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002294:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 8002298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800229c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ba:	4810      	ldr	r0, [pc, #64]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022bc:	f00e fa52 	bl	8010764 <HAL_DMA_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022c6:	f001 fb35 	bl	8003934 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_ADC_MspInit+0xf8>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2105      	movs	r1, #5
 80022da:	2012      	movs	r0, #18
 80022dc:	f00e fa18 	bl	8010710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022e0:	2012      	movs	r0, #18
 80022e2:	f00e fa31 	bl	8010748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	; 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40012000 	.word	0x40012000
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	2001b610 	.word	0x2001b610
 8002300:	40026410 	.word	0x40026410
 8002304:	00000000 	.word	0x00000000

08002308 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(ams_temperatures_t *ams_temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 8002308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800230c:	b08e      	sub	sp, #56	; 0x38
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8002318:	4bdb      	ldr	r3, [pc, #876]	; (8002688 <interpret_ADC_buffer+0x380>)
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 800231c:	4bdb      	ldr	r3, [pc, #876]	; (800268c <interpret_ADC_buffer+0x384>)
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8002320:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002324:	eeb1 7a67 	vneg.f32	s14, s15
 8002328:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800232c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002330:	ee16 0a90 	vmov	r0, s13
 8002334:	f7fe f8fa 	bl	800052c <__aeabi_f2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	ec43 2b10 	vmov	d0, r2, r3
 8002340:	f015 ff8a 	bl	8018258 <exp>
 8002344:	ec51 0b10 	vmov	r0, r1, d0
 8002348:	a3cb      	add	r3, pc, #812	; (adr r3, 8002678 <interpret_ADC_buffer+0x370>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fe f945 	bl	80005dc <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc37 	bl	8000bcc <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8002362:	4bcb      	ldr	r3, [pc, #812]	; (8002690 <interpret_ADC_buffer+0x388>)
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8002366:	4bcb      	ldr	r3, [pc, #812]	; (8002694 <interpret_ADC_buffer+0x38c>)
 8002368:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 800236a:	2300      	movs	r3, #0
 800236c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800236e:	e063      	b.n	8002438 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8002370:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002378:	4413      	add	r3, r2
 800237a:	3b28      	subs	r3, #40	; 0x28
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 8002382:	2300      	movs	r3, #0
 8002384:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002386:	e020      	b.n	80023ca <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8002388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002390:	4413      	add	r3, r2
 8002392:	3b28      	subs	r3, #40	; 0x28
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023bc:	4413      	add	r3, r2
 80023be:	3b28      	subs	r3, #40	; 0x28
 80023c0:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 80023c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023c6:	3301      	adds	r3, #1
 80023c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3d9      	bcc.n	8002388 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 80023d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023dc:	4413      	add	r3, r2
 80023de:	3b28      	subs	r3, #40	; 0x28
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023fa:	4413      	add	r3, r2
 80023fc:	3b28      	subs	r3, #40	; 0x28
 80023fe:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8002402:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800240a:	4413      	add	r3, r2
 800240c:	3b28      	subs	r3, #40	; 0x28
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d508      	bpl.n	8002432 <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8002420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002428:	4413      	add	r3, r2
 800242a:	3b28      	subs	r3, #40	; 0x28
 800242c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002430:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8002432:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002434:	3301      	adds	r3, #1
 8002436:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002438:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800243a:	2b03      	cmp	r3, #3
 800243c:	d998      	bls.n	8002370 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	ams_temperatures->pre_charge_resistor_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 800243e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002440:	f7fe f874 	bl	800052c <__aeabi_f2d>
 8002444:	4604      	mov	r4, r0
 8002446:	460d      	mov	r5, r1
 8002448:	ed97 7a04 	vldr	s14, [r7, #16]
 800244c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002458:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800245c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	ee17 0a90 	vmov	r0, s15
 8002468:	f7fe f860 	bl	800052c <__aeabi_f2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	ec43 2b10 	vmov	d0, r2, r3
 8002474:	f015 ff40 	bl	80182f8 <log>
 8002478:	ec59 8b10 	vmov	r8, r9, d0
 800247c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800247e:	f7fe f855 	bl	800052c <__aeabi_f2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	ec43 2b10 	vmov	d0, r2, r3
 800248a:	f015 ff35 	bl	80182f8 <log>
 800248e:	ec53 2b10 	vmov	r2, r3, d0
 8002492:	4640      	mov	r0, r8
 8002494:	4649      	mov	r1, r9
 8002496:	f7fd fee9 	bl	800026c <__aeabi_dsub>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fe f9c5 	bl	8000830 <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
			- 273.15;
 80024ae:	a374      	add	r3, pc, #464	; (adr r3, 8002680 <interpret_ADC_buffer+0x378>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fd feda 	bl	800026c <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb84 	bl	8000bcc <__aeabi_d2f>
 80024c4:	4602      	mov	r2, r0
	ams_temperatures->pre_charge_resistor_temperature = beta
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]
	ams_temperatures->fuse_resistor_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f7fe f82e 	bl	800052c <__aeabi_f2d>
 80024d0:	4604      	mov	r4, r0
 80024d2:	460d      	mov	r5, r1
 80024d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80024d8:	edd7 6a08 	vldr	s13, [r7, #32]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	ee17 0a90 	vmov	r0, s15
 80024f4:	f7fe f81a 	bl	800052c <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	ec43 2b10 	vmov	d0, r2, r3
 8002500:	f015 fefa 	bl	80182f8 <log>
 8002504:	ec59 8b10 	vmov	r8, r9, d0
 8002508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800250a:	f7fe f80f 	bl	800052c <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ec43 2b10 	vmov	d0, r2, r3
 8002516:	f015 feef 	bl	80182f8 <log>
 800251a:	ec53 2b10 	vmov	r2, r3, d0
 800251e:	4640      	mov	r0, r8
 8002520:	4649      	mov	r1, r9
 8002522:	f7fd fea3 	bl	800026c <__aeabi_dsub>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4620      	mov	r0, r4
 800252c:	4629      	mov	r1, r5
 800252e:	f7fe f97f 	bl	8000830 <__aeabi_ddiv>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
			- 273.15;
 800253a:	a351      	add	r3, pc, #324	; (adr r3, 8002680 <interpret_ADC_buffer+0x378>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fd fe94 	bl	800026c <__aeabi_dsub>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fb3e 	bl	8000bcc <__aeabi_d2f>
 8002550:	4602      	mov	r2, r0
	ams_temperatures->fuse_resistor_temperature = beta
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
	ams_temperatures->aux_1_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8002556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002558:	f7fd ffe8 	bl	800052c <__aeabi_f2d>
 800255c:	4604      	mov	r4, r0
 800255e:	460d      	mov	r5, r1
 8002560:	ed97 7a06 	vldr	s14, [r7, #24]
 8002564:	edd7 6a08 	vldr	s13, [r7, #32]
 8002568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002570:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002574:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	ee17 0a90 	vmov	r0, s15
 8002580:	f7fd ffd4 	bl	800052c <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	ec43 2b10 	vmov	d0, r2, r3
 800258c:	f015 feb4 	bl	80182f8 <log>
 8002590:	ec59 8b10 	vmov	r8, r9, d0
 8002594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002596:	f7fd ffc9 	bl	800052c <__aeabi_f2d>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	ec43 2b10 	vmov	d0, r2, r3
 80025a2:	f015 fea9 	bl	80182f8 <log>
 80025a6:	ec53 2b10 	vmov	r2, r3, d0
 80025aa:	4640      	mov	r0, r8
 80025ac:	4649      	mov	r1, r9
 80025ae:	f7fd fe5d 	bl	800026c <__aeabi_dsub>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4620      	mov	r0, r4
 80025b8:	4629      	mov	r1, r5
 80025ba:	f7fe f939 	bl	8000830 <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
			- 273.15;
 80025c6:	a32e      	add	r3, pc, #184	; (adr r3, 8002680 <interpret_ADC_buffer+0x378>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd fe4e 	bl	800026c <__aeabi_dsub>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe faf8 	bl	8000bcc <__aeabi_d2f>
 80025dc:	4602      	mov	r2, r0
	ams_temperatures->aux_1_temperature = beta
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
	ams_temperatures->aux_2_temperature = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 80025e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e4:	f7fd ffa2 	bl	800052c <__aeabi_f2d>
 80025e8:	4604      	mov	r4, r0
 80025ea:	460d      	mov	r5, r1
 80025ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80025f0:	edd7 6a08 	vldr	s13, [r7, #32]
 80025f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002600:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002608:	ee17 0a90 	vmov	r0, s15
 800260c:	f7fd ff8e 	bl	800052c <__aeabi_f2d>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	ec43 2b10 	vmov	d0, r2, r3
 8002618:	f015 fe6e 	bl	80182f8 <log>
 800261c:	ec59 8b10 	vmov	r8, r9, d0
 8002620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002622:	f7fd ff83 	bl	800052c <__aeabi_f2d>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	ec43 2b10 	vmov	d0, r2, r3
 800262e:	f015 fe63 	bl	80182f8 <log>
 8002632:	ec53 2b10 	vmov	r2, r3, d0
 8002636:	4640      	mov	r0, r8
 8002638:	4649      	mov	r1, r9
 800263a:	f7fd fe17 	bl	800026c <__aeabi_dsub>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4620      	mov	r0, r4
 8002644:	4629      	mov	r1, r5
 8002646:	f7fe f8f3 	bl	8000830 <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
			- 273.15;
 8002652:	a30b      	add	r3, pc, #44	; (adr r3, 8002680 <interpret_ADC_buffer+0x378>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fd fe08 	bl	800026c <__aeabi_dsub>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe fab2 	bl	8000bcc <__aeabi_d2f>
 8002668:	4602      	mov	r2, r0
	ams_temperatures->aux_2_temperature = beta
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	60da      	str	r2, [r3, #12]

}
 800266e:	bf00      	nop
 8002670:	3738      	adds	r7, #56	; 0x38
 8002672:	46bd      	mov	sp, r7
 8002674:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002678:	00000000 	.word	0x00000000
 800267c:	40c38800 	.word	0x40c38800
 8002680:	66666666 	.word	0x66666666
 8002684:	40711266 	.word	0x40711266
 8002688:	455ac000 	.word	0x455ac000
 800268c:	43951333 	.word	0x43951333
 8002690:	461c4000 	.word	0x461c4000
 8002694:	457ff000 	.word	0x457ff000

08002698 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2241      	movs	r2, #65	; 0x41
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f00f facf 	bl	8011c4c <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 80026ae:	4b03      	ldr	r3, [pc, #12]	; (80026bc <ADC_initialize+0x24>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	801a      	strh	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000007e 	.word	0x2000007e

080026c0 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <ADC_step+0x30>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <ADC_step+0x26>
		ADC_FLAG = 0;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <ADC_step+0x30>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	461a      	mov	r2, r3
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <ADC_step+0x34>)
 80026e2:	f00d f851 	bl	800f788 <HAL_ADC_Start_DMA>
	}
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000007e 	.word	0x2000007e
 80026f4:	2001b5c8 	.word	0x2001b5c8

080026f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002702:	2201      	movs	r2, #1
 8002704:	801a      	strh	r2, [r3, #0]

}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	2000007e 	.word	0x2000007e

08002718 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <MX_CAN1_Init+0x64>)
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <MX_CAN1_Init+0x68>)
 8002720:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <MX_CAN1_Init+0x64>)
 8002724:	2203      	movs	r2, #3
 8002726:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_CAN1_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <MX_CAN1_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_CAN1_Init+0x64>)
 8002736:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800273a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_CAN1_Init+0x64>)
 800273e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002742:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <MX_CAN1_Init+0x64>)
 8002746:	2200      	movs	r2, #0
 8002748:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_CAN1_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <MX_CAN1_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_CAN1_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <MX_CAN1_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_CAN1_Init+0x64>)
 8002764:	2200      	movs	r2, #0
 8002766:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002768:	4804      	ldr	r0, [pc, #16]	; (800277c <MX_CAN1_Init+0x64>)
 800276a:	f00d fbe5 	bl	800ff38 <HAL_CAN_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002774:	f001 f8de 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2001b698 	.word	0x2001b698
 8002780:	40006400 	.word	0x40006400

08002784 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <MX_CAN2_Init+0x64>)
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <MX_CAN2_Init+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <MX_CAN2_Init+0x64>)
 8002790:	2206      	movs	r2, #6
 8002792:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_CAN2_Init+0x64>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_CAN2_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027a2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80027a6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ae:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <MX_CAN2_Init+0x64>)
 80027d6:	f00d fbaf 	bl	800ff38 <HAL_CAN_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80027e0:	f001 f8a8 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2001b670 	.word	0x2001b670
 80027ec:	40006800 	.word	0x40006800

080027f0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_CAN_MspInit+0x15c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d14e      	bne.n	80028b0 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002812:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_CAN_MspInit+0x160>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a4d      	ldr	r2, [pc, #308]	; (8002950 <HAL_CAN_MspInit+0x160>)
 800281a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800281c:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <HAL_CAN_MspInit+0x160>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10d      	bne.n	8002840 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_CAN_MspInit+0x164>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <HAL_CAN_MspInit+0x164>)
 800282e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_CAN_MspInit+0x164>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_CAN_MspInit+0x164>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a42      	ldr	r2, [pc, #264]	; (8002954 <HAL_CAN_MspInit+0x164>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_CAN_MspInit+0x164>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800285c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800286e:	2309      	movs	r3, #9
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4619      	mov	r1, r3
 8002878:	4837      	ldr	r0, [pc, #220]	; (8002958 <HAL_CAN_MspInit+0x168>)
 800287a:	f00e fae3 	bl	8010e44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2105      	movs	r1, #5
 8002882:	2013      	movs	r0, #19
 8002884:	f00d ff44 	bl	8010710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002888:	2013      	movs	r0, #19
 800288a:	f00d ff5d 	bl	8010748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2105      	movs	r1, #5
 8002892:	2014      	movs	r0, #20
 8002894:	f00d ff3c 	bl	8010710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002898:	2014      	movs	r0, #20
 800289a:	f00d ff55 	bl	8010748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2105      	movs	r1, #5
 80028a2:	2015      	movs	r0, #21
 80028a4:	f00d ff34 	bl	8010710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80028a8:	2015      	movs	r0, #21
 80028aa:	f00d ff4d 	bl	8010748 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80028ae:	e048      	b.n	8002942 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a29      	ldr	r2, [pc, #164]	; (800295c <HAL_CAN_MspInit+0x16c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d143      	bne.n	8002942 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_CAN_MspInit+0x164>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_CAN_MspInit+0x164>)
 80028c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_CAN_MspInit+0x164>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_CAN_MspInit+0x160>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_CAN_MspInit+0x160>)
 80028de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_CAN_MspInit+0x160>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10d      	bne.n	8002904 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_CAN_MspInit+0x164>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_CAN_MspInit+0x164>)
 80028f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_CAN_MspInit+0x164>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_CAN_MspInit+0x164>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_CAN_MspInit+0x164>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_CAN_MspInit+0x164>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002920:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002932:	2309      	movs	r3, #9
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4619      	mov	r1, r3
 800293c:	4808      	ldr	r0, [pc, #32]	; (8002960 <HAL_CAN_MspInit+0x170>)
 800293e:	f00e fa81 	bl	8010e44 <HAL_GPIO_Init>
}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40006400 	.word	0x40006400
 8002950:	200017a4 	.word	0x200017a4
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000
 800295c:	40006800 	.word	0x40006800
 8002960:	40020400 	.word	0x40020400

08002964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <MX_DMA_Init+0x3c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <MX_DMA_Init+0x3c>)
 8002974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MX_DMA_Init+0x3c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2105      	movs	r1, #5
 800298a:	2038      	movs	r0, #56	; 0x38
 800298c:	f00d fec0 	bl	8010710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002990:	2038      	movs	r0, #56	; 0x38
 8002992:	f00d fed9 	bl	8010748 <HAL_NVIC_EnableIRQ>

}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029c4:	f043 0310 	orr.w	r3, r3, #16
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a3e      	ldr	r2, [pc, #248]	; (8002af4 <MX_GPIO_Init+0x150>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <MX_GPIO_Init+0x150>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <MX_GPIO_Init+0x150>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <MX_GPIO_Init+0x150>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <MX_GPIO_Init+0x150>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	210e      	movs	r1, #14
 8002a2e:	4832      	ldr	r0, [pc, #200]	; (8002af8 <MX_GPIO_Init+0x154>)
 8002a30:	f00e fba4 	bl	801117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	21e0      	movs	r1, #224	; 0xe0
 8002a38:	4830      	ldr	r0, [pc, #192]	; (8002afc <MX_GPIO_Init+0x158>)
 8002a3a:	f00e fb9f 	bl	801117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002a44:	482e      	ldr	r0, [pc, #184]	; (8002b00 <MX_GPIO_Init+0x15c>)
 8002a46:	f00e fb99 	bl	801117c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8002a4a:	230e      	movs	r3, #14
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4825      	ldr	r0, [pc, #148]	; (8002af8 <MX_GPIO_Init+0x154>)
 8002a62:	f00e f9ef 	bl	8010e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002a66:	2370      	movs	r3, #112	; 0x70
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	481f      	ldr	r0, [pc, #124]	; (8002af8 <MX_GPIO_Init+0x154>)
 8002a7a:	f00e f9e3 	bl	8010e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8002a7e:	23e0      	movs	r3, #224	; 0xe0
 8002a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4819      	ldr	r0, [pc, #100]	; (8002afc <MX_GPIO_Init+0x158>)
 8002a96:	f00e f9d5 	bl	8010e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8002a9a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8002a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4813      	ldr	r0, [pc, #76]	; (8002b00 <MX_GPIO_Init+0x15c>)
 8002ab4:	f00e f9c6 	bl	8010e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8002ab8:	2306      	movs	r3, #6
 8002aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480e      	ldr	r0, [pc, #56]	; (8002b04 <MX_GPIO_Init+0x160>)
 8002acc:	f00e f9ba 	bl	8010e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002ad0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4806      	ldr	r0, [pc, #24]	; (8002b00 <MX_GPIO_Init+0x15c>)
 8002ae6:	f00e f9ad 	bl	8010e44 <HAL_GPIO_Init>

}
 8002aea:	bf00      	nop
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020400 	.word	0x40020400

08002b08 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main() {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8002b0c:	f7fe fd28 	bl	8001560 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002b10:	f00c fc74 	bl	800f3fc <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8002b14:	f000 f9a0 	bl	8002e58 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002b18:	f7ff ff44 	bl	80029a4 <MX_GPIO_Init>
	MX_SPI2_Init();
 8002b1c:	f001 f81e 	bl	8003b5c <MX_SPI2_Init>
	MX_CAN1_Init();
 8002b20:	f7ff fdfa 	bl	8002718 <MX_CAN1_Init>
	MX_CAN2_Init();
 8002b24:	f7ff fe2e 	bl	8002784 <MX_CAN2_Init>
	MX_TIM1_Init();
 8002b28:	f001 f9b4 	bl	8003e94 <MX_TIM1_Init>
	MX_DMA_Init();
 8002b2c:	f7ff ff1a 	bl	8002964 <MX_DMA_Init>
	MX_TIM3_Init();
 8002b30:	f001 faec 	bl	800410c <MX_TIM3_Init>
	MX_TIM2_Init();
 8002b34:	f001 fa4e 	bl	8003fd4 <MX_TIM2_Init>
	MX_ADC1_Init();
 8002b38:	f7ff fae8 	bl	800210c <MX_ADC1_Init>

	//initialize_can(&hcan1, &hcan2);
	initialize_LTC(&hspi2);
 8002b3c:	4890      	ldr	r0, [pc, #576]	; (8002d80 <main+0x278>)
 8002b3e:	f000 fffd 	bl	8003b3c <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 8002b42:	f010 fe9f 	bl	8013884 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	state_queue = xQueueCreate(state_queue_info.element_count,
 8002b46:	2301      	movs	r3, #1
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f011 f99a 	bl	8013e88 <xQueueGenericCreate>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4a8b      	ldr	r2, [pc, #556]	; (8002d84 <main+0x27c>)
 8002b58:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	charge_state_queue = xQueueCreate(charge_state_queue_info.element_count,
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	2200      	movs	r2, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f011 f990 	bl	8013e88 <xQueueGenericCreate>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <main+0x280>)
 8002b6c:	6013      	str	r3, [r2, #0]
			charge_state_queue_info.element_size);

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 8002b6e:	2301      	movs	r3, #1
 8002b70:	2207      	movs	r2, #7
 8002b72:	4611      	mov	r1, r2
 8002b74:	2200      	movs	r2, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f011 f986 	bl	8013e88 <xQueueGenericCreate>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a83      	ldr	r2, [pc, #524]	; (8002d8c <main+0x284>)
 8002b80:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8002b82:	2301      	movs	r3, #1
 8002b84:	2208      	movs	r2, #8
 8002b86:	4611      	mov	r1, r2
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f011 f97c 	bl	8013e88 <xQueueGenericCreate>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a7f      	ldr	r2, [pc, #508]	; (8002d90 <main+0x288>)
 8002b94:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	can_rx_queue = xQueueCreate(can_rx_queue_info.element_count,
 8002b96:	2308      	movs	r3, #8
 8002b98:	223c      	movs	r2, #60	; 0x3c
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f011 f972 	bl	8013e88 <xQueueGenericCreate>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a7b      	ldr	r2, [pc, #492]	; (8002d94 <main+0x28c>)
 8002ba8:	6013      	str	r3, [r2, #0]
			can_rx_queue_info.element_size);

	can1_tx_queue = xQueueCreate(can1_tx_queue_info.element_count,
 8002baa:	2348      	movs	r3, #72	; 0x48
 8002bac:	223c      	movs	r2, #60	; 0x3c
 8002bae:	4611      	mov	r1, r2
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f011 f968 	bl	8013e88 <xQueueGenericCreate>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a77      	ldr	r2, [pc, #476]	; (8002d98 <main+0x290>)
 8002bbc:	6013      	str	r3, [r2, #0]
			can1_tx_queue_info.element_size);

	can2_tx_queue = xQueueCreate(can2_tx_queue_info.element_count,
 8002bbe:	2348      	movs	r3, #72	; 0x48
 8002bc0:	223c      	movs	r2, #60	; 0x3c
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f011 f95e 	bl	8013e88 <xQueueGenericCreate>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4a73      	ldr	r2, [pc, #460]	; (8002d9c <main+0x294>)
 8002bd0:	6013      	str	r3, [r2, #0]
			can2_tx_queue_info.element_size);

	ams_temperatures_queue = xQueueCreate(
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f011 f954 	bl	8013e88 <xQueueGenericCreate>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a6f      	ldr	r2, [pc, #444]	; (8002da0 <main+0x298>)
 8002be4:	6013      	str	r3, [r2, #0]
			ams_temperatures_queue_info.element_count,
			ams_temperatures_queue_info.element_size);

	dbu_status_1_queue = xQueueCreate(dbu_status_1_queue_info.element_count,
 8002be6:	2301      	movs	r3, #1
 8002be8:	2208      	movs	r2, #8
 8002bea:	4611      	mov	r1, r2
 8002bec:	2200      	movs	r2, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f011 f94a 	bl	8013e88 <xQueueGenericCreate>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a6b      	ldr	r2, [pc, #428]	; (8002da4 <main+0x29c>)
 8002bf8:	6013      	str	r3, [r2, #0]
			dbu_status_1_queue_info.element_size);

	ivt_msg_result_i_queue = xQueueCreate(
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	4611      	mov	r1, r2
 8002c00:	2200      	movs	r2, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f011 f940 	bl	8013e88 <xQueueGenericCreate>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a67      	ldr	r2, [pc, #412]	; (8002da8 <main+0x2a0>)
 8002c0c:	6013      	str	r3, [r2, #0]
			ivt_msg_result_i_queue_info.element_count,
			ivt_msg_result_i_queue_info.element_size);

	ivt_msg_result_u1_queue = xQueueCreate(
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2208      	movs	r2, #8
 8002c12:	4611      	mov	r1, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f011 f936 	bl	8013e88 <xQueueGenericCreate>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4a63      	ldr	r2, [pc, #396]	; (8002dac <main+0x2a4>)
 8002c20:	6013      	str	r3, [r2, #0]
			ivt_msg_result_u1_queue_info.element_count,
			ivt_msg_result_u1_queue_info.element_size);

	ivt_msg_result_u3_queue = xQueueCreate(
 8002c22:	2301      	movs	r3, #1
 8002c24:	2208      	movs	r2, #8
 8002c26:	4611      	mov	r1, r2
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f011 f92c 	bl	8013e88 <xQueueGenericCreate>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4a5f      	ldr	r2, [pc, #380]	; (8002db0 <main+0x2a8>)
 8002c34:	6013      	str	r3, [r2, #0]
			ivt_msg_result_u3_queue_info.element_count,
			ivt_msg_result_u3_queue_info.element_size);

	voltages_queue = xQueueCreate(voltages_queue_info.element_count,
 8002c36:	2301      	movs	r3, #1
 8002c38:	2204      	movs	r2, #4
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f011 f922 	bl	8013e88 <xQueueGenericCreate>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <main+0x2ac>)
 8002c48:	6013      	str	r3, [r2, #0]
			voltages_queue_info.element_size);
	voltages_d_queue = xQueueCreate(voltages_d_queue_info.element_count,
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4611      	mov	r1, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f011 f918 	bl	8013e88 <xQueueGenericCreate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a57      	ldr	r2, [pc, #348]	; (8002db8 <main+0x2b0>)
 8002c5c:	6013      	str	r3, [r2, #0]
			voltages_d_queue_info.element_size);
	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8002c5e:	2301      	movs	r3, #1
 8002c60:	2204      	movs	r2, #4
 8002c62:	4611      	mov	r1, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f011 f90e 	bl	8013e88 <xQueueGenericCreate>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <main+0x2b4>)
 8002c70:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);
	temperatures_d_queue = xQueueCreate(temperatures_d_queue_info.element_count,
 8002c72:	2301      	movs	r3, #1
 8002c74:	2204      	movs	r2, #4
 8002c76:	4611      	mov	r1, r2
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f011 f904 	bl	8013e88 <xQueueGenericCreate>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <main+0x2b8>)
 8002c84:	6013      	str	r3, [r2, #0]
			temperatures_d_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8002c86:	f010 fe47 	bl	8013918 <osKernelGetTickCount>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc2b 	bl	80004e8 <__aeabi_ui2d>
 8002c92:	a339      	add	r3, pc, #228	; (adr r3, 8002d78 <main+0x270>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd faea 	bl	8000270 <__adddf3>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f7fd ff72 	bl	8000b8c <__aeabi_d2uiz>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a46      	ldr	r2, [pc, #280]	; (8002dc4 <main+0x2bc>)
 8002cac:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_attributes);
 8002cae:	4a46      	ldr	r2, [pc, #280]	; (8002dc8 <main+0x2c0>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4846      	ldr	r0, [pc, #280]	; (8002dcc <main+0x2c4>)
 8002cb4:	f010 fe45 	bl	8013942 <osThreadNew>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a45      	ldr	r2, [pc, #276]	; (8002dd0 <main+0x2c8>)
 8002cbc:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL, &SIM_task_attributes);
 8002cbe:	4a45      	ldr	r2, [pc, #276]	; (8002dd4 <main+0x2cc>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4845      	ldr	r0, [pc, #276]	; (8002dd8 <main+0x2d0>)
 8002cc4:	f010 fe3d 	bl	8013942 <osThreadNew>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a44      	ldr	r2, [pc, #272]	; (8002ddc <main+0x2d4>)
 8002ccc:	6013      	str	r3, [r2, #0]

	CSE_task_handle = osThreadNew(start_CSE_task, NULL, &CSE_task_attributes);
 8002cce:	4a44      	ldr	r2, [pc, #272]	; (8002de0 <main+0x2d8>)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4844      	ldr	r0, [pc, #272]	; (8002de4 <main+0x2dc>)
 8002cd4:	f010 fe35 	bl	8013942 <osThreadNew>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <main+0x2e0>)
 8002cdc:	6013      	str	r3, [r2, #0]

	IMD_task_handle = osThreadNew(start_IMD_task, NULL, &IMD_task_attributes);
 8002cde:	4a43      	ldr	r2, [pc, #268]	; (8002dec <main+0x2e4>)
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4843      	ldr	r0, [pc, #268]	; (8002df0 <main+0x2e8>)
 8002ce4:	f010 fe2d 	bl	8013942 <osThreadNew>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <main+0x2ec>)
 8002cec:	6013      	str	r3, [r2, #0]

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8002cee:	4a42      	ldr	r2, [pc, #264]	; (8002df8 <main+0x2f0>)
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4842      	ldr	r0, [pc, #264]	; (8002dfc <main+0x2f4>)
 8002cf4:	f010 fe25 	bl	8013942 <osThreadNew>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4a41      	ldr	r2, [pc, #260]	; (8002e00 <main+0x2f8>)
 8002cfc:	6013      	str	r3, [r2, #0]
			&GPIO_task_attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL, &ADC_task_attributes);
 8002cfe:	4a41      	ldr	r2, [pc, #260]	; (8002e04 <main+0x2fc>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	4841      	ldr	r0, [pc, #260]	; (8002e08 <main+0x300>)
 8002d04:	f010 fe1d 	bl	8013942 <osThreadNew>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <main+0x304>)
 8002d0c:	6013      	str	r3, [r2, #0]

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <main+0x308>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4840      	ldr	r0, [pc, #256]	; (8002e14 <main+0x30c>)
 8002d14:	f010 fe15 	bl	8013942 <osThreadNew>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a3f      	ldr	r2, [pc, #252]	; (8002e18 <main+0x310>)
 8002d1c:	6013      	str	r3, [r2, #0]
			&COOL_task_attributes);

	CAN_rx_task_handle = osThreadNew(start_CAN_rx_task, NULL,
 8002d1e:	4a3f      	ldr	r2, [pc, #252]	; (8002e1c <main+0x314>)
 8002d20:	2100      	movs	r1, #0
 8002d22:	483f      	ldr	r0, [pc, #252]	; (8002e20 <main+0x318>)
 8002d24:	f010 fe0d 	bl	8013942 <osThreadNew>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4a3e      	ldr	r2, [pc, #248]	; (8002e24 <main+0x31c>)
 8002d2c:	6013      	str	r3, [r2, #0]
			&CAN_rx_task_attributes);

	CAN_tx_task_handle = osThreadNew(start_CAN_tx_task, NULL,
 8002d2e:	4a3e      	ldr	r2, [pc, #248]	; (8002e28 <main+0x320>)
 8002d30:	2100      	movs	r1, #0
 8002d32:	483e      	ldr	r0, [pc, #248]	; (8002e2c <main+0x324>)
 8002d34:	f010 fe05 	bl	8013942 <osThreadNew>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <main+0x328>)
 8002d3c:	6013      	str	r3, [r2, #0]
			&CAN_tx_task_attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL, &COM_task_attributes);
 8002d3e:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <main+0x32c>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	483d      	ldr	r0, [pc, #244]	; (8002e38 <main+0x330>)
 8002d44:	f010 fdfd 	bl	8013942 <osThreadNew>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <main+0x334>)
 8002d4c:	6013      	str	r3, [r2, #0]

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <main+0x338>)
 8002d50:	2100      	movs	r1, #0
 8002d52:	483c      	ldr	r0, [pc, #240]	; (8002e44 <main+0x33c>)
 8002d54:	f010 fdf5 	bl	8013942 <osThreadNew>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <main+0x340>)
 8002d5c:	6013      	str	r3, [r2, #0]
			&IWDG_task_attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8002d5e:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <main+0x344>)
 8002d60:	2100      	movs	r1, #0
 8002d62:	483b      	ldr	r0, [pc, #236]	; (8002e50 <main+0x348>)
 8002d64:	f010 fded 	bl	8013942 <osThreadNew>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <main+0x34c>)
 8002d6c:	6013      	str	r3, [r2, #0]
			&event_handler_task_attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8002d6e:	f010 fdad 	bl	80138cc <osKernelStart>

	for (;;)
 8002d72:	e7fe      	b.n	8002d72 <main+0x26a>
 8002d74:	f3af 8000 	nop.w
 8002d78:	f3cf3cf4 	.word	0xf3cf3cf4
 8002d7c:	4047cf3c 	.word	0x4047cf3c
 8002d80:	2001bbbc 	.word	0x2001bbbc
 8002d84:	2001b574 	.word	0x2001b574
 8002d88:	2001b5a8 	.word	0x2001b5a8
 8002d8c:	2001b5a0 	.word	0x2001b5a0
 8002d90:	2001b588 	.word	0x2001b588
 8002d94:	2001b5b0 	.word	0x2001b5b0
 8002d98:	2001b598 	.word	0x2001b598
 8002d9c:	2001b5b4 	.word	0x2001b5b4
 8002da0:	2001b5ac 	.word	0x2001b5ac
 8002da4:	2001b570 	.word	0x2001b570
 8002da8:	2001b590 	.word	0x2001b590
 8002dac:	2001b59c 	.word	0x2001b59c
 8002db0:	2001b584 	.word	0x2001b584
 8002db4:	2001b57c 	.word	0x2001b57c
 8002db8:	2001b5a4 	.word	0x2001b5a4
 8002dbc:	2001b578 	.word	0x2001b578
 8002dc0:	2001b568 	.word	0x2001b568
 8002dc4:	2001b6f4 	.word	0x2001b6f4
 8002dc8:	08018d70 	.word	0x08018d70
 8002dcc:	08002f31 	.word	0x08002f31
 8002dd0:	2001b6d8 	.word	0x2001b6d8
 8002dd4:	08018d94 	.word	0x08018d94
 8002dd8:	080037f1 	.word	0x080037f1
 8002ddc:	2001b6e0 	.word	0x2001b6e0
 8002de0:	08018ddc 	.word	0x08018ddc
 8002de4:	08003621 	.word	0x08003621
 8002de8:	2001b6e8 	.word	0x2001b6e8
 8002dec:	08018eb4 	.word	0x08018eb4
 8002df0:	080030f9 	.word	0x080030f9
 8002df4:	2001b6fc 	.word	0x2001b6fc
 8002df8:	08018e90 	.word	0x08018e90
 8002dfc:	080031c9 	.word	0x080031c9
 8002e00:	2001b6d4 	.word	0x2001b6d4
 8002e04:	08018e6c 	.word	0x08018e6c
 8002e08:	080032b1 	.word	0x080032b1
 8002e0c:	2001b6f0 	.word	0x2001b6f0
 8002e10:	08018db8 	.word	0x08018db8
 8002e14:	080036d9 	.word	0x080036d9
 8002e18:	2001b6e4 	.word	0x2001b6e4
 8002e1c:	08018e24 	.word	0x08018e24
 8002e20:	08003501 	.word	0x08003501
 8002e24:	2001b6ec 	.word	0x2001b6ec
 8002e28:	08018e00 	.word	0x08018e00
 8002e2c:	08003591 	.word	0x08003591
 8002e30:	2001b6dc 	.word	0x2001b6dc
 8002e34:	08018e48 	.word	0x08018e48
 8002e38:	08003391 	.word	0x08003391
 8002e3c:	2001b6d0 	.word	0x2001b6d0
 8002e40:	08018efc 	.word	0x08018efc
 8002e44:	08002fc9 	.word	0x08002fc9
 8002e48:	2001b6f8 	.word	0x2001b6f8
 8002e4c:	08018ed8 	.word	0x08018ed8
 8002e50:	08003069 	.word	0x08003069
 8002e54:	2001b6cc 	.word	0x2001b6cc

08002e58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b094      	sub	sp, #80	; 0x50
 8002e5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	2230      	movs	r2, #48	; 0x30
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f015 f8d6 	bl	8018018 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <SystemClock_Config+0xcc>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <SystemClock_Config+0xcc>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <SystemClock_Config+0xcc>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <SystemClock_Config+0xd0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <SystemClock_Config+0xd0>)
 8002ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <SystemClock_Config+0xd0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002eb4:	230a      	movs	r3, #10
 8002eb6:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002ed0:	2354      	movs	r3, #84	; 0x54
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002edc:	f107 0320 	add.w	r3, r7, #32
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00e f975 	bl	80111d0 <HAL_RCC_OscConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <SystemClock_Config+0x98>
		Error_Handler();
 8002eec:	f000 fd22 	bl	8003934 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ef0:	230f      	movs	r3, #15
 8002ef2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f00:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f06:	f107 030c 	add.w	r3, r7, #12
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f00e fbd7 	bl	80116c0 <HAL_RCC_ClockConfig>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SystemClock_Config+0xc4>
		Error_Handler();
 8002f18:	f000 fd0c 	bl	8003934 <Error_Handler>
	}
}
 8002f1c:	bf00      	nop
 8002f1e:	3750      	adds	r7, #80	; 0x50
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	00000000 	.word	0x00000000

08002f30 <start_SM_task>:

/* USER CODE BEGIN 4 */

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8002f38:	f014 fb16 	bl	8017568 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <start_SM_task+0x90>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <start_SM_task+0x94>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd faf1 	bl	800052c <__aeabi_f2d>
 8002f4a:	a31b      	add	r3, pc, #108	; (adr r3, 8002fb8 <start_SM_task+0x88>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd fb44 	bl	80005dc <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fe16 	bl	8000b8c <__aeabi_d2uiz>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7fd fabf 	bl	80004e8 <__aeabi_ui2d>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fada 	bl	800052c <__aeabi_f2d>
 8002f78:	a30f      	add	r3, pc, #60	; (adr r3, 8002fb8 <start_SM_task+0x88>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd fb2d 	bl	80005dc <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f7fd f971 	bl	8000270 <__adddf3>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7fd fdf9 	bl	8000b8c <__aeabi_d2uiz>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f010 fd7c 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		state_machine_step();
 8002fa4:	f7fe fc16 	bl	80017d4 <state_machine_step>

		/* Wait until next period */
		next_tick += tick_increment;
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4413      	add	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f010 fd73 	bl	8013a9c <osDelayUntil>
		state_machine_step();
 8002fb6:	e7f5      	b.n	8002fa4 <start_SM_task+0x74>
 8002fb8:	f3cf3cf4 	.word	0xf3cf3cf4
 8002fbc:	4067cf3c 	.word	0x4067cf3c
 8002fc0:	2001b6f4 	.word	0x2001b6f4
 8002fc4:	3f4ccccd 	.word	0x3f4ccccd

08002fc8 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <start_IWDG_task+0x90>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <start_IWDG_task+0x94>)
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd faa7 	bl	800052c <__aeabi_f2d>
 8002fde:	a31c      	add	r3, pc, #112	; (adr r3, 8003050 <start_IWDG_task+0x88>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fafa 	bl	80005dc <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f7fd fdcc 	bl	8000b8c <__aeabi_d2uiz>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7fd fa75 	bl	80004e8 <__aeabi_ui2d>
 8002ffe:	4604      	mov	r4, r0
 8003000:	460d      	mov	r5, r1
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa90 	bl	800052c <__aeabi_f2d>
 800300c:	a310      	add	r3, pc, #64	; (adr r3, 8003050 <start_IWDG_task+0x88>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd fae3 	bl	80005dc <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4620      	mov	r0, r4
 800301c:	4629      	mov	r1, r5
 800301e:	f7fd f927 	bl	8000270 <__adddf3>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fdaf 	bl	8000b8c <__aeabi_d2uiz>
 800302e:	4603      	mov	r3, r0
 8003030:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f010 fd32 	bl	8013a9c <osDelayUntil>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8003038:	4809      	ldr	r0, [pc, #36]	; (8003060 <start_IWDG_task+0x98>)
 800303a:	f00e f8b8 	bl	80111ae <HAL_IWDG_Refresh>

		/* Wait until next period */
		next_tick += tick_increment;
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f010 fd28 	bl	8013a9c <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 800304c:	e7f4      	b.n	8003038 <start_IWDG_task+0x70>
 800304e:	bf00      	nop
 8003050:	f3cf3cf4 	.word	0xf3cf3cf4
 8003054:	4067cf3c 	.word	0x4067cf3c
 8003058:	2001b6f4 	.word	0x2001b6f4
 800305c:	3f4ccccd 	.word	0x3f4ccccd
 8003060:	2001b6c0 	.word	0x2001b6c0
 8003064:	00000000 	.word	0x00000000

08003068 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <start_event_handler_task+0x88>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 8003076:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <start_event_handler_task+0x8c>)
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa57 	bl	800052c <__aeabi_f2d>
 800307e:	a31a      	add	r3, pc, #104	; (adr r3, 80030e8 <start_event_handler_task+0x80>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd faaa 	bl	80005dc <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f7fd fd7c 	bl	8000b8c <__aeabi_d2uiz>
 8003094:	4603      	mov	r3, r0
 8003096:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7fd fa25 	bl	80004e8 <__aeabi_ui2d>
 800309e:	4604      	mov	r4, r0
 80030a0:	460d      	mov	r5, r1
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fa40 	bl	800052c <__aeabi_f2d>
 80030ac:	a30e      	add	r3, pc, #56	; (adr r3, 80030e8 <start_event_handler_task+0x80>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f7fd fa93 	bl	80005dc <__aeabi_dmul>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	f7fd f8d7 	bl	8000270 <__adddf3>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	f7fd fd5f 	bl	8000b8c <__aeabi_d2uiz>
 80030ce:	4603      	mov	r3, r0
 80030d0:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f010 fce2 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4413      	add	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f010 fcdb 	bl	8013a9c <osDelayUntil>
		next_tick += tick_increment;
 80030e6:	e7f7      	b.n	80030d8 <start_event_handler_task+0x70>
 80030e8:	f3cf3cf4 	.word	0xf3cf3cf4
 80030ec:	4067cf3c 	.word	0x4067cf3c
 80030f0:	2001b6f4 	.word	0x2001b6f4
 80030f4:	3f4ccccd 	.word	0x3f4ccccd

080030f8 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <start_IMD_task+0xc0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <start_IMD_task+0xc4>)
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fa0f 	bl	800052c <__aeabi_f2d>
 800310e:	a328      	add	r3, pc, #160	; (adr r3, 80031b0 <start_IMD_task+0xb8>)
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f7fd fa62 	bl	80005dc <__aeabi_dmul>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f7fd fd34 	bl	8000b8c <__aeabi_d2uiz>
 8003124:	4603      	mov	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8003128:	4825      	ldr	r0, [pc, #148]	; (80031c0 <start_IMD_task+0xc8>)
 800312a:	f7fe f937 	bl	800139c <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 800312e:	69f8      	ldr	r0, [r7, #28]
 8003130:	f7fd f9da 	bl	80004e8 <__aeabi_ui2d>
 8003134:	4604      	mov	r4, r0
 8003136:	460d      	mov	r5, r1
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f9f5 	bl	800052c <__aeabi_f2d>
 8003142:	a31b      	add	r3, pc, #108	; (adr r3, 80031b0 <start_IMD_task+0xb8>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fa48 	bl	80005dc <__aeabi_dmul>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4620      	mov	r0, r4
 8003152:	4629      	mov	r1, r5
 8003154:	f7fd f88c 	bl	8000270 <__adddf3>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fd14 	bl	8000b8c <__aeabi_d2uiz>
 8003164:	4603      	mov	r3, r0
 8003166:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8003168:	69f8      	ldr	r0, [r7, #28]
 800316a:	f010 fc97 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <start_IMD_task+0xcc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f107 010c 	add.w	r1, r7, #12
 8003176:	2200      	movs	r2, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f011 f8bf 	bl	80142fc <xQueueReceive>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <start_IMD_task+0xa4>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 8003184:	ed97 7a04 	vldr	s14, [r7, #16]
 8003188:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800318c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003194:	edc7 7a00 	vstr	s15, [r7]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	75fb      	strb	r3, [r7, #23]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4413      	add	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 80031a4:	69f8      	ldr	r0, [r7, #28]
 80031a6:	f010 fc79 	bl	8013a9c <osDelayUntil>
		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 80031aa:	e7e0      	b.n	800316e <start_IMD_task+0x76>
 80031ac:	f3af 8000 	nop.w
 80031b0:	f3cf3cf4 	.word	0xf3cf3cf4
 80031b4:	4067cf3c 	.word	0x4067cf3c
 80031b8:	2001b6f4 	.word	0x2001b6f4
 80031bc:	3f4ccccd 	.word	0x3f4ccccd
 80031c0:	2001bcec 	.word	0x2001bcec
 80031c4:	2001b588 	.word	0x2001b588

080031c8 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <start_GPIO_task+0xd8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 80031d6:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <start_GPIO_task+0xdc>)
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9a7 	bl	800052c <__aeabi_f2d>
 80031de:	a32e      	add	r3, pc, #184	; (adr r3, 8003298 <start_GPIO_task+0xd0>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd f9fa 	bl	80005dc <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fccc 	bl	8000b8c <__aeabi_d2uiz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 80031f8:	6978      	ldr	r0, [r7, #20]
 80031fa:	f7fd f975 	bl	80004e8 <__aeabi_ui2d>
 80031fe:	4604      	mov	r4, r0
 8003200:	460d      	mov	r5, r1
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f990 	bl	800052c <__aeabi_f2d>
 800320c:	a322      	add	r3, pc, #136	; (adr r3, 8003298 <start_GPIO_task+0xd0>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd f9e3 	bl	80005dc <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd f827 	bl	8000270 <__adddf3>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fcaf 	bl	8000b8c <__aeabi_d2uiz>
 800322e:	4603      	mov	r3, r0
 8003230:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f010 fc32 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8003238:	f000 fbee 	bl	8003a18 <get_ams_error_latched_ext>
 800323c:	4603      	mov	r3, r0
 800323e:	723b      	strb	r3, [r7, #8]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 8003240:	f000 fbf6 	bl	8003a30 <get_imd_error_latched_ext>
 8003244:	4603      	mov	r3, r0
 8003246:	727b      	strb	r3, [r7, #9]
		GPIO.SC_probe = get_sc_probe_ext();
 8003248:	f000 fbfe 	bl	8003a48 <get_sc_probe_ext>
 800324c:	4603      	mov	r3, r0
 800324e:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = get_imd_ok_ext();
 8003250:	f000 fc0a 	bl	8003a68 <get_imd_ok_ext>
 8003254:	4603      	mov	r3, r0
 8003256:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8003258:	f000 fb86 	bl	8003968 <get_air_plus_ext>
 800325c:	4603      	mov	r3, r0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	733b      	strb	r3, [r7, #12]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8003262:	f000 fba5 	bl	80039b0 <get_air_minus_ext>
 8003266:	4603      	mov	r3, r0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	737b      	strb	r3, [r7, #13]
		GPIO.precharge_closed = get_precharge_ext();
 800326c:	f000 fbc4 	bl	80039f8 <get_precharge_ext>
 8003270:	4603      	mov	r3, r0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	73bb      	strb	r3, [r7, #14]

		xQueueOverwrite(GPIO_queue, &GPIO);
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <start_GPIO_task+0xe0>)
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	f107 0108 	add.w	r1, r7, #8
 800327e:	2302      	movs	r3, #2
 8003280:	2200      	movs	r2, #0
 8003282:	f010 fe65 	bl	8013f50 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f010 fc04 	bl	8013a9c <osDelayUntil>
	for (;;) {
 8003294:	e7d0      	b.n	8003238 <start_GPIO_task+0x70>
 8003296:	bf00      	nop
 8003298:	f3cf3cf4 	.word	0xf3cf3cf4
 800329c:	4067cf3c 	.word	0x4067cf3c
 80032a0:	2001b6f4 	.word	0x2001b6f4
 80032a4:	3f4ccccd 	.word	0x3f4ccccd
 80032a8:	2001b5a0 	.word	0x2001b5a0
 80032ac:	00000000 	.word	0x00000000

080032b0 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b0a8      	sub	sp, #160	; 0xa0
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <start_ADC_task+0xd0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 80032c0:	4b30      	ldr	r3, [pc, #192]	; (8003384 <start_ADC_task+0xd4>)
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f932 	bl	800052c <__aeabi_f2d>
 80032c8:	a32b      	add	r3, pc, #172	; (adr r3, 8003378 <start_ADC_task+0xc8>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd f985 	bl	80005dc <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f7fd fc57 	bl	8000b8c <__aeabi_d2uiz>
 80032de:	4603      	mov	r3, r0
 80032e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/* Make task-specific structures */
	ADC_initialize(&htim3);
 80032e4:	4828      	ldr	r0, [pc, #160]	; (8003388 <start_ADC_task+0xd8>)
 80032e6:	f7ff f9d7 	bl	8002698 <ADC_initialize>
	uint16_t adc_readings[4 * 16];
	ams_temperatures_t ams_temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 80032ea:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80032ee:	f7fd f8fb 	bl	80004e8 <__aeabi_ui2d>
 80032f2:	4604      	mov	r4, r0
 80032f4:	460d      	mov	r5, r1
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f916 	bl	800052c <__aeabi_f2d>
 8003300:	a31d      	add	r3, pc, #116	; (adr r3, 8003378 <start_ADC_task+0xc8>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f7fd f969 	bl	80005dc <__aeabi_dmul>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4620      	mov	r0, r4
 8003310:	4629      	mov	r1, r5
 8003312:	f7fc ffad 	bl	8000270 <__adddf3>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f7fd fc35 	bl	8000b8c <__aeabi_d2uiz>
 8003322:	4603      	mov	r3, r0
 8003324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osDelayUntil(next_tick);
 8003328:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800332c:	f010 fbb6 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003330:	f107 0318 	add.w	r3, r7, #24
 8003334:	2104      	movs	r1, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff f9c2 	bl	80026c0 <ADC_step>
		interpret_ADC_buffer(&ams_temperatures, adc_readings, 16);
 800333c:	f107 0118 	add.w	r1, r7, #24
 8003340:	f107 0308 	add.w	r3, r7, #8
 8003344:	2210      	movs	r2, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ffde 	bl	8002308 <interpret_ADC_buffer>

		xQueueOverwrite(ams_temperatures_queue, &ams_temperatures);
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <start_ADC_task+0xdc>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	f107 0108 	add.w	r1, r7, #8
 8003354:	2302      	movs	r3, #2
 8003356:	2200      	movs	r2, #0
 8003358:	f010 fdfa 	bl	8013f50 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800335c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003364:	4413      	add	r3, r2
 8003366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelayUntil(next_tick);
 800336a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800336e:	f010 fb95 	bl	8013a9c <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003372:	e7dd      	b.n	8003330 <start_ADC_task+0x80>
 8003374:	f3af 8000 	nop.w
 8003378:	f3cf3cf4 	.word	0xf3cf3cf4
 800337c:	4067cf3c 	.word	0x4067cf3c
 8003380:	2001b6f4 	.word	0x2001b6f4
 8003384:	3f4ccccd 	.word	0x3f4ccccd
 8003388:	2001bc5c 	.word	0x2001bc5c
 800338c:	2001b5ac 	.word	0x2001b5ac

08003390 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003398:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <start_COM_task+0x150>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 800339e:	4b51      	ldr	r3, [pc, #324]	; (80034e4 <start_COM_task+0x154>)
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd f8c3 	bl	800052c <__aeabi_f2d>
 80033a6:	a34c      	add	r3, pc, #304	; (adr r3, 80034d8 <start_COM_task+0x148>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f7fd f916 	bl	80005dc <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fbe8 	bl	8000b8c <__aeabi_d2uiz>
 80033bc:	4603      	mov	r3, r0
 80033be:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 80033c0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80033c4:	61fb      	str	r3, [r7, #28]
	const float temperature_time_constraint = 1.0;
 80033c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80033ca:	61bb      	str	r3, [r7, #24]
	const float current_time_constraint = 0.5;
 80033cc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80033d0:	617b      	str	r3, [r7, #20]

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 80033d2:	eddf 6a45 	vldr	s13, [pc, #276]	; 80034e8 <start_COM_task+0x158>
 80033d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80033da:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 80033de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e2:	ee17 3a90 	vmov	r3, s15
 80033e6:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (voltage_sample_constraint < 1) {
 80033e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <start_COM_task+0x62>
		voltage_sample_constraint = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 80033f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80034e8 <start_COM_task+0x158>
 80033f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80033fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 80033fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003402:	ee17 3a90 	vmov	r3, s15
 8003406:	853b      	strh	r3, [r7, #40]	; 0x28
	if (temperature_sample_constraint < 1) {
 8003408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <start_COM_task+0x82>
		temperature_sample_constraint = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 8003412:	eddf 6a35 	vldr	s13, [pc, #212]	; 80034e8 <start_COM_task+0x158>
 8003416:	ed97 7a05 	vldr	s14, [r7, #20]
 800341a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 800341e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003422:	ee17 3a90 	vmov	r3, s15
 8003426:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (current_sample_constraint < 1) {
 8003428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <start_COM_task+0xa2>
		current_sample_constraint = 1;
 800342e:	2301      	movs	r3, #1
 8003430:	84fb      	strh	r3, [r7, #38]	; 0x26
	double *cell_voltages;
	double *cell_temperatures;
	double *current;

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8003432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003434:	f7fd f858 	bl	80004e8 <__aeabi_ui2d>
 8003438:	4604      	mov	r4, r0
 800343a:	460d      	mov	r5, r1
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f873 	bl	800052c <__aeabi_f2d>
 8003446:	a324      	add	r3, pc, #144	; (adr r3, 80034d8 <start_COM_task+0x148>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fd f8c6 	bl	80005dc <__aeabi_dmul>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4620      	mov	r0, r4
 8003456:	4629      	mov	r1, r5
 8003458:	f7fc ff0a 	bl	8000270 <__adddf3>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	f7fd fb92 	bl	8000b8c <__aeabi_d2uiz>
 8003468:	4603      	mov	r3, r0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(next_tick);
 800346c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800346e:	f010 fb15 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		//LTC_acquire_data(1);
		cell_voltages = &SIM0_Y.cell_voltages;
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <start_COM_task+0x15c>)
 8003474:	60fb      	str	r3, [r7, #12]
		cell_temperatures = &SIM0_Y.cell_temperatures;
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <start_COM_task+0x160>)
 8003478:	60bb      	str	r3, [r7, #8]
		current = &SIM0_Y.current;
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <start_COM_task+0x164>)
 800347c:	613b      	str	r3, [r7, #16]

		if (!COM_voltages_ok_d(cell_voltages, 1, voltage_sample_constraint)) {
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fd87 	bl	8000f98 <COM_voltages_ok_d>
			//Error_Handler();
		}

		if (!COM_temperatures_ok_d(cell_temperatures, 1,
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd fdf3 	bl	800107c <COM_temperatures_ok_d>
				temperature_sample_constraint)) {
			//Error_Handler();
		}

		if (!COM_current_ok_d(current, 1, current_sample_constraint)) {
 8003496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003498:	461a      	mov	r2, r3
 800349a:	2101      	movs	r1, #1
 800349c:	6938      	ldr	r0, [r7, #16]
 800349e:	f7fd fe5f 	bl	8001160 <COM_current_ok_d>
			//Error_Handler();
		}

		xQueueOverwrite(voltages_d_queue, &cell_voltages);
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <start_COM_task+0x168>)
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	f107 010c 	add.w	r1, r7, #12
 80034aa:	2302      	movs	r3, #2
 80034ac:	2200      	movs	r2, #0
 80034ae:	f010 fd4f 	bl	8013f50 <xQueueGenericSend>
		xQueueOverwrite(temperatures_d_queue, &cell_temperatures);
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <start_COM_task+0x16c>)
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	f107 0108 	add.w	r1, r7, #8
 80034ba:	2302      	movs	r3, #2
 80034bc:	2200      	movs	r2, #0
 80034be:	f010 fd47 	bl	8013f50 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80034c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	4413      	add	r3, r2
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		osDelayUntil(next_tick);
 80034ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034cc:	f010 fae6 	bl	8013a9c <osDelayUntil>
		cell_voltages = &SIM0_Y.cell_voltages;
 80034d0:	e7cf      	b.n	8003472 <start_COM_task+0xe2>
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
 80034d8:	f3cf3cf4 	.word	0xf3cf3cf4
 80034dc:	4067cf3c 	.word	0x4067cf3c
 80034e0:	2001b6f4 	.word	0x2001b6f4
 80034e4:	3f4ccccd 	.word	0x3f4ccccd
 80034e8:	3f4ccccd 	.word	0x3f4ccccd
 80034ec:	2001d658 	.word	0x2001d658
 80034f0:	2001e228 	.word	0x2001e228
 80034f4:	2001d648 	.word	0x2001d648
 80034f8:	2001b5a4 	.word	0x2001b5a4
 80034fc:	2001b568 	.word	0x2001b568

08003500 <start_CAN_rx_task>:
	}
}

void start_CAN_rx_task(void *argument) {
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <start_CAN_rx_task+0x88>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_rx_task_info.periodicity;
 800350e:	4b1f      	ldr	r3, [pc, #124]	; (800358c <start_CAN_rx_task+0x8c>)
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd f80b 	bl	800052c <__aeabi_f2d>
 8003516:	a31a      	add	r3, pc, #104	; (adr r3, 8003580 <start_CAN_rx_task+0x80>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd f85e 	bl	80005dc <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd fb30 	bl	8000b8c <__aeabi_d2uiz>
 800352c:	4603      	mov	r3, r0
 800352e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_rx_task_info.offset;
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7fc ffd9 	bl	80004e8 <__aeabi_ui2d>
 8003536:	4604      	mov	r4, r0
 8003538:	460d      	mov	r5, r1
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc fff4 	bl	800052c <__aeabi_f2d>
 8003544:	a30e      	add	r3, pc, #56	; (adr r3, 8003580 <start_CAN_rx_task+0x80>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fd f847 	bl	80005dc <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fc fe8b 	bl	8000270 <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	f7fd fb13 	bl	8000b8c <__aeabi_d2uiz>
 8003566:	4603      	mov	r3, r0
 8003568:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f010 fa96 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4413      	add	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f010 fa8f 	bl	8013a9c <osDelayUntil>
		next_tick += tick_increment;
 800357e:	e7f7      	b.n	8003570 <start_CAN_rx_task+0x70>
 8003580:	f3cf3cf4 	.word	0xf3cf3cf4
 8003584:	4067cf3c 	.word	0x4067cf3c
 8003588:	2001b6f4 	.word	0x2001b6f4
 800358c:	3f4ccccd 	.word	0x3f4ccccd

08003590 <start_CAN_tx_task>:
	}
}

void start_CAN_tx_task(void *argument) {
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <start_CAN_tx_task+0x88>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_tx_task_info.periodicity;
 800359e:	4b1f      	ldr	r3, [pc, #124]	; (800361c <start_CAN_tx_task+0x8c>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffc3 	bl	800052c <__aeabi_f2d>
 80035a6:	a31a      	add	r3, pc, #104	; (adr r3, 8003610 <start_CAN_tx_task+0x80>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fd f816 	bl	80005dc <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7fd fae8 	bl	8000b8c <__aeabi_d2uiz>
 80035bc:	4603      	mov	r3, r0
 80035be:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_tx_task_info.offset;
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7fc ff91 	bl	80004e8 <__aeabi_ui2d>
 80035c6:	4604      	mov	r4, r0
 80035c8:	460d      	mov	r5, r1
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffac 	bl	800052c <__aeabi_f2d>
 80035d4:	a30e      	add	r3, pc, #56	; (adr r3, 8003610 <start_CAN_tx_task+0x80>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f7fc ffff 	bl	80005dc <__aeabi_dmul>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4620      	mov	r0, r4
 80035e4:	4629      	mov	r1, r5
 80035e6:	f7fc fe43 	bl	8000270 <__adddf3>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7fd facb 	bl	8000b8c <__aeabi_d2uiz>
 80035f6:	4603      	mov	r3, r0
 80035f8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f010 fa4e 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4413      	add	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f010 fa47 	bl	8013a9c <osDelayUntil>
		next_tick += tick_increment;
 800360e:	e7f7      	b.n	8003600 <start_CAN_tx_task+0x70>
 8003610:	f3cf3cf4 	.word	0xf3cf3cf4
 8003614:	4067cf3c 	.word	0x4067cf3c
 8003618:	2001b6f4 	.word	0x2001b6f4
 800361c:	3f4ccccd 	.word	0x3f4ccccd

08003620 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <start_CSE_task+0xa8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <start_CSE_task+0xac>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff7b 	bl	800052c <__aeabi_f2d>
 8003636:	a322      	add	r3, pc, #136	; (adr r3, 80036c0 <start_CSE_task+0xa0>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc ffce 	bl	80005dc <__aeabi_dmul>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f7fd faa0 	bl	8000b8c <__aeabi_d2uiz>
 800364c:	4603      	mov	r3, r0
 800364e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8003650:	f002 fde2 	bl	8006218 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7fc ff47 	bl	80004e8 <__aeabi_ui2d>
 800365a:	4604      	mov	r4, r0
 800365c:	460d      	mov	r5, r1
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff62 	bl	800052c <__aeabi_f2d>
 8003668:	a315      	add	r3, pc, #84	; (adr r3, 80036c0 <start_CSE_task+0xa0>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f7fc ffb5 	bl	80005dc <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fc fdf9 	bl	8000270 <__adddf3>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	f7fd fa81 	bl	8000b8c <__aeabi_d2uiz>
 800368a:	4603      	mov	r3, r0
 800368c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f010 fa04 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_U.current = SIM0_Y.current;
 8003694:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <start_CSE_task+0xb0>)
 8003696:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800369a:	490e      	ldr	r1, [pc, #56]	; (80036d4 <start_CSE_task+0xb4>)
 800369c:	e9c1 2300 	strd	r2, r3, [r1]
		CSE_U.y = SIM0_Y.cell_voltages[0];
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <start_CSE_task+0xb0>)
 80036a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80036a6:	490b      	ldr	r1, [pc, #44]	; (80036d4 <start_CSE_task+0xb4>)
 80036a8:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CSE_step();
 80036ac:	f001 fab0 	bl	8004c10 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f010 f9ef 	bl	8013a9c <osDelayUntil>
		CSE_U.current = SIM0_Y.current;
 80036be:	e7e9      	b.n	8003694 <start_CSE_task+0x74>
 80036c0:	f3cf3cf4 	.word	0xf3cf3cf4
 80036c4:	4067cf3c 	.word	0x4067cf3c
 80036c8:	2001b6f4 	.word	0x2001b6f4
 80036cc:	3f4ccccd 	.word	0x3f4ccccd
 80036d0:	2001d618 	.word	0x2001d618
 80036d4:	2001bd48 	.word	0x2001bd48

080036d8 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 80036d8:	b5b0      	push	{r4, r5, r7, lr}
 80036da:	b096      	sub	sp, #88	; 0x58
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <start_COOL_task+0xf8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <start_COOL_task+0xfc>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff1f 	bl	800052c <__aeabi_f2d>
 80036ee:	a336      	add	r3, pc, #216	; (adr r3, 80037c8 <start_COOL_task+0xf0>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fc ff72 	bl	80005dc <__aeabi_dmul>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fd fa44 	bl	8000b8c <__aeabi_d2uiz>
 8003704:	4603      	mov	r3, r0
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Make task-specific structures */
	PID_t PID;
	float temperature = 20;
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <start_COOL_task+0x100>)
 800370a:	653b      	str	r3, [r7, #80]	; 0x50

	PID_initialize(&PID, // *ptr
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	eddf 2a32 	vldr	s5, [pc, #200]	; 80037dc <start_COOL_task+0x104>
 8003714:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8003718:	eddf 1a31 	vldr	s3, [pc, #196]	; 80037e0 <start_COOL_task+0x108>
 800371c:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80037e0 <start_COOL_task+0x108>
 8003720:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003724:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003728:	4618      	mov	r0, r3
 800372a:	f7fd fec6 	bl	80014ba <PID_initialize>
			0,	// Proportionate gain
			0,	// Proportionate gain
			20,	// Lower PID output bound
			100	// Upper PID output bound
			);
	FAN_initialize(&htim1);
 800372e:	482d      	ldr	r0, [pc, #180]	; (80037e4 <start_COOL_task+0x10c>)
 8003730:	f7fd fd70 	bl	8001214 <FAN_initialize>

	double *temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8003734:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003736:	f7fc fed7 	bl	80004e8 <__aeabi_ui2d>
 800373a:	4604      	mov	r4, r0
 800373c:	460d      	mov	r5, r1
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc fef2 	bl	800052c <__aeabi_f2d>
 8003748:	a31f      	add	r3, pc, #124	; (adr r3, 80037c8 <start_COOL_task+0xf0>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc ff45 	bl	80005dc <__aeabi_dmul>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f7fc fd89 	bl	8000270 <__adddf3>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f7fd fa11 	bl	8000b8c <__aeabi_d2uiz>
 800376a:	4603      	mov	r3, r0
 800376c:	657b      	str	r3, [r7, #84]	; 0x54
	osDelayUntil(next_tick);
 800376e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003770:	f010 f994 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if(xQueuePeek(temperatures_d_queue, &temperatures, 0)) {
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <start_COOL_task+0x110>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f107 010c 	add.w	r1, r7, #12
 800377c:	2200      	movs	r2, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f010 fecc 	bl	801451c <xQueuePeek>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <start_COOL_task+0xc4>
			temperature = temperatures[0];
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd fa1a 	bl	8000bcc <__aeabi_d2f>
 8003798:	4603      	mov	r3, r0
 800379a:	653b      	str	r3, [r7, #80]	; 0x50
		}

		PID_progress(&PID, temperature);
 800379c:	f107 0310 	add.w	r3, r7, #16
 80037a0:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fe19 	bl	80013dc <PID_progress>
		FAN_duty_cycle(&htim1, PID.output);
 80037aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80037ae:	eeb0 0a67 	vmov.f32	s0, s15
 80037b2:	480c      	ldr	r0, [pc, #48]	; (80037e4 <start_COOL_task+0x10c>)
 80037b4:	f7fd fd58 	bl	8001268 <FAN_duty_cycle>

		/* Wait until next period */
		next_tick += tick_increment;
 80037b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	4413      	add	r3, r2
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(next_tick);
 80037c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037c2:	f010 f96b 	bl	8013a9c <osDelayUntil>
		if(xQueuePeek(temperatures_d_queue, &temperatures, 0)) {
 80037c6:	e7d5      	b.n	8003774 <start_COOL_task+0x9c>
 80037c8:	f3cf3cf4 	.word	0xf3cf3cf4
 80037cc:	4067cf3c 	.word	0x4067cf3c
 80037d0:	2001b6f4 	.word	0x2001b6f4
 80037d4:	3f4ccccd 	.word	0x3f4ccccd
 80037d8:	41a00000 	.word	0x41a00000
 80037dc:	42c80000 	.word	0x42c80000
 80037e0:	00000000 	.word	0x00000000
 80037e4:	2001bca4 	.word	0x2001bca4
 80037e8:	2001b568 	.word	0x2001b568
 80037ec:	00000000 	.word	0x00000000

080037f0 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80037f8:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <start_SIM_task+0x100>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <start_SIM_task+0x104>)
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fe93 	bl	800052c <__aeabi_f2d>
 8003806:	a338      	add	r3, pc, #224	; (adr r3, 80038e8 <start_SIM_task+0xf8>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fee6 	bl	80005dc <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f9b8 	bl	8000b8c <__aeabi_d2uiz>
 800381c:	4603      	mov	r3, r0
 800381e:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	SIM0_initialize();
 8003820:	f003 fe56 	bl	80074d0 <SIM0_initialize>
	ivt_msg_result_u1_t U1;
	ivt_msg_result_u3_t U3;

	SIM0_U.SC = 0;
 8003824:	4934      	ldr	r1, [pc, #208]	; (80038f8 <start_SIM_task+0x108>)
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = 1;
 8003832:	4931      	ldr	r1, [pc, #196]	; (80038f8 <start_SIM_task+0x108>)
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	4b30      	ldr	r3, [pc, #192]	; (80038fc <start_SIM_task+0x10c>)
 800383a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = 1;
 800383e:	492e      	ldr	r1, [pc, #184]	; (80038f8 <start_SIM_task+0x108>)
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <start_SIM_task+0x10c>)
 8003846:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -100;
 800384a:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <start_SIM_task+0x108>)
 800384c:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <start_SIM_task+0x110>)
 8003856:	e9c1 2300 	strd	r2, r3, [r1]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 800385a:	69f8      	ldr	r0, [r7, #28]
 800385c:	f7fc fe44 	bl	80004e8 <__aeabi_ui2d>
 8003860:	4604      	mov	r4, r0
 8003862:	460d      	mov	r5, r1
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f7fc fe5f 	bl	800052c <__aeabi_f2d>
 800386e:	a31e      	add	r3, pc, #120	; (adr r3, 80038e8 <start_SIM_task+0xf8>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc feb2 	bl	80005dc <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	f7fc fcf6 	bl	8000270 <__adddf3>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f7fd f97e 	bl	8000b8c <__aeabi_d2uiz>
 8003890:	4603      	mov	r3, r0
 8003892:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8003894:	69f8      	ldr	r0, [r7, #28]
 8003896:	f010 f901 	bl	8013a9c <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		SIM0_step();
 800389a:	f002 fce1 	bl	8006260 <SIM0_step>

		U1.u_cells = SIM0_Y.accumulator_voltage;
 800389e:	4b19      	ldr	r3, [pc, #100]	; (8003904 <start_SIM_task+0x114>)
 80038a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80038a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		U3.u_vehicle = SIM0_Y.vehicle_voltage;
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <start_SIM_task+0x114>)
 80038aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80038ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

		xQueueOverwrite(ivt_msg_result_u1_queue, &U1);
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <start_SIM_task+0x118>)
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	f107 0110 	add.w	r1, r7, #16
 80038ba:	2302      	movs	r3, #2
 80038bc:	2200      	movs	r2, #0
 80038be:	f010 fb47 	bl	8013f50 <xQueueGenericSend>
		xQueueOverwrite(ivt_msg_result_u3_queue, &U3);
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <start_SIM_task+0x11c>)
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	f107 0108 	add.w	r1, r7, #8
 80038ca:	2302      	movs	r3, #2
 80038cc:	2200      	movs	r2, #0
 80038ce:	f010 fb3f 	bl	8013f50 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4413      	add	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 80038da:	69f8      	ldr	r0, [r7, #28]
 80038dc:	f010 f8de 	bl	8013a9c <osDelayUntil>
		SIM0_step();
 80038e0:	e7db      	b.n	800389a <start_SIM_task+0xaa>
 80038e2:	bf00      	nop
 80038e4:	f3af 8000 	nop.w
 80038e8:	f3cf3cf4 	.word	0xf3cf3cf4
 80038ec:	4067cf3c 	.word	0x4067cf3c
 80038f0:	2001b6f4 	.word	0x2001b6f4
 80038f4:	3f4ccccd 	.word	0x3f4ccccd
 80038f8:	2001e410 	.word	0x2001e410
 80038fc:	3ff00000 	.word	0x3ff00000
 8003900:	c0590000 	.word	0xc0590000
 8003904:	2001d618 	.word	0x2001d618
 8003908:	2001b59c 	.word	0x2001b59c
 800390c:	2001b584 	.word	0x2001b584

08003910 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003922:	f00b fd8d 	bl	800f440 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40000c00 	.word	0x40000c00

08003934 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003938:	b672      	cpsid	i
}
 800393a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800393c:	e7fe      	b.n	800393c <Error_Handler+0x8>
	...

08003940 <set_air_plus_ext>:

#include "main.h"

#include "SIM0.h"

void set_air_plus_ext(uint8_t closed){
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirPlus = closed;
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fdcb 	bl	80004e8 <__aeabi_ui2d>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4903      	ldr	r1, [pc, #12]	; (8003964 <set_air_plus_ext+0x24>)
 8003958:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	2001e410 	.word	0x2001e410

08003968 <get_air_plus_ext>:

uint8_t get_air_plus_ext(){
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_plus_closed;
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <get_air_plus_ext+0x1c>)
 800396e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f7fd f909 	bl	8000b8c <__aeabi_d2uiz>
 800397a:	4603      	mov	r3, r0
 800397c:	b2db      	uxtb	r3, r3
}
 800397e:	4618      	mov	r0, r3
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	2001d618 	.word	0x2001d618

08003988 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed){
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirMinus = closed;
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fda7 	bl	80004e8 <__aeabi_ui2d>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4903      	ldr	r1, [pc, #12]	; (80039ac <set_air_minus_ext+0x24>)
 80039a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2001e410 	.word	0x2001e410

080039b0 <get_air_minus_ext>:

uint8_t get_air_minus_ext(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_minus_closed;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <get_air_minus_ext+0x1c>)
 80039b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f7fd f8e5 	bl	8000b8c <__aeabi_d2uiz>
 80039c2:	4603      	mov	r3, r0
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2001d618 	.word	0x2001d618

080039d0 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnablePrecharge = closed;
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fd83 	bl	80004e8 <__aeabi_ui2d>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4903      	ldr	r1, [pc, #12]	; (80039f4 <set_precharge_ext+0x24>)
 80039e8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2001e410 	.word	0x2001e410

080039f8 <get_precharge_ext>:

uint8_t get_precharge_ext(){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	return SIM0_Y.precharge_closed;
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <get_precharge_ext+0x1c>)
 80039fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	f7fd f8c1 	bl	8000b8c <__aeabi_d2uiz>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	b2db      	uxtb	r3, r3

}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2001d618 	.word	0x2001d618

08003a18 <get_ams_error_latched_ext>:

void set_ams_error_ext(uint8_t raise_error){
	SIM0_U.AMS_error = raise_error;
}

uint8_t get_ams_error_latched_ext(){
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
	return SIM0_Y.AMS_error_latched;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <get_ams_error_latched_ext+0x14>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2001d618 	.word	0x2001d618

08003a30 <get_imd_error_latched_ext>:

void set_imd_error_ext(uint8_t raise_error){
	SIM0_U.IMD_error = raise_error;
}

uint8_t get_imd_error_latched_ext(){
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_error_latched;
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <get_imd_error_latched_ext+0x14>)
 8003a36:	785b      	ldrb	r3, [r3, #1]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2001d618 	.word	0x2001d618

08003a48 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext(){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	return SIM0_Y.SC_probe;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <get_sc_probe_ext+0x1c>)
 8003a4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fd f899 	bl	8000b8c <__aeabi_d2uiz>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	b2db      	uxtb	r3, r3
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2001d618 	.word	0x2001d618

08003a68 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext(){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_ok;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <get_imd_ok_ext+0x20>)
 8003a6e:	f503 635f 	add.w	r3, r3, #3568	; 0xdf0
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f7fd f887 	bl	8000b8c <__aeabi_d2uiz>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b2db      	uxtb	r3, r3
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2001d618 	.word	0x2001d618

08003a8c <set_charger_voltage_limit_ext>:

void set_charger_voltage_limit_ext(float level){
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	ed87 0a01 	vstr	s0, [r7, #4]
	SIM0_U.VoltageLimit = level;
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fc fd48 	bl	800052c <__aeabi_f2d>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4903      	ldr	r1, [pc, #12]	; (8003ab0 <set_charger_voltage_limit_ext+0x24>)
 8003aa2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2001e410 	.word	0x2001e410

08003ab4 <set_charger_current_limit_ext>:

void set_charger_current_limit_ext(float level){
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	ed87 0a01 	vstr	s0, [r7, #4]
	SIM0_U.CurrentLimit = level;
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc fd34 	bl	800052c <__aeabi_f2d>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <set_charger_current_limit_ext+0x24>)
 8003aca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2001e410 	.word	0x2001e410

08003adc <set_enable_charge_ext>:

void set_enable_charge_ext(uint8_t enable){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableCharge = enable;
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fcfd 	bl	80004e8 <__aeabi_ui2d>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4903      	ldr	r1, [pc, #12]	; (8003b00 <set_enable_charge_ext+0x24>)
 8003af4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2001e410 	.word	0x2001e410

08003b04 <set_balance_ext>:

void set_balance_ext(uint8_t closed, uint8_t index, void* settings){
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	603a      	str	r2, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
 8003b10:	460b      	mov	r3, r1
 8003b12:	71bb      	strb	r3, [r7, #6]
	SIM0_U.BalanceOut[index] = closed;
 8003b14:	79bc      	ldrb	r4, [r7, #6]
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fce5 	bl	80004e8 <__aeabi_ui2d>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <set_balance_ext+0x34>)
 8003b24:	f104 010d 	add.w	r1, r4, #13
 8003b28:	00c9      	lsls	r1, r1, #3
 8003b2a:	4401      	add	r1, r0
 8003b2c:	e9c1 2300 	strd	r2, r3, [r1]

}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd90      	pop	{r4, r7, pc}
 8003b38:	2001e410 	.word	0x2001e410

08003b3c <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <initialize_LTC+0x1c>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2001b710 	.word	0x2001b710

08003b5c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <MX_SPI2_Init+0x68>)
 8003b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b90:	2220      	movs	r2, #32
 8003b92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003ba8:	220a      	movs	r2, #10
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bac:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <MX_SPI2_Init+0x64>)
 8003bae:	f00d ff75 	bl	8011a9c <HAL_SPI_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003bb8:	f7ff febc 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	2001bbbc 	.word	0x2001bbbc
 8003bc4:	40003800 	.word	0x40003800

08003bc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <HAL_SPI_MspInit+0xc0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d14a      	bne.n	8003c80 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_SPI_MspInit+0xc4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c3e:	230c      	movs	r3, #12
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c4e:	2305      	movs	r3, #5
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	480d      	ldr	r0, [pc, #52]	; (8003c90 <HAL_SPI_MspInit+0xc8>)
 8003c5a:	f00d f8f3 	bl	8010e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c70:	2305      	movs	r3, #5
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4806      	ldr	r0, [pc, #24]	; (8003c94 <HAL_SPI_MspInit+0xcc>)
 8003c7c:	f00d f8e2 	bl	8010e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40003800 	.word	0x40003800
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020400 	.word	0x40020400

08003c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_MspInit+0x54>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a11      	ldr	r2, [pc, #68]	; (8003cec <HAL_MspInit+0x54>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_MspInit+0x54>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_MspInit+0x54>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_MspInit+0x54>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_MspInit+0x54>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	210f      	movs	r1, #15
 8003cda:	f06f 0001 	mvn.w	r0, #1
 8003cde:	f00c fd17 	bl	8010710 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8003d00:	2200      	movs	r2, #0
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	2032      	movs	r0, #50	; 0x32
 8003d06:	f00c fd03 	bl	8010710 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003d0a:	2032      	movs	r0, #50	; 0x32
 8003d0c:	f00c fd1c 	bl	8010748 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_InitTick+0xa4>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_InitTick+0xa4>)
 8003d1a:	f043 0308 	orr.w	r3, r3, #8
 8003d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <HAL_InitTick+0xa4>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d2c:	f107 0210 	add.w	r2, r7, #16
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f00d fe7e 	bl	8011a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d3c:	f00d fe68 	bl	8011a10 <HAL_RCC_GetPCLK1Freq>
 8003d40:	4603      	mov	r3, r0
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_InitTick+0xa8>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9b      	lsrs	r3, r3, #18
 8003d50:	3b01      	subs	r3, #1
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_InitTick+0xac>)
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_InitTick+0xb0>)
 8003d58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_InitTick+0xac>)
 8003d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d60:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003d62:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <HAL_InitTick+0xac>)
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_InitTick+0xac>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_InitTick+0xac>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003d74:	4809      	ldr	r0, [pc, #36]	; (8003d9c <HAL_InitTick+0xac>)
 8003d76:	f00d ff1a 	bl	8011bae <HAL_TIM_Base_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8003d80:	4806      	ldr	r0, [pc, #24]	; (8003d9c <HAL_InitTick+0xac>)
 8003d82:	f00d ffcb 	bl	8011d1c <HAL_TIM_Base_Start_IT>
 8003d86:	4603      	mov	r3, r0
 8003d88:	e000      	b.n	8003d8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3730      	adds	r7, #48	; 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	431bde83 	.word	0x431bde83
 8003d9c:	2001bc14 	.word	0x2001bc14
 8003da0:	40000c00 	.word	0x40000c00

08003da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <NMI_Handler+0x4>

08003daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <HardFault_Handler+0x4>

08003db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db4:	e7fe      	b.n	8003db4 <MemManage_Handler+0x4>

08003db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dba:	e7fe      	b.n	8003dba <BusFault_Handler+0x4>

08003dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <UsageFault_Handler+0x4>

08003dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <ADC_IRQHandler+0x10>)
 8003dd6:	f00b fb96 	bl	800f506 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2001b5c8 	.word	0x2001b5c8

08003de4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <CAN1_TX_IRQHandler+0x10>)
 8003dea:	f00c f9a0 	bl	801012e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2001b698 	.word	0x2001b698

08003df8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <CAN1_RX0_IRQHandler+0x10>)
 8003dfe:	f00c f996 	bl	801012e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2001b698 	.word	0x2001b698

08003e0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <CAN1_RX1_IRQHandler+0x10>)
 8003e12:	f00c f98c 	bl	801012e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2001b698 	.word	0x2001b698

08003e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <TIM2_IRQHandler+0x10>)
 8003e26:	f00e fb69 	bl	80124fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	2001bcec 	.word	0x2001bcec

08003e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <TIM3_IRQHandler+0x10>)
 8003e3a:	f00e fb5f 	bl	80124fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2001bc5c 	.word	0x2001bc5c

08003e48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <TIM5_IRQHandler+0x10>)
 8003e4e:	f00e fb55 	bl	80124fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2001bc14 	.word	0x2001bc14

08003e5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <DMA2_Stream0_IRQHandler+0x10>)
 8003e62:	f00c fd85 	bl	8010970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2001b610 	.word	0x2001b610

08003e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <SystemInit+0x20>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <SystemInit+0x20>)
 8003e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b096      	sub	sp, #88	; 0x58
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	615a      	str	r2, [r3, #20]
 8003ec4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	2220      	movs	r2, #32
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f014 f8a3 	bl	8018018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	; (8003fd0 <MX_TIM1_Init+0x13c>)
 8003ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ed8:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ede:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ee4:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef8:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003efe:	4833      	ldr	r0, [pc, #204]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003f00:	f00d fe55 	bl	8011bae <HAL_TIM_Base_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003f0a:	f7ff fd13 	bl	8003934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f18:	4619      	mov	r1, r3
 8003f1a:	482c      	ldr	r0, [pc, #176]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003f1c:	f00e fd54 	bl	80129c8 <HAL_TIM_ConfigClockSource>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003f26:	f7ff fd05 	bl	8003934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f2a:	4828      	ldr	r0, [pc, #160]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003f2c:	f00d ff66 	bl	8011dfc <HAL_TIM_PWM_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003f36:	f7ff fcfd 	bl	8003934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f46:	4619      	mov	r1, r3
 8003f48:	4820      	ldr	r0, [pc, #128]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003f4a:	f00f fb75 	bl	8013638 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003f54:	f7ff fcee 	bl	8003934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f58:	2360      	movs	r3, #96	; 0x60
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f64:	2300      	movs	r3, #0
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f70:	2300      	movs	r3, #0
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f78:	2208      	movs	r2, #8
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4813      	ldr	r0, [pc, #76]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003f7e:	f00e fc61 	bl	8012844 <HAL_TIM_PWM_ConfigChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003f88:	f7ff fcd4 	bl	8003934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4807      	ldr	r0, [pc, #28]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003fb0:	f00f fbbe 	bl	8013730 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003fba:	f7ff fcbb 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003fbe:	4803      	ldr	r0, [pc, #12]	; (8003fcc <MX_TIM1_Init+0x138>)
 8003fc0:	f000 f974 	bl	80042ac <HAL_TIM_MspPostInit>

}
 8003fc4:	bf00      	nop
 8003fc6:	3758      	adds	r7, #88	; 0x58
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2001bca4 	.word	0x2001bca4
 8003fd0:	40010000 	.word	0x40010000

08003fd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b090      	sub	sp, #64	; 0x40
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003fe8:	f107 031c 	add.w	r3, r7, #28
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800400e:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <MX_TIM2_Init+0x134>)
 8004010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004014:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004016:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <MX_TIM2_Init+0x134>)
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800401c:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <MX_TIM2_Init+0x134>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004022:	4b39      	ldr	r3, [pc, #228]	; (8004108 <MX_TIM2_Init+0x134>)
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <MX_TIM2_Init+0x134>)
 800402c:	2200      	movs	r2, #0
 800402e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004030:	4b35      	ldr	r3, [pc, #212]	; (8004108 <MX_TIM2_Init+0x134>)
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004036:	4834      	ldr	r0, [pc, #208]	; (8004108 <MX_TIM2_Init+0x134>)
 8004038:	f00d fdb9 	bl	8011bae <HAL_TIM_Base_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004042:	f7ff fc77 	bl	8003934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800404c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004050:	4619      	mov	r1, r3
 8004052:	482d      	ldr	r0, [pc, #180]	; (8004108 <MX_TIM2_Init+0x134>)
 8004054:	f00e fcb8 	bl	80129c8 <HAL_TIM_ConfigClockSource>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800405e:	f7ff fc69 	bl	8003934 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004062:	4829      	ldr	r0, [pc, #164]	; (8004108 <MX_TIM2_Init+0x134>)
 8004064:	f00d ffec 	bl	8012040 <HAL_TIM_IC_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800406e:	f7ff fc61 	bl	8003934 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004072:	2304      	movs	r3, #4
 8004074:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004076:	2350      	movs	r3, #80	; 0x50
 8004078:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800407e:	2300      	movs	r3, #0
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004086:	f107 031c 	add.w	r3, r7, #28
 800408a:	4619      	mov	r1, r3
 800408c:	481e      	ldr	r0, [pc, #120]	; (8004108 <MX_TIM2_Init+0x134>)
 800408e:	f00e fd62 	bl	8012b56 <HAL_TIM_SlaveConfigSynchro>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8004098:	f7ff fc4c 	bl	8003934 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80040a0:	2301      	movs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	2200      	movs	r2, #0
 80040b2:	4619      	mov	r1, r3
 80040b4:	4814      	ldr	r0, [pc, #80]	; (8004108 <MX_TIM2_Init+0x134>)
 80040b6:	f00e fb29 	bl	801270c <HAL_TIM_IC_ConfigChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80040c0:	f7ff fc38 	bl	8003934 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80040c4:	2302      	movs	r3, #2
 80040c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80040c8:	2302      	movs	r3, #2
 80040ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	2204      	movs	r2, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	480c      	ldr	r0, [pc, #48]	; (8004108 <MX_TIM2_Init+0x134>)
 80040d6:	f00e fb19 	bl	801270c <HAL_TIM_IC_ConfigChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80040e0:	f7ff fc28 	bl	8003934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	4805      	ldr	r0, [pc, #20]	; (8004108 <MX_TIM2_Init+0x134>)
 80040f2:	f00f faa1 	bl	8013638 <HAL_TIMEx_MasterConfigSynchronization>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80040fc:	f7ff fc1a 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004100:	bf00      	nop
 8004102:	3740      	adds	r7, #64	; 0x40
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	2001bcec 	.word	0x2001bcec

0800410c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004120:	463b      	mov	r3, r7
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <MX_TIM3_Init+0x94>)
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <MX_TIM3_Init+0x98>)
 800412c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <MX_TIM3_Init+0x94>)
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <MX_TIM3_Init+0x94>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <MX_TIM3_Init+0x94>)
 800413c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <MX_TIM3_Init+0x94>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <MX_TIM3_Init+0x94>)
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800414e:	4814      	ldr	r0, [pc, #80]	; (80041a0 <MX_TIM3_Init+0x94>)
 8004150:	f00d fd2d 	bl	8011bae <HAL_TIM_Base_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800415a:	f7ff fbeb 	bl	8003934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800415e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004162:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004164:	f107 0308 	add.w	r3, r7, #8
 8004168:	4619      	mov	r1, r3
 800416a:	480d      	ldr	r0, [pc, #52]	; (80041a0 <MX_TIM3_Init+0x94>)
 800416c:	f00e fc2c 	bl	80129c8 <HAL_TIM_ConfigClockSource>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004176:	f7ff fbdd 	bl	8003934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800417a:	2320      	movs	r3, #32
 800417c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004182:	463b      	mov	r3, r7
 8004184:	4619      	mov	r1, r3
 8004186:	4806      	ldr	r0, [pc, #24]	; (80041a0 <MX_TIM3_Init+0x94>)
 8004188:	f00f fa56 	bl	8013638 <HAL_TIMEx_MasterConfigSynchronization>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004192:	f7ff fbcf 	bl	8003934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	2001bc5c 	.word	0x2001bc5c
 80041a4:	40000400 	.word	0x40000400

080041a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	; 0x30
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a35      	ldr	r2, [pc, #212]	; (800429c <HAL_TIM_Base_MspInit+0xf4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	4a33      	ldr	r2, [pc, #204]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6453      	str	r3, [r2, #68]	; 0x44
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80041e6:	e055      	b.n	8004294 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d135      	bne.n	800425e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6313      	str	r3, [r2, #48]	; 0x30
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 800422a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004238:	2300      	movs	r3, #0
 800423a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800423c:	2301      	movs	r3, #1
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8004240:	f107 031c 	add.w	r3, r7, #28
 8004244:	4619      	mov	r1, r3
 8004246:	4817      	ldr	r0, [pc, #92]	; (80042a4 <HAL_TIM_Base_MspInit+0xfc>)
 8004248:	f00c fdfc 	bl	8010e44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800424c:	2200      	movs	r2, #0
 800424e:	2105      	movs	r1, #5
 8004250:	201c      	movs	r0, #28
 8004252:	f00c fa5d 	bl	8010710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004256:	201c      	movs	r0, #28
 8004258:	f00c fa76 	bl	8010748 <HAL_NVIC_EnableIRQ>
}
 800425c:	e01a      	b.n	8004294 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <HAL_TIM_Base_MspInit+0x100>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d115      	bne.n	8004294 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_TIM_Base_MspInit+0xf8>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004284:	2200      	movs	r2, #0
 8004286:	2105      	movs	r1, #5
 8004288:	201d      	movs	r0, #29
 800428a:	f00c fa41 	bl	8010710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800428e:	201d      	movs	r0, #29
 8004290:	f00c fa5a 	bl	8010748 <HAL_NVIC_EnableIRQ>
}
 8004294:	bf00      	nop
 8004296:	3730      	adds	r7, #48	; 0x30
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40010000 	.word	0x40010000
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020000 	.word	0x40020000
 80042a8:	40000400 	.word	0x40000400

080042ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a12      	ldr	r2, [pc, #72]	; (8004314 <HAL_TIM_MspPostInit+0x68>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d11e      	bne.n	800430c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_TIM_MspPostInit+0x6c>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <HAL_TIM_MspPostInit+0x6c>)
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_TIM_MspPostInit+0x6c>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 80042ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042fc:	2301      	movs	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 8004300:	f107 030c 	add.w	r3, r7, #12
 8004304:	4619      	mov	r1, r3
 8004306:	4805      	ldr	r0, [pc, #20]	; (800431c <HAL_TIM_MspPostInit+0x70>)
 8004308:	f00c fd9c 	bl	8010e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800430c:	bf00      	nop
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010000 	.word	0x40010000
 8004318:	40023800 	.word	0x40023800
 800431c:	40021000 	.word	0x40021000

08004320 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 8004320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3308      	adds	r3, #8
 8004330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3310      	adds	r3, #16
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc fa78 	bl	8000830 <__aeabi_ddiv>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8004348:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <CSE_S_x+0x124>)
 800434a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800434e:	4614      	mov	r4, r2
 8004350:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004354:	220c      	movs	r2, #12
 8004356:	493c      	ldr	r1, [pc, #240]	; (8004448 <CSE_S_x+0x128>)
 8004358:	483c      	ldr	r0, [pc, #240]	; (800444c <CSE_S_x+0x12c>)
 800435a:	ed97 0b04 	vldr	d0, [r7, #16]
 800435e:	f005 fb73 	bl	8009a48 <look1_binlxpw>
 8004362:	ec53 2b10 	vmov	r2, r3, d0
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fc fa61 	bl	8000830 <__aeabi_ddiv>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	ec43 2b17 	vmov	d7, r2, r3
 8004376:	eeb0 0a47 	vmov.f32	s0, s14
 800437a:	eef0 0a67 	vmov.f32	s1, s15
 800437e:	f013 ff6b 	bl	8018258 <exp>
 8004382:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 8004386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438a:	f04f 0000 	mov.w	r0, #0
 800438e:	4930      	ldr	r1, [pc, #192]	; (8004450 <CSE_S_x+0x130>)
 8004390:	f7fb ff6c 	bl	800026c <__aeabi_dsub>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <CSE_S_x+0x134>)
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f7fc f91b 	bl	80005dc <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4614      	mov	r4, r2
 80043ac:	461d      	mov	r5, r3
 80043ae:	220c      	movs	r2, #12
 80043b0:	4924      	ldr	r1, [pc, #144]	; (8004444 <CSE_S_x+0x124>)
 80043b2:	4826      	ldr	r0, [pc, #152]	; (800444c <CSE_S_x+0x12c>)
 80043b4:	ed97 0b04 	vldr	d0, [r7, #16]
 80043b8:	f005 fb46 	bl	8009a48 <look1_binlxpw>
 80043bc:	ec53 2b10 	vmov	r2, r3, d0
 80043c0:	4620      	mov	r0, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	f7fc f90a 	bl	80005dc <__aeabi_dmul>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4614      	mov	r4, r2
 80043ce:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043da:	f7fc f8ff 	bl	80005dc <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fb ff43 	bl	8000270 <__adddf3>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <CSE_S_x+0x134>)
 80043f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <CSE_S_x+0x124>)
 80043fc:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8004400:	f7fc f8ec 	bl	80005dc <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4690      	mov	r8, r2
 800440a:	4699      	mov	r9, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3308      	adds	r3, #8
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	f101 0408 	add.w	r4, r1, #8
 800441a:	4640      	mov	r0, r8
 800441c:	4649      	mov	r1, r9
 800441e:	f7fb ff27 	bl	8000270 <__adddf3>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f103 0110 	add.w	r1, r3, #16
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004436:	e9c1 2300 	strd	r2, r3, [r1]
}
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004444:	20000088 	.word	0x20000088
 8004448:	20000230 	.word	0x20000230
 800444c:	200001c8 	.word	0x200001c8
 8004450:	3ff00000 	.word	0x3ff00000
 8004454:	2001bd48 	.word	0x2001bd48

08004458 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8004458:	b5b0      	push	{r4, r5, r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3308      	adds	r3, #8
 8004466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3310      	adds	r3, #16
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fc f9dd 	bl	8000830 <__aeabi_ddiv>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <CSE_M_x+0x8c>)
 8004480:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004484:	220c      	movs	r2, #12
 8004486:	4918      	ldr	r1, [pc, #96]	; (80044e8 <CSE_M_x+0x90>)
 8004488:	4818      	ldr	r0, [pc, #96]	; (80044ec <CSE_M_x+0x94>)
 800448a:	ed97 0b02 	vldr	d0, [r7, #8]
 800448e:	f005 fadb 	bl	8009a48 <look1_binlxpw>
 8004492:	ec53 2b10 	vmov	r2, r3, d0
 8004496:	4620      	mov	r0, r4
 8004498:	4629      	mov	r1, r5
 800449a:	f7fc f89f 	bl	80005dc <__aeabi_dmul>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4614      	mov	r4, r2
 80044a4:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 80044a6:	220c      	movs	r2, #12
 80044a8:	4911      	ldr	r1, [pc, #68]	; (80044f0 <CSE_M_x+0x98>)
 80044aa:	4810      	ldr	r0, [pc, #64]	; (80044ec <CSE_M_x+0x94>)
 80044ac:	ed97 0b02 	vldr	d0, [r7, #8]
 80044b0:	f005 faca 	bl	8009a48 <look1_binlxpw>
 80044b4:	ec53 2b10 	vmov	r2, r3, d0
 80044b8:	4620      	mov	r0, r4
 80044ba:	4629      	mov	r1, r5
 80044bc:	f7fb fed8 	bl	8000270 <__adddf3>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fecf 	bl	8000270 <__adddf3>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80044d6:	6839      	ldr	r1, [r7, #0]
 80044d8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdb0      	pop	{r4, r5, r7, pc}
 80044e4:	2001bd48 	.word	0x2001bd48
 80044e8:	200000f0 	.word	0x200000f0
 80044ec:	200001c8 	.word	0x200001c8
 80044f0:	20000160 	.word	0x20000160

080044f4 <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 80044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	ed2d 8b02 	vpush	{d8}
 80044fc:	b0e1      	sub	sp, #388	; 0x184
 80044fe:	af04      	add	r7, sp, #16
 8004500:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004504:	ed84 0b00 	vstr	d0, [r4]
 8004508:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800450c:	6020      	str	r0, [r4, #0]
 800450e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004512:	6001      	str	r1, [r0, #0]
 8004514:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004518:	ed81 1b00 	vstr	d1, [r1]
 800451c:	f107 0120 	add.w	r1, r7, #32
 8004520:	ed81 2b00 	vstr	d2, [r1]
 8004524:	f107 0118 	add.w	r1, r7, #24
 8004528:	ed81 3b00 	vstr	d3, [r1]
 800452c:	f107 0114 	add.w	r1, r7, #20
 8004530:	600a      	str	r2, [r1, #0]
 8004532:	f107 0210 	add.w	r2, r7, #16
 8004536:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8004538:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800453c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004544:	f7fc f84a 	bl	80005dc <__aeabi_dmul>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004550:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 8004554:	f107 0118 	add.w	r1, r7, #24
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	4b96      	ldr	r3, [pc, #600]	; (80047b8 <UKFCorrectorAdditive_getPredict+0x2c4>)
 800455e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004562:	f7fb fe85 	bl	8000270 <__adddf3>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f7fc f831 	bl	80005dc <__aeabi_dmul>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004582:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 8004586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	4989      	ldr	r1, [pc, #548]	; (80047b8 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8004594:	f7fc f94c 	bl	8000830 <__aeabi_ddiv>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	f04f 0000 	mov.w	r0, #0
 80045a0:	4986      	ldr	r1, [pc, #536]	; (80047bc <UKFCorrectorAdditive_getPredict+0x2c8>)
 80045a2:	f7fb fe63 	bl	800026c <__aeabi_dsub>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80045ae:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 80045b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	f7fb fe57 	bl	8000270 <__adddf3>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	497c      	ldr	r1, [pc, #496]	; (80047bc <UKFCorrectorAdditive_getPredict+0x2c8>)
 80045cc:	f7fc f930 	bl	8000830 <__aeabi_ddiv>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80045d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 80045dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	4974      	ldr	r1, [pc, #464]	; (80047bc <UKFCorrectorAdditive_getPredict+0x2c8>)
 80045ea:	f7fb fe3f 	bl	800026c <__aeabi_dsub>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f107 0320 	add.w	r3, r7, #32
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f7fb fe37 	bl	8000270 <__adddf3>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fe2d 	bl	8000270 <__adddf3>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800461e:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8004622:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004626:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800462a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800462e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8004632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f7fc fa33 	bl	8000aac <__aeabi_dcmpeq>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d154      	bne.n	80046f6 <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 800464c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004658:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 800465c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004668:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 800466c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fc f8d8 	bl	8000830 <__aeabi_ddiv>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004688:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 800468c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004694:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fc f8c8 	bl	8000830 <__aeabi_ddiv>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80046a8:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 80046ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046b4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 80046b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80046c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fc f8b2 	bl	8000830 <__aeabi_ddiv>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80046d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80046e4:	f7fc f8a4 	bl	8000830 <__aeabi_ddiv>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80046f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80046f4:	e006      	b.n	8004704 <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 80046f6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <UKFCorrectorAdditive_getPredict+0x2c8>)
 8004700:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 8004704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004708:	ed93 7b00 	vldr	d7, [r3]
 800470c:	eeb0 0a47 	vmov.f32	s0, s14
 8004710:	eef0 0a67 	vmov.f32	s1, s15
 8004714:	f013 fe38 	bl	8018388 <sqrt>
 8004718:	eeb0 7a40 	vmov.f32	s14, s0
 800471c:	eef0 7a60 	vmov.f32	s15, s1
 8004720:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004724:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800472e:	e037      	b.n	80047a0 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8004730:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	4413      	add	r3, r2
 800473e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f7fb ff47 	bl	80005dc <__aeabi_dmul>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004756:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 800475a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004766:	00c9      	lsls	r1, r1, #3
 8004768:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800476c:	4401      	add	r1, r0
 800476e:	39a0      	subs	r1, #160	; 0xa0
 8004770:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 8004774:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004780:	3109      	adds	r1, #9
 8004782:	4690      	mov	r8, r2
 8004784:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004788:	00cb      	lsls	r3, r1, #3
 800478a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800478e:	4413      	add	r3, r2
 8004790:	3ba0      	subs	r3, #160	; 0xa0
 8004792:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8004796:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800479a:	3301      	adds	r3, #1
 800479c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80047a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	ddc3      	ble.n	8004730 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80047b4:	e065      	b.n	8004882 <UKFCorrectorAdditive_getPredict+0x38e>
 80047b6:	bf00      	nop
 80047b8:	40080000 	.word	0x40080000
 80047bc:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 80047c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80047ca:	4413      	add	r3, r2
 80047cc:	3ba0      	subs	r3, #160	; 0xa0
 80047ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fd48 	bl	8000270 <__adddf3>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80047e8:	00c9      	lsls	r1, r1, #3
 80047ea:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80047ee:	4401      	add	r1, r0
 80047f0:	39a0      	subs	r1, #160	; 0xa0
 80047f2:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 80047f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047fa:	3301      	adds	r3, #1
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004802:	4413      	add	r3, r2
 8004804:	3ba0      	subs	r3, #160	; 0xa0
 8004806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800480a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 800481a:	3401      	adds	r4, #1
 800481c:	f7fb fd28 	bl	8000270 <__adddf3>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	00e1      	lsls	r1, r4, #3
 8004826:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800482a:	4401      	add	r1, r0
 800482c:	39a0      	subs	r1, #160	; 0xa0
 800482e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 8004832:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004836:	3302      	adds	r3, #2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800483e:	4413      	add	r3, r2
 8004840:	3ba0      	subs	r3, #160	; 0xa0
 8004842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004846:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3310      	adds	r3, #16
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 8004856:	3402      	adds	r4, #2
 8004858:	f7fb fd0a 	bl	8000270 <__adddf3>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	00e1      	lsls	r1, r4, #3
 8004862:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004866:	4401      	add	r1, r0
 8004868:	39a0      	subs	r1, #160	; 0xa0
 800486a:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 800486e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004872:	3303      	adds	r3, #3
 8004874:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004878:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800487c:	3301      	adds	r3, #1
 800487e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004882:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004886:	2b05      	cmp	r3, #5
 8004888:	dd9a      	ble.n	80047c0 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004896:	e018      	b.n	80048ca <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8004898:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800489c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	18d0      	adds	r0, r2, r3
 80048a4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80048a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7ff fdd1 	bl	8004458 <CSE_M_x>
    knt_0 += 3;
 80048b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80048ba:	3303      	adds	r3, #3
 80048bc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 80048c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80048ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	dde2      	ble.n	8004898 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 80048d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048da:	4611      	mov	r1, r2
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f7ff fdbb 	bl	8004458 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80048e8:	e027      	b.n	800493a <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 80048ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80048f4:	4413      	add	r3, r2
 80048f6:	3bd0      	subs	r3, #208	; 0xd0
 80048f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fcb2 	bl	800026c <__aeabi_dsub>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fcaa 	bl	8000270 <__adddf3>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004924:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004928:	00c9      	lsls	r1, r1, #3
 800492a:	4401      	add	r1, r0
 800492c:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8004930:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004934:	3301      	adds	r3, #1
 8004936:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800493a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800493e:	2b05      	cmp	r3, #5
 8004940:	ddd3      	ble.n	80048ea <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 8004942:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004946:	ed93 7b00 	vldr	d7, [r3]
 800494a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800494e:	ed93 6b00 	vldr	d6, [r3]
 8004952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004956:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800495a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800495e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004962:	f107 0210 	add.w	r2, r7, #16
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	9203      	str	r2, [sp, #12]
 800496a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800496e:	9202      	str	r2, [sp, #8]
 8004970:	f107 0214 	add.w	r2, r7, #20
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	9201      	str	r2, [sp, #4]
 8004978:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800497c:	9200      	str	r2, [sp, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4622      	mov	r2, r4
 8004982:	eeb0 1a46 	vmov.f32	s2, s12
 8004986:	eef0 1a66 	vmov.f32	s3, s13
 800498a:	eeb0 0a47 	vmov.f32	s0, s14
 800498e:	eef0 0a67 	vmov.f32	s1, s15
 8004992:	f004 fbff 	bl	8009194 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 8004996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80049a2:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 80049a6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80049aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 80049b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80049c2:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 80049c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80049ca:	2202      	movs	r2, #2
 80049cc:	4619      	mov	r1, r3
 80049ce:	2001      	movs	r0, #1
 80049d0:	f009 ff10 	bl	800e7f4 <xnrm2_Mnmxg9YT>
 80049d4:	eeb0 7a40 	vmov.f32	s14, s0
 80049d8:	eef0 7a60 	vmov.f32	s15, s1
 80049dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049e0:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80049e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	f7fc f85a 	bl	8000aac <__aeabi_dcmpeq>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d000      	beq.n	8004a00 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80049fe:	e0fa      	b.n	8004bf6 <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 8004a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a04:	ed93 7b00 	vldr	d7, [r3]
 8004a08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a0c:	ed93 6b00 	vldr	d6, [r3]
 8004a10:	eeb0 1a46 	vmov.f32	s2, s12
 8004a14:	eef0 1a66 	vmov.f32	s3, s13
 8004a18:	eeb0 0a47 	vmov.f32	s0, s14
 8004a1c:	eef0 0a67 	vmov.f32	s1, s15
 8004a20:	f007 fb5e 	bl	800c0e0 <rt_hypotd_snf>
 8004a24:	eeb0 7a40 	vmov.f32	s14, s0
 8004a28:	eef0 7a60 	vmov.f32	s15, s1
 8004a2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a30:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8004a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	f7fc f850 	bl	8000ae8 <__aeabi_dcmpge>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8004a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	4615      	mov	r5, r2
 8004a58:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8004a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a60:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8004a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	60ba      	str	r2, [r7, #8]
 8004a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004a7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a80:	f7fc f81e 	bl	8000ac0 <__aeabi_dcmplt>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80ad 	beq.w	8004be6 <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8004a92:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004a96:	3301      	adds	r3, #1
 8004a98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8004a9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004aa0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <UKFCorrectorAdditive_getPredict+0x714>)
 8004aaa:	f7fb fd97 	bl	80005dc <__aeabi_dmul>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004ab6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8004aba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <UKFCorrectorAdditive_getPredict+0x714>)
 8004ac8:	f7fb fd88 	bl	80005dc <__aeabi_dmul>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004ad4:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8004ad8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <UKFCorrectorAdditive_getPredict+0x714>)
 8004ae6:	f7fb fd79 	bl	80005dc <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004af2:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8004af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	603a      	str	r2, [r7, #0]
 8004b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b12:	f7fb ffd5 	bl	8000ac0 <__aeabi_dcmplt>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <UKFCorrectorAdditive_getPredict+0x630>
 8004b1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b20:	2b13      	cmp	r3, #19
 8004b22:	ddb6      	ble.n	8004a92 <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8004b24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b28:	ed93 8b00 	vldr	d8, [r3]
 8004b2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004b30:	2202      	movs	r2, #2
 8004b32:	4619      	mov	r1, r3
 8004b34:	2001      	movs	r0, #1
 8004b36:	f009 fe5d 	bl	800e7f4 <xnrm2_Mnmxg9YT>
 8004b3a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b3e:	eef0 7a60 	vmov.f32	s15, s1
 8004b42:	eeb0 1a47 	vmov.f32	s2, s14
 8004b46:	eef0 1a67 	vmov.f32	s3, s15
 8004b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8004b4e:	eef0 0a68 	vmov.f32	s1, s17
 8004b52:	f007 fac5 	bl	800c0e0 <rt_hypotd_snf>
 8004b56:	eeb0 7a40 	vmov.f32	s14, s0
 8004b5a:	eef0 7a60 	vmov.f32	s15, s1
 8004b5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b62:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8004b66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	f7fb ffb7 	bl	8000ae8 <__aeabi_dcmpge>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8004b80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	4692      	mov	sl, r2
 8004b8a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8004b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b92:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004b9c:	e014      	b.n	8004bc8 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8004b9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004bae:	f7fb fd15 	bl	80005dc <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004bba:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8004bbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004bc8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8004bcc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	dbe4      	blt.n	8004b9e <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8004bd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004be0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004be4:	e007      	b.n	8004bf6 <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8004be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8004bf2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004bf6:	bf00      	nop
 8004bf8:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	ecbd 8b02 	vpop	{d8}
 8004c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	7c900000 	.word	0x7c900000
 8004c0c:	00000000 	.word	0x00000000

08004c10 <CSE_step>:

void CSE_step(void)
{
 8004c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c14:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8004c18:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8004c1a:	4bb3      	ldr	r3, [pc, #716]	; (8004ee8 <CSE_step+0x2d8>)
 8004c1c:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f001 803e 	beq.w	8005ca2 <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	4619      	mov	r1, r3
 8004c32:	48ae      	ldr	r0, [pc, #696]	; (8004eec <CSE_step+0x2dc>)
 8004c34:	f7ff fc10 	bl	8004458 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8004c38:	4bab      	ldr	r3, [pc, #684]	; (8004ee8 <CSE_step+0x2d8>)
 8004c3a:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8004c3e:	f107 0110 	add.w	r1, r7, #16
 8004c42:	f107 0208 	add.w	r2, r7, #8
 8004c46:	463b      	mov	r3, r7
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8004ed0 <CSE_step+0x2c0>
 8004c50:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8004ed8 <CSE_step+0x2c8>
 8004c54:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8004ee0 <CSE_step+0x2d0>
 8004c58:	49a5      	ldr	r1, [pc, #660]	; (8004ef0 <CSE_step+0x2e0>)
 8004c5a:	48a4      	ldr	r0, [pc, #656]	; (8004eec <CSE_step+0x2dc>)
 8004c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c60:	eef0 0a67 	vmov.f32	s1, s15
 8004c64:	f7ff fc46 	bl	80044f4 <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8004c68:	4ba2      	ldr	r3, [pc, #648]	; (8004ef4 <CSE_step+0x2e4>)
 8004c6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb faf9 	bl	800026c <__aeabi_dsub>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	f107 0108 	add.w	r1, r7, #8
 8004c82:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004c92:	e04a      	b.n	8004d2a <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8004c94:	4a96      	ldr	r2, [pc, #600]	; (8004ef0 <CSE_step+0x2e0>)
 8004c96:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004ca6:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8004caa:	00c9      	lsls	r1, r1, #3
 8004cac:	4401      	add	r1, r0
 8004cae:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8004cb2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004cb6:	3303      	adds	r3, #3
 8004cb8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8004cbc:	1c51      	adds	r1, r2, #1
 8004cbe:	4a8c      	ldr	r2, [pc, #560]	; (8004ef0 <CSE_step+0x2e0>)
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004ccc:	00c9      	lsls	r1, r1, #3
 8004cce:	4401      	add	r1, r0
 8004cd0:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8004cd4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004cd8:	3306      	adds	r3, #6
 8004cda:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8004cde:	1c91      	adds	r1, r2, #2
 8004ce0:	4a83      	ldr	r2, [pc, #524]	; (8004ef0 <CSE_step+0x2e0>)
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8004cee:	00c9      	lsls	r1, r1, #3
 8004cf0:	4401      	add	r1, r0
 8004cf2:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8004cf6:	f107 0210 	add.w	r2, r7, #16
 8004cfa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4413      	add	r3, r2
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004d0a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8004d0e:	00c9      	lsls	r1, r1, #3
 8004d10:	4401      	add	r1, r0
 8004d12:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8004d16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004d1a:	3303      	adds	r3, #3
 8004d1c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8004d20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004d24:	3301      	adds	r3, #1
 8004d26:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004d2a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	ddb0      	ble.n	8004c94 <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8004d32:	463b      	mov	r3, r7
 8004d34:	ed93 7b00 	vldr	d7, [r3]
 8004d38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8004d42:	eef0 0a67 	vmov.f32	s1, s15
 8004d46:	f009 f8ef 	bl	800df28 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8004d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004d56:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8004d5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d62:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004d66:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8004d6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d72:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004d76:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	ed93 7b00 	vldr	d7, [r3]
 8004d80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d84:	4618      	mov	r0, r3
 8004d86:	eeb0 0a47 	vmov.f32	s0, s14
 8004d8a:	eef0 0a67 	vmov.f32	s1, s15
 8004d8e:	f009 f8cb 	bl	800df28 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8004d92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fc1c 	bl	80005dc <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	f107 0110 	add.w	r1, r7, #16
 8004dac:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004db6:	e011      	b.n	8004ddc <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8004db8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	18d1      	adds	r1, r2, r3
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8004dd2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004ddc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	dde9      	ble.n	8004db8 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8004de4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004de8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004dec:	463b      	mov	r3, r7
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb fbf3 	bl	80005dc <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	f107 0110 	add.w	r1, r7, #16
 8004dfe:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8004e02:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8004e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e16:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f7fb fbdc 	bl	80005dc <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	f107 0110 	add.w	r1, r7, #16
 8004e2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8004e30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	461e      	mov	r6, r3
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	f7fb fe32 	bl	8000aac <__aeabi_dcmpeq>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <CSE_step+0x242>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	461e      	mov	r6, r3
 8004e52:	b2f3      	uxtb	r3, r6
 8004e54:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8004e58:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d113      	bne.n	8004e88 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8004e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004e64:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004e68:	2301      	movs	r3, #1
 8004e6a:	461e      	mov	r6, r3
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	f7fb fe1a 	bl	8000aac <__aeabi_dcmpeq>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <CSE_step+0x272>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	461e      	mov	r6, r3
 8004e82:	b2f3      	uxtb	r3, r6
 8004e84:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8004e88:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d113      	bne.n	8004eb8 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8004e90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004e94:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004e98:	2301      	movs	r3, #1
 8004e9a:	461e      	mov	r6, r3
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f7fb fe02 	bl	8000aac <__aeabi_dcmpeq>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <CSE_step+0x2a2>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	461e      	mov	r6, r3
 8004eb2:	b2f3      	uxtb	r3, r6
 8004eb4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8004ebe:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <CSE_step+0x2e8>
      guard1 = true;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8004ecc:	e395      	b.n	80055fa <CSE_step+0x9ea>
 8004ece:	bf00      	nop
	...
 8004edc:	40000000 	.word	0x40000000
 8004ee0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ee4:	3f50624d 	.word	0x3f50624d
 8004ee8:	20000088 	.word	0x20000088
 8004eec:	2001bda0 	.word	0x2001bda0
 8004ef0:	2001bd58 	.word	0x2001bd58
 8004ef4:	2001bd48 	.word	0x2001bd48
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f00:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004f04:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f7fb fc8a 	bl	8000830 <__aeabi_ddiv>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004f24:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8004f28:	f107 0310 	add.w	r3, r7, #16
 8004f2c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8004f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004f40:	f7fb fb4c 	bl	80005dc <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4640      	mov	r0, r8
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	f7fb f98e 	bl	800026c <__aeabi_dsub>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f60:	f7fb fc66 	bl	8000830 <__aeabi_ddiv>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004f6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8004f70:	f107 0310 	add.w	r3, r7, #16
 8004f74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f78:	4639      	mov	r1, r7
 8004f7a:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004f84:	e025      	b.n	8004fd2 <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8004f86:	463b      	mov	r3, r7
 8004f88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f8c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004f90:	3306      	adds	r3, #6
 8004f92:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004fa2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb fb15 	bl	80005dc <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	4649      	mov	r1, r9
 8004fba:	f7fb f957 	bl	800026c <__aeabi_dsub>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8004fc8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004fd2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	ddd5      	ble.n	8004f86 <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8004fda:	463b      	mov	r3, r7
 8004fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fe0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004fe4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004fe8:	f7fb fc22 	bl	8000830 <__aeabi_ddiv>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004ff4:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005000:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8005004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	4611      	mov	r1, r2
 800500e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005016:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005022:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005026:	f7fb fd69 	bl	8000afc <__aeabi_dcmpgt>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <CSE_step+0x436>
        temp = 1.0;
 8005030:	4639      	mov	r1, r7
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	4bbf      	ldr	r3, [pc, #764]	; (8005334 <CSE_step+0x724>)
 8005038:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800503c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005040:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005044:	e016      	b.n	8005074 <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800504e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005052:	f7fb fbed 	bl	8000830 <__aeabi_ddiv>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 800505e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005062:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005066:	f7fb fab9 	bl	80005dc <__aeabi_dmul>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4639      	mov	r1, r7
 8005070:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8005074:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005078:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800507c:	4611      	mov	r1, r2
 800507e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005086:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 800508a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800508e:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005092:	f7fb fd33 	bl	8000afc <__aeabi_dcmpgt>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02b      	beq.n	80050f4 <CSE_step+0x4e4>
        t = scale / absxk;
 800509c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80050a0:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 80050a4:	f7fb fbc4 	bl	8000830 <__aeabi_ddiv>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 80050b0:	463b      	mov	r3, r7
 80050b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050b6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80050ba:	f7fb fa8f 	bl	80005dc <__aeabi_dmul>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80050ca:	f7fb fa87 	bl	80005dc <__aeabi_dmul>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	4b96      	ldr	r3, [pc, #600]	; (8005334 <CSE_step+0x724>)
 80050dc:	f7fb f8c8 	bl	8000270 <__adddf3>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4639      	mov	r1, r7
 80050e6:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80050ea:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80050ee:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80050f2:	e01d      	b.n	8005130 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 80050f4:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80050f8:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80050fc:	f7fb fb98 	bl	8000830 <__aeabi_ddiv>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005108:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800510c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005110:	f7fb fa64 	bl	80005dc <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	463b      	mov	r3, r7
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f7fb f8a5 	bl	8000270 <__adddf3>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4639      	mov	r1, r7
 800512c:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8005130:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005134:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005138:	4611      	mov	r1, r2
 800513a:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800513e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005142:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005146:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800514a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800514e:	f7fb fcd5 	bl	8000afc <__aeabi_dcmpgt>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02b      	beq.n	80051b0 <CSE_step+0x5a0>
        t = scale / absxk;
 8005158:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800515c:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005160:	f7fb fb66 	bl	8000830 <__aeabi_ddiv>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 800516c:	463b      	mov	r3, r7
 800516e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005172:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005176:	f7fb fa31 	bl	80005dc <__aeabi_dmul>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005186:	f7fb fa29 	bl	80005dc <__aeabi_dmul>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	4b67      	ldr	r3, [pc, #412]	; (8005334 <CSE_step+0x724>)
 8005198:	f7fb f86a 	bl	8000270 <__adddf3>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4639      	mov	r1, r7
 80051a2:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80051a6:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80051aa:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80051ae:	e01d      	b.n	80051ec <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 80051b0:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80051b4:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80051b8:	f7fb fb3a 	bl	8000830 <__aeabi_ddiv>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 80051c4:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80051c8:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80051cc:	f7fb fa06 	bl	80005dc <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4610      	mov	r0, r2
 80051d6:	4619      	mov	r1, r3
 80051d8:	463b      	mov	r3, r7
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb f847 	bl	8000270 <__adddf3>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4639      	mov	r1, r7
 80051e8:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 80051ec:	463b      	mov	r3, r7
 80051ee:	ed93 7b00 	vldr	d7, [r3]
 80051f2:	eeb0 0a47 	vmov.f32	s0, s14
 80051f6:	eef0 0a67 	vmov.f32	s1, s15
 80051fa:	f013 f8c5 	bl	8018388 <sqrt>
 80051fe:	ec51 0b10 	vmov	r0, r1, d0
 8005202:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005206:	f7fb f9e9 	bl	80005dc <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4639      	mov	r1, r7
 8005210:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8005214:	463b      	mov	r3, r7
 8005216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	4b45      	ldr	r3, [pc, #276]	; (8005334 <CSE_step+0x724>)
 8005220:	f7fb fc62 	bl	8000ae8 <__aeabi_dcmpge>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <CSE_step+0x622>
        guard1 = true;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005230:	e1e3      	b.n	80055fa <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 8005232:	463b      	mov	r3, r7
 8005234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005238:	463b      	mov	r3, r7
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb f9cd 	bl	80005dc <__aeabi_dmul>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	493a      	ldr	r1, [pc, #232]	; (8005334 <CSE_step+0x724>)
 800524c:	f7fb f80e 	bl	800026c <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	ec43 2b17 	vmov	d7, r2, r3
 8005258:	eeb0 0a47 	vmov.f32	s0, s14
 800525c:	eef0 0a67 	vmov.f32	s1, s15
 8005260:	f013 f892 	bl	8018388 <sqrt>
 8005264:	eeb0 6a40 	vmov.f32	s12, s0
 8005268:	eef0 6a60 	vmov.f32	s13, s1
 800526c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005270:	ed93 7b04 	vldr	d7, [r3, #16]
 8005274:	463a      	mov	r2, r7
 8005276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800527a:	f103 0110 	add.w	r1, r3, #16
 800527e:	f107 0310 	add.w	r3, r7, #16
 8005282:	3310      	adds	r3, #16
 8005284:	4618      	mov	r0, r3
 8005286:	eeb0 1a47 	vmov.f32	s2, s14
 800528a:	eef0 1a67 	vmov.f32	s3, s15
 800528e:	eeb0 0a46 	vmov.f32	s0, s12
 8005292:	eef0 0a66 	vmov.f32	s1, s13
 8005296:	f006 fd99 	bl	800bdcc <rotate_LZ7ctbe0>
        C[2] = 0.0;
 800529a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 80052aa:	463b      	mov	r3, r7
 80052ac:	ed93 7b00 	vldr	d7, [r3]
 80052b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80052b8:	463a      	mov	r2, r7
 80052ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052be:	f103 0108 	add.w	r1, r3, #8
 80052c2:	f107 0310 	add.w	r3, r7, #16
 80052c6:	3308      	adds	r3, #8
 80052c8:	4618      	mov	r0, r3
 80052ca:	eeb0 1a46 	vmov.f32	s2, s12
 80052ce:	eef0 1a66 	vmov.f32	s3, s13
 80052d2:	eeb0 0a47 	vmov.f32	s0, s14
 80052d6:	eef0 0a67 	vmov.f32	s1, s15
 80052da:	f006 fd77 	bl	800bdcc <rotate_LZ7ctbe0>
        C[1] = 0.0;
 80052de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 80052ee:	463b      	mov	r3, r7
 80052f0:	ed93 7b00 	vldr	d7, [r3]
 80052f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052f8:	ed93 6b00 	vldr	d6, [r3]
 80052fc:	463a      	mov	r2, r7
 80052fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	4618      	mov	r0, r3
 8005308:	eeb0 1a46 	vmov.f32	s2, s12
 800530c:	eef0 1a66 	vmov.f32	s3, s13
 8005310:	eeb0 0a47 	vmov.f32	s0, s14
 8005314:	eef0 0a67 	vmov.f32	s1, s15
 8005318:	f006 fd58 	bl	800bdcc <rotate_LZ7ctbe0>
        C[0] = 0.0;
 800531c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005332:	e06e      	b.n	8005412 <CSE_step+0x802>
 8005334:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8005338:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800533c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	4413      	add	r3, r2
 8005344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005348:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800534c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f940 	bl	80005dc <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4639      	mov	r1, r7
 8005362:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 8005366:	f107 0210 	add.w	r2, r7, #16
 800536a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005376:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800537a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fb f929 	bl	80005dc <__aeabi_dmul>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4690      	mov	r8, r2
 8005390:	4699      	mov	r9, r3
 8005392:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005396:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fb f917 	bl	80005dc <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4640      	mov	r0, r8
 80053b4:	4649      	mov	r1, r9
 80053b6:	f7fa ff59 	bl	800026c <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80053c2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80053c6:	00c9      	lsls	r1, r1, #3
 80053c8:	4401      	add	r1, r0
 80053ca:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 80053ce:	f107 0210 	add.w	r2, r7, #16
 80053d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fb f8f9 	bl	80005dc <__aeabi_dmul>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	463b      	mov	r3, r7
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f7fa ff3a 	bl	8000270 <__adddf3>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005404:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8005408:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800540c:	3b01      	subs	r3, #1
 800540e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005412:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005416:	2b00      	cmp	r3, #0
 8005418:	da8e      	bge.n	8005338 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 800541a:	2301      	movs	r3, #1
 800541c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005420:	e06f      	b.n	8005502 <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 8005422:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005426:	3303      	adds	r3, #3
 8005428:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	4639      	mov	r1, r7
 8005436:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 800543a:	f107 0210 	add.w	r2, r7, #16
 800543e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800544a:	463b      	mov	r3, r7
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f7fb f8c4 	bl	80005dc <__aeabi_dmul>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4690      	mov	r8, r2
 800545a:	4699      	mov	r9, r3
 800545c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005460:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800546c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005470:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005474:	f7fb f8b2 	bl	80005dc <__aeabi_dmul>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005484:	1cde      	adds	r6, r3, #3
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	f7fa feed 	bl	800026c <__aeabi_dsub>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800549a:	00f1      	lsls	r1, r6, #3
 800549c:	4401      	add	r1, r0
 800549e:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 80054a2:	f107 0210 	add.w	r2, r7, #16
 80054a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80054ba:	f7fb f88f 	bl	80005dc <__aeabi_dmul>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4690      	mov	r8, r2
 80054c4:	4699      	mov	r9, r3
 80054c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054d6:	463b      	mov	r3, r7
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f7fb f87e 	bl	80005dc <__aeabi_dmul>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4640      	mov	r0, r8
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fa fec2 	bl	8000270 <__adddf3>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80054f8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80054fc:	3b01      	subs	r3, #1
 80054fe:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005502:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005506:	2b00      	cmp	r3, #0
 8005508:	da8b      	bge.n	8005422 <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 800550a:	2302      	movs	r3, #2
 800550c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005510:	e06f      	b.n	80055f2 <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 8005512:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005516:	3306      	adds	r3, #6
 8005518:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4413      	add	r3, r2
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	4639      	mov	r1, r7
 8005526:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 800552a:	f107 0210 	add.w	r2, r7, #16
 800552e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800553a:	463b      	mov	r3, r7
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f7fb f84c 	bl	80005dc <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4690      	mov	r8, r2
 800554a:	4699      	mov	r9, r3
 800554c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005550:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800555c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005560:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005564:	f7fb f83a 	bl	80005dc <__aeabi_dmul>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005574:	1d9e      	adds	r6, r3, #6
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fa fe75 	bl	800026c <__aeabi_dsub>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800558a:	00f1      	lsls	r1, r6, #3
 800558c:	4401      	add	r1, r0
 800558e:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 8005592:	f107 0210 	add.w	r2, r7, #16
 8005596:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055aa:	f7fb f817 	bl	80005dc <__aeabi_dmul>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4690      	mov	r8, r2
 80055b4:	4699      	mov	r9, r3
 80055b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055c6:	463b      	mov	r3, r7
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fb f806 	bl	80005dc <__aeabi_dmul>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fa fe4a 	bl	8000270 <__adddf3>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80055e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80055e8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055ec:	3b01      	subs	r3, #1
 80055ee:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80055f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da8b      	bge.n	8005512 <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 80055fa:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 82e1 	beq.w	8005bc6 <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800560a:	2300      	movs	r3, #0
 800560c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005610:	e0d6      	b.n	80057c0 <CSE_step+0xbb0>
        coffset = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005618:	2300      	movs	r3, #0
 800561a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800561e:	e0c0      	b.n	80057a2 <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 8005620:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005624:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005628:	4413      	add	r3, r2
 800562a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 800562e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005632:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	18d1      	adds	r1, r2, r3
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 8005646:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800564a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005656:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800565a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4413      	add	r3, r2
 8005662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005666:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800566a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa ffb1 	bl	80005dc <__aeabi_dmul>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4640      	mov	r0, r8
 8005680:	4649      	mov	r1, r9
 8005682:	f7fa fdf5 	bl	8000270 <__adddf3>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800568e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005692:	00c9      	lsls	r1, r1, #3
 8005694:	4401      	add	r1, r0
 8005696:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 800569a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800569e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4413      	add	r3, r2
 80056a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80056ae:	3301      	adds	r3, #1
 80056b0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056bc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80056c0:	3301      	adds	r3, #1
 80056c2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f7fa ff85 	bl	80005dc <__aeabi_dmul>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4640      	mov	r0, r8
 80056d8:	4649      	mov	r1, r9
 80056da:	f7fa fdc9 	bl	8000270 <__adddf3>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80056e6:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80056ea:	00c9      	lsls	r1, r1, #3
 80056ec:	4401      	add	r1, r0
 80056ee:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 80056f2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80056f6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005702:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005706:	3302      	adds	r3, #2
 8005708:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4413      	add	r3, r2
 8005710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005714:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005718:	3302      	adds	r3, #2
 800571a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa ff59 	bl	80005dc <__aeabi_dmul>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4640      	mov	r0, r8
 8005730:	4649      	mov	r1, r9
 8005732:	f7fa fd9d 	bl	8000270 <__adddf3>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800573e:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005742:	00c9      	lsls	r1, r1, #3
 8005744:	4401      	add	r1, r0
 8005746:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 800574a:	f107 0210 	add.w	r2, r7, #16
 800574e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800575a:	f107 0210 	add.w	r2, r7, #16
 800575e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	e9d3 8900 	ldrd	r8, r9, [r3]
 800576a:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 800576e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005772:	4433      	add	r3, r6
 8005774:	461e      	mov	r6, r3
 8005776:	4642      	mov	r2, r8
 8005778:	464b      	mov	r3, r9
 800577a:	f7fa ff2f 	bl	80005dc <__aeabi_dmul>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005786:	00f1      	lsls	r1, r6, #3
 8005788:	4401      	add	r1, r0
 800578a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 800578e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005792:	3303      	adds	r3, #3
 8005794:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005798:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800579c:	3301      	adds	r3, #1
 800579e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80057a2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	f77f af3a 	ble.w	8005620 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 80057ac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80057b0:	3303      	adds	r3, #3
 80057b2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80057b6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80057ba:	3301      	adds	r3, #1
 80057bc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80057c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f77f af24 	ble.w	8005612 <CSE_step+0xa02>
      }

      errorCondition = true;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80057d6:	e045      	b.n	8005864 <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80057d8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80057dc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057e8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80057ec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fa fd38 	bl	800026c <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4639      	mov	r1, r7
 8005802:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8005806:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01a      	beq.n	8005844 <CSE_step+0xc34>
 800580e:	463b      	mov	r3, r7
 8005810:	ed93 7b00 	vldr	d7, [r3]
 8005814:	eeb0 0a47 	vmov.f32	s0, s14
 8005818:	eef0 0a67 	vmov.f32	s1, s15
 800581c:	f006 fd4a 	bl	800c2b4 <rtIsInf>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <CSE_step+0xc2e>
 8005826:	463b      	mov	r3, r7
 8005828:	ed93 7b00 	vldr	d7, [r3]
 800582c:	eeb0 0a47 	vmov.f32	s0, s14
 8005830:	eef0 0a67 	vmov.f32	s1, s15
 8005834:	f006 fd62 	bl	800c2fc <rtIsNaN>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <CSE_step+0xc34>
          errorCondition = false;
 800583e:	2300      	movs	r3, #0
 8005840:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 8005844:	463b      	mov	r3, r7
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800584e:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005852:	00c9      	lsls	r1, r1, #3
 8005854:	4401      	add	r1, r0
 8005856:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 800585a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800585e:	3301      	adds	r3, #1
 8005860:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005864:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005868:	2b08      	cmp	r3, #8
 800586a:	ddb5      	ble.n	80057d8 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 800586c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 8005874:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005878:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800587c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005880:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8005884:	f006 fd8c 	bl	800c3a0 <svd_u3DvUgOe>
 8005888:	e02c      	b.n	80058e4 <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 800588a:	4bd2      	ldr	r3, [pc, #840]	; (8005bd4 <CSE_step+0xfc4>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005894:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8005898:	4bce      	ldr	r3, [pc, #824]	; (8005bd4 <CSE_step+0xfc4>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80058a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 80058a6:	4bcb      	ldr	r3, [pc, #812]	; (8005bd4 <CSE_step+0xfc4>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80058b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80058ba:	e00f      	b.n	80058dc <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 80058bc:	4bc5      	ldr	r3, [pc, #788]	; (8005bd4 <CSE_step+0xfc4>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80058c6:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80058ca:	00c9      	lsls	r1, r1, #3
 80058cc:	4401      	add	r1, r0
 80058ce:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80058d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058d6:	3301      	adds	r3, #1
 80058d8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80058dc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	ddeb      	ble.n	80058bc <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80058e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80058e8:	2248      	movs	r2, #72	; 0x48
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f012 fb93 	bl	8018018 <memset>
      Ss[0] = s[0];
 80058f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80058fe:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8005902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005906:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800590a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800590e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8005912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005916:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800591a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800591e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005928:	e01e      	b.n	8005968 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 800592a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800592e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4413      	add	r3, r2
 8005936:	ed93 7b00 	vldr	d7, [r3]
 800593a:	eeb0 0a47 	vmov.f32	s0, s14
 800593e:	eef0 0a67 	vmov.f32	s1, s15
 8005942:	f012 fd21 	bl	8018388 <sqrt>
 8005946:	eeb0 7a40 	vmov.f32	s14, s0
 800594a:	eef0 7a60 	vmov.f32	s15, s1
 800594e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005952:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800595e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005962:	3301      	adds	r3, #1
 8005964:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005968:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800596c:	2b08      	cmp	r3, #8
 800596e:	dddc      	ble.n	800592a <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005976:	2300      	movs	r3, #0
 8005978:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800597c:	e0b4      	b.n	8005ae8 <CSE_step+0xed8>
        coffset = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005984:	2300      	movs	r3, #0
 8005986:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800598a:	e09e      	b.n	8005aca <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 800598c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005990:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005994:	4413      	add	r3, r2
 8005996:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 800599a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800599e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	18d1      	adds	r1, r2, r3
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 80059b2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80059b6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059c2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80059c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059d2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80059d6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f7fa fdfb 	bl	80005dc <__aeabi_dmul>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4640      	mov	r0, r8
 80059ec:	4649      	mov	r1, r9
 80059ee:	f7fa fc3f 	bl	8000270 <__adddf3>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80059fa:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80059fe:	00c9      	lsls	r1, r1, #3
 8005a00:	4401      	add	r1, r0
 8005a02:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 8005a06:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005a0a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4413      	add	r3, r2
 8005a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a28:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4413      	add	r3, r2
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f7fa fdcf 	bl	80005dc <__aeabi_dmul>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4640      	mov	r0, r8
 8005a44:	4649      	mov	r1, r9
 8005a46:	f7fa fc13 	bl	8000270 <__adddf3>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005a52:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005a56:	00c9      	lsls	r1, r1, #3
 8005a58:	4401      	add	r1, r0
 8005a5a:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8005a5e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005a62:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a6e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005a72:	3302      	adds	r3, #2
 8005a74:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a80:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005a84:	3306      	adds	r3, #6
 8005a86:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f7fa fda3 	bl	80005dc <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fbe7 	bl	8000270 <__adddf3>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005aaa:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8005aae:	00c9      	lsls	r1, r1, #3
 8005ab0:	4401      	add	r1, r0
 8005ab2:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8005ab6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8005aba:	3303      	adds	r3, #3
 8005abc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8005ac0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8005aca:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	f77f af5c 	ble.w	800598c <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 8005ad4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ad8:	3303      	adds	r3, #3
 8005ada:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8005ade:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005ae8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f77f af46 	ble.w	800597e <CSE_step+0xd6e>
      }

      errorCondition = true;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005b04:	e042      	b.n	8005b8c <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8005b06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8005b16:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	dc23      	bgt.n	8005b66 <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8005b1e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	441a      	add	r2, r3
 8005b28:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	f7fa ffb3 	bl	8000aac <__aeabi_dcmpeq>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <CSE_step+0xf4a>
              errorCondition = false;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8005b58:	e00d      	b.n	8005b76 <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8005b5a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005b64:	e007      	b.n	8005b76 <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8005b66:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8005b70:	2302      	movs	r3, #2
 8005b72:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8005b76:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0c8      	beq.n	8005b10 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8005b7e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d102      	bne.n	8005b8c <CSE_step+0xf7c>
          exitg2 = true;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8005b8c:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <CSE_step+0xf8c>
 8005b94:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	ddb4      	ble.n	8005b06 <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8005b9c:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d110      	bne.n	8005bc6 <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8005ba4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005ba8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005bac:	2248      	movs	r2, #72	; 0x48
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f012 fa24 	bl	8017ffc <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8005bb4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005bb8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005bbc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f004 f82b 	bl	8009c1c <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005bd2:	e062      	b.n	8005c9a <CSE_step+0x108a>
 8005bd4:	2001e880 	.word	0x2001e880
      CSE_DW.P[iAcol_0] = R[iAcol];
 8005bd8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005bdc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	48a5      	ldr	r0, [pc, #660]	; (8005e80 <CSE_step+0x1270>)
 8005bea:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005bee:	00c9      	lsls	r1, r1, #3
 8005bf0:	4401      	add	r1, r0
 8005bf2:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8005bf6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bfa:	3303      	adds	r3, #3
 8005bfc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005c00:	1c51      	adds	r1, r2, #1
 8005c02:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	489c      	ldr	r0, [pc, #624]	; (8005e80 <CSE_step+0x1270>)
 8005c10:	00c9      	lsls	r1, r1, #3
 8005c12:	4401      	add	r1, r0
 8005c14:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8005c18:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c1c:	3306      	adds	r3, #6
 8005c1e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005c22:	1c91      	adds	r1, r2, #2
 8005c24:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	4893      	ldr	r0, [pc, #588]	; (8005e80 <CSE_step+0x1270>)
 8005c32:	00c9      	lsls	r1, r1, #3
 8005c34:	4401      	add	r1, r0
 8005c36:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8005c3a:	4a91      	ldr	r2, [pc, #580]	; (8005e80 <CSE_step+0x1270>)
 8005c3c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c40:	3309      	adds	r3, #9
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005c4e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4413      	add	r3, r2
 8005c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f7fa fcbb 	bl	80005dc <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	f7fa faff 	bl	8000270 <__adddf3>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4882      	ldr	r0, [pc, #520]	; (8005e80 <CSE_step+0x1270>)
 8005c78:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005c7c:	3109      	adds	r1, #9
 8005c7e:	00c9      	lsls	r1, r1, #3
 8005c80:	4401      	add	r1, r0
 8005c82:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005c86:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005c90:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c94:	3301      	adds	r3, #1
 8005c96:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005c9a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	dd9a      	ble.n	8005bd8 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8005ca2:	4b77      	ldr	r3, [pc, #476]	; (8005e80 <CSE_step+0x1270>)
 8005ca4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005ca8:	4b75      	ldr	r3, [pc, #468]	; (8005e80 <CSE_step+0x1270>)
 8005caa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005cae:	f7fa fdbf 	bl	8000830 <__aeabi_ddiv>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4973      	ldr	r1, [pc, #460]	; (8005e84 <CSE_step+0x1274>)
 8005cb8:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8005cbc:	4b70      	ldr	r3, [pc, #448]	; (8005e80 <CSE_step+0x1270>)
 8005cbe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005cc2:	4970      	ldr	r1, [pc, #448]	; (8005e84 <CSE_step+0x1274>)
 8005cc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8005cc8:	f107 0310 	add.w	r3, r7, #16
 8005ccc:	4619      	mov	r1, r3
 8005cce:	486e      	ldr	r0, [pc, #440]	; (8005e88 <CSE_step+0x1278>)
 8005cd0:	f7fe fb26 	bl	8004320 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005cda:	e034      	b.n	8005d46 <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8005cdc:	4a68      	ldr	r2, [pc, #416]	; (8005e80 <CSE_step+0x1270>)
 8005cde:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cea:	a363      	add	r3, pc, #396	; (adr r3, 8005e78 <CSE_step+0x1268>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fc74 	bl	80005dc <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	f107 0108 	add.w	r1, r7, #8
 8005cfc:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005d0c:	00c9      	lsls	r1, r1, #3
 8005d0e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005d12:	4401      	add	r1, r0
 8005d14:	39d0      	subs	r1, #208	; 0xd0
 8005d16:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8005d1a:	f107 0308 	add.w	r3, r7, #8
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005d26:	3109      	adds	r1, #9
 8005d28:	4614      	mov	r4, r2
 8005d2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005d2e:	00cb      	lsls	r3, r1, #3
 8005d30:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005d34:	4413      	add	r3, r2
 8005d36:	3bd0      	subs	r3, #208	; 0xd0
 8005d38:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8005d3c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d40:	3301      	adds	r3, #1
 8005d42:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005d46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	ddc6      	ble.n	8005cdc <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005d5a:	e058      	b.n	8005e0e <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8005d5c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005d66:	4413      	add	r3, r2
 8005d68:	3bd0      	subs	r3, #208	; 0xd0
 8005d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d6e:	4b44      	ldr	r3, [pc, #272]	; (8005e80 <CSE_step+0x1270>)
 8005d70:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005d74:	f7fa fa7c 	bl	8000270 <__adddf3>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005d80:	00c9      	lsls	r1, r1, #3
 8005d82:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005d86:	4401      	add	r1, r0
 8005d88:	39d0      	subs	r1, #208	; 0xd0
 8005d8a:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8005d8e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005d92:	3301      	adds	r3, #1
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3bd0      	subs	r3, #208	; 0xd0
 8005d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005da2:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <CSE_step+0x1270>)
 8005da4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005da8:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8005dac:	3401      	adds	r4, #1
 8005dae:	f7fa fa5f 	bl	8000270 <__adddf3>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	00e1      	lsls	r1, r4, #3
 8005db8:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005dbc:	4401      	add	r1, r0
 8005dbe:	39d0      	subs	r1, #208	; 0xd0
 8005dc0:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8005dc4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dc8:	3302      	adds	r3, #2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3bd0      	subs	r3, #208	; 0xd0
 8005dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dd8:	4b29      	ldr	r3, [pc, #164]	; (8005e80 <CSE_step+0x1270>)
 8005dda:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005dde:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8005de2:	3402      	adds	r4, #2
 8005de4:	f7fa fa44 	bl	8000270 <__adddf3>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	00e1      	lsls	r1, r4, #3
 8005dee:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005df2:	4401      	add	r1, r0
 8005df4:	39d0      	subs	r1, #208	; 0xd0
 8005df6:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8005dfa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005dfe:	3303      	adds	r3, #3
 8005e00:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005e04:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e0e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	dda2      	ble.n	8005d5c <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e22:	e018      	b.n	8005e56 <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8005e24:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005e28:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	18d0      	adds	r0, r2, r3
 8005e30:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8005e34:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fe fa6f 	bl	8004320 <CSE_S_x>
    iAcol_0 += 3;
 8005e42:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e46:	3303      	adds	r3, #3
 8005e48:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8005e4c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e50:	3301      	adds	r3, #1
 8005e52:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005e56:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	dde2      	ble.n	8005e24 <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8005e5e:	f107 0310 	add.w	r3, r7, #16
 8005e62:	4619      	mov	r1, r3
 8005e64:	4808      	ldr	r0, [pc, #32]	; (8005e88 <CSE_step+0x1278>)
 8005e66:	f7fe fa5b 	bl	8004320 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005e70:	e021      	b.n	8005eb6 <CSE_step+0x12a6>
 8005e72:	bf00      	nop
 8005e74:	f3af 8000 	nop.w
 8005e78:	64b487da 	.word	0x64b487da
 8005e7c:	3f5c60bf 	.word	0x3f5c60bf
 8005e80:	2001bd58 	.word	0x2001bd58
 8005e84:	2001bd38 	.word	0x2001bd38
 8005e88:	2001bda0 	.word	0x2001bda0
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8005e8c:	4ab8      	ldr	r2, [pc, #736]	; (8006170 <CSE_step+0x1560>)
 8005e8e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e92:	3309      	adds	r3, #9
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	4413      	add	r3, r2
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8005ea0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005ea4:	00c9      	lsls	r1, r1, #3
 8005ea6:	4401      	add	r1, r0
 8005ea8:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8005eac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005eb6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	dde6      	ble.n	8005e8c <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8005ebe:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8005ec2:	f107 0210 	add.w	r2, r7, #16
 8005ec6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ed0:	9303      	str	r3, [sp, #12]
 8005ed2:	4ba8      	ldr	r3, [pc, #672]	; (8006174 <CSE_step+0x1564>)
 8005ed4:	9302      	str	r3, [sp, #8]
 8005ed6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8006168 <CSE_step+0x1558>
 8005ee8:	49a3      	ldr	r1, [pc, #652]	; (8006178 <CSE_step+0x1568>)
 8005eea:	48a4      	ldr	r0, [pc, #656]	; (800617c <CSE_step+0x156c>)
 8005eec:	f001 fc66 	bl	80077bc <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8005ef0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ef4:	2248      	movs	r2, #72	; 0x48
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f012 f88d 	bl	8018018 <memset>
  R[0] = 1.0;
 8005efe:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	4b9e      	ldr	r3, [pc, #632]	; (8006180 <CSE_step+0x1570>)
 8005f08:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8005f0c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <CSE_step+0x1570>)
 8005f16:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8005f1a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	4b97      	ldr	r3, [pc, #604]	; (8006180 <CSE_step+0x1570>)
 8005f24:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f2e:	e07e      	b.n	800602e <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8005f30:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005f44:	e06a      	b.n	800601c <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8005f46:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8005f54:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005f58:	3301      	adds	r3, #1
 8005f5a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4413      	add	r3, r2
 8005f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f6a:	3303      	adds	r3, #3
 8005f6c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa fb30 	bl	80005dc <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005f88:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8005f94:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005f98:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8005fa4:	f7fa fb1a 	bl	80005dc <__aeabi_dmul>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4620      	mov	r0, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	f7fa f95e 	bl	8000270 <__adddf3>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4690      	mov	r8, r2
 8005fba:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8005fbc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	4413      	add	r3, r2
 8005fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fd2:	3306      	adds	r3, #6
 8005fd4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa fafc 	bl	80005dc <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8005fec:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8005ff0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ff4:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa f937 	bl	8000270 <__adddf3>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006006:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800600a:	00e1      	lsls	r1, r4, #3
 800600c:	4401      	add	r1, r0
 800600e:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006012:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006016:	3301      	adds	r3, #1
 8006018:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800601c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006020:	2b02      	cmp	r3, #2
 8006022:	dd90      	ble.n	8005f46 <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006024:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800602e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006032:	2b02      	cmp	r3, #2
 8006034:	f77f af7c 	ble.w	8005f30 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800604a:	e077      	b.n	800613c <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 800604c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006050:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006060:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006064:	00c9      	lsls	r1, r1, #3
 8006066:	4401      	add	r1, r0
 8006068:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 800606c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006070:	1cd9      	adds	r1, r3, #3
 8006072:	4a44      	ldr	r2, [pc, #272]	; (8006184 <CSE_step+0x1574>)
 8006074:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006078:	3344      	adds	r3, #68	; 0x44
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006086:	00c9      	lsls	r1, r1, #3
 8006088:	4401      	add	r1, r0
 800608a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 800608e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006092:	3301      	adds	r3, #1
 8006094:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006098:	1c51      	adds	r1, r2, #1
 800609a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80060aa:	00c9      	lsls	r1, r1, #3
 80060ac:	4401      	add	r1, r0
 80060ae:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 80060b2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80060b6:	3303      	adds	r3, #3
 80060b8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80060bc:	1d11      	adds	r1, r2, #4
 80060be:	4a31      	ldr	r2, [pc, #196]	; (8006184 <CSE_step+0x1574>)
 80060c0:	3344      	adds	r3, #68	; 0x44
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80060ce:	00c9      	lsls	r1, r1, #3
 80060d0:	4401      	add	r1, r0
 80060d2:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 80060d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80060da:	3302      	adds	r3, #2
 80060dc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80060e0:	1c91      	adds	r1, r2, #2
 80060e2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4413      	add	r3, r2
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80060f2:	00c9      	lsls	r1, r1, #3
 80060f4:	4401      	add	r1, r0
 80060f6:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 80060fa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80060fe:	3306      	adds	r3, #6
 8006100:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006104:	1d51      	adds	r1, r2, #5
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <CSE_step+0x1574>)
 8006108:	3344      	adds	r3, #68	; 0x44
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006116:	00c9      	lsls	r1, r1, #3
 8006118:	4401      	add	r1, r0
 800611a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 800611e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006122:	3306      	adds	r3, #6
 8006124:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8006128:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800612c:	3303      	adds	r3, #3
 800612e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006132:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006136:	3301      	adds	r3, #1
 8006138:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800613c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006140:	2b02      	cmp	r3, #2
 8006142:	dd83      	ble.n	800604c <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 8006144:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006148:	f507 7108 	add.w	r1, r7, #544	; 0x220
 800614c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006150:	4618      	mov	r0, r3
 8006152:	f004 fceb 	bl	800ab2c <qr_DvOBrgQi>
  iAcol_0 = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006162:	e04c      	b.n	80061fe <CSE_step+0x15ee>
 8006164:	f3af 8000 	nop.w
 8006168:	00000000 	.word	0x00000000
 800616c:	c12e847e 	.word	0xc12e847e
 8006170:	2001bd58 	.word	0x2001bd58
 8006174:	2001bda0 	.word	0x2001bda0
 8006178:	08018f48 	.word	0x08018f48
 800617c:	08018f38 	.word	0x08018f38
 8006180:	3ff00000 	.word	0x3ff00000
 8006184:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 8006188:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800618c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4413      	add	r3, r2
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	481e      	ldr	r0, [pc, #120]	; (8006214 <CSE_step+0x1604>)
 800619a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800619e:	00c9      	lsls	r1, r1, #3
 80061a0:	4401      	add	r1, r0
 80061a2:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 80061a6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80061aa:	3303      	adds	r3, #3
 80061ac:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80061b0:	1c51      	adds	r1, r2, #1
 80061b2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	4815      	ldr	r0, [pc, #84]	; (8006214 <CSE_step+0x1604>)
 80061c0:	00c9      	lsls	r1, r1, #3
 80061c2:	4401      	add	r1, r0
 80061c4:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 80061c8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80061cc:	3306      	adds	r3, #6
 80061ce:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80061d2:	1c91      	adds	r1, r2, #2
 80061d4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	480c      	ldr	r0, [pc, #48]	; (8006214 <CSE_step+0x1604>)
 80061e2:	00c9      	lsls	r1, r1, #3
 80061e4:	4401      	add	r1, r0
 80061e6:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80061ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80061ee:	3303      	adds	r3, #3
 80061f0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80061f4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80061fe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006202:	2b02      	cmp	r3, #2
 8006204:	ddc0      	ble.n	8006188 <CSE_step+0x1578>
  }
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 800620e:	46bd      	mov	sp, r7
 8006210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006214:	2001bd58 	.word	0x2001bd58

08006218 <CSE_initialize>:

void CSE_initialize(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 800621c:	2008      	movs	r0, #8
 800621e:	f006 f805 	bl	800c22c <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 8006222:	2248      	movs	r2, #72	; 0x48
 8006224:	490b      	ldr	r1, [pc, #44]	; (8006254 <CSE_initialize+0x3c>)
 8006226:	480c      	ldr	r0, [pc, #48]	; (8006258 <CSE_initialize+0x40>)
 8006228:	f011 fee8 	bl	8017ffc <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <CSE_initialize+0x44>)
 800622e:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 8006232:	4909      	ldr	r1, [pc, #36]	; (8006258 <CSE_initialize+0x40>)
 8006234:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <CSE_initialize+0x44>)
 800623a:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 800623e:	4906      	ldr	r1, [pc, #24]	; (8006258 <CSE_initialize+0x40>)
 8006240:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <CSE_initialize+0x44>)
 8006246:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 800624a:	4903      	ldr	r1, [pc, #12]	; (8006258 <CSE_initialize+0x40>)
 800624c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200002f8 	.word	0x200002f8
 8006258:	2001bd58 	.word	0x2001bd58
 800625c:	20000088 	.word	0x20000088

08006260 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8006268:	b087      	sub	sp, #28
 800626a:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <SIM0_step+0x90>)
 800626e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800627a:	f101 0118 	add.w	r1, r1, #24
 800627e:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <SIM0_step+0x94>)
 8006284:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <SIM0_step+0x94>)
 800628a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800628e:	a316      	add	r3, pc, #88	; (adr r3, 80062e8 <SIM0_step+0x88>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7fa f9a2 	bl	80005dc <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4650      	mov	r0, sl
 800629e:	4659      	mov	r1, fp
 80062a0:	f7fa fac6 	bl	8000830 <__aeabi_ddiv>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 80062ac:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <SIM0_step+0x90>)
 80062ae:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 80062b6:	f7fa f991 	bl	80005dc <__aeabi_dmul>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	ec43 2b17 	vmov	d7, r2, r3
 80062c2:	eeb0 0a47 	vmov.f32	s0, s14
 80062c6:	eef0 0a67 	vmov.f32	s1, s15
 80062ca:	f011 ffc5 	bl	8018258 <exp>
 80062ce:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80062d2:	f103 0308 	add.w	r3, r3, #8
 80062d6:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80062da:	2300      	movs	r3, #0
 80062dc:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80062e0:	f102 020c 	add.w	r2, r2, #12
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e1df      	b.n	80066a8 <SIM0_step+0x448>
 80062e8:	00000000 	.word	0x00000000
 80062ec:	40ac2000 	.word	0x40ac2000
 80062f0:	2001bdb8 	.word	0x2001bdb8
 80062f4:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 80062f8:	4aca      	ldr	r2, [pc, #808]	; (8006624 <SIM0_step+0x3c4>)
 80062fa:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80062fe:	f103 030c 	add.w	r3, r3, #12
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3305      	adds	r3, #5
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 8006312:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006316:	f101 010c 	add.w	r1, r1, #12
 800631a:	6809      	ldr	r1, [r1, #0]
 800631c:	00c9      	lsls	r1, r1, #3
 800631e:	4401      	add	r1, r0
 8006320:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 8006324:	4abf      	ldr	r2, [pc, #764]	; (8006624 <SIM0_step+0x3c4>)
 8006326:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800632a:	f103 030c 	add.w	r3, r3, #12
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f203 1303 	addw	r3, r3, #259	; 0x103
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 800633c:	4ab9      	ldr	r2, [pc, #740]	; (8006624 <SIM0_step+0x3c4>)
 800633e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006342:	f103 030c 	add.w	r3, r3, #12
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f203 1381 	addw	r3, r3, #385	; 0x181
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	4413      	add	r3, r2
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 8006354:	f7fa fa6c 	bl	8000830 <__aeabi_ddiv>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006360:	f101 0108 	add.w	r1, r1, #8
 8006364:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 8006368:	220c      	movs	r2, #12
 800636a:	49af      	ldr	r1, [pc, #700]	; (8006628 <SIM0_step+0x3c8>)
 800636c:	48af      	ldr	r0, [pc, #700]	; (800662c <SIM0_step+0x3cc>)
 800636e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006372:	f103 0308 	add.w	r3, r3, #8
 8006376:	ed93 0b00 	vldr	d0, [r3]
 800637a:	f003 fb65 	bl	8009a48 <look1_binlxpw>
 800637e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006382:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 8006386:	220c      	movs	r2, #12
 8006388:	49a9      	ldr	r1, [pc, #676]	; (8006630 <SIM0_step+0x3d0>)
 800638a:	48a8      	ldr	r0, [pc, #672]	; (800662c <SIM0_step+0x3cc>)
 800638c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006390:	f103 0308 	add.w	r3, r3, #8
 8006394:	ed93 0b00 	vldr	d0, [r3]
 8006398:	f003 fb56 	bl	8009a48 <look1_binlxpw>
 800639c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80063a0:	f103 0318 	add.w	r3, r3, #24
 80063a4:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 80063a8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80063ac:	f103 0318 	add.w	r3, r3, #24
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80063b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063bc:	f7fa f90e 	bl	80005dc <__aeabi_dmul>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80063c8:	f101 0118 	add.w	r1, r1, #24
 80063cc:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80063d0:	220c      	movs	r2, #12
 80063d2:	4998      	ldr	r1, [pc, #608]	; (8006634 <SIM0_step+0x3d4>)
 80063d4:	4895      	ldr	r0, [pc, #596]	; (800662c <SIM0_step+0x3cc>)
 80063d6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80063da:	f103 0308 	add.w	r3, r3, #8
 80063de:	ed93 0b00 	vldr	d0, [r3]
 80063e2:	f003 fb31 	bl	8009a48 <look1_binlxpw>
 80063e6:	ec51 0b10 	vmov	r0, r1, d0
 80063ea:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 ff3d 	bl	8000270 <__adddf3>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 80063fe:	4b8e      	ldr	r3, [pc, #568]	; (8006638 <SIM0_step+0x3d8>)
 8006400:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8006404:	f7fa f8ea 	bl	80005dc <__aeabi_dmul>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006410:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006414:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006418:	f103 0318 	add.w	r3, r3, #24
 800641c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	f7f9 ff24 	bl	8000270 <__adddf3>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 ff1a 	bl	8000270 <__adddf3>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006448:	f103 0318 	add.w	r3, r3, #24
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fa f8c4 	bl	80005dc <__aeabi_dmul>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4692      	mov	sl, r2
 800645a:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 800645c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006460:	f103 0318 	add.w	r3, r3, #24
 8006464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	f7f9 ff00 	bl	8000270 <__adddf3>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800647c:	f7f9 fef6 	bl	800026c <__aeabi_dsub>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4610      	mov	r0, r2
 8006486:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8006488:	4b66      	ldr	r3, [pc, #408]	; (8006624 <SIM0_step+0x3c4>)
 800648a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8006492:	f7fa f8a3 	bl	80005dc <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 800649a:	4650      	mov	r0, sl
 800649c:	4659      	mov	r1, fp
 800649e:	f7f9 fee7 	bl	8000270 <__adddf3>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 80064aa:	4b63      	ldr	r3, [pc, #396]	; (8006638 <SIM0_step+0x3d8>)
 80064ac:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 80064b0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80064b4:	f103 0318 	add.w	r3, r3, #24
 80064b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	f7f9 fed6 	bl	8000270 <__adddf3>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4650      	mov	r0, sl
 80064ca:	4659      	mov	r1, fp
 80064cc:	f7f9 fece 	bl	800026c <__aeabi_dsub>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4610      	mov	r0, r2
 80064d6:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80064d8:	4a52      	ldr	r2, [pc, #328]	; (8006624 <SIM0_step+0x3c4>)
 80064da:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80064de:	f103 030c 	add.w	r3, r3, #12
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3383      	adds	r3, #131	; 0x83
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4413      	add	r3, r2
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7fa f875 	bl	80005dc <__aeabi_dmul>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 80064f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064fa:	f7f9 feb7 	bl	800026c <__aeabi_dsub>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4692      	mov	sl, r2
 8006504:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8006506:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800650a:	f103 0318 	add.w	r3, r3, #24
 800650e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	f7f9 feab 	bl	8000270 <__adddf3>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
      SIM0_P.Ts);
 8006522:	4b45      	ldr	r3, [pc, #276]	; (8006638 <SIM0_step+0x3d8>)
 8006524:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8006528:	f7f9 fea2 	bl	8000270 <__adddf3>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8006530:	4650      	mov	r0, sl
 8006532:	4659      	mov	r1, fp
 8006534:	f7fa f97c 	bl	8000830 <__aeabi_ddiv>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006540:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8006544:	220c      	movs	r2, #12
 8006546:	493d      	ldr	r1, [pc, #244]	; (800663c <SIM0_step+0x3dc>)
 8006548:	4838      	ldr	r0, [pc, #224]	; (800662c <SIM0_step+0x3cc>)
 800654a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800654e:	f103 0308 	add.w	r3, r3, #8
 8006552:	ed93 0b00 	vldr	d0, [r3]
 8006556:	f003 fa77 	bl	8009a48 <look1_binlxpw>
 800655a:	ec53 2b10 	vmov	r2, r3, d0
 800655e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006566:	f7f9 fe83 	bl	8000270 <__adddf3>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006572:	f101 0118 	add.w	r1, r1, #24
 8006576:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 800657a:	4a31      	ldr	r2, [pc, #196]	; (8006640 <SIM0_step+0x3e0>)
 800657c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006580:	f103 030c 	add.w	r3, r3, #12
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	18d1      	adds	r1, r2, r3
 800658c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006590:	f103 0318 	add.w	r3, r3, #24
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 800659c:	4a28      	ldr	r2, [pc, #160]	; (8006640 <SIM0_step+0x3e0>)
 800659e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80065a2:	f103 030c 	add.w	r3, r3, #12
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3386      	adds	r3, #134	; 0x86
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	18d1      	adds	r1, r2, r3
 80065ae:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80065b2:	f103 0308 	add.w	r3, r3, #8
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <SIM0_step+0x3c4>)
 80065c0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80065c4:	f103 030c 	add.w	r3, r3, #12
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f203 1381 	addw	r3, r3, #385	; 0x181
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	481a      	ldr	r0, [pc, #104]	; (8006640 <SIM0_step+0x3e0>)
 80065d8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80065dc:	f101 010c 	add.w	r1, r1, #12
 80065e0:	6809      	ldr	r1, [r1, #0]
 80065e2:	f501 7182 	add.w	r1, r1, #260	; 0x104
 80065e6:	00c9      	lsls	r1, r1, #3
 80065e8:	4401      	add	r1, r0
 80065ea:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 80065ee:	4a0d      	ldr	r2, [pc, #52]	; (8006624 <SIM0_step+0x3c4>)
 80065f0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80065f4:	f103 030c 	add.w	r3, r3, #12
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f203 1381 	addw	r3, r3, #385	; 0x181
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006606:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800660a:	f103 0308 	add.w	r3, r3, #8
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 ffe3 	bl	80005dc <__aeabi_dmul>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	f607 30d8 	addw	r0, r7, #3032	; 0xbd8
 800661e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006622:	e00f      	b.n	8006644 <SIM0_step+0x3e4>
 8006624:	2001bdb8 	.word	0x2001bdb8
 8006628:	200003e8 	.word	0x200003e8
 800662c:	20000e80 	.word	0x20000e80
 8006630:	20000ee8 	.word	0x20000ee8
 8006634:	20000380 	.word	0x20000380
 8006638:	20000360 	.word	0x20000360
 800663c:	20000e18 	.word	0x20000e18
 8006640:	2001d618 	.word	0x2001d618
 8006644:	f101 010c 	add.w	r1, r1, #12
 8006648:	6809      	ldr	r1, [r1, #0]
 800664a:	00c9      	lsls	r1, r1, #3
 800664c:	4401      	add	r1, r0
 800664e:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 8006652:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8006656:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800665a:	f103 030c 	add.w	r3, r3, #12
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	18d1      	adds	r1, r2, r3
 8006664:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = rtb_is_drive;
 8006670:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8006674:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006678:	f103 030c 	add.w	r3, r3, #12
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	18d1      	adds	r1, r2, r3
 8006682:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006686:	f103 0318 	add.w	r3, r3, #24
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8006692:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006696:	f103 030c 	add.w	r3, r3, #12
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80066a2:	f102 020c 	add.w	r2, r2, #12
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80066ac:	f103 030c 	add.w	r3, r3, #12
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b7d      	cmp	r3, #125	; 0x7d
 80066b4:	f77f ae20 	ble.w	80062f8 <SIM0_step+0x98>
  }

  rtb_Exp = SIM0_P.Ts * rtb_Memory20;
 80066b8:	4ba2      	ldr	r3, [pc, #648]	; (8006944 <SIM0_step+0x6e4>)
 80066ba:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 80066be:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80066c2:	f101 0118 	add.w	r1, r1, #24
 80066c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ca:	f7f9 ff87 	bl	80005dc <__aeabi_dmul>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80066d6:	f101 0108 	add.w	r1, r1, #8
 80066da:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80066de:	2300      	movs	r3, #0
 80066e0:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80066e4:	f102 020c 	add.w	r2, r2, #12
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e067      	b.n	80067bc <SIM0_step+0x55c>
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 80066ec:	4a96      	ldr	r2, [pc, #600]	; (8006948 <SIM0_step+0x6e8>)
 80066ee:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80066f2:	f103 030c 	add.w	r3, r3, #12
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006704:	4b8f      	ldr	r3, [pc, #572]	; (8006944 <SIM0_step+0x6e4>)
 8006706:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800670a:	f7fa f891 	bl	8000830 <__aeabi_ddiv>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4610      	mov	r0, r2
 8006714:	4619      	mov	r1, r3
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 8006716:	4a8c      	ldr	r2, [pc, #560]	; (8006948 <SIM0_step+0x6e8>)
 8006718:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800671c:	f103 030c 	add.w	r3, r3, #12
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	4413      	add	r3, r2
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 ff55 	bl	80005dc <__aeabi_dmul>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	4b82      	ldr	r3, [pc, #520]	; (8006944 <SIM0_step+0x6e4>)
 800673c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006740:	3318      	adds	r3, #24
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7f9 ff49 	bl	80005dc <__aeabi_dmul>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4692      	mov	sl, r2
 8006750:	469b      	mov	fp, r3
      SIM0_DW.Memory_PreviousInput[i]);
 8006752:	4a7d      	ldr	r2, [pc, #500]	; (8006948 <SIM0_step+0x6e8>)
 8006754:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006758:	f103 030c 	add.w	r3, r3, #12
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f203 1303 	addw	r3, r3, #259	; 0x103
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	e9d3 0100 	ldrd	r0, r1, [r3]
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 800676a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800676e:	f103 0308 	add.w	r3, r3, #8
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 fd7b 	bl	8000270 <__adddf3>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4650      	mov	r0, sl
 8006780:	4659      	mov	r1, fp
 8006782:	f7f9 fd75 	bl	8000270 <__adddf3>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 800678e:	f107 0318 	add.w	r3, r7, #24
 8006792:	3b10      	subs	r3, #16
 8006794:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006798:	f102 020c 	add.w	r2, r2, #12
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	00d2      	lsls	r2, r2, #3
 80067a0:	4413      	add	r3, r2
 80067a2:	e9c3 0100 	strd	r0, r1, [r3]
  for (i = 0; i < 126; i++) {
 80067a6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80067aa:	f103 030c 	add.w	r3, r3, #12
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80067b6:	f102 020c 	add.w	r2, r2, #12
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80067c0:	f103 030c 	add.w	r3, r3, #12
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b7d      	cmp	r3, #125	; 0x7d
 80067c8:	dd90      	ble.n	80066ec <SIM0_step+0x48c>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80067ca:	4b5f      	ldr	r3, [pc, #380]	; (8006948 <SIM0_step+0x6e8>)
 80067cc:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80067d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	f7fa f966 	bl	8000aac <__aeabi_dcmpeq>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <SIM0_step+0x58a>
 80067e6:	2602      	movs	r6, #2
 80067e8:	e000      	b.n	80067ec <SIM0_step+0x58c>
 80067ea:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80067ec:	4b56      	ldr	r3, [pc, #344]	; (8006948 <SIM0_step+0x6e8>)
 80067ee:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80067f2:	3308      	adds	r3, #8
 80067f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067f8:	2301      	movs	r3, #1
 80067fa:	469a      	mov	sl, r3
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	f7fa f952 	bl	8000aac <__aeabi_dcmpeq>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <SIM0_step+0x5b2>
 800680e:	2300      	movs	r3, #0
 8006810:	469a      	mov	sl, r3
 8006812:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006816:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006818:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 800681a:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <SIM0_step+0x6e8>)
 800681c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006820:	3318      	adds	r3, #24
 8006822:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 8006824:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8006826:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800682a:	f102 020c 	add.w	r2, r2, #12
 800682e:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 8006830:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006834:	f103 030c 	add.w	r3, r3, #12
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a42      	ldr	r2, [pc, #264]	; (8006944 <SIM0_step+0x6e4>)
 800683c:	4413      	add	r3, r2
 800683e:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8006842:	3318      	adds	r3, #24
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800684a:	f102 0217 	add.w	r2, r2, #23
 800684e:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 8006850:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006854:	f103 030c 	add.w	r3, r3, #12
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	4a39      	ldr	r2, [pc, #228]	; (8006944 <SIM0_step+0x6e4>)
 800685e:	4413      	add	r3, r2
 8006860:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8006864:	3318      	adds	r3, #24
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800686c:	f102 0216 	add.w	r2, r2, #22
 8006870:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 8006872:	4a36      	ldr	r2, [pc, #216]	; (800694c <SIM0_step+0x6ec>)
 8006874:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006878:	f103 0317 	add.w	r3, r3, #23
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8006880:	4b31      	ldr	r3, [pc, #196]	; (8006948 <SIM0_step+0x6e8>)
 8006882:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8006886:	3310      	adds	r3, #16
 8006888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	f7fa f90a 	bl	8000aac <__aeabi_dcmpeq>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <SIM0_step+0x642>
 800689e:	2602      	movs	r6, #2
 80068a0:	e000      	b.n	80068a4 <SIM0_step+0x644>
 80068a2:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 80068a4:	4b28      	ldr	r3, [pc, #160]	; (8006948 <SIM0_step+0x6e8>)
 80068a6:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80068aa:	3318      	adds	r3, #24
 80068ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068b0:	2301      	movs	r3, #1
 80068b2:	469a      	mov	sl, r3
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	f7fa f8f6 	bl	8000aac <__aeabi_dcmpeq>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <SIM0_step+0x66a>
 80068c6:	2300      	movs	r3, #0
 80068c8:	469a      	mov	sl, r3
 80068ca:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 80068ce:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 80068d0:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <SIM0_step+0x6e8>)
 80068d4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80068d8:	3319      	adds	r3, #25
 80068da:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 80068dc:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 80068de:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80068e2:	f102 020c 	add.w	r2, r2, #12
 80068e6:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 80068e8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80068ec:	f103 030c 	add.w	r3, r3, #12
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a14      	ldr	r2, [pc, #80]	; (8006944 <SIM0_step+0x6e4>)
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80068fa:	3308      	adds	r3, #8
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006902:	f102 0215 	add.w	r2, r2, #21
 8006906:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 8006908:	4a10      	ldr	r2, [pc, #64]	; (800694c <SIM0_step+0x6ec>)
 800690a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800690e:	f103 0315 	add.w	r3, r3, #21
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 8006916:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800691a:	f103 0316 	add.w	r3, r3, #22
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d015      	beq.n	8006950 <SIM0_step+0x6f0>
 8006924:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006928:	f103 030c 	add.w	r3, r3, #12
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	4a04      	ldr	r2, [pc, #16]	; (8006944 <SIM0_step+0x6e4>)
 8006932:	4413      	add	r3, r2
 8006934:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8006938:	3308      	adds	r3, #8
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f7f9 fdd3 	bl	80004e8 <__aeabi_ui2d>
 8006942:	e009      	b.n	8006958 <SIM0_step+0x6f8>
 8006944:	20000360 	.word	0x20000360
 8006948:	2001bdb8 	.word	0x2001bdb8
 800694c:	2001d618 	.word	0x2001d618
 8006950:	f04f 0000 	mov.w	r0, #0
 8006954:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 8006958:	4bba      	ldr	r3, [pc, #744]	; (8006c44 <SIM0_step+0x9e4>)
 800695a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 8006962:	f7f9 fe3b 	bl	80005dc <__aeabi_dmul>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800696e:	f101 0108 	add.w	r1, r1, #8
 8006972:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 8006976:	49b4      	ldr	r1, [pc, #720]	; (8006c48 <SIM0_step+0x9e8>)
 8006978:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800697c:	f103 0308 	add.w	r3, r3, #8
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 8006988:	4bae      	ldr	r3, [pc, #696]	; (8006c44 <SIM0_step+0x9e4>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006992:	f101 0108 	add.w	r1, r1, #8
 8006996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699a:	f7f9 fe1f 	bl	80005dc <__aeabi_dmul>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 80069a6:	f101 0108 	add.w	r1, r1, #8
 80069aa:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 80069ae:	49a6      	ldr	r1, [pc, #664]	; (8006c48 <SIM0_step+0x9e8>)
 80069b0:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80069b4:	f103 0308 	add.w	r3, r3, #8
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 80069c0:	4ba0      	ldr	r3, [pc, #640]	; (8006c44 <SIM0_step+0x9e4>)
 80069c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80069c6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80069ca:	f101 0108 	add.w	r1, r1, #8
 80069ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d2:	f7f9 fe03 	bl	80005dc <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80069de:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 80069e2:	4b98      	ldr	r3, [pc, #608]	; (8006c44 <SIM0_step+0x9e4>)
 80069e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80069e8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80069ec:	f101 0108 	add.w	r1, r1, #8
 80069f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f4:	f7f9 fdf2 	bl	80005dc <__aeabi_dmul>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006a00:	f101 0108 	add.w	r1, r1, #8
 8006a04:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006a0e:	f102 020c 	add.w	r2, r2, #12
 8006a12:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006a1a:	f102 0204 	add.w	r2, r2, #4
 8006a1e:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006a2c:	f101 0118 	add.w	r1, r1, #24
 8006a30:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 8006a34:	4b83      	ldr	r3, [pc, #524]	; (8006c44 <SIM0_step+0x9e4>)
 8006a36:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	f7fa f830 	bl	8000aac <__aeabi_dcmpeq>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10c      	bne.n	8006a6c <SIM0_step+0x80c>
    i = 2;
 8006a52:	2302      	movs	r3, #2
 8006a54:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006a58:	f102 020c 	add.w	r2, r2, #12
 8006a5c:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006a64:	f102 0204 	add.w	r2, r2, #4
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e01d      	b.n	8006aa8 <SIM0_step+0x848>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 8006a6c:	4b75      	ldr	r3, [pc, #468]	; (8006c44 <SIM0_step+0x9e4>)
 8006a6e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006a72:	3310      	adds	r3, #16
 8006a74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	f7fa f814 	bl	8000aac <__aeabi_dcmpeq>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10e      	bne.n	8006aa8 <SIM0_step+0x848>
    i = 3;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006a90:	f102 020c 	add.w	r2, r2, #12
 8006a94:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	4b6c      	ldr	r3, [pc, #432]	; (8006c4c <SIM0_step+0x9ec>)
 8006a9c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006aa0:	f101 0118 	add.w	r1, r1, #24
 8006aa4:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 8006aa8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006ab4:	f101 0108 	add.w	r1, r1, #8
 8006ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006abc:	f7f9 fd8e 	bl	80005dc <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8006ac8:	f101 0118 	add.w	r1, r1, #24
 8006acc:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 8006ad0:	4b5c      	ldr	r3, [pc, #368]	; (8006c44 <SIM0_step+0x9e4>)
 8006ad2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006adc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006ae0:	f103 0318 	add.w	r3, r3, #24
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f7f9 fd78 	bl	80005dc <__aeabi_dmul>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8006af4:	f101 0118 	add.w	r1, r1, #24
 8006af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afc:	f7f9 fd6e 	bl	80005dc <__aeabi_dmul>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006b08:	f101 0118 	add.w	r1, r1, #24
 8006b0c:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 8006b10:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006b1c:	f101 0110 	add.w	r1, r1, #16
 8006b20:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8006b24:	2300      	movs	r3, #0
 8006b26:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006b2a:	f102 0208 	add.w	r2, r2, #8
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	e026      	b.n	8006b80 <SIM0_step+0x920>
    rtb_y += rtb_Memory15[iU + 1];
 8006b32:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b36:	f103 0308 	add.w	r3, r3, #8
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4413      	add	r3, r2
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006b4e:	f101 0110 	add.w	r1, r1, #16
 8006b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b56:	f7f9 fb8b 	bl	8000270 <__adddf3>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006b62:	f101 0110 	add.w	r1, r1, #16
 8006b66:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8006b6a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b6e:	f103 0308 	add.w	r3, r3, #8
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8006b7a:	f102 0208 	add.w	r2, r2, #8
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006b84:	f103 0308 	add.w	r3, r3, #8
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b7c      	cmp	r3, #124	; 0x7c
 8006b8c:	ddd1      	ble.n	8006b32 <SIM0_step+0x8d2>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 8006b8e:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <SIM0_step+0x9e4>)
 8006b90:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006b94:	3308      	adds	r3, #8
 8006b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	f7f9 ff83 	bl	8000aac <__aeabi_dcmpeq>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d151      	bne.n	8006c50 <SIM0_step+0x9f0>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <SIM0_step+0x9e4>)
 8006bae:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bb6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006bba:	f103 0310 	add.w	r3, r3, #16
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fb53 	bl	800026c <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006bce:	f101 0110 	add.w	r1, r1, #16
 8006bd2:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006be2:	f101 0110 	add.w	r1, r1, #16
 8006be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bea:	f7f9 ff69 	bl	8000ac0 <__aeabi_dcmplt>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <SIM0_step+0x9a8>
      rtb_Current = 0.0;
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006c00:	f101 0110 	add.w	r1, r1, #16
 8006c04:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 8006c08:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <SIM0_step+0x9e4>)
 8006c0a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006c0e:	3310      	adds	r3, #16
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006c18:	f101 0110 	add.w	r1, r1, #16
 8006c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c20:	f7f9 ff6c 	bl	8000afc <__aeabi_dcmpgt>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01c      	beq.n	8006c64 <SIM0_step+0xa04>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 8006c2a:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <SIM0_step+0x9e4>)
 8006c2c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006c30:	3310      	adds	r3, #16
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006c3a:	f101 0110 	add.w	r1, r1, #16
 8006c3e:	e9c1 2300 	strd	r2, r3, [r1]
 8006c42:	e00f      	b.n	8006c64 <SIM0_step+0xa04>
 8006c44:	2001bdb8 	.word	0x2001bdb8
 8006c48:	2001d618 	.word	0x2001d618
 8006c4c:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006c5c:	f101 0110 	add.w	r1, r1, #16
 8006c60:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006c70:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 8006c74:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c78:	f103 030c 	add.w	r3, r3, #12
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d109      	bne.n	8006c96 <SIM0_step+0xa36>
    rtb_Exp = -1.0;
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	4bc0      	ldr	r3, [pc, #768]	; (8006f88 <SIM0_step+0xd28>)
 8006c88:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006c8c:	f101 0108 	add.w	r1, r1, #8
 8006c90:	e9c1 2300 	strd	r2, r3, [r1]
 8006c94:	e1d3      	b.n	800703e <SIM0_step+0xdde>
  } else if (i == 2) {
 8006c96:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006c9a:	f103 030c 	add.w	r3, r3, #12
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	f040 8099 	bne.w	8006dd8 <SIM0_step+0xb78>
    if (rtb_Memory22 != 0.0) {
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006cb2:	f101 0108 	add.w	r1, r1, #8
 8006cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cba:	f7f9 fef7 	bl	8000aac <__aeabi_dcmpeq>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d17f      	bne.n	8006dc4 <SIM0_step+0xb64>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd4:	f7f9 feea 	bl	8000aac <__aeabi_dcmpeq>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00e      	beq.n	8006cfc <SIM0_step+0xa9c>
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006cea:	f101 0108 	add.w	r1, r1, #8
 8006cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf2:	f7f9 fedb 	bl	8000aac <__aeabi_dcmpeq>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d141      	bne.n	8006d80 <SIM0_step+0xb20>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8006cfc:	4ba3      	ldr	r3, [pc, #652]	; (8006f8c <SIM0_step+0xd2c>)
 8006cfe:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006d02:	3318      	adds	r3, #24
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006d0c:	f101 0110 	add.w	r1, r1, #16
 8006d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d14:	f7f9 faaa 	bl	800026c <__aeabi_dsub>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8006d20:	4b9a      	ldr	r3, [pc, #616]	; (8006f8c <SIM0_step+0xd2c>)
 8006d22:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006d26:	3318      	adds	r3, #24
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8006d2c:	f7f9 faa0 	bl	8000270 <__adddf3>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006d38:	f101 0108 	add.w	r1, r1, #8
 8006d3c:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 8006d40:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8006d44:	f103 0304 	add.w	r3, r3, #4
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	f7f9 fbdd 	bl	8000508 <__aeabi_i2d>
 8006d4e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006d52:	f103 0310 	add.w	r3, r3, #16
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fc3f 	bl	80005dc <__aeabi_dmul>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8006d66:	f101 0118 	add.w	r1, r1, #24
 8006d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6e:	f7f9 fc35 	bl	80005dc <__aeabi_dmul>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006d7a:	e9c1 2300 	strd	r2, r3, [r1]
 8006d7e:	e15e      	b.n	800703e <SIM0_step+0xdde>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8006d80:	4b82      	ldr	r3, [pc, #520]	; (8006f8c <SIM0_step+0xd2c>)
 8006d82:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006d86:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 8006d8a:	4b80      	ldr	r3, [pc, #512]	; (8006f8c <SIM0_step+0xd2c>)
 8006d8c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006d90:	3318      	adds	r3, #24
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8006d96:	f7f9 fa69 	bl	800026c <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8006da2:	4b7a      	ldr	r3, [pc, #488]	; (8006f8c <SIM0_step+0xd2c>)
 8006da4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006da8:	3318      	adds	r3, #24
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8006dae:	f7f9 fa5f 	bl	8000270 <__adddf3>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006dba:	f101 0108 	add.w	r1, r1, #8
 8006dbe:	e9c1 2300 	strd	r2, r3, [r1]
 8006dc2:	e13c      	b.n	800703e <SIM0_step+0xdde>
      }
    } else {
      rtb_Exp = -1.0;
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	4b6f      	ldr	r3, [pc, #444]	; (8006f88 <SIM0_step+0xd28>)
 8006dca:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006dce:	f101 0108 	add.w	r1, r1, #8
 8006dd2:	e9c1 2300 	strd	r2, r3, [r1]
 8006dd6:	e132      	b.n	800703e <SIM0_step+0xdde>
    }
  } else if (rtb_Memory22 != 0.0) {
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006de4:	f101 0108 	add.w	r1, r1, #8
 8006de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dec:	f7f9 fe5e 	bl	8000aac <__aeabi_dcmpeq>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 811a 	bne.w	800702c <SIM0_step+0xdcc>
    if (rtb_Product1_n != 0.0) {
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8006e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e08:	f7f9 fe50 	bl	8000aac <__aeabi_dcmpeq>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d152      	bne.n	8006eb8 <SIM0_step+0xc58>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8006e12:	4b5e      	ldr	r3, [pc, #376]	; (8006f8c <SIM0_step+0xd2c>)
 8006e14:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006e18:	3318      	adds	r3, #24
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006e22:	f101 0110 	add.w	r1, r1, #16
 8006e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e2a:	f7f9 fa1f 	bl	800026c <__aeabi_dsub>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	a352      	add	r3, pc, #328	; (adr r3, 8006f80 <SIM0_step+0xd20>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 fbce 	bl	80005dc <__aeabi_dmul>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4610      	mov	r0, r2
 8006e46:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8006e48:	4b50      	ldr	r3, [pc, #320]	; (8006f8c <SIM0_step+0xd2c>)
 8006e4a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006e4e:	3318      	adds	r3, #24
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8006e54:	f7f9 fa0c 	bl	8000270 <__adddf3>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006e60:	f101 0108 	add.w	r1, r1, #8
 8006e64:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 8006e68:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006e6c:	f103 0308 	add.w	r3, r3, #8
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006e78:	f101 0110 	add.w	r1, r1, #16
 8006e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e80:	f7f9 f9f4 	bl	800026c <__aeabi_dsub>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	4b3f      	ldr	r3, [pc, #252]	; (8006f90 <SIM0_step+0xd30>)
 8006e92:	f7f9 fccd 	bl	8000830 <__aeabi_ddiv>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006e9e:	f101 0118 	add.w	r1, r1, #24
 8006ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea6:	f7f9 f9e1 	bl	800026c <__aeabi_dsub>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006eb2:	e9c1 2300 	strd	r2, r3, [r1]
 8006eb6:	e0c2      	b.n	800703e <SIM0_step+0xdde>
    } else if (rtb_Exp != 0.0) {
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006ec4:	f101 0108 	add.w	r1, r1, #8
 8006ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ecc:	f7f9 fdee 	bl	8000aac <__aeabi_dcmpeq>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d162      	bne.n	8006f9c <SIM0_step+0xd3c>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8006ed6:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <SIM0_step+0xd2c>)
 8006ed8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006edc:	3318      	adds	r3, #24
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006ee6:	f101 0110 	add.w	r1, r1, #16
 8006eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eee:	f7f9 f9bd 	bl	800026c <__aeabi_dsub>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <SIM0_step+0xd34>)
 8006f00:	f7f9 fc96 	bl	8000830 <__aeabi_ddiv>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8006f0c:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <SIM0_step+0xd2c>)
 8006f0e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006f12:	3318      	adds	r3, #24
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8006f18:	f7f9 f9aa 	bl	8000270 <__adddf3>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006f24:	f101 0108 	add.w	r1, r1, #8
 8006f28:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 8006f2c:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006f30:	f103 0308 	add.w	r3, r3, #8
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006f3c:	f101 0110 	add.w	r1, r1, #16
 8006f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f44:	f7f9 f992 	bl	800026c <__aeabi_dsub>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <SIM0_step+0xd38>)
 8006f56:	f7f9 fc6b 	bl	8000830 <__aeabi_ddiv>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8006f62:	f101 0118 	add.w	r1, r1, #24
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	f7f9 f97f 	bl	800026c <__aeabi_dsub>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006f76:	e9c1 2300 	strd	r2, r3, [r1]
 8006f7a:	e060      	b.n	800703e <SIM0_step+0xdde>
 8006f7c:	f3af 8000 	nop.w
 8006f80:	9999999a 	.word	0x9999999a
 8006f84:	3fe99999 	.word	0x3fe99999
 8006f88:	bff00000 	.word	0xbff00000
 8006f8c:	2001bdb8 	.word	0x2001bdb8
 8006f90:	3fe00000 	.word	0x3fe00000
 8006f94:	40490000 	.word	0x40490000
 8006f98:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8006f9c:	4bad      	ldr	r3, [pc, #692]	; (8007254 <SIM0_step+0xff4>)
 8006f9e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f04f 0000 	mov.w	r0, #0
 8006fac:	f04f 0100 	mov.w	r1, #0
 8006fb0:	f7f9 f95c 	bl	800026c <__aeabi_dsub>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	4ba5      	ldr	r3, [pc, #660]	; (8007258 <SIM0_step+0xff8>)
 8006fc2:	f7f9 fc35 	bl	8000830 <__aeabi_ddiv>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8006fce:	4ba1      	ldr	r3, [pc, #644]	; (8007254 <SIM0_step+0xff4>)
 8006fd0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8006fd4:	3318      	adds	r3, #24
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8006fda:	f7f9 f949 	bl	8000270 <__adddf3>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8006fe6:	f101 0108 	add.w	r1, r1, #8
 8006fea:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 8006fee:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8006ff2:	f103 0308 	add.w	r3, r3, #8
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f04f 0000 	mov.w	r0, #0
 8006ffe:	f04f 0100 	mov.w	r1, #0
 8007002:	f7f9 f933 	bl	800026c <__aeabi_dsub>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4690      	mov	r8, r2
 800700c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	4b91      	ldr	r3, [pc, #580]	; (800725c <SIM0_step+0xffc>)
 8007016:	4640      	mov	r0, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f7f9 fc09 	bl	8000830 <__aeabi_ddiv>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007026:	e9c1 2300 	strd	r2, r3, [r1]
 800702a:	e008      	b.n	800703e <SIM0_step+0xdde>
    }
  } else {
    rtb_Exp = -1.0;
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	4b8b      	ldr	r3, [pc, #556]	; (8007260 <SIM0_step+0x1000>)
 8007032:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007036:	f101 0108 	add.w	r1, r1, #8
 800703a:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 800703e:	4989      	ldr	r1, [pc, #548]	; (8007264 <SIM0_step+0x1004>)
 8007040:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007044:	f103 0308 	add.w	r3, r3, #8
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 8007050:	4984      	ldr	r1, [pc, #528]	; (8007264 <SIM0_step+0x1004>)
 8007052:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 800705e:	4981      	ldr	r1, [pc, #516]	; (8007264 <SIM0_step+0x1004>)
 8007060:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007064:	f103 0310 	add.w	r3, r3, #16
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 8007070:	497c      	ldr	r1, [pc, #496]	; (8007264 <SIM0_step+0x1004>)
 8007072:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007076:	f103 0308 	add.w	r3, r3, #8
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 8007082:	4978      	ldr	r1, [pc, #480]	; (8007264 <SIM0_step+0x1004>)
 8007084:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 8007090:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007094:	4974      	ldr	r1, [pc, #464]	; (8007268 <SIM0_step+0x1008>)
 8007096:	4875      	ldr	r0, [pc, #468]	; (800726c <SIM0_step+0x100c>)
 8007098:	f010 ffb0 	bl	8017ffc <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 800709c:	4b74      	ldr	r3, [pc, #464]	; (8007270 <SIM0_step+0x1010>)
 800709e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80070a2:	4970      	ldr	r1, [pc, #448]	; (8007264 <SIM0_step+0x1004>)
 80070a4:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 80070a8:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 80070ac:	4b69      	ldr	r3, [pc, #420]	; (8007254 <SIM0_step+0xff4>)
 80070ae:	f603 0108 	addw	r1, r3, #2056	; 0x808
 80070b2:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 80070be:	4b65      	ldr	r3, [pc, #404]	; (8007254 <SIM0_step+0xff4>)
 80070c0:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 80070c4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80070c8:	f103 0318 	add.w	r3, r3, #24
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 80070d4:	4b5f      	ldr	r3, [pc, #380]	; (8007254 <SIM0_step+0xff4>)
 80070d6:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80070da:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 80070de:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80070e2:	f103 0318 	add.w	r3, r3, #24
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 f8c1 	bl	8000270 <__adddf3>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4614      	mov	r4, r2
 80070f4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80070f8:	4b56      	ldr	r3, [pc, #344]	; (8007254 <SIM0_step+0xff4>)
 80070fa:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80070fe:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 8007102:	2300      	movs	r3, #0
 8007104:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007108:	f102 020c 	add.w	r2, r2, #12
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e109      	b.n	8007324 <SIM0_step+0x10c4>
    rtb_Memory22 = rtb_Memory21[i];
 8007110:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007114:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007118:	f103 030c 	add.w	r3, r3, #12
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4413      	add	r3, r2
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800712a:	f101 0108 	add.w	r1, r1, #8
 800712e:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Switch[i];
 8007132:	f107 0318 	add.w	r3, r7, #24
 8007136:	3b10      	subs	r3, #16
 8007138:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800713c:	f102 020c 	add.w	r2, r2, #12
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	00d2      	lsls	r2, r2, #3
 8007144:	4413      	add	r3, r2
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800714e:	f101 0118 	add.w	r1, r1, #24
 8007152:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Rpz[i];
 8007156:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800715a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800715e:	f103 030c 	add.w	r3, r3, #12
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4413      	add	r3, r2
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007170:	f101 0118 	add.w	r1, r1, #24
 8007174:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 8007178:	4a36      	ldr	r2, [pc, #216]	; (8007254 <SIM0_step+0xff4>)
 800717a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800717e:	f103 030c 	add.w	r3, r3, #12
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3305      	adds	r3, #5
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	18d1      	adds	r1, r2, r3
 800718a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800718e:	f103 0318 	add.w	r3, r3, #24
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 800719a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800719e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80071a2:	f103 030c 	add.w	r3, r3, #12
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	4828      	ldr	r0, [pc, #160]	; (8007254 <SIM0_step+0xff4>)
 80071b2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80071b6:	f101 010c 	add.w	r1, r1, #12
 80071ba:	6809      	ldr	r1, [r1, #0]
 80071bc:	3183      	adds	r1, #131	; 0x83
 80071be:	00c9      	lsls	r1, r1, #3
 80071c0:	4401      	add	r1, r0
 80071c2:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 80071c6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80071ca:	f103 0308 	add.w	r3, r3, #8
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80071d6:	f101 0118 	add.w	r1, r1, #24
 80071da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071de:	f7f9 fc8d 	bl	8000afc <__aeabi_dcmpgt>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d012      	beq.n	800720e <SIM0_step+0xfae>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 80071e8:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <SIM0_step+0xff4>)
 80071ea:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80071ee:	f103 030c 	add.w	r3, r3, #12
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f203 1303 	addw	r3, r3, #259	; 0x103
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	18d1      	adds	r1, r2, r3
 80071fc:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007200:	f103 0308 	add.w	r3, r3, #8
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	e9c1 2300 	strd	r2, r3, [r1]
 800720c:	e044      	b.n	8007298 <SIM0_step+0x1038>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 800720e:	4b18      	ldr	r3, [pc, #96]	; (8007270 <SIM0_step+0x1010>)
 8007210:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800721c:	f101 0118 	add.w	r1, r1, #24
 8007220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007224:	f7f9 fc4c 	bl	8000ac0 <__aeabi_dcmplt>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d022      	beq.n	8007274 <SIM0_step+0x1014>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 800722e:	4b10      	ldr	r3, [pc, #64]	; (8007270 <SIM0_step+0x1010>)
 8007230:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	4806      	ldr	r0, [pc, #24]	; (8007254 <SIM0_step+0xff4>)
 800723a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800723e:	f101 010c 	add.w	r1, r1, #12
 8007242:	6809      	ldr	r1, [r1, #0]
 8007244:	f201 1103 	addw	r1, r1, #259	; 0x103
 8007248:	00c9      	lsls	r1, r1, #3
 800724a:	4401      	add	r1, r0
 800724c:	e9c1 2300 	strd	r2, r3, [r1]
 8007250:	e022      	b.n	8007298 <SIM0_step+0x1038>
 8007252:	bf00      	nop
 8007254:	2001bdb8 	.word	0x2001bdb8
 8007258:	40140000 	.word	0x40140000
 800725c:	40240000 	.word	0x40240000
 8007260:	bff00000 	.word	0xbff00000
 8007264:	2001d618 	.word	0x2001d618
 8007268:	20000c38 	.word	0x20000c38
 800726c:	2001e228 	.word	0x2001e228
 8007270:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 8007274:	4a94      	ldr	r2, [pc, #592]	; (80074c8 <SIM0_step+0x1268>)
 8007276:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800727a:	f103 030c 	add.w	r3, r3, #12
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f203 1303 	addw	r3, r3, #259	; 0x103
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	18d1      	adds	r1, r2, r3
 8007288:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800728c:	f103 0318 	add.w	r3, r3, #24
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 8007298:	4a8b      	ldr	r2, [pc, #556]	; (80074c8 <SIM0_step+0x1268>)
 800729a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800729e:	f103 030c 	add.w	r3, r3, #12
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f203 1381 	addw	r3, r3, #385	; 0x181
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	18d1      	adds	r1, r2, r3
 80072ac:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80072b0:	f103 0308 	add.w	r3, r3, #8
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 80072bc:	4a83      	ldr	r2, [pc, #524]	; (80074cc <SIM0_step+0x126c>)
 80072be:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80072c2:	f103 030c 	add.w	r3, r3, #12
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330d      	adds	r3, #13
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	487d      	ldr	r0, [pc, #500]	; (80074c8 <SIM0_step+0x1268>)
 80072d4:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80072d8:	f101 010c 	add.w	r1, r1, #12
 80072dc:	6809      	ldr	r1, [r1, #0]
 80072de:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80072e2:	00c9      	lsls	r1, r1, #3
 80072e4:	4401      	add	r1, r0
 80072e6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 80072ea:	4a77      	ldr	r2, [pc, #476]	; (80074c8 <SIM0_step+0x1268>)
 80072ec:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80072f0:	f103 030c 	add.w	r3, r3, #12
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	18d1      	adds	r1, r2, r3
 80072fe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007302:	f103 0318 	add.w	r3, r3, #24
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800730e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007312:	f103 030c 	add.w	r3, r3, #12
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800731e:	f102 020c 	add.w	r2, r2, #12
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007328:	f103 030c 	add.w	r3, r3, #12
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b7d      	cmp	r3, #125	; 0x7d
 8007330:	f77f aeee 	ble.w	8007110 <SIM0_step+0xeb0>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 8007334:	4b65      	ldr	r3, [pc, #404]	; (80074cc <SIM0_step+0x126c>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	4963      	ldr	r1, [pc, #396]	; (80074c8 <SIM0_step+0x1268>)
 800733c:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8007340:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 8007344:	4b61      	ldr	r3, [pc, #388]	; (80074cc <SIM0_step+0x126c>)
 8007346:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800734a:	4b5f      	ldr	r3, [pc, #380]	; (80074c8 <SIM0_step+0x1268>)
 800734c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007350:	3308      	adds	r3, #8
 8007352:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 8007356:	4b5c      	ldr	r3, [pc, #368]	; (80074c8 <SIM0_step+0x1268>)
 8007358:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800735c:	3318      	adds	r3, #24
 800735e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007362:	f102 0217 	add.w	r2, r2, #23
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 800736a:	4b58      	ldr	r3, [pc, #352]	; (80074cc <SIM0_step+0x126c>)
 800736c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007370:	4b55      	ldr	r3, [pc, #340]	; (80074c8 <SIM0_step+0x1268>)
 8007372:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007376:	3310      	adds	r3, #16
 8007378:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 800737c:	4b53      	ldr	r3, [pc, #332]	; (80074cc <SIM0_step+0x126c>)
 800737e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007382:	4b51      	ldr	r3, [pc, #324]	; (80074c8 <SIM0_step+0x1268>)
 8007384:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007388:	3318      	adds	r3, #24
 800738a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 800738e:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <SIM0_step+0x1268>)
 8007390:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007394:	3319      	adds	r3, #25
 8007396:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800739a:	f102 0215 	add.w	r2, r2, #21
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 80073a2:	4b4a      	ldr	r3, [pc, #296]	; (80074cc <SIM0_step+0x126c>)
 80073a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a8:	4947      	ldr	r1, [pc, #284]	; (80074c8 <SIM0_step+0x1268>)
 80073aa:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80073ae:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 80073b2:	4b45      	ldr	r3, [pc, #276]	; (80074c8 <SIM0_step+0x1268>)
 80073b4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80073b8:	3308      	adds	r3, #8
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	4942      	ldr	r1, [pc, #264]	; (80074c8 <SIM0_step+0x1268>)
 80073c0:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 80073c4:	4b40      	ldr	r3, [pc, #256]	; (80074c8 <SIM0_step+0x1268>)
 80073c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80073ca:	493f      	ldr	r1, [pc, #252]	; (80074c8 <SIM0_step+0x1268>)
 80073cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 80073d0:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <SIM0_step+0x1268>)
 80073d2:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80073d6:	3310      	adds	r3, #16
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	493a      	ldr	r1, [pc, #232]	; (80074c8 <SIM0_step+0x1268>)
 80073de:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 80073e2:	4b39      	ldr	r3, [pc, #228]	; (80074c8 <SIM0_step+0x1268>)
 80073e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073e8:	4937      	ldr	r1, [pc, #220]	; (80074c8 <SIM0_step+0x1268>)
 80073ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 80073ee:	4b36      	ldr	r3, [pc, #216]	; (80074c8 <SIM0_step+0x1268>)
 80073f0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	4933      	ldr	r1, [pc, #204]	; (80074c8 <SIM0_step+0x1268>)
 80073fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 80073fe:	4b33      	ldr	r3, [pc, #204]	; (80074cc <SIM0_step+0x126c>)
 8007400:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8007404:	4b30      	ldr	r3, [pc, #192]	; (80074c8 <SIM0_step+0x1268>)
 8007406:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800740a:	3308      	adds	r3, #8
 800740c:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 8007410:	4b2e      	ldr	r3, [pc, #184]	; (80074cc <SIM0_step+0x126c>)
 8007412:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8007416:	4b2c      	ldr	r3, [pc, #176]	; (80074c8 <SIM0_step+0x1268>)
 8007418:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800741c:	3310      	adds	r3, #16
 800741e:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 8007422:	4b2a      	ldr	r3, [pc, #168]	; (80074cc <SIM0_step+0x126c>)
 8007424:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8007428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800742c:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <SIM0_step+0x1268>)
 800742e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007432:	3318      	adds	r3, #24
 8007434:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 8007438:	4b24      	ldr	r3, [pc, #144]	; (80074cc <SIM0_step+0x126c>)
 800743a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800743e:	4922      	ldr	r1, [pc, #136]	; (80074c8 <SIM0_step+0x1268>)
 8007440:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 8007444:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 8007448:	4b20      	ldr	r3, [pc, #128]	; (80074cc <SIM0_step+0x126c>)
 800744a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <SIM0_step+0x1268>)
 8007450:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007454:	3308      	adds	r3, #8
 8007456:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 800745a:	4b1c      	ldr	r3, [pc, #112]	; (80074cc <SIM0_step+0x126c>)
 800745c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <SIM0_step+0x1268>)
 8007462:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007466:	3310      	adds	r3, #16
 8007468:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <SIM0_step+0x1268>)
 800746e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007472:	3318      	adds	r3, #24
 8007474:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8007478:	f102 0208 	add.w	r2, r2, #8
 800747c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007480:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 8007484:	4b11      	ldr	r3, [pc, #68]	; (80074cc <SIM0_step+0x126c>)
 8007486:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800748a:	490f      	ldr	r1, [pc, #60]	; (80074c8 <SIM0_step+0x1268>)
 800748c:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8007490:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 8007494:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <SIM0_step+0x126c>)
 8007496:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800749a:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <SIM0_step+0x1268>)
 800749c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80074a0:	3308      	adds	r3, #8
 80074a2:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <SIM0_step+0x126c>)
 80074a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <SIM0_step+0x1268>)
 80074ae:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80074b2:	3310      	adds	r3, #16
 80074b4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80074b8:	bf00      	nop
 80074ba:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	bf00      	nop
 80074c8:	2001bdb8 	.word	0x2001bdb8
 80074cc:	2001e410 	.word	0x2001e410

080074d0 <SIM0_initialize>:

void SIM0_initialize(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <SIM0_initialize+0x48>)
 80074d8:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	490e      	ldr	r1, [pc, #56]	; (800751c <SIM0_initialize+0x4c>)
 80074e2:	f601 0108 	addw	r1, r1, #2056	; 0x808
 80074e6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <SIM0_initialize+0x48>)
 80074ec:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	4909      	ldr	r1, [pc, #36]	; (800751c <SIM0_initialize+0x4c>)
 80074f6:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 80074fa:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <SIM0_initialize+0x48>)
 8007500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	4904      	ldr	r1, [pc, #16]	; (800751c <SIM0_initialize+0x4c>)
 800750a:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 800750e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e05b      	b.n	80075d0 <SIM0_initialize+0x100>
 8007518:	20000360 	.word	0x20000360
 800751c:	2001bdb8 	.word	0x2001bdb8
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 8007520:	4ba4      	ldr	r3, [pc, #656]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007522:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	48a3      	ldr	r0, [pc, #652]	; (80077b8 <SIM0_initialize+0x2e8>)
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	3105      	adds	r1, #5
 8007530:	00c9      	lsls	r1, r1, #3
 8007532:	4401      	add	r1, r0
 8007534:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 8007538:	4a9e      	ldr	r2, [pc, #632]	; (80077b4 <SIM0_initialize+0x2e4>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	489b      	ldr	r0, [pc, #620]	; (80077b8 <SIM0_initialize+0x2e8>)
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	3183      	adds	r1, #131	; 0x83
 800754e:	00c9      	lsls	r1, r1, #3
 8007550:	4401      	add	r1, r0
 8007552:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 8007556:	4a97      	ldr	r2, [pc, #604]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	339d      	adds	r3, #157	; 0x9d
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	4413      	add	r3, r2
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	4894      	ldr	r0, [pc, #592]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	f201 1103 	addw	r1, r1, #259	; 0x103
 800756c:	00c9      	lsls	r1, r1, #3
 800756e:	4401      	add	r1, r0
 8007570:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 8007574:	4a8f      	ldr	r2, [pc, #572]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	331f      	adds	r3, #31
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4413      	add	r3, r2
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	488d      	ldr	r0, [pc, #564]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	f201 1181 	addw	r1, r1, #385	; 0x181
 800758a:	00c9      	lsls	r1, r1, #3
 800758c:	4401      	add	r1, r0
 800758e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 8007592:	4b88      	ldr	r3, [pc, #544]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007598:	3308      	adds	r3, #8
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	4886      	ldr	r0, [pc, #536]	; (80077b8 <SIM0_initialize+0x2e8>)
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80075a6:	00c9      	lsls	r1, r1, #3
 80075a8:	4401      	add	r1, r0
 80075aa:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 80075ae:	4b81      	ldr	r3, [pc, #516]	; (80077b4 <SIM0_initialize+0x2e4>)
 80075b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b4:	3310      	adds	r3, #16
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	487f      	ldr	r0, [pc, #508]	; (80077b8 <SIM0_initialize+0x2e8>)
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	f201 217e 	addw	r1, r1, #638	; 0x27e
 80075c2:	00c9      	lsls	r1, r1, #3
 80075c4:	4401      	add	r1, r0
 80075c6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3301      	adds	r3, #1
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b7d      	cmp	r3, #125	; 0x7d
 80075d4:	dda4      	ble.n	8007520 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 80075d6:	4b77      	ldr	r3, [pc, #476]	; (80077b4 <SIM0_initialize+0x2e4>)
 80075d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80075dc:	3308      	adds	r3, #8
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	4975      	ldr	r1, [pc, #468]	; (80077b8 <SIM0_initialize+0x2e8>)
 80075e4:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 80075e8:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 80075ec:	4b71      	ldr	r3, [pc, #452]	; (80077b4 <SIM0_initialize+0x2e4>)
 80075ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80075f2:	3310      	adds	r3, #16
 80075f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075f8:	4b6f      	ldr	r3, [pc, #444]	; (80077b8 <SIM0_initialize+0x2e8>)
 80075fa:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80075fe:	3308      	adds	r3, #8
 8007600:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 8007604:	4b6b      	ldr	r3, [pc, #428]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007606:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 800760a:	4b6b      	ldr	r3, [pc, #428]	; (80077b8 <SIM0_initialize+0x2e8>)
 800760c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007610:	3318      	adds	r3, #24
 8007612:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 8007614:	4b67      	ldr	r3, [pc, #412]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007616:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800761a:	3318      	adds	r3, #24
 800761c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007620:	4b65      	ldr	r3, [pc, #404]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007622:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007626:	3310      	adds	r3, #16
 8007628:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 800762c:	4b61      	ldr	r3, [pc, #388]	; (80077b4 <SIM0_initialize+0x2e4>)
 800762e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007632:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007636:	4b60      	ldr	r3, [pc, #384]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007638:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800763c:	3318      	adds	r3, #24
 800763e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 8007642:	4b5c      	ldr	r3, [pc, #368]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007644:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 8007648:	4b5b      	ldr	r3, [pc, #364]	; (80077b8 <SIM0_initialize+0x2e8>)
 800764a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800764e:	3319      	adds	r3, #25
 8007650:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 8007652:	4b58      	ldr	r3, [pc, #352]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007654:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007658:	3308      	adds	r3, #8
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	4956      	ldr	r1, [pc, #344]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007660:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8007664:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 8007668:	4b52      	ldr	r3, [pc, #328]	; (80077b4 <SIM0_initialize+0x2e4>)
 800766a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800766e:	3310      	adds	r3, #16
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	4950      	ldr	r1, [pc, #320]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007676:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 800767a:	4b4e      	ldr	r3, [pc, #312]	; (80077b4 <SIM0_initialize+0x2e4>)
 800767c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007680:	3318      	adds	r3, #24
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	494c      	ldr	r1, [pc, #304]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007688:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 800768c:	4b49      	ldr	r3, [pc, #292]	; (80077b4 <SIM0_initialize+0x2e4>)
 800768e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	4948      	ldr	r1, [pc, #288]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007698:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 800769c:	4b45      	ldr	r3, [pc, #276]	; (80077b4 <SIM0_initialize+0x2e4>)
 800769e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80076a2:	3318      	adds	r3, #24
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	4943      	ldr	r1, [pc, #268]	; (80077b8 <SIM0_initialize+0x2e8>)
 80076aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 80076ae:	4b41      	ldr	r3, [pc, #260]	; (80077b4 <SIM0_initialize+0x2e4>)
 80076b0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	493f      	ldr	r1, [pc, #252]	; (80077b8 <SIM0_initialize+0x2e8>)
 80076ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 80076be:	4b3d      	ldr	r3, [pc, #244]	; (80077b4 <SIM0_initialize+0x2e4>)
 80076c0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80076c4:	3308      	adds	r3, #8
 80076c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076ca:	4b3b      	ldr	r3, [pc, #236]	; (80077b8 <SIM0_initialize+0x2e8>)
 80076cc:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076d0:	3308      	adds	r3, #8
 80076d2:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 80076d6:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <SIM0_initialize+0x2e4>)
 80076d8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80076dc:	3310      	adds	r3, #16
 80076de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076e2:	4b35      	ldr	r3, [pc, #212]	; (80077b8 <SIM0_initialize+0x2e8>)
 80076e4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80076e8:	3310      	adds	r3, #16
 80076ea:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 80076ee:	4b31      	ldr	r3, [pc, #196]	; (80077b4 <SIM0_initialize+0x2e4>)
 80076f0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80076f4:	3318      	adds	r3, #24
 80076f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076fa:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <SIM0_initialize+0x2e8>)
 80076fc:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007700:	3318      	adds	r3, #24
 8007702:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 8007706:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007708:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	4929      	ldr	r1, [pc, #164]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007712:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 8007716:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 800771a:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <SIM0_initialize+0x2e4>)
 800771c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007720:	3308      	adds	r3, #8
 8007722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007728:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800772c:	3308      	adds	r3, #8
 800772e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007734:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007738:	3310      	adds	r3, #16
 800773a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800773e:	4b1e      	ldr	r3, [pc, #120]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007740:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007744:	3310      	adds	r3, #16
 8007746:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <SIM0_initialize+0x2e4>)
 800774c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8007750:	3318      	adds	r3, #24
 8007752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007758:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800775c:	3318      	adds	r3, #24
 800775e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007764:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	4912      	ldr	r1, [pc, #72]	; (80077b8 <SIM0_initialize+0x2e8>)
 800776e:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8007772:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 8007776:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007778:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800777c:	3308      	adds	r3, #8
 800777e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <SIM0_initialize+0x2e8>)
 8007784:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007788:	3308      	adds	r3, #8
 800778a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <SIM0_initialize+0x2e4>)
 8007790:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8007794:	3310      	adds	r3, #16
 8007796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800779a:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <SIM0_initialize+0x2e8>)
 800779c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80077a0:	3310      	adds	r3, #16
 80077a2:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20000360 	.word	0x20000360
 80077b8:	2001bdb8 	.word	0x2001bdb8

080077bc <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 80077bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077c0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	f107 0414 	add.w	r4, r7, #20
 80077ca:	6020      	str	r0, [r4, #0]
 80077cc:	f107 0010 	add.w	r0, r7, #16
 80077d0:	6001      	str	r1, [r0, #0]
 80077d2:	f107 0108 	add.w	r1, r7, #8
 80077d6:	ed81 0b00 	vstr	d0, [r1]
 80077da:	1d39      	adds	r1, r7, #4
 80077dc:	600a      	str	r2, [r1, #0]
 80077de:	463a      	mov	r2, r7
 80077e0:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077ea:	f107 0314 	add.w	r3, r7, #20
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fef2 	bl	80005dc <__aeabi_dmul>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007800:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 800781c:	3408      	adds	r4, #8
 800781e:	f7f8 fedd 	bl	80005dc <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 800782a:	f107 0314 	add.w	r3, r7, #20
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007834:	1d3b      	adds	r3, r7, #4
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3310      	adds	r3, #16
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8007842:	3410      	adds	r4, #16
 8007844:	f7f8 feca 	bl	80005dc <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800785c:	e079      	b.n	8007952 <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 800785e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007862:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007866:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	463a      	mov	r2, r7
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	4413      	add	r3, r2
 8007872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007876:	f107 0314 	add.w	r3, r7, #20
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3308      	adds	r3, #8
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 feab 	bl	80005dc <__aeabi_dmul>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f8 fcef 	bl	8000270 <__adddf3>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800789a:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 800789e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80078a2:	3308      	adds	r3, #8
 80078a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80078a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80078ac:	3301      	adds	r3, #1
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	463a      	mov	r2, r7
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078ba:	f107 0314 	add.w	r3, r7, #20
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f7f8 fe89 	bl	80005dc <__aeabi_dmul>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4610      	mov	r0, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80078d6:	f103 0608 	add.w	r6, r3, #8
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f8 fcc5 	bl	8000270 <__adddf3>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 80078ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80078f2:	3310      	adds	r3, #16
 80078f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80078f8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80078fc:	3302      	adds	r3, #2
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	463a      	mov	r2, r7
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	4413      	add	r3, r2
 8007906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800790a:	f107 0314 	add.w	r3, r7, #20
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fe61 	bl	80005dc <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4610      	mov	r0, r2
 8007920:	4619      	mov	r1, r3
 8007922:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007926:	f103 0610 	add.w	r6, r3, #16
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f8 fc9d 	bl	8000270 <__adddf3>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 800793e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007942:	3303      	adds	r3, #3
 8007944:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007948:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800794c:	3301      	adds	r3, #1
 800794e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007952:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007956:	2b05      	cmp	r3, #5
 8007958:	dd81      	ble.n	800785e <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 800795a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f107 0108 	add.w	r1, r7, #8
 8007966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800796a:	f7f8 fe37 	bl	80005dc <__aeabi_dmul>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 8007976:	1d3b      	adds	r3, r7, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800797e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007982:	f7f8 fc73 	bl	800026c <__aeabi_dsub>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 800798e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007992:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007996:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80079a2:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 80079a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80079aa:	3308      	adds	r3, #8
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f107 0108 	add.w	r1, r7, #8
 80079b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b8:	f7f8 fe10 	bl	80005dc <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 80079c4:	1d3b      	adds	r3, r7, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079ce:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80079d2:	f7f8 fc4b 	bl	800026c <__aeabi_dsub>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 80079de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80079e2:	f103 0108 	add.w	r1, r3, #8
 80079e6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80079ea:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 80079ee:	1d3b      	adds	r3, r7, #4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f103 0108 	add.w	r1, r3, #8
 80079f6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80079fa:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 80079fe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007a02:	3310      	adds	r3, #16
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a10:	f7f8 fde4 	bl	80005dc <__aeabi_dmul>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 8007a1c:	1d3b      	adds	r3, r7, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3310      	adds	r3, #16
 8007a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a26:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007a2a:	f7f8 fc1f 	bl	800026c <__aeabi_dsub>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 8007a36:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007a3a:	f103 0110 	add.w	r1, r3, #16
 8007a3e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007a42:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 8007a46:	1d3b      	adds	r3, r7, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f103 0110 	add.w	r1, r3, #16
 8007a4e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8007a52:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007a62:	e054      	b.n	8007b0e <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 8007a64:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	463a      	mov	r2, r7
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	4413      	add	r3, r2
 8007a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a74:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007a80:	00e4      	lsls	r4, r4, #3
 8007a82:	463d      	mov	r5, r7
 8007a84:	682d      	ldr	r5, [r5, #0]
 8007a86:	442c      	add	r4, r5
 8007a88:	f7f8 fbf0 	bl	800026c <__aeabi_dsub>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 8007a94:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007a98:	3301      	adds	r3, #1
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	463a      	mov	r2, r7
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aa6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007aaa:	3308      	adds	r3, #8
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8007ab4:	3401      	adds	r4, #1
 8007ab6:	00e4      	lsls	r4, r4, #3
 8007ab8:	463d      	mov	r5, r7
 8007aba:	682d      	ldr	r5, [r5, #0]
 8007abc:	442c      	add	r4, r5
 8007abe:	f7f8 fbd5 	bl	800026c <__aeabi_dsub>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8007aca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ace:	3302      	adds	r3, #2
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	463a      	mov	r2, r7
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007adc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ae0:	3302      	adds	r3, #2
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	463a      	mov	r2, r7
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	18d4      	adds	r4, r2, r3
 8007aea:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007aee:	f7f8 fbbd 	bl	800026c <__aeabi_dsub>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8007afa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007afe:	3303      	adds	r3, #3
 8007b00:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8007b04:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007b08:	3301      	adds	r3, #1
 8007b0a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007b0e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	dda6      	ble.n	8007a64 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 8007b16:	f107 0308 	add.w	r3, r7, #8
 8007b1a:	ed93 0b00 	vldr	d0, [r3]
 8007b1e:	f004 fbed 	bl	800c2fc <rtIsNaN>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d006      	beq.n	8007b36 <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8007b34:	e029      	b.n	8007b8a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 8007b36:	f107 0108 	add.w	r1, r7, #8
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b46:	f7f8 ffbb 	bl	8000ac0 <__aeabi_dcmplt>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	4bce      	ldr	r3, [pc, #824]	; (8007e90 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8007b56:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8007b5a:	e016      	b.n	8007b8a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b6c:	f7f8 ffc6 	bl	8000afc <__aeabi_dcmpgt>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	4bc6      	ldr	r3, [pc, #792]	; (8007e94 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8007b7c:	e003      	b.n	8007b86 <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8007b8a:	f107 0310 	add.w	r3, r7, #16
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8007b98:	f7f8 fd20 	bl	80005dc <__aeabi_dmul>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 8007ba4:	f107 0310 	add.w	r3, r7, #16
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3308      	adds	r3, #8
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8007bb4:	f7f8 fd12 	bl	80005dc <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8007bc0:	f107 0408 	add.w	r4, r7, #8
 8007bc4:	f107 0108 	add.w	r1, r7, #8
 8007bc8:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8007bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd0:	f7f8 fd04 	bl	80005dc <__aeabi_dmul>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	ed93 0b00 	vldr	d0, [r3]
 8007be4:	f010 fbd0 	bl	8018388 <sqrt>
 8007be8:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8007bec:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8007bf0:	f010 fbca 	bl	8018388 <sqrt>
 8007bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8007bf8:	eef0 7a60 	vmov.f32	s15, s1
 8007bfc:	f107 0318 	add.w	r3, r7, #24
 8007c00:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007c10:	e03c      	b.n	8007c8c <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007c1e:	e027      	b.n	8007c70 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8007c20:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8007c24:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c28:	4413      	add	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	463a      	mov	r2, r7
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c36:	f107 0318 	add.w	r3, r7, #24
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8007c42:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8007c46:	442c      	add	r4, r5
 8007c48:	f7f8 fcc8 	bl	80005dc <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8007c54:	00e1      	lsls	r1, r4, #3
 8007c56:	4401      	add	r1, r0
 8007c58:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8007c5c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007c60:	3303      	adds	r3, #3
 8007c62:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8007c66:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8007c70:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	ddd3      	ble.n	8007c20 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8007c78:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8007c7c:	3306      	adds	r3, #6
 8007c7e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8007c82:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c86:	3301      	adds	r3, #1
 8007c88:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007c8c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	ddbe      	ble.n	8007c12 <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8007c94:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8007c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c9c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f002 ff43 	bl	800ab2c <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 8007ca6:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8007caa:	f004 fb27 	bl	800c2fc <rtIsNaN>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d125      	bne.n	8007d00 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8007cc0:	f7f8 fefe 	bl	8000ac0 <__aeabi_dcmplt>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8007cd0:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8007cd4:	e014      	b.n	8007d00 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8007cd6:	f04f 0200 	mov.w	r2, #0
 8007cda:	f04f 0300 	mov.w	r3, #0
 8007cde:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8007ce2:	f7f8 ff0b 	bl	8000afc <__aeabi_dcmpgt>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	4b68      	ldr	r3, [pc, #416]	; (8007e94 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8007cf2:	e003      	b.n	8007cfc <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	4b63      	ldr	r3, [pc, #396]	; (8007e94 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8007d06:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8007d0a:	f7f8 fecf 	bl	8000aac <__aeabi_dcmpeq>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 81bd 	beq.w	8008090 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8007d16:	2300      	movs	r3, #0
 8007d18:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007d1c:	e011      	b.n	8007d42 <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8007d1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d22:	3301      	adds	r3, #1
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007d2a:	18d1      	adds	r1, r2, r3
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8007d38:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007d42:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	dde9      	ble.n	8007d1e <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8007d4a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007d4e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8007d5e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8007d6e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8007d7e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007d82:	ed93 7b00 	vldr	d7, [r3]
 8007d86:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007d8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d8e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007d92:	4618      	mov	r0, r3
 8007d94:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8007d98:	eeb0 0a47 	vmov.f32	s0, s14
 8007d9c:	eef0 0a67 	vmov.f32	s1, s15
 8007da0:	f004 f814 	bl	800bdcc <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8007da4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dac:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007db0:	f7f8 fc14 	bl	80005dc <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	461d      	mov	r5, r3
 8007dbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dc4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007dc8:	3318      	adds	r3, #24
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fc05 	bl	80005dc <__aeabi_dmul>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fa47 	bl	800026c <__aeabi_dsub>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	f107 0118 	add.w	r1, r7, #24
 8007de6:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8007dea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007df2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007df6:	3318      	adds	r3, #24
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f7f8 fbee 	bl	80005dc <__aeabi_dmul>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4690      	mov	r8, r2
 8007e06:	4699      	mov	r9, r3
 8007e08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e10:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007e14:	f7f8 fbe2 	bl	80005dc <__aeabi_dmul>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007e24:	f103 0418 	add.w	r4, r3, #24
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fa1e 	bl	8000270 <__adddf3>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8007e3c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007e40:	3320      	adds	r3, #32
 8007e42:	ed93 7b00 	vldr	d7, [r3]
 8007e46:	f107 0318 	add.w	r3, r7, #24
 8007e4a:	ed93 6b00 	vldr	d6, [r3]
 8007e4e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007e52:	f103 0220 	add.w	r2, r3, #32
 8007e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e5a:	f103 0108 	add.w	r1, r3, #8
 8007e5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e62:	3308      	adds	r3, #8
 8007e64:	4618      	mov	r0, r3
 8007e66:	eeb0 1a46 	vmov.f32	s2, s12
 8007e6a:	eef0 1a66 	vmov.f32	s3, s13
 8007e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8007e72:	eef0 0a67 	vmov.f32	s1, s15
 8007e76:	f003 ffa9 	bl	800bdcc <rotate_LZ7ctbe0>
    temp = b_t;
 8007e7a:	f107 0118 	add.w	r1, r7, #24
 8007e7e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8007e82:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007e8c:	e06f      	b.n	8007f6e <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8007e8e:	bf00      	nop
 8007e90:	bff00000 	.word	0xbff00000
 8007e94:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8007e98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007e9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ea8:	f107 0318 	add.w	r3, r7, #24
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fb94 	bl	80005dc <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8007ebc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007ec0:	3306      	adds	r3, #6
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007ec8:	4413      	add	r3, r2
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8007ed2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ed6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ee2:	f107 0318 	add.w	r3, r7, #24
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 fb77 	bl	80005dc <__aeabi_dmul>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	461d      	mov	r5, r3
 8007ef6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007efa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	4413      	add	r3, r2
 8007f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f06:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007f0a:	f7f8 fb67 	bl	80005dc <__aeabi_dmul>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	f7f8 f9a9 	bl	800026c <__aeabi_dsub>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	f107 0118 	add.w	r1, r7, #24
 8007f22:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 8007f26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f2a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
 8007f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f36:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8007f3a:	f7f8 fb4f 	bl	80005dc <__aeabi_dmul>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4610      	mov	r0, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f4a:	3306      	adds	r3, #6
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007f52:	18d4      	adds	r4, r2, r3
 8007f54:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8007f58:	f7f8 f98a 	bl	8000270 <__adddf3>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8007f64:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007f6e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	dd90      	ble.n	8007e98 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 8007f76:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007f7a:	3340      	adds	r3, #64	; 0x40
 8007f7c:	ed93 7b00 	vldr	d7, [r3]
 8007f80:	f107 0318 	add.w	r3, r7, #24
 8007f84:	ed93 6b00 	vldr	d6, [r3]
 8007f88:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007f8c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f94:	f103 0110 	add.w	r1, r3, #16
 8007f98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f9c:	3310      	adds	r3, #16
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	eeb0 1a46 	vmov.f32	s2, s12
 8007fa4:	eef0 1a66 	vmov.f32	s3, s13
 8007fa8:	eeb0 0a47 	vmov.f32	s0, s14
 8007fac:	eef0 0a67 	vmov.f32	s1, s15
 8007fb0:	f003 ff0c 	bl	800bdcc <rotate_LZ7ctbe0>
    kk = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8007fc0:	e03d      	b.n	800803e <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8007fc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007fcc:	4413      	add	r3, r2
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007fd6:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8007fda:	00c9      	lsls	r1, r1, #3
 8007fdc:	4401      	add	r1, r0
 8007fde:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8007fe2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8007fe6:	3303      	adds	r3, #3
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8007fee:	4413      	add	r3, r2
 8007ff0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007ff4:	1c51      	adds	r1, r2, #1
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8007ffe:	00c9      	lsls	r1, r1, #3
 8008000:	4401      	add	r1, r0
 8008002:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8008006:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800800a:	3306      	adds	r3, #6
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008012:	4413      	add	r3, r2
 8008014:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008018:	1c91      	adds	r1, r2, #2
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008022:	00c9      	lsls	r1, r1, #3
 8008024:	4401      	add	r1, r0
 8008026:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 800802a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800802e:	3303      	adds	r3, #3
 8008030:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008034:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008038:	3301      	adds	r3, #1
 800803a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800803e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008042:	2b02      	cmp	r3, #2
 8008044:	ddbd      	ble.n	8007fc2 <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 8008046:	2300      	movs	r3, #0
 8008048:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800804c:	e01a      	b.n	8008084 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 800804e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008052:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4413      	add	r3, r2
 800805a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800805e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008068:	18d4      	adds	r4, r2, r3
 800806a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800806e:	f7f8 fab5 	bl	80005dc <__aeabi_dmul>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 800807a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800807e:	3301      	adds	r3, #1
 8008080:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008084:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008088:	2b08      	cmp	r3, #8
 800808a:	dde0      	ble.n	800804e <UTMeanCovSqrt_C2vgLQ4W+0x892>
 800808c:	f000 bf6e 	b.w	8008f6c <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8008090:	2300      	movs	r3, #0
 8008092:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008096:	2300      	movs	r3, #0
 8008098:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800809c:	e011      	b.n	80080c2 <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 800809e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80080a2:	3301      	adds	r3, #1
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80080aa:	18d1      	adds	r1, r2, r3
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 80080b8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80080bc:	3301      	adds	r3, #1
 80080be:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80080c2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	dde9      	ble.n	800809e <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 80080ca:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80080ce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 80080de:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80080e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080e6:	2301      	movs	r3, #1
 80080e8:	461c      	mov	r4, r3
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	f7f8 fcdb 	bl	8000aac <__aeabi_dcmpeq>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 80080fc:	2300      	movs	r3, #0
 80080fe:	461c      	mov	r4, r3
 8008100:	b2e3      	uxtb	r3, r4
 8008102:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 8008106:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800810a:	2b00      	cmp	r3, #0
 800810c:	d114      	bne.n	8008138 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 800810e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008112:	3320      	adds	r3, #32
 8008114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008118:	2301      	movs	r3, #1
 800811a:	461c      	mov	r4, r3
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	f7f8 fcc2 	bl	8000aac <__aeabi_dcmpeq>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <UTMeanCovSqrt_C2vgLQ4W+0x976>
 800812e:	2300      	movs	r3, #0
 8008130:	461c      	mov	r4, r3
 8008132:	b2e3      	uxtb	r3, r4
 8008134:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 8008138:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800813c:	2b00      	cmp	r3, #0
 800813e:	d114      	bne.n	800816a <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 8008140:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008144:	3340      	adds	r3, #64	; 0x40
 8008146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800814a:	2301      	movs	r3, #1
 800814c:	461c      	mov	r4, r3
 800814e:	f04f 0200 	mov.w	r2, #0
 8008152:	f04f 0300 	mov.w	r3, #0
 8008156:	f7f8 fca9 	bl	8000aac <__aeabi_dcmpeq>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8008160:	2300      	movs	r3, #0
 8008162:	461c      	mov	r4, r3
 8008164:	b2e3      	uxtb	r3, r4
 8008166:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8008170:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 800817e:	e394      	b.n	80088aa <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8008180:	f107 0120 	add.w	r1, r7, #32
 8008184:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008188:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 800818c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8008198:	f7f8 fb4a 	bl	8000830 <__aeabi_ddiv>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	f107 0120 	add.w	r1, r7, #32
 80081a4:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 80081a8:	f107 0320 	add.w	r3, r7, #32
 80081ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081b0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80081b4:	3318      	adds	r3, #24
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 fa0f 	bl	80005dc <__aeabi_dmul>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80081c6:	f7f8 f851 	bl	800026c <__aeabi_dsub>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4610      	mov	r0, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80081d6:	3320      	adds	r3, #32
 80081d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081dc:	f7f8 fb28 	bl	8000830 <__aeabi_ddiv>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	f107 0120 	add.w	r1, r7, #32
 80081e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 80081ec:	f107 0118 	add.w	r1, r7, #24
 80081f0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80081f4:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80081fe:	e027      	b.n	8008250 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 8008200:	f107 0318 	add.w	r3, r7, #24
 8008204:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008208:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800820c:	3306      	adds	r3, #6
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008214:	4413      	add	r3, r2
 8008216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800821a:	f107 0220 	add.w	r2, r7, #32
 800821e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	4413      	add	r3, r2
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 f9d7 	bl	80005dc <__aeabi_dmul>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	f7f8 f819 	bl	800026c <__aeabi_dsub>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	f107 0118 	add.w	r1, r7, #24
 8008242:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8008246:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800824a:	3301      	adds	r3, #1
 800824c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008250:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008254:	2b01      	cmp	r3, #1
 8008256:	ddd3      	ble.n	8008200 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8008258:	f107 0318 	add.w	r3, r7, #24
 800825c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008260:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008264:	3340      	adds	r3, #64	; 0x40
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 fae1 	bl	8000830 <__aeabi_ddiv>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	f107 0120 	add.w	r1, r7, #32
 8008276:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8008282:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 8008286:	f107 0320 	add.w	r3, r7, #32
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	4611      	mov	r1, r2
 8008290:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8008294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008298:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80082a4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80082a8:	f7f8 fc28 	bl	8000afc <__aeabi_dcmpgt>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 80082b2:	f107 0118 	add.w	r1, r7, #24
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	4b85      	ldr	r3, [pc, #532]	; (80084d0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80082bc:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80082c0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80082c4:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80082c8:	e017      	b.n	80082fa <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80082d2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80082d6:	f7f8 faab 	bl	8000830 <__aeabi_ddiv>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 80082e2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80082e6:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80082ea:	f7f8 f977 	bl	80005dc <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	f107 0118 	add.w	r1, r7, #24
 80082f6:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 80082fa:	f107 0320 	add.w	r3, r7, #32
 80082fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008302:	4611      	mov	r1, r2
 8008304:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8008308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800830c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 8008310:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008314:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008318:	f7f8 fbf0 	bl	8000afc <__aeabi_dcmpgt>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d02d      	beq.n	800837e <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 8008322:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008326:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 800832a:	f7f8 fa81 	bl	8000830 <__aeabi_ddiv>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 8008336:	f107 0318 	add.w	r3, r7, #24
 800833a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800833e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008342:	f7f8 f94b 	bl	80005dc <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4610      	mov	r0, r2
 800834c:	4619      	mov	r1, r3
 800834e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008352:	f7f8 f943 	bl	80005dc <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4610      	mov	r0, r2
 800835c:	4619      	mov	r1, r3
 800835e:	f04f 0200 	mov.w	r2, #0
 8008362:	4b5b      	ldr	r3, [pc, #364]	; (80084d0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008364:	f7f7 ff84 	bl	8000270 <__adddf3>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	f107 0118 	add.w	r1, r7, #24
 8008370:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8008374:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008378:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800837c:	e01f      	b.n	80083be <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 800837e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008382:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008386:	f7f8 fa53 	bl	8000830 <__aeabi_ddiv>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8008392:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008396:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800839a:	f7f8 f91f 	bl	80005dc <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	f107 0318 	add.w	r3, r7, #24
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f7 ff5f 	bl	8000270 <__adddf3>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	f107 0118 	add.w	r1, r7, #24
 80083ba:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 80083be:	f107 0320 	add.w	r3, r7, #32
 80083c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80083c6:	4611      	mov	r1, r2
 80083c8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80083cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083d0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80083d4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80083d8:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80083dc:	f7f8 fb8e 	bl	8000afc <__aeabi_dcmpgt>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d02d      	beq.n	8008442 <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 80083e6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80083ea:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80083ee:	f7f8 fa1f 	bl	8000830 <__aeabi_ddiv>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80083fa:	f107 0318 	add.w	r3, r7, #24
 80083fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008402:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008406:	f7f8 f8e9 	bl	80005dc <__aeabi_dmul>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4610      	mov	r0, r2
 8008410:	4619      	mov	r1, r3
 8008412:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008416:	f7f8 f8e1 	bl	80005dc <__aeabi_dmul>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4610      	mov	r0, r2
 8008420:	4619      	mov	r1, r3
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8008428:	f7f7 ff22 	bl	8000270 <__adddf3>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	f107 0118 	add.w	r1, r7, #24
 8008434:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8008438:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800843c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8008440:	e01f      	b.n	8008482 <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 8008442:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008446:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800844a:	f7f8 f9f1 	bl	8000830 <__aeabi_ddiv>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8008456:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800845a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800845e:	f7f8 f8bd 	bl	80005dc <__aeabi_dmul>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4610      	mov	r0, r2
 8008468:	4619      	mov	r1, r3
 800846a:	f107 0318 	add.w	r3, r7, #24
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f7f7 fefd 	bl	8000270 <__adddf3>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	f107 0118 	add.w	r1, r7, #24
 800847e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8008482:	f107 0318 	add.w	r3, r7, #24
 8008486:	ed93 7b00 	vldr	d7, [r3]
 800848a:	eeb0 0a47 	vmov.f32	s0, s14
 800848e:	eef0 0a67 	vmov.f32	s1, s15
 8008492:	f00f ff79 	bl	8018388 <sqrt>
 8008496:	ec51 0b10 	vmov	r0, r1, d0
 800849a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800849e:	f7f8 f89d 	bl	80005dc <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	f107 0118 	add.w	r1, r7, #24
 80084aa:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 80084ae:	f107 0318 	add.w	r3, r7, #24
 80084b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084b6:	f04f 0200 	mov.w	r2, #0
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80084bc:	f7f8 fb14 	bl	8000ae8 <__aeabi_dcmpge>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d006      	beq.n	80084d4 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 80084cc:	e1ed      	b.n	80088aa <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 80084ce:	bf00      	nop
 80084d0:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 80084d4:	f107 0318 	add.w	r3, r7, #24
 80084d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084dc:	f107 0318 	add.w	r3, r7, #24
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f8 f87a 	bl	80005dc <__aeabi_dmul>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	f04f 0000 	mov.w	r0, #0
 80084f0:	49b4      	ldr	r1, [pc, #720]	; (80087c4 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 80084f2:	f7f7 febb 	bl	800026c <__aeabi_dsub>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	ec43 2b17 	vmov	d7, r2, r3
 80084fe:	eeb0 0a47 	vmov.f32	s0, s14
 8008502:	eef0 0a67 	vmov.f32	s1, s15
 8008506:	f00f ff3f 	bl	8018388 <sqrt>
 800850a:	eeb0 6a40 	vmov.f32	s12, s0
 800850e:	eef0 6a60 	vmov.f32	s13, s1
 8008512:	f107 0320 	add.w	r3, r7, #32
 8008516:	ed93 7b04 	vldr	d7, [r3, #16]
 800851a:	f107 0218 	add.w	r2, r7, #24
 800851e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008522:	f103 0110 	add.w	r1, r3, #16
 8008526:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800852a:	3310      	adds	r3, #16
 800852c:	4618      	mov	r0, r3
 800852e:	eeb0 1a47 	vmov.f32	s2, s14
 8008532:	eef0 1a67 	vmov.f32	s3, s15
 8008536:	eeb0 0a46 	vmov.f32	s0, s12
 800853a:	eef0 0a66 	vmov.f32	s1, s13
 800853e:	f003 fc45 	bl	800bdcc <rotate_LZ7ctbe0>
        x[2] = 0.0;
 8008542:	f107 0120 	add.w	r1, r7, #32
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 8008552:	f107 0318 	add.w	r3, r7, #24
 8008556:	ed93 7b00 	vldr	d7, [r3]
 800855a:	f107 0320 	add.w	r3, r7, #32
 800855e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008562:	f107 0218 	add.w	r2, r7, #24
 8008566:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800856a:	f103 0108 	add.w	r1, r3, #8
 800856e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008572:	3308      	adds	r3, #8
 8008574:	4618      	mov	r0, r3
 8008576:	eeb0 1a46 	vmov.f32	s2, s12
 800857a:	eef0 1a66 	vmov.f32	s3, s13
 800857e:	eeb0 0a47 	vmov.f32	s0, s14
 8008582:	eef0 0a67 	vmov.f32	s1, s15
 8008586:	f003 fc21 	bl	800bdcc <rotate_LZ7ctbe0>
        x[1] = 0.0;
 800858a:	f107 0120 	add.w	r1, r7, #32
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 800859a:	f107 0318 	add.w	r3, r7, #24
 800859e:	ed93 7b00 	vldr	d7, [r3]
 80085a2:	f107 0320 	add.w	r3, r7, #32
 80085a6:	ed93 6b00 	vldr	d6, [r3]
 80085aa:	f107 0218 	add.w	r2, r7, #24
 80085ae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80085b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80085b6:	4618      	mov	r0, r3
 80085b8:	eeb0 1a46 	vmov.f32	s2, s12
 80085bc:	eef0 1a66 	vmov.f32	s3, s13
 80085c0:	eeb0 0a47 	vmov.f32	s0, s14
 80085c4:	eef0 0a67 	vmov.f32	s1, s15
 80085c8:	f003 fc00 	bl	800bdcc <rotate_LZ7ctbe0>
        x[0] = 0.0;
 80085cc:	f107 0120 	add.w	r1, r7, #32
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80085e2:	e072      	b.n	80086ca <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 80085e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80085e8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	4413      	add	r3, r2
 80085f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80085fe:	4413      	add	r3, r2
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f7 ffea 	bl	80005dc <__aeabi_dmul>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	f107 0118 	add.w	r1, r7, #24
 8008610:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 8008614:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008618:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	4413      	add	r3, r2
 8008620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008624:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800862e:	4413      	add	r3, r2
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f7 ffd2 	bl	80005dc <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4690      	mov	r8, r2
 800863e:	4699      	mov	r9, r3
 8008640:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008644:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	4413      	add	r3, r2
 800864c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008650:	f107 0320 	add.w	r3, r7, #32
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 ffc0 	bl	80005dc <__aeabi_dmul>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4610      	mov	r0, r2
 8008662:	4619      	mov	r1, r3
 8008664:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800866e:	18d4      	adds	r4, r2, r3
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4640      	mov	r0, r8
 8008676:	4649      	mov	r1, r9
 8008678:	f7f7 fdf8 	bl	800026c <__aeabi_dsub>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 8008684:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008688:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	4413      	add	r3, r2
 8008690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008694:	f107 0320 	add.w	r3, r7, #32
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f7f7 ff9e 	bl	80005dc <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4610      	mov	r0, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	f107 0318 	add.w	r3, r7, #24
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 fdde 	bl	8000270 <__adddf3>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	f107 0120 	add.w	r1, r7, #32
 80086bc:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 80086c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086c4:	3b01      	subs	r3, #1
 80086c6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80086ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da88      	bge.n	80085e4 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 80086d2:	2301      	movs	r3, #1
 80086d4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80086d8:	e06c      	b.n	80087b4 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 80086da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086de:	3303      	adds	r3, #3
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80086e6:	4413      	add	r3, r2
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 80086f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80086f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	4413      	add	r3, r2
 80086fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008700:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008704:	f7f7 ff6a 	bl	80005dc <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4690      	mov	r8, r2
 800870e:	4699      	mov	r9, r3
 8008710:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008714:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	4413      	add	r3, r2
 800871c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008720:	f107 0320 	add.w	r3, r7, #32
 8008724:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008728:	f7f7 ff58 	bl	80005dc <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4610      	mov	r0, r2
 8008732:	4619      	mov	r1, r3
 8008734:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008738:	3303      	adds	r3, #3
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008740:	18d4      	adds	r4, r2, r3
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f7 fd8f 	bl	800026c <__aeabi_dsub>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 8008756:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800875a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008766:	f107 0320 	add.w	r3, r7, #32
 800876a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800876e:	f7f7 ff35 	bl	80005dc <__aeabi_dmul>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4614      	mov	r4, r2
 8008778:	461d      	mov	r5, r3
 800877a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800877e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	4413      	add	r3, r2
 8008786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800878a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800878e:	f7f7 ff25 	bl	80005dc <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fd69 	bl	8000270 <__adddf3>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	f107 0120 	add.w	r1, r7, #32
 80087a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 80087aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80087ae:	3b01      	subs	r3, #1
 80087b0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80087b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da8e      	bge.n	80086da <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 80087bc:	2302      	movs	r3, #2
 80087be:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80087c2:	e06e      	b.n	80088a2 <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 80087c4:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 80087c8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80087cc:	3306      	adds	r3, #6
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80087d4:	4413      	add	r3, r2
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 80087de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80087e2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4413      	add	r3, r2
 80087ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087ee:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80087f2:	f7f7 fef3 	bl	80005dc <__aeabi_dmul>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4690      	mov	r8, r2
 80087fc:	4699      	mov	r9, r3
 80087fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008802:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800880e:	f107 0320 	add.w	r3, r7, #32
 8008812:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008816:	f7f7 fee1 	bl	80005dc <__aeabi_dmul>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008826:	3306      	adds	r3, #6
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800882e:	18d4      	adds	r4, r2, r3
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f7 fd18 	bl	800026c <__aeabi_dsub>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 8008844:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008848:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008854:	f107 0320 	add.w	r3, r7, #32
 8008858:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800885c:	f7f7 febe 	bl	80005dc <__aeabi_dmul>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4614      	mov	r4, r2
 8008866:	461d      	mov	r5, r3
 8008868:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800886c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	4413      	add	r3, r2
 8008874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008878:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800887c:	f7f7 feae 	bl	80005dc <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4620      	mov	r0, r4
 8008886:	4629      	mov	r1, r5
 8008888:	f7f7 fcf2 	bl	8000270 <__adddf3>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	f107 0120 	add.w	r1, r7, #32
 8008894:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8008898:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800889c:	3b01      	subs	r3, #1
 800889e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80088a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	da8e      	bge.n	80087c8 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 80088aa:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 82f0 	beq.w	8008e94 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80088ba:	2300      	movs	r3, #0
 80088bc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80088c0:	e0d3      	b.n	8008a6a <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80088c8:	2300      	movs	r3, #0
 80088ca:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80088ce:	e0bd      	b.n	8008a4c <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 80088d0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80088d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80088d8:	4413      	add	r3, r2
 80088da:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 80088de:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80088e2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	18d1      	adds	r1, r2, r3
 80088ea:	f04f 0200 	mov.w	r2, #0
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 80088f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80088fa:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	4413      	add	r3, r2
 8008902:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008906:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008910:	4413      	add	r3, r2
 8008912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008916:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008920:	4413      	add	r3, r2
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fe59 	bl	80005dc <__aeabi_dmul>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4620      	mov	r0, r4
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fc9d 	bl	8000270 <__adddf3>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800893e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8008942:	00c9      	lsls	r1, r1, #3
 8008944:	4401      	add	r1, r0
 8008946:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 800894a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800894e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	4413      	add	r3, r2
 8008956:	e9d3 4500 	ldrd	r4, r5, [r3]
 800895a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800895e:	3301      	adds	r3, #1
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008966:	4413      	add	r3, r2
 8008968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800896c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008970:	3301      	adds	r3, #1
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008978:	4413      	add	r3, r2
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fe2d 	bl	80005dc <__aeabi_dmul>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f7 fc71 	bl	8000270 <__adddf3>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008996:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800899a:	00c9      	lsls	r1, r1, #3
 800899c:	4401      	add	r1, r0
 800899e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 80089a2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80089a6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	4413      	add	r3, r2
 80089ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80089b2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80089b6:	3302      	adds	r3, #2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80089be:	4413      	add	r3, r2
 80089c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089c4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80089c8:	3302      	adds	r3, #2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80089d0:	4413      	add	r3, r2
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fe01 	bl	80005dc <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4620      	mov	r0, r4
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7f7 fc45 	bl	8000270 <__adddf3>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80089ee:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80089f2:	00c9      	lsls	r1, r1, #3
 80089f4:	4401      	add	r1, r0
 80089f6:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 80089fa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	1d3a      	adds	r2, r7, #4
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	4413      	add	r3, r2
 8008a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	1d3a      	adds	r2, r7, #4
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	4413      	add	r3, r2
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8008a1e:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8008a22:	442c      	add	r4, r5
 8008a24:	f7f7 fdda 	bl	80005dc <__aeabi_dmul>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8008a30:	00e1      	lsls	r1, r4, #3
 8008a32:	4401      	add	r1, r0
 8008a34:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 8008a38:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008a3c:	3303      	adds	r3, #3
 8008a3e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8008a42:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008a46:	3301      	adds	r3, #1
 8008a48:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008a4c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	f77f af3d 	ble.w	80088d0 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 8008a56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008a5a:	3303      	adds	r3, #3
 8008a5c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008a60:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a64:	3301      	adds	r3, #1
 8008a66:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008a6a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	f77f af27 	ble.w	80088c2 <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008a80:	e049      	b.n	8008b16 <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 8008a82:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008a86:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a92:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008a96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fbe3 	bl	800026c <__aeabi_dsub>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	f107 0118 	add.w	r1, r7, #24
 8008aae:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8008ab2:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01c      	beq.n	8008af4 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	ed93 7b00 	vldr	d7, [r3]
 8008ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8008ac6:	eef0 0a67 	vmov.f32	s1, s15
 8008aca:	f003 fbf3 	bl	800c2b4 <rtIsInf>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10c      	bne.n	8008aee <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 8008ad4:	f107 0318 	add.w	r3, r7, #24
 8008ad8:	ed93 7b00 	vldr	d7, [r3]
 8008adc:	eeb0 0a47 	vmov.f32	s0, s14
 8008ae0:	eef0 0a67 	vmov.f32	s1, s15
 8008ae4:	f003 fc0a 	bl	800c2fc <rtIsNaN>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 8008af4:	f107 0318 	add.w	r3, r7, #24
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8008b00:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8008b04:	00c9      	lsls	r1, r1, #3
 8008b06:	4401      	add	r1, r0
 8008b08:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8008b0c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b10:	3301      	adds	r3, #1
 8008b12:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008b16:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	ddb1      	ble.n	8008a82 <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 8008b1e:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 8008b26:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008b2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008b2e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008b32:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8008b36:	f003 fc33 	bl	800c3a0 <svd_u3DvUgOe>
 8008b3a:	e02c      	b.n	8008b96 <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 8008b3c:	4bbc      	ldr	r3, [pc, #752]	; (8008e30 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b46:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8008b4a:	4bb9      	ldr	r3, [pc, #740]	; (8008e30 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b54:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8008b58:	4bb5      	ldr	r3, [pc, #724]	; (8008e30 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b62:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 8008b66:	2300      	movs	r3, #0
 8008b68:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008b6c:	e00f      	b.n	8008b8e <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8008b6e:	4bb0      	ldr	r3, [pc, #704]	; (8008e30 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008b78:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008b7c:	00c9      	lsls	r1, r1, #3
 8008b7e:	4401      	add	r1, r0
 8008b80:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 8008b84:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008b88:	3301      	adds	r3, #1
 8008b8a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008b8e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	ddeb      	ble.n	8008b6e <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8008b96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008b9a:	2248      	movs	r2, #72	; 0x48
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f00f fa3a 	bl	8018018 <memset>
      Ss[0] = s[0];
 8008ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8008bb0:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8008bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008bb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008bbc:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8008bc0:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8008bc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008bc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008bcc:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8008bd0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008bda:	e01e      	b.n	8008c1a <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8008bdc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8008be0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	4413      	add	r3, r2
 8008be8:	ed93 7b00 	vldr	d7, [r3]
 8008bec:	eeb0 0a47 	vmov.f32	s0, s14
 8008bf0:	eef0 0a67 	vmov.f32	s1, s15
 8008bf4:	f00f fbc8 	bl	8018388 <sqrt>
 8008bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8008bfc:	eef0 7a60 	vmov.f32	s15, s1
 8008c00:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8008c04:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 8008c10:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008c14:	3301      	adds	r3, #1
 8008c16:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008c1a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	dddc      	ble.n	8008bdc <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008c2e:	e0c0      	b.n	8008db2 <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8008c36:	2300      	movs	r3, #0
 8008c38:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008c3c:	e0aa      	b.n	8008d94 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 8008c3e:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008c42:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c46:	4413      	add	r3, r2
 8008c48:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 8008c4c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008c56:	18d1      	adds	r1, r2, r3
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 8008c64:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008c6e:	4413      	add	r3, r2
 8008c70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c74:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8008c78:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	4413      	add	r3, r2
 8008c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c84:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008c88:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	4413      	add	r3, r2
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fca2 	bl	80005dc <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008caa:	18d6      	adds	r6, r2, r3
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7f7 fadc 	bl	8000270 <__adddf3>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8008cc0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008cca:	4413      	add	r3, r2
 8008ccc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008cd0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ce2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008ce6:	3303      	adds	r3, #3
 8008ce8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	4413      	add	r3, r2
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	f7f7 fc72 	bl	80005dc <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d0a:	18d6      	adds	r6, r2, r3
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4620      	mov	r0, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	f7f7 faac 	bl	8000270 <__adddf3>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8008d20:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d2a:	4413      	add	r3, r2
 8008d2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d30:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008d34:	3302      	adds	r3, #2
 8008d36:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d42:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008d46:	3306      	adds	r3, #6
 8008d48:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fc42 	bl	80005dc <__aeabi_dmul>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4619      	mov	r1, r3
 8008d60:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d6a:	18d6      	adds	r6, r2, r3
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4620      	mov	r0, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	f7f7 fa7c 	bl	8000270 <__adddf3>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8008d80:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008d84:	3303      	adds	r3, #3
 8008d86:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8008d8a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008d94:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	f77f af50 	ble.w	8008c3e <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8008d9e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008da2:	3303      	adds	r3, #3
 8008da4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008da8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008dac:	3301      	adds	r3, #1
 8008dae:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008db2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	f77f af3a 	ble.w	8008c30 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8008dce:	e044      	b.n	8008e5a <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8008dd0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8008de0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	dc25      	bgt.n	8008e34 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8008de8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	441a      	add	r2, r3
 8008df2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008df6:	4413      	add	r3, r2
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008dfe:	4413      	add	r3, r2
 8008e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	f7f7 fe4e 	bl	8000aac <__aeabi_dcmpeq>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8008e22:	e00f      	b.n	8008e44 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8008e24:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e2e:	e009      	b.n	8008e44 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8008e30:	2001e880 	.word	0x2001e880
            }
          } else {
            kk++;
 8008e34:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008e38:	3301      	adds	r3, #1
 8008e3a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 8008e44:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0c6      	beq.n	8008dda <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8008e4c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d102      	bne.n	8008e5a <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8008e5a:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d103      	bne.n	8008e6a <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 8008e62:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	ddb2      	ble.n	8008dd0 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8008e6a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d110      	bne.n	8008e94 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 8008e72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008e76:	2248      	movs	r2, #72	; 0x48
 8008e78:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f00f f8bd 	bl	8017ffc <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 8008e82:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008e86:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008e8a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fec4 	bl	8009c1c <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008ea0:	e03d      	b.n	8008f1e <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8008ea2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008eac:	4413      	add	r3, r2
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008eb6:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008eba:	00c9      	lsls	r1, r1, #3
 8008ebc:	4401      	add	r1, r0
 8008ebe:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8008ec2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ec6:	3303      	adds	r3, #3
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ece:	4413      	add	r3, r2
 8008ed0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008ed4:	1c51      	adds	r1, r2, #1
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008ede:	00c9      	lsls	r1, r1, #3
 8008ee0:	4401      	add	r1, r0
 8008ee2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8008ee6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008eea:	3306      	adds	r3, #6
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008ef8:	1c91      	adds	r1, r2, #2
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008f02:	00c9      	lsls	r1, r1, #3
 8008f04:	4401      	add	r1, r0
 8008f06:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8008f0a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f0e:	3303      	adds	r3, #3
 8008f10:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008f14:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	ddbd      	ble.n	8008ea2 <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008f2c:	e01a      	b.n	8008f64 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8008f2e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008f32:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	4413      	add	r3, r2
 8008f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f3e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008f48:	18d4      	adds	r4, r2, r3
 8008f4a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008f4e:	f7f7 fb45 	bl	80005dc <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8008f5a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f5e:	3301      	adds	r3, #1
 8008f60:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008f64:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	dde0      	ble.n	8008f2e <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8008f72:	2300      	movs	r3, #0
 8008f74:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008f78:	e057      	b.n	800902a <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8008f7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8008f84:	4413      	add	r3, r2
 8008f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f8a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008f96:	00e4      	lsls	r4, r4, #3
 8008f98:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8008f9c:	442c      	add	r4, r5
 8008f9e:	f7f7 f965 	bl	800026c <__aeabi_dsub>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8008faa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008fae:	3301      	adds	r3, #1
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8008fb6:	4413      	add	r3, r2
 8008fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fbc:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008fca:	3401      	adds	r4, #1
 8008fcc:	00e4      	lsls	r4, r4, #3
 8008fce:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8008fd2:	442c      	add	r4, r5
 8008fd4:	f7f7 f94a 	bl	800026c <__aeabi_dsub>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8008fe0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8008fec:	4413      	add	r3, r2
 8008fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ff2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8008ff6:	3310      	adds	r3, #16
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009000:	3402      	adds	r4, #2
 8009002:	00e4      	lsls	r4, r4, #3
 8009004:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009008:	442c      	add	r4, r5
 800900a:	f7f7 f92f 	bl	800026c <__aeabi_dsub>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8009016:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800901a:	3303      	adds	r3, #3
 800901c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009020:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009024:	3301      	adds	r3, #1
 8009026:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800902a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800902e:	2b05      	cmp	r3, #5
 8009030:	dda3      	ble.n	8008f7a <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800903e:	f7f7 facd 	bl	80005dc <__aeabi_dmul>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 800904a:	2300      	movs	r3, #0
 800904c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009050:	e071      	b.n	8009136 <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009058:	2300      	movs	r3, #0
 800905a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800905e:	e061      	b.n	8009124 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8009060:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8009064:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009068:	4413      	add	r3, r2
 800906a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 800906e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009072:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	18d1      	adds	r1, r2, r3
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 800908c:	2300      	movs	r3, #0
 800908e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009092:	e039      	b.n	8009108 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 8009094:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009098:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	4413      	add	r3, r2
 80090a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090a4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80090a8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80090ac:	4413      	add	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 80090b4:	4413      	add	r3, r2
 80090b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090ba:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80090be:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80090c2:	4413      	add	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	463a      	mov	r2, r7
 80090c8:	6812      	ldr	r2, [r2, #0]
 80090ca:	4413      	add	r3, r2
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 fa84 	bl	80005dc <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4620      	mov	r0, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	f7f7 f8c8 	bl	8000270 <__adddf3>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80090e8:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80090ec:	00c9      	lsls	r1, r1, #3
 80090ee:	4401      	add	r1, r0
 80090f0:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 80090f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80090f8:	3303      	adds	r3, #3
 80090fa:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 80090fe:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009102:	3301      	adds	r3, #1
 8009104:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009108:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800910c:	2b05      	cmp	r3, #5
 800910e:	ddc1      	ble.n	8009094 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 8009110:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009114:	3303      	adds	r3, #3
 8009116:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 800911a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800911e:	3301      	adds	r3, #1
 8009120:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009124:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009128:	2b02      	cmp	r3, #2
 800912a:	dd99      	ble.n	8009060 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 800912c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009130:	3301      	adds	r3, #1
 8009132:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009136:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd89      	ble.n	8009052 <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 800913e:	2300      	movs	r3, #0
 8009140:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009144:	e01a      	b.n	800917c <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 8009146:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800914a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	4413      	add	r3, r2
 8009152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009156:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8009160:	18d4      	adds	r4, r2, r3
 8009162:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8009166:	f7f7 fa39 	bl	80005dc <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 8009172:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009176:	3301      	adds	r3, #1
 8009178:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800917c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009180:	2b08      	cmp	r3, #8
 8009182:	dde0      	ble.n	8009146 <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 800918c:	46bd      	mov	sp, r7
 800918e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009192:	bf00      	nop

08009194 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 8009194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009198:	ed2d 8b02 	vpush	{d8}
 800919c:	b0ac      	sub	sp, #176	; 0xb0
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6378      	str	r0, [r7, #52]	; 0x34
 80091a2:	6339      	str	r1, [r7, #48]	; 0x30
 80091a4:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80091a8:	ed87 1b08 	vstr	d1, [r7, #32]
 80091ac:	61fa      	str	r2, [r7, #28]
 80091ae:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80091ba:	f7f7 fa0f 	bl	80005dc <__aeabi_dmul>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80091c6:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80091ca:	2300      	movs	r3, #0
 80091cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091d0:	e021      	b.n	8009216 <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 80091d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80091da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ea:	3308      	adds	r3, #8
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	f7f7 f9f4 	bl	80005dc <__aeabi_dmul>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7f7 f838 	bl	8000270 <__adddf3>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009208:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800920c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009210:	3301      	adds	r3, #1
 8009212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800921a:	2b05      	cmp	r3, #5
 800921c:	ddd9      	ble.n	80091d2 <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 800921e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800922a:	f7f7 f9d7 	bl	80005dc <__aeabi_dmul>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009236:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 800923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009246:	f7f7 f811 	bl	800026c <__aeabi_dsub>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 8009252:	2300      	movs	r3, #0
 8009254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009258:	e01c      	b.n	8009294 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 800925a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	4413      	add	r3, r2
 8009264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800926c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	18d4      	adds	r4, r2, r3
 800927a:	4642      	mov	r2, r8
 800927c:	464b      	mov	r3, r9
 800927e:	f7f6 fff5 	bl	800026c <__aeabi_dsub>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 800928a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800928e:	3301      	adds	r3, #1
 8009290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009294:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009298:	2b05      	cmp	r3, #5
 800929a:	ddde      	ble.n	800925a <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 800929c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80092a0:	f003 f82c 	bl	800c2fc <rtIsNaN>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 80092aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80092b2:	e025      	b.n	8009300 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80092c0:	f7f7 fbfe 	bl	8000ac0 <__aeabi_dcmplt>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	4bc3      	ldr	r3, [pc, #780]	; (80095dc <UTMeanCovSqrt_C6QfB9Td+0x448>)
 80092d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80092d4:	e014      	b.n	8009300 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80092e2:	f7f7 fc0b 	bl	8000afc <__aeabi_dcmpgt>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <UTMeanCovSqrt_C6QfB9Td+0x160>
 80092ec:	f04f 0200 	mov.w	r2, #0
 80092f0:	4bbb      	ldr	r3, [pc, #748]	; (80095e0 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 80092f2:	e003      	b.n	80092fc <UTMeanCovSqrt_C6QfB9Td+0x168>
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800930a:	f7f7 f967 	bl	80005dc <__aeabi_dmul>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	3308      	adds	r3, #8
 800931a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800931e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009322:	f7f7 f95b 	bl	80005dc <__aeabi_dmul>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 800932e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009336:	f7f7 f951 	bl	80005dc <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 8009342:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 8009346:	f00f f81f 	bl	8018388 <sqrt>
 800934a:	eeb0 7a40 	vmov.f32	s14, s0
 800934e:	eef0 7a60 	vmov.f32	s15, s1
 8009352:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 8009356:	2300      	movs	r3, #0
 8009358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800935c:	e01a      	b.n	8009394 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 800935e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800936c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009370:	f7f7 f934 	bl	80005dc <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800937c:	00c9      	lsls	r1, r1, #3
 800937e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009382:	4401      	add	r1, r0
 8009384:	3948      	subs	r1, #72	; 0x48
 8009386:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800938a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800938e:	3301      	adds	r3, #1
 8009390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009398:	2b05      	cmp	r3, #5
 800939a:	dde0      	ble.n	800935e <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 800939c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80093a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 80093a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80093a8:	2202      	movs	r2, #2
 80093aa:	4619      	mov	r1, r3
 80093ac:	2005      	movs	r0, #5
 80093ae:	f005 f973 	bl	800e698 <xnrm2_7bm34mDQ>
 80093b2:	eeb0 7a40 	vmov.f32	s14, s0
 80093b6:	eef0 7a60 	vmov.f32	s15, s1
 80093ba:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 80093be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80093c2:	f04f 0200 	mov.w	r2, #0
 80093c6:	f04f 0300 	mov.w	r3, #0
 80093ca:	f7f7 fb6f 	bl	8000aac <__aeabi_dcmpeq>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 80e7 	bne.w	80095a4 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 80093d6:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80093da:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80093de:	eeb0 1a46 	vmov.f32	s2, s12
 80093e2:	eef0 1a66 	vmov.f32	s3, s13
 80093e6:	eeb0 0a47 	vmov.f32	s0, s14
 80093ea:	eef0 0a67 	vmov.f32	s1, s15
 80093ee:	f002 fe77 	bl	800c0e0 <rt_hypotd_snf>
 80093f2:	eeb0 7a40 	vmov.f32	s14, s0
 80093f6:	eef0 7a60 	vmov.f32	s15, s1
 80093fa:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 80093fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	f7f7 fb6d 	bl	8000ae8 <__aeabi_dcmpge>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d009      	beq.n	8009428 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 8009414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009418:	613a      	str	r2, [r7, #16]
 800941a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	ed97 7b04 	vldr	d7, [r7, #16]
 8009424:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 8009428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800942c:	60ba      	str	r2, [r7, #8]
 800942e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800943c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009440:	f7f7 fb3e 	bl	8000ac0 <__aeabi_dcmplt>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80a8 	beq.w	800959c <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 8009452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009456:	3301      	adds	r3, #1
 8009458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 800945c:	2301      	movs	r3, #1
 800945e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009462:	e01d      	b.n	80094a0 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 8009464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800946e:	4413      	add	r3, r2
 8009470:	3b48      	subs	r3, #72	; 0x48
 8009472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	4b5a      	ldr	r3, [pc, #360]	; (80095e4 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800947c:	f7f7 f8ae 	bl	80005dc <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009488:	00c9      	lsls	r1, r1, #3
 800948a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800948e:	4401      	add	r1, r0
 8009490:	3948      	subs	r1, #72	; 0x48
 8009492:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 8009496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800949a:	3301      	adds	r3, #1
 800949c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094a4:	2b05      	cmp	r3, #5
 80094a6:	dddd      	ble.n	8009464 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 80094a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	4b4c      	ldr	r3, [pc, #304]	; (80095e4 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 80094b2:	f7f7 f893 	bl	80005dc <__aeabi_dmul>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 80094be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	4b47      	ldr	r3, [pc, #284]	; (80095e4 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 80094c8:	f7f7 f888 	bl	80005dc <__aeabi_dmul>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 80094d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094d8:	603a      	str	r2, [r7, #0]
 80094da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094de:	607b      	str	r3, [r7, #4]
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80094e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094ec:	f7f7 fae8 	bl	8000ac0 <__aeabi_dcmplt>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <UTMeanCovSqrt_C6QfB9Td+0x36a>
 80094f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094fa:	2b13      	cmp	r3, #19
 80094fc:	dda9      	ble.n	8009452 <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 80094fe:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 8009502:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009506:	2202      	movs	r2, #2
 8009508:	4619      	mov	r1, r3
 800950a:	2005      	movs	r0, #5
 800950c:	f005 f8c4 	bl	800e698 <xnrm2_7bm34mDQ>
 8009510:	eeb0 7a40 	vmov.f32	s14, s0
 8009514:	eef0 7a60 	vmov.f32	s15, s1
 8009518:	eeb0 1a47 	vmov.f32	s2, s14
 800951c:	eef0 1a67 	vmov.f32	s3, s15
 8009520:	eeb0 0a48 	vmov.f32	s0, s16
 8009524:	eef0 0a68 	vmov.f32	s1, s17
 8009528:	f002 fdda 	bl	800c0e0 <rt_hypotd_snf>
 800952c:	eeb0 7a40 	vmov.f32	s14, s0
 8009530:	eef0 7a60 	vmov.f32	s15, s1
 8009534:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 8009538:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	f7f7 fad0 	bl	8000ae8 <__aeabi_dcmpge>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d006      	beq.n	800955c <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 800954e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009552:	4692      	mov	sl, r2
 8009554:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8009558:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 800955c:	2300      	movs	r3, #0
 800955e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009562:	e010      	b.n	8009586 <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 8009564:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009570:	f7f7 f834 	bl	80005dc <__aeabi_dmul>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 800957c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009580:	3301      	adds	r3, #1
 8009582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009586:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800958a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800958e:	429a      	cmp	r2, r3
 8009590:	dbe8      	blt.n	8009564 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 8009592:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009596:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800959a:	e003      	b.n	80095a4 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 800959c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 80095a4:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80095a8:	eeb0 0a47 	vmov.f32	s0, s14
 80095ac:	eef0 0a67 	vmov.f32	s1, s15
 80095b0:	f002 fea4 	bl	800c2fc <rtIsNaN>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d12b      	bne.n	8009612 <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 80095ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80095be:	f04f 0200 	mov.w	r2, #0
 80095c2:	f04f 0300 	mov.w	r3, #0
 80095c6:	f7f7 fa7b 	bl	8000ac0 <__aeabi_dcmplt>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	4b01      	ldr	r3, [pc, #4]	; (80095dc <UTMeanCovSqrt_C6QfB9Td+0x448>)
 80095d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80095da:	e01a      	b.n	8009612 <UTMeanCovSqrt_C6QfB9Td+0x47e>
 80095dc:	bff00000 	.word	0xbff00000
 80095e0:	3ff00000 	.word	0x3ff00000
 80095e4:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 80095e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80095ec:	f04f 0200 	mov.w	r2, #0
 80095f0:	f04f 0300 	mov.w	r3, #0
 80095f4:	f7f7 fa82 	bl	8000afc <__aeabi_dcmpgt>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <UTMeanCovSqrt_C6QfB9Td+0x472>
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	4b99      	ldr	r3, [pc, #612]	; (8009868 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 8009604:	e003      	b.n	800960e <UTMeanCovSqrt_C6QfB9Td+0x47a>
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	f04f 0300 	mov.w	r3, #0
 800960e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 8009612:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	4b93      	ldr	r3, [pc, #588]	; (8009868 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800961c:	f7f7 fa46 	bl	8000aac <__aeabi_dcmpeq>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d021      	beq.n	800966a <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 8009626:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800962a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800962e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009636:	4618      	mov	r0, r3
 8009638:	ed97 1b08 	vldr	d1, [r7, #32]
 800963c:	eeb0 0a47 	vmov.f32	s0, s14
 8009640:	eef0 0a67 	vmov.f32	s1, s15
 8009644:	f002 fbc2 	bl	800bdcc <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 8009648:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800964c:	f00e fe9c 	bl	8018388 <sqrt>
 8009650:	ec51 0b10 	vmov	r0, r1, d0
 8009654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009658:	f7f6 ffc0 	bl	80005dc <__aeabi_dmul>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009664:	e9c1 2300 	strd	r2, r3, [r1]
 8009668:	e016      	b.n	8009698 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 800966a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800966e:	ed97 0b08 	vldr	d0, [r7, #32]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f8fa 	bl	800986c <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 8009678:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800967c:	f00e fe84 	bl	8018388 <sqrt>
 8009680:	ec51 0b10 	vmov	r0, r1, d0
 8009684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009688:	f7f6 ffa8 	bl	80005dc <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009694:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800969e:	2300      	movs	r3, #0
 80096a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096a4:	e054      	b.n	8009750 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 80096a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80096b0:	4413      	add	r3, r2
 80096b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80096c0:	00e4      	lsls	r4, r4, #3
 80096c2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80096c6:	442c      	add	r4, r5
 80096c8:	f7f6 fdd0 	bl	800026c <__aeabi_dsub>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 80096d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096d8:	3301      	adds	r3, #1
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80096e0:	4413      	add	r3, r2
 80096e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	3308      	adds	r3, #8
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80096f2:	3401      	adds	r4, #1
 80096f4:	00e4      	lsls	r4, r4, #3
 80096f6:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80096fa:	442c      	add	r4, r5
 80096fc:	f7f6 fdb6 	bl	800026c <__aeabi_dsub>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 8009708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800970c:	3302      	adds	r3, #2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009714:	4413      	add	r3, r2
 8009716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	3310      	adds	r3, #16
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009726:	3402      	adds	r4, #2
 8009728:	00e4      	lsls	r4, r4, #3
 800972a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800972e:	442c      	add	r4, r5
 8009730:	f7f6 fd9c 	bl	800026c <__aeabi_dsub>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 800973c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009740:	3303      	adds	r3, #3
 8009742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 8009746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800974a:	3301      	adds	r3, #1
 800974c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009754:	2b05      	cmp	r3, #5
 8009756:	dda6      	ble.n	80096a6 <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 8009758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800975c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009760:	f7f6 ff3c 	bl	80005dc <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 800976c:	2300      	movs	r3, #0
 800976e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009772:	e06c      	b.n	800984e <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 8009774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800977e:	4413      	add	r3, r2
 8009780:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8009784:	f04f 0200 	mov.w	r2, #0
 8009788:	f04f 0300 	mov.w	r3, #0
 800978c:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8009796:	2300      	movs	r3, #0
 8009798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800979c:	e037      	b.n	800980e <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 800979e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80097a8:	4413      	add	r3, r2
 80097aa:	3b60      	subs	r3, #96	; 0x60
 80097ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80097b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80097b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097b8:	4413      	add	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80097c0:	4413      	add	r3, r2
 80097c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f6 ff02 	bl	80005dc <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4620      	mov	r0, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	f7f6 fd46 	bl	8000270 <__adddf3>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097ec:	00c9      	lsls	r1, r1, #3
 80097ee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80097f2:	4401      	add	r1, r0
 80097f4:	3960      	subs	r1, #96	; 0x60
 80097f6:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 80097fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097fe:	3303      	adds	r3, #3
 8009800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 8009804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009808:	3301      	adds	r3, #1
 800980a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800980e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009812:	2b05      	cmp	r3, #5
 8009814:	ddc3      	ble.n	800979e <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 8009816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009820:	4413      	add	r3, r2
 8009822:	3b60      	subs	r3, #96	; 0x60
 8009824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800982c:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8009830:	00e4      	lsls	r4, r4, #3
 8009832:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8009836:	442c      	add	r4, r5
 8009838:	f7f6 fed0 	bl	80005dc <__aeabi_dmul>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 8009844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009848:	3301      	adds	r3, #1
 800984a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800984e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009852:	2b02      	cmp	r3, #2
 8009854:	dd8e      	ble.n	8009774 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	37b0      	adds	r7, #176	; 0xb0
 800985c:	46bd      	mov	sp, r7
 800985e:	ecbd 8b02 	vpop	{d8}
 8009862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009866:	bf00      	nop
 8009868:	3ff00000 	.word	0x3ff00000

0800986c <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 800986c:	b5b0      	push	{r4, r5, r7, lr}
 800986e:	b090      	sub	sp, #64	; 0x40
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	f7f7 f909 	bl	8000aac <__aeabi_dcmpeq>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 80098a0:	2302      	movs	r3, #2
 80098a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098a6:	e065      	b.n	8009974 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098b2:	f7f6 ffbd 	bl	8000830 <__aeabi_ddiv>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 80098ca:	f04f 0200 	mov.w	r2, #0
 80098ce:	4b5c      	ldr	r3, [pc, #368]	; (8009a40 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80098d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098d4:	f7f7 f908 	bl	8000ae8 <__aeabi_dcmpge>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80098e4:	e046      	b.n	8009974 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 80098e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80098ee:	f7f6 fe75 	bl	80005dc <__aeabi_dmul>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	f04f 0000 	mov.w	r0, #0
 80098fa:	4951      	ldr	r1, [pc, #324]	; (8009a40 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80098fc:	f7f6 fcb6 	bl	800026c <__aeabi_dsub>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	ec43 2b17 	vmov	d7, r2, r3
 8009908:	eeb0 0a47 	vmov.f32	s0, s14
 800990c:	eef0 0a67 	vmov.f32	s1, s15
 8009910:	f00e fd3a 	bl	8018388 <sqrt>
 8009914:	eeb0 7a40 	vmov.f32	s14, s0
 8009918:	eef0 7a60 	vmov.f32	s15, s1
 800991c:	f107 0218 	add.w	r2, r7, #24
 8009920:	f107 0110 	add.w	r1, r7, #16
 8009924:	f107 0320 	add.w	r3, r7, #32
 8009928:	4618      	mov	r0, r3
 800992a:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800992e:	eeb0 0a47 	vmov.f32	s0, s14
 8009932:	eef0 0a67 	vmov.f32	s1, s15
 8009936:	f002 fa49 	bl	800bdcc <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009940:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009944:	f7f6 fe4a 	bl	80005dc <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4614      	mov	r4, r2
 800994e:	461d      	mov	r5, r3
 8009950:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	f7f6 fe3e 	bl	80005dc <__aeabi_dmul>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fc80 	bl	800026c <__aeabi_dsub>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 8009974:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009978:	68f9      	ldr	r1, [r7, #12]
 800997a:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 800997e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009982:	2b00      	cmp	r3, #0
 8009984:	d057      	beq.n	8009a36 <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 8009986:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800998a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800998e:	f7f6 fe25 	bl	80005dc <__aeabi_dmul>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4614      	mov	r4, r2
 8009998:	461d      	mov	r5, r3
 800999a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800999e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099a2:	f7f6 fe1b 	bl	80005dc <__aeabi_dmul>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f6 fc5d 	bl	800026c <__aeabi_dsub>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 80099ba:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80099be:	f002 fc79 	bl	800c2b4 <rtIsInf>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11d      	bne.n	8009a04 <cholUpdateFactor_HBMX5a5h+0x198>
 80099c8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80099cc:	f002 fc96 	bl	800c2fc <rtIsNaN>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d116      	bne.n	8009a04 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 80099d6:	f04f 0200 	mov.w	r2, #0
 80099da:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 80099dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 80099e0:	f04f 0200 	mov.w	r2, #0
 80099e4:	f04f 0300 	mov.w	r3, #0
 80099e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80099ec:	f7f7 f85e 	bl	8000aac <__aeabi_dcmpeq>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d110      	bne.n	8009a18 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	633b      	str	r3, [r7, #48]	; 0x30
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 8009a02:	e009      	b.n	8009a18 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 8009a18:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009a1c:	f00e fcb4 	bl	8018388 <sqrt>
 8009a20:	ec51 0b10 	vmov	r0, r1, d0
 8009a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a28:	f7f6 fdd8 	bl	80005dc <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	68f9      	ldr	r1, [r7, #12]
 8009a32:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 8009a36:	bf00      	nop
 8009a38:	3740      	adds	r7, #64	; 0x40
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	3ff00000 	.word	0x3ff00000
 8009a44:	2001e880 	.word	0x2001e880

08009a48 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 8009a48:	b5b0      	push	{r4, r5, r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	ed87 0b04 	vstr	d0, [r7, #16]
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a62:	f7f7 f837 	bl	8000ad4 <__aeabi_dcmple>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d020      	beq.n	8009aae <look1_binlxpw+0x66>
    iLeft = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a7a:	f7f6 fbf7 	bl	800026c <__aeabi_dsub>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4614      	mov	r4, r2
 8009a84:	461d      	mov	r5, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fbea 	bl	800026c <__aeabi_dsub>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fec6 	bl	8000830 <__aeabi_ddiv>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8009aac:	e087      	b.n	8009bbe <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009abe:	f7f6 ffff 	bl	8000ac0 <__aeabi_dcmplt>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d04b      	beq.n	8009b60 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	085b      	lsrs	r3, r3, #1
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 8009ad6:	e016      	b.n	8009b06 <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ae8:	f7f6 ffea 	bl	8000ac0 <__aeabi_dcmplt>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
 8009af6:	e001      	b.n	8009afc <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8009afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	4413      	add	r3, r2
 8009b02:	085b      	lsrs	r3, r3, #1
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 8009b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d8e3      	bhi.n	8009ad8 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	4413      	add	r3, r2
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009b20:	f7f6 fba4 	bl	800026c <__aeabi_dsub>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4614      	mov	r4, r2
 8009b2a:	461d      	mov	r5, r3
 8009b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2e:	3301      	adds	r3, #1
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 fb91 	bl	800026c <__aeabi_dsub>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fe6d 	bl	8000830 <__aeabi_ddiv>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8009b5e:	e02e      	b.n	8009bbe <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009b7c:	f7f6 fb76 	bl	800026c <__aeabi_dsub>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4614      	mov	r4, r2
 8009b86:	461d      	mov	r5, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	00db      	lsls	r3, r3, #3
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fb61 	bl	800026c <__aeabi_dsub>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7f6 fe3d 	bl	8000830 <__aeabi_ddiv>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009be0:	f7f6 fb44 	bl	800026c <__aeabi_dsub>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4610      	mov	r0, r2
 8009bea:	4619      	mov	r1, r3
 8009bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bf0:	f7f6 fcf4 	bl	80005dc <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c00:	f7f6 fb36 	bl	8000270 <__adddf3>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	ec43 2b17 	vmov	d7, r2, r3
}
 8009c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8009c10:	eef0 0a67 	vmov.f32	s1, s15
 8009c14:	3738      	adds	r7, #56	; 0x38
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c1c <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 8009c1c:	b5b0      	push	{r4, r5, r7, lr}
 8009c1e:	b0c0      	sub	sp, #256	; 0x100
 8009c20:	af04      	add	r7, sp, #16
 8009c22:	6578      	str	r0, [r7, #84]	; 0x54
 8009c24:	6539      	str	r1, [r7, #80]	; 0x50
 8009c26:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 8009c28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009c2c:	2248      	movs	r2, #72	; 0x48
 8009c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c30:	4618      	mov	r0, r3
 8009c32:	f00e f9e3 	bl	8017ffc <memcpy>
  tau_idx_0 = 0.0;
 8009c36:	f04f 0200 	mov.w	r2, #0
 8009c3a:	f04f 0300 	mov.w	r3, #0
 8009c3e:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 8009c72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009c76:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 8009c7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009c7e:	2202      	movs	r2, #2
 8009c80:	4619      	mov	r1, r3
 8009c82:	2002      	movs	r0, #2
 8009c84:	f004 ffc0 	bl	800ec08 <xnrm2_xDOlDEtw>
 8009c88:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c98:	f7f6 ff08 	bl	8000aac <__aeabi_dcmpeq>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 8172 	bne.w	8009f88 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 8009ca4:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8009ca8:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 8009cac:	eeb0 0a47 	vmov.f32	s0, s14
 8009cb0:	eef0 0a67 	vmov.f32	s1, s15
 8009cb4:	f002 fa14 	bl	800c0e0 <rt_hypotd_snf>
 8009cb8:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 8009cbc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	f7f6 ff0e 	bl	8000ae8 <__aeabi_dcmpge>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 8009cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 8009ce6:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8009cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009cf2:	f04f 0200 	mov.w	r2, #0
 8009cf6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fedf 	bl	8000ac0 <__aeabi_dcmplt>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 80f1 	beq.w	8009eec <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 8009d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d14:	3301      	adds	r3, #1
 8009d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d20:	e01f      	b.n	8009d62 <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 8009d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009d2c:	4413      	add	r3, r2
 8009d2e:	3b80      	subs	r3, #128	; 0x80
 8009d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	4bc9      	ldr	r3, [pc, #804]	; (800a060 <qr_5a2P8Gh6+0x444>)
 8009d3a:	f7f6 fc4f 	bl	80005dc <__aeabi_dmul>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009d50:	4413      	add	r3, r2
 8009d52:	3b80      	subs	r3, #128	; 0x80
 8009d54:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8009d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	dddb      	ble.n	8009d22 <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 8009d6a:	f04f 0200 	mov.w	r2, #0
 8009d6e:	4bbc      	ldr	r3, [pc, #752]	; (800a060 <qr_5a2P8Gh6+0x444>)
 8009d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d74:	f7f6 fc32 	bl	80005dc <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 8009d80:	f04f 0200 	mov.w	r2, #0
 8009d84:	4bb6      	ldr	r3, [pc, #728]	; (800a060 <qr_5a2P8Gh6+0x444>)
 8009d86:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009d8a:	f7f6 fc27 	bl	80005dc <__aeabi_dmul>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8009d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009da4:	647b      	str	r3, [r7, #68]	; 0x44
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009dae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009db2:	f7f6 fe85 	bl	8000ac0 <__aeabi_dcmplt>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <qr_5a2P8Gh6+0x1a8>
 8009dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009dc0:	2b13      	cmp	r3, #19
 8009dc2:	dda5      	ble.n	8009d10 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 8009dc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009dc8:	2202      	movs	r2, #2
 8009dca:	4619      	mov	r1, r3
 8009dcc:	2002      	movs	r0, #2
 8009dce:	f004 ff1b 	bl	800ec08 <xnrm2_xDOlDEtw>
 8009dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8009dd6:	eef0 7a60 	vmov.f32	s15, s1
 8009dda:	eeb0 1a47 	vmov.f32	s2, s14
 8009dde:	eef0 1a67 	vmov.f32	s3, s15
 8009de2:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8009de6:	f002 f97b 	bl	800c0e0 <rt_hypotd_snf>
 8009dea:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 8009dee:	f04f 0200 	mov.w	r2, #0
 8009df2:	f04f 0300 	mov.w	r3, #0
 8009df6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009dfa:	f7f6 fe75 	bl	8000ae8 <__aeabi_dcmpge>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d009      	beq.n	8009e18 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009e14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 8009e18:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e20:	f7f6 fa24 	bl	800026c <__aeabi_dsub>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009e30:	f7f6 fcfe 	bl	8000830 <__aeabi_ddiv>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 8009e3c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009e40:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8009e44:	f7f6 fa12 	bl	800026c <__aeabi_dsub>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	f04f 0000 	mov.w	r0, #0
 8009e50:	4984      	ldr	r1, [pc, #528]	; (800a064 <qr_5a2P8Gh6+0x448>)
 8009e52:	f7f6 fced 	bl	8000830 <__aeabi_ddiv>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e64:	e01e      	b.n	8009ea4 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 8009e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009e70:	4413      	add	r3, r2
 8009e72:	3b80      	subs	r3, #128	; 0x80
 8009e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e78:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009e7c:	f7f6 fbae 	bl	80005dc <__aeabi_dmul>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4610      	mov	r0, r2
 8009e86:	4619      	mov	r1, r3
 8009e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009e92:	4413      	add	r3, r2
 8009e94:	3b80      	subs	r3, #128	; 0x80
 8009e96:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 8009e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	dddc      	ble.n	8009e66 <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009eb2:	e010      	b.n	8009ed6 <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8009ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ec0:	f7f6 fb8c 	bl	80005dc <__aeabi_dmul>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 8009ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ed6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009eda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	dbe8      	blt.n	8009eb4 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 8009ee2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009ee6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8009eea:	e04d      	b.n	8009f88 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 8009eec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ef4:	f7f6 f9ba 	bl	800026c <__aeabi_dsub>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4610      	mov	r0, r2
 8009efe:	4619      	mov	r1, r3
 8009f00:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009f04:	f7f6 fc94 	bl	8000830 <__aeabi_ddiv>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 8009f10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009f14:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009f18:	f7f6 f9a8 	bl	800026c <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	f04f 0000 	mov.w	r0, #0
 8009f24:	494f      	ldr	r1, [pc, #316]	; (800a064 <qr_5a2P8Gh6+0x448>)
 8009f26:	f7f6 fc83 	bl	8000830 <__aeabi_ddiv>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 8009f32:	2301      	movs	r3, #1
 8009f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f38:	e01e      	b.n	8009f78 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 8009f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009f44:	4413      	add	r3, r2
 8009f46:	3b80      	subs	r3, #128	; 0x80
 8009f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f4c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009f50:	f7f6 fb44 	bl	80005dc <__aeabi_dmul>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009f66:	4413      	add	r3, r2
 8009f68:	3b80      	subs	r3, #128	; 0x80
 8009f6a:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 8009f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f72:	3301      	adds	r3, #1
 8009f74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	dddc      	ble.n	8009f3a <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 8009f80:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009f84:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	4b35      	ldr	r3, [pc, #212]	; (800a064 <qr_5a2P8Gh6+0x448>)
 8009f8e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	f04f 0300 	mov.w	r3, #0
 8009f9a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009f9e:	f7f6 fd85 	bl	8000aac <__aeabi_dcmpeq>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f040 8081 	bne.w	800a0ac <qr_5a2P8Gh6+0x490>
    knt = 3;
 8009faa:	2303      	movs	r3, #3
 8009fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009fb6:	e009      	b.n	8009fcc <qr_5a2P8Gh6+0x3b0>
      knt--;
 8009fb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 8009fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 8009fcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dd11      	ble.n	8009ff8 <qr_5a2P8Gh6+0x3dc>
 8009fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009fde:	4413      	add	r3, r2
 8009fe0:	3b80      	subs	r3, #128	; 0x80
 8009fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	f04f 0300 	mov.w	r3, #0
 8009fee:	f7f6 fd5d 	bl	8000aac <__aeabi_dcmpeq>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1df      	bne.n	8009fb8 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 8009ffe:	2300      	movs	r3, #0
 800a000:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800a004:	e049      	b.n	800a09a <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800a006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a00a:	4613      	mov	r3, r2
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	4413      	add	r3, r2
 800a010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 800a014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 800a022:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a02a:	441a      	add	r2, r3
 800a02c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a030:	4293      	cmp	r3, r2
 800a032:	da1f      	bge.n	800a074 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 800a034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a038:	00db      	lsls	r3, r3, #3
 800a03a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a03e:	4413      	add	r3, r2
 800a040:	3b80      	subs	r3, #128	; 0x80
 800a042:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	f7f6 fd2d 	bl	8000aac <__aeabi_dcmpeq>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d107      	bne.n	800a068 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 800a058:	2301      	movs	r3, #1
 800a05a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a05e:	e011      	b.n	800a084 <qr_5a2P8Gh6+0x468>
 800a060:	7c900000 	.word	0x7c900000
 800a064:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800a068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a06c:	3301      	adds	r3, #1
 800a06e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a072:	e007      	b.n	800a084 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 800a074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a078:	3b01      	subs	r3, #1
 800a07a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 800a07e:	2302      	movs	r3, #2
 800a080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800a084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d0c7      	beq.n	800a01c <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 800a08c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a090:	2b01      	cmp	r3, #1
 800a092:	d102      	bne.n	800a09a <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 800a094:	2301      	movs	r3, #1
 800a096:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800a09a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <qr_5a2P8Gh6+0x49c>
 800a0a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dcad      	bgt.n	800a006 <qr_5a2P8Gh6+0x3ea>
 800a0aa:	e005      	b.n	800a0b8 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800a0b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dd29      	ble.n	800a114 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 800a0c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a0c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a0da:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a0de:	f004 f94f 	bl	800e380 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 800a0e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a0f6:	2304      	movs	r3, #4
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	4613      	mov	r3, r2
 800a102:	2201      	movs	r2, #1
 800a104:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800a108:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a10c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a110:	f004 fa3f 	bl	800e592 <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 800a114:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a118:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 800a11c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a120:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 800a124:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a128:	2206      	movs	r2, #6
 800a12a:	4619      	mov	r1, r3
 800a12c:	2001      	movs	r0, #1
 800a12e:	f004 fd6b 	bl	800ec08 <xnrm2_xDOlDEtw>
 800a132:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a142:	f7f6 fcb3 	bl	8000aac <__aeabi_dcmpeq>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 8170 	bne.w	800a42e <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 800a14e:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800a152:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800a156:	eeb0 0a47 	vmov.f32	s0, s14
 800a15a:	eef0 0a67 	vmov.f32	s1, s15
 800a15e:	f001 ffbf 	bl	800c0e0 <rt_hypotd_snf>
 800a162:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 800a166:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	f7f6 fcb9 	bl	8000ae8 <__aeabi_dcmpge>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 800a17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a18c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800a190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a194:	633b      	str	r3, [r7, #48]	; 0x30
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a19e:	637b      	str	r3, [r7, #52]	; 0x34
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a1a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a1ac:	f7f6 fc88 	bl	8000ac0 <__aeabi_dcmplt>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 80ef 	beq.w	800a396 <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800a1be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a1c8:	2305      	movs	r3, #5
 800a1ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1ce:	e01f      	b.n	800a210 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800a1d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a1da:	4413      	add	r3, r2
 800a1dc:	3b80      	subs	r3, #128	; 0x80
 800a1de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1e2:	f04f 0200 	mov.w	r2, #0
 800a1e6:	4bc9      	ldr	r3, [pc, #804]	; (800a50c <qr_5a2P8Gh6+0x8f0>)
 800a1e8:	f7f6 f9f8 	bl	80005dc <__aeabi_dmul>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a1fe:	4413      	add	r3, r2
 800a200:	3b80      	subs	r3, #128	; 0x80
 800a202:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a20a:	3301      	adds	r3, #1
 800a20c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a214:	2b05      	cmp	r3, #5
 800a216:	dddb      	ble.n	800a1d0 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	4bbb      	ldr	r3, [pc, #748]	; (800a50c <qr_5a2P8Gh6+0x8f0>)
 800a21e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a222:	f7f6 f9db 	bl	80005dc <__aeabi_dmul>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	4bb6      	ldr	r3, [pc, #728]	; (800a50c <qr_5a2P8Gh6+0x8f0>)
 800a234:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a238:	f7f6 f9d0 	bl	80005dc <__aeabi_dmul>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800a244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a248:	62bb      	str	r3, [r7, #40]	; 0x28
 800a24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a254:	f04f 0200 	mov.w	r2, #0
 800a258:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a25c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a260:	f7f6 fc2e 	bl	8000ac0 <__aeabi_dcmplt>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <qr_5a2P8Gh6+0x656>
 800a26a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a26e:	2b13      	cmp	r3, #19
 800a270:	dda5      	ble.n	800a1be <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800a272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a276:	2206      	movs	r2, #6
 800a278:	4619      	mov	r1, r3
 800a27a:	2001      	movs	r0, #1
 800a27c:	f004 fcc4 	bl	800ec08 <xnrm2_xDOlDEtw>
 800a280:	eeb0 7a40 	vmov.f32	s14, s0
 800a284:	eef0 7a60 	vmov.f32	s15, s1
 800a288:	eeb0 1a47 	vmov.f32	s2, s14
 800a28c:	eef0 1a67 	vmov.f32	s3, s15
 800a290:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800a294:	f001 ff24 	bl	800c0e0 <rt_hypotd_snf>
 800a298:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800a29c:	f04f 0200 	mov.w	r2, #0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a2a8:	f7f6 fc1e 	bl	8000ae8 <__aeabi_dcmpge>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800a2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a2c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800a2c6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a2ca:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a2ce:	f7f5 ffcd 	bl	800026c <__aeabi_dsub>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	4619      	mov	r1, r3
 800a2da:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a2de:	f7f6 faa7 	bl	8000830 <__aeabi_ddiv>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800a2ea:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a2ee:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800a2f2:	f7f5 ffbb 	bl	800026c <__aeabi_dsub>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	f04f 0000 	mov.w	r0, #0
 800a2fe:	4984      	ldr	r1, [pc, #528]	; (800a510 <qr_5a2P8Gh6+0x8f4>)
 800a300:	f7f6 fa96 	bl	8000830 <__aeabi_ddiv>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a30c:	2305      	movs	r3, #5
 800a30e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a312:	e01c      	b.n	800a34e <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 800a314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a31e:	4413      	add	r3, r2
 800a320:	3b80      	subs	r3, #128	; 0x80
 800a322:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a326:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a32a:	f7f6 f957 	bl	80005dc <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a336:	00c9      	lsls	r1, r1, #3
 800a338:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800a33c:	4401      	add	r1, r0
 800a33e:	3980      	subs	r1, #128	; 0x80
 800a340:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a348:	3301      	adds	r3, #1
 800a34a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a34e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a352:	2b05      	cmp	r3, #5
 800a354:	ddde      	ble.n	800a314 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a356:	2300      	movs	r3, #0
 800a358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a35c:	e010      	b.n	800a380 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 800a35e:	f04f 0200 	mov.w	r2, #0
 800a362:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a366:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a36a:	f7f6 f937 	bl	80005dc <__aeabi_dmul>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800a376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a37a:	3301      	adds	r3, #1
 800a37c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a380:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a388:	429a      	cmp	r2, r3
 800a38a:	dbe8      	blt.n	800a35e <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 800a38c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a390:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800a394:	e04b      	b.n	800a42e <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800a396:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a39a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a39e:	f7f5 ff65 	bl	800026c <__aeabi_dsub>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a3ae:	f7f6 fa3f 	bl	8000830 <__aeabi_ddiv>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800a3ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a3be:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a3c2:	f7f5 ff53 	bl	800026c <__aeabi_dsub>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	f04f 0000 	mov.w	r0, #0
 800a3ce:	4950      	ldr	r1, [pc, #320]	; (800a510 <qr_5a2P8Gh6+0x8f4>)
 800a3d0:	f7f6 fa2e 	bl	8000830 <__aeabi_ddiv>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800a3dc:	2305      	movs	r3, #5
 800a3de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3e2:	e01c      	b.n	800a41e <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800a3e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a3ee:	4413      	add	r3, r2
 800a3f0:	3b80      	subs	r3, #128	; 0x80
 800a3f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3f6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a3fa:	f7f6 f8ef 	bl	80005dc <__aeabi_dmul>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a406:	00c9      	lsls	r1, r1, #3
 800a408:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800a40c:	4401      	add	r1, r0
 800a40e:	3980      	subs	r1, #128	; 0x80
 800a410:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800a414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a418:	3301      	adds	r3, #1
 800a41a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a41e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a422:	2b05      	cmp	r3, #5
 800a424:	ddde      	ble.n	800a3e4 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800a426:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a42a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 800a42e:	f04f 0200 	mov.w	r2, #0
 800a432:	4b37      	ldr	r3, [pc, #220]	; (800a510 <qr_5a2P8Gh6+0x8f4>)
 800a434:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800a438:	f04f 0200 	mov.w	r2, #0
 800a43c:	f04f 0300 	mov.w	r3, #0
 800a440:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a444:	f7f6 fb32 	bl	8000aac <__aeabi_dcmpeq>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d162      	bne.n	800a514 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 800a44e:	2302      	movs	r3, #2
 800a450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800a454:	2305      	movs	r3, #5
 800a456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a45a:	e009      	b.n	800a470 <qr_5a2P8Gh6+0x854>
      knt--;
 800a45c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a460:	3b01      	subs	r3, #1
 800a462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800a466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a46a:	3b01      	subs	r3, #1
 800a46c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800a470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a474:	2b00      	cmp	r3, #0
 800a476:	dd11      	ble.n	800a49c <qr_5a2P8Gh6+0x880>
 800a478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a482:	4413      	add	r3, r2
 800a484:	3b80      	subs	r3, #128	; 0x80
 800a486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a48a:	f04f 0200 	mov.w	r2, #0
 800a48e:	f04f 0300 	mov.w	r3, #0
 800a492:	f7f6 fb0b 	bl	8000aac <__aeabi_dcmpeq>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1df      	bne.n	800a45c <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800a4a2:	2307      	movs	r3, #7
 800a4a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 800a4ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4b2:	3306      	adds	r3, #6
 800a4b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	dc1b      	bgt.n	800a4f4 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 800a4bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3b80      	subs	r3, #128	; 0x80
 800a4ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	f04f 0300 	mov.w	r3, #0
 800a4d6:	f7f6 fae9 	bl	8000aac <__aeabi_dcmpeq>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4e6:	e00b      	b.n	800a500 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800a4e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4f2:	e005      	b.n	800a500 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800a500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0cf      	beq.n	800a4a8 <qr_5a2P8Gh6+0x88c>
 800a508:	e00a      	b.n	800a520 <qr_5a2P8Gh6+0x904>
 800a50a:	bf00      	nop
 800a50c:	7c900000 	.word	0x7c900000
 800a510:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800a520:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd29      	ble.n	800a57c <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800a528:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a52c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a530:	9302      	str	r3, [sp, #8]
 800a532:	2305      	movs	r3, #5
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	2308      	movs	r3, #8
 800a53e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a542:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a546:	f003 ff1b 	bl	800e380 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800a54a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a54e:	623b      	str	r3, [r7, #32]
 800a550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a554:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
 800a55a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a55e:	2308      	movs	r3, #8
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4613      	mov	r3, r2
 800a56a:	2205      	movs	r2, #5
 800a56c:	ed97 0b08 	vldr	d0, [r7, #32]
 800a570:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a574:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a578:	f004 f80b 	bl	800e592 <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 800a57c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a580:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800a584:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a588:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a58a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800a58e:	2301      	movs	r3, #1
 800a590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a594:	e00f      	b.n	800a5b6 <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800a596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a59e:	18d1      	adds	r1, r2, r3
 800a5a0:	f04f 0200 	mov.w	r2, #0
 800a5a4:	f04f 0300 	mov.w	r3, #0
 800a5a8:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800a5ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	ddeb      	ble.n	800a596 <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5d0:	e016      	b.n	800a600 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800a5d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5d6:	3303      	adds	r3, #3
 800a5d8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a5dc:	3203      	adds	r2, #3
 800a5de:	00d2      	lsls	r2, r2, #3
 800a5e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a5e2:	4411      	add	r1, r2
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a5ea:	4413      	add	r3, r2
 800a5ec:	3b80      	subs	r3, #128	; 0x80
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a5f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a604:	2b01      	cmp	r3, #1
 800a606:	dde4      	ble.n	800a5d2 <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 800a608:	e010      	b.n	800a62c <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 800a60a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a60e:	3303      	adds	r3, #3
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a614:	18d1      	adds	r1, r2, r3
 800a616:	f04f 0200 	mov.w	r2, #0
 800a61a:	f04f 0300 	mov.w	r3, #0
 800a61e:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800a622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a626:	3301      	adds	r3, #1
 800a628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 800a62c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a630:	2b02      	cmp	r3, #2
 800a632:	ddea      	ble.n	800a60a <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	f04f 0300 	mov.w	r3, #0
 800a63c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800a640:	2300      	movs	r3, #0
 800a642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a646:	e016      	b.n	800a676 <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800a648:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a64c:	3306      	adds	r3, #6
 800a64e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a652:	3206      	adds	r2, #6
 800a654:	00d2      	lsls	r2, r2, #3
 800a656:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a658:	4411      	add	r1, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a660:	4413      	add	r3, r2
 800a662:	3b80      	subs	r3, #128	; 0x80
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800a66c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a670:	3301      	adds	r3, #1
 800a672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	dde4      	ble.n	800a648 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 800a67e:	f04f 0200 	mov.w	r2, #0
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800a68a:	f04f 0200 	mov.w	r2, #0
 800a68e:	4bc8      	ldr	r3, [pc, #800]	; (800a9b0 <qr_5a2P8Gh6+0xd94>)
 800a690:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a694:	2300      	movs	r3, #0
 800a696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a69a:	e014      	b.n	800a6c6 <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 800a69c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6a0:	f1c3 0307 	rsb	r3, r3, #7
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	f04f 0300 	mov.w	r3, #0
 800a6b8:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800a6bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	dde6      	ble.n	800a69c <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	4bb7      	ldr	r3, [pc, #732]	; (800a9b0 <qr_5a2P8Gh6+0xd94>)
 800a6d4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a6e4:	f7f6 f9e2 	bl	8000aac <__aeabi_dcmpeq>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d15c      	bne.n	800a7a8 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 800a6ee:	2307      	movs	r3, #7
 800a6f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a6f4:	e009      	b.n	800a70a <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 800a6f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800a700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a704:	3b01      	subs	r3, #1
 800a706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a70a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd12      	ble.n	800a738 <qr_5a2P8Gh6+0xb1c>
 800a712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a716:	3b02      	subs	r3, #2
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a71e:	4413      	add	r3, r2
 800a720:	3b80      	subs	r3, #128	; 0x80
 800a722:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	f04f 0300 	mov.w	r3, #0
 800a72e:	f7f6 f9bd 	bl	8000aac <__aeabi_dcmpeq>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1de      	bne.n	800a6f6 <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800a738:	2301      	movs	r3, #1
 800a73a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 800a73e:	2308      	movs	r3, #8
 800a740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800a74a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a74e:	3307      	adds	r3, #7
 800a750:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a754:	429a      	cmp	r2, r3
 800a756:	dc1c      	bgt.n	800a792 <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800a758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a75c:	3b01      	subs	r3, #1
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a764:	4413      	add	r3, r2
 800a766:	3b80      	subs	r3, #128	; 0x80
 800a768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a76c:	f04f 0200 	mov.w	r2, #0
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	f7f6 f99a 	bl	8000aac <__aeabi_dcmpeq>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a784:	e00b      	b.n	800a79e <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800a786:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a78a:	3301      	adds	r3, #1
 800a78c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a790:	e005      	b.n	800a79e <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800a798:	2301      	movs	r3, #1
 800a79a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800a79e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0ce      	beq.n	800a744 <qr_5a2P8Gh6+0xb28>
 800a7a6:	e005      	b.n	800a7b4 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800a7b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dd29      	ble.n	800a810 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 800a7bc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a7c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7c4:	9302      	str	r3, [sp, #8]
 800a7c6:	2305      	movs	r3, #5
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a7d6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800a7da:	f003 fdd1 	bl	800e380 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 800a7de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a7e2:	61bb      	str	r3, [r7, #24]
 800a7e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a7f2:	2308      	movs	r3, #8
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	2205      	movs	r2, #5
 800a800:	ed97 0b06 	vldr	d0, [r7, #24]
 800a804:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a808:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800a80c:	f003 fec1 	bl	800e592 <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a810:	2305      	movs	r3, #5
 800a812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a816:	e024      	b.n	800a862 <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800a818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a822:	4413      	add	r3, r2
 800a824:	3b80      	subs	r3, #128	; 0x80
 800a826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a82a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a82e:	613b      	str	r3, [r7, #16]
 800a830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a834:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a838:	617b      	str	r3, [r7, #20]
 800a83a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a83e:	f7f5 fecd 	bl	80005dc <__aeabi_dmul>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a84a:	00c9      	lsls	r1, r1, #3
 800a84c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800a850:	4401      	add	r1, r0
 800a852:	3980      	subs	r1, #128	; 0x80
 800a854:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800a858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a85c:	3301      	adds	r3, #1
 800a85e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a866:	2b05      	cmp	r3, #5
 800a868:	ddd6      	ble.n	800a818 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800a86a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800a86e:	f04f 0000 	mov.w	r0, #0
 800a872:	494f      	ldr	r1, [pc, #316]	; (800a9b0 <qr_5a2P8Gh6+0xd94>)
 800a874:	f7f5 fcfa 	bl	800026c <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 800a880:	f04f 0200 	mov.w	r2, #0
 800a884:	f04f 0300 	mov.w	r3, #0
 800a888:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	4b47      	ldr	r3, [pc, #284]	; (800a9b0 <qr_5a2P8Gh6+0xd94>)
 800a892:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a8a2:	f7f6 f903 	bl	8000aac <__aeabi_dcmpeq>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 8083 	bne.w	800a9b4 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a8ba:	e009      	b.n	800a8d0 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 800a8bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800a8c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800a8d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dd12      	ble.n	800a8fe <qr_5a2P8Gh6+0xce2>
 800a8d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8dc:	3b02      	subs	r3, #2
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3b80      	subs	r3, #128	; 0x80
 800a8e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	f7f6 f8da 	bl	8000aac <__aeabi_dcmpeq>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1de      	bne.n	800a8bc <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 800a8fe:	2302      	movs	r3, #2
 800a900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 800a904:	2300      	movs	r3, #0
 800a906:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800a90a:	e048      	b.n	800a99e <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 800a90c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a910:	1e5a      	subs	r2, r3, #1
 800a912:	4613      	mov	r3, r2
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4413      	add	r3, r2
 800a918:	3304      	adds	r3, #4
 800a91a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 800a91e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 800a92c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a934:	4413      	add	r3, r2
 800a936:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a93a:	429a      	cmp	r2, r3
 800a93c:	da1c      	bge.n	800a978 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 800a93e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a942:	3b01      	subs	r3, #1
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a94a:	4413      	add	r3, r2
 800a94c:	3b80      	subs	r3, #128	; 0x80
 800a94e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a952:	f04f 0200 	mov.w	r2, #0
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	f7f6 f8a7 	bl	8000aac <__aeabi_dcmpeq>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800a964:	2301      	movs	r3, #1
 800a966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a96a:	e00d      	b.n	800a988 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 800a96c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a970:	3301      	adds	r3, #1
 800a972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a976:	e007      	b.n	800a988 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800a978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800a982:	2302      	movs	r3, #2
 800a984:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800a988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0ca      	beq.n	800a926 <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 800a990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a994:	2b01      	cmp	r3, #1
 800a996:	d102      	bne.n	800a99e <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800a99e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10c      	bne.n	800a9c0 <qr_5a2P8Gh6+0xda4>
 800a9a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dcae      	bgt.n	800a90c <qr_5a2P8Gh6+0xcf0>
 800a9ae:	e007      	b.n	800a9c0 <qr_5a2P8Gh6+0xda4>
 800a9b0:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800a9c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd29      	ble.n	800aa1c <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 800a9c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a9cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9d0:	9302      	str	r3, [sp, #8]
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	2304      	movs	r3, #4
 800a9de:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a9e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800a9e6:	f003 fccb 	bl	800e380 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 800a9ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9ee:	60bb      	str	r3, [r7, #8]
 800a9f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a9fe:	2304      	movs	r3, #4
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	ed97 0b02 	vldr	d0, [r7, #8]
 800aa10:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800aa14:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800aa18:	f003 fdbb 	bl	800e592 <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa22:	e024      	b.n	800aa6e <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 800aa24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa28:	00db      	lsls	r3, r3, #3
 800aa2a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aa2e:	4413      	add	r3, r2
 800aa30:	3b80      	subs	r3, #128	; 0x80
 800aa32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aa44:	607b      	str	r3, [r7, #4]
 800aa46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa4a:	f7f5 fdc7 	bl	80005dc <__aeabi_dmul>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800aa56:	00c9      	lsls	r1, r1, #3
 800aa58:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800aa5c:	4401      	add	r1, r0
 800aa5e:	3980      	subs	r1, #128	; 0x80
 800aa60:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa68:	3301      	adds	r3, #1
 800aa6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	ddd6      	ble.n	800aa24 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800aa76:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800aa7a:	f04f 0000 	mov.w	r0, #0
 800aa7e:	492a      	ldr	r1, [pc, #168]	; (800ab28 <qr_5a2P8Gh6+0xf0c>)
 800aa80:	f7f5 fbf4 	bl	800026c <__aeabi_dsub>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800aa92:	2300      	movs	r3, #0
 800aa94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa98:	e03d      	b.n	800ab16 <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800aa9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaa2:	18d1      	adds	r1, r2, r3
 800aaa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aaae:	4413      	add	r3, r2
 800aab0:	3b80      	subs	r3, #128	; 0x80
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 800aaba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aabe:	3301      	adds	r3, #1
 800aac0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aac4:	3201      	adds	r2, #1
 800aac6:	00d2      	lsls	r2, r2, #3
 800aac8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaca:	4411      	add	r1, r2
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aad2:	4413      	add	r3, r2
 800aad4:	3b80      	subs	r3, #128	; 0x80
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 800aade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aae2:	3302      	adds	r3, #2
 800aae4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aae8:	3202      	adds	r2, #2
 800aaea:	00d2      	lsls	r2, r2, #3
 800aaec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaee:	4411      	add	r1, r2
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aaf6:	4413      	add	r3, r2
 800aaf8:	3b80      	subs	r3, #128	; 0x80
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 800ab02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab06:	3303      	adds	r3, #3
 800ab08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800ab0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab10:	3301      	adds	r3, #1
 800ab12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	ddbd      	ble.n	800aa9a <qr_5a2P8Gh6+0xe7e>
  }
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	37f0      	adds	r7, #240	; 0xf0
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bdb0      	pop	{r4, r5, r7, pc}
 800ab28:	3ff00000 	.word	0x3ff00000

0800ab2c <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 800ab2c:	b5b0      	push	{r4, r5, r7, lr}
 800ab2e:	b0da      	sub	sp, #360	; 0x168
 800ab30:	af04      	add	r7, sp, #16
 800ab32:	66f8      	str	r0, [r7, #108]	; 0x6c
 800ab34:	66b9      	str	r1, [r7, #104]	; 0x68
 800ab36:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800ab38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ab3c:	2290      	movs	r2, #144	; 0x90
 800ab3e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ab40:	4618      	mov	r0, r3
 800ab42:	f00d fa5b 	bl	8017ffc <memcpy>
  work[0] = 0.0;
 800ab46:	f04f 0200 	mov.w	r2, #0
 800ab4a:	f04f 0300 	mov.w	r3, #0
 800ab4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	f04f 0300 	mov.w	r3, #0
 800ab5a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800ab6a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ab6e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	f04f 0300 	mov.w	r3, #0
 800ab7a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 800ab7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ab82:	2202      	movs	r2, #2
 800ab84:	4619      	mov	r1, r3
 800ab86:	2005      	movs	r0, #5
 800ab88:	f003 ff90 	bl	800eaac <xnrm2_nLdASVZH>
 800ab8c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800ab90:	f04f 0200 	mov.w	r2, #0
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ab9c:	f7f5 ff86 	bl	8000aac <__aeabi_dcmpeq>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f040 8172 	bne.w	800ae8c <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800aba8:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800abac:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800abb0:	eeb0 0a47 	vmov.f32	s0, s14
 800abb4:	eef0 0a67 	vmov.f32	s1, s15
 800abb8:	f001 fa92 	bl	800c0e0 <rt_hypotd_snf>
 800abbc:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 800abc0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	f04f 0300 	mov.w	r3, #0
 800abcc:	f7f5 ff8c 	bl	8000ae8 <__aeabi_dcmpge>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800abd6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800abda:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800abde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800abe2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800abe6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800abea:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800abee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800abf2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800abf6:	f04f 0200 	mov.w	r2, #0
 800abfa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800abfe:	4620      	mov	r0, r4
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f5 ff5d 	bl	8000ac0 <__aeabi_dcmplt>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 80f1 	beq.w	800adf0 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800ac14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ac18:	3301      	adds	r3, #1
 800ac1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ac24:	e01f      	b.n	800ac66 <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800ac26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ac30:	4413      	add	r3, r2
 800ac32:	3bd0      	subs	r3, #208	; 0xd0
 800ac34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac38:	f04f 0200 	mov.w	r2, #0
 800ac3c:	4bca      	ldr	r3, [pc, #808]	; (800af68 <qr_DvOBrgQi+0x43c>)
 800ac3e:	f7f5 fccd 	bl	80005dc <__aeabi_dmul>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	4610      	mov	r0, r2
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ac54:	4413      	add	r3, r2
 800ac56:	3bd0      	subs	r3, #208	; 0xd0
 800ac58:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800ac5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac60:	3301      	adds	r3, #1
 800ac62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ac66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	dddb      	ble.n	800ac26 <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 800ac6e:	f04f 0200 	mov.w	r2, #0
 800ac72:	4bbd      	ldr	r3, [pc, #756]	; (800af68 <qr_DvOBrgQi+0x43c>)
 800ac74:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ac78:	f7f5 fcb0 	bl	80005dc <__aeabi_dmul>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	4bb7      	ldr	r3, [pc, #732]	; (800af68 <qr_DvOBrgQi+0x43c>)
 800ac8a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ac8e:	f7f5 fca5 	bl	80005dc <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800ac9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ac9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800aca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800aca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acaa:	f04f 0200 	mov.w	r2, #0
 800acae:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800acb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800acb6:	f7f5 ff03 	bl	8000ac0 <__aeabi_dcmplt>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <qr_DvOBrgQi+0x19c>
 800acc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800acc4:	2b13      	cmp	r3, #19
 800acc6:	dda5      	ble.n	800ac14 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800acc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800accc:	2202      	movs	r2, #2
 800acce:	4619      	mov	r1, r3
 800acd0:	2005      	movs	r0, #5
 800acd2:	f003 feeb 	bl	800eaac <xnrm2_nLdASVZH>
 800acd6:	eeb0 7a40 	vmov.f32	s14, s0
 800acda:	eef0 7a60 	vmov.f32	s15, s1
 800acde:	eeb0 1a47 	vmov.f32	s2, s14
 800ace2:	eef0 1a67 	vmov.f32	s3, s15
 800ace6:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800acea:	f001 f9f9 	bl	800c0e0 <rt_hypotd_snf>
 800acee:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800acfe:	f7f5 fef3 	bl	8000ae8 <__aeabi_dcmpge>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800ad08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ad0c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800ad10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ad14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ad18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800ad1c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800ad20:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ad24:	f7f5 faa2 	bl	800026c <__aeabi_dsub>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4619      	mov	r1, r3
 800ad30:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ad34:	f7f5 fd7c 	bl	8000830 <__aeabi_ddiv>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 800ad40:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ad44:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800ad48:	f7f5 fa90 	bl	800026c <__aeabi_dsub>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	f04f 0000 	mov.w	r0, #0
 800ad54:	4985      	ldr	r1, [pc, #532]	; (800af6c <qr_DvOBrgQi+0x440>)
 800ad56:	f7f5 fd6b 	bl	8000830 <__aeabi_ddiv>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800ad62:	2301      	movs	r3, #1
 800ad64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ad68:	e01e      	b.n	800ada8 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 800ad6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ad74:	4413      	add	r3, r2
 800ad76:	3bd0      	subs	r3, #208	; 0xd0
 800ad78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad7c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800ad80:	f7f5 fc2c 	bl	80005dc <__aeabi_dmul>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ad96:	4413      	add	r3, r2
 800ad98:	3bd0      	subs	r3, #208	; 0xd0
 800ad9a:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800ad9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ada2:	3301      	adds	r3, #1
 800ada4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ada8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adac:	2b05      	cmp	r3, #5
 800adae:	dddc      	ble.n	800ad6a <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800adb0:	2300      	movs	r3, #0
 800adb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800adb6:	e010      	b.n	800adda <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800adb8:	f04f 0200 	mov.w	r2, #0
 800adbc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800adc0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800adc4:	f7f5 fc0a 	bl	80005dc <__aeabi_dmul>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800add0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800add4:	3301      	adds	r3, #1
 800add6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800adda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800adde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ade2:	429a      	cmp	r2, r3
 800ade4:	dbe8      	blt.n	800adb8 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800ade6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800adea:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800adee:	e04d      	b.n	800ae8c <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800adf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800adf4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800adf8:	f7f5 fa38 	bl	800026c <__aeabi_dsub>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4610      	mov	r0, r2
 800ae02:	4619      	mov	r1, r3
 800ae04:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ae08:	f7f5 fd12 	bl	8000830 <__aeabi_ddiv>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 800ae14:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800ae18:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ae1c:	f7f5 fa26 	bl	800026c <__aeabi_dsub>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	f04f 0000 	mov.w	r0, #0
 800ae28:	4950      	ldr	r1, [pc, #320]	; (800af6c <qr_DvOBrgQi+0x440>)
 800ae2a:	f7f5 fd01 	bl	8000830 <__aeabi_ddiv>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800ae36:	2301      	movs	r3, #1
 800ae38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ae3c:	e01e      	b.n	800ae7c <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 800ae3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ae48:	4413      	add	r3, r2
 800ae4a:	3bd0      	subs	r3, #208	; 0xd0
 800ae4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae50:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800ae54:	f7f5 fbc2 	bl	80005dc <__aeabi_dmul>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4619      	mov	r1, r3
 800ae60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3bd0      	subs	r3, #208	; 0xd0
 800ae6e:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800ae72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae76:	3301      	adds	r3, #1
 800ae78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ae7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae80:	2b05      	cmp	r3, #5
 800ae82:	dddc      	ble.n	800ae3e <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 800ae84:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ae88:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 800ae8c:	f04f 0200 	mov.w	r2, #0
 800ae90:	4b36      	ldr	r3, [pc, #216]	; (800af6c <qr_DvOBrgQi+0x440>)
 800ae92:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	f04f 0300 	mov.w	r3, #0
 800ae9e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800aea2:	f7f5 fe03 	bl	8000aac <__aeabi_dcmpeq>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f040 8083 	bne.w	800afb4 <qr_DvOBrgQi+0x488>
    knt = 6;
 800aeae:	2306      	movs	r3, #6
 800aeb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 800aeb4:	2305      	movs	r3, #5
 800aeb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800aeba:	e009      	b.n	800aed0 <qr_DvOBrgQi+0x3a4>
      knt--;
 800aebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aec0:	3b01      	subs	r3, #1
 800aec2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800aec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeca:	3b01      	subs	r3, #1
 800aecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800aed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd11      	ble.n	800aefc <qr_DvOBrgQi+0x3d0>
 800aed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800aee2:	4413      	add	r3, r2
 800aee4:	3bd0      	subs	r3, #208	; 0xd0
 800aee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	f7f5 fddb 	bl	8000aac <__aeabi_dcmpeq>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1df      	bne.n	800aebc <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 800aefc:	2302      	movs	r3, #2
 800aefe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 800af02:	2300      	movs	r3, #0
 800af04:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800af08:	e04b      	b.n	800afa2 <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800af0a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800af0e:	4613      	mov	r3, r2
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	4413      	add	r3, r2
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800af1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800af28:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800af2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af30:	441a      	add	r2, r3
 800af32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800af36:	4293      	cmp	r3, r2
 800af38:	da20      	bge.n	800af7c <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 800af3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800af44:	4413      	add	r3, r2
 800af46:	3bd0      	subs	r3, #208	; 0xd0
 800af48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af4c:	f04f 0200 	mov.w	r2, #0
 800af50:	f04f 0300 	mov.w	r3, #0
 800af54:	f7f5 fdaa 	bl	8000aac <__aeabi_dcmpeq>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d108      	bne.n	800af70 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 800af5e:	2301      	movs	r3, #1
 800af60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800af64:	e012      	b.n	800af8c <qr_DvOBrgQi+0x460>
 800af66:	bf00      	nop
 800af68:	7c900000 	.word	0x7c900000
 800af6c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800af70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800af74:	3301      	adds	r3, #1
 800af76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800af7a:	e007      	b.n	800af8c <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 800af7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af80:	3b01      	subs	r3, #1
 800af82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 800af86:	2302      	movs	r3, #2
 800af88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800af8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0c6      	beq.n	800af22 <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 800af94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d102      	bne.n	800afa2 <qr_DvOBrgQi+0x476>
        exitg2 = true;
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800afa2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10a      	bne.n	800afc0 <qr_DvOBrgQi+0x494>
 800afaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dcab      	bgt.n	800af0a <qr_DvOBrgQi+0x3de>
 800afb2:	e005      	b.n	800afc0 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800afc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd29      	ble.n	800b01c <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800afc8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800afcc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800afd0:	9302      	str	r3, [sp, #8]
 800afd2:	2301      	movs	r3, #1
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	2307      	movs	r3, #7
 800afde:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800afe2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800afe6:	f003 f943 	bl	800e270 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800afea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800afee:	653b      	str	r3, [r7, #80]	; 0x50
 800aff0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800aff4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aff8:	657b      	str	r3, [r7, #84]	; 0x54
 800affa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800affe:	2307      	movs	r3, #7
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	4613      	mov	r3, r2
 800b00a:	2201      	movs	r2, #1
 800b00c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800b010:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b014:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b018:	f003 fa38 	bl	800e48c <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 800b01c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b020:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 800b024:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b028:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 800b02c:	f04f 0200 	mov.w	r2, #0
 800b030:	f04f 0300 	mov.w	r3, #0
 800b034:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 800b038:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b03c:	2209      	movs	r2, #9
 800b03e:	4619      	mov	r1, r3
 800b040:	2004      	movs	r0, #4
 800b042:	f003 fd33 	bl	800eaac <xnrm2_nLdASVZH>
 800b046:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b04a:	f04f 0200 	mov.w	r2, #0
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b056:	f7f5 fd29 	bl	8000aac <__aeabi_dcmpeq>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f040 8174 	bne.w	800b34a <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 800b062:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800b066:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b06a:	eeb0 0a47 	vmov.f32	s0, s14
 800b06e:	eef0 0a67 	vmov.f32	s1, s15
 800b072:	f001 f835 	bl	800c0e0 <rt_hypotd_snf>
 800b076:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 800b07a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b07e:	f04f 0200 	mov.w	r2, #0
 800b082:	f04f 0300 	mov.w	r3, #0
 800b086:	f7f5 fd2f 	bl	8000ae8 <__aeabi_dcmpge>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 800b090:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b094:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b098:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b09c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b0a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b0a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b0a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b0ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b0bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b0c0:	f7f5 fcfe 	bl	8000ac0 <__aeabi_dcmplt>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80f1 	beq.w	800b2ae <qr_DvOBrgQi+0x782>
      knt = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b0d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b0dc:	2308      	movs	r3, #8
 800b0de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b0e2:	e01f      	b.n	800b124 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b0e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3bd0      	subs	r3, #208	; 0xd0
 800b0f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	4bc6      	ldr	r3, [pc, #792]	; (800b414 <qr_DvOBrgQi+0x8e8>)
 800b0fc:	f7f5 fa6e 	bl	80005dc <__aeabi_dmul>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4610      	mov	r0, r2
 800b106:	4619      	mov	r1, r3
 800b108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b112:	4413      	add	r3, r2
 800b114:	3bd0      	subs	r3, #208	; 0xd0
 800b116:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b11e:	3301      	adds	r3, #1
 800b120:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b128:	2b0b      	cmp	r3, #11
 800b12a:	dddb      	ble.n	800b0e4 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 800b12c:	f04f 0200 	mov.w	r2, #0
 800b130:	4bb8      	ldr	r3, [pc, #736]	; (800b414 <qr_DvOBrgQi+0x8e8>)
 800b132:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b136:	f7f5 fa51 	bl	80005dc <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800b142:	f04f 0200 	mov.w	r2, #0
 800b146:	4bb3      	ldr	r3, [pc, #716]	; (800b414 <qr_DvOBrgQi+0x8e8>)
 800b148:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b14c:	f7f5 fa46 	bl	80005dc <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b158:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b15c:	643b      	str	r3, [r7, #64]	; 0x40
 800b15e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b166:	647b      	str	r3, [r7, #68]	; 0x44
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b170:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b174:	f7f5 fca4 	bl	8000ac0 <__aeabi_dcmplt>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <qr_DvOBrgQi+0x65a>
 800b17e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b182:	2b13      	cmp	r3, #19
 800b184:	dda5      	ble.n	800b0d2 <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 800b186:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b18a:	2209      	movs	r2, #9
 800b18c:	4619      	mov	r1, r3
 800b18e:	2004      	movs	r0, #4
 800b190:	f003 fc8c 	bl	800eaac <xnrm2_nLdASVZH>
 800b194:	eeb0 7a40 	vmov.f32	s14, s0
 800b198:	eef0 7a60 	vmov.f32	s15, s1
 800b19c:	eeb0 1a47 	vmov.f32	s2, s14
 800b1a0:	eef0 1a67 	vmov.f32	s3, s15
 800b1a4:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800b1a8:	f000 ff9a 	bl	800c0e0 <rt_hypotd_snf>
 800b1ac:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800b1b0:	f04f 0200 	mov.w	r2, #0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b1bc:	f7f5 fc94 	bl	8000ae8 <__aeabi_dcmpge>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d009      	beq.n	800b1da <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800b1c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b1ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b1ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b1d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b1d6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800b1da:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b1de:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b1e2:	f7f5 f843 	bl	800026c <__aeabi_dsub>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b1f2:	f7f5 fb1d 	bl	8000830 <__aeabi_ddiv>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 800b1fe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b202:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b206:	f7f5 f831 	bl	800026c <__aeabi_dsub>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	f04f 0000 	mov.w	r0, #0
 800b212:	4981      	ldr	r1, [pc, #516]	; (800b418 <qr_DvOBrgQi+0x8ec>)
 800b214:	f7f5 fb0c 	bl	8000830 <__aeabi_ddiv>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b220:	2308      	movs	r3, #8
 800b222:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b226:	e01e      	b.n	800b266 <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800b228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b232:	4413      	add	r3, r2
 800b234:	3bd0      	subs	r3, #208	; 0xd0
 800b236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b23a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b23e:	f7f5 f9cd 	bl	80005dc <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4610      	mov	r0, r2
 800b248:	4619      	mov	r1, r3
 800b24a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b254:	4413      	add	r3, r2
 800b256:	3bd0      	subs	r3, #208	; 0xd0
 800b258:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800b25c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b260:	3301      	adds	r3, #1
 800b262:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b26a:	2b0b      	cmp	r3, #11
 800b26c:	dddc      	ble.n	800b228 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b26e:	2300      	movs	r3, #0
 800b270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b274:	e010      	b.n	800b298 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b27e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b282:	f7f5 f9ab 	bl	80005dc <__aeabi_dmul>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b28e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b292:	3301      	adds	r3, #1
 800b294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b298:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b29c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	dbe8      	blt.n	800b276 <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800b2a4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b2a8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800b2ac:	e04d      	b.n	800b34a <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800b2ae:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800b2b2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b2b6:	f7f4 ffd9 	bl	800026c <__aeabi_dsub>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4610      	mov	r0, r2
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b2c6:	f7f5 fab3 	bl	8000830 <__aeabi_ddiv>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800b2d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b2d6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b2da:	f7f4 ffc7 	bl	800026c <__aeabi_dsub>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	f04f 0000 	mov.w	r0, #0
 800b2e6:	494c      	ldr	r1, [pc, #304]	; (800b418 <qr_DvOBrgQi+0x8ec>)
 800b2e8:	f7f5 faa2 	bl	8000830 <__aeabi_ddiv>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800b2f4:	2308      	movs	r3, #8
 800b2f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b2fa:	e01e      	b.n	800b33a <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800b2fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b306:	4413      	add	r3, r2
 800b308:	3bd0      	subs	r3, #208	; 0xd0
 800b30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b30e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b312:	f7f5 f963 	bl	80005dc <__aeabi_dmul>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4610      	mov	r0, r2
 800b31c:	4619      	mov	r1, r3
 800b31e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b322:	00db      	lsls	r3, r3, #3
 800b324:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b328:	4413      	add	r3, r2
 800b32a:	3bd0      	subs	r3, #208	; 0xd0
 800b32c:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800b330:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b334:	3301      	adds	r3, #1
 800b336:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b33a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b33e:	2b0b      	cmp	r3, #11
 800b340:	dddc      	ble.n	800b2fc <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800b342:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b346:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	4b32      	ldr	r3, [pc, #200]	; (800b418 <qr_DvOBrgQi+0x8ec>)
 800b350:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800b354:	f04f 0200 	mov.w	r2, #0
 800b358:	f04f 0300 	mov.w	r3, #0
 800b35c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800b360:	f7f5 fba4 	bl	8000aac <__aeabi_dcmpeq>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d163      	bne.n	800b432 <qr_DvOBrgQi+0x906>
    knt = 5;
 800b36a:	2305      	movs	r3, #5
 800b36c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800b370:	230b      	movs	r3, #11
 800b372:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b376:	e009      	b.n	800b38c <qr_DvOBrgQi+0x860>
      knt--;
 800b378:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b37c:	3b01      	subs	r3, #1
 800b37e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800b382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b386:	3b01      	subs	r3, #1
 800b388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b38c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b390:	2b00      	cmp	r3, #0
 800b392:	dd11      	ble.n	800b3b8 <qr_DvOBrgQi+0x88c>
 800b394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b39e:	4413      	add	r3, r2
 800b3a0:	3bd0      	subs	r3, #208	; 0xd0
 800b3a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	f7f5 fb7d 	bl	8000aac <__aeabi_dcmpeq>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1df      	bne.n	800b378 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800b3be:	230d      	movs	r3, #13
 800b3c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800b3ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b3ce:	f103 020c 	add.w	r2, r3, #12
 800b3d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	dc20      	bgt.n	800b41c <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800b3da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b3e4:	4413      	add	r3, r2
 800b3e6:	3bd0      	subs	r3, #208	; 0xd0
 800b3e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	f04f 0300 	mov.w	r3, #0
 800b3f4:	f7f5 fb5a 	bl	8000aac <__aeabi_dcmpeq>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d103      	bne.n	800b406 <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800b3fe:	2301      	movs	r3, #1
 800b400:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b404:	e010      	b.n	800b428 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800b406:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800b40a:	3301      	adds	r3, #1
 800b40c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b410:	e00a      	b.n	800b428 <qr_DvOBrgQi+0x8fc>
 800b412:	bf00      	nop
 800b414:	7c900000 	.word	0x7c900000
 800b418:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800b422:	2301      	movs	r3, #1
 800b424:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800b428:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d0c9      	beq.n	800b3c4 <qr_DvOBrgQi+0x898>
 800b430:	e005      	b.n	800b43e <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800b43e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b442:	2b00      	cmp	r3, #0
 800b444:	dd29      	ble.n	800b49a <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800b446:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b44a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b44e:	9302      	str	r3, [sp, #8]
 800b450:	2308      	movs	r3, #8
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	230e      	movs	r3, #14
 800b45c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b460:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b464:	f002 ff04 	bl	800e270 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800b468:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b46c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b46e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b472:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b478:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b47c:	230e      	movs	r3, #14
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	4613      	mov	r3, r2
 800b488:	2208      	movs	r2, #8
 800b48a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800b48e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b492:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b496:	f002 fff9 	bl	800e48c <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800b49a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b49e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800b4a2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800b4a6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800b4aa:	f04f 0200 	mov.w	r2, #0
 800b4ae:	f04f 0300 	mov.w	r3, #0
 800b4b2:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800b4b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b4ba:	2210      	movs	r2, #16
 800b4bc:	4619      	mov	r1, r3
 800b4be:	2003      	movs	r0, #3
 800b4c0:	f003 faf4 	bl	800eaac <xnrm2_nLdASVZH>
 800b4c4:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800b4c8:	f04f 0200 	mov.w	r2, #0
 800b4cc:	f04f 0300 	mov.w	r3, #0
 800b4d0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b4d4:	f7f5 faea 	bl	8000aac <__aeabi_dcmpeq>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f040 8170 	bne.w	800b7c0 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800b4e0:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800b4e4:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800b4e8:	eeb0 0a47 	vmov.f32	s0, s14
 800b4ec:	eef0 0a67 	vmov.f32	s1, s15
 800b4f0:	f000 fdf6 	bl	800c0e0 <rt_hypotd_snf>
 800b4f4:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800b4f8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800b4fc:	f04f 0200 	mov.w	r2, #0
 800b500:	f04f 0300 	mov.w	r3, #0
 800b504:	f7f5 faf0 	bl	8000ae8 <__aeabi_dcmpge>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d009      	beq.n	800b522 <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800b50e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b512:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b516:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b51a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b51e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b522:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b526:	633b      	str	r3, [r7, #48]	; 0x30
 800b528:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b52c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b530:	637b      	str	r3, [r7, #52]	; 0x34
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b53a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b53e:	f7f5 fabf 	bl	8000ac0 <__aeabi_dcmplt>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 80ef 	beq.w	800b728 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800b550:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b554:	3301      	adds	r3, #1
 800b556:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800b55a:	230f      	movs	r3, #15
 800b55c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b560:	e01f      	b.n	800b5a2 <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b56c:	4413      	add	r3, r2
 800b56e:	3bd0      	subs	r3, #208	; 0xd0
 800b570:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b574:	f04f 0200 	mov.w	r2, #0
 800b578:	4bb5      	ldr	r3, [pc, #724]	; (800b850 <qr_DvOBrgQi+0xd24>)
 800b57a:	f7f5 f82f 	bl	80005dc <__aeabi_dmul>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4610      	mov	r0, r2
 800b584:	4619      	mov	r1, r3
 800b586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b590:	4413      	add	r3, r2
 800b592:	3bd0      	subs	r3, #208	; 0xd0
 800b594:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800b598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b59c:	3301      	adds	r3, #1
 800b59e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b5a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5a6:	2b11      	cmp	r3, #17
 800b5a8:	dddb      	ble.n	800b562 <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800b5aa:	f04f 0200 	mov.w	r2, #0
 800b5ae:	4ba8      	ldr	r3, [pc, #672]	; (800b850 <qr_DvOBrgQi+0xd24>)
 800b5b0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b5b4:	f7f5 f812 	bl	80005dc <__aeabi_dmul>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800b5c0:	f04f 0200 	mov.w	r2, #0
 800b5c4:	4ba2      	ldr	r3, [pc, #648]	; (800b850 <qr_DvOBrgQi+0xd24>)
 800b5c6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b5ca:	f7f5 f807 	bl	80005dc <__aeabi_dmul>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b5d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b5da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b5e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5e6:	f04f 0200 	mov.w	r2, #0
 800b5ea:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b5ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b5f2:	f7f5 fa65 	bl	8000ac0 <__aeabi_dcmplt>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <qr_DvOBrgQi+0xad8>
 800b5fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b600:	2b13      	cmp	r3, #19
 800b602:	dda5      	ble.n	800b550 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800b604:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b608:	2210      	movs	r2, #16
 800b60a:	4619      	mov	r1, r3
 800b60c:	2003      	movs	r0, #3
 800b60e:	f003 fa4d 	bl	800eaac <xnrm2_nLdASVZH>
 800b612:	eeb0 7a40 	vmov.f32	s14, s0
 800b616:	eef0 7a60 	vmov.f32	s15, s1
 800b61a:	eeb0 1a47 	vmov.f32	s2, s14
 800b61e:	eef0 1a67 	vmov.f32	s3, s15
 800b622:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800b626:	f000 fd5b 	bl	800c0e0 <rt_hypotd_snf>
 800b62a:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800b62e:	f04f 0200 	mov.w	r2, #0
 800b632:	f04f 0300 	mov.w	r3, #0
 800b636:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b63a:	f7f5 fa55 	bl	8000ae8 <__aeabi_dcmpge>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d009      	beq.n	800b658 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800b644:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b648:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800b64c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b654:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800b658:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b65c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b660:	f7f4 fe04 	bl	800026c <__aeabi_dsub>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4610      	mov	r0, r2
 800b66a:	4619      	mov	r1, r3
 800b66c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b670:	f7f5 f8de 	bl	8000830 <__aeabi_ddiv>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800b67c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b680:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800b684:	f7f4 fdf2 	bl	800026c <__aeabi_dsub>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	f04f 0000 	mov.w	r0, #0
 800b690:	4970      	ldr	r1, [pc, #448]	; (800b854 <qr_DvOBrgQi+0xd28>)
 800b692:	f7f5 f8cd 	bl	8000830 <__aeabi_ddiv>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800b69e:	230f      	movs	r3, #15
 800b6a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b6a4:	e01c      	b.n	800b6e0 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800b6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b6b0:	4413      	add	r3, r2
 800b6b2:	3bd0      	subs	r3, #208	; 0xd0
 800b6b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6b8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b6bc:	f7f4 ff8e 	bl	80005dc <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800b6c8:	00c9      	lsls	r1, r1, #3
 800b6ca:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800b6ce:	4401      	add	r1, r0
 800b6d0:	39d0      	subs	r1, #208	; 0xd0
 800b6d2:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800b6d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6da:	3301      	adds	r3, #1
 800b6dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b6e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6e4:	2b11      	cmp	r3, #17
 800b6e6:	ddde      	ble.n	800b6a6 <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b6ee:	e010      	b.n	800b712 <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800b6f0:	f04f 0200 	mov.w	r2, #0
 800b6f4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b6f8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b6fc:	f7f4 ff6e 	bl	80005dc <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b70c:	3301      	adds	r3, #1
 800b70e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b712:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b716:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b71a:	429a      	cmp	r2, r3
 800b71c:	dbe8      	blt.n	800b6f0 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800b71e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b722:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800b726:	e04b      	b.n	800b7c0 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800b728:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800b72c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800b730:	f7f4 fd9c 	bl	800026c <__aeabi_dsub>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4610      	mov	r0, r2
 800b73a:	4619      	mov	r1, r3
 800b73c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b740:	f7f5 f876 	bl	8000830 <__aeabi_ddiv>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800b74c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800b750:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b754:	f7f4 fd8a 	bl	800026c <__aeabi_dsub>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	f04f 0000 	mov.w	r0, #0
 800b760:	493c      	ldr	r1, [pc, #240]	; (800b854 <qr_DvOBrgQi+0xd28>)
 800b762:	f7f5 f865 	bl	8000830 <__aeabi_ddiv>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800b76e:	230f      	movs	r3, #15
 800b770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b774:	e01c      	b.n	800b7b0 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800b776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b780:	4413      	add	r3, r2
 800b782:	3bd0      	subs	r3, #208	; 0xd0
 800b784:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b788:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b78c:	f7f4 ff26 	bl	80005dc <__aeabi_dmul>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b798:	00c9      	lsls	r1, r1, #3
 800b79a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800b79e:	4401      	add	r1, r0
 800b7a0:	39d0      	subs	r1, #208	; 0xd0
 800b7a2:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800b7a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b7b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7b4:	2b11      	cmp	r3, #17
 800b7b6:	ddde      	ble.n	800b776 <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800b7b8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800b7bc:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800b7c0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800b7c4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800b7c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b7cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b7ce:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b7d8:	e00f      	b.n	800b7fa <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800b7da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b7e2:	18d1      	adds	r1, r2, r3
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	f04f 0300 	mov.w	r3, #0
 800b7ec:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b7f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b7fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	ddeb      	ble.n	800b7da <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800b802:	f04f 0200 	mov.w	r2, #0
 800b806:	f04f 0300 	mov.w	r3, #0
 800b80a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b80e:	2300      	movs	r3, #0
 800b810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b814:	e016      	b.n	800b844 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800b816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b81a:	3306      	adds	r3, #6
 800b81c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b820:	3203      	adds	r2, #3
 800b822:	00d2      	lsls	r2, r2, #3
 800b824:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b826:	4411      	add	r1, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b82e:	4413      	add	r3, r2
 800b830:	3bd0      	subs	r3, #208	; 0xd0
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b83e:	3301      	adds	r3, #1
 800b840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b844:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b848:	2b01      	cmp	r3, #1
 800b84a:	dde4      	ble.n	800b816 <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800b84c:	e015      	b.n	800b87a <qr_DvOBrgQi+0xd4e>
 800b84e:	bf00      	nop
 800b850:	7c900000 	.word	0x7c900000
 800b854:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800b858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b85c:	3303      	adds	r3, #3
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b862:	18d1      	adds	r1, r2, r3
 800b864:	f04f 0200 	mov.w	r2, #0
 800b868:	f04f 0300 	mov.w	r3, #0
 800b86c:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800b870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b874:	3301      	adds	r3, #1
 800b876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800b87a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b87e:	2b02      	cmp	r3, #2
 800b880:	ddea      	ble.n	800b858 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800b882:	f04f 0200 	mov.w	r2, #0
 800b886:	f04f 0300 	mov.w	r3, #0
 800b88a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b88e:	2300      	movs	r3, #0
 800b890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b894:	e016      	b.n	800b8c4 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800b896:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b89a:	330c      	adds	r3, #12
 800b89c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b8a0:	3206      	adds	r2, #6
 800b8a2:	00d2      	lsls	r2, r2, #3
 800b8a4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b8a6:	4411      	add	r1, r2
 800b8a8:	00db      	lsls	r3, r3, #3
 800b8aa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b8ae:	4413      	add	r3, r2
 800b8b0:	3bd0      	subs	r3, #208	; 0xd0
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b8ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b8c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	dde4      	ble.n	800b896 <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800b8cc:	f04f 0200 	mov.w	r2, #0
 800b8d0:	f04f 0300 	mov.w	r3, #0
 800b8d4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800b8d8:	230f      	movs	r3, #15
 800b8da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b8de:	e024      	b.n	800b92a <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800b8e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3bd0      	subs	r3, #208	; 0xd0
 800b8ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8f6:	623b      	str	r3, [r7, #32]
 800b8f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
 800b902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b906:	f7f4 fe69 	bl	80005dc <__aeabi_dmul>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800b912:	00c9      	lsls	r1, r1, #3
 800b914:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800b918:	4401      	add	r1, r0
 800b91a:	39d0      	subs	r1, #208	; 0xd0
 800b91c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800b920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b924:	3301      	adds	r3, #1
 800b926:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b92e:	2b11      	cmp	r3, #17
 800b930:	ddd6      	ble.n	800b8e0 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800b932:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800b936:	f04f 0000 	mov.w	r0, #0
 800b93a:	49cc      	ldr	r1, [pc, #816]	; (800bc6c <qr_DvOBrgQi+0x1140>)
 800b93c:	f7f4 fc96 	bl	800026c <__aeabi_dsub>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b948:	2300      	movs	r3, #0
 800b94a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b94e:	e014      	b.n	800b97a <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800b950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b954:	f1c3 030d 	rsb	r3, r3, #13
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b95e:	4413      	add	r3, r2
 800b960:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800b964:	f04f 0200 	mov.w	r2, #0
 800b968:	f04f 0300 	mov.w	r3, #0
 800b96c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b974:	3301      	adds	r3, #1
 800b976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b97a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b97e:	2b01      	cmp	r3, #1
 800b980:	dde6      	ble.n	800b950 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	4bb9      	ldr	r3, [pc, #740]	; (800bc6c <qr_DvOBrgQi+0x1140>)
 800b988:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	f04f 0300 	mov.w	r3, #0
 800b994:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800b998:	f7f5 f888 	bl	8000aac <__aeabi_dcmpeq>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d15f      	bne.n	800ba62 <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800b9a2:	2305      	movs	r3, #5
 800b9a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800b9a8:	230d      	movs	r3, #13
 800b9aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b9ae:	e009      	b.n	800b9c4 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800b9b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800b9ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b9c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	dd12      	ble.n	800b9f2 <qr_DvOBrgQi+0xec6>
 800b9cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9d0:	3b02      	subs	r3, #2
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b9d8:	4413      	add	r3, r2
 800b9da:	3bd0      	subs	r3, #208	; 0xd0
 800b9dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9e0:	f04f 0200 	mov.w	r2, #0
 800b9e4:	f04f 0300 	mov.w	r3, #0
 800b9e8:	f7f5 f860 	bl	8000aac <__aeabi_dcmpeq>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1de      	bne.n	800b9b0 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800b9f8:	230e      	movs	r3, #14
 800b9fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800ba04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba08:	330d      	adds	r3, #13
 800ba0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	dc1c      	bgt.n	800ba4c <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800ba12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba16:	3b01      	subs	r3, #1
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ba1e:	4413      	add	r3, r2
 800ba20:	3bd0      	subs	r3, #208	; 0xd0
 800ba22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba26:	f04f 0200 	mov.w	r2, #0
 800ba2a:	f04f 0300 	mov.w	r3, #0
 800ba2e:	f7f5 f83d 	bl	8000aac <__aeabi_dcmpeq>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d103      	bne.n	800ba40 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ba3e:	e00b      	b.n	800ba58 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800ba40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ba44:	3301      	adds	r3, #1
 800ba46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ba4a:	e005      	b.n	800ba58 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800ba52:	2301      	movs	r3, #1
 800ba54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800ba58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0ce      	beq.n	800b9fe <qr_DvOBrgQi+0xed2>
 800ba60:	e005      	b.n	800ba6e <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800ba6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dd29      	ble.n	800baca <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800ba76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800ba7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ba7e:	9302      	str	r3, [sp, #8]
 800ba80:	2308      	movs	r3, #8
 800ba82:	9301      	str	r3, [sp, #4]
 800ba84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	230e      	movs	r3, #14
 800ba8c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800ba90:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ba94:	f002 fbec 	bl	800e270 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800ba98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ba9c:	61bb      	str	r3, [r7, #24]
 800ba9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800baa2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800baa6:	61fb      	str	r3, [r7, #28]
 800baa8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800baac:	230e      	movs	r3, #14
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	4613      	mov	r3, r2
 800bab8:	2208      	movs	r2, #8
 800baba:	ed97 0b06 	vldr	d0, [r7, #24]
 800babe:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bac2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bac6:	f002 fce1 	bl	800e48c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800baca:	2308      	movs	r3, #8
 800bacc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bad0:	e024      	b.n	800bb1c <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800bad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800badc:	4413      	add	r3, r2
 800bade:	3bd0      	subs	r3, #208	; 0xd0
 800bae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bae4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800baee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800baf2:	617b      	str	r3, [r7, #20]
 800baf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800baf8:	f7f4 fd70 	bl	80005dc <__aeabi_dmul>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bb04:	00c9      	lsls	r1, r1, #3
 800bb06:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bb0a:	4401      	add	r1, r0
 800bb0c:	39d0      	subs	r1, #208	; 0xd0
 800bb0e:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bb12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb16:	3301      	adds	r3, #1
 800bb18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb20:	2b0b      	cmp	r3, #11
 800bb22:	ddd6      	ble.n	800bad2 <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800bb24:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800bb28:	f04f 0000 	mov.w	r0, #0
 800bb2c:	494f      	ldr	r1, [pc, #316]	; (800bc6c <qr_DvOBrgQi+0x1140>)
 800bb2e:	f7f4 fb9d 	bl	800026c <__aeabi_dsub>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800bb3a:	f04f 0200 	mov.w	r2, #0
 800bb3e:	f04f 0300 	mov.w	r3, #0
 800bb42:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800bb46:	f04f 0200 	mov.w	r2, #0
 800bb4a:	4b48      	ldr	r3, [pc, #288]	; (800bc6c <qr_DvOBrgQi+0x1140>)
 800bb4c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	f04f 0300 	mov.w	r3, #0
 800bb58:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800bb5c:	f7f4 ffa6 	bl	8000aac <__aeabi_dcmpeq>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f040 8084 	bne.w	800bc70 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800bb68:	2306      	movs	r3, #6
 800bb6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800bb6e:	2307      	movs	r3, #7
 800bb70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800bb74:	e009      	b.n	800bb8a <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800bb76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800bb80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb84:	3b01      	subs	r3, #1
 800bb86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800bb8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dd12      	ble.n	800bbb8 <qr_DvOBrgQi+0x108c>
 800bb92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb96:	3b02      	subs	r3, #2
 800bb98:	00db      	lsls	r3, r3, #3
 800bb9a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bb9e:	4413      	add	r3, r2
 800bba0:	3bd0      	subs	r3, #208	; 0xd0
 800bba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bba6:	f04f 0200 	mov.w	r2, #0
 800bbaa:	f04f 0300 	mov.w	r3, #0
 800bbae:	f7f4 ff7d 	bl	8000aac <__aeabi_dcmpeq>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1de      	bne.n	800bb76 <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800bbb8:	2302      	movs	r3, #2
 800bbba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800bbc4:	e049      	b.n	800bc5a <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800bbc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbca:	1e5a      	subs	r2, r3, #1
 800bbcc:	4613      	mov	r3, r2
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	4413      	add	r3, r2
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	3307      	adds	r3, #7
 800bbd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800bbda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bbde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800bbe8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bbec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	da1c      	bge.n	800bc34 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800bbfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc06:	4413      	add	r3, r2
 800bc08:	3bd0      	subs	r3, #208	; 0xd0
 800bc0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc0e:	f04f 0200 	mov.w	r2, #0
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	f7f4 ff49 	bl	8000aac <__aeabi_dcmpeq>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d103      	bne.n	800bc28 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800bc20:	2301      	movs	r3, #1
 800bc22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800bc26:	e00d      	b.n	800bc44 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800bc28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bc32:	e007      	b.n	800bc44 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800bc34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800bc3e:	2302      	movs	r3, #2
 800bc40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800bc44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d0ca      	beq.n	800bbe2 <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800bc4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d102      	bne.n	800bc5a <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800bc54:	2301      	movs	r3, #1
 800bc56:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800bc5a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10c      	bne.n	800bc7c <qr_DvOBrgQi+0x1150>
 800bc62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dcad      	bgt.n	800bbc6 <qr_DvOBrgQi+0x109a>
 800bc6a:	e007      	b.n	800bc7c <qr_DvOBrgQi+0x1150>
 800bc6c:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800bc7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dd29      	ble.n	800bcd8 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800bc84:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800bc88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bc8c:	9302      	str	r3, [sp, #8]
 800bc8e:	2301      	movs	r3, #1
 800bc90:	9301      	str	r3, [sp, #4]
 800bc92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	2307      	movs	r3, #7
 800bc9a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bc9e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bca2:	f002 fae5 	bl	800e270 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800bca6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bcb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bcba:	2307      	movs	r3, #7
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	ed97 0b02 	vldr	d0, [r7, #8]
 800bccc:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bcd0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bcd4:	f002 fbda 	bl	800e48c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bcde:	e024      	b.n	800bd2a <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800bce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bcea:	4413      	add	r3, r2
 800bcec:	3bd0      	subs	r3, #208	; 0xd0
 800bcee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bcfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd00:	607b      	str	r3, [r7, #4]
 800bd02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd06:	f7f4 fc69 	bl	80005dc <__aeabi_dmul>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800bd12:	00c9      	lsls	r1, r1, #3
 800bd14:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800bd18:	4401      	add	r1, r0
 800bd1a:	39d0      	subs	r1, #208	; 0xd0
 800bd1c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bd20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd24:	3301      	adds	r3, #1
 800bd26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd2e:	2b05      	cmp	r3, #5
 800bd30:	ddd6      	ble.n	800bce0 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800bd32:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800bd36:	f04f 0000 	mov.w	r0, #0
 800bd3a:	4923      	ldr	r1, [pc, #140]	; (800bdc8 <qr_DvOBrgQi+0x129c>)
 800bd3c:	f7f4 fa96 	bl	800026c <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bd54:	e02d      	b.n	800bdb2 <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800bd56:	2300      	movs	r3, #0
 800bd58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd5c:	e01b      	b.n	800bd96 <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800bd5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bd62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd66:	4413      	add	r3, r2
 800bd68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800bd6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd74:	18d1      	adds	r1, r2, r3
 800bd76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd80:	4413      	add	r3, r2
 800bd82:	3bd0      	subs	r3, #208	; 0xd0
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800bd8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd90:	3301      	adds	r3, #1
 800bd92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd9a:	2b05      	cmp	r3, #5
 800bd9c:	dddf      	ble.n	800bd5e <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800bd9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bda2:	3306      	adds	r3, #6
 800bda4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800bda8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bdac:	3301      	adds	r3, #1
 800bdae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bdb2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	ddcd      	ble.n	800bd56 <qr_DvOBrgQi+0x122a>
  }
}
 800bdba:	bf00      	nop
 800bdbc:	bf00      	nop
 800bdbe:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bdb0      	pop	{r4, r5, r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	3ff00000 	.word	0x3ff00000

0800bdcc <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800bdcc:	b5b0      	push	{r4, r5, r7, lr}
 800bdce:	b092      	sub	sp, #72	; 0x48
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	ed87 0b06 	vstr	d0, [r7, #24]
 800bdd6:	ed87 1b04 	vstr	d1, [r7, #16]
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	643b      	str	r3, [r7, #64]	; 0x40
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdea:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800bdf8:	f04f 0200 	mov.w	r2, #0
 800bdfc:	f04f 0300 	mov.w	r3, #0
 800be00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800be04:	f7f4 fe52 	bl	8000aac <__aeabi_dcmpeq>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d012      	beq.n	800be34 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800be0e:	68f9      	ldr	r1, [r7, #12]
 800be10:	f04f 0200 	mov.w	r2, #0
 800be14:	4b4e      	ldr	r3, [pc, #312]	; (800bf50 <rotate_LZ7ctbe0+0x184>)
 800be16:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800be1a:	68b9      	ldr	r1, [r7, #8]
 800be1c:	f04f 0200 	mov.w	r2, #0
 800be20:	f04f 0300 	mov.w	r3, #0
 800be24:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be2e:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800be32:	e088      	b.n	800bf46 <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800be34:	f04f 0200 	mov.w	r2, #0
 800be38:	f04f 0300 	mov.w	r3, #0
 800be3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800be40:	f7f4 fe34 	bl	8000aac <__aeabi_dcmpeq>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d012      	beq.n	800be70 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	f04f 0200 	mov.w	r2, #0
 800be50:	f04f 0300 	mov.w	r3, #0
 800be54:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	4b3c      	ldr	r3, [pc, #240]	; (800bf50 <rotate_LZ7ctbe0+0x184>)
 800be60:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800be64:	6879      	ldr	r1, [r7, #4]
 800be66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be6a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800be6e:	e06a      	b.n	800bf46 <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800be70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800be78:	f7f4 f9fa 	bl	8000270 <__adddf3>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800be84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800be8c:	f7f4 fcd0 	bl	8000830 <__aeabi_ddiv>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800be98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bea0:	f7f4 fcc6 	bl	8000830 <__aeabi_ddiv>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	643b      	str	r3, [r7, #64]	; 0x40
 800beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beb6:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800beb8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800bec0:	ec45 4b11 	vmov	d1, r4, r5
 800bec4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800bec8:	f000 f90a 	bl	800c0e0 <rt_hypotd_snf>
 800becc:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800bed0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bed4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bed8:	f7f4 fcaa 	bl	8000830 <__aeabi_ddiv>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	68f9      	ldr	r1, [r7, #12]
 800bee2:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800bee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800beee:	f7f4 fc9f 	bl	8000830 <__aeabi_ddiv>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800befa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800befe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bf02:	f7f4 fb6b 	bl	80005dc <__aeabi_dmul>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf12:	f7f4 fc8d 	bl	8000830 <__aeabi_ddiv>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	68b9      	ldr	r1, [r7, #8]
 800bf1c:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800bf20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bf28:	f7f4 fb58 	bl	80005dc <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4610      	mov	r0, r2
 800bf32:	4619      	mov	r1, r3
 800bf34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bf38:	f7f4 fb50 	bl	80005dc <__aeabi_dmul>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	e9c1 2300 	strd	r2, r3, [r1]
}
 800bf46:	bf00      	nop
 800bf48:	3748      	adds	r7, #72	; 0x48
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	3ff00000 	.word	0x3ff00000

0800bf54 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800bf5a:	2340      	movs	r3, #64	; 0x40
 800bf5c:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800bf5e:	f04f 0200 	mov.w	r2, #0
 800bf62:	f04f 0300 	mov.w	r3, #0
 800bf66:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b20      	cmp	r3, #32
 800bf6e:	d10b      	bne.n	800bf88 <rtGetInf+0x34>
    inf = rtGetInfF();
 800bf70:	f000 f820 	bl	800bfb4 <rtGetInfF>
 800bf74:	ee10 3a10 	vmov	r3, s0
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7f4 fad7 	bl	800052c <__aeabi_f2d>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bf86:	e007      	b.n	800bf98 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800bf88:	4b09      	ldr	r3, [pc, #36]	; (800bfb0 <rtGetInf+0x5c>)
 800bf8a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800bf90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf94:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800bf98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf9c:	ec43 2b17 	vmov	d7, r2, r3
}
 800bfa0:	eeb0 0a47 	vmov.f32	s0, s14
 800bfa4:	eef0 0a67 	vmov.f32	s1, s15
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	7ff00000 	.word	0x7ff00000

0800bfb4 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800bfba:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800bfbe:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	ee07 3a90 	vmov	s15, r3
}
 800bfc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800bfda:	2340      	movs	r3, #64	; 0x40
 800bfdc:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800bfde:	f04f 0200 	mov.w	r2, #0
 800bfe2:	f04f 0300 	mov.w	r3, #0
 800bfe6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d10b      	bne.n	800c008 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800bff0:	f000 f820 	bl	800c034 <rtGetMinusInfF>
 800bff4:	ee10 3a10 	vmov	r3, s0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7f4 fa97 	bl	800052c <__aeabi_f2d>
 800bffe:	4602      	mov	r2, r0
 800c000:	460b      	mov	r3, r1
 800c002:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c006:	e007      	b.n	800c018 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800c008:	4b09      	ldr	r3, [pc, #36]	; (800c030 <rtGetMinusInf+0x5c>)
 800c00a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800c010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c014:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800c018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c01c:	ec43 2b17 	vmov	d7, r2, r3
}
 800c020:	eeb0 0a47 	vmov.f32	s0, s14
 800c024:	eef0 0a67 	vmov.f32	s1, s15
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	fff00000 	.word	0xfff00000

0800c034 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800c03a:	4b06      	ldr	r3, [pc, #24]	; (800c054 <rtGetMinusInfF+0x20>)
 800c03c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	ee07 3a90 	vmov	s15, r3
}
 800c044:	eeb0 0a67 	vmov.f32	s0, s15
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	ff800000 	.word	0xff800000

0800c058 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c05e:	2340      	movs	r3, #64	; 0x40
 800c060:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	f04f 0300 	mov.w	r3, #0
 800c06a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b20      	cmp	r3, #32
 800c072:	d10b      	bne.n	800c08c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800c074:	f000 f820 	bl	800c0b8 <rtGetNaNF>
 800c078:	ee10 3a10 	vmov	r3, s0
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7f4 fa55 	bl	800052c <__aeabi_f2d>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c08a:	e007      	b.n	800c09c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <rtGetNaN+0x5c>)
 800c08e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800c090:	2300      	movs	r3, #0
 800c092:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800c094:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c098:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800c09c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c0a0:	ec43 2b17 	vmov	d7, r2, r3
}
 800c0a4:	eeb0 0a47 	vmov.f32	s0, s14
 800c0a8:	eef0 0a67 	vmov.f32	s1, s15
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	fff80000 	.word	0xfff80000

0800c0b8 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800c0be:	f04f 0300 	mov.w	r3, #0
 800c0c2:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800c0c4:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <rtGetNaNF+0x24>)
 800c0c6:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	ee07 3a90 	vmov	s15, r3
}
 800c0ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	ffc00000 	.word	0xffc00000

0800c0e0 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	ed87 0b02 	vstr	d0, [r7, #8]
 800c0ea:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	613b      	str	r3, [r7, #16]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0f8:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	61bb      	str	r3, [r7, #24]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c104:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800c106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c10a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c10e:	f7f4 fcd7 	bl	8000ac0 <__aeabi_dcmplt>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d02d      	beq.n	800c174 <rt_hypotd_snf+0x94>
    a /= y;
 800c118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c11c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c120:	f7f4 fb86 	bl	8000830 <__aeabi_ddiv>
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800c12c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c134:	f7f4 fa52 	bl	80005dc <__aeabi_dmul>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4610      	mov	r0, r2
 800c13e:	4619      	mov	r1, r3
 800c140:	f04f 0200 	mov.w	r2, #0
 800c144:	4b38      	ldr	r3, [pc, #224]	; (800c228 <rt_hypotd_snf+0x148>)
 800c146:	f7f4 f893 	bl	8000270 <__adddf3>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	ec43 2b17 	vmov	d7, r2, r3
 800c152:	eeb0 0a47 	vmov.f32	s0, s14
 800c156:	eef0 0a67 	vmov.f32	s1, s15
 800c15a:	f00c f915 	bl	8018388 <sqrt>
 800c15e:	ec53 2b10 	vmov	r2, r3, d0
 800c162:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c166:	f7f4 fa39 	bl	80005dc <__aeabi_dmul>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c172:	e048      	b.n	800c206 <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800c174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c17c:	f7f4 fcbe 	bl	8000afc <__aeabi_dcmpgt>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d02d      	beq.n	800c1e2 <rt_hypotd_snf+0x102>
    y /= a;
 800c186:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c18a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c18e:	f7f4 fb4f 	bl	8000830 <__aeabi_ddiv>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800c19a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c19e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c1a2:	f7f4 fa1b 	bl	80005dc <__aeabi_dmul>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	f04f 0200 	mov.w	r2, #0
 800c1b2:	4b1d      	ldr	r3, [pc, #116]	; (800c228 <rt_hypotd_snf+0x148>)
 800c1b4:	f7f4 f85c 	bl	8000270 <__adddf3>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	ec43 2b17 	vmov	d7, r2, r3
 800c1c0:	eeb0 0a47 	vmov.f32	s0, s14
 800c1c4:	eef0 0a67 	vmov.f32	s1, s15
 800c1c8:	f00c f8de 	bl	8018388 <sqrt>
 800c1cc:	ec53 2b10 	vmov	r2, r3, d0
 800c1d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c1d4:	f7f4 fa02 	bl	80005dc <__aeabi_dmul>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c1e0:	e011      	b.n	800c206 <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800c1e2:	ed97 0b06 	vldr	d0, [r7, #24]
 800c1e6:	f000 f889 	bl	800c2fc <rtIsNaN>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10a      	bne.n	800c206 <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800c1f0:	a30b      	add	r3, pc, #44	; (adr r3, 800c220 <rt_hypotd_snf+0x140>)
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c1fa:	f7f4 f9ef 	bl	80005dc <__aeabi_dmul>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800c206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c20a:	ec43 2b17 	vmov	d7, r2, r3
}
 800c20e:	eeb0 0a47 	vmov.f32	s0, s14
 800c212:	eef0 0a67 	vmov.f32	s1, s15
 800c216:	3720      	adds	r7, #32
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	f3af 8000 	nop.w
 800c220:	667f3bcd 	.word	0x667f3bcd
 800c224:	3ff6a09e 	.word	0x3ff6a09e
 800c228:	3ff00000 	.word	0x3ff00000

0800c22c <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800c234:	f7ff ff10 	bl	800c058 <rtGetNaN>
 800c238:	eeb0 7a40 	vmov.f32	s14, s0
 800c23c:	eef0 7a60 	vmov.f32	s15, s1
 800c240:	4b16      	ldr	r3, [pc, #88]	; (800c29c <rt_InitInfAndNaN+0x70>)
 800c242:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800c246:	f7ff ff37 	bl	800c0b8 <rtGetNaNF>
 800c24a:	eef0 7a40 	vmov.f32	s15, s0
 800c24e:	4b14      	ldr	r3, [pc, #80]	; (800c2a0 <rt_InitInfAndNaN+0x74>)
 800c250:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800c254:	f7ff fe7e 	bl	800bf54 <rtGetInf>
 800c258:	eeb0 7a40 	vmov.f32	s14, s0
 800c25c:	eef0 7a60 	vmov.f32	s15, s1
 800c260:	4b10      	ldr	r3, [pc, #64]	; (800c2a4 <rt_InitInfAndNaN+0x78>)
 800c262:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800c266:	f7ff fea5 	bl	800bfb4 <rtGetInfF>
 800c26a:	eef0 7a40 	vmov.f32	s15, s0
 800c26e:	4b0e      	ldr	r3, [pc, #56]	; (800c2a8 <rt_InitInfAndNaN+0x7c>)
 800c270:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800c274:	f7ff feae 	bl	800bfd4 <rtGetMinusInf>
 800c278:	eeb0 7a40 	vmov.f32	s14, s0
 800c27c:	eef0 7a60 	vmov.f32	s15, s1
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <rt_InitInfAndNaN+0x80>)
 800c282:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800c286:	f7ff fed5 	bl	800c034 <rtGetMinusInfF>
 800c28a:	eef0 7a40 	vmov.f32	s15, s0
 800c28e:	4b08      	ldr	r3, [pc, #32]	; (800c2b0 <rt_InitInfAndNaN+0x84>)
 800c290:	edc3 7a00 	vstr	s15, [r3]
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	2001e880 	.word	0x2001e880
 800c2a0:	2001e870 	.word	0x2001e870
 800c2a4:	2001e878 	.word	0x2001e878
 800c2a8:	2001e874 	.word	0x2001e874
 800c2ac:	2001e888 	.word	0x2001e888
 800c2b0:	2001e890 	.word	0x2001e890

0800c2b4 <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800c2be:	4b0d      	ldr	r3, [pc, #52]	; (800c2f4 <rtIsInf+0x40>)
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2c8:	f7f4 fbf0 	bl	8000aac <__aeabi_dcmpeq>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d109      	bne.n	800c2e6 <rtIsInf+0x32>
 800c2d2:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <rtIsInf+0x44>)
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2dc:	f7f4 fbe6 	bl	8000aac <__aeabi_dcmpeq>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <rtIsInf+0x36>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e000      	b.n	800c2ec <rtIsInf+0x38>
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	2001e878 	.word	0x2001e878
 800c2f8:	2001e888 	.word	0x2001e888

0800c2fc <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800c306:	2300      	movs	r3, #0
 800c308:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800c30a:	2340      	movs	r3, #64	; 0x40
 800c30c:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b20      	cmp	r3, #32
 800c312:	d10b      	bne.n	800c32c <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800c314:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c318:	f7f4 fc58 	bl	8000bcc <__aeabi_d2f>
 800c31c:	4603      	mov	r3, r0
 800c31e:	ee00 3a10 	vmov	s0, r3
 800c322:	f000 f821 	bl	800c368 <rtIsNaNF>
 800c326:	4603      	mov	r3, r0
 800c328:	75fb      	strb	r3, [r7, #23]
 800c32a:	e015      	b.n	800c358 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800c32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c330:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <rtIsNaN+0x68>)
 800c338:	4013      	ands	r3, r2
 800c33a:	4a0a      	ldr	r2, [pc, #40]	; (800c364 <rtIsNaN+0x68>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d109      	bne.n	800c354 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c346:	2b00      	cmp	r3, #0
 800c348:	d102      	bne.n	800c350 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800c34a:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800c350:	2301      	movs	r3, #1
 800c352:	e000      	b.n	800c356 <rtIsNaN+0x5a>
 800c354:	2300      	movs	r3, #0
 800c356:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	7ff00000 	.word	0x7ff00000

0800c368 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800c37c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c380:	d106      	bne.n	800c390 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <rtIsNaNF+0x28>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e000      	b.n	800c392 <rtIsNaNF+0x2a>
 800c390:	2300      	movs	r3, #0
 800c392:	b2db      	uxtb	r3, r3
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800c3a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3a4:	ed2d 8b02 	vpush	{d8}
 800c3a8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800c3b2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800c3b6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800c3ba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800c3be:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800c3c0:	f04f 0200 	mov.w	r2, #0
 800c3c4:	f04f 0300 	mov.w	r3, #0
 800c3c8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800c3cc:	f04f 0200 	mov.w	r2, #0
 800c3d0:	f04f 0300 	mov.w	r3, #0
 800c3d4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800c3d8:	f04f 0200 	mov.w	r2, #0
 800c3dc:	f04f 0300 	mov.w	r3, #0
 800c3e0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800c3e4:	f04f 0200 	mov.w	r2, #0
 800c3e8:	f04f 0300 	mov.w	r3, #0
 800c3ec:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800c3f0:	f04f 0200 	mov.w	r2, #0
 800c3f4:	f04f 0300 	mov.w	r3, #0
 800c3f8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	f04f 0300 	mov.w	r3, #0
 800c404:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800c408:	2300      	movs	r3, #0
 800c40a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c40e:	e02e      	b.n	800c46e <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800c410:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c414:	00da      	lsls	r2, r3, #3
 800c416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c41a:	4413      	add	r3, r2
 800c41c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c420:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c42a:	4413      	add	r3, r2
 800c42c:	3b88      	subs	r3, #136	; 0x88
 800c42e:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800c432:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c436:	00da      	lsls	r2, r3, #3
 800c438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c43c:	1899      	adds	r1, r3, r2
 800c43e:	f04f 0200 	mov.w	r2, #0
 800c442:	f04f 0300 	mov.w	r3, #0
 800c446:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800c44a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c44e:	00da      	lsls	r2, r3, #3
 800c450:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	1899      	adds	r1, r3, r2
 800c458:	f04f 0200 	mov.w	r2, #0
 800c45c:	f04f 0300 	mov.w	r3, #0
 800c460:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800c464:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c468:	3301      	adds	r3, #1
 800c46a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c46e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c472:	2b08      	cmp	r3, #8
 800c474:	ddcc      	ble.n	800c410 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800c47c:	2300      	movs	r3, #0
 800c47e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800c482:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c486:	2201      	movs	r2, #1
 800c488:	4619      	mov	r1, r3
 800c48a:	2003      	movs	r0, #3
 800c48c:	f002 fbbc 	bl	800ec08 <xnrm2_xDOlDEtw>
 800c490:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800c494:	f04f 0200 	mov.w	r2, #0
 800c498:	f04f 0300 	mov.w	r3, #0
 800c49c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800c4a0:	f7f4 fb2c 	bl	8000afc <__aeabi_dcmpgt>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d07b      	beq.n	800c5a2 <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800c4b0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	f04f 0300 	mov.w	r3, #0
 800c4bc:	f7f4 fb00 	bl	8000ac0 <__aeabi_dcmplt>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d008      	beq.n	800c4d8 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800c4c6:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800c4ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800c4ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800c4d2:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800c4d6:	e003      	b.n	800c4e0 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800c4d8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800c4dc:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800c4e0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c4e4:	4690      	mov	r8, r2
 800c4e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800c4ea:	f04f 0200 	mov.w	r2, #0
 800c4ee:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f4 faf7 	bl	8000ae8 <__aeabi_dcmpge>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d016      	beq.n	800c52e <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800c500:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c504:	f04f 0000 	mov.w	r0, #0
 800c508:	49c1      	ldr	r1, [pc, #772]	; (800c810 <svd_u3DvUgOe+0x470>)
 800c50a:	f7f4 f991 	bl	8000830 <__aeabi_ddiv>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	ec43 2b17 	vmov	d7, r2, r3
 800c516:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c51a:	2201      	movs	r2, #1
 800c51c:	4619      	mov	r1, r3
 800c51e:	eeb0 0a47 	vmov.f32	s0, s14
 800c522:	eef0 0a67 	vmov.f32	s1, s15
 800c526:	2003      	movs	r0, #3
 800c528:	f002 fe36 	bl	800f198 <xscal_59GtRAwv>
 800c52c:	e026      	b.n	800c57c <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800c52e:	2300      	movs	r3, #0
 800c530:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c534:	e01e      	b.n	800c574 <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800c536:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c540:	4413      	add	r3, r2
 800c542:	3b88      	subs	r3, #136	; 0x88
 800c544:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c548:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c54c:	f7f4 f970 	bl	8000830 <__aeabi_ddiv>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	4610      	mov	r0, r2
 800c556:	4619      	mov	r1, r3
 800c558:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c562:	4413      	add	r3, r2
 800c564:	3b88      	subs	r3, #136	; 0x88
 800c566:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800c56a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c56e:	3301      	adds	r3, #1
 800c570:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c574:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c578:	2b02      	cmp	r3, #2
 800c57a:	dddc      	ble.n	800c536 <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800c57c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800c580:	f04f 0200 	mov.w	r2, #0
 800c584:	4ba2      	ldr	r3, [pc, #648]	; (800c810 <svd_u3DvUgOe+0x470>)
 800c586:	f7f3 fe73 	bl	8000270 <__adddf3>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800c592:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c596:	4692      	mov	sl, r2
 800c598:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800c59c:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800c5a0:	e005      	b.n	800c5ae <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800c5a2:	f04f 0200 	mov.w	r2, #0
 800c5a6:	f04f 0300 	mov.w	r3, #0
 800c5aa:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800c5b4:	e047      	b.n	800c646 <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800c5b6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800c5c4:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d025      	beq.n	800c618 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800c5cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800c5d6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	2201      	movs	r2, #1
 800c5e0:	2003      	movs	r0, #3
 800c5e2:	f001 fdf8 	bl	800e1d6 <xdotc_mznw4aLl>
 800c5e6:	ec51 0b10 	vmov	r0, r1, d0
 800c5ea:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800c5ee:	f7f4 f91f 	bl	8000830 <__aeabi_ddiv>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c5fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c5fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c602:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c606:	3301      	adds	r3, #1
 800c608:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800c60c:	2101      	movs	r1, #1
 800c60e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800c612:	2003      	movs	r0, #3
 800c614:	f001 fd8b 	bl	800e12e <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800c618:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c622:	4413      	add	r3, r2
 800c624:	3b88      	subs	r3, #136	; 0x88
 800c626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c62a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c634:	4413      	add	r3, r2
 800c636:	3bb8      	subs	r3, #184	; 0xb8
 800c638:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800c63c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c640:	3301      	adds	r3, #1
 800c642:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800c646:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	ddb3      	ble.n	800c5b6 <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800c64e:	e015      	b.n	800c67c <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800c650:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c654:	00da      	lsls	r2, r3, #3
 800c656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c65a:	1899      	adds	r1, r3, r2
 800c65c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c660:	00db      	lsls	r3, r3, #3
 800c662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c666:	4413      	add	r3, r2
 800c668:	3b88      	subs	r3, #136	; 0x88
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800c672:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c676:	3301      	adds	r3, #1
 800c678:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800c67c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c680:	2b02      	cmp	r3, #2
 800c682:	dde5      	ble.n	800c650 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800c684:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c688:	2202      	movs	r2, #2
 800c68a:	4619      	mov	r1, r3
 800c68c:	2002      	movs	r0, #2
 800c68e:	f002 f95f 	bl	800e950 <xnrm2_Rlk0oxWw>
 800c692:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800c696:	f04f 0200 	mov.w	r2, #0
 800c69a:	f04f 0300 	mov.w	r3, #0
 800c69e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800c6a2:	f7f4 fa03 	bl	8000aac <__aeabi_dcmpeq>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800c6ac:	f04f 0200 	mov.w	r2, #0
 800c6b0:	f04f 0300 	mov.w	r3, #0
 800c6b4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800c6b8:	e10d      	b.n	800c8d6 <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800c6ba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c6be:	f04f 0200 	mov.w	r2, #0
 800c6c2:	f04f 0300 	mov.w	r3, #0
 800c6c6:	f7f4 f9fb 	bl	8000ac0 <__aeabi_dcmplt>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00e      	beq.n	800c6ee <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800c6d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c6d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c6d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800c6dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c6e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c6e4:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800c6e8:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800c6ec:	e003      	b.n	800c6f6 <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800c6ee:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800c6f2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800c6f6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c6fa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800c6fe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c702:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800c706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c70a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c70e:	f04f 0200 	mov.w	r2, #0
 800c712:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c716:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800c71a:	f7f4 f9e5 	bl	8000ae8 <__aeabi_dcmpge>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d016      	beq.n	800c752 <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800c724:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c728:	f04f 0000 	mov.w	r0, #0
 800c72c:	4938      	ldr	r1, [pc, #224]	; (800c810 <svd_u3DvUgOe+0x470>)
 800c72e:	f7f4 f87f 	bl	8000830 <__aeabi_ddiv>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	ec43 2b17 	vmov	d7, r2, r3
 800c73a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c73e:	2202      	movs	r2, #2
 800c740:	4619      	mov	r1, r3
 800c742:	eeb0 0a47 	vmov.f32	s0, s14
 800c746:	eef0 0a67 	vmov.f32	s1, s15
 800c74a:	2002      	movs	r0, #2
 800c74c:	f002 fd58 	bl	800f200 <xscal_PLmmUlD2>
 800c750:	e026      	b.n	800c7a0 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800c752:	2301      	movs	r3, #1
 800c754:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c758:	e01e      	b.n	800c798 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800c75a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c764:	4413      	add	r3, r2
 800c766:	3bb8      	subs	r3, #184	; 0xb8
 800c768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c76c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800c770:	f7f4 f85e 	bl	8000830 <__aeabi_ddiv>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4610      	mov	r0, r2
 800c77a:	4619      	mov	r1, r3
 800c77c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c786:	4413      	add	r3, r2
 800c788:	3bb8      	subs	r3, #184	; 0xb8
 800c78a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800c78e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c792:	3301      	adds	r3, #1
 800c794:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c798:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	dddc      	ble.n	800c75a <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800c7a0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	4b19      	ldr	r3, [pc, #100]	; (800c810 <svd_u3DvUgOe+0x470>)
 800c7aa:	f7f3 fd61 	bl	8000270 <__adddf3>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800c7b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c7ba:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800c7be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c7c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c7c6:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800c7ca:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c7d4:	e013      	b.n	800c7fe <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800c7d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800c7e8:	f04f 0200 	mov.w	r2, #0
 800c7ec:	f04f 0300 	mov.w	r3, #0
 800c7f0:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800c7f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c7fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c802:	2b03      	cmp	r3, #3
 800c804:	dde7      	ble.n	800c7d6 <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800c806:	2301      	movs	r3, #1
 800c808:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c80c:	e025      	b.n	800c85a <svd_u3DvUgOe+0x4ba>
 800c80e:	bf00      	nop
 800c810:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800c814:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c81e:	4413      	add	r3, r2
 800c820:	3bb8      	subs	r3, #184	; 0xb8
 800c822:	ed93 7b00 	vldr	d7, [r3]
 800c826:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800c82a:	4613      	mov	r3, r2
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4413      	add	r3, r2
 800c830:	1c98      	adds	r0, r3, #2
 800c832:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c836:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800c83a:	2302      	movs	r3, #2
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	4613      	mov	r3, r2
 800c840:	4602      	mov	r2, r0
 800c842:	eeb0 0a47 	vmov.f32	s0, s14
 800c846:	eef0 0a67 	vmov.f32	s1, s15
 800c84a:	2002      	movs	r0, #2
 800c84c:	f001 fbc7 	bl	800dfde <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800c850:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c854:	3301      	adds	r3, #1
 800c856:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c85a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c85e:	2b02      	cmp	r3, #2
 800c860:	ddd8      	ble.n	800c814 <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800c862:	2301      	movs	r3, #1
 800c864:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c868:	e031      	b.n	800c8ce <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800c86a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c874:	4413      	add	r3, r2
 800c876:	3bb8      	subs	r3, #184	; 0xb8
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800c880:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c888:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c88c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c890:	f7f3 ffce 	bl	8000830 <__aeabi_ddiv>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	ec43 2b17 	vmov	d7, r2, r3
 800c89c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	005b      	lsls	r3, r3, #1
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3302      	adds	r3, #2
 800c8a8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800c8ac:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	eeb0 0a47 	vmov.f32	s0, s14
 800c8ba:	eef0 0a67 	vmov.f32	s1, s15
 800c8be:	2002      	movs	r0, #2
 800c8c0:	f001 fbe1 	bl	800e086 <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800c8c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c8ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	ddc9      	ble.n	800c86a <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c8dc:	e016      	b.n	800c90c <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800c8de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c8e2:	00da      	lsls	r2, r3, #3
 800c8e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	1899      	adds	r1, r3, r2
 800c8ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c8f6:	4413      	add	r3, r2
 800c8f8:	3bb8      	subs	r3, #184	; 0xb8
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800c902:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c906:	3301      	adds	r3, #1
 800c908:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c90c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800c910:	2b02      	cmp	r3, #2
 800c912:	dde4      	ble.n	800c8de <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800c914:	2300      	movs	r3, #0
 800c916:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800c91a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c91e:	2205      	movs	r2, #5
 800c920:	4619      	mov	r1, r3
 800c922:	2002      	movs	r0, #2
 800c924:	f002 f970 	bl	800ec08 <xnrm2_xDOlDEtw>
 800c928:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800c92c:	f04f 0200 	mov.w	r2, #0
 800c930:	f04f 0300 	mov.w	r3, #0
 800c934:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800c938:	f7f4 f8e0 	bl	8000afc <__aeabi_dcmpgt>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 808a 	beq.w	800ca58 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800c944:	2301      	movs	r3, #1
 800c946:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800c94a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800c94e:	f04f 0200 	mov.w	r2, #0
 800c952:	f04f 0300 	mov.w	r3, #0
 800c956:	f7f4 f8b3 	bl	8000ac0 <__aeabi_dcmplt>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00e      	beq.n	800c97e <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800c960:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c968:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800c96c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c970:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c974:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800c978:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800c97c:	e003      	b.n	800c986 <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800c97e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800c982:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800c986:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800c98a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800c98e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c992:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c996:	f04f 0200 	mov.w	r2, #0
 800c99a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c99e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c9a2:	f7f4 f8a1 	bl	8000ae8 <__aeabi_dcmpge>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d016      	beq.n	800c9da <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800c9ac:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800c9b0:	f04f 0000 	mov.w	r0, #0
 800c9b4:	49d6      	ldr	r1, [pc, #856]	; (800cd10 <svd_u3DvUgOe+0x970>)
 800c9b6:	f7f3 ff3b 	bl	8000830 <__aeabi_ddiv>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	ec43 2b17 	vmov	d7, r2, r3
 800c9c2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c9c6:	2205      	movs	r2, #5
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	eeb0 0a47 	vmov.f32	s0, s14
 800c9ce:	eef0 0a67 	vmov.f32	s1, s15
 800c9d2:	2002      	movs	r0, #2
 800c9d4:	f002 fbe0 	bl	800f198 <xscal_59GtRAwv>
 800c9d8:	e026      	b.n	800ca28 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800c9da:	2304      	movs	r3, #4
 800c9dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800c9e0:	e01e      	b.n	800ca20 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800c9e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800c9ec:	4413      	add	r3, r2
 800c9ee:	3b88      	subs	r3, #136	; 0x88
 800c9f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9f4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800c9f8:	f7f3 ff1a 	bl	8000830 <__aeabi_ddiv>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4610      	mov	r0, r2
 800ca02:	4619      	mov	r1, r3
 800ca04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ca0e:	4413      	add	r3, r2
 800ca10:	3b88      	subs	r3, #136	; 0x88
 800ca12:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800ca16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ca20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca24:	2b05      	cmp	r3, #5
 800ca26:	dddc      	ble.n	800c9e2 <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800ca28:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	4bb7      	ldr	r3, [pc, #732]	; (800cd10 <svd_u3DvUgOe+0x970>)
 800ca32:	f7f3 fc1d 	bl	8000270 <__adddf3>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800ca3e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ca42:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800ca46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca4e:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800ca52:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800ca56:	e005      	b.n	800ca64 <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	f04f 0300 	mov.w	r3, #0
 800ca60:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800ca64:	2302      	movs	r3, #2
 800ca66:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ca6a:	e048      	b.n	800cafe <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800ca6c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ca70:	4613      	mov	r3, r2
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	4413      	add	r3, r2
 800ca76:	3301      	adds	r3, #1
 800ca78:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800ca7c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d025      	beq.n	800cad0 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800ca84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ca88:	3301      	adds	r3, #1
 800ca8a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800ca8e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	4613      	mov	r3, r2
 800ca96:	2205      	movs	r2, #5
 800ca98:	2002      	movs	r0, #2
 800ca9a:	f001 fb9c 	bl	800e1d6 <xdotc_mznw4aLl>
 800ca9e:	ec51 0b10 	vmov	r0, r1, d0
 800caa2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800caa6:	f7f3 fec3 	bl	8000830 <__aeabi_ddiv>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800cab2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800caba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cabe:	3301      	adds	r3, #1
 800cac0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800cac4:	2105      	movs	r1, #5
 800cac6:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800caca:	2002      	movs	r0, #2
 800cacc:	f001 fb2f 	bl	800e12e <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800cad0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cada:	4413      	add	r3, r2
 800cadc:	3b88      	subs	r3, #136	; 0x88
 800cade:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cae2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800caec:	4413      	add	r3, r2
 800caee:	3bb8      	subs	r3, #184	; 0xb8
 800caf0:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800caf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800caf8:	3301      	adds	r3, #1
 800cafa:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cafe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	ddb2      	ble.n	800ca6c <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800cb06:	2301      	movs	r3, #1
 800cb08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cb0c:	e017      	b.n	800cb3e <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800cb0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb12:	1cd8      	adds	r0, r3, #3
 800cb14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb18:	3303      	adds	r3, #3
 800cb1a:	00da      	lsls	r2, r3, #3
 800cb1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cb20:	1899      	adds	r1, r3, r2
 800cb22:	00c3      	lsls	r3, r0, #3
 800cb24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cb28:	4413      	add	r3, r2
 800cb2a:	3b88      	subs	r3, #136	; 0x88
 800cb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb30:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800cb34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cb3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	dde3      	ble.n	800cb0e <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800cb46:	2301      	movs	r3, #1
 800cb48:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800cb4c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800cb50:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800cb54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cb58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800cb68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cb6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb70:	f04f 0200 	mov.w	r2, #0
 800cb74:	f04f 0300 	mov.w	r3, #0
 800cb78:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800cb7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cb80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cb84:	f04f 0200 	mov.w	r2, #0
 800cb88:	4b61      	ldr	r3, [pc, #388]	; (800cd10 <svd_u3DvUgOe+0x970>)
 800cb8a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800cb8e:	2301      	movs	r3, #1
 800cb90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cb94:	e100      	b.n	800cd98 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800cb96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800cba0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cbaa:	4413      	add	r3, r2
 800cbac:	3ba0      	subs	r3, #160	; 0xa0
 800cbae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbb2:	f04f 0200 	mov.w	r2, #0
 800cbb6:	f04f 0300 	mov.w	r3, #0
 800cbba:	f7f3 ff77 	bl	8000aac <__aeabi_dcmpeq>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f040 80a7 	bne.w	800cd14 <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800cbc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cbca:	3301      	adds	r3, #1
 800cbcc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800cbd0:	e043      	b.n	800cc5a <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800cbd2:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	441a      	add	r2, r3
 800cbdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cbe0:	4413      	add	r3, r2
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800cbe8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cbec:	f1c3 0403 	rsb	r4, r3, #3
 800cbf0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cbf4:	f1c3 0003 	rsb	r0, r3, #3
 800cbf8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cc08:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800cc0c:	f001 fae3 	bl	800e1d6 <xdotc_mznw4aLl>
 800cc10:	ec51 0b10 	vmov	r0, r1, d0
 800cc14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc18:	00da      	lsls	r2, r3, #3
 800cc1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cc1e:	4413      	add	r3, r2
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f7f3 fe04 	bl	8000830 <__aeabi_ddiv>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800cc30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cc34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cc3c:	1c59      	adds	r1, r3, #1
 800cc3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800cc46:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f001 fa6f 	bl	800e12e <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800cc50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cc54:	3301      	adds	r3, #1
 800cc56:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800cc5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	ddb7      	ble.n	800cbd2 <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800cc62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800cc6a:	e026      	b.n	800ccba <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800cc6c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cc70:	4613      	mov	r3, r2
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	441a      	add	r2, r3
 800cc76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800cc80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cc84:	00da      	lsls	r2, r3, #3
 800cc86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cc8a:	4413      	add	r3, r2
 800cc8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cc94:	00da      	lsls	r2, r3, #3
 800cc96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800cca0:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800cca4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cca8:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800ccac:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800ccb0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ccba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	ddd4      	ble.n	800cc6c <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800ccc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ccc6:	00da      	lsls	r2, r3, #3
 800ccc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cccc:	189c      	adds	r4, r3, r2
 800ccce:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ccd2:	f04f 0200 	mov.w	r2, #0
 800ccd6:	4b0e      	ldr	r3, [pc, #56]	; (800cd10 <svd_u3DvUgOe+0x970>)
 800ccd8:	f7f3 faca 	bl	8000270 <__adddf3>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800cce4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dd50      	ble.n	800cd8e <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800ccec:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	4413      	add	r3, r2
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ccfe:	1899      	adds	r1, r3, r2
 800cd00:	f04f 0200 	mov.w	r2, #0
 800cd04:	f04f 0300 	mov.w	r3, #0
 800cd08:	e9c1 2300 	strd	r2, r3, [r1]
 800cd0c:	e03f      	b.n	800cd8e <svd_u3DvUgOe+0x9ee>
 800cd0e:	bf00      	nop
 800cd10:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800cd14:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	461a      	mov	r2, r3
 800cd22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cd26:	1899      	adds	r1, r3, r2
 800cd28:	f04f 0200 	mov.w	r2, #0
 800cd2c:	f04f 0300 	mov.w	r3, #0
 800cd30:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800cd34:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cd38:	4613      	mov	r3, r2
 800cd3a:	005b      	lsls	r3, r3, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	f103 0208 	add.w	r2, r3, #8
 800cd44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cd48:	1899      	adds	r1, r3, r2
 800cd4a:	f04f 0200 	mov.w	r2, #0
 800cd4e:	f04f 0300 	mov.w	r3, #0
 800cd52:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800cd56:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	4413      	add	r3, r2
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	f103 0210 	add.w	r2, r3, #16
 800cd66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cd6a:	1899      	adds	r1, r3, r2
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	f04f 0300 	mov.w	r3, #0
 800cd74:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800cd78:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cd7c:	00da      	lsls	r2, r3, #3
 800cd7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cd82:	1899      	adds	r1, r3, r2
 800cd84:	f04f 0200 	mov.w	r2, #0
 800cd88:	4b11      	ldr	r3, [pc, #68]	; (800cdd0 <svd_u3DvUgOe+0xa30>)
 800cd8a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800cd8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cd92:	3b01      	subs	r3, #1
 800cd94:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cd98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f6bf aefa 	bge.w	800cb96 <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800cda2:	2302      	movs	r3, #2
 800cda4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cda8:	e096      	b.n	800ced8 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800cdaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dc4c      	bgt.n	800ce4c <svd_u3DvUgOe+0xaac>
 800cdb2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800cdb6:	f04f 0200 	mov.w	r2, #0
 800cdba:	f04f 0300 	mov.w	r3, #0
 800cdbe:	f7f3 fe75 	bl	8000aac <__aeabi_dcmpeq>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d141      	bne.n	800ce4c <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800cdc8:	2302      	movs	r3, #2
 800cdca:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cdce:	e039      	b.n	800ce44 <svd_u3DvUgOe+0xaa4>
 800cdd0:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800cdd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cdd8:	1e5a      	subs	r2, r3, #1
 800cdda:	4613      	mov	r3, r2
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	4413      	add	r3, r2
 800cde0:	3302      	adds	r3, #2
 800cde2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800cde6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800cdea:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800cdee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	6813      	ldr	r3, [r2, #0]
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	6809      	ldr	r1, [r1, #0]
 800cdfa:	2002      	movs	r0, #2
 800cdfc:	f001 f9eb 	bl	800e1d6 <xdotc_mznw4aLl>
 800ce00:	ec51 0b10 	vmov	r0, r1, d0
 800ce04:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3308      	adds	r3, #8
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	f7f3 fd0e 	bl	8000830 <__aeabi_ddiv>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800ce1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ce20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ce24:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800ce28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ce2c:	6812      	ldr	r2, [r2, #0]
 800ce2e:	2102      	movs	r1, #2
 800ce30:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800ce34:	2002      	movs	r0, #2
 800ce36:	f001 f97a 	bl	800e12e <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800ce3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ce3e:	3301      	adds	r3, #1
 800ce40:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ce44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	ddc3      	ble.n	800cdd4 <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800ce4c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800ce50:	4613      	mov	r3, r2
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	4413      	add	r3, r2
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	461a      	mov	r2, r3
 800ce5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	1899      	adds	r1, r3, r2
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800ce6e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800ce72:	4613      	mov	r3, r2
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	4413      	add	r3, r2
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	f103 0208 	add.w	r2, r3, #8
 800ce7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	1899      	adds	r1, r3, r2
 800ce86:	f04f 0200 	mov.w	r2, #0
 800ce8a:	f04f 0300 	mov.w	r3, #0
 800ce8e:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800ce92:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800ce96:	4613      	mov	r3, r2
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	f103 0210 	add.w	r2, r3, #16
 800cea2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	1899      	adds	r1, r3, r2
 800ceaa:	f04f 0200 	mov.w	r2, #0
 800ceae:	f04f 0300 	mov.w	r3, #0
 800ceb2:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800ceb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ceba:	015a      	lsls	r2, r3, #5
 800cebc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	1899      	adds	r1, r3, r2
 800cec4:	f04f 0200 	mov.w	r2, #0
 800cec8:	4bbd      	ldr	r3, [pc, #756]	; (800d1c0 <svd_u3DvUgOe+0xe20>)
 800ceca:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800cece:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ced2:	3b01      	subs	r3, #1
 800ced4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ced8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f6bf af64 	bge.w	800cdaa <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800cee2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800cee6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800ceea:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800ceee:	f04f 0200 	mov.w	r2, #0
 800cef2:	f04f 0300 	mov.w	r3, #0
 800cef6:	f7f3 fdd9 	bl	8000aac <__aeabi_dcmpeq>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d12a      	bne.n	800cf56 <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800cf00:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800cf04:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800cf08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf10:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800cf14:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800cf18:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800cf1c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800cf20:	f7f3 fc86 	bl	8000830 <__aeabi_ddiv>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800cf2c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800cf30:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800cf34:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800cf38:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800cf3c:	f7f3 fc78 	bl	8000830 <__aeabi_ddiv>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800cf48:	2101      	movs	r1, #1
 800cf4a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800cf4e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800cf52:	f002 f989 	bl	800f268 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800cf56:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800cf5a:	f04f 0200 	mov.w	r2, #0
 800cf5e:	f04f 0300 	mov.w	r3, #0
 800cf62:	f7f3 fda3 	bl	8000aac <__aeabi_dcmpeq>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d12b      	bne.n	800cfc4 <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800cf6c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800cf70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800cf74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf7c:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800cf80:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800cf84:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800cf88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800cf8c:	f7f3 fc50 	bl	8000830 <__aeabi_ddiv>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800cf98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800cf9c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800cfa0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800cfa4:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800cfa8:	f7f3 fb18 	bl	80005dc <__aeabi_dmul>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800cfb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800cfb8:	2104      	movs	r1, #4
 800cfba:	6818      	ldr	r0, [r3, #0]
 800cfbc:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800cfc0:	f002 f952 	bl	800f268 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800cfc4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800cfc8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800cfcc:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800cfd0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800cfd4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800cfd8:	f04f 0200 	mov.w	r2, #0
 800cfdc:	f04f 0300 	mov.w	r3, #0
 800cfe0:	f7f3 fd64 	bl	8000aac <__aeabi_dcmpeq>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d12a      	bne.n	800d040 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800cfea:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800cfee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800cff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cffa:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800cffe:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800d002:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800d006:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d00a:	f7f3 fc11 	bl	8000830 <__aeabi_ddiv>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800d016:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d01a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800d01e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800d022:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d026:	f7f3 fc03 	bl	8000830 <__aeabi_ddiv>
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800d032:	2104      	movs	r1, #4
 800d034:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d038:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d03c:	f002 f914 	bl	800f268 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800d040:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d044:	f04f 0200 	mov.w	r2, #0
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	f7f3 fd2e 	bl	8000aac <__aeabi_dcmpeq>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d12b      	bne.n	800d0ae <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800d056:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d05a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d05e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d066:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800d06a:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800d06e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d072:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d076:	f7f3 fbdb 	bl	8000830 <__aeabi_ddiv>
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800d082:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d086:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800d08a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800d08e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d092:	f7f3 faa3 	bl	80005dc <__aeabi_dmul>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800d09e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d0a2:	2107      	movs	r1, #7
 800d0a4:	6818      	ldr	r0, [r3, #0]
 800d0a6:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d0aa:	f002 f8dd 	bl	800f268 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800d0ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d0b2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800d0b6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d0ba:	f04f 0200 	mov.w	r2, #0
 800d0be:	f04f 0300 	mov.w	r3, #0
 800d0c2:	f7f3 fcf3 	bl	8000aac <__aeabi_dcmpeq>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d11e      	bne.n	800d10a <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800d0cc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d0d0:	67ba      	str	r2, [r7, #120]	; 0x78
 800d0d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0d8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800d0dc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800d0e0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d0e4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d0e8:	f7f3 fba2 	bl	8000830 <__aeabi_ddiv>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800d0f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d0f8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800d0fc:	2107      	movs	r1, #7
 800d0fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d102:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800d106:	f002 f8af 	bl	800f268 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800d10a:	f04f 0200 	mov.w	r2, #0
 800d10e:	f04f 0300 	mov.w	r3, #0
 800d112:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800d11c:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800d120:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800d124:	eeb0 1a46 	vmov.f32	s2, s12
 800d128:	eef0 1a66 	vmov.f32	s3, s13
 800d12c:	eeb0 0a47 	vmov.f32	s0, s14
 800d130:	eef0 0a67 	vmov.f32	s1, s15
 800d134:	f00b f83e 	bl	80181b4 <fmax>
 800d138:	eeb0 8a40 	vmov.f32	s16, s0
 800d13c:	eef0 8a60 	vmov.f32	s17, s1
 800d140:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800d144:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800d148:	eeb0 1a46 	vmov.f32	s2, s12
 800d14c:	eef0 1a66 	vmov.f32	s3, s13
 800d150:	eeb0 0a47 	vmov.f32	s0, s14
 800d154:	eef0 0a67 	vmov.f32	s1, s15
 800d158:	f00b f82c 	bl	80181b4 <fmax>
 800d15c:	eeb0 7a40 	vmov.f32	s14, s0
 800d160:	eef0 7a60 	vmov.f32	s15, s1
 800d164:	eeb0 1a47 	vmov.f32	s2, s14
 800d168:	eef0 1a67 	vmov.f32	s3, s15
 800d16c:	eeb0 0a48 	vmov.f32	s0, s16
 800d170:	eef0 0a68 	vmov.f32	s1, s17
 800d174:	f00b f81e 	bl	80181b4 <fmax>
 800d178:	eeb0 8a40 	vmov.f32	s16, s0
 800d17c:	eef0 8a60 	vmov.f32	s17, s1
 800d180:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800d184:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800d1b8 <svd_u3DvUgOe+0xe18>
 800d188:	eeb0 0a47 	vmov.f32	s0, s14
 800d18c:	eef0 0a67 	vmov.f32	s1, s15
 800d190:	f00b f810 	bl	80181b4 <fmax>
 800d194:	eeb0 7a40 	vmov.f32	s14, s0
 800d198:	eef0 7a60 	vmov.f32	s15, s1
 800d19c:	eeb0 1a47 	vmov.f32	s2, s14
 800d1a0:	eef0 1a67 	vmov.f32	s3, s15
 800d1a4:	eeb0 0a48 	vmov.f32	s0, s16
 800d1a8:	eef0 0a68 	vmov.f32	s1, s17
 800d1ac:	f00b f802 	bl	80181b4 <fmax>
 800d1b0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800d1b4:	f000 be8a 	b.w	800decc <svd_u3DvUgOe+0x1b2c>
	...
 800d1c0:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800d1c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800d1d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d1d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800d1dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d103      	bne.n	800d1ec <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d1ea:	e092      	b.n	800d312 <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800d1ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d1f8:	4413      	add	r3, r2
 800d1fa:	3bb8      	subs	r3, #184	; 0xb8
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	673a      	str	r2, [r7, #112]	; 0x70
 800d202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d206:	677b      	str	r3, [r7, #116]	; 0x74
 800d208:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800d20c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800d210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d214:	3b01      	subs	r3, #1
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d21c:	4413      	add	r3, r2
 800d21e:	3ba0      	subs	r3, #160	; 0xa0
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	66ba      	str	r2, [r7, #104]	; 0x68
 800d226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d22a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d22c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d236:	4413      	add	r3, r2
 800d238:	3ba0      	subs	r3, #160	; 0xa0
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	663a      	str	r2, [r7, #96]	; 0x60
 800d240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d244:	667b      	str	r3, [r7, #100]	; 0x64
 800d246:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d24a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d24e:	f7f3 f80f 	bl	8000270 <__adddf3>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4610      	mov	r0, r2
 800d258:	4619      	mov	r1, r3
 800d25a:	f04f 0200 	mov.w	r2, #0
 800d25e:	4bb2      	ldr	r3, [pc, #712]	; (800d528 <svd_u3DvUgOe+0x1188>)
 800d260:	f7f3 f9bc 	bl	80005dc <__aeabi_dmul>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4610      	mov	r0, r2
 800d26a:	4619      	mov	r1, r3
 800d26c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d270:	f7f3 fc3a 	bl	8000ae8 <__aeabi_dcmpge>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d012      	beq.n	800d2a0 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800d27a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d27e:	3b01      	subs	r3, #1
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d286:	4413      	add	r3, r2
 800d288:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d28c:	f04f 0200 	mov.w	r2, #0
 800d290:	f04f 0300 	mov.w	r3, #0
 800d294:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800d298:	2301      	movs	r3, #1
 800d29a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d29e:	e038      	b.n	800d312 <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800d2a0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d2a4:	f04f 0200 	mov.w	r2, #0
 800d2a8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d2ac:	f7f3 fc12 	bl	8000ad4 <__aeabi_dcmple>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d115      	bne.n	800d2e2 <svd_u3DvUgOe+0xf42>
 800d2b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2ba:	2b14      	cmp	r3, #20
 800d2bc:	dd24      	ble.n	800d308 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800d2be:	f04f 0200 	mov.w	r2, #0
 800d2c2:	4b99      	ldr	r3, [pc, #612]	; (800d528 <svd_u3DvUgOe+0x1188>)
 800d2c4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d2c8:	f7f3 f988 	bl	80005dc <__aeabi_dmul>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800d2d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d2d8:	f7f3 fc06 	bl	8000ae8 <__aeabi_dcmpge>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d012      	beq.n	800d308 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800d2e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d2f4:	f04f 0200 	mov.w	r2, #0
 800d2f8:	f04f 0300 	mov.w	r3, #0
 800d2fc:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800d300:	2301      	movs	r3, #1
 800d302:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d306:	e004      	b.n	800d312 <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800d308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d30c:	3b01      	subs	r3, #1
 800d30e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800d312:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800d316:	2b00      	cmp	r3, #0
 800d318:	f43f af59 	beq.w	800d1ce <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800d31c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d320:	1c5a      	adds	r2, r3, #1
 800d322:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d326:	4293      	cmp	r3, r2
 800d328:	d103      	bne.n	800d332 <svd_u3DvUgOe+0xf92>
      kase = 4;
 800d32a:	2304      	movs	r3, #4
 800d32c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d330:	e0c7      	b.n	800d4c2 <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800d332:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d336:	3302      	adds	r3, #2
 800d338:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800d33c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d340:	3302      	adds	r3, #2
 800d342:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800d346:	2300      	movs	r3, #0
 800d348:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800d34c:	e092      	b.n	800d474 <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800d34e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d352:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800d356:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800d35a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d35e:	429a      	cmp	r2, r3
 800d360:	d103      	bne.n	800d36a <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800d362:	2301      	movs	r3, #1
 800d364:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800d368:	e084      	b.n	800d474 <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800d36a:	f04f 0200 	mov.w	r2, #0
 800d36e:	f04f 0300 	mov.w	r3, #0
 800d372:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800d376:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d380:	4293      	cmp	r3, r2
 800d382:	dc11      	bgt.n	800d3a8 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800d384:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d388:	3b01      	subs	r3, #1
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d390:	4413      	add	r3, r2
 800d392:	3bb8      	subs	r3, #184	; 0xb8
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	65ba      	str	r2, [r7, #88]	; 0x58
 800d39a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d39e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3a0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800d3a4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800d3a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d3ac:	1c5a      	adds	r2, r3, #1
 800d3ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	dd17      	ble.n	800d3e6 <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800d3b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d3ba:	3b02      	subs	r3, #2
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3c2:	4413      	add	r3, r2
 800d3c4:	3bb8      	subs	r3, #184	; 0xb8
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	653a      	str	r2, [r7, #80]	; 0x50
 800d3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d0:	657b      	str	r3, [r7, #84]	; 0x54
 800d3d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d3d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d3da:	f7f2 ff49 	bl	8000270 <__adddf3>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800d3e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	00db      	lsls	r3, r3, #3
 800d3ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3f2:	4413      	add	r3, r2
 800d3f4:	3ba0      	subs	r3, #160	; 0xa0
 800d3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d3fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d400:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d402:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800d406:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800d40a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d40e:	f04f 0200 	mov.w	r2, #0
 800d412:	4b45      	ldr	r3, [pc, #276]	; (800d528 <svd_u3DvUgOe+0x1188>)
 800d414:	f7f3 f8e2 	bl	80005dc <__aeabi_dmul>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4610      	mov	r0, r2
 800d41e:	4619      	mov	r1, r3
 800d420:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d424:	f7f3 fb60 	bl	8000ae8 <__aeabi_dcmpge>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10a      	bne.n	800d444 <svd_u3DvUgOe+0x10a4>
 800d42e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d432:	f04f 0200 	mov.w	r2, #0
 800d436:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d43a:	f7f3 fb4b 	bl	8000ad4 <__aeabi_dcmple>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d012      	beq.n	800d46a <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800d444:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d448:	3b01      	subs	r3, #1
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d450:	4413      	add	r3, r2
 800d452:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	f04f 0300 	mov.w	r3, #0
 800d45e:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800d462:	2301      	movs	r3, #1
 800d464:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800d468:	e004      	b.n	800d474 <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800d46a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800d46e:	3b01      	subs	r3, #1
 800d470:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800d474:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d106      	bne.n	800d48a <svd_u3DvUgOe+0x10ea>
 800d47c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800d480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d484:	429a      	cmp	r2, r3
 800d486:	f6bf af62 	bge.w	800d34e <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800d48a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800d48e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d492:	429a      	cmp	r2, r3
 800d494:	d103      	bne.n	800d49e <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800d496:	2303      	movs	r3, #3
 800d498:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d49c:	e011      	b.n	800d4c2 <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800d49e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d4a2:	1c9a      	adds	r2, r3, #2
 800d4a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d103      	bne.n	800d4b4 <svd_u3DvUgOe+0x1114>
        kase = 1;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800d4b2:	e006      	b.n	800d4c2 <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800d4ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4be:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800d4c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	f000 8113 	beq.w	800d6f2 <svd_u3DvUgOe+0x1352>
 800d4cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	f300 8443 	bgt.w	800dd5c <svd_u3DvUgOe+0x19bc>
 800d4d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d005      	beq.n	800d4ea <svd_u3DvUgOe+0x114a>
 800d4de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d07b      	beq.n	800d5de <svd_u3DvUgOe+0x123e>
 800d4e6:	f000 bc39 	b.w	800dd5c <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800d4ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4f4:	4413      	add	r3, r2
 800d4f6:	3bb8      	subs	r3, #184	; 0xb8
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800d500:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d50a:	4413      	add	r3, r2
 800d50c:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	f04f 0300 	mov.w	r3, #0
 800d518:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800d51c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d520:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d524:	e053      	b.n	800d5ce <svd_u3DvUgOe+0x122e>
 800d526:	bf00      	nop
 800d528:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800d52c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800d530:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	18d0      	adds	r0, r2, r3
 800d538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d53c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d540:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800d544:	f001 fd2a 	bl	800ef9c <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800d548:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800d54c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d550:	429a      	cmp	r2, r3
 800d552:	dd19      	ble.n	800d588 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800d554:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d558:	643a      	str	r2, [r7, #64]	; 0x40
 800d55a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d55e:	647b      	str	r3, [r7, #68]	; 0x44
 800d560:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d564:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d568:	f7f3 f838 	bl	80005dc <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800d574:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d578:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d57c:	f7f3 f82e 	bl	80005dc <__aeabi_dmul>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800d588:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800d58c:	4613      	mov	r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	4413      	add	r3, r2
 800d592:	1c59      	adds	r1, r3, #1
 800d594:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	4613      	mov	r3, r2
 800d59c:	005b      	lsls	r3, r3, #1
 800d59e:	4413      	add	r3, r2
 800d5a0:	1c5a      	adds	r2, r3, #1
 800d5a2:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800d5a6:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800d5aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d5ae:	eeb0 1a46 	vmov.f32	s2, s12
 800d5b2:	eef0 1a66 	vmov.f32	s3, s13
 800d5b6:	eeb0 0a47 	vmov.f32	s0, s14
 800d5ba:	eef0 0a67 	vmov.f32	s1, s15
 800d5be:	6818      	ldr	r0, [r3, #0]
 800d5c0:	f001 fbd0 	bl	800ed64 <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800d5c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d5ce:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800d5d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	daa8      	bge.n	800d52c <svd_u3DvUgOe+0x118c>
      }
      break;
 800d5da:	f000 bc77 	b.w	800decc <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800d5de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	00db      	lsls	r3, r3, #3
 800d5e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5ea:	4413      	add	r3, r2
 800d5ec:	3bb8      	subs	r3, #184	; 0xb8
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800d5f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d602:	4413      	add	r3, r2
 800d604:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800d608:	f04f 0200 	mov.w	r2, #0
 800d60c:	f04f 0300 	mov.w	r3, #0
 800d610:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800d614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d618:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d61c:	e061      	b.n	800d6e2 <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800d61e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800d622:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d626:	00db      	lsls	r3, r3, #3
 800d628:	18d0      	adds	r0, r2, r3
 800d62a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d62e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d632:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800d636:	f001 fcb1 	bl	800ef9c <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800d63a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d63e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d640:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d646:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d650:	4413      	add	r3, r2
 800d652:	3bb8      	subs	r3, #184	; 0xb8
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d65c:	f7f2 ffbe 	bl	80005dc <__aeabi_dmul>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800d668:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d672:	4413      	add	r3, r2
 800d674:	3bb8      	subs	r3, #184	; 0xb8
 800d676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d67a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d67e:	f7f2 ffad 	bl	80005dc <__aeabi_dmul>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4610      	mov	r0, r2
 800d688:	4619      	mov	r1, r3
 800d68a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d694:	4413      	add	r3, r2
 800d696:	3bb8      	subs	r3, #184	; 0xb8
 800d698:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800d69c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	005b      	lsls	r3, r3, #1
 800d6a4:	4413      	add	r3, r2
 800d6a6:	1c59      	adds	r1, r3, #1
 800d6a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d6ac:	1e5a      	subs	r2, r3, #1
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4413      	add	r3, r2
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800d6ba:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800d6be:	eeb0 1a46 	vmov.f32	s2, s12
 800d6c2:	eef0 1a66 	vmov.f32	s3, s13
 800d6c6:	eeb0 0a47 	vmov.f32	s0, s14
 800d6ca:	eef0 0a67 	vmov.f32	s1, s15
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800d6d4:	f001 fb46 	bl	800ed64 <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800d6d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d6dc:	3301      	adds	r3, #1
 800d6de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d6e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	dd96      	ble.n	800d61e <svd_u3DvUgOe+0x127e>
      }
      break;
 800d6f0:	e3ec      	b.n	800decc <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800d6f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6fe:	4413      	add	r3, r2
 800d700:	3ba0      	subs	r3, #160	; 0xa0
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800d70a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d70e:	633a      	str	r2, [r7, #48]	; 0x30
 800d710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d714:	637b      	str	r3, [r7, #52]	; 0x34
 800d716:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d720:	4413      	add	r3, r2
 800d722:	3ba0      	subs	r3, #160	; 0xa0
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	62ba      	str	r2, [r7, #40]	; 0x28
 800d72a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d730:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800d734:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800d738:	f00a fd3c 	bl	80181b4 <fmax>
 800d73c:	eeb0 7a40 	vmov.f32	s14, s0
 800d740:	eef0 7a60 	vmov.f32	s15, s1
 800d744:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d74e:	4413      	add	r3, r2
 800d750:	3bb8      	subs	r3, #184	; 0xb8
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	623a      	str	r2, [r7, #32]
 800d758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
 800d75e:	ed97 1b08 	vldr	d1, [r7, #32]
 800d762:	eeb0 0a47 	vmov.f32	s0, s14
 800d766:	eef0 0a67 	vmov.f32	s1, s15
 800d76a:	f00a fd23 	bl	80181b4 <fmax>
 800d76e:	eeb0 7a40 	vmov.f32	s14, s0
 800d772:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800d776:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d780:	4413      	add	r3, r2
 800d782:	3ba0      	subs	r3, #160	; 0xa0
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800d788:	61ba      	str	r2, [r7, #24]
 800d78a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d78e:	61fb      	str	r3, [r7, #28]
 800d790:	ed97 1b06 	vldr	d1, [r7, #24]
 800d794:	eeb0 0a47 	vmov.f32	s0, s14
 800d798:	eef0 0a67 	vmov.f32	s1, s15
 800d79c:	f00a fd0a 	bl	80181b4 <fmax>
 800d7a0:	eeb0 7a40 	vmov.f32	s14, s0
 800d7a4:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800d7a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7b2:	4413      	add	r3, r2
 800d7b4:	3bb8      	subs	r3, #184	; 0xb8
 800d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800d7ba:	613a      	str	r2, [r7, #16]
 800d7bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7c0:	617b      	str	r3, [r7, #20]
 800d7c2:	ed97 1b04 	vldr	d1, [r7, #16]
 800d7c6:	eeb0 0a47 	vmov.f32	s0, s14
 800d7ca:	eef0 0a67 	vmov.f32	s1, s15
 800d7ce:	f00a fcf1 	bl	80181b4 <fmax>
 800d7d2:	eeb0 7a40 	vmov.f32	s14, s0
 800d7d6:	eef0 7a60 	vmov.f32	s15, s1
 800d7da:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800d7de:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d7e2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d7e6:	f7f3 f823 	bl	8000830 <__aeabi_ddiv>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800d7f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7fc:	4413      	add	r3, r2
 800d7fe:	3ba0      	subs	r3, #160	; 0xa0
 800d800:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d804:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d808:	f7f3 f812 	bl	8000830 <__aeabi_ddiv>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800d814:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d81e:	4413      	add	r3, r2
 800d820:	3bb8      	subs	r3, #184	; 0xb8
 800d822:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d826:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d82a:	f7f3 f801 	bl	8000830 <__aeabi_ddiv>
 800d82e:	4602      	mov	r2, r0
 800d830:	460b      	mov	r3, r1
 800d832:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800d836:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d840:	4413      	add	r3, r2
 800d842:	3ba0      	subs	r3, #160	; 0xa0
 800d844:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d848:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d84c:	f7f2 fff0 	bl	8000830 <__aeabi_ddiv>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800d858:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d85c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d860:	f7f2 fd06 	bl	8000270 <__adddf3>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4614      	mov	r4, r2
 800d86a:	461d      	mov	r5, r3
 800d86c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d870:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d874:	f7f2 fcfa 	bl	800026c <__aeabi_dsub>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f2 feac 	bl	80005dc <__aeabi_dmul>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	4614      	mov	r4, r2
 800d88a:	461d      	mov	r5, r3
 800d88c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800d890:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800d894:	f7f2 fea2 	bl	80005dc <__aeabi_dmul>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	4620      	mov	r0, r4
 800d89e:	4629      	mov	r1, r5
 800d8a0:	f7f2 fce6 	bl	8000270 <__adddf3>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	f04f 0200 	mov.w	r2, #0
 800d8b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8b4:	f7f2 ffbc 	bl	8000830 <__aeabi_ddiv>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800d8c0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d8c4:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800d8c8:	f7f2 fe88 	bl	80005dc <__aeabi_dmul>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800d8d4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800d8d8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800d8dc:	f7f2 fe7e 	bl	80005dc <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800d8e8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d8ec:	f04f 0200 	mov.w	r2, #0
 800d8f0:	f04f 0300 	mov.w	r3, #0
 800d8f4:	f7f3 f8da 	bl	8000aac <__aeabi_dcmpeq>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00a      	beq.n	800d914 <svd_u3DvUgOe+0x1574>
 800d8fe:	f04f 0200 	mov.w	r2, #0
 800d902:	f04f 0300 	mov.w	r3, #0
 800d906:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800d90a:	f7f3 f8cf 	bl	8000aac <__aeabi_dcmpeq>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d13f      	bne.n	800d994 <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800d914:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d918:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d91c:	f7f2 fe5e 	bl	80005dc <__aeabi_dmul>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4610      	mov	r0, r2
 800d926:	4619      	mov	r1, r3
 800d928:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800d92c:	f7f2 fca0 	bl	8000270 <__adddf3>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	ec43 2b17 	vmov	d7, r2, r3
 800d938:	eeb0 0a47 	vmov.f32	s0, s14
 800d93c:	eef0 0a67 	vmov.f32	s1, s15
 800d940:	f00a fd22 	bl	8018388 <sqrt>
 800d944:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800d948:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d94c:	f04f 0200 	mov.w	r2, #0
 800d950:	f04f 0300 	mov.w	r3, #0
 800d954:	f7f3 f8b4 	bl	8000ac0 <__aeabi_dcmplt>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d009      	beq.n	800d972 <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800d95e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800d962:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800d966:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800d96a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d96e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800d972:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d976:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800d97a:	f7f2 fc79 	bl	8000270 <__adddf3>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800d986:	f7f2 ff53 	bl	8000830 <__aeabi_ddiv>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800d992:	e005      	b.n	800d9a0 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800d994:	f04f 0200 	mov.w	r2, #0
 800d998:	f04f 0300 	mov.w	r3, #0
 800d99c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800d9a0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d9a4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d9a8:	f7f2 fc62 	bl	8000270 <__adddf3>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4614      	mov	r4, r2
 800d9b2:	461d      	mov	r5, r3
 800d9b4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800d9b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d9bc:	f7f2 fc56 	bl	800026c <__aeabi_dsub>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	f7f2 fe08 	bl	80005dc <__aeabi_dmul>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800d9d8:	f7f2 fc4a 	bl	8000270 <__adddf3>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800d9e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d9ee:	4413      	add	r3, r2
 800d9f0:	3bb8      	subs	r3, #184	; 0xb8
 800d9f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800d9fa:	f7f2 ff19 	bl	8000830 <__aeabi_ddiv>
 800d9fe:	4602      	mov	r2, r0
 800da00:	460b      	mov	r3, r1
 800da02:	4610      	mov	r0, r2
 800da04:	4619      	mov	r1, r3
 800da06:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800da0a:	f7f2 fde7 	bl	80005dc <__aeabi_dmul>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800da16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da1a:	3301      	adds	r3, #1
 800da1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800da20:	e183      	b.n	800dd2a <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800da22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800da26:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800da2a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800da2e:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800da32:	f001 fab3 	bl	800ef9c <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800da36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da40:	4293      	cmp	r3, r2
 800da42:	dd03      	ble.n	800da4c <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800da44:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800da48:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800da4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da50:	3b01      	subs	r3, #1
 800da52:	00db      	lsls	r3, r3, #3
 800da54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da58:	4413      	add	r3, r2
 800da5a:	3bb8      	subs	r3, #184	; 0xb8
 800da5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da60:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800da64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da68:	3b01      	subs	r3, #1
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da70:	4413      	add	r3, r2
 800da72:	3ba0      	subs	r3, #160	; 0xa0
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800da7c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800da80:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800da84:	f7f2 fdaa 	bl	80005dc <__aeabi_dmul>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4690      	mov	r8, r2
 800da8e:	4699      	mov	r9, r3
 800da90:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800da94:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800da98:	f7f2 fda0 	bl	80005dc <__aeabi_dmul>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	4610      	mov	r0, r2
 800daa2:	4619      	mov	r1, r3
 800daa4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800daa8:	1e5c      	subs	r4, r3, #1
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4640      	mov	r0, r8
 800dab0:	4649      	mov	r1, r9
 800dab2:	f7f2 fbdb 	bl	800026c <__aeabi_dsub>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4610      	mov	r0, r2
 800dabc:	4619      	mov	r1, r3
 800dabe:	00e3      	lsls	r3, r4, #3
 800dac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dac4:	4413      	add	r3, r2
 800dac6:	3bb8      	subs	r3, #184	; 0xb8
 800dac8:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800dacc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dad0:	00db      	lsls	r3, r3, #3
 800dad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dad6:	4413      	add	r3, r2
 800dad8:	3ba0      	subs	r3, #160	; 0xa0
 800dada:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dade:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dae2:	f7f2 fd7b 	bl	80005dc <__aeabi_dmul>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800daee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800daf8:	4413      	add	r3, r2
 800dafa:	3ba0      	subs	r3, #160	; 0xa0
 800dafc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db00:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800db04:	f7f2 fd6a 	bl	80005dc <__aeabi_dmul>
 800db08:	4602      	mov	r2, r0
 800db0a:	460b      	mov	r3, r1
 800db0c:	4610      	mov	r0, r2
 800db0e:	4619      	mov	r1, r3
 800db10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db14:	00db      	lsls	r3, r3, #3
 800db16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800db1a:	4413      	add	r3, r2
 800db1c:	3ba0      	subs	r3, #160	; 0xa0
 800db1e:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800db22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db26:	1e5a      	subs	r2, r3, #1
 800db28:	4613      	mov	r3, r2
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	4413      	add	r3, r2
 800db2e:	1c59      	adds	r1, r3, #1
 800db30:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800db34:	4613      	mov	r3, r2
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	4413      	add	r3, r2
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800db40:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800db44:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800db48:	eeb0 1a46 	vmov.f32	s2, s12
 800db4c:	eef0 1a66 	vmov.f32	s3, s13
 800db50:	eeb0 0a47 	vmov.f32	s0, s14
 800db54:	eef0 0a67 	vmov.f32	s1, s15
 800db58:	6818      	ldr	r0, [r3, #0]
 800db5a:	f001 f903 	bl	800ed64 <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800db5e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800db62:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800db66:	f7f2 fd39 	bl	80005dc <__aeabi_dmul>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	4690      	mov	r8, r2
 800db70:	4699      	mov	r9, r3
 800db72:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800db76:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800db7a:	f7f2 fd2f 	bl	80005dc <__aeabi_dmul>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4610      	mov	r0, r2
 800db84:	4619      	mov	r1, r3
 800db86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db8a:	1e5c      	subs	r4, r3, #1
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4640      	mov	r0, r8
 800db92:	4649      	mov	r1, r9
 800db94:	f7f2 fb6c 	bl	8000270 <__adddf3>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	4610      	mov	r0, r2
 800db9e:	4619      	mov	r1, r3
 800dba0:	00e3      	lsls	r3, r4, #3
 800dba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dba6:	4413      	add	r3, r2
 800dba8:	3ba0      	subs	r3, #160	; 0xa0
 800dbaa:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800dbae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	18d0      	adds	r0, r2, r3
 800dbbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dbc0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800dbc4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800dbc8:	f001 f9e8 	bl	800ef9c <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800dbcc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dbd8:	4413      	add	r3, r2
 800dbda:	3bb8      	subs	r3, #184	; 0xb8
 800dbdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbe0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dbe4:	f7f2 fcfa 	bl	80005dc <__aeabi_dmul>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4614      	mov	r4, r2
 800dbee:	461d      	mov	r5, r3
 800dbf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dbfa:	4413      	add	r3, r2
 800dbfc:	3ba0      	subs	r3, #160	; 0xa0
 800dbfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc02:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dc06:	f7f2 fce9 	bl	80005dc <__aeabi_dmul>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4620      	mov	r0, r4
 800dc10:	4629      	mov	r1, r5
 800dc12:	f7f2 fb2d 	bl	8000270 <__adddf3>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800dc1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc22:	3b01      	subs	r3, #1
 800dc24:	00db      	lsls	r3, r3, #3
 800dc26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc2a:	4413      	add	r3, r2
 800dc2c:	3bb8      	subs	r3, #184	; 0xb8
 800dc2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc32:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dc36:	60ba      	str	r2, [r7, #8]
 800dc38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc42:	f7f2 fccb 	bl	80005dc <__aeabi_dmul>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4614      	mov	r4, r2
 800dc4c:	461d      	mov	r5, r3
 800dc4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc58:	4413      	add	r3, r2
 800dc5a:	3ba0      	subs	r3, #160	; 0xa0
 800dc5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc60:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dc64:	f7f2 fcba 	bl	80005dc <__aeabi_dmul>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	4629      	mov	r1, r5
 800dc70:	f7f2 fafe 	bl	8000270 <__adddf3>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	4610      	mov	r0, r2
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc86:	4413      	add	r3, r2
 800dc88:	3ba0      	subs	r3, #160	; 0xa0
 800dc8a:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800dc8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dc98:	4413      	add	r3, r2
 800dc9a:	3bb8      	subs	r3, #184	; 0xb8
 800dc9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dca0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dca4:	f7f2 fc9a 	bl	80005dc <__aeabi_dmul>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800dcb0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dcba:	4413      	add	r3, r2
 800dcbc:	3bb8      	subs	r3, #184	; 0xb8
 800dcbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcc2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800dcc6:	f7f2 fc89 	bl	80005dc <__aeabi_dmul>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4610      	mov	r0, r2
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dcdc:	4413      	add	r3, r2
 800dcde:	3bb8      	subs	r3, #184	; 0xb8
 800dce0:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800dce4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dce8:	1e5a      	subs	r2, r3, #1
 800dcea:	4613      	mov	r3, r2
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4413      	add	r3, r2
 800dcf0:	1c59      	adds	r1, r3, #1
 800dcf2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	4413      	add	r3, r2
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800dd02:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800dd06:	eeb0 1a46 	vmov.f32	s2, s12
 800dd0a:	eef0 1a66 	vmov.f32	s3, s13
 800dd0e:	eeb0 0a47 	vmov.f32	s0, s14
 800dd12:	eef0 0a67 	vmov.f32	s1, s15
 800dd16:	461a      	mov	r2, r3
 800dd18:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dd1c:	f001 f822 	bl	800ed64 <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800dd20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd24:	3301      	adds	r3, #1
 800dd26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dd2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dd2e:	1c5a      	adds	r2, r3, #1
 800dd30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd34:	4293      	cmp	r3, r2
 800dd36:	f77f ae74 	ble.w	800da22 <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800dd3a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800dd3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd48:	4413      	add	r3, r2
 800dd4a:	3bb8      	subs	r3, #184	; 0xb8
 800dd4c:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800dd50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd54:	3301      	adds	r3, #1
 800dd56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800dd5a:	e0b7      	b.n	800decc <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800dd5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd60:	00db      	lsls	r3, r3, #3
 800dd62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd66:	4413      	add	r3, r2
 800dd68:	3ba0      	subs	r3, #160	; 0xa0
 800dd6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd6e:	f04f 0200 	mov.w	r2, #0
 800dd72:	f04f 0300 	mov.w	r3, #0
 800dd76:	f7f2 fea3 	bl	8000ac0 <__aeabi_dcmplt>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d025      	beq.n	800ddcc <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800dd80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dd8a:	4413      	add	r3, r2
 800dd8c:	3ba0      	subs	r3, #160	; 0xa0
 800dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd92:	603a      	str	r2, [r7, #0]
 800dd94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dd98:	607b      	str	r3, [r7, #4]
 800dd9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd9e:	00db      	lsls	r3, r3, #3
 800dda0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dda4:	4413      	add	r3, r2
 800dda6:	3ba0      	subs	r3, #160	; 0xa0
 800dda8:	ed97 7b00 	vldr	d7, [r7]
 800ddac:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800ddb0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	4413      	add	r3, r2
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	6818      	ldr	r0, [r3, #0]
 800ddc4:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800df20 <svd_u3DvUgOe+0x1b80>
 800ddc8:	f001 fa4e 	bl	800f268 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800ddcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800ddd6:	e055      	b.n	800de84 <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800ddd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dde2:	4413      	add	r3, r2
 800dde4:	3ba0      	subs	r3, #160	; 0xa0
 800dde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800ddee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ddf2:	00db      	lsls	r3, r3, #3
 800ddf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ddf8:	4413      	add	r3, r2
 800ddfa:	3ba0      	subs	r3, #160	; 0xa0
 800ddfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800de0a:	4413      	add	r3, r2
 800de0c:	3ba0      	subs	r3, #160	; 0xa0
 800de0e:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800de12:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800de16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800de20:	4413      	add	r3, r2
 800de22:	3ba0      	subs	r3, #160	; 0xa0
 800de24:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800de28:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800de2c:	4613      	mov	r3, r2
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	4413      	add	r3, r2
 800de32:	1c59      	adds	r1, r3, #1
 800de34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	4613      	mov	r3, r2
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	4413      	add	r3, r2
 800de40:	3301      	adds	r3, #1
 800de42:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800de46:	461a      	mov	r2, r3
 800de48:	6800      	ldr	r0, [r0, #0]
 800de4a:	f001 fa3c 	bl	800f2c6 <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800de4e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800de52:	4613      	mov	r3, r2
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	4413      	add	r3, r2
 800de58:	1c59      	adds	r1, r3, #1
 800de5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	4613      	mov	r3, r2
 800de62:	005b      	lsls	r3, r3, #1
 800de64:	4413      	add	r3, r2
 800de66:	3301      	adds	r3, #1
 800de68:	461a      	mov	r2, r3
 800de6a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800de6e:	f001 fa2a 	bl	800f2c6 <xswap_JoAqPjUv>
        d = qq;
 800de72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de76:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800de7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de7e:	3301      	adds	r3, #1
 800de80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800de84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de88:	2b01      	cmp	r3, #1
 800de8a:	dc16      	bgt.n	800deba <svd_u3DvUgOe+0x1b1a>
 800de8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800de96:	4413      	add	r3, r2
 800de98:	3ba0      	subs	r3, #160	; 0xa0
 800de9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dea8:	4413      	add	r3, r2
 800deaa:	3ba0      	subs	r3, #160	; 0xa0
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	f7f2 fe06 	bl	8000ac0 <__aeabi_dcmplt>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d18e      	bne.n	800ddd8 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800dec0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800dec4:	3b01      	subs	r3, #1
 800dec6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800deca:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800decc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ded0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded4:	db04      	blt.n	800dee0 <svd_u3DvUgOe+0x1b40>
 800ded6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800deda:	2b4a      	cmp	r3, #74	; 0x4a
 800dedc:	f77f a972 	ble.w	800d1c4 <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800dee0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800dee4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800dee8:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800deec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800def0:	f103 0108 	add.w	r1, r3, #8
 800def4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800def8:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800defc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df00:	f103 0110 	add.w	r1, r3, #16
 800df04:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800df08:	e9c1 2300 	strd	r2, r3, [r1]
}
 800df0c:	bf00      	nop
 800df0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800df12:	46bd      	mov	sp, r7
 800df14:	ecbd 8b02 	vpop	{d8}
 800df18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df1c:	f3af 8000 	nop.w
 800df20:	00000000 	.word	0x00000000
 800df24:	bff00000 	.word	0xbff00000

0800df28 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800df28:	b590      	push	{r4, r7, lr}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	ed87 0b02 	vstr	d0, [r7, #8]
 800df32:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df3a:	f04f 0200 	mov.w	r2, #0
 800df3e:	f04f 0300 	mov.w	r3, #0
 800df42:	f7f2 fdb3 	bl	8000aac <__aeabi_dcmpeq>
 800df46:	4603      	mov	r3, r0
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10b      	bne.n	800df64 <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df56:	f7f2 fc6b 	bl	8000830 <__aeabi_ddiv>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3308      	adds	r3, #8
 800df68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df6c:	f04f 0200 	mov.w	r2, #0
 800df70:	f04f 0300 	mov.w	r3, #0
 800df74:	f7f2 fd9a 	bl	8000aac <__aeabi_dcmpeq>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10e      	bne.n	800df9c <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3308      	adds	r3, #8
 800df82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f103 0408 	add.w	r4, r3, #8
 800df8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df90:	f7f2 fc4e 	bl	8000830 <__aeabi_ddiv>
 800df94:	4602      	mov	r2, r0
 800df96:	460b      	mov	r3, r1
 800df98:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3310      	adds	r3, #16
 800dfa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfa4:	f04f 0200 	mov.w	r2, #0
 800dfa8:	f04f 0300 	mov.w	r3, #0
 800dfac:	f7f2 fd7e 	bl	8000aac <__aeabi_dcmpeq>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d000      	beq.n	800dfb8 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800dfb6:	e00e      	b.n	800dfd6 <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3310      	adds	r3, #16
 800dfbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f103 0410 	add.w	r4, r3, #16
 800dfc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dfca:	f7f2 fc31 	bl	8000830 <__aeabi_ddiv>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	e9c4 2300 	strd	r2, r3, [r4]
}
 800dfd6:	bf00      	nop
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd90      	pop	{r4, r7, pc}

0800dfde <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800dfde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe0:	b08b      	sub	sp, #44	; 0x2c
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6178      	str	r0, [r7, #20]
 800dfe6:	ed87 0b02 	vstr	d0, [r7, #8]
 800dfea:	6139      	str	r1, [r7, #16]
 800dfec:	607a      	str	r2, [r7, #4]
 800dfee:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	dd43      	ble.n	800e07e <xaxpy_OQ28XA21+0xa0>
 800dff6:	f04f 0200 	mov.w	r2, #0
 800dffa:	f04f 0300 	mov.w	r3, #0
 800dffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e002:	f7f2 fd53 	bl	8000aac <__aeabi_dcmpeq>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d000      	beq.n	800e00e <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800e00c:	e037      	b.n	800e07e <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3b01      	subs	r3, #1
 800e012:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e016:	3b01      	subs	r3, #1
 800e018:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e01a:	2300      	movs	r3, #0
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
 800e01e:	e02a      	b.n	800e076 <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	683a      	ldr	r2, [r7, #0]
 800e026:	4413      	add	r3, r2
 800e028:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e02c:	6a3b      	ldr	r3, [r7, #32]
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	693a      	ldr	r2, [r7, #16]
 800e032:	4413      	add	r3, r2
 800e034:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e03c:	f7f2 face 	bl	80005dc <__aeabi_dmul>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4610      	mov	r0, r2
 800e046:	4619      	mov	r1, r3
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	18d6      	adds	r6, r2, r3
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4620      	mov	r0, r4
 800e056:	4629      	mov	r1, r5
 800e058:	f7f2 f90a 	bl	8000270 <__adddf3>
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	3301      	adds	r3, #1
 800e068:	623b      	str	r3, [r7, #32]
      iy++;
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	3301      	adds	r3, #1
 800e06e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	3301      	adds	r3, #1
 800e074:	627b      	str	r3, [r7, #36]	; 0x24
 800e076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	dbd0      	blt.n	800e020 <xaxpy_OQ28XA21+0x42>
}
 800e07e:	bf00      	nop
 800e080:	372c      	adds	r7, #44	; 0x2c
 800e082:	46bd      	mov	sp, r7
 800e084:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e086 <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800e086:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e088:	b08b      	sub	sp, #44	; 0x2c
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6178      	str	r0, [r7, #20]
 800e08e:	ed87 0b02 	vstr	d0, [r7, #8]
 800e092:	6139      	str	r1, [r7, #16]
 800e094:	607a      	str	r2, [r7, #4]
 800e096:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	dd43      	ble.n	800e126 <xaxpy_Wxch84Fl+0xa0>
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	f04f 0300 	mov.w	r3, #0
 800e0a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0aa:	f7f2 fcff 	bl	8000aac <__aeabi_dcmpeq>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d000      	beq.n	800e0b6 <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800e0b4:	e037      	b.n	800e126 <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e0c6:	e02a      	b.n	800e11e <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	00db      	lsls	r3, r3, #3
 800e0cc:	683a      	ldr	r2, [r7, #0]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	693a      	ldr	r2, [r7, #16]
 800e0da:	4413      	add	r3, r2
 800e0dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0e4:	f7f2 fa7a 	bl	80005dc <__aeabi_dmul>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	18d6      	adds	r6, r2, r3
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7f2 f8b6 	bl	8000270 <__adddf3>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	3301      	adds	r3, #1
 800e110:	623b      	str	r3, [r7, #32]
      iy++;
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	3301      	adds	r3, #1
 800e116:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11a:	3301      	adds	r3, #1
 800e11c:	627b      	str	r3, [r7, #36]	; 0x24
 800e11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	429a      	cmp	r2, r3
 800e124:	dbd0      	blt.n	800e0c8 <xaxpy_Wxch84Fl+0x42>
}
 800e126:	bf00      	nop
 800e128:	372c      	adds	r7, #44	; 0x2c
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e12e <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800e12e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e130:	b08b      	sub	sp, #44	; 0x2c
 800e132:	af00      	add	r7, sp, #0
 800e134:	6178      	str	r0, [r7, #20]
 800e136:	ed87 0b02 	vstr	d0, [r7, #8]
 800e13a:	6139      	str	r1, [r7, #16]
 800e13c:	607a      	str	r2, [r7, #4]
 800e13e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dd43      	ble.n	800e1ce <xaxpy_guu0hJif+0xa0>
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	f04f 0300 	mov.w	r3, #0
 800e14e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e152:	f7f2 fcab 	bl	8000aac <__aeabi_dcmpeq>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d000      	beq.n	800e15e <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800e15c:	e037      	b.n	800e1ce <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	3b01      	subs	r3, #1
 800e162:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	3b01      	subs	r3, #1
 800e168:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e16a:	2300      	movs	r3, #0
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
 800e16e:	e02a      	b.n	800e1c6 <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	4413      	add	r3, r2
 800e178:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	00db      	lsls	r3, r3, #3
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	4413      	add	r3, r2
 800e184:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e18c:	f7f2 fa26 	bl	80005dc <__aeabi_dmul>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	4610      	mov	r0, r2
 800e196:	4619      	mov	r1, r3
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	18d6      	adds	r6, r2, r3
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	f7f2 f862 	bl	8000270 <__adddf3>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	623b      	str	r3, [r7, #32]
      iy++;
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	dbd0      	blt.n	800e170 <xaxpy_guu0hJif+0x42>
}
 800e1ce:	bf00      	nop
 800e1d0:	372c      	adds	r7, #44	; 0x2c
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1d6 <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b08a      	sub	sp, #40	; 0x28
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
 800e1e2:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800e1e4:	f04f 0200 	mov.w	r2, #0
 800e1e8:	f04f 0300 	mov.w	r3, #0
 800e1ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	dd31      	ble.n	800e25a <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fc:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800e1fe:	2300      	movs	r3, #0
 800e200:	61fb      	str	r3, [r7, #28]
 800e202:	e026      	b.n	800e252 <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e20a:	3b01      	subs	r3, #1
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	4413      	add	r3, r2
 800e212:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e21c:	3b01      	subs	r3, #1
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	4413      	add	r3, r2
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	f7f2 f9d8 	bl	80005dc <__aeabi_dmul>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e234:	f7f2 f81c 	bl	8000270 <__adddf3>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	3301      	adds	r3, #1
 800e244:	61bb      	str	r3, [r7, #24]
      iy++;
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	3301      	adds	r3, #1
 800e24a:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	3301      	adds	r3, #1
 800e250:	61fb      	str	r3, [r7, #28]
 800e252:	69fa      	ldr	r2, [r7, #28]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	429a      	cmp	r2, r3
 800e258:	dbd4      	blt.n	800e204 <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800e25a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e25e:	ec43 2b17 	vmov	d7, r2, r3
}
 800e262:	eeb0 0a47 	vmov.f32	s0, s14
 800e266:	eef0 0a67 	vmov.f32	s1, s15
 800e26a:	3728      	adds	r7, #40	; 0x28
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800e270:	b590      	push	{r4, r7, lr}
 800e272:	b08f      	sub	sp, #60	; 0x3c
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
 800e27c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d079      	beq.n	800e378 <xgemv_NQlWbt2i+0x108>
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d076      	beq.n	800e378 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e28a:	2300      	movs	r3, #0
 800e28c:	637b      	str	r3, [r7, #52]	; 0x34
 800e28e:	e00c      	b.n	800e2aa <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800e290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e292:	00db      	lsls	r3, r3, #3
 800e294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e296:	18d1      	adds	r1, r2, r3
 800e298:	f04f 0200 	mov.w	r2, #0
 800e29c:	f04f 0300 	mov.w	r3, #0
 800e2a0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	dbee      	blt.n	800e290 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	1e5a      	subs	r2, r3, #1
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	005b      	lsls	r3, r3, #1
 800e2be:	4413      	add	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2ce:	e04f      	b.n	800e370 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800e2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2d2:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800e2d4:	f04f 0200 	mov.w	r2, #0
 800e2d8:	f04f 0300 	mov.w	r3, #0
 800e2dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800e2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	633b      	str	r3, [r7, #48]	; 0x30
 800e2ee:	e023      	b.n	800e338 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	00db      	lsls	r3, r3, #3
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e308:	3b01      	subs	r3, #1
 800e30a:	00db      	lsls	r3, r3, #3
 800e30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e30e:	4413      	add	r3, r2
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f7f2 f962 	bl	80005dc <__aeabi_dmul>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e320:	f7f1 ffa6 	bl	8000270 <__adddf3>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	3301      	adds	r3, #1
 800e330:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800e332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e334:	3301      	adds	r3, #1
 800e336:	633b      	str	r3, [r7, #48]	; 0x30
 800e338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	ddd7      	ble.n	800e2f0 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800e340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e342:	00db      	lsls	r3, r3, #3
 800e344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e346:	4413      	add	r3, r2
 800e348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34e:	00db      	lsls	r3, r3, #3
 800e350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e352:	18d4      	adds	r4, r2, r3
 800e354:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e358:	f7f1 ff8a 	bl	8000270 <__adddf3>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800e364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e366:	3301      	adds	r3, #1
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	3306      	adds	r3, #6
 800e36e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	429a      	cmp	r2, r3
 800e376:	ddab      	ble.n	800e2d0 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800e378:	bf00      	nop
 800e37a:	373c      	adds	r7, #60	; 0x3c
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}

0800e380 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800e380:	b590      	push	{r4, r7, lr}
 800e382:	b08f      	sub	sp, #60	; 0x3c
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d077      	beq.n	800e484 <xgemv_fRiR1I1O+0x104>
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d074      	beq.n	800e484 <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e39a:	2300      	movs	r3, #0
 800e39c:	637b      	str	r3, [r7, #52]	; 0x34
 800e39e:	e00c      	b.n	800e3ba <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800e3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a2:	00db      	lsls	r3, r3, #3
 800e3a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3a6:	18d1      	adds	r1, r2, r3
 800e3a8:	f04f 0200 	mov.w	r2, #0
 800e3ac:	f04f 0300 	mov.w	r3, #0
 800e3b0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800e3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	dbee      	blt.n	800e3a0 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	1e5a      	subs	r2, r3, #1
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	4413      	add	r3, r2
 800e3d0:	683a      	ldr	r2, [r7, #0]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3da:	e04f      	b.n	800e47c <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800e3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3de:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800e3e0:	f04f 0200 	mov.w	r2, #0
 800e3e4:	f04f 0300 	mov.w	r3, #0
 800e3e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800e3ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800e3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f8:	633b      	str	r3, [r7, #48]	; 0x30
 800e3fa:	e023      	b.n	800e444 <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e402:	3b01      	subs	r3, #1
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	4413      	add	r3, r2
 800e40a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e414:	3b01      	subs	r3, #1
 800e416:	00db      	lsls	r3, r3, #3
 800e418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e41a:	4413      	add	r3, r2
 800e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e420:	f7f2 f8dc 	bl	80005dc <__aeabi_dmul>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e42c:	f7f1 ff20 	bl	8000270 <__adddf3>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	3301      	adds	r3, #1
 800e43c:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	3301      	adds	r3, #1
 800e442:	633b      	str	r3, [r7, #48]	; 0x30
 800e444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	429a      	cmp	r2, r3
 800e44a:	ddd7      	ble.n	800e3fc <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800e44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e452:	4413      	add	r3, r2
 800e454:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e45e:	18d4      	adds	r4, r2, r3
 800e460:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e464:	f7f1 ff04 	bl	8000270 <__adddf3>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800e470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e472:	3301      	adds	r3, #1
 800e474:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800e476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e478:	3303      	adds	r3, #3
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	429a      	cmp	r2, r3
 800e482:	ddab      	ble.n	800e3dc <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800e484:	bf00      	nop
 800e486:	373c      	adds	r7, #60	; 0x3c
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd90      	pop	{r4, r7, pc}

0800e48c <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e48e:	b091      	sub	sp, #68	; 0x44
 800e490:	af00      	add	r7, sp, #0
 800e492:	6178      	str	r0, [r7, #20]
 800e494:	6139      	str	r1, [r7, #16]
 800e496:	ed87 0b02 	vstr	d0, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
 800e49c:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800e49e:	f04f 0200 	mov.w	r2, #0
 800e4a2:	f04f 0300 	mov.w	r3, #0
 800e4a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e4aa:	f7f2 faff 	bl	8000aac <__aeabi_dcmpeq>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d000      	beq.n	800e4b6 <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800e4b4:	e069      	b.n	800e58a <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800e4b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4c4:	e05d      	b.n	800e582 <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800e4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c8:	00db      	lsls	r3, r3, #3
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4d2:	f04f 0200 	mov.w	r2, #0
 800e4d6:	f04f 0300 	mov.w	r3, #0
 800e4da:	f7f2 fae7 	bl	8000aac <__aeabi_dcmpeq>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d145      	bne.n	800e570 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800e4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e4f4:	f7f2 f872 	bl	80005dc <__aeabi_dmul>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50c:	4413      	add	r3, r2
 800e50e:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800e510:	e02a      	b.n	800e568 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	00db      	lsls	r3, r3, #3
 800e516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e518:	4413      	add	r3, r2
 800e51a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e524:	3b01      	subs	r3, #1
 800e526:	00db      	lsls	r3, r3, #3
 800e528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e52a:	4413      	add	r3, r2
 800e52c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e530:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e534:	f7f2 f852 	bl	80005dc <__aeabi_dmul>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4610      	mov	r0, r2
 800e53e:	4619      	mov	r1, r3
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e546:	18d6      	adds	r6, r2, r3
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4620      	mov	r0, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	f7f1 fe8e 	bl	8000270 <__adddf3>
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	3301      	adds	r3, #1
 800e560:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e564:	3301      	adds	r3, #1
 800e566:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800e568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	dbd0      	blt.n	800e512 <xgerc_R09LiDgJ+0x86>
      jy++;
 800e570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e572:	3301      	adds	r3, #1
 800e574:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	3306      	adds	r3, #6
 800e57a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800e57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e57e:	3301      	adds	r3, #1
 800e580:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	429a      	cmp	r2, r3
 800e588:	db9d      	blt.n	800e4c6 <xgerc_R09LiDgJ+0x3a>
}
 800e58a:	bf00      	nop
 800e58c:	3744      	adds	r7, #68	; 0x44
 800e58e:	46bd      	mov	sp, r7
 800e590:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e592 <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800e592:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e594:	b091      	sub	sp, #68	; 0x44
 800e596:	af00      	add	r7, sp, #0
 800e598:	6178      	str	r0, [r7, #20]
 800e59a:	6139      	str	r1, [r7, #16]
 800e59c:	ed87 0b02 	vstr	d0, [r7, #8]
 800e5a0:	607a      	str	r2, [r7, #4]
 800e5a2:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800e5a4:	f04f 0200 	mov.w	r2, #0
 800e5a8:	f04f 0300 	mov.w	r3, #0
 800e5ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5b0:	f7f2 fa7c 	bl	8000aac <__aeabi_dcmpeq>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d000      	beq.n	800e5bc <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800e5ba:	e069      	b.n	800e690 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800e5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5ca:	e05d      	b.n	800e688 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800e5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5d8:	f04f 0200 	mov.w	r2, #0
 800e5dc:	f04f 0300 	mov.w	r3, #0
 800e5e0:	f7f2 fa64 	bl	8000aac <__aeabi_dcmpeq>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d145      	bne.n	800e676 <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800e5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ec:	00db      	lsls	r3, r3, #3
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5fa:	f7f1 ffef 	bl	80005dc <__aeabi_dmul>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60c:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	4413      	add	r3, r2
 800e614:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800e616:	e02a      	b.n	800e66e <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	00db      	lsls	r3, r3, #3
 800e61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e61e:	4413      	add	r3, r2
 800e620:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e626:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e62a:	3b01      	subs	r3, #1
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e630:	4413      	add	r3, r2
 800e632:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e63a:	f7f1 ffcf 	bl	80005dc <__aeabi_dmul>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4610      	mov	r0, r2
 800e644:	4619      	mov	r1, r3
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	00db      	lsls	r3, r3, #3
 800e64a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e64c:	18d6      	adds	r6, r2, r3
 800e64e:	4602      	mov	r2, r0
 800e650:	460b      	mov	r3, r1
 800e652:	4620      	mov	r0, r4
 800e654:	4629      	mov	r1, r5
 800e656:	f7f1 fe0b 	bl	8000270 <__adddf3>
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	3301      	adds	r3, #1
 800e666:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800e668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66a:	3301      	adds	r3, #1
 800e66c:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800e66e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	429a      	cmp	r2, r3
 800e674:	dbd0      	blt.n	800e618 <xgerc_tNNiazQU+0x86>
      jy++;
 800e676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e678:	3301      	adds	r3, #1
 800e67a:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800e67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67e:	3303      	adds	r3, #3
 800e680:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800e682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e684:	3301      	adds	r3, #1
 800e686:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	db9d      	blt.n	800e5cc <xgerc_tNNiazQU+0x3a>
}
 800e690:	bf00      	nop
 800e692:	3744      	adds	r7, #68	; 0x44
 800e694:	46bd      	mov	sp, r7
 800e696:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e698 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b092      	sub	sp, #72	; 0x48
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800e6a4:	f04f 0200 	mov.w	r2, #0
 800e6a8:	f04f 0300 	mov.w	r3, #0
 800e6ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f340 8090 	ble.w	800e7d8 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d10e      	bne.n	800e6dc <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	00db      	lsls	r3, r3, #3
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	6439      	str	r1, [r7, #64]	; 0x40
 800e6d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6d8:	647b      	str	r3, [r7, #68]	; 0x44
 800e6da:	e07d      	b.n	800e7d8 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800e6dc:	f04f 0200 	mov.w	r2, #0
 800e6e0:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800e6e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6f6:	e05d      	b.n	800e7b4 <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e6fe:	3b01      	subs	r3, #1
 800e700:	00db      	lsls	r3, r3, #3
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	4413      	add	r3, r2
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	4611      	mov	r1, r2
 800e70c:	6239      	str	r1, [r7, #32]
 800e70e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e712:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800e714:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e71c:	f7f2 f9ee 	bl	8000afc <__aeabi_dcmpgt>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d029      	beq.n	800e77a <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800e726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e72a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e72e:	f7f2 f87f 	bl	8000830 <__aeabi_ddiv>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800e73a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e73e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e742:	f7f1 ff4b 	bl	80005dc <__aeabi_dmul>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	4610      	mov	r0, r2
 800e74c:	4619      	mov	r1, r3
 800e74e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e752:	f7f1 ff43 	bl	80005dc <__aeabi_dmul>
 800e756:	4602      	mov	r2, r0
 800e758:	460b      	mov	r3, r1
 800e75a:	4610      	mov	r0, r2
 800e75c:	4619      	mov	r1, r3
 800e75e:	f04f 0200 	mov.w	r2, #0
 800e762:	4b23      	ldr	r3, [pc, #140]	; (800e7f0 <xnrm2_7bm34mDQ+0x158>)
 800e764:	f7f1 fd84 	bl	8000270 <__adddf3>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800e770:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e774:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800e778:	e019      	b.n	800e7ae <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800e77a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e77e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e782:	f7f2 f855 	bl	8000830 <__aeabi_ddiv>
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800e78e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e792:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e796:	f7f1 ff21 	bl	80005dc <__aeabi_dmul>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e7a2:	f7f1 fd65 	bl	8000270 <__adddf3>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800e7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	dd9d      	ble.n	800e6f8 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800e7bc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800e7c0:	f009 fde2 	bl	8018388 <sqrt>
 800e7c4:	ec53 2b10 	vmov	r2, r3, d0
 800e7c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e7cc:	f7f1 ff06 	bl	80005dc <__aeabi_dmul>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800e7d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e7dc:	ec43 2b17 	vmov	d7, r2, r3
}
 800e7e0:	eeb0 0a47 	vmov.f32	s0, s14
 800e7e4:	eef0 0a67 	vmov.f32	s1, s15
 800e7e8:	3748      	adds	r7, #72	; 0x48
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	3ff00000 	.word	0x3ff00000

0800e7f4 <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b092      	sub	sp, #72	; 0x48
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800e800:	f04f 0200 	mov.w	r2, #0
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f340 8090 	ble.w	800e934 <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b01      	cmp	r3, #1
 800e818:	d10e      	bne.n	800e838 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e820:	3b01      	subs	r3, #1
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	4413      	add	r3, r2
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	4611      	mov	r1, r2
 800e82e:	6439      	str	r1, [r7, #64]	; 0x40
 800e830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e834:	647b      	str	r3, [r7, #68]	; 0x44
 800e836:	e07d      	b.n	800e934 <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800e838:	f04f 0200 	mov.w	r2, #0
 800e83c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800e840:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	4413      	add	r3, r2
 800e84a:	3b01      	subs	r3, #1
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e852:	e05d      	b.n	800e910 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800e854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e856:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e85a:	3b01      	subs	r3, #1
 800e85c:	00db      	lsls	r3, r3, #3
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	4413      	add	r3, r2
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	4611      	mov	r1, r2
 800e868:	6239      	str	r1, [r7, #32]
 800e86a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e86e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800e870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e874:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e878:	f7f2 f940 	bl	8000afc <__aeabi_dcmpgt>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d029      	beq.n	800e8d6 <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800e882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e886:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e88a:	f7f1 ffd1 	bl	8000830 <__aeabi_ddiv>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800e896:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e89a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e89e:	f7f1 fe9d 	bl	80005dc <__aeabi_dmul>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e8ae:	f7f1 fe95 	bl	80005dc <__aeabi_dmul>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f04f 0200 	mov.w	r2, #0
 800e8be:	4b23      	ldr	r3, [pc, #140]	; (800e94c <xnrm2_Mnmxg9YT+0x158>)
 800e8c0:	f7f1 fcd6 	bl	8000270 <__adddf3>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800e8cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e8d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800e8d4:	e019      	b.n	800e90a <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800e8d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e8da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e8de:	f7f1 ffa7 	bl	8000830 <__aeabi_ddiv>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800e8ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e8ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e8f2:	f7f1 fe73 	bl	80005dc <__aeabi_dmul>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e8fe:	f7f1 fcb7 	bl	8000270 <__adddf3>
 800e902:	4602      	mov	r2, r0
 800e904:	460b      	mov	r3, r1
 800e906:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800e90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90c:	3301      	adds	r3, #1
 800e90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	429a      	cmp	r2, r3
 800e916:	dd9d      	ble.n	800e854 <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800e918:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800e91c:	f009 fd34 	bl	8018388 <sqrt>
 800e920:	ec53 2b10 	vmov	r2, r3, d0
 800e924:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e928:	f7f1 fe58 	bl	80005dc <__aeabi_dmul>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800e934:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e938:	ec43 2b17 	vmov	d7, r2, r3
}
 800e93c:	eeb0 0a47 	vmov.f32	s0, s14
 800e940:	eef0 0a67 	vmov.f32	s1, s15
 800e944:	3748      	adds	r7, #72	; 0x48
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	3ff00000 	.word	0x3ff00000

0800e950 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b092      	sub	sp, #72	; 0x48
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800e95c:	f04f 0200 	mov.w	r2, #0
 800e960:	f04f 0300 	mov.w	r3, #0
 800e964:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f340 8090 	ble.w	800ea90 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d10e      	bne.n	800e994 <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e97c:	3b01      	subs	r3, #1
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	4413      	add	r3, r2
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	4611      	mov	r1, r2
 800e98a:	6439      	str	r1, [r7, #64]	; 0x40
 800e98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e990:	647b      	str	r3, [r7, #68]	; 0x44
 800e992:	e07d      	b.n	800ea90 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800e994:	f04f 0200 	mov.w	r2, #0
 800e998:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800e99c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ae:	e05d      	b.n	800ea6c <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800e9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	4413      	add	r3, r2
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	6239      	str	r1, [r7, #32]
 800e9c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9ca:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800e9cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e9d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e9d4:	f7f2 f892 	bl	8000afc <__aeabi_dcmpgt>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d029      	beq.n	800ea32 <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800e9de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e9e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e9e6:	f7f1 ff23 	bl	8000830 <__aeabi_ddiv>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800e9f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e9f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e9fa:	f7f1 fdef 	bl	80005dc <__aeabi_dmul>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	4610      	mov	r0, r2
 800ea04:	4619      	mov	r1, r3
 800ea06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea0a:	f7f1 fde7 	bl	80005dc <__aeabi_dmul>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4610      	mov	r0, r2
 800ea14:	4619      	mov	r1, r3
 800ea16:	f04f 0200 	mov.w	r2, #0
 800ea1a:	4b23      	ldr	r3, [pc, #140]	; (800eaa8 <xnrm2_Rlk0oxWw+0x158>)
 800ea1c:	f7f1 fc28 	bl	8000270 <__adddf3>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800ea28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ea2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800ea30:	e019      	b.n	800ea66 <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ea32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ea36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ea3a:	f7f1 fef9 	bl	8000830 <__aeabi_ddiv>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800ea46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ea4e:	f7f1 fdc5 	bl	80005dc <__aeabi_dmul>
 800ea52:	4602      	mov	r2, r0
 800ea54:	460b      	mov	r3, r1
 800ea56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ea5a:	f7f1 fc09 	bl	8000270 <__adddf3>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	460b      	mov	r3, r1
 800ea62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800ea66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea68:	3301      	adds	r3, #1
 800ea6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea70:	429a      	cmp	r2, r3
 800ea72:	dd9d      	ble.n	800e9b0 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800ea74:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ea78:	f009 fc86 	bl	8018388 <sqrt>
 800ea7c:	ec53 2b10 	vmov	r2, r3, d0
 800ea80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ea84:	f7f1 fdaa 	bl	80005dc <__aeabi_dmul>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ea90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ea94:	ec43 2b17 	vmov	d7, r2, r3
}
 800ea98:	eeb0 0a47 	vmov.f32	s0, s14
 800ea9c:	eef0 0a67 	vmov.f32	s1, s15
 800eaa0:	3748      	adds	r7, #72	; 0x48
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	3ff00000 	.word	0x3ff00000

0800eaac <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b092      	sub	sp, #72	; 0x48
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800eab8:	f04f 0200 	mov.w	r2, #0
 800eabc:	f04f 0300 	mov.w	r3, #0
 800eac0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f340 8090 	ble.w	800ebec <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d10e      	bne.n	800eaf0 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ead8:	3b01      	subs	r3, #1
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	68ba      	ldr	r2, [r7, #8]
 800eade:	4413      	add	r3, r2
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	4611      	mov	r1, r2
 800eae6:	6439      	str	r1, [r7, #64]	; 0x40
 800eae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eaec:	647b      	str	r3, [r7, #68]	; 0x44
 800eaee:	e07d      	b.n	800ebec <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800eaf0:	f04f 0200 	mov.w	r2, #0
 800eaf4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800eaf8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	4413      	add	r3, r2
 800eb02:	3b01      	subs	r3, #1
 800eb04:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb0a:	e05d      	b.n	800ebc8 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800eb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eb12:	3b01      	subs	r3, #1
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	4413      	add	r3, r2
 800eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1e:	4611      	mov	r1, r2
 800eb20:	6239      	str	r1, [r7, #32]
 800eb22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb26:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800eb28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eb2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800eb30:	f7f1 ffe4 	bl	8000afc <__aeabi_dcmpgt>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d029      	beq.n	800eb8e <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800eb3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800eb42:	f7f1 fe75 	bl	8000830 <__aeabi_ddiv>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800eb4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800eb56:	f7f1 fd41 	bl	80005dc <__aeabi_dmul>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4610      	mov	r0, r2
 800eb60:	4619      	mov	r1, r3
 800eb62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb66:	f7f1 fd39 	bl	80005dc <__aeabi_dmul>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4610      	mov	r0, r2
 800eb70:	4619      	mov	r1, r3
 800eb72:	f04f 0200 	mov.w	r2, #0
 800eb76:	4b23      	ldr	r3, [pc, #140]	; (800ec04 <xnrm2_nLdASVZH+0x158>)
 800eb78:	f7f1 fb7a 	bl	8000270 <__adddf3>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	460b      	mov	r3, r1
 800eb80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800eb84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800eb8c:	e019      	b.n	800ebc2 <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800eb8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eb92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800eb96:	f7f1 fe4b 	bl	8000830 <__aeabi_ddiv>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800eba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eba6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ebaa:	f7f1 fd17 	bl	80005dc <__aeabi_dmul>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ebb6:	f7f1 fb5b 	bl	8000270 <__adddf3>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800ebc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	dd9d      	ble.n	800eb0c <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800ebd0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ebd4:	f009 fbd8 	bl	8018388 <sqrt>
 800ebd8:	ec53 2b10 	vmov	r2, r3, d0
 800ebdc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ebe0:	f7f1 fcfc 	bl	80005dc <__aeabi_dmul>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ebec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ebf0:	ec43 2b17 	vmov	d7, r2, r3
}
 800ebf4:	eeb0 0a47 	vmov.f32	s0, s14
 800ebf8:	eef0 0a67 	vmov.f32	s1, s15
 800ebfc:	3748      	adds	r7, #72	; 0x48
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	3ff00000 	.word	0x3ff00000

0800ec08 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b092      	sub	sp, #72	; 0x48
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800ec14:	f04f 0200 	mov.w	r2, #0
 800ec18:	f04f 0300 	mov.w	r3, #0
 800ec1c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f340 8090 	ble.w	800ed48 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d10e      	bne.n	800ec4c <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ec34:	3b01      	subs	r3, #1
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	4611      	mov	r1, r2
 800ec42:	6439      	str	r1, [r7, #64]	; 0x40
 800ec44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec48:	647b      	str	r3, [r7, #68]	; 0x44
 800ec4a:	e07d      	b.n	800ed48 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800ec4c:	f04f 0200 	mov.w	r2, #0
 800ec50:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800ec54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec66:	e05d      	b.n	800ed24 <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800ec68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	4413      	add	r3, r2
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	6239      	str	r1, [r7, #32]
 800ec7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec82:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800ec84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ec88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ec8c:	f7f1 ff36 	bl	8000afc <__aeabi_dcmpgt>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d029      	beq.n	800ecea <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800ec96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ec9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ec9e:	f7f1 fdc7 	bl	8000830 <__aeabi_ddiv>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800ecaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ecae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ecb2:	f7f1 fc93 	bl	80005dc <__aeabi_dmul>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	4610      	mov	r0, r2
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ecc2:	f7f1 fc8b 	bl	80005dc <__aeabi_dmul>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	460b      	mov	r3, r1
 800ecca:	4610      	mov	r0, r2
 800eccc:	4619      	mov	r1, r3
 800ecce:	f04f 0200 	mov.w	r2, #0
 800ecd2:	4b23      	ldr	r3, [pc, #140]	; (800ed60 <xnrm2_xDOlDEtw+0x158>)
 800ecd4:	f7f1 facc 	bl	8000270 <__adddf3>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800ece0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ece4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800ece8:	e019      	b.n	800ed1e <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800ecea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ecee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ecf2:	f7f1 fd9d 	bl	8000830 <__aeabi_ddiv>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800ecfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ed06:	f7f1 fc69 	bl	80005dc <__aeabi_dmul>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ed12:	f7f1 faad 	bl	8000270 <__adddf3>
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed20:	3301      	adds	r3, #1
 800ed22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	dd9d      	ble.n	800ec68 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800ed2c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ed30:	f009 fb2a 	bl	8018388 <sqrt>
 800ed34:	ec53 2b10 	vmov	r2, r3, d0
 800ed38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ed3c:	f7f1 fc4e 	bl	80005dc <__aeabi_dmul>
 800ed40:	4602      	mov	r2, r0
 800ed42:	460b      	mov	r3, r1
 800ed44:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800ed48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ed4c:	ec43 2b17 	vmov	d7, r2, r3
}
 800ed50:	eeb0 0a47 	vmov.f32	s0, s14
 800ed54:	eef0 0a67 	vmov.f32	s1, s15
 800ed58:	3748      	adds	r7, #72	; 0x48
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	3ff00000 	.word	0x3ff00000

0800ed64 <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800ed64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed68:	b08c      	sub	sp, #48	; 0x30
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	61f8      	str	r0, [r7, #28]
 800ed6e:	61b9      	str	r1, [r7, #24]
 800ed70:	617a      	str	r2, [r7, #20]
 800ed72:	ed87 0b02 	vstr	d0, [r7, #8]
 800ed76:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ed80:	3b01      	subs	r3, #1
 800ed82:	00db      	lsls	r3, r3, #3
 800ed84:	69fa      	ldr	r2, [r7, #28]
 800ed86:	4413      	add	r3, r2
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ed96:	3b01      	subs	r3, #1
 800ed98:	00db      	lsls	r3, r3, #3
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800eda6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800edaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800edae:	f7f1 fc15 	bl	80005dc <__aeabi_dmul>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4690      	mov	r8, r2
 800edb8:	4699      	mov	r9, r3
 800edba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edc2:	f7f1 fc0b 	bl	80005dc <__aeabi_dmul>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4610      	mov	r0, r2
 800edcc:	4619      	mov	r1, r3
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800edd4:	3b01      	subs	r3, #1
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	69fa      	ldr	r2, [r7, #28]
 800edda:	18d4      	adds	r4, r2, r3
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4640      	mov	r0, r8
 800ede2:	4649      	mov	r1, r9
 800ede4:	f7f1 fa42 	bl	800026c <__aeabi_dsub>
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800edf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800edf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edf8:	f7f1 fbf0 	bl	80005dc <__aeabi_dmul>
 800edfc:	4602      	mov	r2, r0
 800edfe:	460b      	mov	r3, r1
 800ee00:	4690      	mov	r8, r2
 800ee02:	4699      	mov	r9, r3
 800ee04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ee0c:	f7f1 fbe6 	bl	80005dc <__aeabi_dmul>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	4610      	mov	r0, r2
 800ee16:	4619      	mov	r1, r3
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	69fa      	ldr	r2, [r7, #28]
 800ee24:	18d4      	adds	r4, r2, r3
 800ee26:	4602      	mov	r2, r0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4640      	mov	r0, r8
 800ee2c:	4649      	mov	r1, r9
 800ee2e:	f7f1 fa1f 	bl	8000270 <__adddf3>
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	69fa      	ldr	r2, [r7, #28]
 800ee40:	4413      	add	r3, r2
 800ee42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee4a:	f7f1 fbc7 	bl	80005dc <__aeabi_dmul>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	4614      	mov	r4, r2
 800ee54:	461d      	mov	r5, r3
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee66:	f7f1 fbb9 	bl	80005dc <__aeabi_dmul>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4620      	mov	r0, r4
 800ee70:	4629      	mov	r1, r5
 800ee72:	f7f1 f9fd 	bl	8000270 <__adddf3>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	69fa      	ldr	r2, [r7, #28]
 800ee84:	4413      	add	r3, r2
 800ee86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee8e:	f7f1 fba5 	bl	80005dc <__aeabi_dmul>
 800ee92:	4602      	mov	r2, r0
 800ee94:	460b      	mov	r3, r1
 800ee96:	4690      	mov	r8, r2
 800ee98:	4699      	mov	r9, r3
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	69fa      	ldr	r2, [r7, #28]
 800eea0:	4413      	add	r3, r2
 800eea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eeaa:	f7f1 fb97 	bl	80005dc <__aeabi_dmul>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	00db      	lsls	r3, r3, #3
 800eeba:	69fa      	ldr	r2, [r7, #28]
 800eebc:	18d4      	adds	r4, r2, r3
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	4640      	mov	r0, r8
 800eec4:	4649      	mov	r1, r9
 800eec6:	f7f1 f9d1 	bl	800026c <__aeabi_dsub>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	00db      	lsls	r3, r3, #3
 800eed6:	69fa      	ldr	r2, [r7, #28]
 800eed8:	18d1      	adds	r1, r2, r3
 800eeda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eede:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	3301      	adds	r3, #1
 800eee6:	00db      	lsls	r3, r3, #3
 800eee8:	69fa      	ldr	r2, [r7, #28]
 800eeea:	4413      	add	r3, r2
 800eeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	3301      	adds	r3, #1
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	69fa      	ldr	r2, [r7, #28]
 800eefc:	4413      	add	r3, r2
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800ef06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ef0e:	f7f1 fb65 	bl	80005dc <__aeabi_dmul>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	4690      	mov	r8, r2
 800ef18:	4699      	mov	r9, r3
 800ef1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ef22:	f7f1 fb5b 	bl	80005dc <__aeabi_dmul>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	3301      	adds	r3, #1
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	69fa      	ldr	r2, [r7, #28]
 800ef36:	18d4      	adds	r4, r2, r3
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	4649      	mov	r1, r9
 800ef40:	f7f1 f994 	bl	800026c <__aeabi_dsub>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800ef4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ef54:	f7f1 fb42 	bl	80005dc <__aeabi_dmul>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	4690      	mov	r8, r2
 800ef5e:	4699      	mov	r9, r3
 800ef60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ef68:	f7f1 fb38 	bl	80005dc <__aeabi_dmul>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4610      	mov	r0, r2
 800ef72:	4619      	mov	r1, r3
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	3301      	adds	r3, #1
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	69fa      	ldr	r2, [r7, #28]
 800ef7c:	18d4      	adds	r4, r2, r3
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4640      	mov	r0, r8
 800ef84:	4649      	mov	r1, r9
 800ef86:	f7f1 f973 	bl	8000270 <__adddf3>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ef92:	bf00      	nop
 800ef94:	3730      	adds	r7, #48	; 0x30
 800ef96:	46bd      	mov	sp, r7
 800ef98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ef9c <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800ef9c:	b5b0      	push	{r4, r5, r7, lr}
 800ef9e:	b090      	sub	sp, #64	; 0x40
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efba:	4611      	mov	r1, r2
 800efbc:	62b9      	str	r1, [r7, #40]	; 0x28
 800efbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	4611      	mov	r1, r2
 800efcc:	6239      	str	r1, [r7, #32]
 800efce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800efd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800efd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800efdc:	f7f1 fd8e 	bl	8000afc <__aeabi_dcmpgt>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d004      	beq.n	800eff0 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800eff0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eff8:	f7f1 f93a 	bl	8000270 <__adddf3>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800f004:	f04f 0200 	mov.w	r2, #0
 800f008:	f04f 0300 	mov.w	r3, #0
 800f00c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f010:	f7f1 fd4c 	bl	8000aac <__aeabi_dcmpeq>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d01b      	beq.n	800f052 <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	f04f 0200 	mov.w	r2, #0
 800f020:	f04f 0300 	mov.w	r3, #0
 800f024:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800f028:	6879      	ldr	r1, [r7, #4]
 800f02a:	f04f 0200 	mov.w	r2, #0
 800f02e:	4b59      	ldr	r3, [pc, #356]	; (800f194 <xrotg_XzIjz1eG+0x1f8>)
 800f030:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800f034:	68f9      	ldr	r1, [r7, #12]
 800f036:	f04f 0200 	mov.w	r2, #0
 800f03a:	f04f 0300 	mov.w	r3, #0
 800f03e:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	f04f 0200 	mov.w	r2, #0
 800f048:	f04f 0300 	mov.w	r3, #0
 800f04c:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800f050:	e09b      	b.n	800f18a <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800f052:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f056:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f05a:	f7f1 fbe9 	bl	8000830 <__aeabi_ddiv>
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800f066:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f06a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f06e:	f7f1 fbdf 	bl	8000830 <__aeabi_ddiv>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800f07a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f07e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f082:	f7f1 faab 	bl	80005dc <__aeabi_dmul>
 800f086:	4602      	mov	r2, r0
 800f088:	460b      	mov	r3, r1
 800f08a:	4614      	mov	r4, r2
 800f08c:	461d      	mov	r5, r3
 800f08e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f096:	f7f1 faa1 	bl	80005dc <__aeabi_dmul>
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4620      	mov	r0, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7f1 f8e5 	bl	8000270 <__adddf3>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	ec43 2b17 	vmov	d7, r2, r3
 800f0ae:	eeb0 0a47 	vmov.f32	s0, s14
 800f0b2:	eef0 0a67 	vmov.f32	s1, s15
 800f0b6:	f009 f967 	bl	8018388 <sqrt>
 800f0ba:	ec53 2b10 	vmov	r2, r3, d0
 800f0be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f0c2:	f7f1 fa8b 	bl	80005dc <__aeabi_dmul>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800f0ce:	f04f 0200 	mov.w	r2, #0
 800f0d2:	f04f 0300 	mov.w	r3, #0
 800f0d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f0da:	f7f1 fcf1 	bl	8000ac0 <__aeabi_dcmplt>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d005      	beq.n	800f0f0 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800f0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e6:	633b      	str	r3, [r7, #48]	; 0x30
 800f0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f0ee:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f0fa:	f7f1 fb99 	bl	8000830 <__aeabi_ddiv>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	6879      	ldr	r1, [r7, #4]
 800f104:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f10e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f112:	f7f1 fb8d 	bl	8000830 <__aeabi_ddiv>
 800f116:	4602      	mov	r2, r0
 800f118:	460b      	mov	r3, r1
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800f120:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f124:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f128:	f7f1 fce8 	bl	8000afc <__aeabi_dcmpgt>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d006      	beq.n	800f140 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	e9c1 2300 	strd	r2, r3, [r1]
 800f13e:	e01f      	b.n	800f180 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f146:	f04f 0200 	mov.w	r2, #0
 800f14a:	f04f 0300 	mov.w	r3, #0
 800f14e:	f7f1 fcad 	bl	8000aac <__aeabi_dcmpeq>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10d      	bne.n	800f174 <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15e:	f04f 0000 	mov.w	r0, #0
 800f162:	490c      	ldr	r1, [pc, #48]	; (800f194 <xrotg_XzIjz1eG+0x1f8>)
 800f164:	f7f1 fb64 	bl	8000830 <__aeabi_ddiv>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	e9c1 2300 	strd	r2, r3, [r1]
 800f172:	e005      	b.n	800f180 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 800f174:	68b9      	ldr	r1, [r7, #8]
 800f176:	f04f 0200 	mov.w	r2, #0
 800f17a:	4b06      	ldr	r3, [pc, #24]	; (800f194 <xrotg_XzIjz1eG+0x1f8>)
 800f17c:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800f180:	68f9      	ldr	r1, [r7, #12]
 800f182:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f186:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f18a:	bf00      	nop
 800f18c:	3740      	adds	r7, #64	; 0x40
 800f18e:	46bd      	mov	sp, r7
 800f190:	bdb0      	pop	{r4, r5, r7, pc}
 800f192:	bf00      	nop
 800f194:	3ff00000 	.word	0x3ff00000

0800f198 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 800f198:	b590      	push	{r4, r7, lr}
 800f19a:	b089      	sub	sp, #36	; 0x24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6178      	str	r0, [r7, #20]
 800f1a0:	ed87 0b02 	vstr	d0, [r7, #8]
 800f1a4:	6139      	str	r1, [r7, #16]
 800f1a6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	61fb      	str	r3, [r7, #28]
 800f1b6:	e01a      	b.n	800f1ee <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	693a      	ldr	r2, [r7, #16]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	00db      	lsls	r3, r3, #3
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	18d4      	adds	r4, r2, r3
 800f1d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f1dc:	f7f1 f9fe 	bl	80005dc <__aeabi_dmul>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	69fa      	ldr	r2, [r7, #28]
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	dde0      	ble.n	800f1b8 <xscal_59GtRAwv+0x20>
  }
}
 800f1f6:	bf00      	nop
 800f1f8:	bf00      	nop
 800f1fa:	3724      	adds	r7, #36	; 0x24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd90      	pop	{r4, r7, pc}

0800f200 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 800f200:	b590      	push	{r4, r7, lr}
 800f202:	b089      	sub	sp, #36	; 0x24
 800f204:	af00      	add	r7, sp, #0
 800f206:	6178      	str	r0, [r7, #20]
 800f208:	ed87 0b02 	vstr	d0, [r7, #8]
 800f20c:	6139      	str	r1, [r7, #16]
 800f20e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	4413      	add	r3, r2
 800f216:	3b01      	subs	r3, #1
 800f218:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	61fb      	str	r3, [r7, #28]
 800f21e:	e01a      	b.n	800f256 <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f226:	3b01      	subs	r3, #1
 800f228:	00db      	lsls	r3, r3, #3
 800f22a:	693a      	ldr	r2, [r7, #16]
 800f22c:	4413      	add	r3, r2
 800f22e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f238:	3b01      	subs	r3, #1
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	18d4      	adds	r4, r2, r3
 800f240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f244:	f7f1 f9ca 	bl	80005dc <__aeabi_dmul>
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	3301      	adds	r3, #1
 800f254:	61fb      	str	r3, [r7, #28]
 800f256:	69fa      	ldr	r2, [r7, #28]
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	dde0      	ble.n	800f220 <xscal_PLmmUlD2+0x20>
  }
}
 800f25e:	bf00      	nop
 800f260:	bf00      	nop
 800f262:	3724      	adds	r7, #36	; 0x24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd90      	pop	{r4, r7, pc}

0800f268 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 800f268:	b590      	push	{r4, r7, lr}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	ed87 0b02 	vstr	d0, [r7, #8]
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	617b      	str	r3, [r7, #20]
 800f27a:	e01a      	b.n	800f2b2 <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f282:	3b01      	subs	r3, #1
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	4413      	add	r3, r2
 800f28a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f294:	3b01      	subs	r3, #1
 800f296:	00db      	lsls	r3, r3, #3
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	18d4      	adds	r4, r2, r3
 800f29c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f2a0:	f7f1 f99c 	bl	80005dc <__aeabi_dmul>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	617b      	str	r3, [r7, #20]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	3302      	adds	r3, #2
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	dddf      	ble.n	800f27c <xscal_eaAxXsvQ+0x14>
  }
}
 800f2bc:	bf00      	nop
 800f2be:	bf00      	nop
 800f2c0:	371c      	adds	r7, #28
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd90      	pop	{r4, r7, pc}

0800f2c6 <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b087      	sub	sp, #28
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	60f8      	str	r0, [r7, #12]
 800f2ce:	60b9      	str	r1, [r7, #8]
 800f2d0:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	4413      	add	r3, r2
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	00db      	lsls	r3, r3, #3
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	441a      	add	r2, r3
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	00db      	lsls	r3, r3, #3
 800f300:	68f9      	ldr	r1, [r7, #12]
 800f302:	4419      	add	r1, r3
 800f304:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f308:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f312:	3b01      	subs	r3, #1
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	18d1      	adds	r1, r2, r3
 800f31a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f31e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	00db      	lsls	r3, r3, #3
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	4413      	add	r3, r2
 800f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	4413      	add	r3, r2
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	00d2      	lsls	r2, r2, #3
 800f33e:	68f9      	ldr	r1, [r7, #12]
 800f340:	4411      	add	r1, r2
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	18d1      	adds	r1, r2, r3
 800f352:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f356:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	3301      	adds	r3, #1
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	4413      	add	r3, r2
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3301      	adds	r3, #1
 800f370:	00db      	lsls	r3, r3, #3
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	4413      	add	r3, r2
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	3201      	adds	r2, #1
 800f37a:	00d2      	lsls	r2, r2, #3
 800f37c:	68f9      	ldr	r1, [r7, #12]
 800f37e:	4411      	add	r1, r2
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	3301      	adds	r3, #1
 800f38c:	00db      	lsls	r3, r3, #3
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	18d1      	adds	r1, r2, r3
 800f392:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f396:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f39a:	bf00      	nop
 800f39c:	371c      	adds	r7, #28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
	...

0800f3a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f3a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f3e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800f3ac:	480d      	ldr	r0, [pc, #52]	; (800f3e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800f3ae:	490e      	ldr	r1, [pc, #56]	; (800f3e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800f3b0:	4a0e      	ldr	r2, [pc, #56]	; (800f3ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 800f3b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f3b4:	e002      	b.n	800f3bc <LoopCopyDataInit>

0800f3b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f3b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f3b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f3ba:	3304      	adds	r3, #4

0800f3bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f3bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f3be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f3c0:	d3f9      	bcc.n	800f3b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f3c2:	4a0b      	ldr	r2, [pc, #44]	; (800f3f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800f3c4:	4c0b      	ldr	r4, [pc, #44]	; (800f3f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800f3c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f3c8:	e001      	b.n	800f3ce <LoopFillZerobss>

0800f3ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f3ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f3cc:	3204      	adds	r2, #4

0800f3ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f3ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f3d0:	d3fb      	bcc.n	800f3ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f3d2:	f7f4 fd4d 	bl	8003e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f3d6:	f008 fddd 	bl	8017f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f3da:	f7f3 fb95 	bl	8002b08 <main>
  bx  lr    
 800f3de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f3e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800f3e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f3e8:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 800f3ec:	08019010 	.word	0x08019010
  ldr r2, =_sbss
 800f3f0:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 800f3f4:	2001e98c 	.word	0x2001e98c

0800f3f8 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f3f8:	e7fe      	b.n	800f3f8 <CAN1_SCE_IRQHandler>
	...

0800f3fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f400:	4b0e      	ldr	r3, [pc, #56]	; (800f43c <HAL_Init+0x40>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a0d      	ldr	r2, [pc, #52]	; (800f43c <HAL_Init+0x40>)
 800f406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f40a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f40c:	4b0b      	ldr	r3, [pc, #44]	; (800f43c <HAL_Init+0x40>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a0a      	ldr	r2, [pc, #40]	; (800f43c <HAL_Init+0x40>)
 800f412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f418:	4b08      	ldr	r3, [pc, #32]	; (800f43c <HAL_Init+0x40>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a07      	ldr	r2, [pc, #28]	; (800f43c <HAL_Init+0x40>)
 800f41e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f424:	2003      	movs	r0, #3
 800f426:	f001 f968 	bl	80106fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f42a:	200f      	movs	r0, #15
 800f42c:	f7f4 fc60 	bl	8003cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f430:	f7f4 fc32 	bl	8003c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	40023c00 	.word	0x40023c00

0800f440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f440:	b480      	push	{r7}
 800f442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f444:	4b06      	ldr	r3, [pc, #24]	; (800f460 <HAL_IncTick+0x20>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	461a      	mov	r2, r3
 800f44a:	4b06      	ldr	r3, [pc, #24]	; (800f464 <HAL_IncTick+0x24>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4413      	add	r3, r2
 800f450:	4a04      	ldr	r2, [pc, #16]	; (800f464 <HAL_IncTick+0x24>)
 800f452:	6013      	str	r3, [r2, #0]
}
 800f454:	bf00      	nop
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	2000143c 	.word	0x2000143c
 800f464:	2001e894 	.word	0x2001e894

0800f468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f468:	b480      	push	{r7}
 800f46a:	af00      	add	r7, sp, #0
  return uwTick;
 800f46c:	4b03      	ldr	r3, [pc, #12]	; (800f47c <HAL_GetTick+0x14>)
 800f46e:	681b      	ldr	r3, [r3, #0]
}
 800f470:	4618      	mov	r0, r3
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	2001e894 	.word	0x2001e894

0800f480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f488:	2300      	movs	r3, #0
 800f48a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d101      	bne.n	800f496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	e033      	b.n	800f4fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d109      	bne.n	800f4b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7f2 feb0 	bl	8002204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b6:	f003 0310 	and.w	r3, r3, #16
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d118      	bne.n	800f4f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f4c6:	f023 0302 	bic.w	r3, r3, #2
 800f4ca:	f043 0202 	orr.w	r2, r3, #2
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fba8 	bl	800fc28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e2:	f023 0303 	bic.w	r3, r3, #3
 800f4e6:	f043 0201 	orr.w	r2, r3, #1
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	641a      	str	r2, [r3, #64]	; 0x40
 800f4ee:	e001      	b.n	800f4f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800f4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b084      	sub	sp, #16
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800f50e:	2300      	movs	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
 800f512:	2300      	movs	r3, #0
 800f514:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f003 0302 	and.w	r3, r3, #2
 800f520:	2b02      	cmp	r3, #2
 800f522:	bf0c      	ite	eq
 800f524:	2301      	moveq	r3, #1
 800f526:	2300      	movne	r3, #0
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	f003 0320 	and.w	r3, r3, #32
 800f536:	2b20      	cmp	r3, #32
 800f538:	bf0c      	ite	eq
 800f53a:	2301      	moveq	r3, #1
 800f53c:	2300      	movne	r3, #0
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d049      	beq.n	800f5dc <HAL_ADC_IRQHandler+0xd6>
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d046      	beq.n	800f5dc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f552:	f003 0310 	and.w	r3, r3, #16
 800f556:	2b00      	cmp	r3, #0
 800f558:	d105      	bne.n	800f566 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f570:	2b00      	cmp	r3, #0
 800f572:	d12b      	bne.n	800f5cc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d127      	bne.n	800f5cc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f586:	2b00      	cmp	r3, #0
 800f588:	d006      	beq.n	800f598 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f594:	2b00      	cmp	r3, #0
 800f596:	d119      	bne.n	800f5cc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	685a      	ldr	r2, [r3, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f022 0220 	bic.w	r2, r2, #32
 800f5a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d105      	bne.n	800f5cc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c4:	f043 0201 	orr.w	r2, r3, #1
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7f3 f893 	bl	80026f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f06f 0212 	mvn.w	r2, #18
 800f5da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f003 0304 	and.w	r3, r3, #4
 800f5e6:	2b04      	cmp	r3, #4
 800f5e8:	bf0c      	ite	eq
 800f5ea:	2301      	moveq	r3, #1
 800f5ec:	2300      	movne	r3, #0
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5fc:	2b80      	cmp	r3, #128	; 0x80
 800f5fe:	bf0c      	ite	eq
 800f600:	2301      	moveq	r3, #1
 800f602:	2300      	movne	r3, #0
 800f604:	b2db      	uxtb	r3, r3
 800f606:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d057      	beq.n	800f6be <HAL_ADC_IRQHandler+0x1b8>
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d054      	beq.n	800f6be <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f618:	f003 0310 	and.w	r3, r3, #16
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d105      	bne.n	800f62c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f624:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	689b      	ldr	r3, [r3, #8]
 800f632:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f636:	2b00      	cmp	r3, #0
 800f638:	d139      	bne.n	800f6ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f640:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800f644:	2b00      	cmp	r3, #0
 800f646:	d006      	beq.n	800f656 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800f652:	2b00      	cmp	r3, #0
 800f654:	d12b      	bne.n	800f6ae <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800f660:	2b00      	cmp	r3, #0
 800f662:	d124      	bne.n	800f6ae <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d11d      	bne.n	800f6ae <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800f676:	2b00      	cmp	r3, #0
 800f678:	d119      	bne.n	800f6ae <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	685a      	ldr	r2, [r3, #4]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f688:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f68e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d105      	bne.n	800f6ae <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a6:	f043 0201 	orr.w	r2, r3, #1
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 fc38 	bl	800ff24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f06f 020c 	mvn.w	r2, #12
 800f6bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f003 0301 	and.w	r3, r3, #1
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	bf0c      	ite	eq
 800f6cc:	2301      	moveq	r3, #1
 800f6ce:	2300      	movne	r3, #0
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6de:	2b40      	cmp	r3, #64	; 0x40
 800f6e0:	bf0c      	ite	eq
 800f6e2:	2301      	moveq	r3, #1
 800f6e4:	2300      	movne	r3, #0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d017      	beq.n	800f720 <HAL_ADC_IRQHandler+0x21a>
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d014      	beq.n	800f720 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b01      	cmp	r3, #1
 800f702:	d10d      	bne.n	800f720 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 f953 	bl	800f9bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f06f 0201 	mvn.w	r2, #1
 800f71e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0320 	and.w	r3, r3, #32
 800f72a:	2b20      	cmp	r3, #32
 800f72c:	bf0c      	ite	eq
 800f72e:	2301      	moveq	r3, #1
 800f730:	2300      	movne	r3, #0
 800f732:	b2db      	uxtb	r3, r3
 800f734:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f744:	bf0c      	ite	eq
 800f746:	2301      	moveq	r3, #1
 800f748:	2300      	movne	r3, #0
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d015      	beq.n	800f780 <HAL_ADC_IRQHandler+0x27a>
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d012      	beq.n	800f780 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f75e:	f043 0202 	orr.w	r2, r3, #2
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f06f 0220 	mvn.w	r2, #32
 800f76e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 f92d 	bl	800f9d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f06f 0220 	mvn.w	r2, #32
 800f77e:	601a      	str	r2, [r3, #0]
  }
}
 800f780:	bf00      	nop
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800f794:	2300      	movs	r3, #0
 800f796:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d101      	bne.n	800f7a6 <HAL_ADC_Start_DMA+0x1e>
 800f7a2:	2302      	movs	r3, #2
 800f7a4:	e0e9      	b.n	800f97a <HAL_ADC_Start_DMA+0x1f2>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d018      	beq.n	800f7ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	689a      	ldr	r2, [r3, #8]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f042 0201 	orr.w	r2, r2, #1
 800f7ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f7cc:	4b6d      	ldr	r3, [pc, #436]	; (800f984 <HAL_ADC_Start_DMA+0x1fc>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a6d      	ldr	r2, [pc, #436]	; (800f988 <HAL_ADC_Start_DMA+0x200>)
 800f7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d6:	0c9a      	lsrs	r2, r3, #18
 800f7d8:	4613      	mov	r3, r2
 800f7da:	005b      	lsls	r3, r3, #1
 800f7dc:	4413      	add	r3, r2
 800f7de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f7e0:	e002      	b.n	800f7e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1f9      	bne.n	800f7e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7fc:	d107      	bne.n	800f80e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	689a      	ldr	r2, [r3, #8]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f80c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	f003 0301 	and.w	r3, r3, #1
 800f818:	2b01      	cmp	r3, #1
 800f81a:	f040 80a1 	bne.w	800f960 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f822:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f826:	f023 0301 	bic.w	r3, r3, #1
 800f82a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d007      	beq.n	800f850 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f844:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f848:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f85c:	d106      	bne.n	800f86c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f862:	f023 0206 	bic.w	r2, r3, #6
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	645a      	str	r2, [r3, #68]	; 0x44
 800f86a:	e002      	b.n	800f872 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f87a:	4b44      	ldr	r3, [pc, #272]	; (800f98c <HAL_ADC_Start_DMA+0x204>)
 800f87c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f882:	4a43      	ldr	r2, [pc, #268]	; (800f990 <HAL_ADC_Start_DMA+0x208>)
 800f884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88a:	4a42      	ldr	r2, [pc, #264]	; (800f994 <HAL_ADC_Start_DMA+0x20c>)
 800f88c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f892:	4a41      	ldr	r2, [pc, #260]	; (800f998 <HAL_ADC_Start_DMA+0x210>)
 800f894:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f89e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f8ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	689a      	ldr	r2, [r3, #8]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	334c      	adds	r3, #76	; 0x4c
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f000 fff6 	bl	80108c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	f003 031f 	and.w	r3, r3, #31
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d12a      	bne.n	800f936 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a2d      	ldr	r2, [pc, #180]	; (800f99c <HAL_ADC_Start_DMA+0x214>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d015      	beq.n	800f916 <HAL_ADC_Start_DMA+0x18e>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a2c      	ldr	r2, [pc, #176]	; (800f9a0 <HAL_ADC_Start_DMA+0x218>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d105      	bne.n	800f900 <HAL_ADC_Start_DMA+0x178>
 800f8f4:	4b25      	ldr	r3, [pc, #148]	; (800f98c <HAL_ADC_Start_DMA+0x204>)
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	f003 031f 	and.w	r3, r3, #31
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00a      	beq.n	800f916 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4a27      	ldr	r2, [pc, #156]	; (800f9a4 <HAL_ADC_Start_DMA+0x21c>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d136      	bne.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
 800f90a:	4b20      	ldr	r3, [pc, #128]	; (800f98c <HAL_ADC_Start_DMA+0x204>)
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	f003 0310 	and.w	r3, r3, #16
 800f912:	2b00      	cmp	r3, #0
 800f914:	d130      	bne.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f920:	2b00      	cmp	r3, #0
 800f922:	d129      	bne.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689a      	ldr	r2, [r3, #8]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f932:	609a      	str	r2, [r3, #8]
 800f934:	e020      	b.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a18      	ldr	r2, [pc, #96]	; (800f99c <HAL_ADC_Start_DMA+0x214>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d11b      	bne.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d114      	bne.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	689a      	ldr	r2, [r3, #8]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f95c:	609a      	str	r2, [r3, #8]
 800f95e:	e00b      	b.n	800f978 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f964:	f043 0210 	orr.w	r2, r3, #16
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f970:	f043 0201 	orr.w	r2, r3, #1
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3718      	adds	r7, #24
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	20000080 	.word	0x20000080
 800f988:	431bde83 	.word	0x431bde83
 800f98c:	40012300 	.word	0x40012300
 800f990:	0800fe21 	.word	0x0800fe21
 800f994:	0800fedb 	.word	0x0800fedb
 800f998:	0800fef7 	.word	0x0800fef7
 800f99c:	40012000 	.word	0x40012000
 800f9a0:	40012100 	.word	0x40012100
 800f9a4:	40012200 	.word	0x40012200

0800f9a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d101      	bne.n	800fa00 <HAL_ADC_ConfigChannel+0x1c>
 800f9fc:	2302      	movs	r3, #2
 800f9fe:	e105      	b.n	800fc0c <HAL_ADC_ConfigChannel+0x228>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2201      	movs	r2, #1
 800fa04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b09      	cmp	r3, #9
 800fa0e:	d925      	bls.n	800fa5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68d9      	ldr	r1, [r3, #12]
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	4613      	mov	r3, r2
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	4413      	add	r3, r2
 800fa24:	3b1e      	subs	r3, #30
 800fa26:	2207      	movs	r2, #7
 800fa28:	fa02 f303 	lsl.w	r3, r2, r3
 800fa2c:	43da      	mvns	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	400a      	ands	r2, r1
 800fa34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68d9      	ldr	r1, [r3, #12]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	689a      	ldr	r2, [r3, #8]
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	4618      	mov	r0, r3
 800fa48:	4603      	mov	r3, r0
 800fa4a:	005b      	lsls	r3, r3, #1
 800fa4c:	4403      	add	r3, r0
 800fa4e:	3b1e      	subs	r3, #30
 800fa50:	409a      	lsls	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	430a      	orrs	r2, r1
 800fa58:	60da      	str	r2, [r3, #12]
 800fa5a:	e022      	b.n	800faa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6919      	ldr	r1, [r3, #16]
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	4413      	add	r3, r2
 800fa70:	2207      	movs	r2, #7
 800fa72:	fa02 f303 	lsl.w	r3, r2, r3
 800fa76:	43da      	mvns	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	400a      	ands	r2, r1
 800fa7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6919      	ldr	r1, [r3, #16]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	689a      	ldr	r2, [r3, #8]
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	4618      	mov	r0, r3
 800fa92:	4603      	mov	r3, r0
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	4403      	add	r3, r0
 800fa98:	409a      	lsls	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	430a      	orrs	r2, r1
 800faa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	2b06      	cmp	r3, #6
 800faa8:	d824      	bhi.n	800faf4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	685a      	ldr	r2, [r3, #4]
 800fab4:	4613      	mov	r3, r2
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	4413      	add	r3, r2
 800faba:	3b05      	subs	r3, #5
 800fabc:	221f      	movs	r2, #31
 800fabe:	fa02 f303 	lsl.w	r3, r2, r3
 800fac2:	43da      	mvns	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	400a      	ands	r2, r1
 800faca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	4618      	mov	r0, r3
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	4613      	mov	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	3b05      	subs	r3, #5
 800fae6:	fa00 f203 	lsl.w	r2, r0, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	430a      	orrs	r2, r1
 800faf0:	635a      	str	r2, [r3, #52]	; 0x34
 800faf2:	e04c      	b.n	800fb8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	2b0c      	cmp	r3, #12
 800fafa:	d824      	bhi.n	800fb46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	4613      	mov	r3, r2
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	4413      	add	r3, r2
 800fb0c:	3b23      	subs	r3, #35	; 0x23
 800fb0e:	221f      	movs	r2, #31
 800fb10:	fa02 f303 	lsl.w	r3, r2, r3
 800fb14:	43da      	mvns	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	400a      	ands	r2, r1
 800fb1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	685a      	ldr	r2, [r3, #4]
 800fb30:	4613      	mov	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4413      	add	r3, r2
 800fb36:	3b23      	subs	r3, #35	; 0x23
 800fb38:	fa00 f203 	lsl.w	r2, r0, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	430a      	orrs	r2, r1
 800fb42:	631a      	str	r2, [r3, #48]	; 0x30
 800fb44:	e023      	b.n	800fb8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	685a      	ldr	r2, [r3, #4]
 800fb50:	4613      	mov	r3, r2
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4413      	add	r3, r2
 800fb56:	3b41      	subs	r3, #65	; 0x41
 800fb58:	221f      	movs	r2, #31
 800fb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb5e:	43da      	mvns	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	400a      	ands	r2, r1
 800fb66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	4618      	mov	r0, r3
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	3b41      	subs	r3, #65	; 0x41
 800fb82:	fa00 f203 	lsl.w	r2, r0, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	430a      	orrs	r2, r1
 800fb8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fb8e:	4b22      	ldr	r3, [pc, #136]	; (800fc18 <HAL_ADC_ConfigChannel+0x234>)
 800fb90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a21      	ldr	r2, [pc, #132]	; (800fc1c <HAL_ADC_ConfigChannel+0x238>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d109      	bne.n	800fbb0 <HAL_ADC_ConfigChannel+0x1cc>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b12      	cmp	r3, #18
 800fba2:	d105      	bne.n	800fbb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a19      	ldr	r2, [pc, #100]	; (800fc1c <HAL_ADC_ConfigChannel+0x238>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d123      	bne.n	800fc02 <HAL_ADC_ConfigChannel+0x21e>
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b10      	cmp	r3, #16
 800fbc0:	d003      	beq.n	800fbca <HAL_ADC_ConfigChannel+0x1e6>
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b11      	cmp	r3, #17
 800fbc8:	d11b      	bne.n	800fc02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b10      	cmp	r3, #16
 800fbdc:	d111      	bne.n	800fc02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800fbde:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <HAL_ADC_ConfigChannel+0x23c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a10      	ldr	r2, [pc, #64]	; (800fc24 <HAL_ADC_ConfigChannel+0x240>)
 800fbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe8:	0c9a      	lsrs	r2, r3, #18
 800fbea:	4613      	mov	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fbf4:	e002      	b.n	800fbfc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1f9      	bne.n	800fbf6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	40012300 	.word	0x40012300
 800fc1c:	40012000 	.word	0x40012000
 800fc20:	20000080 	.word	0x20000080
 800fc24:	431bde83 	.word	0x431bde83

0800fc28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fc30:	4b79      	ldr	r3, [pc, #484]	; (800fe18 <ADC_Init+0x1f0>)
 800fc32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	685a      	ldr	r2, [r3, #4]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	431a      	orrs	r2, r3
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	685a      	ldr	r2, [r3, #4]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	6859      	ldr	r1, [r3, #4]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	691b      	ldr	r3, [r3, #16]
 800fc68:	021a      	lsls	r2, r3, #8
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	430a      	orrs	r2, r1
 800fc70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800fc80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	6859      	ldr	r1, [r3, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	689a      	ldr	r2, [r3, #8]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	430a      	orrs	r2, r1
 800fc92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	689a      	ldr	r2, [r3, #8]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	6899      	ldr	r1, [r3, #8]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68da      	ldr	r2, [r3, #12]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	430a      	orrs	r2, r1
 800fcb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcba:	4a58      	ldr	r2, [pc, #352]	; (800fe1c <ADC_Init+0x1f4>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d022      	beq.n	800fd06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	689a      	ldr	r2, [r3, #8]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fcce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	6899      	ldr	r1, [r3, #8]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	430a      	orrs	r2, r1
 800fce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	689a      	ldr	r2, [r3, #8]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fcf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	6899      	ldr	r1, [r3, #8]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	430a      	orrs	r2, r1
 800fd02:	609a      	str	r2, [r3, #8]
 800fd04:	e00f      	b.n	800fd26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	689a      	ldr	r2, [r3, #8]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fd14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689a      	ldr	r2, [r3, #8]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fd24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	689a      	ldr	r2, [r3, #8]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f022 0202 	bic.w	r2, r2, #2
 800fd34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	6899      	ldr	r1, [r3, #8]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	7e1b      	ldrb	r3, [r3, #24]
 800fd40:	005a      	lsls	r2, r3, #1
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	430a      	orrs	r2, r1
 800fd48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d01b      	beq.n	800fd8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	685a      	ldr	r2, [r3, #4]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	685a      	ldr	r2, [r3, #4]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fd72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6859      	ldr	r1, [r3, #4]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	035a      	lsls	r2, r3, #13
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	430a      	orrs	r2, r1
 800fd88:	605a      	str	r2, [r3, #4]
 800fd8a:	e007      	b.n	800fd9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800fdaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	69db      	ldr	r3, [r3, #28]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	051a      	lsls	r2, r3, #20
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	430a      	orrs	r2, r1
 800fdc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	689a      	ldr	r2, [r3, #8]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fdd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6899      	ldr	r1, [r3, #8]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdde:	025a      	lsls	r2, r3, #9
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	430a      	orrs	r2, r1
 800fde6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	689a      	ldr	r2, [r3, #8]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6899      	ldr	r1, [r3, #8]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	695b      	ldr	r3, [r3, #20]
 800fe02:	029a      	lsls	r2, r3, #10
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	430a      	orrs	r2, r1
 800fe0a:	609a      	str	r2, [r3, #8]
}
 800fe0c:	bf00      	nop
 800fe0e:	3714      	adds	r7, #20
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	40012300 	.word	0x40012300
 800fe1c:	0f000001 	.word	0x0f000001

0800fe20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d13c      	bne.n	800feb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d12b      	bne.n	800feac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d127      	bne.n	800feac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d006      	beq.n	800fe78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d119      	bne.n	800feac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	685a      	ldr	r2, [r3, #4]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f022 0220 	bic.w	r2, r2, #32
 800fe86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d105      	bne.n	800feac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fea4:	f043 0201 	orr.w	r2, r3, #1
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f7f2 fc23 	bl	80026f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800feb2:	e00e      	b.n	800fed2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feb8:	f003 0310 	and.w	r3, r3, #16
 800febc:	2b00      	cmp	r3, #0
 800febe:	d003      	beq.n	800fec8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7ff fd85 	bl	800f9d0 <HAL_ADC_ErrorCallback>
}
 800fec6:	e004      	b.n	800fed2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	4798      	blx	r3
}
 800fed2:	bf00      	nop
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b084      	sub	sp, #16
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f7ff fd5d 	bl	800f9a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800feee:	bf00      	nop
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b084      	sub	sp, #16
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2240      	movs	r2, #64	; 0x40
 800ff08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff0e:	f043 0204 	orr.w	r2, r3, #4
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f7ff fd5a 	bl	800f9d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ff1c:	bf00      	nop
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d101      	bne.n	800ff4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ff46:	2301      	movs	r3, #1
 800ff48:	e0ed      	b.n	8010126 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d102      	bne.n	800ff5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7f2 fc4a 	bl	80027f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f042 0201 	orr.w	r2, r2, #1
 800ff6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ff6c:	f7ff fa7c 	bl	800f468 <HAL_GetTick>
 800ff70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ff72:	e012      	b.n	800ff9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ff74:	f7ff fa78 	bl	800f468 <HAL_GetTick>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	2b0a      	cmp	r3, #10
 800ff80:	d90b      	bls.n	800ff9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2205      	movs	r2, #5
 800ff92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	e0c5      	b.n	8010126 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d0e5      	beq.n	800ff74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f022 0202 	bic.w	r2, r2, #2
 800ffb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ffb8:	f7ff fa56 	bl	800f468 <HAL_GetTick>
 800ffbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ffbe:	e012      	b.n	800ffe6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ffc0:	f7ff fa52 	bl	800f468 <HAL_GetTick>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	2b0a      	cmp	r3, #10
 800ffcc:	d90b      	bls.n	800ffe6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2205      	movs	r2, #5
 800ffde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e09f      	b.n	8010126 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	f003 0302 	and.w	r3, r3, #2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1e5      	bne.n	800ffc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	7e1b      	ldrb	r3, [r3, #24]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d108      	bne.n	801000e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	e007      	b.n	801001e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801001c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	7e5b      	ldrb	r3, [r3, #25]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d108      	bne.n	8010038 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010034:	601a      	str	r2, [r3, #0]
 8010036:	e007      	b.n	8010048 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010046:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	7e9b      	ldrb	r3, [r3, #26]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d108      	bne.n	8010062 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f042 0220 	orr.w	r2, r2, #32
 801005e:	601a      	str	r2, [r3, #0]
 8010060:	e007      	b.n	8010072 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f022 0220 	bic.w	r2, r2, #32
 8010070:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	7edb      	ldrb	r3, [r3, #27]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d108      	bne.n	801008c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f022 0210 	bic.w	r2, r2, #16
 8010088:	601a      	str	r2, [r3, #0]
 801008a:	e007      	b.n	801009c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f042 0210 	orr.w	r2, r2, #16
 801009a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	7f1b      	ldrb	r3, [r3, #28]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d108      	bne.n	80100b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f042 0208 	orr.w	r2, r2, #8
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	e007      	b.n	80100c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f022 0208 	bic.w	r2, r2, #8
 80100c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	7f5b      	ldrb	r3, [r3, #29]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d108      	bne.n	80100e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f042 0204 	orr.w	r2, r2, #4
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	e007      	b.n	80100f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f022 0204 	bic.w	r2, r2, #4
 80100ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689a      	ldr	r2, [r3, #8]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	431a      	orrs	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	431a      	orrs	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	695b      	ldr	r3, [r3, #20]
 8010104:	ea42 0103 	orr.w	r1, r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	1e5a      	subs	r2, r3, #1
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	430a      	orrs	r2, r1
 8010114:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2200      	movs	r2, #0
 801011a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b08a      	sub	sp, #40	; 0x28
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8010136:	2300      	movs	r3, #0
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	695b      	ldr	r3, [r3, #20]
 8010140:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	699b      	ldr	r3, [r3, #24]
 8010168:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 801016a:	6a3b      	ldr	r3, [r7, #32]
 801016c:	f003 0301 	and.w	r3, r3, #1
 8010170:	2b00      	cmp	r3, #0
 8010172:	d07c      	beq.n	801026e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	f003 0301 	and.w	r3, r3, #1
 801017a:	2b00      	cmp	r3, #0
 801017c:	d023      	beq.n	80101c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2201      	movs	r2, #1
 8010184:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d003      	beq.n	8010198 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 f983 	bl	801049c <HAL_CAN_TxMailbox0CompleteCallback>
 8010196:	e016      	b.n	80101c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	f003 0304 	and.w	r3, r3, #4
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d004      	beq.n	80101ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
 80101aa:	e00c      	b.n	80101c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	f003 0308 	and.w	r3, r3, #8
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d004      	beq.n	80101c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80101b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80101bc:	627b      	str	r3, [r7, #36]	; 0x24
 80101be:	e002      	b.n	80101c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 f989 	bl	80104d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d024      	beq.n	801021a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80101d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d003      	beq.n	80101ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 f963 	bl	80104b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80101ea:	e016      	b.n	801021a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d004      	beq.n	8010200 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80101fc:	627b      	str	r3, [r7, #36]	; 0x24
 80101fe:	e00c      	b.n	801021a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010206:	2b00      	cmp	r3, #0
 8010208:	d004      	beq.n	8010214 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010210:	627b      	str	r3, [r7, #36]	; 0x24
 8010212:	e002      	b.n	801021a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 f969 	bl	80104ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010220:	2b00      	cmp	r3, #0
 8010222:	d024      	beq.n	801026e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801022c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010234:	2b00      	cmp	r3, #0
 8010236:	d003      	beq.n	8010240 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 f943 	bl	80104c4 <HAL_CAN_TxMailbox2CompleteCallback>
 801023e:	e016      	b.n	801026e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010246:	2b00      	cmp	r3, #0
 8010248:	d004      	beq.n	8010254 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010250:	627b      	str	r3, [r7, #36]	; 0x24
 8010252:	e00c      	b.n	801026e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8010254:	69bb      	ldr	r3, [r7, #24]
 8010256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801025a:	2b00      	cmp	r3, #0
 801025c:	d004      	beq.n	8010268 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010264:	627b      	str	r3, [r7, #36]	; 0x24
 8010266:	e002      	b.n	801026e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 f949 	bl	8010500 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801026e:	6a3b      	ldr	r3, [r7, #32]
 8010270:	f003 0308 	and.w	r3, r3, #8
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00c      	beq.n	8010292 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	f003 0310 	and.w	r3, r3, #16
 801027e:	2b00      	cmp	r3, #0
 8010280:	d007      	beq.n	8010292 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2210      	movs	r2, #16
 8010290:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8010292:	6a3b      	ldr	r3, [r7, #32]
 8010294:	f003 0304 	and.w	r3, r3, #4
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00b      	beq.n	80102b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	f003 0308 	and.w	r3, r3, #8
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d006      	beq.n	80102b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2208      	movs	r2, #8
 80102ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f93a 	bl	8010528 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80102b4:	6a3b      	ldr	r3, [r7, #32]
 80102b6:	f003 0302 	and.w	r3, r3, #2
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d009      	beq.n	80102d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	f003 0303 	and.w	r3, r3, #3
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 f921 	bl	8010514 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80102d2:	6a3b      	ldr	r3, [r7, #32]
 80102d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00c      	beq.n	80102f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	f003 0310 	and.w	r3, r3, #16
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d007      	beq.n	80102f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80102e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80102ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2210      	movs	r2, #16
 80102f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	f003 0320 	and.w	r3, r3, #32
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00b      	beq.n	8010318 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	f003 0308 	and.w	r3, r3, #8
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2208      	movs	r2, #8
 8010310:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 f91c 	bl	8010550 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8010318:	6a3b      	ldr	r3, [r7, #32]
 801031a:	f003 0310 	and.w	r3, r3, #16
 801031e:	2b00      	cmp	r3, #0
 8010320:	d009      	beq.n	8010336 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	691b      	ldr	r3, [r3, #16]
 8010328:	f003 0303 	and.w	r3, r3, #3
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 f903 	bl	801053c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8010336:	6a3b      	ldr	r3, [r7, #32]
 8010338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00b      	beq.n	8010358 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	f003 0310 	and.w	r3, r3, #16
 8010346:	2b00      	cmp	r3, #0
 8010348:	d006      	beq.n	8010358 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2210      	movs	r2, #16
 8010350:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 f906 	bl	8010564 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8010358:	6a3b      	ldr	r3, [r7, #32]
 801035a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00b      	beq.n	801037a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	f003 0308 	and.w	r3, r3, #8
 8010368:	2b00      	cmp	r3, #0
 801036a:	d006      	beq.n	801037a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2208      	movs	r2, #8
 8010372:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f8ff 	bl	8010578 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010380:	2b00      	cmp	r3, #0
 8010382:	d07b      	beq.n	801047c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	f003 0304 	and.w	r3, r3, #4
 801038a:	2b00      	cmp	r3, #0
 801038c:	d072      	beq.n	8010474 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801038e:	6a3b      	ldr	r3, [r7, #32]
 8010390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010394:	2b00      	cmp	r3, #0
 8010396:	d008      	beq.n	80103aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d003      	beq.n	80103aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	f043 0301 	orr.w	r3, r3, #1
 80103a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80103aa:	6a3b      	ldr	r3, [r7, #32]
 80103ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d008      	beq.n	80103c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d003      	beq.n	80103c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80103be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c0:	f043 0302 	orr.w	r3, r3, #2
 80103c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80103c6:	6a3b      	ldr	r3, [r7, #32]
 80103c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d008      	beq.n	80103e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d003      	beq.n	80103e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80103da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103dc:	f043 0304 	orr.w	r3, r3, #4
 80103e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80103e2:	6a3b      	ldr	r3, [r7, #32]
 80103e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d043      	beq.n	8010474 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d03e      	beq.n	8010474 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80103fc:	2b60      	cmp	r3, #96	; 0x60
 80103fe:	d02b      	beq.n	8010458 <HAL_CAN_IRQHandler+0x32a>
 8010400:	2b60      	cmp	r3, #96	; 0x60
 8010402:	d82e      	bhi.n	8010462 <HAL_CAN_IRQHandler+0x334>
 8010404:	2b50      	cmp	r3, #80	; 0x50
 8010406:	d022      	beq.n	801044e <HAL_CAN_IRQHandler+0x320>
 8010408:	2b50      	cmp	r3, #80	; 0x50
 801040a:	d82a      	bhi.n	8010462 <HAL_CAN_IRQHandler+0x334>
 801040c:	2b40      	cmp	r3, #64	; 0x40
 801040e:	d019      	beq.n	8010444 <HAL_CAN_IRQHandler+0x316>
 8010410:	2b40      	cmp	r3, #64	; 0x40
 8010412:	d826      	bhi.n	8010462 <HAL_CAN_IRQHandler+0x334>
 8010414:	2b30      	cmp	r3, #48	; 0x30
 8010416:	d010      	beq.n	801043a <HAL_CAN_IRQHandler+0x30c>
 8010418:	2b30      	cmp	r3, #48	; 0x30
 801041a:	d822      	bhi.n	8010462 <HAL_CAN_IRQHandler+0x334>
 801041c:	2b10      	cmp	r3, #16
 801041e:	d002      	beq.n	8010426 <HAL_CAN_IRQHandler+0x2f8>
 8010420:	2b20      	cmp	r3, #32
 8010422:	d005      	beq.n	8010430 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8010424:	e01d      	b.n	8010462 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8010426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010428:	f043 0308 	orr.w	r3, r3, #8
 801042c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801042e:	e019      	b.n	8010464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	f043 0310 	orr.w	r3, r3, #16
 8010436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010438:	e014      	b.n	8010464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	f043 0320 	orr.w	r3, r3, #32
 8010440:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010442:	e00f      	b.n	8010464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801044a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801044c:	e00a      	b.n	8010464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 801044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010456:	e005      	b.n	8010464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8010458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801045e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010460:	e000      	b.n	8010464 <HAL_CAN_IRQHandler+0x336>
            break;
 8010462:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	699a      	ldr	r2, [r3, #24]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010472:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2204      	movs	r2, #4
 801047a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	2b00      	cmp	r3, #0
 8010480:	d008      	beq.n	8010494 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	431a      	orrs	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 f87c 	bl	801058c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8010494:	bf00      	nop
 8010496:	3728      	adds	r7, #40	; 0x28
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80104b8:	bf00      	nop
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b083      	sub	sp, #12
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80104cc:	bf00      	nop
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr

080104d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80104e0:	bf00      	nop
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010514:	b480      	push	{r7}
 8010516:	b083      	sub	sp, #12
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 801051c:	bf00      	nop
 801051e:	370c      	adds	r7, #12
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr

08010528 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8010530:	bf00      	nop
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8010544:	bf00      	nop
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr

08010550 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8010558:	bf00      	nop
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801056c:	bf00      	nop
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8010580:	bf00      	nop
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8010594:	bf00      	nop
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b085      	sub	sp, #20
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f003 0307 	and.w	r3, r3, #7
 80105ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80105b0:	4b0c      	ldr	r3, [pc, #48]	; (80105e4 <__NVIC_SetPriorityGrouping+0x44>)
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80105b6:	68ba      	ldr	r2, [r7, #8]
 80105b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80105bc:	4013      	ands	r3, r2
 80105be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80105c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80105cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80105d2:	4a04      	ldr	r2, [pc, #16]	; (80105e4 <__NVIC_SetPriorityGrouping+0x44>)
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	60d3      	str	r3, [r2, #12]
}
 80105d8:	bf00      	nop
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr
 80105e4:	e000ed00 	.word	0xe000ed00

080105e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80105e8:	b480      	push	{r7}
 80105ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80105ec:	4b04      	ldr	r3, [pc, #16]	; (8010600 <__NVIC_GetPriorityGrouping+0x18>)
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	0a1b      	lsrs	r3, r3, #8
 80105f2:	f003 0307 	and.w	r3, r3, #7
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	e000ed00 	.word	0xe000ed00

08010604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	4603      	mov	r3, r0
 801060c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010612:	2b00      	cmp	r3, #0
 8010614:	db0b      	blt.n	801062e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010616:	79fb      	ldrb	r3, [r7, #7]
 8010618:	f003 021f 	and.w	r2, r3, #31
 801061c:	4907      	ldr	r1, [pc, #28]	; (801063c <__NVIC_EnableIRQ+0x38>)
 801061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010622:	095b      	lsrs	r3, r3, #5
 8010624:	2001      	movs	r0, #1
 8010626:	fa00 f202 	lsl.w	r2, r0, r2
 801062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801062e:	bf00      	nop
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	e000e100 	.word	0xe000e100

08010640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	4603      	mov	r3, r0
 8010648:	6039      	str	r1, [r7, #0]
 801064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010650:	2b00      	cmp	r3, #0
 8010652:	db0a      	blt.n	801066a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	b2da      	uxtb	r2, r3
 8010658:	490c      	ldr	r1, [pc, #48]	; (801068c <__NVIC_SetPriority+0x4c>)
 801065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801065e:	0112      	lsls	r2, r2, #4
 8010660:	b2d2      	uxtb	r2, r2
 8010662:	440b      	add	r3, r1
 8010664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010668:	e00a      	b.n	8010680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	b2da      	uxtb	r2, r3
 801066e:	4908      	ldr	r1, [pc, #32]	; (8010690 <__NVIC_SetPriority+0x50>)
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	f003 030f 	and.w	r3, r3, #15
 8010676:	3b04      	subs	r3, #4
 8010678:	0112      	lsls	r2, r2, #4
 801067a:	b2d2      	uxtb	r2, r2
 801067c:	440b      	add	r3, r1
 801067e:	761a      	strb	r2, [r3, #24]
}
 8010680:	bf00      	nop
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr
 801068c:	e000e100 	.word	0xe000e100
 8010690:	e000ed00 	.word	0xe000ed00

08010694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010694:	b480      	push	{r7}
 8010696:	b089      	sub	sp, #36	; 0x24
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f003 0307 	and.w	r3, r3, #7
 80106a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	f1c3 0307 	rsb	r3, r3, #7
 80106ae:	2b04      	cmp	r3, #4
 80106b0:	bf28      	it	cs
 80106b2:	2304      	movcs	r3, #4
 80106b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	3304      	adds	r3, #4
 80106ba:	2b06      	cmp	r3, #6
 80106bc:	d902      	bls.n	80106c4 <NVIC_EncodePriority+0x30>
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	3b03      	subs	r3, #3
 80106c2:	e000      	b.n	80106c6 <NVIC_EncodePriority+0x32>
 80106c4:	2300      	movs	r3, #0
 80106c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80106c8:	f04f 32ff 	mov.w	r2, #4294967295
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	fa02 f303 	lsl.w	r3, r2, r3
 80106d2:	43da      	mvns	r2, r3
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	401a      	ands	r2, r3
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80106dc:	f04f 31ff 	mov.w	r1, #4294967295
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	fa01 f303 	lsl.w	r3, r1, r3
 80106e6:	43d9      	mvns	r1, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80106ec:	4313      	orrs	r3, r2
         );
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3724      	adds	r7, #36	; 0x24
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b082      	sub	sp, #8
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff ff4c 	bl	80105a0 <__NVIC_SetPriorityGrouping>
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	4603      	mov	r3, r0
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801071e:	2300      	movs	r3, #0
 8010720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010722:	f7ff ff61 	bl	80105e8 <__NVIC_GetPriorityGrouping>
 8010726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	68b9      	ldr	r1, [r7, #8]
 801072c:	6978      	ldr	r0, [r7, #20]
 801072e:	f7ff ffb1 	bl	8010694 <NVIC_EncodePriority>
 8010732:	4602      	mov	r2, r0
 8010734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010738:	4611      	mov	r1, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f7ff ff80 	bl	8010640 <__NVIC_SetPriority>
}
 8010740:	bf00      	nop
 8010742:	3718      	adds	r7, #24
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff ff54 	bl	8010604 <__NVIC_EnableIRQ>
}
 801075c:	bf00      	nop
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801076c:	2300      	movs	r3, #0
 801076e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010770:	f7fe fe7a 	bl	800f468 <HAL_GetTick>
 8010774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d101      	bne.n	8010780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801077c:	2301      	movs	r3, #1
 801077e:	e099      	b.n	80108b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2202      	movs	r2, #2
 8010784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2200      	movs	r2, #0
 801078c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f022 0201 	bic.w	r2, r2, #1
 801079e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80107a0:	e00f      	b.n	80107c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80107a2:	f7fe fe61 	bl	800f468 <HAL_GetTick>
 80107a6:	4602      	mov	r2, r0
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	2b05      	cmp	r3, #5
 80107ae:	d908      	bls.n	80107c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2220      	movs	r2, #32
 80107b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2203      	movs	r2, #3
 80107ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80107be:	2303      	movs	r3, #3
 80107c0:	e078      	b.n	80108b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f003 0301 	and.w	r3, r3, #1
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1e8      	bne.n	80107a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80107d8:	697a      	ldr	r2, [r7, #20]
 80107da:	4b38      	ldr	r3, [pc, #224]	; (80108bc <HAL_DMA_Init+0x158>)
 80107dc:	4013      	ands	r3, r2
 80107de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685a      	ldr	r2, [r3, #4]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80107ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80107fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	699b      	ldr	r3, [r3, #24]
 8010800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6a1b      	ldr	r3, [r3, #32]
 801080c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801080e:	697a      	ldr	r2, [r7, #20]
 8010810:	4313      	orrs	r3, r2
 8010812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010818:	2b04      	cmp	r3, #4
 801081a:	d107      	bne.n	801082c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010824:	4313      	orrs	r3, r2
 8010826:	697a      	ldr	r2, [r7, #20]
 8010828:	4313      	orrs	r3, r2
 801082a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	697a      	ldr	r2, [r7, #20]
 8010832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	f023 0307 	bic.w	r3, r3, #7
 8010842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010848:	697a      	ldr	r2, [r7, #20]
 801084a:	4313      	orrs	r3, r2
 801084c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010852:	2b04      	cmp	r3, #4
 8010854:	d117      	bne.n	8010886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801085a:	697a      	ldr	r2, [r7, #20]
 801085c:	4313      	orrs	r3, r2
 801085e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00e      	beq.n	8010886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 fa6f 	bl	8010d4c <DMA_CheckFifoParam>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d008      	beq.n	8010886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2240      	movs	r2, #64	; 0x40
 8010878:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010882:	2301      	movs	r3, #1
 8010884:	e016      	b.n	80108b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	697a      	ldr	r2, [r7, #20]
 801088c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fa26 	bl	8010ce0 <DMA_CalcBaseAndBitshift>
 8010894:	4603      	mov	r3, r0
 8010896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801089c:	223f      	movs	r2, #63	; 0x3f
 801089e:	409a      	lsls	r2, r3
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2201      	movs	r2, #1
 80108ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80108b2:	2300      	movs	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	f010803f 	.word	0xf010803f

080108c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b086      	sub	sp, #24
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80108ce:	2300      	movs	r3, #0
 80108d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80108de:	2b01      	cmp	r3, #1
 80108e0:	d101      	bne.n	80108e6 <HAL_DMA_Start_IT+0x26>
 80108e2:	2302      	movs	r3, #2
 80108e4:	e040      	b.n	8010968 <HAL_DMA_Start_IT+0xa8>
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2201      	movs	r2, #1
 80108ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d12f      	bne.n	801095a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2202      	movs	r2, #2
 80108fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2200      	movs	r2, #0
 8010906:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	68b9      	ldr	r1, [r7, #8]
 801090e:	68f8      	ldr	r0, [r7, #12]
 8010910:	f000 f9b8 	bl	8010c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010918:	223f      	movs	r2, #63	; 0x3f
 801091a:	409a      	lsls	r2, r3
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f042 0216 	orr.w	r2, r2, #22
 801092e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010934:	2b00      	cmp	r3, #0
 8010936:	d007      	beq.n	8010948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f042 0208 	orr.w	r2, r2, #8
 8010946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f042 0201 	orr.w	r2, r2, #1
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	e005      	b.n	8010966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8010962:	2302      	movs	r3, #2
 8010964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8010966:	7dfb      	ldrb	r3, [r7, #23]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3718      	adds	r7, #24
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010978:	2300      	movs	r3, #0
 801097a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801097c:	4b92      	ldr	r3, [pc, #584]	; (8010bc8 <HAL_DMA_IRQHandler+0x258>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4a92      	ldr	r2, [pc, #584]	; (8010bcc <HAL_DMA_IRQHandler+0x25c>)
 8010982:	fba2 2303 	umull	r2, r3, r2, r3
 8010986:	0a9b      	lsrs	r3, r3, #10
 8010988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801098e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801099a:	2208      	movs	r2, #8
 801099c:	409a      	lsls	r2, r3
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	4013      	ands	r3, r2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d01a      	beq.n	80109dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f003 0304 	and.w	r3, r3, #4
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d013      	beq.n	80109dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f022 0204 	bic.w	r2, r2, #4
 80109c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109c8:	2208      	movs	r2, #8
 80109ca:	409a      	lsls	r2, r3
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d4:	f043 0201 	orr.w	r2, r3, #1
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109e0:	2201      	movs	r2, #1
 80109e2:	409a      	lsls	r2, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	4013      	ands	r3, r2
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d012      	beq.n	8010a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	695b      	ldr	r3, [r3, #20]
 80109f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00b      	beq.n	8010a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109fe:	2201      	movs	r2, #1
 8010a00:	409a      	lsls	r2, r3
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a0a:	f043 0202 	orr.w	r2, r3, #2
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a16:	2204      	movs	r2, #4
 8010a18:	409a      	lsls	r2, r3
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d012      	beq.n	8010a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 0302 	and.w	r3, r3, #2
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00b      	beq.n	8010a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a34:	2204      	movs	r2, #4
 8010a36:	409a      	lsls	r2, r3
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a40:	f043 0204 	orr.w	r2, r3, #4
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a4c:	2210      	movs	r2, #16
 8010a4e:	409a      	lsls	r2, r3
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	4013      	ands	r3, r2
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d043      	beq.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f003 0308 	and.w	r3, r3, #8
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d03c      	beq.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a6a:	2210      	movs	r2, #16
 8010a6c:	409a      	lsls	r2, r3
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d018      	beq.n	8010ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d108      	bne.n	8010aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d024      	beq.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	4798      	blx	r3
 8010a9e:	e01f      	b.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d01b      	beq.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	4798      	blx	r3
 8010ab0:	e016      	b.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d107      	bne.n	8010ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f022 0208 	bic.w	r2, r2, #8
 8010ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d003      	beq.n	8010ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ae4:	2220      	movs	r2, #32
 8010ae6:	409a      	lsls	r2, r3
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	4013      	ands	r3, r2
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f000 808e 	beq.w	8010c0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f003 0310 	and.w	r3, r3, #16
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	f000 8086 	beq.w	8010c0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b06:	2220      	movs	r2, #32
 8010b08:	409a      	lsls	r2, r3
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	2b05      	cmp	r3, #5
 8010b18:	d136      	bne.n	8010b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f022 0216 	bic.w	r2, r2, #22
 8010b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	695a      	ldr	r2, [r3, #20]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d103      	bne.n	8010b4a <HAL_DMA_IRQHandler+0x1da>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d007      	beq.n	8010b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f022 0208 	bic.w	r2, r2, #8
 8010b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b5e:	223f      	movs	r2, #63	; 0x3f
 8010b60:	409a      	lsls	r2, r3
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2201      	movs	r2, #1
 8010b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d07d      	beq.n	8010c7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	4798      	blx	r3
        }
        return;
 8010b86:	e078      	b.n	8010c7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d01c      	beq.n	8010bd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d108      	bne.n	8010bb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d030      	beq.n	8010c0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	4798      	blx	r3
 8010bb4:	e02b      	b.n	8010c0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d027      	beq.n	8010c0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	4798      	blx	r3
 8010bc6:	e022      	b.n	8010c0e <HAL_DMA_IRQHandler+0x29e>
 8010bc8:	20000080 	.word	0x20000080
 8010bcc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10f      	bne.n	8010bfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f022 0210 	bic.w	r2, r2, #16
 8010bec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d003      	beq.n	8010c0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d032      	beq.n	8010c7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c1a:	f003 0301 	and.w	r3, r3, #1
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d022      	beq.n	8010c68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2205      	movs	r2, #5
 8010c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f022 0201 	bic.w	r2, r2, #1
 8010c38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	60bb      	str	r3, [r7, #8]
 8010c40:	697a      	ldr	r2, [r7, #20]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d307      	bcc.n	8010c56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1f2      	bne.n	8010c3a <HAL_DMA_IRQHandler+0x2ca>
 8010c54:	e000      	b.n	8010c58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010c56:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d005      	beq.n	8010c7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	4798      	blx	r3
 8010c78:	e000      	b.n	8010c7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8010c7a:	bf00      	nop
    }
  }
}
 8010c7c:	3718      	adds	r7, #24
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop

08010c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b085      	sub	sp, #20
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	2b40      	cmp	r3, #64	; 0x40
 8010cb0:	d108      	bne.n	8010cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	68ba      	ldr	r2, [r7, #8]
 8010cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010cc2:	e007      	b.n	8010cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68ba      	ldr	r2, [r7, #8]
 8010cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	60da      	str	r2, [r3, #12]
}
 8010cd4:	bf00      	nop
 8010cd6:	3714      	adds	r7, #20
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	3b10      	subs	r3, #16
 8010cf0:	4a14      	ldr	r2, [pc, #80]	; (8010d44 <DMA_CalcBaseAndBitshift+0x64>)
 8010cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8010cf6:	091b      	lsrs	r3, r3, #4
 8010cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010cfa:	4a13      	ldr	r2, [pc, #76]	; (8010d48 <DMA_CalcBaseAndBitshift+0x68>)
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	4413      	add	r3, r2
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	461a      	mov	r2, r3
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	d909      	bls.n	8010d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010d16:	f023 0303 	bic.w	r3, r3, #3
 8010d1a:	1d1a      	adds	r2, r3, #4
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8010d20:	e007      	b.n	8010d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010d2a:	f023 0303 	bic.w	r3, r3, #3
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	aaaaaaab 	.word	0xaaaaaaab
 8010d48:	08018f58 	.word	0x08018f58

08010d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d54:	2300      	movs	r3, #0
 8010d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	699b      	ldr	r3, [r3, #24]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d11f      	bne.n	8010da6 <DMA_CheckFifoParam+0x5a>
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2b03      	cmp	r3, #3
 8010d6a:	d856      	bhi.n	8010e1a <DMA_CheckFifoParam+0xce>
 8010d6c:	a201      	add	r2, pc, #4	; (adr r2, 8010d74 <DMA_CheckFifoParam+0x28>)
 8010d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d72:	bf00      	nop
 8010d74:	08010d85 	.word	0x08010d85
 8010d78:	08010d97 	.word	0x08010d97
 8010d7c:	08010d85 	.word	0x08010d85
 8010d80:	08010e1b 	.word	0x08010e1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d046      	beq.n	8010e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010d90:	2301      	movs	r3, #1
 8010d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d94:	e043      	b.n	8010e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010d9e:	d140      	bne.n	8010e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010da0:	2301      	movs	r3, #1
 8010da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010da4:	e03d      	b.n	8010e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	699b      	ldr	r3, [r3, #24]
 8010daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010dae:	d121      	bne.n	8010df4 <DMA_CheckFifoParam+0xa8>
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d837      	bhi.n	8010e26 <DMA_CheckFifoParam+0xda>
 8010db6:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <DMA_CheckFifoParam+0x70>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010dcd 	.word	0x08010dcd
 8010dc0:	08010dd3 	.word	0x08010dd3
 8010dc4:	08010dcd 	.word	0x08010dcd
 8010dc8:	08010de5 	.word	0x08010de5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	73fb      	strb	r3, [r7, #15]
      break;
 8010dd0:	e030      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d025      	beq.n	8010e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010de2:	e022      	b.n	8010e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010dec:	d11f      	bne.n	8010e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010dee:	2301      	movs	r3, #1
 8010df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010df2:	e01c      	b.n	8010e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	d903      	bls.n	8010e02 <DMA_CheckFifoParam+0xb6>
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	d003      	beq.n	8010e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010e00:	e018      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8010e02:	2301      	movs	r3, #1
 8010e04:	73fb      	strb	r3, [r7, #15]
      break;
 8010e06:	e015      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00e      	beq.n	8010e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8010e14:	2301      	movs	r3, #1
 8010e16:	73fb      	strb	r3, [r7, #15]
      break;
 8010e18:	e00b      	b.n	8010e32 <DMA_CheckFifoParam+0xe6>
      break;
 8010e1a:	bf00      	nop
 8010e1c:	e00a      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      break;
 8010e1e:	bf00      	nop
 8010e20:	e008      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      break;
 8010e22:	bf00      	nop
 8010e24:	e006      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      break;
 8010e26:	bf00      	nop
 8010e28:	e004      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      break;
 8010e2a:	bf00      	nop
 8010e2c:	e002      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8010e2e:	bf00      	nop
 8010e30:	e000      	b.n	8010e34 <DMA_CheckFifoParam+0xe8>
      break;
 8010e32:	bf00      	nop
    }
  } 
  
  return status; 
 8010e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop

08010e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b089      	sub	sp, #36	; 0x24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010e52:	2300      	movs	r3, #0
 8010e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010e56:	2300      	movs	r3, #0
 8010e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	61fb      	str	r3, [r7, #28]
 8010e5e:	e16b      	b.n	8011138 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010e60:	2201      	movs	r2, #1
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	fa02 f303 	lsl.w	r3, r2, r3
 8010e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	697a      	ldr	r2, [r7, #20]
 8010e70:	4013      	ands	r3, r2
 8010e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010e74:	693a      	ldr	r2, [r7, #16]
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	f040 815a 	bne.w	8011132 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	f003 0303 	and.w	r3, r3, #3
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d005      	beq.n	8010e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d130      	bne.n	8010ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	689b      	ldr	r3, [r3, #8]
 8010e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	2203      	movs	r2, #3
 8010ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea6:	43db      	mvns	r3, r3
 8010ea8:	69ba      	ldr	r2, [r7, #24]
 8010eaa:	4013      	ands	r3, r2
 8010eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	68da      	ldr	r2, [r3, #12]
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	69ba      	ldr	r2, [r7, #24]
 8010ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010ecc:	2201      	movs	r2, #1
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ed4:	43db      	mvns	r3, r3
 8010ed6:	69ba      	ldr	r2, [r7, #24]
 8010ed8:	4013      	ands	r3, r2
 8010eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	091b      	lsrs	r3, r3, #4
 8010ee2:	f003 0201 	and.w	r2, r3, #1
 8010ee6:	69fb      	ldr	r3, [r7, #28]
 8010ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8010eec:	69ba      	ldr	r2, [r7, #24]
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	69ba      	ldr	r2, [r7, #24]
 8010ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	f003 0303 	and.w	r3, r3, #3
 8010f00:	2b03      	cmp	r3, #3
 8010f02:	d017      	beq.n	8010f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	005b      	lsls	r3, r3, #1
 8010f0e:	2203      	movs	r2, #3
 8010f10:	fa02 f303 	lsl.w	r3, r2, r3
 8010f14:	43db      	mvns	r3, r3
 8010f16:	69ba      	ldr	r2, [r7, #24]
 8010f18:	4013      	ands	r3, r2
 8010f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	689a      	ldr	r2, [r3, #8]
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	005b      	lsls	r3, r3, #1
 8010f24:	fa02 f303 	lsl.w	r3, r2, r3
 8010f28:	69ba      	ldr	r2, [r7, #24]
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	69ba      	ldr	r2, [r7, #24]
 8010f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	f003 0303 	and.w	r3, r3, #3
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d123      	bne.n	8010f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	08da      	lsrs	r2, r3, #3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	3208      	adds	r2, #8
 8010f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	f003 0307 	and.w	r3, r3, #7
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	220f      	movs	r2, #15
 8010f58:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5c:	43db      	mvns	r3, r3
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	4013      	ands	r3, r2
 8010f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	691a      	ldr	r2, [r3, #16]
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	f003 0307 	and.w	r3, r3, #7
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	fa02 f303 	lsl.w	r3, r2, r3
 8010f74:	69ba      	ldr	r2, [r7, #24]
 8010f76:	4313      	orrs	r3, r2
 8010f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010f7a:	69fb      	ldr	r3, [r7, #28]
 8010f7c:	08da      	lsrs	r2, r3, #3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3208      	adds	r2, #8
 8010f82:	69b9      	ldr	r1, [r7, #24]
 8010f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	005b      	lsls	r3, r3, #1
 8010f92:	2203      	movs	r2, #3
 8010f94:	fa02 f303 	lsl.w	r3, r2, r3
 8010f98:	43db      	mvns	r3, r3
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	4013      	ands	r3, r2
 8010f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	f003 0203 	and.w	r2, r3, #3
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	fa02 f303 	lsl.w	r3, r2, r3
 8010fb0:	69ba      	ldr	r2, [r7, #24]
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	69ba      	ldr	r2, [r7, #24]
 8010fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f000 80b4 	beq.w	8011132 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60fb      	str	r3, [r7, #12]
 8010fce:	4b60      	ldr	r3, [pc, #384]	; (8011150 <HAL_GPIO_Init+0x30c>)
 8010fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fd2:	4a5f      	ldr	r2, [pc, #380]	; (8011150 <HAL_GPIO_Init+0x30c>)
 8010fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8010fda:	4b5d      	ldr	r3, [pc, #372]	; (8011150 <HAL_GPIO_Init+0x30c>)
 8010fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010fe6:	4a5b      	ldr	r2, [pc, #364]	; (8011154 <HAL_GPIO_Init+0x310>)
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	089b      	lsrs	r3, r3, #2
 8010fec:	3302      	adds	r3, #2
 8010fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	f003 0303 	and.w	r3, r3, #3
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	220f      	movs	r2, #15
 8010ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8011002:	43db      	mvns	r3, r3
 8011004:	69ba      	ldr	r2, [r7, #24]
 8011006:	4013      	ands	r3, r2
 8011008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a52      	ldr	r2, [pc, #328]	; (8011158 <HAL_GPIO_Init+0x314>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d02b      	beq.n	801106a <HAL_GPIO_Init+0x226>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a51      	ldr	r2, [pc, #324]	; (801115c <HAL_GPIO_Init+0x318>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d025      	beq.n	8011066 <HAL_GPIO_Init+0x222>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a50      	ldr	r2, [pc, #320]	; (8011160 <HAL_GPIO_Init+0x31c>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d01f      	beq.n	8011062 <HAL_GPIO_Init+0x21e>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a4f      	ldr	r2, [pc, #316]	; (8011164 <HAL_GPIO_Init+0x320>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d019      	beq.n	801105e <HAL_GPIO_Init+0x21a>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a4e      	ldr	r2, [pc, #312]	; (8011168 <HAL_GPIO_Init+0x324>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d013      	beq.n	801105a <HAL_GPIO_Init+0x216>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a4d      	ldr	r2, [pc, #308]	; (801116c <HAL_GPIO_Init+0x328>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d00d      	beq.n	8011056 <HAL_GPIO_Init+0x212>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4a4c      	ldr	r2, [pc, #304]	; (8011170 <HAL_GPIO_Init+0x32c>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d007      	beq.n	8011052 <HAL_GPIO_Init+0x20e>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4a4b      	ldr	r2, [pc, #300]	; (8011174 <HAL_GPIO_Init+0x330>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d101      	bne.n	801104e <HAL_GPIO_Init+0x20a>
 801104a:	2307      	movs	r3, #7
 801104c:	e00e      	b.n	801106c <HAL_GPIO_Init+0x228>
 801104e:	2308      	movs	r3, #8
 8011050:	e00c      	b.n	801106c <HAL_GPIO_Init+0x228>
 8011052:	2306      	movs	r3, #6
 8011054:	e00a      	b.n	801106c <HAL_GPIO_Init+0x228>
 8011056:	2305      	movs	r3, #5
 8011058:	e008      	b.n	801106c <HAL_GPIO_Init+0x228>
 801105a:	2304      	movs	r3, #4
 801105c:	e006      	b.n	801106c <HAL_GPIO_Init+0x228>
 801105e:	2303      	movs	r3, #3
 8011060:	e004      	b.n	801106c <HAL_GPIO_Init+0x228>
 8011062:	2302      	movs	r3, #2
 8011064:	e002      	b.n	801106c <HAL_GPIO_Init+0x228>
 8011066:	2301      	movs	r3, #1
 8011068:	e000      	b.n	801106c <HAL_GPIO_Init+0x228>
 801106a:	2300      	movs	r3, #0
 801106c:	69fa      	ldr	r2, [r7, #28]
 801106e:	f002 0203 	and.w	r2, r2, #3
 8011072:	0092      	lsls	r2, r2, #2
 8011074:	4093      	lsls	r3, r2
 8011076:	69ba      	ldr	r2, [r7, #24]
 8011078:	4313      	orrs	r3, r2
 801107a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801107c:	4935      	ldr	r1, [pc, #212]	; (8011154 <HAL_GPIO_Init+0x310>)
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	089b      	lsrs	r3, r3, #2
 8011082:	3302      	adds	r3, #2
 8011084:	69ba      	ldr	r2, [r7, #24]
 8011086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801108a:	4b3b      	ldr	r3, [pc, #236]	; (8011178 <HAL_GPIO_Init+0x334>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	43db      	mvns	r3, r3
 8011094:	69ba      	ldr	r2, [r7, #24]
 8011096:	4013      	ands	r3, r2
 8011098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d003      	beq.n	80110ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80110a6:	69ba      	ldr	r2, [r7, #24]
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	4313      	orrs	r3, r2
 80110ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80110ae:	4a32      	ldr	r2, [pc, #200]	; (8011178 <HAL_GPIO_Init+0x334>)
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80110b4:	4b30      	ldr	r3, [pc, #192]	; (8011178 <HAL_GPIO_Init+0x334>)
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	43db      	mvns	r3, r3
 80110be:	69ba      	ldr	r2, [r7, #24]
 80110c0:	4013      	ands	r3, r2
 80110c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d003      	beq.n	80110d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80110d0:	69ba      	ldr	r2, [r7, #24]
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	4313      	orrs	r3, r2
 80110d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80110d8:	4a27      	ldr	r2, [pc, #156]	; (8011178 <HAL_GPIO_Init+0x334>)
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80110de:	4b26      	ldr	r3, [pc, #152]	; (8011178 <HAL_GPIO_Init+0x334>)
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	43db      	mvns	r3, r3
 80110e8:	69ba      	ldr	r2, [r7, #24]
 80110ea:	4013      	ands	r3, r2
 80110ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d003      	beq.n	8011102 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80110fa:	69ba      	ldr	r2, [r7, #24]
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	4313      	orrs	r3, r2
 8011100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011102:	4a1d      	ldr	r2, [pc, #116]	; (8011178 <HAL_GPIO_Init+0x334>)
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011108:	4b1b      	ldr	r3, [pc, #108]	; (8011178 <HAL_GPIO_Init+0x334>)
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	43db      	mvns	r3, r3
 8011112:	69ba      	ldr	r2, [r7, #24]
 8011114:	4013      	ands	r3, r2
 8011116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011120:	2b00      	cmp	r3, #0
 8011122:	d003      	beq.n	801112c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011124:	69ba      	ldr	r2, [r7, #24]
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	4313      	orrs	r3, r2
 801112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801112c:	4a12      	ldr	r2, [pc, #72]	; (8011178 <HAL_GPIO_Init+0x334>)
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	3301      	adds	r3, #1
 8011136:	61fb      	str	r3, [r7, #28]
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	2b0f      	cmp	r3, #15
 801113c:	f67f ae90 	bls.w	8010e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011140:	bf00      	nop
 8011142:	bf00      	nop
 8011144:	3724      	adds	r7, #36	; 0x24
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	40023800 	.word	0x40023800
 8011154:	40013800 	.word	0x40013800
 8011158:	40020000 	.word	0x40020000
 801115c:	40020400 	.word	0x40020400
 8011160:	40020800 	.word	0x40020800
 8011164:	40020c00 	.word	0x40020c00
 8011168:	40021000 	.word	0x40021000
 801116c:	40021400 	.word	0x40021400
 8011170:	40021800 	.word	0x40021800
 8011174:	40021c00 	.word	0x40021c00
 8011178:	40013c00 	.word	0x40013c00

0801117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	807b      	strh	r3, [r7, #2]
 8011188:	4613      	mov	r3, r2
 801118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801118c:	787b      	ldrb	r3, [r7, #1]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011192:	887a      	ldrh	r2, [r7, #2]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011198:	e003      	b.n	80111a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801119a:	887b      	ldrh	r3, [r7, #2]
 801119c:	041a      	lsls	r2, r3, #16
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	619a      	str	r2, [r3, #24]
}
 80111a2:	bf00      	nop
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80111ae:	b480      	push	{r7}
 80111b0:	b083      	sub	sp, #12
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80111be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	370c      	adds	r7, #12
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
	...

080111d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d101      	bne.n	80111e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80111de:	2301      	movs	r3, #1
 80111e0:	e264      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d075      	beq.n	80112da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80111ee:	4ba3      	ldr	r3, [pc, #652]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	f003 030c 	and.w	r3, r3, #12
 80111f6:	2b04      	cmp	r3, #4
 80111f8:	d00c      	beq.n	8011214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80111fa:	4ba0      	ldr	r3, [pc, #640]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011202:	2b08      	cmp	r3, #8
 8011204:	d112      	bne.n	801122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011206:	4b9d      	ldr	r3, [pc, #628]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011212:	d10b      	bne.n	801122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011214:	4b99      	ldr	r3, [pc, #612]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801121c:	2b00      	cmp	r3, #0
 801121e:	d05b      	beq.n	80112d8 <HAL_RCC_OscConfig+0x108>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d157      	bne.n	80112d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011228:	2301      	movs	r3, #1
 801122a:	e23f      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011234:	d106      	bne.n	8011244 <HAL_RCC_OscConfig+0x74>
 8011236:	4b91      	ldr	r3, [pc, #580]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a90      	ldr	r2, [pc, #576]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011240:	6013      	str	r3, [r2, #0]
 8011242:	e01d      	b.n	8011280 <HAL_RCC_OscConfig+0xb0>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801124c:	d10c      	bne.n	8011268 <HAL_RCC_OscConfig+0x98>
 801124e:	4b8b      	ldr	r3, [pc, #556]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4a8a      	ldr	r2, [pc, #552]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011258:	6013      	str	r3, [r2, #0]
 801125a:	4b88      	ldr	r3, [pc, #544]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a87      	ldr	r2, [pc, #540]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011264:	6013      	str	r3, [r2, #0]
 8011266:	e00b      	b.n	8011280 <HAL_RCC_OscConfig+0xb0>
 8011268:	4b84      	ldr	r3, [pc, #528]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a83      	ldr	r2, [pc, #524]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011272:	6013      	str	r3, [r2, #0]
 8011274:	4b81      	ldr	r3, [pc, #516]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a80      	ldr	r2, [pc, #512]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d013      	beq.n	80112b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011288:	f7fe f8ee 	bl	800f468 <HAL_GetTick>
 801128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801128e:	e008      	b.n	80112a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011290:	f7fe f8ea 	bl	800f468 <HAL_GetTick>
 8011294:	4602      	mov	r2, r0
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	2b64      	cmp	r3, #100	; 0x64
 801129c:	d901      	bls.n	80112a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801129e:	2303      	movs	r3, #3
 80112a0:	e204      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80112a2:	4b76      	ldr	r3, [pc, #472]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0f0      	beq.n	8011290 <HAL_RCC_OscConfig+0xc0>
 80112ae:	e014      	b.n	80112da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112b0:	f7fe f8da 	bl	800f468 <HAL_GetTick>
 80112b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112b6:	e008      	b.n	80112ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80112b8:	f7fe f8d6 	bl	800f468 <HAL_GetTick>
 80112bc:	4602      	mov	r2, r0
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	2b64      	cmp	r3, #100	; 0x64
 80112c4:	d901      	bls.n	80112ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80112c6:	2303      	movs	r3, #3
 80112c8:	e1f0      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112ca:	4b6c      	ldr	r3, [pc, #432]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d1f0      	bne.n	80112b8 <HAL_RCC_OscConfig+0xe8>
 80112d6:	e000      	b.n	80112da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f003 0302 	and.w	r3, r3, #2
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d063      	beq.n	80113ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80112e6:	4b65      	ldr	r3, [pc, #404]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	f003 030c 	and.w	r3, r3, #12
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00b      	beq.n	801130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80112f2:	4b62      	ldr	r3, [pc, #392]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80112fa:	2b08      	cmp	r3, #8
 80112fc:	d11c      	bne.n	8011338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80112fe:	4b5f      	ldr	r3, [pc, #380]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011306:	2b00      	cmp	r3, #0
 8011308:	d116      	bne.n	8011338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801130a:	4b5c      	ldr	r3, [pc, #368]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f003 0302 	and.w	r3, r3, #2
 8011312:	2b00      	cmp	r3, #0
 8011314:	d005      	beq.n	8011322 <HAL_RCC_OscConfig+0x152>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d001      	beq.n	8011322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801131e:	2301      	movs	r3, #1
 8011320:	e1c4      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011322:	4b56      	ldr	r3, [pc, #344]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	4952      	ldr	r1, [pc, #328]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011332:	4313      	orrs	r3, r2
 8011334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011336:	e03a      	b.n	80113ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d020      	beq.n	8011382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011340:	4b4f      	ldr	r3, [pc, #316]	; (8011480 <HAL_RCC_OscConfig+0x2b0>)
 8011342:	2201      	movs	r2, #1
 8011344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011346:	f7fe f88f 	bl	800f468 <HAL_GetTick>
 801134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801134c:	e008      	b.n	8011360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801134e:	f7fe f88b 	bl	800f468 <HAL_GetTick>
 8011352:	4602      	mov	r2, r0
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	2b02      	cmp	r3, #2
 801135a:	d901      	bls.n	8011360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e1a5      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011360:	4b46      	ldr	r3, [pc, #280]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f003 0302 	and.w	r3, r3, #2
 8011368:	2b00      	cmp	r3, #0
 801136a:	d0f0      	beq.n	801134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801136c:	4b43      	ldr	r3, [pc, #268]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	00db      	lsls	r3, r3, #3
 801137a:	4940      	ldr	r1, [pc, #256]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801137c:	4313      	orrs	r3, r2
 801137e:	600b      	str	r3, [r1, #0]
 8011380:	e015      	b.n	80113ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011382:	4b3f      	ldr	r3, [pc, #252]	; (8011480 <HAL_RCC_OscConfig+0x2b0>)
 8011384:	2200      	movs	r2, #0
 8011386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011388:	f7fe f86e 	bl	800f468 <HAL_GetTick>
 801138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801138e:	e008      	b.n	80113a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011390:	f7fe f86a 	bl	800f468 <HAL_GetTick>
 8011394:	4602      	mov	r2, r0
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	1ad3      	subs	r3, r2, r3
 801139a:	2b02      	cmp	r3, #2
 801139c:	d901      	bls.n	80113a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801139e:	2303      	movs	r3, #3
 80113a0:	e184      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113a2:	4b36      	ldr	r3, [pc, #216]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f003 0302 	and.w	r3, r3, #2
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1f0      	bne.n	8011390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f003 0308 	and.w	r3, r3, #8
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d030      	beq.n	801141c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d016      	beq.n	80113f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80113c2:	4b30      	ldr	r3, [pc, #192]	; (8011484 <HAL_RCC_OscConfig+0x2b4>)
 80113c4:	2201      	movs	r2, #1
 80113c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113c8:	f7fe f84e 	bl	800f468 <HAL_GetTick>
 80113cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80113ce:	e008      	b.n	80113e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80113d0:	f7fe f84a 	bl	800f468 <HAL_GetTick>
 80113d4:	4602      	mov	r2, r0
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d901      	bls.n	80113e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80113de:	2303      	movs	r3, #3
 80113e0:	e164      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80113e2:	4b26      	ldr	r3, [pc, #152]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 80113e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113e6:	f003 0302 	and.w	r3, r3, #2
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0f0      	beq.n	80113d0 <HAL_RCC_OscConfig+0x200>
 80113ee:	e015      	b.n	801141c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80113f0:	4b24      	ldr	r3, [pc, #144]	; (8011484 <HAL_RCC_OscConfig+0x2b4>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80113f6:	f7fe f837 	bl	800f468 <HAL_GetTick>
 80113fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80113fc:	e008      	b.n	8011410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80113fe:	f7fe f833 	bl	800f468 <HAL_GetTick>
 8011402:	4602      	mov	r2, r0
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	2b02      	cmp	r3, #2
 801140a:	d901      	bls.n	8011410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801140c:	2303      	movs	r3, #3
 801140e:	e14d      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011410:	4b1a      	ldr	r3, [pc, #104]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011414:	f003 0302 	and.w	r3, r3, #2
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1f0      	bne.n	80113fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f003 0304 	and.w	r3, r3, #4
 8011424:	2b00      	cmp	r3, #0
 8011426:	f000 80a0 	beq.w	801156a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801142a:	2300      	movs	r3, #0
 801142c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801142e:	4b13      	ldr	r3, [pc, #76]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011436:	2b00      	cmp	r3, #0
 8011438:	d10f      	bne.n	801145a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801143a:	2300      	movs	r3, #0
 801143c:	60bb      	str	r3, [r7, #8]
 801143e:	4b0f      	ldr	r3, [pc, #60]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011442:	4a0e      	ldr	r2, [pc, #56]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 8011444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011448:	6413      	str	r3, [r2, #64]	; 0x40
 801144a:	4b0c      	ldr	r3, [pc, #48]	; (801147c <HAL_RCC_OscConfig+0x2ac>)
 801144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011452:	60bb      	str	r3, [r7, #8]
 8011454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011456:	2301      	movs	r3, #1
 8011458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801145a:	4b0b      	ldr	r3, [pc, #44]	; (8011488 <HAL_RCC_OscConfig+0x2b8>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011462:	2b00      	cmp	r3, #0
 8011464:	d121      	bne.n	80114aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011466:	4b08      	ldr	r3, [pc, #32]	; (8011488 <HAL_RCC_OscConfig+0x2b8>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4a07      	ldr	r2, [pc, #28]	; (8011488 <HAL_RCC_OscConfig+0x2b8>)
 801146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011472:	f7fd fff9 	bl	800f468 <HAL_GetTick>
 8011476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011478:	e011      	b.n	801149e <HAL_RCC_OscConfig+0x2ce>
 801147a:	bf00      	nop
 801147c:	40023800 	.word	0x40023800
 8011480:	42470000 	.word	0x42470000
 8011484:	42470e80 	.word	0x42470e80
 8011488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801148c:	f7fd ffec 	bl	800f468 <HAL_GetTick>
 8011490:	4602      	mov	r2, r0
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	2b02      	cmp	r3, #2
 8011498:	d901      	bls.n	801149e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801149a:	2303      	movs	r3, #3
 801149c:	e106      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801149e:	4b85      	ldr	r3, [pc, #532]	; (80116b4 <HAL_RCC_OscConfig+0x4e4>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d0f0      	beq.n	801148c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	689b      	ldr	r3, [r3, #8]
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d106      	bne.n	80114c0 <HAL_RCC_OscConfig+0x2f0>
 80114b2:	4b81      	ldr	r3, [pc, #516]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114b6:	4a80      	ldr	r2, [pc, #512]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114b8:	f043 0301 	orr.w	r3, r3, #1
 80114bc:	6713      	str	r3, [r2, #112]	; 0x70
 80114be:	e01c      	b.n	80114fa <HAL_RCC_OscConfig+0x32a>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	689b      	ldr	r3, [r3, #8]
 80114c4:	2b05      	cmp	r3, #5
 80114c6:	d10c      	bne.n	80114e2 <HAL_RCC_OscConfig+0x312>
 80114c8:	4b7b      	ldr	r3, [pc, #492]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114cc:	4a7a      	ldr	r2, [pc, #488]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114ce:	f043 0304 	orr.w	r3, r3, #4
 80114d2:	6713      	str	r3, [r2, #112]	; 0x70
 80114d4:	4b78      	ldr	r3, [pc, #480]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114d8:	4a77      	ldr	r2, [pc, #476]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114da:	f043 0301 	orr.w	r3, r3, #1
 80114de:	6713      	str	r3, [r2, #112]	; 0x70
 80114e0:	e00b      	b.n	80114fa <HAL_RCC_OscConfig+0x32a>
 80114e2:	4b75      	ldr	r3, [pc, #468]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e6:	4a74      	ldr	r2, [pc, #464]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114e8:	f023 0301 	bic.w	r3, r3, #1
 80114ec:	6713      	str	r3, [r2, #112]	; 0x70
 80114ee:	4b72      	ldr	r3, [pc, #456]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114f2:	4a71      	ldr	r2, [pc, #452]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80114f4:	f023 0304 	bic.w	r3, r3, #4
 80114f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d015      	beq.n	801152e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011502:	f7fd ffb1 	bl	800f468 <HAL_GetTick>
 8011506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011508:	e00a      	b.n	8011520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801150a:	f7fd ffad 	bl	800f468 <HAL_GetTick>
 801150e:	4602      	mov	r2, r0
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	f241 3288 	movw	r2, #5000	; 0x1388
 8011518:	4293      	cmp	r3, r2
 801151a:	d901      	bls.n	8011520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801151c:	2303      	movs	r3, #3
 801151e:	e0c5      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011520:	4b65      	ldr	r3, [pc, #404]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 8011522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011524:	f003 0302 	and.w	r3, r3, #2
 8011528:	2b00      	cmp	r3, #0
 801152a:	d0ee      	beq.n	801150a <HAL_RCC_OscConfig+0x33a>
 801152c:	e014      	b.n	8011558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801152e:	f7fd ff9b 	bl	800f468 <HAL_GetTick>
 8011532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011534:	e00a      	b.n	801154c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011536:	f7fd ff97 	bl	800f468 <HAL_GetTick>
 801153a:	4602      	mov	r2, r0
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	f241 3288 	movw	r2, #5000	; 0x1388
 8011544:	4293      	cmp	r3, r2
 8011546:	d901      	bls.n	801154c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8011548:	2303      	movs	r3, #3
 801154a:	e0af      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801154c:	4b5a      	ldr	r3, [pc, #360]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 801154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011550:	f003 0302 	and.w	r3, r3, #2
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1ee      	bne.n	8011536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011558:	7dfb      	ldrb	r3, [r7, #23]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d105      	bne.n	801156a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801155e:	4b56      	ldr	r3, [pc, #344]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 8011560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011562:	4a55      	ldr	r2, [pc, #340]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 8011564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	699b      	ldr	r3, [r3, #24]
 801156e:	2b00      	cmp	r3, #0
 8011570:	f000 809b 	beq.w	80116aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011574:	4b50      	ldr	r3, [pc, #320]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 8011576:	689b      	ldr	r3, [r3, #8]
 8011578:	f003 030c 	and.w	r3, r3, #12
 801157c:	2b08      	cmp	r3, #8
 801157e:	d05c      	beq.n	801163a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	699b      	ldr	r3, [r3, #24]
 8011584:	2b02      	cmp	r3, #2
 8011586:	d141      	bne.n	801160c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011588:	4b4c      	ldr	r3, [pc, #304]	; (80116bc <HAL_RCC_OscConfig+0x4ec>)
 801158a:	2200      	movs	r2, #0
 801158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801158e:	f7fd ff6b 	bl	800f468 <HAL_GetTick>
 8011592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011594:	e008      	b.n	80115a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011596:	f7fd ff67 	bl	800f468 <HAL_GetTick>
 801159a:	4602      	mov	r2, r0
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	d901      	bls.n	80115a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80115a4:	2303      	movs	r3, #3
 80115a6:	e081      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80115a8:	4b43      	ldr	r3, [pc, #268]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1f0      	bne.n	8011596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	69da      	ldr	r2, [r3, #28]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6a1b      	ldr	r3, [r3, #32]
 80115bc:	431a      	orrs	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c2:	019b      	lsls	r3, r3, #6
 80115c4:	431a      	orrs	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ca:	085b      	lsrs	r3, r3, #1
 80115cc:	3b01      	subs	r3, #1
 80115ce:	041b      	lsls	r3, r3, #16
 80115d0:	431a      	orrs	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d6:	061b      	lsls	r3, r3, #24
 80115d8:	4937      	ldr	r1, [pc, #220]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 80115da:	4313      	orrs	r3, r2
 80115dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80115de:	4b37      	ldr	r3, [pc, #220]	; (80116bc <HAL_RCC_OscConfig+0x4ec>)
 80115e0:	2201      	movs	r2, #1
 80115e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80115e4:	f7fd ff40 	bl	800f468 <HAL_GetTick>
 80115e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115ea:	e008      	b.n	80115fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80115ec:	f7fd ff3c 	bl	800f468 <HAL_GetTick>
 80115f0:	4602      	mov	r2, r0
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d901      	bls.n	80115fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80115fa:	2303      	movs	r3, #3
 80115fc:	e056      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115fe:	4b2e      	ldr	r3, [pc, #184]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011606:	2b00      	cmp	r3, #0
 8011608:	d0f0      	beq.n	80115ec <HAL_RCC_OscConfig+0x41c>
 801160a:	e04e      	b.n	80116aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801160c:	4b2b      	ldr	r3, [pc, #172]	; (80116bc <HAL_RCC_OscConfig+0x4ec>)
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011612:	f7fd ff29 	bl	800f468 <HAL_GetTick>
 8011616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011618:	e008      	b.n	801162c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801161a:	f7fd ff25 	bl	800f468 <HAL_GetTick>
 801161e:	4602      	mov	r2, r0
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	2b02      	cmp	r3, #2
 8011626:	d901      	bls.n	801162c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8011628:	2303      	movs	r3, #3
 801162a:	e03f      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801162c:	4b22      	ldr	r3, [pc, #136]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1f0      	bne.n	801161a <HAL_RCC_OscConfig+0x44a>
 8011638:	e037      	b.n	80116aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	699b      	ldr	r3, [r3, #24]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d101      	bne.n	8011646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8011642:	2301      	movs	r3, #1
 8011644:	e032      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011646:	4b1c      	ldr	r3, [pc, #112]	; (80116b8 <HAL_RCC_OscConfig+0x4e8>)
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	699b      	ldr	r3, [r3, #24]
 8011650:	2b01      	cmp	r3, #1
 8011652:	d028      	beq.n	80116a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801165e:	429a      	cmp	r2, r3
 8011660:	d121      	bne.n	80116a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801166c:	429a      	cmp	r2, r3
 801166e:	d11a      	bne.n	80116a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011676:	4013      	ands	r3, r2
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801167c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801167e:	4293      	cmp	r3, r2
 8011680:	d111      	bne.n	80116a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801168c:	085b      	lsrs	r3, r3, #1
 801168e:	3b01      	subs	r3, #1
 8011690:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011692:	429a      	cmp	r2, r3
 8011694:	d107      	bne.n	80116a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d001      	beq.n	80116aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80116a6:	2301      	movs	r3, #1
 80116a8:	e000      	b.n	80116ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80116aa:	2300      	movs	r3, #0
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3718      	adds	r7, #24
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	40007000 	.word	0x40007000
 80116b8:	40023800 	.word	0x40023800
 80116bc:	42470060 	.word	0x42470060

080116c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d101      	bne.n	80116d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80116d0:	2301      	movs	r3, #1
 80116d2:	e0cc      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80116d4:	4b68      	ldr	r3, [pc, #416]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f003 0307 	and.w	r3, r3, #7
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d90c      	bls.n	80116fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116e2:	4b65      	ldr	r3, [pc, #404]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80116e4:	683a      	ldr	r2, [r7, #0]
 80116e6:	b2d2      	uxtb	r2, r2
 80116e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80116ea:	4b63      	ldr	r3, [pc, #396]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f003 0307 	and.w	r3, r3, #7
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d001      	beq.n	80116fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e0b8      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f003 0302 	and.w	r3, r3, #2
 8011704:	2b00      	cmp	r3, #0
 8011706:	d020      	beq.n	801174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f003 0304 	and.w	r3, r3, #4
 8011710:	2b00      	cmp	r3, #0
 8011712:	d005      	beq.n	8011720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011714:	4b59      	ldr	r3, [pc, #356]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011716:	689b      	ldr	r3, [r3, #8]
 8011718:	4a58      	ldr	r2, [pc, #352]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f003 0308 	and.w	r3, r3, #8
 8011728:	2b00      	cmp	r3, #0
 801172a:	d005      	beq.n	8011738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801172c:	4b53      	ldr	r3, [pc, #332]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	4a52      	ldr	r2, [pc, #328]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011738:	4b50      	ldr	r3, [pc, #320]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	494d      	ldr	r1, [pc, #308]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011746:	4313      	orrs	r3, r2
 8011748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f003 0301 	and.w	r3, r3, #1
 8011752:	2b00      	cmp	r3, #0
 8011754:	d044      	beq.n	80117e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	2b01      	cmp	r3, #1
 801175c:	d107      	bne.n	801176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801175e:	4b47      	ldr	r3, [pc, #284]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011766:	2b00      	cmp	r3, #0
 8011768:	d119      	bne.n	801179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	e07f      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	2b02      	cmp	r3, #2
 8011774:	d003      	beq.n	801177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801177a:	2b03      	cmp	r3, #3
 801177c:	d107      	bne.n	801178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801177e:	4b3f      	ldr	r3, [pc, #252]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011786:	2b00      	cmp	r3, #0
 8011788:	d109      	bne.n	801179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801178a:	2301      	movs	r3, #1
 801178c:	e06f      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801178e:	4b3b      	ldr	r3, [pc, #236]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f003 0302 	and.w	r3, r3, #2
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801179a:	2301      	movs	r3, #1
 801179c:	e067      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801179e:	4b37      	ldr	r3, [pc, #220]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	f023 0203 	bic.w	r2, r3, #3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	4934      	ldr	r1, [pc, #208]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 80117ac:	4313      	orrs	r3, r2
 80117ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80117b0:	f7fd fe5a 	bl	800f468 <HAL_GetTick>
 80117b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80117b6:	e00a      	b.n	80117ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117b8:	f7fd fe56 	bl	800f468 <HAL_GetTick>
 80117bc:	4602      	mov	r2, r0
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d901      	bls.n	80117ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80117ca:	2303      	movs	r3, #3
 80117cc:	e04f      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80117ce:	4b2b      	ldr	r3, [pc, #172]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	f003 020c 	and.w	r2, r3, #12
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	429a      	cmp	r2, r3
 80117de:	d1eb      	bne.n	80117b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80117e0:	4b25      	ldr	r3, [pc, #148]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f003 0307 	and.w	r3, r3, #7
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d20c      	bcs.n	8011808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80117ee:	4b22      	ldr	r3, [pc, #136]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	b2d2      	uxtb	r2, r2
 80117f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80117f6:	4b20      	ldr	r3, [pc, #128]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	f003 0307 	and.w	r3, r3, #7
 80117fe:	683a      	ldr	r2, [r7, #0]
 8011800:	429a      	cmp	r2, r3
 8011802:	d001      	beq.n	8011808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011804:	2301      	movs	r3, #1
 8011806:	e032      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f003 0304 	and.w	r3, r3, #4
 8011810:	2b00      	cmp	r3, #0
 8011812:	d008      	beq.n	8011826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011814:	4b19      	ldr	r3, [pc, #100]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	4916      	ldr	r1, [pc, #88]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011822:	4313      	orrs	r3, r2
 8011824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f003 0308 	and.w	r3, r3, #8
 801182e:	2b00      	cmp	r3, #0
 8011830:	d009      	beq.n	8011846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011832:	4b12      	ldr	r3, [pc, #72]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	691b      	ldr	r3, [r3, #16]
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	490e      	ldr	r1, [pc, #56]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011842:	4313      	orrs	r3, r2
 8011844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011846:	f000 f821 	bl	801188c <HAL_RCC_GetSysClockFreq>
 801184a:	4602      	mov	r2, r0
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	091b      	lsrs	r3, r3, #4
 8011852:	f003 030f 	and.w	r3, r3, #15
 8011856:	490a      	ldr	r1, [pc, #40]	; (8011880 <HAL_RCC_ClockConfig+0x1c0>)
 8011858:	5ccb      	ldrb	r3, [r1, r3]
 801185a:	fa22 f303 	lsr.w	r3, r2, r3
 801185e:	4a09      	ldr	r2, [pc, #36]	; (8011884 <HAL_RCC_ClockConfig+0x1c4>)
 8011860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011862:	4b09      	ldr	r3, [pc, #36]	; (8011888 <HAL_RCC_ClockConfig+0x1c8>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4618      	mov	r0, r3
 8011868:	f7f2 fa42 	bl	8003cf0 <HAL_InitTick>

  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	40023c00 	.word	0x40023c00
 801187c:	40023800 	.word	0x40023800
 8011880:	08018f20 	.word	0x08018f20
 8011884:	20000080 	.word	0x20000080
 8011888:	20001438 	.word	0x20001438

0801188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801188c:	b5b0      	push	{r4, r5, r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011892:	2100      	movs	r1, #0
 8011894:	6079      	str	r1, [r7, #4]
 8011896:	2100      	movs	r1, #0
 8011898:	60f9      	str	r1, [r7, #12]
 801189a:	2100      	movs	r1, #0
 801189c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801189e:	2100      	movs	r1, #0
 80118a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80118a2:	4952      	ldr	r1, [pc, #328]	; (80119ec <HAL_RCC_GetSysClockFreq+0x160>)
 80118a4:	6889      	ldr	r1, [r1, #8]
 80118a6:	f001 010c 	and.w	r1, r1, #12
 80118aa:	2908      	cmp	r1, #8
 80118ac:	d00d      	beq.n	80118ca <HAL_RCC_GetSysClockFreq+0x3e>
 80118ae:	2908      	cmp	r1, #8
 80118b0:	f200 8094 	bhi.w	80119dc <HAL_RCC_GetSysClockFreq+0x150>
 80118b4:	2900      	cmp	r1, #0
 80118b6:	d002      	beq.n	80118be <HAL_RCC_GetSysClockFreq+0x32>
 80118b8:	2904      	cmp	r1, #4
 80118ba:	d003      	beq.n	80118c4 <HAL_RCC_GetSysClockFreq+0x38>
 80118bc:	e08e      	b.n	80119dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80118be:	4b4c      	ldr	r3, [pc, #304]	; (80119f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80118c0:	60bb      	str	r3, [r7, #8]
       break;
 80118c2:	e08e      	b.n	80119e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80118c4:	4b4b      	ldr	r3, [pc, #300]	; (80119f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80118c6:	60bb      	str	r3, [r7, #8]
      break;
 80118c8:	e08b      	b.n	80119e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80118ca:	4948      	ldr	r1, [pc, #288]	; (80119ec <HAL_RCC_GetSysClockFreq+0x160>)
 80118cc:	6849      	ldr	r1, [r1, #4]
 80118ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80118d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80118d4:	4945      	ldr	r1, [pc, #276]	; (80119ec <HAL_RCC_GetSysClockFreq+0x160>)
 80118d6:	6849      	ldr	r1, [r1, #4]
 80118d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80118dc:	2900      	cmp	r1, #0
 80118de:	d024      	beq.n	801192a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80118e0:	4942      	ldr	r1, [pc, #264]	; (80119ec <HAL_RCC_GetSysClockFreq+0x160>)
 80118e2:	6849      	ldr	r1, [r1, #4]
 80118e4:	0989      	lsrs	r1, r1, #6
 80118e6:	4608      	mov	r0, r1
 80118e8:	f04f 0100 	mov.w	r1, #0
 80118ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80118f0:	f04f 0500 	mov.w	r5, #0
 80118f4:	ea00 0204 	and.w	r2, r0, r4
 80118f8:	ea01 0305 	and.w	r3, r1, r5
 80118fc:	493d      	ldr	r1, [pc, #244]	; (80119f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80118fe:	fb01 f003 	mul.w	r0, r1, r3
 8011902:	2100      	movs	r1, #0
 8011904:	fb01 f102 	mul.w	r1, r1, r2
 8011908:	1844      	adds	r4, r0, r1
 801190a:	493a      	ldr	r1, [pc, #232]	; (80119f4 <HAL_RCC_GetSysClockFreq+0x168>)
 801190c:	fba2 0101 	umull	r0, r1, r2, r1
 8011910:	1863      	adds	r3, r4, r1
 8011912:	4619      	mov	r1, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	461a      	mov	r2, r3
 8011918:	f04f 0300 	mov.w	r3, #0
 801191c:	f7ef f9a6 	bl	8000c6c <__aeabi_uldivmod>
 8011920:	4602      	mov	r2, r0
 8011922:	460b      	mov	r3, r1
 8011924:	4613      	mov	r3, r2
 8011926:	60fb      	str	r3, [r7, #12]
 8011928:	e04a      	b.n	80119c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801192a:	4b30      	ldr	r3, [pc, #192]	; (80119ec <HAL_RCC_GetSysClockFreq+0x160>)
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	099b      	lsrs	r3, r3, #6
 8011930:	461a      	mov	r2, r3
 8011932:	f04f 0300 	mov.w	r3, #0
 8011936:	f240 10ff 	movw	r0, #511	; 0x1ff
 801193a:	f04f 0100 	mov.w	r1, #0
 801193e:	ea02 0400 	and.w	r4, r2, r0
 8011942:	ea03 0501 	and.w	r5, r3, r1
 8011946:	4620      	mov	r0, r4
 8011948:	4629      	mov	r1, r5
 801194a:	f04f 0200 	mov.w	r2, #0
 801194e:	f04f 0300 	mov.w	r3, #0
 8011952:	014b      	lsls	r3, r1, #5
 8011954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8011958:	0142      	lsls	r2, r0, #5
 801195a:	4610      	mov	r0, r2
 801195c:	4619      	mov	r1, r3
 801195e:	1b00      	subs	r0, r0, r4
 8011960:	eb61 0105 	sbc.w	r1, r1, r5
 8011964:	f04f 0200 	mov.w	r2, #0
 8011968:	f04f 0300 	mov.w	r3, #0
 801196c:	018b      	lsls	r3, r1, #6
 801196e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8011972:	0182      	lsls	r2, r0, #6
 8011974:	1a12      	subs	r2, r2, r0
 8011976:	eb63 0301 	sbc.w	r3, r3, r1
 801197a:	f04f 0000 	mov.w	r0, #0
 801197e:	f04f 0100 	mov.w	r1, #0
 8011982:	00d9      	lsls	r1, r3, #3
 8011984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011988:	00d0      	lsls	r0, r2, #3
 801198a:	4602      	mov	r2, r0
 801198c:	460b      	mov	r3, r1
 801198e:	1912      	adds	r2, r2, r4
 8011990:	eb45 0303 	adc.w	r3, r5, r3
 8011994:	f04f 0000 	mov.w	r0, #0
 8011998:	f04f 0100 	mov.w	r1, #0
 801199c:	0299      	lsls	r1, r3, #10
 801199e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80119a2:	0290      	lsls	r0, r2, #10
 80119a4:	4602      	mov	r2, r0
 80119a6:	460b      	mov	r3, r1
 80119a8:	4610      	mov	r0, r2
 80119aa:	4619      	mov	r1, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	461a      	mov	r2, r3
 80119b0:	f04f 0300 	mov.w	r3, #0
 80119b4:	f7ef f95a 	bl	8000c6c <__aeabi_uldivmod>
 80119b8:	4602      	mov	r2, r0
 80119ba:	460b      	mov	r3, r1
 80119bc:	4613      	mov	r3, r2
 80119be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80119c0:	4b0a      	ldr	r3, [pc, #40]	; (80119ec <HAL_RCC_GetSysClockFreq+0x160>)
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	0c1b      	lsrs	r3, r3, #16
 80119c6:	f003 0303 	and.w	r3, r3, #3
 80119ca:	3301      	adds	r3, #1
 80119cc:	005b      	lsls	r3, r3, #1
 80119ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80119d8:	60bb      	str	r3, [r7, #8]
      break;
 80119da:	e002      	b.n	80119e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80119dc:	4b04      	ldr	r3, [pc, #16]	; (80119f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80119de:	60bb      	str	r3, [r7, #8]
      break;
 80119e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80119e2:	68bb      	ldr	r3, [r7, #8]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bdb0      	pop	{r4, r5, r7, pc}
 80119ec:	40023800 	.word	0x40023800
 80119f0:	00f42400 	.word	0x00f42400
 80119f4:	017d7840 	.word	0x017d7840

080119f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80119f8:	b480      	push	{r7}
 80119fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80119fc:	4b03      	ldr	r3, [pc, #12]	; (8011a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80119fe:	681b      	ldr	r3, [r3, #0]
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	20000080 	.word	0x20000080

08011a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011a14:	f7ff fff0 	bl	80119f8 <HAL_RCC_GetHCLKFreq>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	4b05      	ldr	r3, [pc, #20]	; (8011a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	0a9b      	lsrs	r3, r3, #10
 8011a20:	f003 0307 	and.w	r3, r3, #7
 8011a24:	4903      	ldr	r1, [pc, #12]	; (8011a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011a26:	5ccb      	ldrb	r3, [r1, r3]
 8011a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	40023800 	.word	0x40023800
 8011a34:	08018f30 	.word	0x08018f30

08011a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	220f      	movs	r2, #15
 8011a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011a48:	4b12      	ldr	r3, [pc, #72]	; (8011a94 <HAL_RCC_GetClockConfig+0x5c>)
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	f003 0203 	and.w	r2, r3, #3
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011a54:	4b0f      	ldr	r3, [pc, #60]	; (8011a94 <HAL_RCC_GetClockConfig+0x5c>)
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011a60:	4b0c      	ldr	r3, [pc, #48]	; (8011a94 <HAL_RCC_GetClockConfig+0x5c>)
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011a6c:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <HAL_RCC_GetClockConfig+0x5c>)
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	08db      	lsrs	r3, r3, #3
 8011a72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011a7a:	4b07      	ldr	r3, [pc, #28]	; (8011a98 <HAL_RCC_GetClockConfig+0x60>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f003 0207 	and.w	r2, r3, #7
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	601a      	str	r2, [r3, #0]
}
 8011a86:	bf00      	nop
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop
 8011a94:	40023800 	.word	0x40023800
 8011a98:	40023c00 	.word	0x40023c00

08011a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e07b      	b.n	8011ba6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d108      	bne.n	8011ac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011abe:	d009      	beq.n	8011ad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	61da      	str	r2, [r3, #28]
 8011ac6:	e005      	b.n	8011ad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d106      	bne.n	8011af4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f7f2 f86a 	bl	8003bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2202      	movs	r2, #2
 8011af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8011b1c:	431a      	orrs	r2, r3
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b26:	431a      	orrs	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	691b      	ldr	r3, [r3, #16]
 8011b2c:	f003 0302 	and.w	r3, r3, #2
 8011b30:	431a      	orrs	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	f003 0301 	and.w	r3, r3, #1
 8011b3a:	431a      	orrs	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	699b      	ldr	r3, [r3, #24]
 8011b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b44:	431a      	orrs	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	69db      	ldr	r3, [r3, #28]
 8011b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011b4e:	431a      	orrs	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6a1b      	ldr	r3, [r3, #32]
 8011b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b58:	ea42 0103 	orr.w	r1, r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	430a      	orrs	r2, r1
 8011b6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	699b      	ldr	r3, [r3, #24]
 8011b70:	0c1b      	lsrs	r3, r3, #16
 8011b72:	f003 0104 	and.w	r1, r3, #4
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b7a:	f003 0210 	and.w	r2, r3, #16
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	430a      	orrs	r2, r1
 8011b84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	69da      	ldr	r2, [r3, #28]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b082      	sub	sp, #8
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e041      	b.n	8011c44 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d106      	bne.n	8011bda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7f2 fae7 	bl	80041a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2202      	movs	r2, #2
 8011bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	3304      	adds	r3, #4
 8011bea:	4619      	mov	r1, r3
 8011bec:	4610      	mov	r0, r2
 8011bee:	f001 f857 	bl	8012ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2201      	movs	r2, #1
 8011c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2201      	movs	r2, #1
 8011c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2201      	movs	r2, #1
 8011c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2201      	movs	r2, #1
 8011c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011c42:	2300      	movs	r3, #0
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b085      	sub	sp, #20
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d001      	beq.n	8011c64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011c60:	2301      	movs	r3, #1
 8011c62:	e046      	b.n	8011cf2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2202      	movs	r2, #2
 8011c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4a23      	ldr	r2, [pc, #140]	; (8011d00 <HAL_TIM_Base_Start+0xb4>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d022      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c7e:	d01d      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	4a1f      	ldr	r2, [pc, #124]	; (8011d04 <HAL_TIM_Base_Start+0xb8>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d018      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4a1e      	ldr	r2, [pc, #120]	; (8011d08 <HAL_TIM_Base_Start+0xbc>)
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d013      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	4a1c      	ldr	r2, [pc, #112]	; (8011d0c <HAL_TIM_Base_Start+0xc0>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d00e      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4a1b      	ldr	r2, [pc, #108]	; (8011d10 <HAL_TIM_Base_Start+0xc4>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	d009      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	4a19      	ldr	r2, [pc, #100]	; (8011d14 <HAL_TIM_Base_Start+0xc8>)
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	d004      	beq.n	8011cbc <HAL_TIM_Base_Start+0x70>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a18      	ldr	r2, [pc, #96]	; (8011d18 <HAL_TIM_Base_Start+0xcc>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d111      	bne.n	8011ce0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	f003 0307 	and.w	r3, r3, #7
 8011cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2b06      	cmp	r3, #6
 8011ccc:	d010      	beq.n	8011cf0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f042 0201 	orr.w	r2, r2, #1
 8011cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011cde:	e007      	b.n	8011cf0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	f042 0201 	orr.w	r2, r2, #1
 8011cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011cf0:	2300      	movs	r3, #0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3714      	adds	r7, #20
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	40010000 	.word	0x40010000
 8011d04:	40000400 	.word	0x40000400
 8011d08:	40000800 	.word	0x40000800
 8011d0c:	40000c00 	.word	0x40000c00
 8011d10:	40010400 	.word	0x40010400
 8011d14:	40014000 	.word	0x40014000
 8011d18:	40001800 	.word	0x40001800

08011d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d001      	beq.n	8011d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011d30:	2301      	movs	r3, #1
 8011d32:	e04e      	b.n	8011dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2202      	movs	r2, #2
 8011d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	68da      	ldr	r2, [r3, #12]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f042 0201 	orr.w	r2, r2, #1
 8011d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a23      	ldr	r2, [pc, #140]	; (8011de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d022      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d5e:	d01d      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4a1f      	ldr	r2, [pc, #124]	; (8011de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d018      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a1e      	ldr	r2, [pc, #120]	; (8011de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d013      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4a1c      	ldr	r2, [pc, #112]	; (8011dec <HAL_TIM_Base_Start_IT+0xd0>)
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d00e      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	4a1b      	ldr	r2, [pc, #108]	; (8011df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8011d84:	4293      	cmp	r3, r2
 8011d86:	d009      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a19      	ldr	r2, [pc, #100]	; (8011df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d004      	beq.n	8011d9c <HAL_TIM_Base_Start_IT+0x80>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4a18      	ldr	r2, [pc, #96]	; (8011df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8011d98:	4293      	cmp	r3, r2
 8011d9a:	d111      	bne.n	8011dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	689b      	ldr	r3, [r3, #8]
 8011da2:	f003 0307 	and.w	r3, r3, #7
 8011da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2b06      	cmp	r3, #6
 8011dac:	d010      	beq.n	8011dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f042 0201 	orr.w	r2, r2, #1
 8011dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011dbe:	e007      	b.n	8011dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f042 0201 	orr.w	r2, r2, #1
 8011dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011dd0:	2300      	movs	r3, #0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3714      	adds	r7, #20
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop
 8011de0:	40010000 	.word	0x40010000
 8011de4:	40000400 	.word	0x40000400
 8011de8:	40000800 	.word	0x40000800
 8011dec:	40000c00 	.word	0x40000c00
 8011df0:	40010400 	.word	0x40010400
 8011df4:	40014000 	.word	0x40014000
 8011df8:	40001800 	.word	0x40001800

08011dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	e041      	b.n	8011e92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d106      	bne.n	8011e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 f839 	bl	8011e9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	3304      	adds	r3, #4
 8011e38:	4619      	mov	r1, r3
 8011e3a:	4610      	mov	r0, r2
 8011e3c:	f000 ff30 	bl	8012ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2201      	movs	r2, #1
 8011e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2201      	movs	r2, #1
 8011e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2201      	movs	r2, #1
 8011e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2201      	movs	r2, #1
 8011e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e90:	2300      	movs	r3, #0
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011e9a:	b480      	push	{r7}
 8011e9c:	b083      	sub	sp, #12
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011ea2:	bf00      	nop
 8011ea4:	370c      	adds	r7, #12
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr
	...

08011eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d109      	bne.n	8011ed4 <HAL_TIM_PWM_Start+0x24>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	bf14      	ite	ne
 8011ecc:	2301      	movne	r3, #1
 8011ece:	2300      	moveq	r3, #0
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	e022      	b.n	8011f1a <HAL_TIM_PWM_Start+0x6a>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2b04      	cmp	r3, #4
 8011ed8:	d109      	bne.n	8011eee <HAL_TIM_PWM_Start+0x3e>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	bf14      	ite	ne
 8011ee6:	2301      	movne	r3, #1
 8011ee8:	2300      	moveq	r3, #0
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	e015      	b.n	8011f1a <HAL_TIM_PWM_Start+0x6a>
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	2b08      	cmp	r3, #8
 8011ef2:	d109      	bne.n	8011f08 <HAL_TIM_PWM_Start+0x58>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	bf14      	ite	ne
 8011f00:	2301      	movne	r3, #1
 8011f02:	2300      	moveq	r3, #0
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	e008      	b.n	8011f1a <HAL_TIM_PWM_Start+0x6a>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	bf14      	ite	ne
 8011f14:	2301      	movne	r3, #1
 8011f16:	2300      	moveq	r3, #0
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d001      	beq.n	8011f22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e07c      	b.n	801201c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d104      	bne.n	8011f32 <HAL_TIM_PWM_Start+0x82>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011f30:	e013      	b.n	8011f5a <HAL_TIM_PWM_Start+0xaa>
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	2b04      	cmp	r3, #4
 8011f36:	d104      	bne.n	8011f42 <HAL_TIM_PWM_Start+0x92>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2202      	movs	r2, #2
 8011f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011f40:	e00b      	b.n	8011f5a <HAL_TIM_PWM_Start+0xaa>
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	2b08      	cmp	r3, #8
 8011f46:	d104      	bne.n	8011f52 <HAL_TIM_PWM_Start+0xa2>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2202      	movs	r2, #2
 8011f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011f50:	e003      	b.n	8011f5a <HAL_TIM_PWM_Start+0xaa>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2202      	movs	r2, #2
 8011f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	6839      	ldr	r1, [r7, #0]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f001 fb42 	bl	80135ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a2d      	ldr	r2, [pc, #180]	; (8012024 <HAL_TIM_PWM_Start+0x174>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d004      	beq.n	8011f7c <HAL_TIM_PWM_Start+0xcc>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4a2c      	ldr	r2, [pc, #176]	; (8012028 <HAL_TIM_PWM_Start+0x178>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	d101      	bne.n	8011f80 <HAL_TIM_PWM_Start+0xd0>
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	e000      	b.n	8011f82 <HAL_TIM_PWM_Start+0xd2>
 8011f80:	2300      	movs	r3, #0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d007      	beq.n	8011f96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011f94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4a22      	ldr	r2, [pc, #136]	; (8012024 <HAL_TIM_PWM_Start+0x174>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	d022      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011fa8:	d01d      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a1f      	ldr	r2, [pc, #124]	; (801202c <HAL_TIM_PWM_Start+0x17c>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d018      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a1d      	ldr	r2, [pc, #116]	; (8012030 <HAL_TIM_PWM_Start+0x180>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d013      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a1c      	ldr	r2, [pc, #112]	; (8012034 <HAL_TIM_PWM_Start+0x184>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d00e      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a16      	ldr	r2, [pc, #88]	; (8012028 <HAL_TIM_PWM_Start+0x178>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d009      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4a18      	ldr	r2, [pc, #96]	; (8012038 <HAL_TIM_PWM_Start+0x188>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d004      	beq.n	8011fe6 <HAL_TIM_PWM_Start+0x136>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a16      	ldr	r2, [pc, #88]	; (801203c <HAL_TIM_PWM_Start+0x18c>)
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d111      	bne.n	801200a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	f003 0307 	and.w	r3, r3, #7
 8011ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	2b06      	cmp	r3, #6
 8011ff6:	d010      	beq.n	801201a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f042 0201 	orr.w	r2, r2, #1
 8012006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012008:	e007      	b.n	801201a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f042 0201 	orr.w	r2, r2, #1
 8012018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3710      	adds	r7, #16
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	40010000 	.word	0x40010000
 8012028:	40010400 	.word	0x40010400
 801202c:	40000400 	.word	0x40000400
 8012030:	40000800 	.word	0x40000800
 8012034:	40000c00 	.word	0x40000c00
 8012038:	40014000 	.word	0x40014000
 801203c:	40001800 	.word	0x40001800

08012040 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801204e:	2301      	movs	r3, #1
 8012050:	e041      	b.n	80120d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012058:	b2db      	uxtb	r3, r3
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 f839 	bl	80120de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2202      	movs	r2, #2
 8012070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3304      	adds	r3, #4
 801207c:	4619      	mov	r1, r3
 801207e:	4610      	mov	r0, r2
 8012080:	f000 fe0e 	bl	8012ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2201      	movs	r2, #1
 8012088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2201      	movs	r2, #1
 8012098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2201      	movs	r2, #1
 80120a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2201      	movs	r2, #1
 80120a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2201      	movs	r2, #1
 80120b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2201      	movs	r2, #1
 80120b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2201      	movs	r2, #1
 80120c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2201      	movs	r2, #1
 80120c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2201      	movs	r2, #1
 80120d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80120d4:	2300      	movs	r3, #0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}

080120de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80120de:	b480      	push	{r7}
 80120e0:	b083      	sub	sp, #12
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80120e6:	bf00      	nop
 80120e8:	370c      	adds	r7, #12
 80120ea:	46bd      	mov	sp, r7
 80120ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f0:	4770      	bx	lr
	...

080120f4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d104      	bne.n	801210e <HAL_TIM_IC_Start+0x1a>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801210a:	b2db      	uxtb	r3, r3
 801210c:	e013      	b.n	8012136 <HAL_TIM_IC_Start+0x42>
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	2b04      	cmp	r3, #4
 8012112:	d104      	bne.n	801211e <HAL_TIM_IC_Start+0x2a>
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801211a:	b2db      	uxtb	r3, r3
 801211c:	e00b      	b.n	8012136 <HAL_TIM_IC_Start+0x42>
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2b08      	cmp	r3, #8
 8012122:	d104      	bne.n	801212e <HAL_TIM_IC_Start+0x3a>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801212a:	b2db      	uxtb	r3, r3
 801212c:	e003      	b.n	8012136 <HAL_TIM_IC_Start+0x42>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012134:	b2db      	uxtb	r3, r3
 8012136:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d104      	bne.n	8012148 <HAL_TIM_IC_Start+0x54>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012144:	b2db      	uxtb	r3, r3
 8012146:	e013      	b.n	8012170 <HAL_TIM_IC_Start+0x7c>
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	2b04      	cmp	r3, #4
 801214c:	d104      	bne.n	8012158 <HAL_TIM_IC_Start+0x64>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012154:	b2db      	uxtb	r3, r3
 8012156:	e00b      	b.n	8012170 <HAL_TIM_IC_Start+0x7c>
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2b08      	cmp	r3, #8
 801215c:	d104      	bne.n	8012168 <HAL_TIM_IC_Start+0x74>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012164:	b2db      	uxtb	r3, r3
 8012166:	e003      	b.n	8012170 <HAL_TIM_IC_Start+0x7c>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801216e:	b2db      	uxtb	r3, r3
 8012170:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012172:	7bfb      	ldrb	r3, [r7, #15]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d102      	bne.n	801217e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012178:	7bbb      	ldrb	r3, [r7, #14]
 801217a:	2b01      	cmp	r3, #1
 801217c:	d001      	beq.n	8012182 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 801217e:	2301      	movs	r3, #1
 8012180:	e081      	b.n	8012286 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d104      	bne.n	8012192 <HAL_TIM_IC_Start+0x9e>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2202      	movs	r2, #2
 801218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012190:	e013      	b.n	80121ba <HAL_TIM_IC_Start+0xc6>
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	2b04      	cmp	r3, #4
 8012196:	d104      	bne.n	80121a2 <HAL_TIM_IC_Start+0xae>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2202      	movs	r2, #2
 801219c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80121a0:	e00b      	b.n	80121ba <HAL_TIM_IC_Start+0xc6>
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	2b08      	cmp	r3, #8
 80121a6:	d104      	bne.n	80121b2 <HAL_TIM_IC_Start+0xbe>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2202      	movs	r2, #2
 80121ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80121b0:	e003      	b.n	80121ba <HAL_TIM_IC_Start+0xc6>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2202      	movs	r2, #2
 80121b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d104      	bne.n	80121ca <HAL_TIM_IC_Start+0xd6>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2202      	movs	r2, #2
 80121c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80121c8:	e013      	b.n	80121f2 <HAL_TIM_IC_Start+0xfe>
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	2b04      	cmp	r3, #4
 80121ce:	d104      	bne.n	80121da <HAL_TIM_IC_Start+0xe6>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2202      	movs	r2, #2
 80121d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80121d8:	e00b      	b.n	80121f2 <HAL_TIM_IC_Start+0xfe>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	2b08      	cmp	r3, #8
 80121de:	d104      	bne.n	80121ea <HAL_TIM_IC_Start+0xf6>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2202      	movs	r2, #2
 80121e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80121e8:	e003      	b.n	80121f2 <HAL_TIM_IC_Start+0xfe>
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2202      	movs	r2, #2
 80121ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	2201      	movs	r2, #1
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f001 f9f6 	bl	80135ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	4a22      	ldr	r2, [pc, #136]	; (8012290 <HAL_TIM_IC_Start+0x19c>)
 8012206:	4293      	cmp	r3, r2
 8012208:	d022      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012212:	d01d      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4a1e      	ldr	r2, [pc, #120]	; (8012294 <HAL_TIM_IC_Start+0x1a0>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d018      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4a1d      	ldr	r2, [pc, #116]	; (8012298 <HAL_TIM_IC_Start+0x1a4>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d013      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4a1b      	ldr	r2, [pc, #108]	; (801229c <HAL_TIM_IC_Start+0x1a8>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d00e      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	4a1a      	ldr	r2, [pc, #104]	; (80122a0 <HAL_TIM_IC_Start+0x1ac>)
 8012238:	4293      	cmp	r3, r2
 801223a:	d009      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4a18      	ldr	r2, [pc, #96]	; (80122a4 <HAL_TIM_IC_Start+0x1b0>)
 8012242:	4293      	cmp	r3, r2
 8012244:	d004      	beq.n	8012250 <HAL_TIM_IC_Start+0x15c>
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4a17      	ldr	r2, [pc, #92]	; (80122a8 <HAL_TIM_IC_Start+0x1b4>)
 801224c:	4293      	cmp	r3, r2
 801224e:	d111      	bne.n	8012274 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	f003 0307 	and.w	r3, r3, #7
 801225a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	2b06      	cmp	r3, #6
 8012260:	d010      	beq.n	8012284 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f042 0201 	orr.w	r2, r2, #1
 8012270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012272:	e007      	b.n	8012284 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f042 0201 	orr.w	r2, r2, #1
 8012282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012284:	2300      	movs	r3, #0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3710      	adds	r7, #16
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	40010000 	.word	0x40010000
 8012294:	40000400 	.word	0x40000400
 8012298:	40000800 	.word	0x40000800
 801229c:	40000c00 	.word	0x40000c00
 80122a0:	40010400 	.word	0x40010400
 80122a4:	40014000 	.word	0x40014000
 80122a8:	40001800 	.word	0x40001800

080122ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b084      	sub	sp, #16
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d104      	bne.n	80122ca <HAL_TIM_IC_Start_IT+0x1e>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	e013      	b.n	80122f2 <HAL_TIM_IC_Start_IT+0x46>
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	2b04      	cmp	r3, #4
 80122ce:	d104      	bne.n	80122da <HAL_TIM_IC_Start_IT+0x2e>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	e00b      	b.n	80122f2 <HAL_TIM_IC_Start_IT+0x46>
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	2b08      	cmp	r3, #8
 80122de:	d104      	bne.n	80122ea <HAL_TIM_IC_Start_IT+0x3e>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	e003      	b.n	80122f2 <HAL_TIM_IC_Start_IT+0x46>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d104      	bne.n	8012304 <HAL_TIM_IC_Start_IT+0x58>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012300:	b2db      	uxtb	r3, r3
 8012302:	e013      	b.n	801232c <HAL_TIM_IC_Start_IT+0x80>
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b04      	cmp	r3, #4
 8012308:	d104      	bne.n	8012314 <HAL_TIM_IC_Start_IT+0x68>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012310:	b2db      	uxtb	r3, r3
 8012312:	e00b      	b.n	801232c <HAL_TIM_IC_Start_IT+0x80>
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	2b08      	cmp	r3, #8
 8012318:	d104      	bne.n	8012324 <HAL_TIM_IC_Start_IT+0x78>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012320:	b2db      	uxtb	r3, r3
 8012322:	e003      	b.n	801232c <HAL_TIM_IC_Start_IT+0x80>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801232a:	b2db      	uxtb	r3, r3
 801232c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801232e:	7bbb      	ldrb	r3, [r7, #14]
 8012330:	2b01      	cmp	r3, #1
 8012332:	d102      	bne.n	801233a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012334:	7b7b      	ldrb	r3, [r7, #13]
 8012336:	2b01      	cmp	r3, #1
 8012338:	d001      	beq.n	801233e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801233a:	2301      	movs	r3, #1
 801233c:	e0cc      	b.n	80124d8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d104      	bne.n	801234e <HAL_TIM_IC_Start_IT+0xa2>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2202      	movs	r2, #2
 8012348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801234c:	e013      	b.n	8012376 <HAL_TIM_IC_Start_IT+0xca>
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	2b04      	cmp	r3, #4
 8012352:	d104      	bne.n	801235e <HAL_TIM_IC_Start_IT+0xb2>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2202      	movs	r2, #2
 8012358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801235c:	e00b      	b.n	8012376 <HAL_TIM_IC_Start_IT+0xca>
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	2b08      	cmp	r3, #8
 8012362:	d104      	bne.n	801236e <HAL_TIM_IC_Start_IT+0xc2>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2202      	movs	r2, #2
 8012368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801236c:	e003      	b.n	8012376 <HAL_TIM_IC_Start_IT+0xca>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2202      	movs	r2, #2
 8012372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d104      	bne.n	8012386 <HAL_TIM_IC_Start_IT+0xda>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2202      	movs	r2, #2
 8012380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012384:	e013      	b.n	80123ae <HAL_TIM_IC_Start_IT+0x102>
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	2b04      	cmp	r3, #4
 801238a:	d104      	bne.n	8012396 <HAL_TIM_IC_Start_IT+0xea>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2202      	movs	r2, #2
 8012390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012394:	e00b      	b.n	80123ae <HAL_TIM_IC_Start_IT+0x102>
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	2b08      	cmp	r3, #8
 801239a:	d104      	bne.n	80123a6 <HAL_TIM_IC_Start_IT+0xfa>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2202      	movs	r2, #2
 80123a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123a4:	e003      	b.n	80123ae <HAL_TIM_IC_Start_IT+0x102>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2202      	movs	r2, #2
 80123aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	2b0c      	cmp	r3, #12
 80123b2:	d841      	bhi.n	8012438 <HAL_TIM_IC_Start_IT+0x18c>
 80123b4:	a201      	add	r2, pc, #4	; (adr r2, 80123bc <HAL_TIM_IC_Start_IT+0x110>)
 80123b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ba:	bf00      	nop
 80123bc:	080123f1 	.word	0x080123f1
 80123c0:	08012439 	.word	0x08012439
 80123c4:	08012439 	.word	0x08012439
 80123c8:	08012439 	.word	0x08012439
 80123cc:	08012403 	.word	0x08012403
 80123d0:	08012439 	.word	0x08012439
 80123d4:	08012439 	.word	0x08012439
 80123d8:	08012439 	.word	0x08012439
 80123dc:	08012415 	.word	0x08012415
 80123e0:	08012439 	.word	0x08012439
 80123e4:	08012439 	.word	0x08012439
 80123e8:	08012439 	.word	0x08012439
 80123ec:	08012427 	.word	0x08012427
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	68da      	ldr	r2, [r3, #12]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f042 0202 	orr.w	r2, r2, #2
 80123fe:	60da      	str	r2, [r3, #12]
      break;
 8012400:	e01d      	b.n	801243e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	68da      	ldr	r2, [r3, #12]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f042 0204 	orr.w	r2, r2, #4
 8012410:	60da      	str	r2, [r3, #12]
      break;
 8012412:	e014      	b.n	801243e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	68da      	ldr	r2, [r3, #12]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f042 0208 	orr.w	r2, r2, #8
 8012422:	60da      	str	r2, [r3, #12]
      break;
 8012424:	e00b      	b.n	801243e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	68da      	ldr	r2, [r3, #12]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f042 0210 	orr.w	r2, r2, #16
 8012434:	60da      	str	r2, [r3, #12]
      break;
 8012436:	e002      	b.n	801243e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012438:	2301      	movs	r3, #1
 801243a:	73fb      	strb	r3, [r7, #15]
      break;
 801243c:	bf00      	nop
  }

  if (status == HAL_OK)
 801243e:	7bfb      	ldrb	r3, [r7, #15]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d148      	bne.n	80124d6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2201      	movs	r2, #1
 801244a:	6839      	ldr	r1, [r7, #0]
 801244c:	4618      	mov	r0, r3
 801244e:	f001 f8cd 	bl	80135ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4a22      	ldr	r2, [pc, #136]	; (80124e0 <HAL_TIM_IC_Start_IT+0x234>)
 8012458:	4293      	cmp	r3, r2
 801245a:	d022      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012464:	d01d      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	4a1e      	ldr	r2, [pc, #120]	; (80124e4 <HAL_TIM_IC_Start_IT+0x238>)
 801246c:	4293      	cmp	r3, r2
 801246e:	d018      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	4a1c      	ldr	r2, [pc, #112]	; (80124e8 <HAL_TIM_IC_Start_IT+0x23c>)
 8012476:	4293      	cmp	r3, r2
 8012478:	d013      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a1b      	ldr	r2, [pc, #108]	; (80124ec <HAL_TIM_IC_Start_IT+0x240>)
 8012480:	4293      	cmp	r3, r2
 8012482:	d00e      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a19      	ldr	r2, [pc, #100]	; (80124f0 <HAL_TIM_IC_Start_IT+0x244>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d009      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	4a18      	ldr	r2, [pc, #96]	; (80124f4 <HAL_TIM_IC_Start_IT+0x248>)
 8012494:	4293      	cmp	r3, r2
 8012496:	d004      	beq.n	80124a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4a16      	ldr	r2, [pc, #88]	; (80124f8 <HAL_TIM_IC_Start_IT+0x24c>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d111      	bne.n	80124c6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	f003 0307 	and.w	r3, r3, #7
 80124ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2b06      	cmp	r3, #6
 80124b2:	d010      	beq.n	80124d6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	681a      	ldr	r2, [r3, #0]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f042 0201 	orr.w	r2, r2, #1
 80124c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80124c4:	e007      	b.n	80124d6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f042 0201 	orr.w	r2, r2, #1
 80124d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80124d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	40010000 	.word	0x40010000
 80124e4:	40000400 	.word	0x40000400
 80124e8:	40000800 	.word	0x40000800
 80124ec:	40000c00 	.word	0x40000c00
 80124f0:	40010400 	.word	0x40010400
 80124f4:	40014000 	.word	0x40014000
 80124f8:	40001800 	.word	0x40001800

080124fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	691b      	ldr	r3, [r3, #16]
 801250a:	f003 0302 	and.w	r3, r3, #2
 801250e:	2b02      	cmp	r3, #2
 8012510:	d122      	bne.n	8012558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	f003 0302 	and.w	r3, r3, #2
 801251c:	2b02      	cmp	r3, #2
 801251e:	d11b      	bne.n	8012558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f06f 0202 	mvn.w	r2, #2
 8012528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2201      	movs	r2, #1
 801252e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	699b      	ldr	r3, [r3, #24]
 8012536:	f003 0303 	and.w	r3, r3, #3
 801253a:	2b00      	cmp	r3, #0
 801253c:	d003      	beq.n	8012546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7ee fed2 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8012544:	e005      	b.n	8012552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f000 fb8c 	bl	8012c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fb93 	bl	8012c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	691b      	ldr	r3, [r3, #16]
 801255e:	f003 0304 	and.w	r3, r3, #4
 8012562:	2b04      	cmp	r3, #4
 8012564:	d122      	bne.n	80125ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	68db      	ldr	r3, [r3, #12]
 801256c:	f003 0304 	and.w	r3, r3, #4
 8012570:	2b04      	cmp	r3, #4
 8012572:	d11b      	bne.n	80125ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f06f 0204 	mvn.w	r2, #4
 801257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2202      	movs	r2, #2
 8012582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f7ee fea8 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8012598:	e005      	b.n	80125a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fb62 	bl	8012c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fb69 	bl	8012c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2200      	movs	r2, #0
 80125aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	f003 0308 	and.w	r3, r3, #8
 80125b6:	2b08      	cmp	r3, #8
 80125b8:	d122      	bne.n	8012600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	f003 0308 	and.w	r3, r3, #8
 80125c4:	2b08      	cmp	r3, #8
 80125c6:	d11b      	bne.n	8012600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f06f 0208 	mvn.w	r2, #8
 80125d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2204      	movs	r2, #4
 80125d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	69db      	ldr	r3, [r3, #28]
 80125de:	f003 0303 	and.w	r3, r3, #3
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d003      	beq.n	80125ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7ee fe7e 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 80125ec:	e005      	b.n	80125fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f000 fb38 	bl	8012c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f000 fb3f 	bl	8012c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2200      	movs	r2, #0
 80125fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	691b      	ldr	r3, [r3, #16]
 8012606:	f003 0310 	and.w	r3, r3, #16
 801260a:	2b10      	cmp	r3, #16
 801260c:	d122      	bne.n	8012654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	f003 0310 	and.w	r3, r3, #16
 8012618:	2b10      	cmp	r3, #16
 801261a:	d11b      	bne.n	8012654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	f06f 0210 	mvn.w	r2, #16
 8012624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2208      	movs	r2, #8
 801262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	69db      	ldr	r3, [r3, #28]
 8012632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012636:	2b00      	cmp	r3, #0
 8012638:	d003      	beq.n	8012642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7ee fe54 	bl	80012e8 <HAL_TIM_IC_CaptureCallback>
 8012640:	e005      	b.n	801264e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 fb0e 	bl	8012c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 fb15 	bl	8012c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	691b      	ldr	r3, [r3, #16]
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	2b01      	cmp	r3, #1
 8012660:	d10e      	bne.n	8012680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	f003 0301 	and.w	r3, r3, #1
 801266c:	2b01      	cmp	r3, #1
 801266e:	d107      	bne.n	8012680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f06f 0201 	mvn.w	r2, #1
 8012678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7f1 f948 	bl	8003910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	691b      	ldr	r3, [r3, #16]
 8012686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801268a:	2b80      	cmp	r3, #128	; 0x80
 801268c:	d10e      	bne.n	80126ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012698:	2b80      	cmp	r3, #128	; 0x80
 801269a:	d107      	bne.n	80126ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80126a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f001 f89e 	bl	80137e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	691b      	ldr	r3, [r3, #16]
 80126b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126b6:	2b40      	cmp	r3, #64	; 0x40
 80126b8:	d10e      	bne.n	80126d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126c4:	2b40      	cmp	r3, #64	; 0x40
 80126c6:	d107      	bne.n	80126d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80126d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 fada 	bl	8012c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	691b      	ldr	r3, [r3, #16]
 80126de:	f003 0320 	and.w	r3, r3, #32
 80126e2:	2b20      	cmp	r3, #32
 80126e4:	d10e      	bne.n	8012704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	f003 0320 	and.w	r3, r3, #32
 80126f0:	2b20      	cmp	r3, #32
 80126f2:	d107      	bne.n	8012704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	f06f 0220 	mvn.w	r2, #32
 80126fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f001 f868 	bl	80137d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012718:	2300      	movs	r3, #0
 801271a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012722:	2b01      	cmp	r3, #1
 8012724:	d101      	bne.n	801272a <HAL_TIM_IC_ConfigChannel+0x1e>
 8012726:	2302      	movs	r3, #2
 8012728:	e088      	b.n	801283c <HAL_TIM_IC_ConfigChannel+0x130>
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2201      	movs	r2, #1
 801272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d11b      	bne.n	8012770 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	6818      	ldr	r0, [r3, #0]
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	6819      	ldr	r1, [r3, #0]
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	685a      	ldr	r2, [r3, #4]
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	f000 fd8c 	bl	8013264 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	699a      	ldr	r2, [r3, #24]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f022 020c 	bic.w	r2, r2, #12
 801275a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	6999      	ldr	r1, [r3, #24]
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	689a      	ldr	r2, [r3, #8]
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	430a      	orrs	r2, r1
 801276c:	619a      	str	r2, [r3, #24]
 801276e:	e060      	b.n	8012832 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b04      	cmp	r3, #4
 8012774:	d11c      	bne.n	80127b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	6818      	ldr	r0, [r3, #0]
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	6819      	ldr	r1, [r3, #0]
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	685a      	ldr	r2, [r3, #4]
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	f000 fe10 	bl	80133aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	699a      	ldr	r2, [r3, #24]
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8012798:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	6999      	ldr	r1, [r3, #24]
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	021a      	lsls	r2, r3, #8
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	430a      	orrs	r2, r1
 80127ac:	619a      	str	r2, [r3, #24]
 80127ae:	e040      	b.n	8012832 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b08      	cmp	r3, #8
 80127b4:	d11b      	bne.n	80127ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6818      	ldr	r0, [r3, #0]
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	6819      	ldr	r1, [r3, #0]
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	685a      	ldr	r2, [r3, #4]
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	f000 fe5d 	bl	8013484 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	69da      	ldr	r2, [r3, #28]
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	f022 020c 	bic.w	r2, r2, #12
 80127d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	69d9      	ldr	r1, [r3, #28]
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	689a      	ldr	r2, [r3, #8]
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	430a      	orrs	r2, r1
 80127ea:	61da      	str	r2, [r3, #28]
 80127ec:	e021      	b.n	8012832 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2b0c      	cmp	r3, #12
 80127f2:	d11c      	bne.n	801282e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6818      	ldr	r0, [r3, #0]
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	6819      	ldr	r1, [r3, #0]
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	685a      	ldr	r2, [r3, #4]
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	f000 fe7a 	bl	80134fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	69da      	ldr	r2, [r3, #28]
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8012816:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	69d9      	ldr	r1, [r3, #28]
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	021a      	lsls	r2, r3, #8
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	430a      	orrs	r2, r1
 801282a:	61da      	str	r2, [r3, #28]
 801282c:	e001      	b.n	8012832 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801282e:	2301      	movs	r3, #1
 8012830:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2200      	movs	r2, #0
 8012836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801283a:	7dfb      	ldrb	r3, [r7, #23]
}
 801283c:	4618      	mov	r0, r3
 801283e:	3718      	adds	r7, #24
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b086      	sub	sp, #24
 8012848:	af00      	add	r7, sp, #0
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012850:	2300      	movs	r3, #0
 8012852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801285a:	2b01      	cmp	r3, #1
 801285c:	d101      	bne.n	8012862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801285e:	2302      	movs	r3, #2
 8012860:	e0ae      	b.n	80129c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2201      	movs	r2, #1
 8012866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2b0c      	cmp	r3, #12
 801286e:	f200 809f 	bhi.w	80129b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8012872:	a201      	add	r2, pc, #4	; (adr r2, 8012878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012878:	080128ad 	.word	0x080128ad
 801287c:	080129b1 	.word	0x080129b1
 8012880:	080129b1 	.word	0x080129b1
 8012884:	080129b1 	.word	0x080129b1
 8012888:	080128ed 	.word	0x080128ed
 801288c:	080129b1 	.word	0x080129b1
 8012890:	080129b1 	.word	0x080129b1
 8012894:	080129b1 	.word	0x080129b1
 8012898:	0801292f 	.word	0x0801292f
 801289c:	080129b1 	.word	0x080129b1
 80128a0:	080129b1 	.word	0x080129b1
 80128a4:	080129b1 	.word	0x080129b1
 80128a8:	0801296f 	.word	0x0801296f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	68b9      	ldr	r1, [r7, #8]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 fa94 	bl	8012de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	699a      	ldr	r2, [r3, #24]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f042 0208 	orr.w	r2, r2, #8
 80128c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	699a      	ldr	r2, [r3, #24]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f022 0204 	bic.w	r2, r2, #4
 80128d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	6999      	ldr	r1, [r3, #24]
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	691a      	ldr	r2, [r3, #16]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	430a      	orrs	r2, r1
 80128e8:	619a      	str	r2, [r3, #24]
      break;
 80128ea:	e064      	b.n	80129b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68b9      	ldr	r1, [r7, #8]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f000 fae4 	bl	8012ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	699a      	ldr	r2, [r3, #24]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	699a      	ldr	r2, [r3, #24]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	6999      	ldr	r1, [r3, #24]
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	691b      	ldr	r3, [r3, #16]
 8012922:	021a      	lsls	r2, r3, #8
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	430a      	orrs	r2, r1
 801292a:	619a      	str	r2, [r3, #24]
      break;
 801292c:	e043      	b.n	80129b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	68b9      	ldr	r1, [r7, #8]
 8012934:	4618      	mov	r0, r3
 8012936:	f000 fb39 	bl	8012fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	69da      	ldr	r2, [r3, #28]
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	f042 0208 	orr.w	r2, r2, #8
 8012948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	69da      	ldr	r2, [r3, #28]
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f022 0204 	bic.w	r2, r2, #4
 8012958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	69d9      	ldr	r1, [r3, #28]
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	691a      	ldr	r2, [r3, #16]
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	430a      	orrs	r2, r1
 801296a:	61da      	str	r2, [r3, #28]
      break;
 801296c:	e023      	b.n	80129b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	68b9      	ldr	r1, [r7, #8]
 8012974:	4618      	mov	r0, r3
 8012976:	f000 fb8d 	bl	8013094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	69da      	ldr	r2, [r3, #28]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	69da      	ldr	r2, [r3, #28]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	69d9      	ldr	r1, [r3, #28]
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	691b      	ldr	r3, [r3, #16]
 80129a4:	021a      	lsls	r2, r3, #8
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	430a      	orrs	r2, r1
 80129ac:	61da      	str	r2, [r3, #28]
      break;
 80129ae:	e002      	b.n	80129b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80129b0:	2301      	movs	r3, #1
 80129b2:	75fb      	strb	r3, [r7, #23]
      break;
 80129b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2200      	movs	r2, #0
 80129ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80129be:	7dfb      	ldrb	r3, [r7, #23]
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3718      	adds	r7, #24
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80129d2:	2300      	movs	r3, #0
 80129d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d101      	bne.n	80129e4 <HAL_TIM_ConfigClockSource+0x1c>
 80129e0:	2302      	movs	r3, #2
 80129e2:	e0b4      	b.n	8012b4e <HAL_TIM_ConfigClockSource+0x186>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2201      	movs	r2, #1
 80129e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2202      	movs	r2, #2
 80129f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	689b      	ldr	r3, [r3, #8]
 80129fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	68ba      	ldr	r2, [r7, #8]
 8012a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012a1c:	d03e      	beq.n	8012a9c <HAL_TIM_ConfigClockSource+0xd4>
 8012a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012a22:	f200 8087 	bhi.w	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a2a:	f000 8086 	beq.w	8012b3a <HAL_TIM_ConfigClockSource+0x172>
 8012a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a32:	d87f      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a34:	2b70      	cmp	r3, #112	; 0x70
 8012a36:	d01a      	beq.n	8012a6e <HAL_TIM_ConfigClockSource+0xa6>
 8012a38:	2b70      	cmp	r3, #112	; 0x70
 8012a3a:	d87b      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a3c:	2b60      	cmp	r3, #96	; 0x60
 8012a3e:	d050      	beq.n	8012ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8012a40:	2b60      	cmp	r3, #96	; 0x60
 8012a42:	d877      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a44:	2b50      	cmp	r3, #80	; 0x50
 8012a46:	d03c      	beq.n	8012ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8012a48:	2b50      	cmp	r3, #80	; 0x50
 8012a4a:	d873      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a4c:	2b40      	cmp	r3, #64	; 0x40
 8012a4e:	d058      	beq.n	8012b02 <HAL_TIM_ConfigClockSource+0x13a>
 8012a50:	2b40      	cmp	r3, #64	; 0x40
 8012a52:	d86f      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a54:	2b30      	cmp	r3, #48	; 0x30
 8012a56:	d064      	beq.n	8012b22 <HAL_TIM_ConfigClockSource+0x15a>
 8012a58:	2b30      	cmp	r3, #48	; 0x30
 8012a5a:	d86b      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a5c:	2b20      	cmp	r3, #32
 8012a5e:	d060      	beq.n	8012b22 <HAL_TIM_ConfigClockSource+0x15a>
 8012a60:	2b20      	cmp	r3, #32
 8012a62:	d867      	bhi.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d05c      	beq.n	8012b22 <HAL_TIM_ConfigClockSource+0x15a>
 8012a68:	2b10      	cmp	r3, #16
 8012a6a:	d05a      	beq.n	8012b22 <HAL_TIM_ConfigClockSource+0x15a>
 8012a6c:	e062      	b.n	8012b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6818      	ldr	r0, [r3, #0]
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	6899      	ldr	r1, [r3, #8]
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	685a      	ldr	r2, [r3, #4]
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	f000 fd95 	bl	80135ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	68ba      	ldr	r2, [r7, #8]
 8012a98:	609a      	str	r2, [r3, #8]
      break;
 8012a9a:	e04f      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6818      	ldr	r0, [r3, #0]
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	6899      	ldr	r1, [r3, #8]
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	685a      	ldr	r2, [r3, #4]
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	f000 fd7e 	bl	80135ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	689a      	ldr	r2, [r3, #8]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012abe:	609a      	str	r2, [r3, #8]
      break;
 8012ac0:	e03c      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6818      	ldr	r0, [r3, #0]
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	6859      	ldr	r1, [r3, #4]
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	f000 fc3c 	bl	801334c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2150      	movs	r1, #80	; 0x50
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 fd4b 	bl	8013576 <TIM_ITRx_SetConfig>
      break;
 8012ae0:	e02c      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6818      	ldr	r0, [r3, #0]
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	6859      	ldr	r1, [r3, #4]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	461a      	mov	r2, r3
 8012af0:	f000 fc98 	bl	8013424 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2160      	movs	r1, #96	; 0x60
 8012afa:	4618      	mov	r0, r3
 8012afc:	f000 fd3b 	bl	8013576 <TIM_ITRx_SetConfig>
      break;
 8012b00:	e01c      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6818      	ldr	r0, [r3, #0]
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	6859      	ldr	r1, [r3, #4]
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	461a      	mov	r2, r3
 8012b10:	f000 fc1c 	bl	801334c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2140      	movs	r1, #64	; 0x40
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f000 fd2b 	bl	8013576 <TIM_ITRx_SetConfig>
      break;
 8012b20:	e00c      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	f000 fd22 	bl	8013576 <TIM_ITRx_SetConfig>
      break;
 8012b32:	e003      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012b34:	2301      	movs	r3, #1
 8012b36:	73fb      	strb	r3, [r7, #15]
      break;
 8012b38:	e000      	b.n	8012b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2201      	movs	r2, #1
 8012b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3710      	adds	r7, #16
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b082      	sub	sp, #8
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
 8012b5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d101      	bne.n	8012b6e <HAL_TIM_SlaveConfigSynchro+0x18>
 8012b6a:	2302      	movs	r3, #2
 8012b6c:	e031      	b.n	8012bd2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2201      	movs	r2, #1
 8012b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2202      	movs	r2, #2
 8012b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8012b7e:	6839      	ldr	r1, [r7, #0]
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 fadd 	bl	8013140 <TIM_SlaveTimer_SetConfig>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d009      	beq.n	8012ba0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	e018      	b.n	8012bd2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	68da      	ldr	r2, [r3, #12]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012bae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	68da      	ldr	r2, [r3, #12]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012bbe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
	...

08012bdc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b085      	sub	sp, #20
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8012be6:	2300      	movs	r3, #0
 8012be8:	60fb      	str	r3, [r7, #12]
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	2b0c      	cmp	r3, #12
 8012bee:	d831      	bhi.n	8012c54 <HAL_TIM_ReadCapturedValue+0x78>
 8012bf0:	a201      	add	r2, pc, #4	; (adr r2, 8012bf8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8012bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bf6:	bf00      	nop
 8012bf8:	08012c2d 	.word	0x08012c2d
 8012bfc:	08012c55 	.word	0x08012c55
 8012c00:	08012c55 	.word	0x08012c55
 8012c04:	08012c55 	.word	0x08012c55
 8012c08:	08012c37 	.word	0x08012c37
 8012c0c:	08012c55 	.word	0x08012c55
 8012c10:	08012c55 	.word	0x08012c55
 8012c14:	08012c55 	.word	0x08012c55
 8012c18:	08012c41 	.word	0x08012c41
 8012c1c:	08012c55 	.word	0x08012c55
 8012c20:	08012c55 	.word	0x08012c55
 8012c24:	08012c55 	.word	0x08012c55
 8012c28:	08012c4b 	.word	0x08012c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c32:	60fb      	str	r3, [r7, #12]

      break;
 8012c34:	e00f      	b.n	8012c56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c3c:	60fb      	str	r3, [r7, #12]

      break;
 8012c3e:	e00a      	b.n	8012c56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c46:	60fb      	str	r3, [r7, #12]

      break;
 8012c48:	e005      	b.n	8012c56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c50:	60fb      	str	r3, [r7, #12]

      break;
 8012c52:	e000      	b.n	8012c56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8012c54:	bf00      	nop
  }

  return tmpreg;
 8012c56:	68fb      	ldr	r3, [r7, #12]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3714      	adds	r7, #20
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012c6c:	bf00      	nop
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b083      	sub	sp, #12
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012c80:	bf00      	nop
 8012c82:	370c      	adds	r7, #12
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012c94:	bf00      	nop
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr

08012ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b085      	sub	sp, #20
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	4a40      	ldr	r2, [pc, #256]	; (8012db4 <TIM_Base_SetConfig+0x114>)
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d013      	beq.n	8012ce0 <TIM_Base_SetConfig+0x40>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012cbe:	d00f      	beq.n	8012ce0 <TIM_Base_SetConfig+0x40>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4a3d      	ldr	r2, [pc, #244]	; (8012db8 <TIM_Base_SetConfig+0x118>)
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d00b      	beq.n	8012ce0 <TIM_Base_SetConfig+0x40>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	4a3c      	ldr	r2, [pc, #240]	; (8012dbc <TIM_Base_SetConfig+0x11c>)
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d007      	beq.n	8012ce0 <TIM_Base_SetConfig+0x40>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	4a3b      	ldr	r2, [pc, #236]	; (8012dc0 <TIM_Base_SetConfig+0x120>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d003      	beq.n	8012ce0 <TIM_Base_SetConfig+0x40>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	4a3a      	ldr	r2, [pc, #232]	; (8012dc4 <TIM_Base_SetConfig+0x124>)
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	d108      	bne.n	8012cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	685b      	ldr	r3, [r3, #4]
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4a2f      	ldr	r2, [pc, #188]	; (8012db4 <TIM_Base_SetConfig+0x114>)
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d02b      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d00:	d027      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4a2c      	ldr	r2, [pc, #176]	; (8012db8 <TIM_Base_SetConfig+0x118>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d023      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4a2b      	ldr	r2, [pc, #172]	; (8012dbc <TIM_Base_SetConfig+0x11c>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d01f      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4a2a      	ldr	r2, [pc, #168]	; (8012dc0 <TIM_Base_SetConfig+0x120>)
 8012d16:	4293      	cmp	r3, r2
 8012d18:	d01b      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	4a29      	ldr	r2, [pc, #164]	; (8012dc4 <TIM_Base_SetConfig+0x124>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d017      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	4a28      	ldr	r2, [pc, #160]	; (8012dc8 <TIM_Base_SetConfig+0x128>)
 8012d26:	4293      	cmp	r3, r2
 8012d28:	d013      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4a27      	ldr	r2, [pc, #156]	; (8012dcc <TIM_Base_SetConfig+0x12c>)
 8012d2e:	4293      	cmp	r3, r2
 8012d30:	d00f      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4a26      	ldr	r2, [pc, #152]	; (8012dd0 <TIM_Base_SetConfig+0x130>)
 8012d36:	4293      	cmp	r3, r2
 8012d38:	d00b      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4a25      	ldr	r2, [pc, #148]	; (8012dd4 <TIM_Base_SetConfig+0x134>)
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d007      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4a24      	ldr	r2, [pc, #144]	; (8012dd8 <TIM_Base_SetConfig+0x138>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d003      	beq.n	8012d52 <TIM_Base_SetConfig+0xb2>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4a23      	ldr	r2, [pc, #140]	; (8012ddc <TIM_Base_SetConfig+0x13c>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d108      	bne.n	8012d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	4313      	orrs	r3, r2
 8012d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	695b      	ldr	r3, [r3, #20]
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	68fa      	ldr	r2, [r7, #12]
 8012d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	689a      	ldr	r2, [r3, #8]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4a0a      	ldr	r2, [pc, #40]	; (8012db4 <TIM_Base_SetConfig+0x114>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d003      	beq.n	8012d98 <TIM_Base_SetConfig+0xf8>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4a0c      	ldr	r2, [pc, #48]	; (8012dc4 <TIM_Base_SetConfig+0x124>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d103      	bne.n	8012da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	691a      	ldr	r2, [r3, #16]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2201      	movs	r2, #1
 8012da4:	615a      	str	r2, [r3, #20]
}
 8012da6:	bf00      	nop
 8012da8:	3714      	adds	r7, #20
 8012daa:	46bd      	mov	sp, r7
 8012dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db0:	4770      	bx	lr
 8012db2:	bf00      	nop
 8012db4:	40010000 	.word	0x40010000
 8012db8:	40000400 	.word	0x40000400
 8012dbc:	40000800 	.word	0x40000800
 8012dc0:	40000c00 	.word	0x40000c00
 8012dc4:	40010400 	.word	0x40010400
 8012dc8:	40014000 	.word	0x40014000
 8012dcc:	40014400 	.word	0x40014400
 8012dd0:	40014800 	.word	0x40014800
 8012dd4:	40001800 	.word	0x40001800
 8012dd8:	40001c00 	.word	0x40001c00
 8012ddc:	40002000 	.word	0x40002000

08012de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b087      	sub	sp, #28
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6a1b      	ldr	r3, [r3, #32]
 8012dee:	f023 0201 	bic.w	r2, r3, #1
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6a1b      	ldr	r3, [r3, #32]
 8012dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	699b      	ldr	r3, [r3, #24]
 8012e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f023 0303 	bic.w	r3, r3, #3
 8012e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	68fa      	ldr	r2, [r7, #12]
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	f023 0302 	bic.w	r3, r3, #2
 8012e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	689b      	ldr	r3, [r3, #8]
 8012e2e:	697a      	ldr	r2, [r7, #20]
 8012e30:	4313      	orrs	r3, r2
 8012e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	4a20      	ldr	r2, [pc, #128]	; (8012eb8 <TIM_OC1_SetConfig+0xd8>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d003      	beq.n	8012e44 <TIM_OC1_SetConfig+0x64>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4a1f      	ldr	r2, [pc, #124]	; (8012ebc <TIM_OC1_SetConfig+0xdc>)
 8012e40:	4293      	cmp	r3, r2
 8012e42:	d10c      	bne.n	8012e5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	f023 0308 	bic.w	r3, r3, #8
 8012e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	697a      	ldr	r2, [r7, #20]
 8012e52:	4313      	orrs	r3, r2
 8012e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	f023 0304 	bic.w	r3, r3, #4
 8012e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4a15      	ldr	r2, [pc, #84]	; (8012eb8 <TIM_OC1_SetConfig+0xd8>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d003      	beq.n	8012e6e <TIM_OC1_SetConfig+0x8e>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	4a14      	ldr	r2, [pc, #80]	; (8012ebc <TIM_OC1_SetConfig+0xdc>)
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	d111      	bne.n	8012e92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	695b      	ldr	r3, [r3, #20]
 8012e82:	693a      	ldr	r2, [r7, #16]
 8012e84:	4313      	orrs	r3, r2
 8012e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	699b      	ldr	r3, [r3, #24]
 8012e8c:	693a      	ldr	r2, [r7, #16]
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	693a      	ldr	r2, [r7, #16]
 8012e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	68fa      	ldr	r2, [r7, #12]
 8012e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	685a      	ldr	r2, [r3, #4]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	697a      	ldr	r2, [r7, #20]
 8012eaa:	621a      	str	r2, [r3, #32]
}
 8012eac:	bf00      	nop
 8012eae:	371c      	adds	r7, #28
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr
 8012eb8:	40010000 	.word	0x40010000
 8012ebc:	40010400 	.word	0x40010400

08012ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b087      	sub	sp, #28
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a1b      	ldr	r3, [r3, #32]
 8012ece:	f023 0210 	bic.w	r2, r3, #16
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6a1b      	ldr	r3, [r3, #32]
 8012eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	699b      	ldr	r3, [r3, #24]
 8012ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	021b      	lsls	r3, r3, #8
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	4313      	orrs	r3, r2
 8012f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	f023 0320 	bic.w	r3, r3, #32
 8012f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	689b      	ldr	r3, [r3, #8]
 8012f10:	011b      	lsls	r3, r3, #4
 8012f12:	697a      	ldr	r2, [r7, #20]
 8012f14:	4313      	orrs	r3, r2
 8012f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	4a22      	ldr	r2, [pc, #136]	; (8012fa4 <TIM_OC2_SetConfig+0xe4>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d003      	beq.n	8012f28 <TIM_OC2_SetConfig+0x68>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4a21      	ldr	r2, [pc, #132]	; (8012fa8 <TIM_OC2_SetConfig+0xe8>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d10d      	bne.n	8012f44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	68db      	ldr	r3, [r3, #12]
 8012f34:	011b      	lsls	r3, r3, #4
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	4a17      	ldr	r2, [pc, #92]	; (8012fa4 <TIM_OC2_SetConfig+0xe4>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d003      	beq.n	8012f54 <TIM_OC2_SetConfig+0x94>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	4a16      	ldr	r2, [pc, #88]	; (8012fa8 <TIM_OC2_SetConfig+0xe8>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d113      	bne.n	8012f7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	695b      	ldr	r3, [r3, #20]
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	693a      	ldr	r2, [r7, #16]
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	699b      	ldr	r3, [r3, #24]
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	693a      	ldr	r2, [r7, #16]
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	693a      	ldr	r2, [r7, #16]
 8012f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68fa      	ldr	r2, [r7, #12]
 8012f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	685a      	ldr	r2, [r3, #4]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	697a      	ldr	r2, [r7, #20]
 8012f94:	621a      	str	r2, [r3, #32]
}
 8012f96:	bf00      	nop
 8012f98:	371c      	adds	r7, #28
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
 8012fa2:	bf00      	nop
 8012fa4:	40010000 	.word	0x40010000
 8012fa8:	40010400 	.word	0x40010400

08012fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b087      	sub	sp, #28
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6a1b      	ldr	r3, [r3, #32]
 8012fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6a1b      	ldr	r3, [r3, #32]
 8012fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	69db      	ldr	r3, [r3, #28]
 8012fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	f023 0303 	bic.w	r3, r3, #3
 8012fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	4313      	orrs	r3, r2
 8012fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	021b      	lsls	r3, r3, #8
 8012ffc:	697a      	ldr	r2, [r7, #20]
 8012ffe:	4313      	orrs	r3, r2
 8013000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4a21      	ldr	r2, [pc, #132]	; (801308c <TIM_OC3_SetConfig+0xe0>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d003      	beq.n	8013012 <TIM_OC3_SetConfig+0x66>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	4a20      	ldr	r2, [pc, #128]	; (8013090 <TIM_OC3_SetConfig+0xe4>)
 801300e:	4293      	cmp	r3, r2
 8013010:	d10d      	bne.n	801302e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	021b      	lsls	r3, r3, #8
 8013020:	697a      	ldr	r2, [r7, #20]
 8013022:	4313      	orrs	r3, r2
 8013024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801302c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	4a16      	ldr	r2, [pc, #88]	; (801308c <TIM_OC3_SetConfig+0xe0>)
 8013032:	4293      	cmp	r3, r2
 8013034:	d003      	beq.n	801303e <TIM_OC3_SetConfig+0x92>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	4a15      	ldr	r2, [pc, #84]	; (8013090 <TIM_OC3_SetConfig+0xe4>)
 801303a:	4293      	cmp	r3, r2
 801303c:	d113      	bne.n	8013066 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801304c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	695b      	ldr	r3, [r3, #20]
 8013052:	011b      	lsls	r3, r3, #4
 8013054:	693a      	ldr	r2, [r7, #16]
 8013056:	4313      	orrs	r3, r2
 8013058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	699b      	ldr	r3, [r3, #24]
 801305e:	011b      	lsls	r3, r3, #4
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	4313      	orrs	r3, r2
 8013064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	693a      	ldr	r2, [r7, #16]
 801306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	68fa      	ldr	r2, [r7, #12]
 8013070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	685a      	ldr	r2, [r3, #4]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	621a      	str	r2, [r3, #32]
}
 8013080:	bf00      	nop
 8013082:	371c      	adds	r7, #28
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr
 801308c:	40010000 	.word	0x40010000
 8013090:	40010400 	.word	0x40010400

08013094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013094:	b480      	push	{r7}
 8013096:	b087      	sub	sp, #28
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a1b      	ldr	r3, [r3, #32]
 80130a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6a1b      	ldr	r3, [r3, #32]
 80130ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	69db      	ldr	r3, [r3, #28]
 80130ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80130ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	021b      	lsls	r3, r3, #8
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	4313      	orrs	r3, r2
 80130d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80130de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	689b      	ldr	r3, [r3, #8]
 80130e4:	031b      	lsls	r3, r3, #12
 80130e6:	693a      	ldr	r2, [r7, #16]
 80130e8:	4313      	orrs	r3, r2
 80130ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	4a12      	ldr	r2, [pc, #72]	; (8013138 <TIM_OC4_SetConfig+0xa4>)
 80130f0:	4293      	cmp	r3, r2
 80130f2:	d003      	beq.n	80130fc <TIM_OC4_SetConfig+0x68>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	4a11      	ldr	r2, [pc, #68]	; (801313c <TIM_OC4_SetConfig+0xa8>)
 80130f8:	4293      	cmp	r3, r2
 80130fa:	d109      	bne.n	8013110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	695b      	ldr	r3, [r3, #20]
 8013108:	019b      	lsls	r3, r3, #6
 801310a:	697a      	ldr	r2, [r7, #20]
 801310c:	4313      	orrs	r3, r2
 801310e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	697a      	ldr	r2, [r7, #20]
 8013114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	685a      	ldr	r2, [r3, #4]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	693a      	ldr	r2, [r7, #16]
 8013128:	621a      	str	r2, [r3, #32]
}
 801312a:	bf00      	nop
 801312c:	371c      	adds	r7, #28
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	40010000 	.word	0x40010000
 801313c:	40010400 	.word	0x40010400

08013140 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b086      	sub	sp, #24
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801314a:	2300      	movs	r3, #0
 801314c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801315c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	685b      	ldr	r3, [r3, #4]
 8013162:	693a      	ldr	r2, [r7, #16]
 8013164:	4313      	orrs	r3, r2
 8013166:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	f023 0307 	bic.w	r3, r3, #7
 801316e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	693a      	ldr	r2, [r7, #16]
 8013176:	4313      	orrs	r3, r2
 8013178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	693a      	ldr	r2, [r7, #16]
 8013180:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	2b70      	cmp	r3, #112	; 0x70
 8013188:	d01a      	beq.n	80131c0 <TIM_SlaveTimer_SetConfig+0x80>
 801318a:	2b70      	cmp	r3, #112	; 0x70
 801318c:	d860      	bhi.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
 801318e:	2b60      	cmp	r3, #96	; 0x60
 8013190:	d054      	beq.n	801323c <TIM_SlaveTimer_SetConfig+0xfc>
 8013192:	2b60      	cmp	r3, #96	; 0x60
 8013194:	d85c      	bhi.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
 8013196:	2b50      	cmp	r3, #80	; 0x50
 8013198:	d046      	beq.n	8013228 <TIM_SlaveTimer_SetConfig+0xe8>
 801319a:	2b50      	cmp	r3, #80	; 0x50
 801319c:	d858      	bhi.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
 801319e:	2b40      	cmp	r3, #64	; 0x40
 80131a0:	d019      	beq.n	80131d6 <TIM_SlaveTimer_SetConfig+0x96>
 80131a2:	2b40      	cmp	r3, #64	; 0x40
 80131a4:	d854      	bhi.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
 80131a6:	2b30      	cmp	r3, #48	; 0x30
 80131a8:	d055      	beq.n	8013256 <TIM_SlaveTimer_SetConfig+0x116>
 80131aa:	2b30      	cmp	r3, #48	; 0x30
 80131ac:	d850      	bhi.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
 80131ae:	2b20      	cmp	r3, #32
 80131b0:	d051      	beq.n	8013256 <TIM_SlaveTimer_SetConfig+0x116>
 80131b2:	2b20      	cmp	r3, #32
 80131b4:	d84c      	bhi.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d04d      	beq.n	8013256 <TIM_SlaveTimer_SetConfig+0x116>
 80131ba:	2b10      	cmp	r3, #16
 80131bc:	d04b      	beq.n	8013256 <TIM_SlaveTimer_SetConfig+0x116>
 80131be:	e047      	b.n	8013250 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6818      	ldr	r0, [r3, #0]
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	68d9      	ldr	r1, [r3, #12]
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	689a      	ldr	r2, [r3, #8]
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	f000 f9ec 	bl	80135ac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80131d4:	e040      	b.n	8013258 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b05      	cmp	r3, #5
 80131dc:	d101      	bne.n	80131e2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80131de:	2301      	movs	r3, #1
 80131e0:	e03b      	b.n	801325a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	6a1b      	ldr	r3, [r3, #32]
 80131e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	6a1a      	ldr	r2, [r3, #32]
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f022 0201 	bic.w	r2, r2, #1
 80131f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	699b      	ldr	r3, [r3, #24]
 8013200:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013208:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	011b      	lsls	r3, r3, #4
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	4313      	orrs	r3, r2
 8013214:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	68ba      	ldr	r2, [r7, #8]
 801321c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	621a      	str	r2, [r3, #32]
      break;
 8013226:	e017      	b.n	8013258 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6818      	ldr	r0, [r3, #0]
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	6899      	ldr	r1, [r3, #8]
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	691b      	ldr	r3, [r3, #16]
 8013234:	461a      	mov	r2, r3
 8013236:	f000 f889 	bl	801334c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801323a:	e00d      	b.n	8013258 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6818      	ldr	r0, [r3, #0]
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	6899      	ldr	r1, [r3, #8]
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	691b      	ldr	r3, [r3, #16]
 8013248:	461a      	mov	r2, r3
 801324a:	f000 f8eb 	bl	8013424 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801324e:	e003      	b.n	8013258 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013250:	2301      	movs	r3, #1
 8013252:	75fb      	strb	r3, [r7, #23]
      break;
 8013254:	e000      	b.n	8013258 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8013256:	bf00      	nop
  }

  return status;
 8013258:	7dfb      	ldrb	r3, [r7, #23]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3718      	adds	r7, #24
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
	...

08013264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8013264:	b480      	push	{r7}
 8013266:	b087      	sub	sp, #28
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
 8013270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6a1b      	ldr	r3, [r3, #32]
 8013276:	f023 0201 	bic.w	r2, r3, #1
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	699b      	ldr	r3, [r3, #24]
 8013282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	6a1b      	ldr	r3, [r3, #32]
 8013288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	4a28      	ldr	r2, [pc, #160]	; (8013330 <TIM_TI1_SetConfig+0xcc>)
 801328e:	4293      	cmp	r3, r2
 8013290:	d01b      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013298:	d017      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	4a25      	ldr	r2, [pc, #148]	; (8013334 <TIM_TI1_SetConfig+0xd0>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d013      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	4a24      	ldr	r2, [pc, #144]	; (8013338 <TIM_TI1_SetConfig+0xd4>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d00f      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	4a23      	ldr	r2, [pc, #140]	; (801333c <TIM_TI1_SetConfig+0xd8>)
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d00b      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	4a22      	ldr	r2, [pc, #136]	; (8013340 <TIM_TI1_SetConfig+0xdc>)
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d007      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	4a21      	ldr	r2, [pc, #132]	; (8013344 <TIM_TI1_SetConfig+0xe0>)
 80132be:	4293      	cmp	r3, r2
 80132c0:	d003      	beq.n	80132ca <TIM_TI1_SetConfig+0x66>
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	4a20      	ldr	r2, [pc, #128]	; (8013348 <TIM_TI1_SetConfig+0xe4>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d101      	bne.n	80132ce <TIM_TI1_SetConfig+0x6a>
 80132ca:	2301      	movs	r3, #1
 80132cc:	e000      	b.n	80132d0 <TIM_TI1_SetConfig+0x6c>
 80132ce:	2300      	movs	r3, #0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d008      	beq.n	80132e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	f023 0303 	bic.w	r3, r3, #3
 80132da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80132dc:	697a      	ldr	r2, [r7, #20]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4313      	orrs	r3, r2
 80132e2:	617b      	str	r3, [r7, #20]
 80132e4:	e003      	b.n	80132ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	f043 0301 	orr.w	r3, r3, #1
 80132ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80132f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	011b      	lsls	r3, r3, #4
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	697a      	ldr	r2, [r7, #20]
 80132fe:	4313      	orrs	r3, r2
 8013300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	f023 030a 	bic.w	r3, r3, #10
 8013308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	f003 030a 	and.w	r3, r3, #10
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	4313      	orrs	r3, r2
 8013314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	697a      	ldr	r2, [r7, #20]
 801331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	693a      	ldr	r2, [r7, #16]
 8013320:	621a      	str	r2, [r3, #32]
}
 8013322:	bf00      	nop
 8013324:	371c      	adds	r7, #28
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr
 801332e:	bf00      	nop
 8013330:	40010000 	.word	0x40010000
 8013334:	40000400 	.word	0x40000400
 8013338:	40000800 	.word	0x40000800
 801333c:	40000c00 	.word	0x40000c00
 8013340:	40010400 	.word	0x40010400
 8013344:	40014000 	.word	0x40014000
 8013348:	40001800 	.word	0x40001800

0801334c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801334c:	b480      	push	{r7}
 801334e:	b087      	sub	sp, #28
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	6a1b      	ldr	r3, [r3, #32]
 801335c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	6a1b      	ldr	r3, [r3, #32]
 8013362:	f023 0201 	bic.w	r2, r3, #1
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	699b      	ldr	r3, [r3, #24]
 801336e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	011b      	lsls	r3, r3, #4
 801337c:	693a      	ldr	r2, [r7, #16]
 801337e:	4313      	orrs	r3, r2
 8013380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	f023 030a 	bic.w	r3, r3, #10
 8013388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801338a:	697a      	ldr	r2, [r7, #20]
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	4313      	orrs	r3, r2
 8013390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	693a      	ldr	r2, [r7, #16]
 8013396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	697a      	ldr	r2, [r7, #20]
 801339c:	621a      	str	r2, [r3, #32]
}
 801339e:	bf00      	nop
 80133a0:	371c      	adds	r7, #28
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr

080133aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80133aa:	b480      	push	{r7}
 80133ac:	b087      	sub	sp, #28
 80133ae:	af00      	add	r7, sp, #0
 80133b0:	60f8      	str	r0, [r7, #12]
 80133b2:	60b9      	str	r1, [r7, #8]
 80133b4:	607a      	str	r2, [r7, #4]
 80133b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	6a1b      	ldr	r3, [r3, #32]
 80133bc:	f023 0210 	bic.w	r2, r3, #16
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	699b      	ldr	r3, [r3, #24]
 80133c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	6a1b      	ldr	r3, [r3, #32]
 80133ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80133d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	021b      	lsls	r3, r3, #8
 80133dc:	697a      	ldr	r2, [r7, #20]
 80133de:	4313      	orrs	r3, r2
 80133e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80133e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	031b      	lsls	r3, r3, #12
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	697a      	ldr	r2, [r7, #20]
 80133f2:	4313      	orrs	r3, r2
 80133f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80133fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	011b      	lsls	r3, r3, #4
 8013402:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8013406:	693a      	ldr	r2, [r7, #16]
 8013408:	4313      	orrs	r3, r2
 801340a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	697a      	ldr	r2, [r7, #20]
 8013410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	693a      	ldr	r2, [r7, #16]
 8013416:	621a      	str	r2, [r3, #32]
}
 8013418:	bf00      	nop
 801341a:	371c      	adds	r7, #28
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013424:	b480      	push	{r7}
 8013426:	b087      	sub	sp, #28
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6a1b      	ldr	r3, [r3, #32]
 8013434:	f023 0210 	bic.w	r2, r3, #16
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	699b      	ldr	r3, [r3, #24]
 8013440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6a1b      	ldr	r3, [r3, #32]
 8013446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801344e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	031b      	lsls	r3, r3, #12
 8013454:	697a      	ldr	r2, [r7, #20]
 8013456:	4313      	orrs	r3, r2
 8013458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013460:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	011b      	lsls	r3, r3, #4
 8013466:	693a      	ldr	r2, [r7, #16]
 8013468:	4313      	orrs	r3, r2
 801346a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	697a      	ldr	r2, [r7, #20]
 8013470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	693a      	ldr	r2, [r7, #16]
 8013476:	621a      	str	r2, [r3, #32]
}
 8013478:	bf00      	nop
 801347a:	371c      	adds	r7, #28
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr

08013484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013484:	b480      	push	{r7}
 8013486:	b087      	sub	sp, #28
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6a1b      	ldr	r3, [r3, #32]
 8013496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	69db      	ldr	r3, [r3, #28]
 80134a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	6a1b      	ldr	r3, [r3, #32]
 80134a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f023 0303 	bic.w	r3, r3, #3
 80134b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80134b2:	697a      	ldr	r2, [r7, #20]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4313      	orrs	r3, r2
 80134b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80134c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	011b      	lsls	r3, r3, #4
 80134c6:	b2db      	uxtb	r3, r3
 80134c8:	697a      	ldr	r2, [r7, #20]
 80134ca:	4313      	orrs	r3, r2
 80134cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80134d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	021b      	lsls	r3, r3, #8
 80134da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80134de:	693a      	ldr	r2, [r7, #16]
 80134e0:	4313      	orrs	r3, r2
 80134e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	697a      	ldr	r2, [r7, #20]
 80134e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	693a      	ldr	r2, [r7, #16]
 80134ee:	621a      	str	r2, [r3, #32]
}
 80134f0:	bf00      	nop
 80134f2:	371c      	adds	r7, #28
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b087      	sub	sp, #28
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6a1b      	ldr	r3, [r3, #32]
 801350e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	69db      	ldr	r3, [r3, #28]
 801351a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6a1b      	ldr	r3, [r3, #32]
 8013520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013528:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	021b      	lsls	r3, r3, #8
 801352e:	697a      	ldr	r2, [r7, #20]
 8013530:	4313      	orrs	r3, r2
 8013532:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801353a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	031b      	lsls	r3, r3, #12
 8013540:	b29b      	uxth	r3, r3
 8013542:	697a      	ldr	r2, [r7, #20]
 8013544:	4313      	orrs	r3, r2
 8013546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801354e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	031b      	lsls	r3, r3, #12
 8013554:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8013558:	693a      	ldr	r2, [r7, #16]
 801355a:	4313      	orrs	r3, r2
 801355c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	697a      	ldr	r2, [r7, #20]
 8013562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	693a      	ldr	r2, [r7, #16]
 8013568:	621a      	str	r2, [r3, #32]
}
 801356a:	bf00      	nop
 801356c:	371c      	adds	r7, #28
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr

08013576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013576:	b480      	push	{r7}
 8013578:	b085      	sub	sp, #20
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
 801357e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	689b      	ldr	r3, [r3, #8]
 8013584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801358c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	4313      	orrs	r3, r2
 8013594:	f043 0307 	orr.w	r3, r3, #7
 8013598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	68fa      	ldr	r2, [r7, #12]
 801359e:	609a      	str	r2, [r3, #8]
}
 80135a0:	bf00      	nop
 80135a2:	3714      	adds	r7, #20
 80135a4:	46bd      	mov	sp, r7
 80135a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135aa:	4770      	bx	lr

080135ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b087      	sub	sp, #28
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
 80135b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80135c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	021a      	lsls	r2, r3, #8
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	431a      	orrs	r2, r3
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	4313      	orrs	r3, r2
 80135d4:	697a      	ldr	r2, [r7, #20]
 80135d6:	4313      	orrs	r3, r2
 80135d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	697a      	ldr	r2, [r7, #20]
 80135de:	609a      	str	r2, [r3, #8]
}
 80135e0:	bf00      	nop
 80135e2:	371c      	adds	r7, #28
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b087      	sub	sp, #28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	f003 031f 	and.w	r3, r3, #31
 80135fe:	2201      	movs	r2, #1
 8013600:	fa02 f303 	lsl.w	r3, r2, r3
 8013604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	6a1a      	ldr	r2, [r3, #32]
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	43db      	mvns	r3, r3
 801360e:	401a      	ands	r2, r3
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	6a1a      	ldr	r2, [r3, #32]
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	f003 031f 	and.w	r3, r3, #31
 801361e:	6879      	ldr	r1, [r7, #4]
 8013620:	fa01 f303 	lsl.w	r3, r1, r3
 8013624:	431a      	orrs	r2, r3
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	621a      	str	r2, [r3, #32]
}
 801362a:	bf00      	nop
 801362c:	371c      	adds	r7, #28
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr
	...

08013638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013638:	b480      	push	{r7}
 801363a:	b085      	sub	sp, #20
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013648:	2b01      	cmp	r3, #1
 801364a:	d101      	bne.n	8013650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801364c:	2302      	movs	r3, #2
 801364e:	e05a      	b.n	8013706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2201      	movs	r2, #1
 8013654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2202      	movs	r2, #2
 801365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	689b      	ldr	r3, [r3, #8]
 801366e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	4313      	orrs	r3, r2
 8013680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	4a21      	ldr	r2, [pc, #132]	; (8013714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013690:	4293      	cmp	r3, r2
 8013692:	d022      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801369c:	d01d      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	4a1d      	ldr	r2, [pc, #116]	; (8013718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80136a4:	4293      	cmp	r3, r2
 80136a6:	d018      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	4a1b      	ldr	r2, [pc, #108]	; (801371c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d013      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	4a1a      	ldr	r2, [pc, #104]	; (8013720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d00e      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	4a18      	ldr	r2, [pc, #96]	; (8013724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80136c2:	4293      	cmp	r3, r2
 80136c4:	d009      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4a17      	ldr	r2, [pc, #92]	; (8013728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d004      	beq.n	80136da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	4a15      	ldr	r2, [pc, #84]	; (801372c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d10c      	bne.n	80136f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80136e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	68ba      	ldr	r2, [r7, #8]
 80136e8:	4313      	orrs	r3, r2
 80136ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	68ba      	ldr	r2, [r7, #8]
 80136f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2201      	movs	r2, #1
 80136f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013704:	2300      	movs	r3, #0
}
 8013706:	4618      	mov	r0, r3
 8013708:	3714      	adds	r7, #20
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
 8013712:	bf00      	nop
 8013714:	40010000 	.word	0x40010000
 8013718:	40000400 	.word	0x40000400
 801371c:	40000800 	.word	0x40000800
 8013720:	40000c00 	.word	0x40000c00
 8013724:	40010400 	.word	0x40010400
 8013728:	40014000 	.word	0x40014000
 801372c:	40001800 	.word	0x40001800

08013730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801373a:	2300      	movs	r3, #0
 801373c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013744:	2b01      	cmp	r3, #1
 8013746:	d101      	bne.n	801374c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013748:	2302      	movs	r3, #2
 801374a:	e03d      	b.n	80137c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2201      	movs	r2, #1
 8013750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	4313      	orrs	r3, r2
 8013760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	689b      	ldr	r3, [r3, #8]
 801376c:	4313      	orrs	r3, r2
 801376e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	4313      	orrs	r3, r2
 801377c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	4313      	orrs	r3, r2
 801378a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	691b      	ldr	r3, [r3, #16]
 8013796:	4313      	orrs	r3, r2
 8013798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	695b      	ldr	r3, [r3, #20]
 80137a4:	4313      	orrs	r3, r2
 80137a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	69db      	ldr	r3, [r3, #28]
 80137b2:	4313      	orrs	r3, r2
 80137b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	68fa      	ldr	r2, [r7, #12]
 80137bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80137c6:	2300      	movs	r3, #0
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	3714      	adds	r7, #20
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr

080137d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80137dc:	bf00      	nop
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80137f0:	bf00      	nop
 80137f2:	370c      	adds	r7, #12
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr

080137fc <__NVIC_SetPriority>:
{
 80137fc:	b480      	push	{r7}
 80137fe:	b083      	sub	sp, #12
 8013800:	af00      	add	r7, sp, #0
 8013802:	4603      	mov	r3, r0
 8013804:	6039      	str	r1, [r7, #0]
 8013806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801380c:	2b00      	cmp	r3, #0
 801380e:	db0a      	blt.n	8013826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	b2da      	uxtb	r2, r3
 8013814:	490c      	ldr	r1, [pc, #48]	; (8013848 <__NVIC_SetPriority+0x4c>)
 8013816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801381a:	0112      	lsls	r2, r2, #4
 801381c:	b2d2      	uxtb	r2, r2
 801381e:	440b      	add	r3, r1
 8013820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013824:	e00a      	b.n	801383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	b2da      	uxtb	r2, r3
 801382a:	4908      	ldr	r1, [pc, #32]	; (801384c <__NVIC_SetPriority+0x50>)
 801382c:	79fb      	ldrb	r3, [r7, #7]
 801382e:	f003 030f 	and.w	r3, r3, #15
 8013832:	3b04      	subs	r3, #4
 8013834:	0112      	lsls	r2, r2, #4
 8013836:	b2d2      	uxtb	r2, r2
 8013838:	440b      	add	r3, r1
 801383a:	761a      	strb	r2, [r3, #24]
}
 801383c:	bf00      	nop
 801383e:	370c      	adds	r7, #12
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr
 8013848:	e000e100 	.word	0xe000e100
 801384c:	e000ed00 	.word	0xe000ed00

08013850 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013850:	b580      	push	{r7, lr}
 8013852:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013854:	4b05      	ldr	r3, [pc, #20]	; (801386c <SysTick_Handler+0x1c>)
 8013856:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013858:	f002 f832 	bl	80158c0 <xTaskGetSchedulerState>
 801385c:	4603      	mov	r3, r0
 801385e:	2b01      	cmp	r3, #1
 8013860:	d001      	beq.n	8013866 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013862:	f002 fe21 	bl	80164a8 <xPortSysTickHandler>
  }
}
 8013866:	bf00      	nop
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	e000e010 	.word	0xe000e010

08013870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013870:	b580      	push	{r7, lr}
 8013872:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013874:	2100      	movs	r1, #0
 8013876:	f06f 0004 	mvn.w	r0, #4
 801387a:	f7ff ffbf 	bl	80137fc <__NVIC_SetPriority>
#endif
}
 801387e:	bf00      	nop
 8013880:	bd80      	pop	{r7, pc}
	...

08013884 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013884:	b480      	push	{r7}
 8013886:	b083      	sub	sp, #12
 8013888:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801388a:	f3ef 8305 	mrs	r3, IPSR
 801388e:	603b      	str	r3, [r7, #0]
  return(result);
 8013890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013892:	2b00      	cmp	r3, #0
 8013894:	d003      	beq.n	801389e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013896:	f06f 0305 	mvn.w	r3, #5
 801389a:	607b      	str	r3, [r7, #4]
 801389c:	e00c      	b.n	80138b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801389e:	4b0a      	ldr	r3, [pc, #40]	; (80138c8 <osKernelInitialize+0x44>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d105      	bne.n	80138b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80138a6:	4b08      	ldr	r3, [pc, #32]	; (80138c8 <osKernelInitialize+0x44>)
 80138a8:	2201      	movs	r2, #1
 80138aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80138ac:	2300      	movs	r3, #0
 80138ae:	607b      	str	r3, [r7, #4]
 80138b0:	e002      	b.n	80138b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80138b2:	f04f 33ff 	mov.w	r3, #4294967295
 80138b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80138b8:	687b      	ldr	r3, [r7, #4]
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	200017a8 	.word	0x200017a8

080138cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138d2:	f3ef 8305 	mrs	r3, IPSR
 80138d6:	603b      	str	r3, [r7, #0]
  return(result);
 80138d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d003      	beq.n	80138e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80138de:	f06f 0305 	mvn.w	r3, #5
 80138e2:	607b      	str	r3, [r7, #4]
 80138e4:	e010      	b.n	8013908 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80138e6:	4b0b      	ldr	r3, [pc, #44]	; (8013914 <osKernelStart+0x48>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d109      	bne.n	8013902 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80138ee:	f7ff ffbf 	bl	8013870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80138f2:	4b08      	ldr	r3, [pc, #32]	; (8013914 <osKernelStart+0x48>)
 80138f4:	2202      	movs	r2, #2
 80138f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80138f8:	f001 fb08 	bl	8014f0c <vTaskStartScheduler>
      stat = osOK;
 80138fc:	2300      	movs	r3, #0
 80138fe:	607b      	str	r3, [r7, #4]
 8013900:	e002      	b.n	8013908 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013902:	f04f 33ff 	mov.w	r3, #4294967295
 8013906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013908:	687b      	ldr	r3, [r7, #4]
}
 801390a:	4618      	mov	r0, r3
 801390c:	3708      	adds	r7, #8
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	200017a8 	.word	0x200017a8

08013918 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801391e:	f3ef 8305 	mrs	r3, IPSR
 8013922:	603b      	str	r3, [r7, #0]
  return(result);
 8013924:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8013926:	2b00      	cmp	r3, #0
 8013928:	d003      	beq.n	8013932 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801392a:	f001 fc31 	bl	8015190 <xTaskGetTickCountFromISR>
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	e002      	b.n	8013938 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8013932:	f001 fc1d 	bl	8015170 <xTaskGetTickCount>
 8013936:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8013938:	687b      	ldr	r3, [r7, #4]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3708      	adds	r7, #8
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}

08013942 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013942:	b580      	push	{r7, lr}
 8013944:	b08e      	sub	sp, #56	; 0x38
 8013946:	af04      	add	r7, sp, #16
 8013948:	60f8      	str	r0, [r7, #12]
 801394a:	60b9      	str	r1, [r7, #8]
 801394c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801394e:	2300      	movs	r3, #0
 8013950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013952:	f3ef 8305 	mrs	r3, IPSR
 8013956:	617b      	str	r3, [r7, #20]
  return(result);
 8013958:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801395a:	2b00      	cmp	r3, #0
 801395c:	d17e      	bne.n	8013a5c <osThreadNew+0x11a>
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d07b      	beq.n	8013a5c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013964:	2380      	movs	r3, #128	; 0x80
 8013966:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013968:	2318      	movs	r3, #24
 801396a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801396c:	2300      	movs	r3, #0
 801396e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013970:	f04f 33ff 	mov.w	r3, #4294967295
 8013974:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d045      	beq.n	8013a08 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d002      	beq.n	801398a <osThreadNew+0x48>
        name = attr->name;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	699b      	ldr	r3, [r3, #24]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	699b      	ldr	r3, [r3, #24]
 8013996:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d008      	beq.n	80139b0 <osThreadNew+0x6e>
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	2b38      	cmp	r3, #56	; 0x38
 80139a2:	d805      	bhi.n	80139b0 <osThreadNew+0x6e>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	f003 0301 	and.w	r3, r3, #1
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d001      	beq.n	80139b4 <osThreadNew+0x72>
        return (NULL);
 80139b0:	2300      	movs	r3, #0
 80139b2:	e054      	b.n	8013a5e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	695b      	ldr	r3, [r3, #20]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d003      	beq.n	80139c4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	695b      	ldr	r3, [r3, #20]
 80139c0:	089b      	lsrs	r3, r3, #2
 80139c2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	689b      	ldr	r3, [r3, #8]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d00e      	beq.n	80139ea <osThreadNew+0xa8>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	2bcb      	cmp	r3, #203	; 0xcb
 80139d2:	d90a      	bls.n	80139ea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d006      	beq.n	80139ea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	695b      	ldr	r3, [r3, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d002      	beq.n	80139ea <osThreadNew+0xa8>
        mem = 1;
 80139e4:	2301      	movs	r3, #1
 80139e6:	61bb      	str	r3, [r7, #24]
 80139e8:	e010      	b.n	8013a0c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	689b      	ldr	r3, [r3, #8]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d10c      	bne.n	8013a0c <osThreadNew+0xca>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d108      	bne.n	8013a0c <osThreadNew+0xca>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	691b      	ldr	r3, [r3, #16]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d104      	bne.n	8013a0c <osThreadNew+0xca>
          mem = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	61bb      	str	r3, [r7, #24]
 8013a06:	e001      	b.n	8013a0c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d110      	bne.n	8013a34 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013a1a:	9202      	str	r2, [sp, #8]
 8013a1c:	9301      	str	r3, [sp, #4]
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	9300      	str	r3, [sp, #0]
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	6a3a      	ldr	r2, [r7, #32]
 8013a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a28:	68f8      	ldr	r0, [r7, #12]
 8013a2a:	f000 ffe1 	bl	80149f0 <xTaskCreateStatic>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	613b      	str	r3, [r7, #16]
 8013a32:	e013      	b.n	8013a5c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013a34:	69bb      	ldr	r3, [r7, #24]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d110      	bne.n	8013a5c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013a3a:	6a3b      	ldr	r3, [r7, #32]
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	f107 0310 	add.w	r3, r7, #16
 8013a42:	9301      	str	r3, [sp, #4]
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a4c:	68f8      	ldr	r0, [r7, #12]
 8013a4e:	f001 f82c 	bl	8014aaa <xTaskCreate>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b01      	cmp	r3, #1
 8013a56:	d001      	beq.n	8013a5c <osThreadNew+0x11a>
            hTask = NULL;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013a5c:	693b      	ldr	r3, [r7, #16]
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3728      	adds	r7, #40	; 0x28
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013a66:	b580      	push	{r7, lr}
 8013a68:	b084      	sub	sp, #16
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a6e:	f3ef 8305 	mrs	r3, IPSR
 8013a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8013a74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d003      	beq.n	8013a82 <osDelay+0x1c>
    stat = osErrorISR;
 8013a7a:	f06f 0305 	mvn.w	r3, #5
 8013a7e:	60fb      	str	r3, [r7, #12]
 8013a80:	e007      	b.n	8013a92 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013a82:	2300      	movs	r3, #0
 8013a84:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d002      	beq.n	8013a92 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f001 fa05 	bl	8014e9c <vTaskDelay>
    }
  }

  return (stat);
 8013a92:	68fb      	ldr	r3, [r7, #12]
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aa4:	f3ef 8305 	mrs	r3, IPSR
 8013aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d003      	beq.n	8013ab8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8013ab0:	f06f 0305 	mvn.w	r3, #5
 8013ab4:	617b      	str	r3, [r7, #20]
 8013ab6:	e019      	b.n	8013aec <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8013abc:	f001 fb58 	bl	8015170 <xTaskGetTickCount>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	1ad3      	subs	r3, r2, r3
 8013aca:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d009      	beq.n	8013ae6 <osDelayUntil+0x4a>
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	db06      	blt.n	8013ae6 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8013ad8:	f107 0308 	add.w	r3, r7, #8
 8013adc:	6939      	ldr	r1, [r7, #16]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f001 f95c 	bl	8014d9c <vTaskDelayUntil>
 8013ae4:	e002      	b.n	8013aec <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8013ae6:	f06f 0303 	mvn.w	r3, #3
 8013aea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8013aec:	697b      	ldr	r3, [r7, #20]
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3718      	adds	r7, #24
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
	...

08013af8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013af8:	b480      	push	{r7}
 8013afa:	b085      	sub	sp, #20
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	4a07      	ldr	r2, [pc, #28]	; (8013b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8013b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	4a06      	ldr	r2, [pc, #24]	; (8013b28 <vApplicationGetIdleTaskMemory+0x30>)
 8013b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2280      	movs	r2, #128	; 0x80
 8013b14:	601a      	str	r2, [r3, #0]
}
 8013b16:	bf00      	nop
 8013b18:	3714      	adds	r7, #20
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr
 8013b22:	bf00      	nop
 8013b24:	200017ac 	.word	0x200017ac
 8013b28:	20001878 	.word	0x20001878

08013b2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013b2c:	b480      	push	{r7}
 8013b2e:	b085      	sub	sp, #20
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	60b9      	str	r1, [r7, #8]
 8013b36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	4a07      	ldr	r2, [pc, #28]	; (8013b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8013b3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	4a06      	ldr	r2, [pc, #24]	; (8013b5c <vApplicationGetTimerTaskMemory+0x30>)
 8013b42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013b4a:	601a      	str	r2, [r3, #0]
}
 8013b4c:	bf00      	nop
 8013b4e:	3714      	adds	r7, #20
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr
 8013b58:	20001a78 	.word	0x20001a78
 8013b5c:	20001b44 	.word	0x20001b44

08013b60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f103 0208 	add.w	r2, r3, #8
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f04f 32ff 	mov.w	r2, #4294967295
 8013b78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f103 0208 	add.w	r2, r3, #8
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f103 0208 	add.w	r2, r3, #8
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2200      	movs	r2, #0
 8013b92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013b94:	bf00      	nop
 8013b96:	370c      	adds	r7, #12
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b083      	sub	sp, #12
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2200      	movs	r2, #0
 8013bac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013bae:	bf00      	nop
 8013bb0:	370c      	adds	r7, #12
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb8:	4770      	bx	lr

08013bba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013bba:	b480      	push	{r7}
 8013bbc:	b085      	sub	sp, #20
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
 8013bc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	68fa      	ldr	r2, [r7, #12]
 8013bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	689a      	ldr	r2, [r3, #8]
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	689b      	ldr	r3, [r3, #8]
 8013bdc:	683a      	ldr	r2, [r7, #0]
 8013bde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	683a      	ldr	r2, [r7, #0]
 8013be4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	1c5a      	adds	r2, r3, #1
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	601a      	str	r2, [r3, #0]
}
 8013bf6:	bf00      	nop
 8013bf8:	3714      	adds	r7, #20
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c00:	4770      	bx	lr

08013c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c02:	b480      	push	{r7}
 8013c04:	b085      	sub	sp, #20
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	6078      	str	r0, [r7, #4]
 8013c0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c18:	d103      	bne.n	8013c22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	691b      	ldr	r3, [r3, #16]
 8013c1e:	60fb      	str	r3, [r7, #12]
 8013c20:	e00c      	b.n	8013c3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	3308      	adds	r3, #8
 8013c26:	60fb      	str	r3, [r7, #12]
 8013c28:	e002      	b.n	8013c30 <vListInsert+0x2e>
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	60fb      	str	r3, [r7, #12]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	68ba      	ldr	r2, [r7, #8]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d2f6      	bcs.n	8013c2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	685a      	ldr	r2, [r3, #4]
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	683a      	ldr	r2, [r7, #0]
 8013c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	68fa      	ldr	r2, [r7, #12]
 8013c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	683a      	ldr	r2, [r7, #0]
 8013c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	1c5a      	adds	r2, r3, #1
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	601a      	str	r2, [r3, #0]
}
 8013c68:	bf00      	nop
 8013c6a:	3714      	adds	r7, #20
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013c74:	b480      	push	{r7}
 8013c76:	b085      	sub	sp, #20
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	691b      	ldr	r3, [r3, #16]
 8013c80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	6892      	ldr	r2, [r2, #8]
 8013c8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	6852      	ldr	r2, [r2, #4]
 8013c94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d103      	bne.n	8013ca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	689a      	ldr	r2, [r3, #8]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	1e5a      	subs	r2, r3, #1
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	681b      	ldr	r3, [r3, #0]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3714      	adds	r7, #20
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10a      	bne.n	8013cf2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce0:	f383 8811 	msr	BASEPRI, r3
 8013ce4:	f3bf 8f6f 	isb	sy
 8013ce8:	f3bf 8f4f 	dsb	sy
 8013cec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013cee:	bf00      	nop
 8013cf0:	e7fe      	b.n	8013cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013cf2:	f002 fb47 	bl	8016384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cfe:	68f9      	ldr	r1, [r7, #12]
 8013d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d02:	fb01 f303 	mul.w	r3, r1, r3
 8013d06:	441a      	add	r2, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d22:	3b01      	subs	r3, #1
 8013d24:	68f9      	ldr	r1, [r7, #12]
 8013d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013d28:	fb01 f303 	mul.w	r3, r1, r3
 8013d2c:	441a      	add	r2, r3
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	22ff      	movs	r2, #255	; 0xff
 8013d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	22ff      	movs	r2, #255	; 0xff
 8013d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d114      	bne.n	8013d72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d01a      	beq.n	8013d86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	3310      	adds	r3, #16
 8013d54:	4618      	mov	r0, r3
 8013d56:	f001 fbb5 	bl	80154c4 <xTaskRemoveFromEventList>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d012      	beq.n	8013d86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013d60:	4b0c      	ldr	r3, [pc, #48]	; (8013d94 <xQueueGenericReset+0xcc>)
 8013d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d66:	601a      	str	r2, [r3, #0]
 8013d68:	f3bf 8f4f 	dsb	sy
 8013d6c:	f3bf 8f6f 	isb	sy
 8013d70:	e009      	b.n	8013d86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	3310      	adds	r3, #16
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff fef2 	bl	8013b60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	3324      	adds	r3, #36	; 0x24
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7ff feed 	bl	8013b60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013d86:	f002 fb2d 	bl	80163e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013d8a:	2301      	movs	r3, #1
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	e000ed04 	.word	0xe000ed04

08013d98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b08e      	sub	sp, #56	; 0x38
 8013d9c:	af02      	add	r7, sp, #8
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	60b9      	str	r1, [r7, #8]
 8013da2:	607a      	str	r2, [r7, #4]
 8013da4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10a      	bne.n	8013dc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db0:	f383 8811 	msr	BASEPRI, r3
 8013db4:	f3bf 8f6f 	isb	sy
 8013db8:	f3bf 8f4f 	dsb	sy
 8013dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013dbe:	bf00      	nop
 8013dc0:	e7fe      	b.n	8013dc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10a      	bne.n	8013dde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013dda:	bf00      	nop
 8013ddc:	e7fe      	b.n	8013ddc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d002      	beq.n	8013dea <xQueueGenericCreateStatic+0x52>
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d001      	beq.n	8013dee <xQueueGenericCreateStatic+0x56>
 8013dea:	2301      	movs	r3, #1
 8013dec:	e000      	b.n	8013df0 <xQueueGenericCreateStatic+0x58>
 8013dee:	2300      	movs	r3, #0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10a      	bne.n	8013e0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df8:	f383 8811 	msr	BASEPRI, r3
 8013dfc:	f3bf 8f6f 	isb	sy
 8013e00:	f3bf 8f4f 	dsb	sy
 8013e04:	623b      	str	r3, [r7, #32]
}
 8013e06:	bf00      	nop
 8013e08:	e7fe      	b.n	8013e08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d102      	bne.n	8013e16 <xQueueGenericCreateStatic+0x7e>
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d101      	bne.n	8013e1a <xQueueGenericCreateStatic+0x82>
 8013e16:	2301      	movs	r3, #1
 8013e18:	e000      	b.n	8013e1c <xQueueGenericCreateStatic+0x84>
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d10a      	bne.n	8013e36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e24:	f383 8811 	msr	BASEPRI, r3
 8013e28:	f3bf 8f6f 	isb	sy
 8013e2c:	f3bf 8f4f 	dsb	sy
 8013e30:	61fb      	str	r3, [r7, #28]
}
 8013e32:	bf00      	nop
 8013e34:	e7fe      	b.n	8013e34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013e36:	2350      	movs	r3, #80	; 0x50
 8013e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	2b50      	cmp	r3, #80	; 0x50
 8013e3e:	d00a      	beq.n	8013e56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e44:	f383 8811 	msr	BASEPRI, r3
 8013e48:	f3bf 8f6f 	isb	sy
 8013e4c:	f3bf 8f4f 	dsb	sy
 8013e50:	61bb      	str	r3, [r7, #24]
}
 8013e52:	bf00      	nop
 8013e54:	e7fe      	b.n	8013e54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013e56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d00d      	beq.n	8013e7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e64:	2201      	movs	r2, #1
 8013e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013e6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	4613      	mov	r3, r2
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	68b9      	ldr	r1, [r7, #8]
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f000 f83f 	bl	8013efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013e80:	4618      	mov	r0, r3
 8013e82:	3730      	adds	r7, #48	; 0x30
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b08a      	sub	sp, #40	; 0x28
 8013e8c:	af02      	add	r7, sp, #8
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	60b9      	str	r1, [r7, #8]
 8013e92:	4613      	mov	r3, r2
 8013e94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d10a      	bne.n	8013eb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea0:	f383 8811 	msr	BASEPRI, r3
 8013ea4:	f3bf 8f6f 	isb	sy
 8013ea8:	f3bf 8f4f 	dsb	sy
 8013eac:	613b      	str	r3, [r7, #16]
}
 8013eae:	bf00      	nop
 8013eb0:	e7fe      	b.n	8013eb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	68ba      	ldr	r2, [r7, #8]
 8013eb6:	fb02 f303 	mul.w	r3, r2, r3
 8013eba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	3350      	adds	r3, #80	; 0x50
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f002 fb81 	bl	80165c8 <pvPortMalloc>
 8013ec6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d011      	beq.n	8013ef2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	3350      	adds	r3, #80	; 0x50
 8013ed6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013ed8:	69bb      	ldr	r3, [r7, #24]
 8013eda:	2200      	movs	r2, #0
 8013edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ee0:	79fa      	ldrb	r2, [r7, #7]
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	4613      	mov	r3, r2
 8013ee8:	697a      	ldr	r2, [r7, #20]
 8013eea:	68b9      	ldr	r1, [r7, #8]
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f000 f805 	bl	8013efc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3720      	adds	r7, #32
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
 8013f08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d103      	bne.n	8013f18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	69ba      	ldr	r2, [r7, #24]
 8013f14:	601a      	str	r2, [r3, #0]
 8013f16:	e002      	b.n	8013f1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	68fa      	ldr	r2, [r7, #12]
 8013f22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	68ba      	ldr	r2, [r7, #8]
 8013f28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013f2a:	2101      	movs	r1, #1
 8013f2c:	69b8      	ldr	r0, [r7, #24]
 8013f2e:	f7ff fecb 	bl	8013cc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013f32:	69bb      	ldr	r3, [r7, #24]
 8013f34:	78fa      	ldrb	r2, [r7, #3]
 8013f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8013f3a:	78fb      	ldrb	r3, [r7, #3]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	68f9      	ldr	r1, [r7, #12]
 8013f40:	2073      	movs	r0, #115	; 0x73
 8013f42:	f003 fa09 	bl	8017358 <SEGGER_SYSVIEW_RecordU32x3>
}
 8013f46:	bf00      	nop
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
	...

08013f50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b090      	sub	sp, #64	; 0x40
 8013f54:	af02      	add	r7, sp, #8
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
 8013f5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d10a      	bne.n	8013f82 <xQueueGenericSend+0x32>
	__asm volatile
 8013f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f70:	f383 8811 	msr	BASEPRI, r3
 8013f74:	f3bf 8f6f 	isb	sy
 8013f78:	f3bf 8f4f 	dsb	sy
 8013f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013f7e:	bf00      	nop
 8013f80:	e7fe      	b.n	8013f80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d103      	bne.n	8013f90 <xQueueGenericSend+0x40>
 8013f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d101      	bne.n	8013f94 <xQueueGenericSend+0x44>
 8013f90:	2301      	movs	r3, #1
 8013f92:	e000      	b.n	8013f96 <xQueueGenericSend+0x46>
 8013f94:	2300      	movs	r3, #0
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d10a      	bne.n	8013fb0 <xQueueGenericSend+0x60>
	__asm volatile
 8013f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9e:	f383 8811 	msr	BASEPRI, r3
 8013fa2:	f3bf 8f6f 	isb	sy
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013fac:	bf00      	nop
 8013fae:	e7fe      	b.n	8013fae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	d103      	bne.n	8013fbe <xQueueGenericSend+0x6e>
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	d101      	bne.n	8013fc2 <xQueueGenericSend+0x72>
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	e000      	b.n	8013fc4 <xQueueGenericSend+0x74>
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d10a      	bne.n	8013fde <xQueueGenericSend+0x8e>
	__asm volatile
 8013fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fcc:	f383 8811 	msr	BASEPRI, r3
 8013fd0:	f3bf 8f6f 	isb	sy
 8013fd4:	f3bf 8f4f 	dsb	sy
 8013fd8:	623b      	str	r3, [r7, #32]
}
 8013fda:	bf00      	nop
 8013fdc:	e7fe      	b.n	8013fdc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013fde:	f001 fc6f 	bl	80158c0 <xTaskGetSchedulerState>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d102      	bne.n	8013fee <xQueueGenericSend+0x9e>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d101      	bne.n	8013ff2 <xQueueGenericSend+0xa2>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e000      	b.n	8013ff4 <xQueueGenericSend+0xa4>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d10a      	bne.n	801400e <xQueueGenericSend+0xbe>
	__asm volatile
 8013ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffc:	f383 8811 	msr	BASEPRI, r3
 8014000:	f3bf 8f6f 	isb	sy
 8014004:	f3bf 8f4f 	dsb	sy
 8014008:	61fb      	str	r3, [r7, #28]
}
 801400a:	bf00      	nop
 801400c:	e7fe      	b.n	801400c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801400e:	f002 f9b9 	bl	8016384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801401a:	429a      	cmp	r2, r3
 801401c:	d302      	bcc.n	8014024 <xQueueGenericSend+0xd4>
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	2b02      	cmp	r3, #2
 8014022:	d136      	bne.n	8014092 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8014024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014026:	4618      	mov	r0, r3
 8014028:	f003 fe48 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 801402c:	68ba      	ldr	r2, [r7, #8]
 801402e:	6879      	ldr	r1, [r7, #4]
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	460b      	mov	r3, r1
 8014036:	4601      	mov	r1, r0
 8014038:	205a      	movs	r0, #90	; 0x5a
 801403a:	f003 fa03 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	68b9      	ldr	r1, [r7, #8]
 8014042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014044:	f000 fb5e 	bl	8014704 <prvCopyDataToQueue>
 8014048:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404e:	2b00      	cmp	r3, #0
 8014050:	d010      	beq.n	8014074 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014054:	3324      	adds	r3, #36	; 0x24
 8014056:	4618      	mov	r0, r3
 8014058:	f001 fa34 	bl	80154c4 <xTaskRemoveFromEventList>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	d013      	beq.n	801408a <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014062:	4b4d      	ldr	r3, [pc, #308]	; (8014198 <xQueueGenericSend+0x248>)
 8014064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014068:	601a      	str	r2, [r3, #0]
 801406a:	f3bf 8f4f 	dsb	sy
 801406e:	f3bf 8f6f 	isb	sy
 8014072:	e00a      	b.n	801408a <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014076:	2b00      	cmp	r3, #0
 8014078:	d007      	beq.n	801408a <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801407a:	4b47      	ldr	r3, [pc, #284]	; (8014198 <xQueueGenericSend+0x248>)
 801407c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	f3bf 8f4f 	dsb	sy
 8014086:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801408a:	f002 f9ab 	bl	80163e4 <vPortExitCritical>
				return pdPASS;
 801408e:	2301      	movs	r3, #1
 8014090:	e07d      	b.n	801418e <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d110      	bne.n	80140ba <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014098:	f002 f9a4 	bl	80163e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 801409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409e:	4618      	mov	r0, r3
 80140a0:	f003 fe0c 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80140a4:	68ba      	ldr	r2, [r7, #8]
 80140a6:	6879      	ldr	r1, [r7, #4]
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	460b      	mov	r3, r1
 80140ae:	4601      	mov	r1, r0
 80140b0:	205a      	movs	r0, #90	; 0x5a
 80140b2:	f003 f9c7 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80140b6:	2300      	movs	r3, #0
 80140b8:	e069      	b.n	801418e <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80140ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d106      	bne.n	80140ce <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80140c0:	f107 0314 	add.w	r3, r7, #20
 80140c4:	4618      	mov	r0, r3
 80140c6:	f001 fa65 	bl	8015594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80140ca:	2301      	movs	r3, #1
 80140cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80140ce:	f002 f989 	bl	80163e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80140d2:	f000 ff9d 	bl	8015010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80140d6:	f002 f955 	bl	8016384 <vPortEnterCritical>
 80140da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80140e0:	b25b      	sxtb	r3, r3
 80140e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140e6:	d103      	bne.n	80140f0 <xQueueGenericSend+0x1a0>
 80140e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ea:	2200      	movs	r2, #0
 80140ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140f6:	b25b      	sxtb	r3, r3
 80140f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140fc:	d103      	bne.n	8014106 <xQueueGenericSend+0x1b6>
 80140fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014100:	2200      	movs	r2, #0
 8014102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014106:	f002 f96d 	bl	80163e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801410a:	1d3a      	adds	r2, r7, #4
 801410c:	f107 0314 	add.w	r3, r7, #20
 8014110:	4611      	mov	r1, r2
 8014112:	4618      	mov	r0, r3
 8014114:	f001 fa54 	bl	80155c0 <xTaskCheckForTimeOut>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d124      	bne.n	8014168 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801411e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014120:	f000 fbe8 	bl	80148f4 <prvIsQueueFull>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d018      	beq.n	801415c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412c:	3310      	adds	r3, #16
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	4611      	mov	r1, r2
 8014132:	4618      	mov	r0, r3
 8014134:	f001 f974 	bl	8015420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801413a:	f000 fb73 	bl	8014824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801413e:	f000 ff75 	bl	801502c <xTaskResumeAll>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	f47f af62 	bne.w	801400e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801414a:	4b13      	ldr	r3, [pc, #76]	; (8014198 <xQueueGenericSend+0x248>)
 801414c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014150:	601a      	str	r2, [r3, #0]
 8014152:	f3bf 8f4f 	dsb	sy
 8014156:	f3bf 8f6f 	isb	sy
 801415a:	e758      	b.n	801400e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801415c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801415e:	f000 fb61 	bl	8014824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014162:	f000 ff63 	bl	801502c <xTaskResumeAll>
 8014166:	e752      	b.n	801400e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801416a:	f000 fb5b 	bl	8014824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801416e:	f000 ff5d 	bl	801502c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8014172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014174:	4618      	mov	r0, r3
 8014176:	f003 fda1 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 801417a:	68ba      	ldr	r2, [r7, #8]
 801417c:	6879      	ldr	r1, [r7, #4]
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	460b      	mov	r3, r1
 8014184:	4601      	mov	r1, r0
 8014186:	205a      	movs	r0, #90	; 0x5a
 8014188:	f003 f95c 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 801418c:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801418e:	4618      	mov	r0, r3
 8014190:	3738      	adds	r7, #56	; 0x38
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	e000ed04 	.word	0xe000ed04

0801419c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b090      	sub	sp, #64	; 0x40
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80141ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10a      	bne.n	80141ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80141b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b8:	f383 8811 	msr	BASEPRI, r3
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141c6:	bf00      	nop
 80141c8:	e7fe      	b.n	80141c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d103      	bne.n	80141d8 <xQueueGenericSendFromISR+0x3c>
 80141d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d101      	bne.n	80141dc <xQueueGenericSendFromISR+0x40>
 80141d8:	2301      	movs	r3, #1
 80141da:	e000      	b.n	80141de <xQueueGenericSendFromISR+0x42>
 80141dc:	2300      	movs	r3, #0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d10a      	bne.n	80141f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	f383 8811 	msr	BASEPRI, r3
 80141ea:	f3bf 8f6f 	isb	sy
 80141ee:	f3bf 8f4f 	dsb	sy
 80141f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141f4:	bf00      	nop
 80141f6:	e7fe      	b.n	80141f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	2b02      	cmp	r3, #2
 80141fc:	d103      	bne.n	8014206 <xQueueGenericSendFromISR+0x6a>
 80141fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014202:	2b01      	cmp	r3, #1
 8014204:	d101      	bne.n	801420a <xQueueGenericSendFromISR+0x6e>
 8014206:	2301      	movs	r3, #1
 8014208:	e000      	b.n	801420c <xQueueGenericSendFromISR+0x70>
 801420a:	2300      	movs	r3, #0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d10a      	bne.n	8014226 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014214:	f383 8811 	msr	BASEPRI, r3
 8014218:	f3bf 8f6f 	isb	sy
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	623b      	str	r3, [r7, #32]
}
 8014222:	bf00      	nop
 8014224:	e7fe      	b.n	8014224 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014226:	f002 f98f 	bl	8016548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801422a:	f3ef 8211 	mrs	r2, BASEPRI
 801422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014232:	f383 8811 	msr	BASEPRI, r3
 8014236:	f3bf 8f6f 	isb	sy
 801423a:	f3bf 8f4f 	dsb	sy
 801423e:	61fa      	str	r2, [r7, #28]
 8014240:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014242:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014244:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801424e:	429a      	cmp	r2, r3
 8014250:	d302      	bcc.n	8014258 <xQueueGenericSendFromISR+0xbc>
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	2b02      	cmp	r3, #2
 8014256:	d139      	bne.n	80142cc <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801425e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014266:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8014268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801426a:	4618      	mov	r0, r3
 801426c:	f003 fd26 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 8014270:	4601      	mov	r1, r0
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	461a      	mov	r2, r3
 8014276:	2060      	movs	r0, #96	; 0x60
 8014278:	f003 f814 	bl	80172a4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801427c:	683a      	ldr	r2, [r7, #0]
 801427e:	68b9      	ldr	r1, [r7, #8]
 8014280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014282:	f000 fa3f 	bl	8014704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014286:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801428e:	d112      	bne.n	80142b6 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014294:	2b00      	cmp	r3, #0
 8014296:	d016      	beq.n	80142c6 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429a:	3324      	adds	r3, #36	; 0x24
 801429c:	4618      	mov	r0, r3
 801429e:	f001 f911 	bl	80154c4 <xTaskRemoveFromEventList>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00e      	beq.n	80142c6 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00b      	beq.n	80142c6 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2201      	movs	r2, #1
 80142b2:	601a      	str	r2, [r3, #0]
 80142b4:	e007      	b.n	80142c6 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80142b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80142ba:	3301      	adds	r3, #1
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	b25a      	sxtb	r2, r3
 80142c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80142c6:	2301      	movs	r3, #1
 80142c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80142ca:	e00b      	b.n	80142e4 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80142cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ce:	4618      	mov	r0, r3
 80142d0:	f003 fcf4 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80142d4:	4601      	mov	r1, r0
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	461a      	mov	r2, r3
 80142da:	2060      	movs	r0, #96	; 0x60
 80142dc:	f002 ffe2 	bl	80172a4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80142e0:	2300      	movs	r3, #0
 80142e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80142e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80142ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80142f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3740      	adds	r7, #64	; 0x40
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
	...

080142fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80142fc:	b590      	push	{r4, r7, lr}
 80142fe:	b08f      	sub	sp, #60	; 0x3c
 8014300:	af02      	add	r7, sp, #8
 8014302:	60f8      	str	r0, [r7, #12]
 8014304:	60b9      	str	r1, [r7, #8]
 8014306:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014308:	2300      	movs	r3, #0
 801430a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10a      	bne.n	801432c <xQueueReceive+0x30>
	__asm volatile
 8014316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801431a:	f383 8811 	msr	BASEPRI, r3
 801431e:	f3bf 8f6f 	isb	sy
 8014322:	f3bf 8f4f 	dsb	sy
 8014326:	623b      	str	r3, [r7, #32]
}
 8014328:	bf00      	nop
 801432a:	e7fe      	b.n	801432a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d103      	bne.n	801433a <xQueueReceive+0x3e>
 8014332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014336:	2b00      	cmp	r3, #0
 8014338:	d101      	bne.n	801433e <xQueueReceive+0x42>
 801433a:	2301      	movs	r3, #1
 801433c:	e000      	b.n	8014340 <xQueueReceive+0x44>
 801433e:	2300      	movs	r3, #0
 8014340:	2b00      	cmp	r3, #0
 8014342:	d10a      	bne.n	801435a <xQueueReceive+0x5e>
	__asm volatile
 8014344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014348:	f383 8811 	msr	BASEPRI, r3
 801434c:	f3bf 8f6f 	isb	sy
 8014350:	f3bf 8f4f 	dsb	sy
 8014354:	61fb      	str	r3, [r7, #28]
}
 8014356:	bf00      	nop
 8014358:	e7fe      	b.n	8014358 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801435a:	f001 fab1 	bl	80158c0 <xTaskGetSchedulerState>
 801435e:	4603      	mov	r3, r0
 8014360:	2b00      	cmp	r3, #0
 8014362:	d102      	bne.n	801436a <xQueueReceive+0x6e>
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d101      	bne.n	801436e <xQueueReceive+0x72>
 801436a:	2301      	movs	r3, #1
 801436c:	e000      	b.n	8014370 <xQueueReceive+0x74>
 801436e:	2300      	movs	r3, #0
 8014370:	2b00      	cmp	r3, #0
 8014372:	d10a      	bne.n	801438a <xQueueReceive+0x8e>
	__asm volatile
 8014374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014378:	f383 8811 	msr	BASEPRI, r3
 801437c:	f3bf 8f6f 	isb	sy
 8014380:	f3bf 8f4f 	dsb	sy
 8014384:	61bb      	str	r3, [r7, #24]
}
 8014386:	bf00      	nop
 8014388:	e7fe      	b.n	8014388 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801438a:	f001 fffb 	bl	8016384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014392:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014396:	2b00      	cmp	r3, #0
 8014398:	d02f      	beq.n	80143fa <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801439a:	68b9      	ldr	r1, [r7, #8]
 801439c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801439e:	f000 fa1b 	bl	80147d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80143a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a4:	4618      	mov	r0, r3
 80143a6:	f003 fc89 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80143aa:	4604      	mov	r4, r0
 80143ac:	2000      	movs	r0, #0
 80143ae:	f003 fc85 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80143b2:	4602      	mov	r2, r0
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2101      	movs	r1, #1
 80143b8:	9100      	str	r1, [sp, #0]
 80143ba:	4621      	mov	r1, r4
 80143bc:	205c      	movs	r0, #92	; 0x5c
 80143be:	f003 f841 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80143c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c4:	1e5a      	subs	r2, r3, #1
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143cc:	691b      	ldr	r3, [r3, #16]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d00f      	beq.n	80143f2 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d4:	3310      	adds	r3, #16
 80143d6:	4618      	mov	r0, r3
 80143d8:	f001 f874 	bl	80154c4 <xTaskRemoveFromEventList>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d007      	beq.n	80143f2 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80143e2:	4b4d      	ldr	r3, [pc, #308]	; (8014518 <xQueueReceive+0x21c>)
 80143e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143e8:	601a      	str	r2, [r3, #0]
 80143ea:	f3bf 8f4f 	dsb	sy
 80143ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80143f2:	f001 fff7 	bl	80163e4 <vPortExitCritical>
				return pdPASS;
 80143f6:	2301      	movs	r3, #1
 80143f8:	e08a      	b.n	8014510 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d113      	bne.n	8014428 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014400:	f001 fff0 	bl	80163e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8014404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014406:	4618      	mov	r0, r3
 8014408:	f003 fc58 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 801440c:	4604      	mov	r4, r0
 801440e:	2000      	movs	r0, #0
 8014410:	f003 fc54 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 8014414:	4602      	mov	r2, r0
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2101      	movs	r1, #1
 801441a:	9100      	str	r1, [sp, #0]
 801441c:	4621      	mov	r1, r4
 801441e:	205c      	movs	r0, #92	; 0x5c
 8014420:	f003 f810 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8014424:	2300      	movs	r3, #0
 8014426:	e073      	b.n	8014510 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801442a:	2b00      	cmp	r3, #0
 801442c:	d106      	bne.n	801443c <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801442e:	f107 0310 	add.w	r3, r7, #16
 8014432:	4618      	mov	r0, r3
 8014434:	f001 f8ae 	bl	8015594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014438:	2301      	movs	r3, #1
 801443a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801443c:	f001 ffd2 	bl	80163e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014440:	f000 fde6 	bl	8015010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014444:	f001 ff9e 	bl	8016384 <vPortEnterCritical>
 8014448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801444e:	b25b      	sxtb	r3, r3
 8014450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014454:	d103      	bne.n	801445e <xQueueReceive+0x162>
 8014456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014458:	2200      	movs	r2, #0
 801445a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014464:	b25b      	sxtb	r3, r3
 8014466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801446a:	d103      	bne.n	8014474 <xQueueReceive+0x178>
 801446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446e:	2200      	movs	r2, #0
 8014470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014474:	f001 ffb6 	bl	80163e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014478:	1d3a      	adds	r2, r7, #4
 801447a:	f107 0310 	add.w	r3, r7, #16
 801447e:	4611      	mov	r1, r2
 8014480:	4618      	mov	r0, r3
 8014482:	f001 f89d 	bl	80155c0 <xTaskCheckForTimeOut>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d124      	bne.n	80144d6 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801448c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801448e:	f000 fa1b 	bl	80148c8 <prvIsQueueEmpty>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d018      	beq.n	80144ca <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449a:	3324      	adds	r3, #36	; 0x24
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	4611      	mov	r1, r2
 80144a0:	4618      	mov	r0, r3
 80144a2:	f000 ffbd 	bl	8015420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80144a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144a8:	f000 f9bc 	bl	8014824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80144ac:	f000 fdbe 	bl	801502c <xTaskResumeAll>
 80144b0:	4603      	mov	r3, r0
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f47f af69 	bne.w	801438a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80144b8:	4b17      	ldr	r3, [pc, #92]	; (8014518 <xQueueReceive+0x21c>)
 80144ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144be:	601a      	str	r2, [r3, #0]
 80144c0:	f3bf 8f4f 	dsb	sy
 80144c4:	f3bf 8f6f 	isb	sy
 80144c8:	e75f      	b.n	801438a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80144ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144cc:	f000 f9aa 	bl	8014824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80144d0:	f000 fdac 	bl	801502c <xTaskResumeAll>
 80144d4:	e759      	b.n	801438a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80144d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144d8:	f000 f9a4 	bl	8014824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80144dc:	f000 fda6 	bl	801502c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80144e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144e2:	f000 f9f1 	bl	80148c8 <prvIsQueueEmpty>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	f43f af4e 	beq.w	801438a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80144ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f0:	4618      	mov	r0, r3
 80144f2:	f003 fbe3 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80144f6:	4604      	mov	r4, r0
 80144f8:	2000      	movs	r0, #0
 80144fa:	f003 fbdf 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80144fe:	4602      	mov	r2, r0
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2101      	movs	r1, #1
 8014504:	9100      	str	r1, [sp, #0]
 8014506:	4621      	mov	r1, r4
 8014508:	205c      	movs	r0, #92	; 0x5c
 801450a:	f002 ff9b 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 801450e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014510:	4618      	mov	r0, r3
 8014512:	3734      	adds	r7, #52	; 0x34
 8014514:	46bd      	mov	sp, r7
 8014516:	bd90      	pop	{r4, r7, pc}
 8014518:	e000ed04 	.word	0xe000ed04

0801451c <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801451c:	b590      	push	{r4, r7, lr}
 801451e:	b091      	sub	sp, #68	; 0x44
 8014520:	af02      	add	r7, sp, #8
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014528:	2300      	movs	r3, #0
 801452a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014532:	2b00      	cmp	r3, #0
 8014534:	d10a      	bne.n	801454c <xQueuePeek+0x30>
	__asm volatile
 8014536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801453a:	f383 8811 	msr	BASEPRI, r3
 801453e:	f3bf 8f6f 	isb	sy
 8014542:	f3bf 8f4f 	dsb	sy
 8014546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014548:	bf00      	nop
 801454a:	e7fe      	b.n	801454a <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d103      	bne.n	801455a <xQueuePeek+0x3e>
 8014552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014556:	2b00      	cmp	r3, #0
 8014558:	d101      	bne.n	801455e <xQueuePeek+0x42>
 801455a:	2301      	movs	r3, #1
 801455c:	e000      	b.n	8014560 <xQueuePeek+0x44>
 801455e:	2300      	movs	r3, #0
 8014560:	2b00      	cmp	r3, #0
 8014562:	d10a      	bne.n	801457a <xQueuePeek+0x5e>
	__asm volatile
 8014564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014568:	f383 8811 	msr	BASEPRI, r3
 801456c:	f3bf 8f6f 	isb	sy
 8014570:	f3bf 8f4f 	dsb	sy
 8014574:	623b      	str	r3, [r7, #32]
}
 8014576:	bf00      	nop
 8014578:	e7fe      	b.n	8014578 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801457a:	f001 f9a1 	bl	80158c0 <xTaskGetSchedulerState>
 801457e:	4603      	mov	r3, r0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d102      	bne.n	801458a <xQueuePeek+0x6e>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d101      	bne.n	801458e <xQueuePeek+0x72>
 801458a:	2301      	movs	r3, #1
 801458c:	e000      	b.n	8014590 <xQueuePeek+0x74>
 801458e:	2300      	movs	r3, #0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d10a      	bne.n	80145aa <xQueuePeek+0x8e>
	__asm volatile
 8014594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014598:	f383 8811 	msr	BASEPRI, r3
 801459c:	f3bf 8f6f 	isb	sy
 80145a0:	f3bf 8f4f 	dsb	sy
 80145a4:	61fb      	str	r3, [r7, #28]
}
 80145a6:	bf00      	nop
 80145a8:	e7fe      	b.n	80145a8 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145aa:	f001 feeb 	bl	8016384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80145ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145b2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80145b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d032      	beq.n	8014620 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80145ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80145c0:	68b9      	ldr	r1, [r7, #8]
 80145c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145c4:	f000 f908 	bl	80147d8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 80145c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ca:	4618      	mov	r0, r3
 80145cc:	f003 fb76 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80145d0:	4604      	mov	r4, r0
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f003 fb71 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 80145da:	4602      	mov	r2, r0
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2101      	movs	r1, #1
 80145e0:	9100      	str	r1, [sp, #0]
 80145e2:	4621      	mov	r1, r4
 80145e4:	205c      	movs	r0, #92	; 0x5c
 80145e6:	f002 ff2d 	bl	8017444 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80145ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145ee:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d00f      	beq.n	8014618 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fa:	3324      	adds	r3, #36	; 0x24
 80145fc:	4618      	mov	r0, r3
 80145fe:	f000 ff61 	bl	80154c4 <xTaskRemoveFromEventList>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d007      	beq.n	8014618 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8014608:	4b3d      	ldr	r3, [pc, #244]	; (8014700 <xQueuePeek+0x1e4>)
 801460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801460e:	601a      	str	r2, [r3, #0]
 8014610:	f3bf 8f4f 	dsb	sy
 8014614:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014618:	f001 fee4 	bl	80163e4 <vPortExitCritical>
				return pdPASS;
 801461c:	2301      	movs	r3, #1
 801461e:	e06a      	b.n	80146f6 <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d103      	bne.n	801462e <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014626:	f001 fedd 	bl	80163e4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801462a:	2300      	movs	r3, #0
 801462c:	e063      	b.n	80146f6 <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 801462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014630:	2b00      	cmp	r3, #0
 8014632:	d106      	bne.n	8014642 <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014634:	f107 0314 	add.w	r3, r7, #20
 8014638:	4618      	mov	r0, r3
 801463a:	f000 ffab 	bl	8015594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801463e:	2301      	movs	r3, #1
 8014640:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014642:	f001 fecf 	bl	80163e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014646:	f000 fce3 	bl	8015010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801464a:	f001 fe9b 	bl	8016384 <vPortEnterCritical>
 801464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014654:	b25b      	sxtb	r3, r3
 8014656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801465a:	d103      	bne.n	8014664 <xQueuePeek+0x148>
 801465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465e:	2200      	movs	r2, #0
 8014660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801466a:	b25b      	sxtb	r3, r3
 801466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014670:	d103      	bne.n	801467a <xQueuePeek+0x15e>
 8014672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014674:	2200      	movs	r2, #0
 8014676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801467a:	f001 feb3 	bl	80163e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801467e:	1d3a      	adds	r2, r7, #4
 8014680:	f107 0314 	add.w	r3, r7, #20
 8014684:	4611      	mov	r1, r2
 8014686:	4618      	mov	r0, r3
 8014688:	f000 ff9a 	bl	80155c0 <xTaskCheckForTimeOut>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	d124      	bne.n	80146dc <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014694:	f000 f918 	bl	80148c8 <prvIsQueueEmpty>
 8014698:	4603      	mov	r3, r0
 801469a:	2b00      	cmp	r3, #0
 801469c:	d018      	beq.n	80146d0 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a0:	3324      	adds	r3, #36	; 0x24
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	4611      	mov	r1, r2
 80146a6:	4618      	mov	r0, r3
 80146a8:	f000 feba 	bl	8015420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80146ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ae:	f000 f8b9 	bl	8014824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80146b2:	f000 fcbb 	bl	801502c <xTaskResumeAll>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f47f af76 	bne.w	80145aa <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80146be:	4b10      	ldr	r3, [pc, #64]	; (8014700 <xQueuePeek+0x1e4>)
 80146c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146c4:	601a      	str	r2, [r3, #0]
 80146c6:	f3bf 8f4f 	dsb	sy
 80146ca:	f3bf 8f6f 	isb	sy
 80146ce:	e76c      	b.n	80145aa <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80146d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146d2:	f000 f8a7 	bl	8014824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146d6:	f000 fca9 	bl	801502c <xTaskResumeAll>
 80146da:	e766      	b.n	80145aa <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80146dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146de:	f000 f8a1 	bl	8014824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80146e2:	f000 fca3 	bl	801502c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80146e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146e8:	f000 f8ee 	bl	80148c8 <prvIsQueueEmpty>
 80146ec:	4603      	mov	r3, r0
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f43f af5b 	beq.w	80145aa <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80146f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	373c      	adds	r7, #60	; 0x3c
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd90      	pop	{r4, r7, pc}
 80146fe:	bf00      	nop
 8014700:	e000ed04 	.word	0xe000ed04

08014704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b086      	sub	sp, #24
 8014708:	af00      	add	r7, sp, #0
 801470a:	60f8      	str	r0, [r7, #12]
 801470c:	60b9      	str	r1, [r7, #8]
 801470e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014710:	2300      	movs	r3, #0
 8014712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801471e:	2b00      	cmp	r3, #0
 8014720:	d10d      	bne.n	801473e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d14d      	bne.n	80147c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	689b      	ldr	r3, [r3, #8]
 801472e:	4618      	mov	r0, r3
 8014730:	f001 f8e4 	bl	80158fc <xTaskPriorityDisinherit>
 8014734:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2200      	movs	r2, #0
 801473a:	609a      	str	r2, [r3, #8]
 801473c:	e043      	b.n	80147c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d119      	bne.n	8014778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	6858      	ldr	r0, [r3, #4]
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801474c:	461a      	mov	r2, r3
 801474e:	68b9      	ldr	r1, [r7, #8]
 8014750:	f003 fc54 	bl	8017ffc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	685a      	ldr	r2, [r3, #4]
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801475c:	441a      	add	r2, r3
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	429a      	cmp	r2, r3
 801476c:	d32b      	bcc.n	80147c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	605a      	str	r2, [r3, #4]
 8014776:	e026      	b.n	80147c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	68d8      	ldr	r0, [r3, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014780:	461a      	mov	r2, r3
 8014782:	68b9      	ldr	r1, [r7, #8]
 8014784:	f003 fc3a 	bl	8017ffc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	68da      	ldr	r2, [r3, #12]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014790:	425b      	negs	r3, r3
 8014792:	441a      	add	r2, r3
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	68da      	ldr	r2, [r3, #12]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d207      	bcs.n	80147b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	689a      	ldr	r2, [r3, #8]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147ac:	425b      	negs	r3, r3
 80147ae:	441a      	add	r2, r3
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b02      	cmp	r3, #2
 80147b8:	d105      	bne.n	80147c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d002      	beq.n	80147c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	3b01      	subs	r3, #1
 80147c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	1c5a      	adds	r2, r3, #1
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80147ce:	697b      	ldr	r3, [r7, #20]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3718      	adds	r7, #24
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d018      	beq.n	801481c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	68da      	ldr	r2, [r3, #12]
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147f2:	441a      	add	r2, r3
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	68da      	ldr	r2, [r3, #12]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	689b      	ldr	r3, [r3, #8]
 8014800:	429a      	cmp	r2, r3
 8014802:	d303      	bcc.n	801480c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681a      	ldr	r2, [r3, #0]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	68d9      	ldr	r1, [r3, #12]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014814:	461a      	mov	r2, r3
 8014816:	6838      	ldr	r0, [r7, #0]
 8014818:	f003 fbf0 	bl	8017ffc <memcpy>
	}
}
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}

08014824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801482c:	f001 fdaa 	bl	8016384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014838:	e011      	b.n	801485e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483e:	2b00      	cmp	r3, #0
 8014840:	d012      	beq.n	8014868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	3324      	adds	r3, #36	; 0x24
 8014846:	4618      	mov	r0, r3
 8014848:	f000 fe3c 	bl	80154c4 <xTaskRemoveFromEventList>
 801484c:	4603      	mov	r3, r0
 801484e:	2b00      	cmp	r3, #0
 8014850:	d001      	beq.n	8014856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014852:	f000 ff17 	bl	8015684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014856:	7bfb      	ldrb	r3, [r7, #15]
 8014858:	3b01      	subs	r3, #1
 801485a:	b2db      	uxtb	r3, r3
 801485c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801485e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014862:	2b00      	cmp	r3, #0
 8014864:	dce9      	bgt.n	801483a <prvUnlockQueue+0x16>
 8014866:	e000      	b.n	801486a <prvUnlockQueue+0x46>
					break;
 8014868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	22ff      	movs	r2, #255	; 0xff
 801486e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014872:	f001 fdb7 	bl	80163e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014876:	f001 fd85 	bl	8016384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014882:	e011      	b.n	80148a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	691b      	ldr	r3, [r3, #16]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d012      	beq.n	80148b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	3310      	adds	r3, #16
 8014890:	4618      	mov	r0, r3
 8014892:	f000 fe17 	bl	80154c4 <xTaskRemoveFromEventList>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d001      	beq.n	80148a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801489c:	f000 fef2 	bl	8015684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80148a0:	7bbb      	ldrb	r3, [r7, #14]
 80148a2:	3b01      	subs	r3, #1
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	dce9      	bgt.n	8014884 <prvUnlockQueue+0x60>
 80148b0:	e000      	b.n	80148b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80148b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	22ff      	movs	r2, #255	; 0xff
 80148b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80148bc:	f001 fd92 	bl	80163e4 <vPortExitCritical>
}
 80148c0:	bf00      	nop
 80148c2:	3710      	adds	r7, #16
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148d0:	f001 fd58 	bl	8016384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d102      	bne.n	80148e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80148dc:	2301      	movs	r3, #1
 80148de:	60fb      	str	r3, [r7, #12]
 80148e0:	e001      	b.n	80148e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80148e2:	2300      	movs	r3, #0
 80148e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80148e6:	f001 fd7d 	bl	80163e4 <vPortExitCritical>

	return xReturn;
 80148ea:	68fb      	ldr	r3, [r7, #12]
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3710      	adds	r7, #16
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80148fc:	f001 fd42 	bl	8016384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014908:	429a      	cmp	r2, r3
 801490a:	d102      	bne.n	8014912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801490c:	2301      	movs	r3, #1
 801490e:	60fb      	str	r3, [r7, #12]
 8014910:	e001      	b.n	8014916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014912:	2300      	movs	r3, #0
 8014914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014916:	f001 fd65 	bl	80163e4 <vPortExitCritical>

	return xReturn;
 801491a:	68fb      	ldr	r3, [r7, #12]
}
 801491c:	4618      	mov	r0, r3
 801491e:	3710      	adds	r7, #16
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014924:	b580      	push	{r7, lr}
 8014926:	b084      	sub	sp, #16
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
 801492c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801492e:	2300      	movs	r3, #0
 8014930:	60fb      	str	r3, [r7, #12]
 8014932:	e01e      	b.n	8014972 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014934:	4a13      	ldr	r2, [pc, #76]	; (8014984 <vQueueAddToRegistry+0x60>)
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d115      	bne.n	801496c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014940:	4910      	ldr	r1, [pc, #64]	; (8014984 <vQueueAddToRegistry+0x60>)
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	683a      	ldr	r2, [r7, #0]
 8014946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801494a:	4a0e      	ldr	r2, [pc, #56]	; (8014984 <vQueueAddToRegistry+0x60>)
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	4413      	add	r3, r2
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	f003 f9af 	bl	8017cbc <SEGGER_SYSVIEW_ShrinkId>
 801495e:	4601      	mov	r1, r0
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	461a      	mov	r2, r3
 8014964:	2071      	movs	r0, #113	; 0x71
 8014966:	f002 fc9d 	bl	80172a4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 801496a:	e006      	b.n	801497a <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	3301      	adds	r3, #1
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2b07      	cmp	r3, #7
 8014976:	d9dd      	bls.n	8014934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014978:	bf00      	nop
 801497a:	bf00      	nop
 801497c:	3710      	adds	r7, #16
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	2001e898 	.word	0x2001e898

08014988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
 801498e:	60f8      	str	r0, [r7, #12]
 8014990:	60b9      	str	r1, [r7, #8]
 8014992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014998:	f001 fcf4 	bl	8016384 <vPortEnterCritical>
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80149a2:	b25b      	sxtb	r3, r3
 80149a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149a8:	d103      	bne.n	80149b2 <vQueueWaitForMessageRestricted+0x2a>
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	2200      	movs	r2, #0
 80149ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80149b8:	b25b      	sxtb	r3, r3
 80149ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149be:	d103      	bne.n	80149c8 <vQueueWaitForMessageRestricted+0x40>
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	2200      	movs	r2, #0
 80149c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149c8:	f001 fd0c 	bl	80163e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d106      	bne.n	80149e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	3324      	adds	r3, #36	; 0x24
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	68b9      	ldr	r1, [r7, #8]
 80149dc:	4618      	mov	r0, r3
 80149de:	f000 fd43 	bl	8015468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80149e2:	6978      	ldr	r0, [r7, #20]
 80149e4:	f7ff ff1e 	bl	8014824 <prvUnlockQueue>
	}
 80149e8:	bf00      	nop
 80149ea:	3718      	adds	r7, #24
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b08e      	sub	sp, #56	; 0x38
 80149f4:	af04      	add	r7, sp, #16
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	60b9      	str	r1, [r7, #8]
 80149fa:	607a      	str	r2, [r7, #4]
 80149fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d10a      	bne.n	8014a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a08:	f383 8811 	msr	BASEPRI, r3
 8014a0c:	f3bf 8f6f 	isb	sy
 8014a10:	f3bf 8f4f 	dsb	sy
 8014a14:	623b      	str	r3, [r7, #32]
}
 8014a16:	bf00      	nop
 8014a18:	e7fe      	b.n	8014a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d10a      	bne.n	8014a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8014a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a24:	f383 8811 	msr	BASEPRI, r3
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	f3bf 8f4f 	dsb	sy
 8014a30:	61fb      	str	r3, [r7, #28]
}
 8014a32:	bf00      	nop
 8014a34:	e7fe      	b.n	8014a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a36:	23cc      	movs	r3, #204	; 0xcc
 8014a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a3a:	693b      	ldr	r3, [r7, #16]
 8014a3c:	2bcc      	cmp	r3, #204	; 0xcc
 8014a3e:	d00a      	beq.n	8014a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8014a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a44:	f383 8811 	msr	BASEPRI, r3
 8014a48:	f3bf 8f6f 	isb	sy
 8014a4c:	f3bf 8f4f 	dsb	sy
 8014a50:	61bb      	str	r3, [r7, #24]
}
 8014a52:	bf00      	nop
 8014a54:	e7fe      	b.n	8014a54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d01e      	beq.n	8014a9c <xTaskCreateStatic+0xac>
 8014a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d01b      	beq.n	8014a9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a70:	2202      	movs	r2, #2
 8014a72:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a76:	2300      	movs	r3, #0
 8014a78:	9303      	str	r3, [sp, #12]
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	9302      	str	r3, [sp, #8]
 8014a7e:	f107 0314 	add.w	r3, r7, #20
 8014a82:	9301      	str	r3, [sp, #4]
 8014a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a86:	9300      	str	r3, [sp, #0]
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	68b9      	ldr	r1, [r7, #8]
 8014a8e:	68f8      	ldr	r0, [r7, #12]
 8014a90:	f000 f850 	bl	8014b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a96:	f000 f8f3 	bl	8014c80 <prvAddNewTaskToReadyList>
 8014a9a:	e001      	b.n	8014aa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014aa0:	697b      	ldr	r3, [r7, #20]
	}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3728      	adds	r7, #40	; 0x28
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b08c      	sub	sp, #48	; 0x30
 8014aae:	af04      	add	r7, sp, #16
 8014ab0:	60f8      	str	r0, [r7, #12]
 8014ab2:	60b9      	str	r1, [r7, #8]
 8014ab4:	603b      	str	r3, [r7, #0]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014aba:	88fb      	ldrh	r3, [r7, #6]
 8014abc:	009b      	lsls	r3, r3, #2
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f001 fd82 	bl	80165c8 <pvPortMalloc>
 8014ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00e      	beq.n	8014aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014acc:	20cc      	movs	r0, #204	; 0xcc
 8014ace:	f001 fd7b 	bl	80165c8 <pvPortMalloc>
 8014ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d003      	beq.n	8014ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	697a      	ldr	r2, [r7, #20]
 8014ade:	631a      	str	r2, [r3, #48]	; 0x30
 8014ae0:	e005      	b.n	8014aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ae2:	6978      	ldr	r0, [r7, #20]
 8014ae4:	f001 fe3c 	bl	8016760 <vPortFree>
 8014ae8:	e001      	b.n	8014aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d017      	beq.n	8014b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	2200      	movs	r2, #0
 8014af8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014afc:	88fa      	ldrh	r2, [r7, #6]
 8014afe:	2300      	movs	r3, #0
 8014b00:	9303      	str	r3, [sp, #12]
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	9302      	str	r3, [sp, #8]
 8014b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b08:	9301      	str	r3, [sp, #4]
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	9300      	str	r3, [sp, #0]
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	68b9      	ldr	r1, [r7, #8]
 8014b12:	68f8      	ldr	r0, [r7, #12]
 8014b14:	f000 f80e 	bl	8014b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b18:	69f8      	ldr	r0, [r7, #28]
 8014b1a:	f000 f8b1 	bl	8014c80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014b1e:	2301      	movs	r3, #1
 8014b20:	61bb      	str	r3, [r7, #24]
 8014b22:	e002      	b.n	8014b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b24:	f04f 33ff 	mov.w	r3, #4294967295
 8014b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3720      	adds	r7, #32
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b088      	sub	sp, #32
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
 8014b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	461a      	mov	r2, r3
 8014b4c:	21a5      	movs	r1, #165	; 0xa5
 8014b4e:	f003 fa63 	bl	8018018 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014b5c:	3b01      	subs	r3, #1
 8014b5e:	009b      	lsls	r3, r3, #2
 8014b60:	4413      	add	r3, r2
 8014b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	f023 0307 	bic.w	r3, r3, #7
 8014b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	f003 0307 	and.w	r3, r3, #7
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d00a      	beq.n	8014b8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7a:	f383 8811 	msr	BASEPRI, r3
 8014b7e:	f3bf 8f6f 	isb	sy
 8014b82:	f3bf 8f4f 	dsb	sy
 8014b86:	617b      	str	r3, [r7, #20]
}
 8014b88:	bf00      	nop
 8014b8a:	e7fe      	b.n	8014b8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d01f      	beq.n	8014bd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b92:	2300      	movs	r3, #0
 8014b94:	61fb      	str	r3, [r7, #28]
 8014b96:	e012      	b.n	8014bbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b98:	68ba      	ldr	r2, [r7, #8]
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	7819      	ldrb	r1, [r3, #0]
 8014ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	3334      	adds	r3, #52	; 0x34
 8014ba8:	460a      	mov	r2, r1
 8014baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014bac:	68ba      	ldr	r2, [r7, #8]
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d006      	beq.n	8014bc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	61fb      	str	r3, [r7, #28]
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	2b1f      	cmp	r3, #31
 8014bc2:	d9e9      	bls.n	8014b98 <prvInitialiseNewTask+0x64>
 8014bc4:	e000      	b.n	8014bc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8014bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bca:	2200      	movs	r2, #0
 8014bcc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8014bd0:	e003      	b.n	8014bda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bdc:	2b37      	cmp	r3, #55	; 0x37
 8014bde:	d901      	bls.n	8014be4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014be0:	2337      	movs	r3, #55	; 0x37
 8014be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bee:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8014bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf8:	3304      	adds	r3, #4
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fe ffd0 	bl	8013ba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c02:	3318      	adds	r3, #24
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7fe ffcb 	bl	8013ba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c22:	2200      	movs	r2, #0
 8014c24:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c32:	3364      	adds	r3, #100	; 0x64
 8014c34:	2260      	movs	r2, #96	; 0x60
 8014c36:	2100      	movs	r1, #0
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f003 f9ed 	bl	8018018 <memset>
 8014c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c40:	4a0c      	ldr	r2, [pc, #48]	; (8014c74 <prvInitialiseNewTask+0x140>)
 8014c42:	669a      	str	r2, [r3, #104]	; 0x68
 8014c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c46:	4a0c      	ldr	r2, [pc, #48]	; (8014c78 <prvInitialiseNewTask+0x144>)
 8014c48:	66da      	str	r2, [r3, #108]	; 0x6c
 8014c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4c:	4a0b      	ldr	r2, [pc, #44]	; (8014c7c <prvInitialiseNewTask+0x148>)
 8014c4e:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c50:	683a      	ldr	r2, [r7, #0]
 8014c52:	68f9      	ldr	r1, [r7, #12]
 8014c54:	69b8      	ldr	r0, [r7, #24]
 8014c56:	f001 fa69 	bl	801612c <pxPortInitialiseStack>
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d002      	beq.n	8014c6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c6c:	bf00      	nop
 8014c6e:	3720      	adds	r7, #32
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	08018f8c 	.word	0x08018f8c
 8014c78:	08018fac 	.word	0x08018fac
 8014c7c:	08018f6c 	.word	0x08018f6c

08014c80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c80:	b5b0      	push	{r4, r5, r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af02      	add	r7, sp, #8
 8014c86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c88:	f001 fb7c 	bl	8016384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c8c:	4b3c      	ldr	r3, [pc, #240]	; (8014d80 <prvAddNewTaskToReadyList+0x100>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	3301      	adds	r3, #1
 8014c92:	4a3b      	ldr	r2, [pc, #236]	; (8014d80 <prvAddNewTaskToReadyList+0x100>)
 8014c94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c96:	4b3b      	ldr	r3, [pc, #236]	; (8014d84 <prvAddNewTaskToReadyList+0x104>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d109      	bne.n	8014cb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c9e:	4a39      	ldr	r2, [pc, #228]	; (8014d84 <prvAddNewTaskToReadyList+0x104>)
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014ca4:	4b36      	ldr	r3, [pc, #216]	; (8014d80 <prvAddNewTaskToReadyList+0x100>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d110      	bne.n	8014cce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014cac:	f000 fd0e 	bl	80156cc <prvInitialiseTaskLists>
 8014cb0:	e00d      	b.n	8014cce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014cb2:	4b35      	ldr	r3, [pc, #212]	; (8014d88 <prvAddNewTaskToReadyList+0x108>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d109      	bne.n	8014cce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014cba:	4b32      	ldr	r3, [pc, #200]	; (8014d84 <prvAddNewTaskToReadyList+0x104>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d802      	bhi.n	8014cce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014cc8:	4a2e      	ldr	r2, [pc, #184]	; (8014d84 <prvAddNewTaskToReadyList+0x104>)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014cce:	4b2f      	ldr	r3, [pc, #188]	; (8014d8c <prvAddNewTaskToReadyList+0x10c>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	4a2d      	ldr	r2, [pc, #180]	; (8014d8c <prvAddNewTaskToReadyList+0x10c>)
 8014cd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014cd8:	4b2c      	ldr	r3, [pc, #176]	; (8014d8c <prvAddNewTaskToReadyList+0x10c>)
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d016      	beq.n	8014d14 <prvAddNewTaskToReadyList+0x94>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f002 ff21 	bl	8017b30 <SEGGER_SYSVIEW_OnTaskCreate>
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cfe:	461d      	mov	r5, r3
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	461c      	mov	r4, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d0a:	1ae3      	subs	r3, r4, r3
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	462b      	mov	r3, r5
 8014d10:	f7ec fcd6 	bl	80016c0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	4618      	mov	r0, r3
 8014d18:	f002 ff8e 	bl	8017c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d20:	4b1b      	ldr	r3, [pc, #108]	; (8014d90 <prvAddNewTaskToReadyList+0x110>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d903      	bls.n	8014d30 <prvAddNewTaskToReadyList+0xb0>
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d2c:	4a18      	ldr	r2, [pc, #96]	; (8014d90 <prvAddNewTaskToReadyList+0x110>)
 8014d2e:	6013      	str	r3, [r2, #0]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d34:	4613      	mov	r3, r2
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	4413      	add	r3, r2
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	4a15      	ldr	r2, [pc, #84]	; (8014d94 <prvAddNewTaskToReadyList+0x114>)
 8014d3e:	441a      	add	r2, r3
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	3304      	adds	r3, #4
 8014d44:	4619      	mov	r1, r3
 8014d46:	4610      	mov	r0, r2
 8014d48:	f7fe ff37 	bl	8013bba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014d4c:	f001 fb4a 	bl	80163e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d50:	4b0d      	ldr	r3, [pc, #52]	; (8014d88 <prvAddNewTaskToReadyList+0x108>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00e      	beq.n	8014d76 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014d58:	4b0a      	ldr	r3, [pc, #40]	; (8014d84 <prvAddNewTaskToReadyList+0x104>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d207      	bcs.n	8014d76 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014d66:	4b0c      	ldr	r3, [pc, #48]	; (8014d98 <prvAddNewTaskToReadyList+0x118>)
 8014d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d6c:	601a      	str	r2, [r3, #0]
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d76:	bf00      	nop
 8014d78:	3708      	adds	r7, #8
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	20002418 	.word	0x20002418
 8014d84:	20001f44 	.word	0x20001f44
 8014d88:	20002424 	.word	0x20002424
 8014d8c:	20002434 	.word	0x20002434
 8014d90:	20002420 	.word	0x20002420
 8014d94:	20001f48 	.word	0x20001f48
 8014d98:	e000ed04 	.word	0xe000ed04

08014d9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b08a      	sub	sp, #40	; 0x28
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014da6:	2300      	movs	r3, #0
 8014da8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d10a      	bne.n	8014dc6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8014db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db4:	f383 8811 	msr	BASEPRI, r3
 8014db8:	f3bf 8f6f 	isb	sy
 8014dbc:	f3bf 8f4f 	dsb	sy
 8014dc0:	617b      	str	r3, [r7, #20]
}
 8014dc2:	bf00      	nop
 8014dc4:	e7fe      	b.n	8014dc4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10a      	bne.n	8014de2 <vTaskDelayUntil+0x46>
	__asm volatile
 8014dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd0:	f383 8811 	msr	BASEPRI, r3
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	613b      	str	r3, [r7, #16]
}
 8014dde:	bf00      	nop
 8014de0:	e7fe      	b.n	8014de0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8014de2:	4b2b      	ldr	r3, [pc, #172]	; (8014e90 <vTaskDelayUntil+0xf4>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00a      	beq.n	8014e00 <vTaskDelayUntil+0x64>
	__asm volatile
 8014dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dee:	f383 8811 	msr	BASEPRI, r3
 8014df2:	f3bf 8f6f 	isb	sy
 8014df6:	f3bf 8f4f 	dsb	sy
 8014dfa:	60fb      	str	r3, [r7, #12]
}
 8014dfc:	bf00      	nop
 8014dfe:	e7fe      	b.n	8014dfe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8014e00:	f000 f906 	bl	8015010 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014e04:	4b23      	ldr	r3, [pc, #140]	; (8014e94 <vTaskDelayUntil+0xf8>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	683a      	ldr	r2, [r7, #0]
 8014e10:	4413      	add	r3, r2
 8014e12:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	6a3a      	ldr	r2, [r7, #32]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d20b      	bcs.n	8014e36 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	69fa      	ldr	r2, [r7, #28]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d211      	bcs.n	8014e4c <vTaskDelayUntil+0xb0>
 8014e28:	69fa      	ldr	r2, [r7, #28]
 8014e2a:	6a3b      	ldr	r3, [r7, #32]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d90d      	bls.n	8014e4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8014e30:	2301      	movs	r3, #1
 8014e32:	627b      	str	r3, [r7, #36]	; 0x24
 8014e34:	e00a      	b.n	8014e4c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	69fa      	ldr	r2, [r7, #28]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d303      	bcc.n	8014e48 <vTaskDelayUntil+0xac>
 8014e40:	69fa      	ldr	r2, [r7, #28]
 8014e42:	6a3b      	ldr	r3, [r7, #32]
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d901      	bls.n	8014e4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8014e48:	2301      	movs	r3, #1
 8014e4a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	69fa      	ldr	r2, [r7, #28]
 8014e50:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d009      	beq.n	8014e6c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 8014e58:	2024      	movs	r0, #36	; 0x24
 8014e5a:	f002 f9c9 	bl	80171f0 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8014e5e:	69fa      	ldr	r2, [r7, #28]
 8014e60:	6a3b      	ldr	r3, [r7, #32]
 8014e62:	1ad3      	subs	r3, r2, r3
 8014e64:	2100      	movs	r1, #0
 8014e66:	4618      	mov	r0, r3
 8014e68:	f000 fdbe 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8014e6c:	f000 f8de 	bl	801502c <xTaskResumeAll>
 8014e70:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014e72:	69bb      	ldr	r3, [r7, #24]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d107      	bne.n	8014e88 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8014e78:	4b07      	ldr	r3, [pc, #28]	; (8014e98 <vTaskDelayUntil+0xfc>)
 8014e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e7e:	601a      	str	r2, [r3, #0]
 8014e80:	f3bf 8f4f 	dsb	sy
 8014e84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e88:	bf00      	nop
 8014e8a:	3728      	adds	r7, #40	; 0x28
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	20002440 	.word	0x20002440
 8014e94:	2000241c 	.word	0x2000241c
 8014e98:	e000ed04 	.word	0xe000ed04

08014e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d01b      	beq.n	8014ee6 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014eae:	4b15      	ldr	r3, [pc, #84]	; (8014f04 <vTaskDelay+0x68>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d00a      	beq.n	8014ecc <vTaskDelay+0x30>
	__asm volatile
 8014eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eba:	f383 8811 	msr	BASEPRI, r3
 8014ebe:	f3bf 8f6f 	isb	sy
 8014ec2:	f3bf 8f4f 	dsb	sy
 8014ec6:	60bb      	str	r3, [r7, #8]
}
 8014ec8:	bf00      	nop
 8014eca:	e7fe      	b.n	8014eca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014ecc:	f000 f8a0 	bl	8015010 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8014ed0:	6879      	ldr	r1, [r7, #4]
 8014ed2:	2023      	movs	r0, #35	; 0x23
 8014ed4:	f002 f9aa 	bl	801722c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014ed8:	2100      	movs	r1, #0
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f000 fd84 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014ee0:	f000 f8a4 	bl	801502c <xTaskResumeAll>
 8014ee4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d107      	bne.n	8014efc <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8014eec:	4b06      	ldr	r3, [pc, #24]	; (8014f08 <vTaskDelay+0x6c>)
 8014eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014efc:	bf00      	nop
 8014efe:	3710      	adds	r7, #16
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	20002440 	.word	0x20002440
 8014f08:	e000ed04 	.word	0xe000ed04

08014f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b08a      	sub	sp, #40	; 0x28
 8014f10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014f16:	2300      	movs	r3, #0
 8014f18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014f1a:	463a      	mov	r2, r7
 8014f1c:	1d39      	adds	r1, r7, #4
 8014f1e:	f107 0308 	add.w	r3, r7, #8
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fe fde8 	bl	8013af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014f28:	6839      	ldr	r1, [r7, #0]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	68ba      	ldr	r2, [r7, #8]
 8014f2e:	9202      	str	r2, [sp, #8]
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	2300      	movs	r3, #0
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	2300      	movs	r3, #0
 8014f38:	460a      	mov	r2, r1
 8014f3a:	492d      	ldr	r1, [pc, #180]	; (8014ff0 <vTaskStartScheduler+0xe4>)
 8014f3c:	482d      	ldr	r0, [pc, #180]	; (8014ff4 <vTaskStartScheduler+0xe8>)
 8014f3e:	f7ff fd57 	bl	80149f0 <xTaskCreateStatic>
 8014f42:	4603      	mov	r3, r0
 8014f44:	4a2c      	ldr	r2, [pc, #176]	; (8014ff8 <vTaskStartScheduler+0xec>)
 8014f46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014f48:	4b2b      	ldr	r3, [pc, #172]	; (8014ff8 <vTaskStartScheduler+0xec>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d002      	beq.n	8014f56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014f50:	2301      	movs	r3, #1
 8014f52:	617b      	str	r3, [r7, #20]
 8014f54:	e001      	b.n	8014f5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014f56:	2300      	movs	r3, #0
 8014f58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d102      	bne.n	8014f66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014f60:	f000 fd96 	bl	8015a90 <xTimerCreateTimerTask>
 8014f64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	d12e      	bne.n	8014fca <vTaskStartScheduler+0xbe>
	__asm volatile
 8014f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f70:	f383 8811 	msr	BASEPRI, r3
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	f3bf 8f4f 	dsb	sy
 8014f7c:	613b      	str	r3, [r7, #16]
}
 8014f7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014f80:	4b1e      	ldr	r3, [pc, #120]	; (8014ffc <vTaskStartScheduler+0xf0>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	3364      	adds	r3, #100	; 0x64
 8014f86:	4a1e      	ldr	r2, [pc, #120]	; (8015000 <vTaskStartScheduler+0xf4>)
 8014f88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014f8a:	4b1e      	ldr	r3, [pc, #120]	; (8015004 <vTaskStartScheduler+0xf8>)
 8014f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014f92:	4b1d      	ldr	r3, [pc, #116]	; (8015008 <vTaskStartScheduler+0xfc>)
 8014f94:	2201      	movs	r2, #1
 8014f96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014f98:	4b1c      	ldr	r3, [pc, #112]	; (801500c <vTaskStartScheduler+0x100>)
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8014f9e:	4b17      	ldr	r3, [pc, #92]	; (8014ffc <vTaskStartScheduler+0xf0>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	3334      	adds	r3, #52	; 0x34
 8014fa4:	2205      	movs	r2, #5
 8014fa6:	4912      	ldr	r1, [pc, #72]	; (8014ff0 <vTaskStartScheduler+0xe4>)
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f003 f819 	bl	8017fe0 <memcmp>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d005      	beq.n	8014fc0 <vTaskStartScheduler+0xb4>
 8014fb4:	4b11      	ldr	r3, [pc, #68]	; (8014ffc <vTaskStartScheduler+0xf0>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f002 fdfb 	bl	8017bb4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8014fbe:	e001      	b.n	8014fc4 <vTaskStartScheduler+0xb8>
 8014fc0:	f002 fd9a 	bl	8017af8 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014fc4:	f001 f93c 	bl	8016240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014fc8:	e00e      	b.n	8014fe8 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd0:	d10a      	bne.n	8014fe8 <vTaskStartScheduler+0xdc>
	__asm volatile
 8014fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd6:	f383 8811 	msr	BASEPRI, r3
 8014fda:	f3bf 8f6f 	isb	sy
 8014fde:	f3bf 8f4f 	dsb	sy
 8014fe2:	60fb      	str	r3, [r7, #12]
}
 8014fe4:	bf00      	nop
 8014fe6:	e7fe      	b.n	8014fe6 <vTaskStartScheduler+0xda>
}
 8014fe8:	bf00      	nop
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	08018d30 	.word	0x08018d30
 8014ff4:	0801569d 	.word	0x0801569d
 8014ff8:	2000243c 	.word	0x2000243c
 8014ffc:	20001f44 	.word	0x20001f44
 8015000:	20001444 	.word	0x20001444
 8015004:	20002438 	.word	0x20002438
 8015008:	20002424 	.word	0x20002424
 801500c:	2000241c 	.word	0x2000241c

08015010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015010:	b480      	push	{r7}
 8015012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015014:	4b04      	ldr	r3, [pc, #16]	; (8015028 <vTaskSuspendAll+0x18>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	3301      	adds	r3, #1
 801501a:	4a03      	ldr	r2, [pc, #12]	; (8015028 <vTaskSuspendAll+0x18>)
 801501c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801501e:	bf00      	nop
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr
 8015028:	20002440 	.word	0x20002440

0801502c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015032:	2300      	movs	r3, #0
 8015034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015036:	2300      	movs	r3, #0
 8015038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801503a:	4b44      	ldr	r3, [pc, #272]	; (801514c <xTaskResumeAll+0x120>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d10a      	bne.n	8015058 <xTaskResumeAll+0x2c>
	__asm volatile
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	603b      	str	r3, [r7, #0]
}
 8015054:	bf00      	nop
 8015056:	e7fe      	b.n	8015056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015058:	f001 f994 	bl	8016384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801505c:	4b3b      	ldr	r3, [pc, #236]	; (801514c <xTaskResumeAll+0x120>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	3b01      	subs	r3, #1
 8015062:	4a3a      	ldr	r2, [pc, #232]	; (801514c <xTaskResumeAll+0x120>)
 8015064:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015066:	4b39      	ldr	r3, [pc, #228]	; (801514c <xTaskResumeAll+0x120>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d166      	bne.n	801513c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801506e:	4b38      	ldr	r3, [pc, #224]	; (8015150 <xTaskResumeAll+0x124>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d062      	beq.n	801513c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015076:	e033      	b.n	80150e0 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015078:	4b36      	ldr	r3, [pc, #216]	; (8015154 <xTaskResumeAll+0x128>)
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	3318      	adds	r3, #24
 8015084:	4618      	mov	r0, r3
 8015086:	f7fe fdf5 	bl	8013c74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	3304      	adds	r3, #4
 801508e:	4618      	mov	r0, r3
 8015090:	f7fe fdf0 	bl	8013c74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	4618      	mov	r0, r3
 8015098:	f002 fdce 	bl	8017c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a0:	4b2d      	ldr	r3, [pc, #180]	; (8015158 <xTaskResumeAll+0x12c>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d903      	bls.n	80150b0 <xTaskResumeAll+0x84>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ac:	4a2a      	ldr	r2, [pc, #168]	; (8015158 <xTaskResumeAll+0x12c>)
 80150ae:	6013      	str	r3, [r2, #0]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b4:	4613      	mov	r3, r2
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	4413      	add	r3, r2
 80150ba:	009b      	lsls	r3, r3, #2
 80150bc:	4a27      	ldr	r2, [pc, #156]	; (801515c <xTaskResumeAll+0x130>)
 80150be:	441a      	add	r2, r3
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	3304      	adds	r3, #4
 80150c4:	4619      	mov	r1, r3
 80150c6:	4610      	mov	r0, r2
 80150c8:	f7fe fd77 	bl	8013bba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150d0:	4b23      	ldr	r3, [pc, #140]	; (8015160 <xTaskResumeAll+0x134>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d302      	bcc.n	80150e0 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 80150da:	4b22      	ldr	r3, [pc, #136]	; (8015164 <xTaskResumeAll+0x138>)
 80150dc:	2201      	movs	r2, #1
 80150de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150e0:	4b1c      	ldr	r3, [pc, #112]	; (8015154 <xTaskResumeAll+0x128>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d1c7      	bne.n	8015078 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d001      	beq.n	80150f2 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80150ee:	f000 fbc7 	bl	8015880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80150f2:	4b1d      	ldr	r3, [pc, #116]	; (8015168 <xTaskResumeAll+0x13c>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d010      	beq.n	8015120 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80150fe:	f000 f859 	bl	80151b4 <xTaskIncrementTick>
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d002      	beq.n	801510e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8015108:	4b16      	ldr	r3, [pc, #88]	; (8015164 <xTaskResumeAll+0x138>)
 801510a:	2201      	movs	r2, #1
 801510c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	3b01      	subs	r3, #1
 8015112:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d1f1      	bne.n	80150fe <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 801511a:	4b13      	ldr	r3, [pc, #76]	; (8015168 <xTaskResumeAll+0x13c>)
 801511c:	2200      	movs	r2, #0
 801511e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015120:	4b10      	ldr	r3, [pc, #64]	; (8015164 <xTaskResumeAll+0x138>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d009      	beq.n	801513c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015128:	2301      	movs	r3, #1
 801512a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801512c:	4b0f      	ldr	r3, [pc, #60]	; (801516c <xTaskResumeAll+0x140>)
 801512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	f3bf 8f4f 	dsb	sy
 8015138:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801513c:	f001 f952 	bl	80163e4 <vPortExitCritical>

	return xAlreadyYielded;
 8015140:	68bb      	ldr	r3, [r7, #8]
}
 8015142:	4618      	mov	r0, r3
 8015144:	3710      	adds	r7, #16
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	20002440 	.word	0x20002440
 8015150:	20002418 	.word	0x20002418
 8015154:	200023d8 	.word	0x200023d8
 8015158:	20002420 	.word	0x20002420
 801515c:	20001f48 	.word	0x20001f48
 8015160:	20001f44 	.word	0x20001f44
 8015164:	2000242c 	.word	0x2000242c
 8015168:	20002428 	.word	0x20002428
 801516c:	e000ed04 	.word	0xe000ed04

08015170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015176:	4b05      	ldr	r3, [pc, #20]	; (801518c <xTaskGetTickCount+0x1c>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801517c:	687b      	ldr	r3, [r7, #4]
}
 801517e:	4618      	mov	r0, r3
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr
 801518a:	bf00      	nop
 801518c:	2000241c 	.word	0x2000241c

08015190 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015196:	f001 f9d7 	bl	8016548 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801519a:	2300      	movs	r3, #0
 801519c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801519e:	4b04      	ldr	r3, [pc, #16]	; (80151b0 <xTaskGetTickCountFromISR+0x20>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80151a4:	683b      	ldr	r3, [r7, #0]
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3708      	adds	r7, #8
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	2000241c 	.word	0x2000241c

080151b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80151ba:	2300      	movs	r3, #0
 80151bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151be:	4b51      	ldr	r3, [pc, #324]	; (8015304 <xTaskIncrementTick+0x150>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f040 8093 	bne.w	80152ee <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80151c8:	4b4f      	ldr	r3, [pc, #316]	; (8015308 <xTaskIncrementTick+0x154>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	3301      	adds	r3, #1
 80151ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80151d0:	4a4d      	ldr	r2, [pc, #308]	; (8015308 <xTaskIncrementTick+0x154>)
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d120      	bne.n	801521e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80151dc:	4b4b      	ldr	r3, [pc, #300]	; (801530c <xTaskIncrementTick+0x158>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d00a      	beq.n	80151fc <xTaskIncrementTick+0x48>
	__asm volatile
 80151e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ea:	f383 8811 	msr	BASEPRI, r3
 80151ee:	f3bf 8f6f 	isb	sy
 80151f2:	f3bf 8f4f 	dsb	sy
 80151f6:	603b      	str	r3, [r7, #0]
}
 80151f8:	bf00      	nop
 80151fa:	e7fe      	b.n	80151fa <xTaskIncrementTick+0x46>
 80151fc:	4b43      	ldr	r3, [pc, #268]	; (801530c <xTaskIncrementTick+0x158>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	60fb      	str	r3, [r7, #12]
 8015202:	4b43      	ldr	r3, [pc, #268]	; (8015310 <xTaskIncrementTick+0x15c>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	4a41      	ldr	r2, [pc, #260]	; (801530c <xTaskIncrementTick+0x158>)
 8015208:	6013      	str	r3, [r2, #0]
 801520a:	4a41      	ldr	r2, [pc, #260]	; (8015310 <xTaskIncrementTick+0x15c>)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	6013      	str	r3, [r2, #0]
 8015210:	4b40      	ldr	r3, [pc, #256]	; (8015314 <xTaskIncrementTick+0x160>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	3301      	adds	r3, #1
 8015216:	4a3f      	ldr	r2, [pc, #252]	; (8015314 <xTaskIncrementTick+0x160>)
 8015218:	6013      	str	r3, [r2, #0]
 801521a:	f000 fb31 	bl	8015880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801521e:	4b3e      	ldr	r3, [pc, #248]	; (8015318 <xTaskIncrementTick+0x164>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	693a      	ldr	r2, [r7, #16]
 8015224:	429a      	cmp	r2, r3
 8015226:	d34d      	bcc.n	80152c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015228:	4b38      	ldr	r3, [pc, #224]	; (801530c <xTaskIncrementTick+0x158>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d104      	bne.n	801523c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015232:	4b39      	ldr	r3, [pc, #228]	; (8015318 <xTaskIncrementTick+0x164>)
 8015234:	f04f 32ff 	mov.w	r2, #4294967295
 8015238:	601a      	str	r2, [r3, #0]
					break;
 801523a:	e043      	b.n	80152c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801523c:	4b33      	ldr	r3, [pc, #204]	; (801530c <xTaskIncrementTick+0x158>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	68db      	ldr	r3, [r3, #12]
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801524c:	693a      	ldr	r2, [r7, #16]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	429a      	cmp	r2, r3
 8015252:	d203      	bcs.n	801525c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015254:	4a30      	ldr	r2, [pc, #192]	; (8015318 <xTaskIncrementTick+0x164>)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801525a:	e033      	b.n	80152c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	3304      	adds	r3, #4
 8015260:	4618      	mov	r0, r3
 8015262:	f7fe fd07 	bl	8013c74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801526a:	2b00      	cmp	r3, #0
 801526c:	d004      	beq.n	8015278 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	3318      	adds	r3, #24
 8015272:	4618      	mov	r0, r3
 8015274:	f7fe fcfe 	bl	8013c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	4618      	mov	r0, r3
 801527c:	f002 fcdc 	bl	8017c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015284:	4b25      	ldr	r3, [pc, #148]	; (801531c <xTaskIncrementTick+0x168>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	429a      	cmp	r2, r3
 801528a:	d903      	bls.n	8015294 <xTaskIncrementTick+0xe0>
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015290:	4a22      	ldr	r2, [pc, #136]	; (801531c <xTaskIncrementTick+0x168>)
 8015292:	6013      	str	r3, [r2, #0]
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015298:	4613      	mov	r3, r2
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	4413      	add	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4a1f      	ldr	r2, [pc, #124]	; (8015320 <xTaskIncrementTick+0x16c>)
 80152a2:	441a      	add	r2, r3
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	3304      	adds	r3, #4
 80152a8:	4619      	mov	r1, r3
 80152aa:	4610      	mov	r0, r2
 80152ac:	f7fe fc85 	bl	8013bba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b4:	4b1b      	ldr	r3, [pc, #108]	; (8015324 <xTaskIncrementTick+0x170>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d3b4      	bcc.n	8015228 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80152be:	2301      	movs	r3, #1
 80152c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152c2:	e7b1      	b.n	8015228 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80152c4:	4b17      	ldr	r3, [pc, #92]	; (8015324 <xTaskIncrementTick+0x170>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ca:	4915      	ldr	r1, [pc, #84]	; (8015320 <xTaskIncrementTick+0x16c>)
 80152cc:	4613      	mov	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4413      	add	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	440b      	add	r3, r1
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d901      	bls.n	80152e0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80152dc:	2301      	movs	r3, #1
 80152de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80152e0:	4b11      	ldr	r3, [pc, #68]	; (8015328 <xTaskIncrementTick+0x174>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d007      	beq.n	80152f8 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 80152e8:	2301      	movs	r3, #1
 80152ea:	617b      	str	r3, [r7, #20]
 80152ec:	e004      	b.n	80152f8 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80152ee:	4b0f      	ldr	r3, [pc, #60]	; (801532c <xTaskIncrementTick+0x178>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	3301      	adds	r3, #1
 80152f4:	4a0d      	ldr	r2, [pc, #52]	; (801532c <xTaskIncrementTick+0x178>)
 80152f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80152f8:	697b      	ldr	r3, [r7, #20]
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3718      	adds	r7, #24
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	20002440 	.word	0x20002440
 8015308:	2000241c 	.word	0x2000241c
 801530c:	200023d0 	.word	0x200023d0
 8015310:	200023d4 	.word	0x200023d4
 8015314:	20002430 	.word	0x20002430
 8015318:	20002438 	.word	0x20002438
 801531c:	20002420 	.word	0x20002420
 8015320:	20001f48 	.word	0x20001f48
 8015324:	20001f44 	.word	0x20001f44
 8015328:	2000242c 	.word	0x2000242c
 801532c:	20002428 	.word	0x20002428

08015330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015336:	4b33      	ldr	r3, [pc, #204]	; (8015404 <vTaskSwitchContext+0xd4>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d003      	beq.n	8015346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801533e:	4b32      	ldr	r3, [pc, #200]	; (8015408 <vTaskSwitchContext+0xd8>)
 8015340:	2201      	movs	r2, #1
 8015342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015344:	e059      	b.n	80153fa <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8015346:	4b30      	ldr	r3, [pc, #192]	; (8015408 <vTaskSwitchContext+0xd8>)
 8015348:	2200      	movs	r2, #0
 801534a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801534c:	4b2f      	ldr	r3, [pc, #188]	; (801540c <vTaskSwitchContext+0xdc>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	60fb      	str	r3, [r7, #12]
 8015352:	e010      	b.n	8015376 <vTaskSwitchContext+0x46>
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d10a      	bne.n	8015370 <vTaskSwitchContext+0x40>
	__asm volatile
 801535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801535e:	f383 8811 	msr	BASEPRI, r3
 8015362:	f3bf 8f6f 	isb	sy
 8015366:	f3bf 8f4f 	dsb	sy
 801536a:	607b      	str	r3, [r7, #4]
}
 801536c:	bf00      	nop
 801536e:	e7fe      	b.n	801536e <vTaskSwitchContext+0x3e>
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	3b01      	subs	r3, #1
 8015374:	60fb      	str	r3, [r7, #12]
 8015376:	4926      	ldr	r1, [pc, #152]	; (8015410 <vTaskSwitchContext+0xe0>)
 8015378:	68fa      	ldr	r2, [r7, #12]
 801537a:	4613      	mov	r3, r2
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	4413      	add	r3, r2
 8015380:	009b      	lsls	r3, r3, #2
 8015382:	440b      	add	r3, r1
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d0e4      	beq.n	8015354 <vTaskSwitchContext+0x24>
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	4613      	mov	r3, r2
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	4413      	add	r3, r2
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	4a1e      	ldr	r2, [pc, #120]	; (8015410 <vTaskSwitchContext+0xe0>)
 8015396:	4413      	add	r3, r2
 8015398:	60bb      	str	r3, [r7, #8]
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	685a      	ldr	r2, [r3, #4]
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	605a      	str	r2, [r3, #4]
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	685a      	ldr	r2, [r3, #4]
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	3308      	adds	r3, #8
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d104      	bne.n	80153ba <vTaskSwitchContext+0x8a>
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	685b      	ldr	r3, [r3, #4]
 80153b4:	685a      	ldr	r2, [r3, #4]
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	605a      	str	r2, [r3, #4]
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	4a14      	ldr	r2, [pc, #80]	; (8015414 <vTaskSwitchContext+0xe4>)
 80153c2:	6013      	str	r3, [r2, #0]
 80153c4:	4a11      	ldr	r2, [pc, #68]	; (801540c <vTaskSwitchContext+0xdc>)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80153ca:	4b12      	ldr	r3, [pc, #72]	; (8015414 <vTaskSwitchContext+0xe4>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	3334      	adds	r3, #52	; 0x34
 80153d0:	2205      	movs	r2, #5
 80153d2:	4911      	ldr	r1, [pc, #68]	; (8015418 <vTaskSwitchContext+0xe8>)
 80153d4:	4618      	mov	r0, r3
 80153d6:	f002 fe03 	bl	8017fe0 <memcmp>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d005      	beq.n	80153ec <vTaskSwitchContext+0xbc>
 80153e0:	4b0c      	ldr	r3, [pc, #48]	; (8015414 <vTaskSwitchContext+0xe4>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f002 fbe5 	bl	8017bb4 <SEGGER_SYSVIEW_OnTaskStartExec>
 80153ea:	e001      	b.n	80153f0 <vTaskSwitchContext+0xc0>
 80153ec:	f002 fb84 	bl	8017af8 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80153f0:	4b08      	ldr	r3, [pc, #32]	; (8015414 <vTaskSwitchContext+0xe4>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	3364      	adds	r3, #100	; 0x64
 80153f6:	4a09      	ldr	r2, [pc, #36]	; (801541c <vTaskSwitchContext+0xec>)
 80153f8:	6013      	str	r3, [r2, #0]
}
 80153fa:	bf00      	nop
 80153fc:	3710      	adds	r7, #16
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
 8015402:	bf00      	nop
 8015404:	20002440 	.word	0x20002440
 8015408:	2000242c 	.word	0x2000242c
 801540c:	20002420 	.word	0x20002420
 8015410:	20001f48 	.word	0x20001f48
 8015414:	20001f44 	.word	0x20001f44
 8015418:	08018d30 	.word	0x08018d30
 801541c:	20001444 	.word	0x20001444

08015420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d10a      	bne.n	8015446 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015434:	f383 8811 	msr	BASEPRI, r3
 8015438:	f3bf 8f6f 	isb	sy
 801543c:	f3bf 8f4f 	dsb	sy
 8015440:	60fb      	str	r3, [r7, #12]
}
 8015442:	bf00      	nop
 8015444:	e7fe      	b.n	8015444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015446:	4b07      	ldr	r3, [pc, #28]	; (8015464 <vTaskPlaceOnEventList+0x44>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	3318      	adds	r3, #24
 801544c:	4619      	mov	r1, r3
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f7fe fbd7 	bl	8013c02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015454:	2101      	movs	r1, #1
 8015456:	6838      	ldr	r0, [r7, #0]
 8015458:	f000 fac6 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
}
 801545c:	bf00      	nop
 801545e:	3710      	adds	r7, #16
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	20001f44 	.word	0x20001f44

08015468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015468:	b580      	push	{r7, lr}
 801546a:	b086      	sub	sp, #24
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d10a      	bne.n	8015490 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801547e:	f383 8811 	msr	BASEPRI, r3
 8015482:	f3bf 8f6f 	isb	sy
 8015486:	f3bf 8f4f 	dsb	sy
 801548a:	617b      	str	r3, [r7, #20]
}
 801548c:	bf00      	nop
 801548e:	e7fe      	b.n	801548e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015490:	4b0b      	ldr	r3, [pc, #44]	; (80154c0 <vTaskPlaceOnEventListRestricted+0x58>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	3318      	adds	r3, #24
 8015496:	4619      	mov	r1, r3
 8015498:	68f8      	ldr	r0, [r7, #12]
 801549a:	f7fe fb8e 	bl	8013bba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d002      	beq.n	80154aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80154a4:	f04f 33ff 	mov.w	r3, #4294967295
 80154a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80154aa:	2024      	movs	r0, #36	; 0x24
 80154ac:	f001 fea0 	bl	80171f0 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80154b0:	6879      	ldr	r1, [r7, #4]
 80154b2:	68b8      	ldr	r0, [r7, #8]
 80154b4:	f000 fa98 	bl	80159e8 <prvAddCurrentTaskToDelayedList>
	}
 80154b8:	bf00      	nop
 80154ba:	3718      	adds	r7, #24
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	20001f44 	.word	0x20001f44

080154c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b086      	sub	sp, #24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	68db      	ldr	r3, [r3, #12]
 80154d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10a      	bne.n	80154f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80154da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154de:	f383 8811 	msr	BASEPRI, r3
 80154e2:	f3bf 8f6f 	isb	sy
 80154e6:	f3bf 8f4f 	dsb	sy
 80154ea:	60fb      	str	r3, [r7, #12]
}
 80154ec:	bf00      	nop
 80154ee:	e7fe      	b.n	80154ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	3318      	adds	r3, #24
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fe fbbd 	bl	8013c74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80154fa:	4b20      	ldr	r3, [pc, #128]	; (801557c <xTaskRemoveFromEventList+0xb8>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d121      	bne.n	8015546 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	3304      	adds	r3, #4
 8015506:	4618      	mov	r0, r3
 8015508:	f7fe fbb4 	bl	8013c74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801550c:	693b      	ldr	r3, [r7, #16]
 801550e:	4618      	mov	r0, r3
 8015510:	f002 fb92 	bl	8017c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8015514:	693b      	ldr	r3, [r7, #16]
 8015516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015518:	4b19      	ldr	r3, [pc, #100]	; (8015580 <xTaskRemoveFromEventList+0xbc>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	429a      	cmp	r2, r3
 801551e:	d903      	bls.n	8015528 <xTaskRemoveFromEventList+0x64>
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015524:	4a16      	ldr	r2, [pc, #88]	; (8015580 <xTaskRemoveFromEventList+0xbc>)
 8015526:	6013      	str	r3, [r2, #0]
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801552c:	4613      	mov	r3, r2
 801552e:	009b      	lsls	r3, r3, #2
 8015530:	4413      	add	r3, r2
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	4a13      	ldr	r2, [pc, #76]	; (8015584 <xTaskRemoveFromEventList+0xc0>)
 8015536:	441a      	add	r2, r3
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	3304      	adds	r3, #4
 801553c:	4619      	mov	r1, r3
 801553e:	4610      	mov	r0, r2
 8015540:	f7fe fb3b 	bl	8013bba <vListInsertEnd>
 8015544:	e005      	b.n	8015552 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	3318      	adds	r3, #24
 801554a:	4619      	mov	r1, r3
 801554c:	480e      	ldr	r0, [pc, #56]	; (8015588 <xTaskRemoveFromEventList+0xc4>)
 801554e:	f7fe fb34 	bl	8013bba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015556:	4b0d      	ldr	r3, [pc, #52]	; (801558c <xTaskRemoveFromEventList+0xc8>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801555c:	429a      	cmp	r2, r3
 801555e:	d905      	bls.n	801556c <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015560:	2301      	movs	r3, #1
 8015562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015564:	4b0a      	ldr	r3, [pc, #40]	; (8015590 <xTaskRemoveFromEventList+0xcc>)
 8015566:	2201      	movs	r2, #1
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	e001      	b.n	8015570 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 801556c:	2300      	movs	r3, #0
 801556e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015570:	697b      	ldr	r3, [r7, #20]
}
 8015572:	4618      	mov	r0, r3
 8015574:	3718      	adds	r7, #24
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	20002440 	.word	0x20002440
 8015580:	20002420 	.word	0x20002420
 8015584:	20001f48 	.word	0x20001f48
 8015588:	200023d8 	.word	0x200023d8
 801558c:	20001f44 	.word	0x20001f44
 8015590:	2000242c 	.word	0x2000242c

08015594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015594:	b480      	push	{r7}
 8015596:	b083      	sub	sp, #12
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801559c:	4b06      	ldr	r3, [pc, #24]	; (80155b8 <vTaskInternalSetTimeOutState+0x24>)
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80155a4:	4b05      	ldr	r3, [pc, #20]	; (80155bc <vTaskInternalSetTimeOutState+0x28>)
 80155a6:	681a      	ldr	r2, [r3, #0]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	605a      	str	r2, [r3, #4]
}
 80155ac:	bf00      	nop
 80155ae:	370c      	adds	r7, #12
 80155b0:	46bd      	mov	sp, r7
 80155b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b6:	4770      	bx	lr
 80155b8:	20002430 	.word	0x20002430
 80155bc:	2000241c 	.word	0x2000241c

080155c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b088      	sub	sp, #32
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d10a      	bne.n	80155e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80155d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d4:	f383 8811 	msr	BASEPRI, r3
 80155d8:	f3bf 8f6f 	isb	sy
 80155dc:	f3bf 8f4f 	dsb	sy
 80155e0:	613b      	str	r3, [r7, #16]
}
 80155e2:	bf00      	nop
 80155e4:	e7fe      	b.n	80155e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d10a      	bne.n	8015602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80155ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155f0:	f383 8811 	msr	BASEPRI, r3
 80155f4:	f3bf 8f6f 	isb	sy
 80155f8:	f3bf 8f4f 	dsb	sy
 80155fc:	60fb      	str	r3, [r7, #12]
}
 80155fe:	bf00      	nop
 8015600:	e7fe      	b.n	8015600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015602:	f000 febf 	bl	8016384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015606:	4b1d      	ldr	r3, [pc, #116]	; (801567c <xTaskCheckForTimeOut+0xbc>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	69ba      	ldr	r2, [r7, #24]
 8015612:	1ad3      	subs	r3, r2, r3
 8015614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801561e:	d102      	bne.n	8015626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015620:	2300      	movs	r3, #0
 8015622:	61fb      	str	r3, [r7, #28]
 8015624:	e023      	b.n	801566e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	4b15      	ldr	r3, [pc, #84]	; (8015680 <xTaskCheckForTimeOut+0xc0>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	429a      	cmp	r2, r3
 8015630:	d007      	beq.n	8015642 <xTaskCheckForTimeOut+0x82>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	69ba      	ldr	r2, [r7, #24]
 8015638:	429a      	cmp	r2, r3
 801563a:	d302      	bcc.n	8015642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801563c:	2301      	movs	r3, #1
 801563e:	61fb      	str	r3, [r7, #28]
 8015640:	e015      	b.n	801566e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	697a      	ldr	r2, [r7, #20]
 8015648:	429a      	cmp	r2, r3
 801564a:	d20b      	bcs.n	8015664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	1ad2      	subs	r2, r2, r3
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7ff ff9b 	bl	8015594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801565e:	2300      	movs	r3, #0
 8015660:	61fb      	str	r3, [r7, #28]
 8015662:	e004      	b.n	801566e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2200      	movs	r2, #0
 8015668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801566a:	2301      	movs	r3, #1
 801566c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801566e:	f000 feb9 	bl	80163e4 <vPortExitCritical>

	return xReturn;
 8015672:	69fb      	ldr	r3, [r7, #28]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3720      	adds	r7, #32
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	2000241c 	.word	0x2000241c
 8015680:	20002430 	.word	0x20002430

08015684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015684:	b480      	push	{r7}
 8015686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015688:	4b03      	ldr	r3, [pc, #12]	; (8015698 <vTaskMissedYield+0x14>)
 801568a:	2201      	movs	r2, #1
 801568c:	601a      	str	r2, [r3, #0]
}
 801568e:	bf00      	nop
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr
 8015698:	2000242c 	.word	0x2000242c

0801569c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80156a4:	f000 f852 	bl	801574c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80156a8:	4b06      	ldr	r3, [pc, #24]	; (80156c4 <prvIdleTask+0x28>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d9f9      	bls.n	80156a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80156b0:	4b05      	ldr	r3, [pc, #20]	; (80156c8 <prvIdleTask+0x2c>)
 80156b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156b6:	601a      	str	r2, [r3, #0]
 80156b8:	f3bf 8f4f 	dsb	sy
 80156bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80156c0:	e7f0      	b.n	80156a4 <prvIdleTask+0x8>
 80156c2:	bf00      	nop
 80156c4:	20001f48 	.word	0x20001f48
 80156c8:	e000ed04 	.word	0xe000ed04

080156cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156d2:	2300      	movs	r3, #0
 80156d4:	607b      	str	r3, [r7, #4]
 80156d6:	e00c      	b.n	80156f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80156d8:	687a      	ldr	r2, [r7, #4]
 80156da:	4613      	mov	r3, r2
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	4413      	add	r3, r2
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	4a12      	ldr	r2, [pc, #72]	; (801572c <prvInitialiseTaskLists+0x60>)
 80156e4:	4413      	add	r3, r2
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fe fa3a 	bl	8013b60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	3301      	adds	r3, #1
 80156f0:	607b      	str	r3, [r7, #4]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b37      	cmp	r3, #55	; 0x37
 80156f6:	d9ef      	bls.n	80156d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80156f8:	480d      	ldr	r0, [pc, #52]	; (8015730 <prvInitialiseTaskLists+0x64>)
 80156fa:	f7fe fa31 	bl	8013b60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80156fe:	480d      	ldr	r0, [pc, #52]	; (8015734 <prvInitialiseTaskLists+0x68>)
 8015700:	f7fe fa2e 	bl	8013b60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015704:	480c      	ldr	r0, [pc, #48]	; (8015738 <prvInitialiseTaskLists+0x6c>)
 8015706:	f7fe fa2b 	bl	8013b60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801570a:	480c      	ldr	r0, [pc, #48]	; (801573c <prvInitialiseTaskLists+0x70>)
 801570c:	f7fe fa28 	bl	8013b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015710:	480b      	ldr	r0, [pc, #44]	; (8015740 <prvInitialiseTaskLists+0x74>)
 8015712:	f7fe fa25 	bl	8013b60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015716:	4b0b      	ldr	r3, [pc, #44]	; (8015744 <prvInitialiseTaskLists+0x78>)
 8015718:	4a05      	ldr	r2, [pc, #20]	; (8015730 <prvInitialiseTaskLists+0x64>)
 801571a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801571c:	4b0a      	ldr	r3, [pc, #40]	; (8015748 <prvInitialiseTaskLists+0x7c>)
 801571e:	4a05      	ldr	r2, [pc, #20]	; (8015734 <prvInitialiseTaskLists+0x68>)
 8015720:	601a      	str	r2, [r3, #0]
}
 8015722:	bf00      	nop
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	20001f48 	.word	0x20001f48
 8015730:	200023a8 	.word	0x200023a8
 8015734:	200023bc 	.word	0x200023bc
 8015738:	200023d8 	.word	0x200023d8
 801573c:	200023ec 	.word	0x200023ec
 8015740:	20002404 	.word	0x20002404
 8015744:	200023d0 	.word	0x200023d0
 8015748:	200023d4 	.word	0x200023d4

0801574c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015752:	e019      	b.n	8015788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015754:	f000 fe16 	bl	8016384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015758:	4b10      	ldr	r3, [pc, #64]	; (801579c <prvCheckTasksWaitingTermination+0x50>)
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	3304      	adds	r3, #4
 8015764:	4618      	mov	r0, r3
 8015766:	f7fe fa85 	bl	8013c74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801576a:	4b0d      	ldr	r3, [pc, #52]	; (80157a0 <prvCheckTasksWaitingTermination+0x54>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	3b01      	subs	r3, #1
 8015770:	4a0b      	ldr	r2, [pc, #44]	; (80157a0 <prvCheckTasksWaitingTermination+0x54>)
 8015772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015774:	4b0b      	ldr	r3, [pc, #44]	; (80157a4 <prvCheckTasksWaitingTermination+0x58>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	3b01      	subs	r3, #1
 801577a:	4a0a      	ldr	r2, [pc, #40]	; (80157a4 <prvCheckTasksWaitingTermination+0x58>)
 801577c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801577e:	f000 fe31 	bl	80163e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f000 f848 	bl	8015818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015788:	4b06      	ldr	r3, [pc, #24]	; (80157a4 <prvCheckTasksWaitingTermination+0x58>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d1e1      	bne.n	8015754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015790:	bf00      	nop
 8015792:	bf00      	nop
 8015794:	3708      	adds	r7, #8
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	200023ec 	.word	0x200023ec
 80157a0:	20002418 	.word	0x20002418
 80157a4:	20002400 	.word	0x20002400

080157a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80157a8:	b480      	push	{r7}
 80157aa:	b085      	sub	sp, #20
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80157b0:	2300      	movs	r3, #0
 80157b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80157b4:	e005      	b.n	80157c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	3301      	adds	r3, #1
 80157ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3301      	adds	r3, #1
 80157c0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	2ba5      	cmp	r3, #165	; 0xa5
 80157c8:	d0f5      	beq.n	80157b6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	089b      	lsrs	r3, r3, #2
 80157ce:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	b29b      	uxth	r3, r3
	}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr

080157e0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b086      	sub	sp, #24
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d102      	bne.n	80157f4 <uxTaskGetStackHighWaterMark+0x14>
 80157ee:	4b09      	ldr	r3, [pc, #36]	; (8015814 <uxTaskGetStackHighWaterMark+0x34>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	e000      	b.n	80157f6 <uxTaskGetStackHighWaterMark+0x16>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157fc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80157fe:	6938      	ldr	r0, [r7, #16]
 8015800:	f7ff ffd2 	bl	80157a8 <prvTaskCheckFreeStackSpace>
 8015804:	4603      	mov	r3, r0
 8015806:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8015808:	68fb      	ldr	r3, [r7, #12]
	}
 801580a:	4618      	mov	r0, r3
 801580c:	3718      	adds	r7, #24
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
 8015812:	bf00      	nop
 8015814:	20001f44 	.word	0x20001f44

08015818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015818:	b580      	push	{r7, lr}
 801581a:	b084      	sub	sp, #16
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	3364      	adds	r3, #100	; 0x64
 8015824:	4618      	mov	r0, r3
 8015826:	f002 fc0d 	bl	8018044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8015830:	2b00      	cmp	r3, #0
 8015832:	d108      	bne.n	8015846 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015838:	4618      	mov	r0, r3
 801583a:	f000 ff91 	bl	8016760 <vPortFree>
				vPortFree( pxTCB );
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f000 ff8e 	bl	8016760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015844:	e018      	b.n	8015878 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801584c:	2b01      	cmp	r3, #1
 801584e:	d103      	bne.n	8015858 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f000 ff85 	bl	8016760 <vPortFree>
	}
 8015856:	e00f      	b.n	8015878 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801585e:	2b02      	cmp	r3, #2
 8015860:	d00a      	beq.n	8015878 <prvDeleteTCB+0x60>
	__asm volatile
 8015862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015866:	f383 8811 	msr	BASEPRI, r3
 801586a:	f3bf 8f6f 	isb	sy
 801586e:	f3bf 8f4f 	dsb	sy
 8015872:	60fb      	str	r3, [r7, #12]
}
 8015874:	bf00      	nop
 8015876:	e7fe      	b.n	8015876 <prvDeleteTCB+0x5e>
	}
 8015878:	bf00      	nop
 801587a:	3710      	adds	r7, #16
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}

08015880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015880:	b480      	push	{r7}
 8015882:	b083      	sub	sp, #12
 8015884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015886:	4b0c      	ldr	r3, [pc, #48]	; (80158b8 <prvResetNextTaskUnblockTime+0x38>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d104      	bne.n	801589a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015890:	4b0a      	ldr	r3, [pc, #40]	; (80158bc <prvResetNextTaskUnblockTime+0x3c>)
 8015892:	f04f 32ff 	mov.w	r2, #4294967295
 8015896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015898:	e008      	b.n	80158ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801589a:	4b07      	ldr	r3, [pc, #28]	; (80158b8 <prvResetNextTaskUnblockTime+0x38>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	4a04      	ldr	r2, [pc, #16]	; (80158bc <prvResetNextTaskUnblockTime+0x3c>)
 80158aa:	6013      	str	r3, [r2, #0]
}
 80158ac:	bf00      	nop
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr
 80158b8:	200023d0 	.word	0x200023d0
 80158bc:	20002438 	.word	0x20002438

080158c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80158c6:	4b0b      	ldr	r3, [pc, #44]	; (80158f4 <xTaskGetSchedulerState+0x34>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d102      	bne.n	80158d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80158ce:	2301      	movs	r3, #1
 80158d0:	607b      	str	r3, [r7, #4]
 80158d2:	e008      	b.n	80158e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80158d4:	4b08      	ldr	r3, [pc, #32]	; (80158f8 <xTaskGetSchedulerState+0x38>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d102      	bne.n	80158e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80158dc:	2302      	movs	r3, #2
 80158de:	607b      	str	r3, [r7, #4]
 80158e0:	e001      	b.n	80158e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80158e2:	2300      	movs	r3, #0
 80158e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80158e6:	687b      	ldr	r3, [r7, #4]
	}
 80158e8:	4618      	mov	r0, r3
 80158ea:	370c      	adds	r7, #12
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr
 80158f4:	20002424 	.word	0x20002424
 80158f8:	20002440 	.word	0x20002440

080158fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b086      	sub	sp, #24
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015908:	2300      	movs	r3, #0
 801590a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d05f      	beq.n	80159d2 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015912:	4b32      	ldr	r3, [pc, #200]	; (80159dc <xTaskPriorityDisinherit+0xe0>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	693a      	ldr	r2, [r7, #16]
 8015918:	429a      	cmp	r2, r3
 801591a:	d00a      	beq.n	8015932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015920:	f383 8811 	msr	BASEPRI, r3
 8015924:	f3bf 8f6f 	isb	sy
 8015928:	f3bf 8f4f 	dsb	sy
 801592c:	60fb      	str	r3, [r7, #12]
}
 801592e:	bf00      	nop
 8015930:	e7fe      	b.n	8015930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015936:	2b00      	cmp	r3, #0
 8015938:	d10a      	bne.n	8015950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801593e:	f383 8811 	msr	BASEPRI, r3
 8015942:	f3bf 8f6f 	isb	sy
 8015946:	f3bf 8f4f 	dsb	sy
 801594a:	60bb      	str	r3, [r7, #8]
}
 801594c:	bf00      	nop
 801594e:	e7fe      	b.n	801594e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015954:	1e5a      	subs	r2, r3, #1
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015962:	429a      	cmp	r2, r3
 8015964:	d035      	beq.n	80159d2 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015966:	693b      	ldr	r3, [r7, #16]
 8015968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801596a:	2b00      	cmp	r3, #0
 801596c:	d131      	bne.n	80159d2 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	3304      	adds	r3, #4
 8015972:	4618      	mov	r0, r3
 8015974:	f7fe f97e 	bl	8013c74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	4619      	mov	r1, r3
 801597c:	204a      	movs	r0, #74	; 0x4a
 801597e:	f001 fc55 	bl	801722c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801598e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	4618      	mov	r0, r3
 801599a:	f002 f94d 	bl	8017c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159a2:	4b0f      	ldr	r3, [pc, #60]	; (80159e0 <xTaskPriorityDisinherit+0xe4>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d903      	bls.n	80159b2 <xTaskPriorityDisinherit+0xb6>
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159ae:	4a0c      	ldr	r2, [pc, #48]	; (80159e0 <xTaskPriorityDisinherit+0xe4>)
 80159b0:	6013      	str	r3, [r2, #0]
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159b6:	4613      	mov	r3, r2
 80159b8:	009b      	lsls	r3, r3, #2
 80159ba:	4413      	add	r3, r2
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	4a09      	ldr	r2, [pc, #36]	; (80159e4 <xTaskPriorityDisinherit+0xe8>)
 80159c0:	441a      	add	r2, r3
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	3304      	adds	r3, #4
 80159c6:	4619      	mov	r1, r3
 80159c8:	4610      	mov	r0, r2
 80159ca:	f7fe f8f6 	bl	8013bba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80159ce:	2301      	movs	r3, #1
 80159d0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80159d2:	697b      	ldr	r3, [r7, #20]
	}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	20001f44 	.word	0x20001f44
 80159e0:	20002420 	.word	0x20002420
 80159e4:	20001f48 	.word	0x20001f48

080159e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80159f2:	4b21      	ldr	r3, [pc, #132]	; (8015a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80159f8:	4b20      	ldr	r3, [pc, #128]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	3304      	adds	r3, #4
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7fe f938 	bl	8013c74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a0a:	d10a      	bne.n	8015a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d007      	beq.n	8015a22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a12:	4b1a      	ldr	r3, [pc, #104]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	3304      	adds	r3, #4
 8015a18:	4619      	mov	r1, r3
 8015a1a:	4819      	ldr	r0, [pc, #100]	; (8015a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8015a1c:	f7fe f8cd 	bl	8013bba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015a20:	e026      	b.n	8015a70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	4413      	add	r3, r2
 8015a28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015a2a:	4b14      	ldr	r3, [pc, #80]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	68ba      	ldr	r2, [r7, #8]
 8015a30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015a32:	68ba      	ldr	r2, [r7, #8]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	429a      	cmp	r2, r3
 8015a38:	d209      	bcs.n	8015a4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a3a:	4b12      	ldr	r3, [pc, #72]	; (8015a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	4b0f      	ldr	r3, [pc, #60]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	3304      	adds	r3, #4
 8015a44:	4619      	mov	r1, r3
 8015a46:	4610      	mov	r0, r2
 8015a48:	f7fe f8db 	bl	8013c02 <vListInsert>
}
 8015a4c:	e010      	b.n	8015a70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a4e:	4b0e      	ldr	r3, [pc, #56]	; (8015a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	4b0a      	ldr	r3, [pc, #40]	; (8015a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	3304      	adds	r3, #4
 8015a58:	4619      	mov	r1, r3
 8015a5a:	4610      	mov	r0, r2
 8015a5c:	f7fe f8d1 	bl	8013c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015a60:	4b0a      	ldr	r3, [pc, #40]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d202      	bcs.n	8015a70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015a6a:	4a08      	ldr	r2, [pc, #32]	; (8015a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	6013      	str	r3, [r2, #0]
}
 8015a70:	bf00      	nop
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	2000241c 	.word	0x2000241c
 8015a7c:	20001f44 	.word	0x20001f44
 8015a80:	20002404 	.word	0x20002404
 8015a84:	200023d4 	.word	0x200023d4
 8015a88:	200023d0 	.word	0x200023d0
 8015a8c:	20002438 	.word	0x20002438

08015a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08a      	sub	sp, #40	; 0x28
 8015a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015a96:	2300      	movs	r3, #0
 8015a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015a9a:	f000 fb07 	bl	80160ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015a9e:	4b1c      	ldr	r3, [pc, #112]	; (8015b10 <xTimerCreateTimerTask+0x80>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d021      	beq.n	8015aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015aae:	1d3a      	adds	r2, r7, #4
 8015ab0:	f107 0108 	add.w	r1, r7, #8
 8015ab4:	f107 030c 	add.w	r3, r7, #12
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7fe f837 	bl	8013b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	68fa      	ldr	r2, [r7, #12]
 8015ac4:	9202      	str	r2, [sp, #8]
 8015ac6:	9301      	str	r3, [sp, #4]
 8015ac8:	2302      	movs	r3, #2
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	2300      	movs	r3, #0
 8015ace:	460a      	mov	r2, r1
 8015ad0:	4910      	ldr	r1, [pc, #64]	; (8015b14 <xTimerCreateTimerTask+0x84>)
 8015ad2:	4811      	ldr	r0, [pc, #68]	; (8015b18 <xTimerCreateTimerTask+0x88>)
 8015ad4:	f7fe ff8c 	bl	80149f0 <xTaskCreateStatic>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	4a10      	ldr	r2, [pc, #64]	; (8015b1c <xTimerCreateTimerTask+0x8c>)
 8015adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015ade:	4b0f      	ldr	r3, [pc, #60]	; (8015b1c <xTimerCreateTimerTask+0x8c>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d001      	beq.n	8015aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d10a      	bne.n	8015b06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	613b      	str	r3, [r7, #16]
}
 8015b02:	bf00      	nop
 8015b04:	e7fe      	b.n	8015b04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015b06:	697b      	ldr	r3, [r7, #20]
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	20002474 	.word	0x20002474
 8015b14:	08018d38 	.word	0x08018d38
 8015b18:	08015c55 	.word	0x08015c55
 8015b1c:	20002478 	.word	0x20002478

08015b20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08a      	sub	sp, #40	; 0x28
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10a      	bne.n	8015b4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8015b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b3c:	f383 8811 	msr	BASEPRI, r3
 8015b40:	f3bf 8f6f 	isb	sy
 8015b44:	f3bf 8f4f 	dsb	sy
 8015b48:	623b      	str	r3, [r7, #32]
}
 8015b4a:	bf00      	nop
 8015b4c:	e7fe      	b.n	8015b4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015b4e:	4b1a      	ldr	r3, [pc, #104]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d02a      	beq.n	8015bac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	2b05      	cmp	r3, #5
 8015b66:	dc18      	bgt.n	8015b9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015b68:	f7ff feaa 	bl	80158c0 <xTaskGetSchedulerState>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b02      	cmp	r3, #2
 8015b70:	d109      	bne.n	8015b86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015b72:	4b11      	ldr	r3, [pc, #68]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b74:	6818      	ldr	r0, [r3, #0]
 8015b76:	f107 0110 	add.w	r1, r7, #16
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b7e:	f7fe f9e7 	bl	8013f50 <xQueueGenericSend>
 8015b82:	6278      	str	r0, [r7, #36]	; 0x24
 8015b84:	e012      	b.n	8015bac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015b86:	4b0c      	ldr	r3, [pc, #48]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b88:	6818      	ldr	r0, [r3, #0]
 8015b8a:	f107 0110 	add.w	r1, r7, #16
 8015b8e:	2300      	movs	r3, #0
 8015b90:	2200      	movs	r2, #0
 8015b92:	f7fe f9dd 	bl	8013f50 <xQueueGenericSend>
 8015b96:	6278      	str	r0, [r7, #36]	; 0x24
 8015b98:	e008      	b.n	8015bac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015b9a:	4b07      	ldr	r3, [pc, #28]	; (8015bb8 <xTimerGenericCommand+0x98>)
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	f107 0110 	add.w	r1, r7, #16
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	f7fe faf9 	bl	801419c <xQueueGenericSendFromISR>
 8015baa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3728      	adds	r7, #40	; 0x28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	20002474 	.word	0x20002474

08015bbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b088      	sub	sp, #32
 8015bc0:	af02      	add	r7, sp, #8
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bc6:	4b22      	ldr	r3, [pc, #136]	; (8015c50 <prvProcessExpiredTimer+0x94>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	3304      	adds	r3, #4
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7fe f84d 	bl	8013c74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015be0:	f003 0304 	and.w	r3, r3, #4
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d022      	beq.n	8015c2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	699a      	ldr	r2, [r3, #24]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	18d1      	adds	r1, r2, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	683a      	ldr	r2, [r7, #0]
 8015bf4:	6978      	ldr	r0, [r7, #20]
 8015bf6:	f000 f8d1 	bl	8015d9c <prvInsertTimerInActiveList>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d01f      	beq.n	8015c40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015c00:	2300      	movs	r3, #0
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	2300      	movs	r3, #0
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	2100      	movs	r1, #0
 8015c0a:	6978      	ldr	r0, [r7, #20]
 8015c0c:	f7ff ff88 	bl	8015b20 <xTimerGenericCommand>
 8015c10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d113      	bne.n	8015c40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1c:	f383 8811 	msr	BASEPRI, r3
 8015c20:	f3bf 8f6f 	isb	sy
 8015c24:	f3bf 8f4f 	dsb	sy
 8015c28:	60fb      	str	r3, [r7, #12]
}
 8015c2a:	bf00      	nop
 8015c2c:	e7fe      	b.n	8015c2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c34:	f023 0301 	bic.w	r3, r3, #1
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	6a1b      	ldr	r3, [r3, #32]
 8015c44:	6978      	ldr	r0, [r7, #20]
 8015c46:	4798      	blx	r3
}
 8015c48:	bf00      	nop
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	2000246c 	.word	0x2000246c

08015c54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c5c:	f107 0308 	add.w	r3, r7, #8
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f857 	bl	8015d14 <prvGetNextExpireTime>
 8015c66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	68f8      	ldr	r0, [r7, #12]
 8015c6e:	f000 f803 	bl	8015c78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015c72:	f000 f8d5 	bl	8015e20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c76:	e7f1      	b.n	8015c5c <prvTimerTask+0x8>

08015c78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b084      	sub	sp, #16
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015c82:	f7ff f9c5 	bl	8015010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015c86:	f107 0308 	add.w	r3, r7, #8
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f000 f866 	bl	8015d5c <prvSampleTimeNow>
 8015c90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d130      	bne.n	8015cfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d10a      	bne.n	8015cb4 <prvProcessTimerOrBlockTask+0x3c>
 8015c9e:	687a      	ldr	r2, [r7, #4]
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d806      	bhi.n	8015cb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015ca6:	f7ff f9c1 	bl	801502c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015caa:	68f9      	ldr	r1, [r7, #12]
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7ff ff85 	bl	8015bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015cb2:	e024      	b.n	8015cfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d008      	beq.n	8015ccc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015cba:	4b13      	ldr	r3, [pc, #76]	; (8015d08 <prvProcessTimerOrBlockTask+0x90>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d101      	bne.n	8015cc8 <prvProcessTimerOrBlockTask+0x50>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	e000      	b.n	8015cca <prvProcessTimerOrBlockTask+0x52>
 8015cc8:	2300      	movs	r3, #0
 8015cca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015ccc:	4b0f      	ldr	r3, [pc, #60]	; (8015d0c <prvProcessTimerOrBlockTask+0x94>)
 8015cce:	6818      	ldr	r0, [r3, #0]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	683a      	ldr	r2, [r7, #0]
 8015cd8:	4619      	mov	r1, r3
 8015cda:	f7fe fe55 	bl	8014988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015cde:	f7ff f9a5 	bl	801502c <xTaskResumeAll>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10a      	bne.n	8015cfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015ce8:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <prvProcessTimerOrBlockTask+0x98>)
 8015cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cee:	601a      	str	r2, [r3, #0]
 8015cf0:	f3bf 8f4f 	dsb	sy
 8015cf4:	f3bf 8f6f 	isb	sy
}
 8015cf8:	e001      	b.n	8015cfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015cfa:	f7ff f997 	bl	801502c <xTaskResumeAll>
}
 8015cfe:	bf00      	nop
 8015d00:	3710      	adds	r7, #16
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	bf00      	nop
 8015d08:	20002470 	.word	0x20002470
 8015d0c:	20002474 	.word	0x20002474
 8015d10:	e000ed04 	.word	0xe000ed04

08015d14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015d14:	b480      	push	{r7}
 8015d16:	b085      	sub	sp, #20
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015d1c:	4b0e      	ldr	r3, [pc, #56]	; (8015d58 <prvGetNextExpireTime+0x44>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d101      	bne.n	8015d2a <prvGetNextExpireTime+0x16>
 8015d26:	2201      	movs	r2, #1
 8015d28:	e000      	b.n	8015d2c <prvGetNextExpireTime+0x18>
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d105      	bne.n	8015d44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015d38:	4b07      	ldr	r3, [pc, #28]	; (8015d58 <prvGetNextExpireTime+0x44>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	68db      	ldr	r3, [r3, #12]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	60fb      	str	r3, [r7, #12]
 8015d42:	e001      	b.n	8015d48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015d44:	2300      	movs	r3, #0
 8015d46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015d48:	68fb      	ldr	r3, [r7, #12]
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3714      	adds	r7, #20
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr
 8015d56:	bf00      	nop
 8015d58:	2000246c 	.word	0x2000246c

08015d5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015d64:	f7ff fa04 	bl	8015170 <xTaskGetTickCount>
 8015d68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015d6a:	4b0b      	ldr	r3, [pc, #44]	; (8015d98 <prvSampleTimeNow+0x3c>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	68fa      	ldr	r2, [r7, #12]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d205      	bcs.n	8015d80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015d74:	f000 f936 	bl	8015fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	601a      	str	r2, [r3, #0]
 8015d7e:	e002      	b.n	8015d86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2200      	movs	r2, #0
 8015d84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015d86:	4a04      	ldr	r2, [pc, #16]	; (8015d98 <prvSampleTimeNow+0x3c>)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	2000247c 	.word	0x2000247c

08015d9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b086      	sub	sp, #24
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	60f8      	str	r0, [r7, #12]
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015daa:	2300      	movs	r3, #0
 8015dac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d812      	bhi.n	8015de8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dc2:	687a      	ldr	r2, [r7, #4]
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	1ad2      	subs	r2, r2, r3
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	699b      	ldr	r3, [r3, #24]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d302      	bcc.n	8015dd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	617b      	str	r3, [r7, #20]
 8015dd4:	e01b      	b.n	8015e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015dd6:	4b10      	ldr	r3, [pc, #64]	; (8015e18 <prvInsertTimerInActiveList+0x7c>)
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	3304      	adds	r3, #4
 8015dde:	4619      	mov	r1, r3
 8015de0:	4610      	mov	r0, r2
 8015de2:	f7fd ff0e 	bl	8013c02 <vListInsert>
 8015de6:	e012      	b.n	8015e0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d206      	bcs.n	8015dfe <prvInsertTimerInActiveList+0x62>
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d302      	bcc.n	8015dfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015df8:	2301      	movs	r3, #1
 8015dfa:	617b      	str	r3, [r7, #20]
 8015dfc:	e007      	b.n	8015e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015dfe:	4b07      	ldr	r3, [pc, #28]	; (8015e1c <prvInsertTimerInActiveList+0x80>)
 8015e00:	681a      	ldr	r2, [r3, #0]
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	3304      	adds	r3, #4
 8015e06:	4619      	mov	r1, r3
 8015e08:	4610      	mov	r0, r2
 8015e0a:	f7fd fefa 	bl	8013c02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015e0e:	697b      	ldr	r3, [r7, #20]
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3718      	adds	r7, #24
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	20002470 	.word	0x20002470
 8015e1c:	2000246c 	.word	0x2000246c

08015e20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08e      	sub	sp, #56	; 0x38
 8015e24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015e26:	e0ca      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	da18      	bge.n	8015e60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015e2e:	1d3b      	adds	r3, r7, #4
 8015e30:	3304      	adds	r3, #4
 8015e32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d10a      	bne.n	8015e50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e3e:	f383 8811 	msr	BASEPRI, r3
 8015e42:	f3bf 8f6f 	isb	sy
 8015e46:	f3bf 8f4f 	dsb	sy
 8015e4a:	61fb      	str	r3, [r7, #28]
}
 8015e4c:	bf00      	nop
 8015e4e:	e7fe      	b.n	8015e4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e56:	6850      	ldr	r0, [r2, #4]
 8015e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e5a:	6892      	ldr	r2, [r2, #8]
 8015e5c:	4611      	mov	r1, r2
 8015e5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	f2c0 80aa 	blt.w	8015fbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6e:	695b      	ldr	r3, [r3, #20]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d004      	beq.n	8015e7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e76:	3304      	adds	r3, #4
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7fd fefb 	bl	8013c74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e7e:	463b      	mov	r3, r7
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7ff ff6b 	bl	8015d5c <prvSampleTimeNow>
 8015e86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b09      	cmp	r3, #9
 8015e8c:	f200 8097 	bhi.w	8015fbe <prvProcessReceivedCommands+0x19e>
 8015e90:	a201      	add	r2, pc, #4	; (adr r2, 8015e98 <prvProcessReceivedCommands+0x78>)
 8015e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e96:	bf00      	nop
 8015e98:	08015ec1 	.word	0x08015ec1
 8015e9c:	08015ec1 	.word	0x08015ec1
 8015ea0:	08015ec1 	.word	0x08015ec1
 8015ea4:	08015f35 	.word	0x08015f35
 8015ea8:	08015f49 	.word	0x08015f49
 8015eac:	08015f93 	.word	0x08015f93
 8015eb0:	08015ec1 	.word	0x08015ec1
 8015eb4:	08015ec1 	.word	0x08015ec1
 8015eb8:	08015f35 	.word	0x08015f35
 8015ebc:	08015f49 	.word	0x08015f49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ec6:	f043 0301 	orr.w	r3, r3, #1
 8015eca:	b2da      	uxtb	r2, r3
 8015ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015ed2:	68ba      	ldr	r2, [r7, #8]
 8015ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed6:	699b      	ldr	r3, [r3, #24]
 8015ed8:	18d1      	adds	r1, r2, r3
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ee0:	f7ff ff5c 	bl	8015d9c <prvInsertTimerInActiveList>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d069      	beq.n	8015fbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	6a1b      	ldr	r3, [r3, #32]
 8015eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ef0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ef8:	f003 0304 	and.w	r3, r3, #4
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d05e      	beq.n	8015fbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f04:	699b      	ldr	r3, [r3, #24]
 8015f06:	441a      	add	r2, r3
 8015f08:	2300      	movs	r3, #0
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	2100      	movs	r1, #0
 8015f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f12:	f7ff fe05 	bl	8015b20 <xTimerGenericCommand>
 8015f16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015f18:	6a3b      	ldr	r3, [r7, #32]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d14f      	bne.n	8015fbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f22:	f383 8811 	msr	BASEPRI, r3
 8015f26:	f3bf 8f6f 	isb	sy
 8015f2a:	f3bf 8f4f 	dsb	sy
 8015f2e:	61bb      	str	r3, [r7, #24]
}
 8015f30:	bf00      	nop
 8015f32:	e7fe      	b.n	8015f32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f3a:	f023 0301 	bic.w	r3, r3, #1
 8015f3e:	b2da      	uxtb	r2, r3
 8015f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015f46:	e03a      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f4e:	f043 0301 	orr.w	r3, r3, #1
 8015f52:	b2da      	uxtb	r2, r3
 8015f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015f5a:	68ba      	ldr	r2, [r7, #8]
 8015f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f62:	699b      	ldr	r3, [r3, #24]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d10a      	bne.n	8015f7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6c:	f383 8811 	msr	BASEPRI, r3
 8015f70:	f3bf 8f6f 	isb	sy
 8015f74:	f3bf 8f4f 	dsb	sy
 8015f78:	617b      	str	r3, [r7, #20]
}
 8015f7a:	bf00      	nop
 8015f7c:	e7fe      	b.n	8015f7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f80:	699a      	ldr	r2, [r3, #24]
 8015f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f84:	18d1      	adds	r1, r2, r3
 8015f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f8c:	f7ff ff06 	bl	8015d9c <prvInsertTimerInActiveList>
					break;
 8015f90:	e015      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f98:	f003 0302 	and.w	r3, r3, #2
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d103      	bne.n	8015fa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fa2:	f000 fbdd 	bl	8016760 <vPortFree>
 8015fa6:	e00a      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fae:	f023 0301 	bic.w	r3, r3, #1
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015fba:	e000      	b.n	8015fbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015fbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015fbe:	4b08      	ldr	r3, [pc, #32]	; (8015fe0 <prvProcessReceivedCommands+0x1c0>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	1d39      	adds	r1, r7, #4
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fe f998 	bl	80142fc <xQueueReceive>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	f47f af2a 	bne.w	8015e28 <prvProcessReceivedCommands+0x8>
	}
}
 8015fd4:	bf00      	nop
 8015fd6:	bf00      	nop
 8015fd8:	3730      	adds	r7, #48	; 0x30
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	20002474 	.word	0x20002474

08015fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b088      	sub	sp, #32
 8015fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015fea:	e048      	b.n	801607e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015fec:	4b2d      	ldr	r3, [pc, #180]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ff6:	4b2b      	ldr	r3, [pc, #172]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68db      	ldr	r3, [r3, #12]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	3304      	adds	r3, #4
 8016004:	4618      	mov	r0, r3
 8016006:	f7fd fe35 	bl	8013c74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	6a1b      	ldr	r3, [r3, #32]
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016018:	f003 0304 	and.w	r3, r3, #4
 801601c:	2b00      	cmp	r3, #0
 801601e:	d02e      	beq.n	801607e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	699b      	ldr	r3, [r3, #24]
 8016024:	693a      	ldr	r2, [r7, #16]
 8016026:	4413      	add	r3, r2
 8016028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	429a      	cmp	r2, r3
 8016030:	d90e      	bls.n	8016050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	68ba      	ldr	r2, [r7, #8]
 8016036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801603e:	4b19      	ldr	r3, [pc, #100]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8016040:	681a      	ldr	r2, [r3, #0]
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	3304      	adds	r3, #4
 8016046:	4619      	mov	r1, r3
 8016048:	4610      	mov	r0, r2
 801604a:	f7fd fdda 	bl	8013c02 <vListInsert>
 801604e:	e016      	b.n	801607e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016050:	2300      	movs	r3, #0
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	2300      	movs	r3, #0
 8016056:	693a      	ldr	r2, [r7, #16]
 8016058:	2100      	movs	r1, #0
 801605a:	68f8      	ldr	r0, [r7, #12]
 801605c:	f7ff fd60 	bl	8015b20 <xTimerGenericCommand>
 8016060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10a      	bne.n	801607e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801606c:	f383 8811 	msr	BASEPRI, r3
 8016070:	f3bf 8f6f 	isb	sy
 8016074:	f3bf 8f4f 	dsb	sy
 8016078:	603b      	str	r3, [r7, #0]
}
 801607a:	bf00      	nop
 801607c:	e7fe      	b.n	801607c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801607e:	4b09      	ldr	r3, [pc, #36]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d1b1      	bne.n	8015fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016088:	4b06      	ldr	r3, [pc, #24]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801608e:	4b06      	ldr	r3, [pc, #24]	; (80160a8 <prvSwitchTimerLists+0xc4>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4a04      	ldr	r2, [pc, #16]	; (80160a4 <prvSwitchTimerLists+0xc0>)
 8016094:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016096:	4a04      	ldr	r2, [pc, #16]	; (80160a8 <prvSwitchTimerLists+0xc4>)
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	6013      	str	r3, [r2, #0]
}
 801609c:	bf00      	nop
 801609e:	3718      	adds	r7, #24
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	2000246c 	.word	0x2000246c
 80160a8:	20002470 	.word	0x20002470

080160ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80160b2:	f000 f967 	bl	8016384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80160b6:	4b15      	ldr	r3, [pc, #84]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d120      	bne.n	8016100 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80160be:	4814      	ldr	r0, [pc, #80]	; (8016110 <prvCheckForValidListAndQueue+0x64>)
 80160c0:	f7fd fd4e 	bl	8013b60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80160c4:	4813      	ldr	r0, [pc, #76]	; (8016114 <prvCheckForValidListAndQueue+0x68>)
 80160c6:	f7fd fd4b 	bl	8013b60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80160ca:	4b13      	ldr	r3, [pc, #76]	; (8016118 <prvCheckForValidListAndQueue+0x6c>)
 80160cc:	4a10      	ldr	r2, [pc, #64]	; (8016110 <prvCheckForValidListAndQueue+0x64>)
 80160ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80160d0:	4b12      	ldr	r3, [pc, #72]	; (801611c <prvCheckForValidListAndQueue+0x70>)
 80160d2:	4a10      	ldr	r2, [pc, #64]	; (8016114 <prvCheckForValidListAndQueue+0x68>)
 80160d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80160d6:	2300      	movs	r3, #0
 80160d8:	9300      	str	r3, [sp, #0]
 80160da:	4b11      	ldr	r3, [pc, #68]	; (8016120 <prvCheckForValidListAndQueue+0x74>)
 80160dc:	4a11      	ldr	r2, [pc, #68]	; (8016124 <prvCheckForValidListAndQueue+0x78>)
 80160de:	2110      	movs	r1, #16
 80160e0:	200a      	movs	r0, #10
 80160e2:	f7fd fe59 	bl	8013d98 <xQueueGenericCreateStatic>
 80160e6:	4603      	mov	r3, r0
 80160e8:	4a08      	ldr	r2, [pc, #32]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80160ec:	4b07      	ldr	r3, [pc, #28]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d005      	beq.n	8016100 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80160f4:	4b05      	ldr	r3, [pc, #20]	; (801610c <prvCheckForValidListAndQueue+0x60>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	490b      	ldr	r1, [pc, #44]	; (8016128 <prvCheckForValidListAndQueue+0x7c>)
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7fe fc12 	bl	8014924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016100:	f000 f970 	bl	80163e4 <vPortExitCritical>
}
 8016104:	bf00      	nop
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	20002474 	.word	0x20002474
 8016110:	20002444 	.word	0x20002444
 8016114:	20002458 	.word	0x20002458
 8016118:	2000246c 	.word	0x2000246c
 801611c:	20002470 	.word	0x20002470
 8016120:	20002520 	.word	0x20002520
 8016124:	20002480 	.word	0x20002480
 8016128:	08018d40 	.word	0x08018d40

0801612c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801612c:	b480      	push	{r7}
 801612e:	b085      	sub	sp, #20
 8016130:	af00      	add	r7, sp, #0
 8016132:	60f8      	str	r0, [r7, #12]
 8016134:	60b9      	str	r1, [r7, #8]
 8016136:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	3b04      	subs	r3, #4
 801613c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	3b04      	subs	r3, #4
 801614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	f023 0201 	bic.w	r2, r3, #1
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	3b04      	subs	r3, #4
 801615a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801615c:	4a0c      	ldr	r2, [pc, #48]	; (8016190 <pxPortInitialiseStack+0x64>)
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	3b14      	subs	r3, #20
 8016166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3b04      	subs	r3, #4
 8016172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	f06f 0202 	mvn.w	r2, #2
 801617a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	3b20      	subs	r3, #32
 8016180:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016182:	68fb      	ldr	r3, [r7, #12]
}
 8016184:	4618      	mov	r0, r3
 8016186:	3714      	adds	r7, #20
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr
 8016190:	08016195 	.word	0x08016195

08016194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016194:	b480      	push	{r7}
 8016196:	b085      	sub	sp, #20
 8016198:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801619a:	2300      	movs	r3, #0
 801619c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801619e:	4b12      	ldr	r3, [pc, #72]	; (80161e8 <prvTaskExitError+0x54>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161a6:	d00a      	beq.n	80161be <prvTaskExitError+0x2a>
	__asm volatile
 80161a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ac:	f383 8811 	msr	BASEPRI, r3
 80161b0:	f3bf 8f6f 	isb	sy
 80161b4:	f3bf 8f4f 	dsb	sy
 80161b8:	60fb      	str	r3, [r7, #12]
}
 80161ba:	bf00      	nop
 80161bc:	e7fe      	b.n	80161bc <prvTaskExitError+0x28>
	__asm volatile
 80161be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161c2:	f383 8811 	msr	BASEPRI, r3
 80161c6:	f3bf 8f6f 	isb	sy
 80161ca:	f3bf 8f4f 	dsb	sy
 80161ce:	60bb      	str	r3, [r7, #8]
}
 80161d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80161d2:	bf00      	nop
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d0fc      	beq.n	80161d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80161da:	bf00      	nop
 80161dc:	bf00      	nop
 80161de:	3714      	adds	r7, #20
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr
 80161e8:	20001440 	.word	0x20001440
 80161ec:	00000000 	.word	0x00000000

080161f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80161f0:	4b07      	ldr	r3, [pc, #28]	; (8016210 <pxCurrentTCBConst2>)
 80161f2:	6819      	ldr	r1, [r3, #0]
 80161f4:	6808      	ldr	r0, [r1, #0]
 80161f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161fa:	f380 8809 	msr	PSP, r0
 80161fe:	f3bf 8f6f 	isb	sy
 8016202:	f04f 0000 	mov.w	r0, #0
 8016206:	f380 8811 	msr	BASEPRI, r0
 801620a:	4770      	bx	lr
 801620c:	f3af 8000 	nop.w

08016210 <pxCurrentTCBConst2>:
 8016210:	20001f44 	.word	0x20001f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016214:	bf00      	nop
 8016216:	bf00      	nop

08016218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016218:	4808      	ldr	r0, [pc, #32]	; (801623c <prvPortStartFirstTask+0x24>)
 801621a:	6800      	ldr	r0, [r0, #0]
 801621c:	6800      	ldr	r0, [r0, #0]
 801621e:	f380 8808 	msr	MSP, r0
 8016222:	f04f 0000 	mov.w	r0, #0
 8016226:	f380 8814 	msr	CONTROL, r0
 801622a:	b662      	cpsie	i
 801622c:	b661      	cpsie	f
 801622e:	f3bf 8f4f 	dsb	sy
 8016232:	f3bf 8f6f 	isb	sy
 8016236:	df00      	svc	0
 8016238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801623a:	bf00      	nop
 801623c:	e000ed08 	.word	0xe000ed08

08016240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b086      	sub	sp, #24
 8016244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016246:	4b46      	ldr	r3, [pc, #280]	; (8016360 <xPortStartScheduler+0x120>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	4a46      	ldr	r2, [pc, #280]	; (8016364 <xPortStartScheduler+0x124>)
 801624c:	4293      	cmp	r3, r2
 801624e:	d10a      	bne.n	8016266 <xPortStartScheduler+0x26>
	__asm volatile
 8016250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016254:	f383 8811 	msr	BASEPRI, r3
 8016258:	f3bf 8f6f 	isb	sy
 801625c:	f3bf 8f4f 	dsb	sy
 8016260:	613b      	str	r3, [r7, #16]
}
 8016262:	bf00      	nop
 8016264:	e7fe      	b.n	8016264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016266:	4b3e      	ldr	r3, [pc, #248]	; (8016360 <xPortStartScheduler+0x120>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	4a3f      	ldr	r2, [pc, #252]	; (8016368 <xPortStartScheduler+0x128>)
 801626c:	4293      	cmp	r3, r2
 801626e:	d10a      	bne.n	8016286 <xPortStartScheduler+0x46>
	__asm volatile
 8016270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016274:	f383 8811 	msr	BASEPRI, r3
 8016278:	f3bf 8f6f 	isb	sy
 801627c:	f3bf 8f4f 	dsb	sy
 8016280:	60fb      	str	r3, [r7, #12]
}
 8016282:	bf00      	nop
 8016284:	e7fe      	b.n	8016284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016286:	4b39      	ldr	r3, [pc, #228]	; (801636c <xPortStartScheduler+0x12c>)
 8016288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	b2db      	uxtb	r3, r3
 8016290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	22ff      	movs	r2, #255	; 0xff
 8016296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80162a0:	78fb      	ldrb	r3, [r7, #3]
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80162a8:	b2da      	uxtb	r2, r3
 80162aa:	4b31      	ldr	r3, [pc, #196]	; (8016370 <xPortStartScheduler+0x130>)
 80162ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80162ae:	4b31      	ldr	r3, [pc, #196]	; (8016374 <xPortStartScheduler+0x134>)
 80162b0:	2207      	movs	r2, #7
 80162b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162b4:	e009      	b.n	80162ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80162b6:	4b2f      	ldr	r3, [pc, #188]	; (8016374 <xPortStartScheduler+0x134>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	3b01      	subs	r3, #1
 80162bc:	4a2d      	ldr	r2, [pc, #180]	; (8016374 <xPortStartScheduler+0x134>)
 80162be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80162c0:	78fb      	ldrb	r3, [r7, #3]
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	005b      	lsls	r3, r3, #1
 80162c6:	b2db      	uxtb	r3, r3
 80162c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162ca:	78fb      	ldrb	r3, [r7, #3]
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162d2:	2b80      	cmp	r3, #128	; 0x80
 80162d4:	d0ef      	beq.n	80162b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80162d6:	4b27      	ldr	r3, [pc, #156]	; (8016374 <xPortStartScheduler+0x134>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	f1c3 0307 	rsb	r3, r3, #7
 80162de:	2b04      	cmp	r3, #4
 80162e0:	d00a      	beq.n	80162f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80162e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162e6:	f383 8811 	msr	BASEPRI, r3
 80162ea:	f3bf 8f6f 	isb	sy
 80162ee:	f3bf 8f4f 	dsb	sy
 80162f2:	60bb      	str	r3, [r7, #8]
}
 80162f4:	bf00      	nop
 80162f6:	e7fe      	b.n	80162f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80162f8:	4b1e      	ldr	r3, [pc, #120]	; (8016374 <xPortStartScheduler+0x134>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	021b      	lsls	r3, r3, #8
 80162fe:	4a1d      	ldr	r2, [pc, #116]	; (8016374 <xPortStartScheduler+0x134>)
 8016300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016302:	4b1c      	ldr	r3, [pc, #112]	; (8016374 <xPortStartScheduler+0x134>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801630a:	4a1a      	ldr	r2, [pc, #104]	; (8016374 <xPortStartScheduler+0x134>)
 801630c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	b2da      	uxtb	r2, r3
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016316:	4b18      	ldr	r3, [pc, #96]	; (8016378 <xPortStartScheduler+0x138>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	4a17      	ldr	r2, [pc, #92]	; (8016378 <xPortStartScheduler+0x138>)
 801631c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016322:	4b15      	ldr	r3, [pc, #84]	; (8016378 <xPortStartScheduler+0x138>)
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	4a14      	ldr	r2, [pc, #80]	; (8016378 <xPortStartScheduler+0x138>)
 8016328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801632c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801632e:	f000 f8dd 	bl	80164ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016332:	4b12      	ldr	r3, [pc, #72]	; (801637c <xPortStartScheduler+0x13c>)
 8016334:	2200      	movs	r2, #0
 8016336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016338:	f000 f8fc 	bl	8016534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801633c:	4b10      	ldr	r3, [pc, #64]	; (8016380 <xPortStartScheduler+0x140>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4a0f      	ldr	r2, [pc, #60]	; (8016380 <xPortStartScheduler+0x140>)
 8016342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016348:	f7ff ff66 	bl	8016218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801634c:	f7fe fff0 	bl	8015330 <vTaskSwitchContext>
	prvTaskExitError();
 8016350:	f7ff ff20 	bl	8016194 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016354:	2300      	movs	r3, #0
}
 8016356:	4618      	mov	r0, r3
 8016358:	3718      	adds	r7, #24
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	e000ed00 	.word	0xe000ed00
 8016364:	410fc271 	.word	0x410fc271
 8016368:	410fc270 	.word	0x410fc270
 801636c:	e000e400 	.word	0xe000e400
 8016370:	20002570 	.word	0x20002570
 8016374:	20002574 	.word	0x20002574
 8016378:	e000ed20 	.word	0xe000ed20
 801637c:	20001440 	.word	0x20001440
 8016380:	e000ef34 	.word	0xe000ef34

08016384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
	__asm volatile
 801638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801638e:	f383 8811 	msr	BASEPRI, r3
 8016392:	f3bf 8f6f 	isb	sy
 8016396:	f3bf 8f4f 	dsb	sy
 801639a:	607b      	str	r3, [r7, #4]
}
 801639c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801639e:	4b0f      	ldr	r3, [pc, #60]	; (80163dc <vPortEnterCritical+0x58>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	3301      	adds	r3, #1
 80163a4:	4a0d      	ldr	r2, [pc, #52]	; (80163dc <vPortEnterCritical+0x58>)
 80163a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80163a8:	4b0c      	ldr	r3, [pc, #48]	; (80163dc <vPortEnterCritical+0x58>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d10f      	bne.n	80163d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80163b0:	4b0b      	ldr	r3, [pc, #44]	; (80163e0 <vPortEnterCritical+0x5c>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d00a      	beq.n	80163d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80163ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163be:	f383 8811 	msr	BASEPRI, r3
 80163c2:	f3bf 8f6f 	isb	sy
 80163c6:	f3bf 8f4f 	dsb	sy
 80163ca:	603b      	str	r3, [r7, #0]
}
 80163cc:	bf00      	nop
 80163ce:	e7fe      	b.n	80163ce <vPortEnterCritical+0x4a>
	}
}
 80163d0:	bf00      	nop
 80163d2:	370c      	adds	r7, #12
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr
 80163dc:	20001440 	.word	0x20001440
 80163e0:	e000ed04 	.word	0xe000ed04

080163e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80163e4:	b480      	push	{r7}
 80163e6:	b083      	sub	sp, #12
 80163e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80163ea:	4b12      	ldr	r3, [pc, #72]	; (8016434 <vPortExitCritical+0x50>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d10a      	bne.n	8016408 <vPortExitCritical+0x24>
	__asm volatile
 80163f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f6:	f383 8811 	msr	BASEPRI, r3
 80163fa:	f3bf 8f6f 	isb	sy
 80163fe:	f3bf 8f4f 	dsb	sy
 8016402:	607b      	str	r3, [r7, #4]
}
 8016404:	bf00      	nop
 8016406:	e7fe      	b.n	8016406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016408:	4b0a      	ldr	r3, [pc, #40]	; (8016434 <vPortExitCritical+0x50>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	3b01      	subs	r3, #1
 801640e:	4a09      	ldr	r2, [pc, #36]	; (8016434 <vPortExitCritical+0x50>)
 8016410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016412:	4b08      	ldr	r3, [pc, #32]	; (8016434 <vPortExitCritical+0x50>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d105      	bne.n	8016426 <vPortExitCritical+0x42>
 801641a:	2300      	movs	r3, #0
 801641c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	f383 8811 	msr	BASEPRI, r3
}
 8016424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016426:	bf00      	nop
 8016428:	370c      	adds	r7, #12
 801642a:	46bd      	mov	sp, r7
 801642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016430:	4770      	bx	lr
 8016432:	bf00      	nop
 8016434:	20001440 	.word	0x20001440
	...

08016440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016440:	f3ef 8009 	mrs	r0, PSP
 8016444:	f3bf 8f6f 	isb	sy
 8016448:	4b15      	ldr	r3, [pc, #84]	; (80164a0 <pxCurrentTCBConst>)
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	f01e 0f10 	tst.w	lr, #16
 8016450:	bf08      	it	eq
 8016452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645a:	6010      	str	r0, [r2, #0]
 801645c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016464:	f380 8811 	msr	BASEPRI, r0
 8016468:	f3bf 8f4f 	dsb	sy
 801646c:	f3bf 8f6f 	isb	sy
 8016470:	f7fe ff5e 	bl	8015330 <vTaskSwitchContext>
 8016474:	f04f 0000 	mov.w	r0, #0
 8016478:	f380 8811 	msr	BASEPRI, r0
 801647c:	bc09      	pop	{r0, r3}
 801647e:	6819      	ldr	r1, [r3, #0]
 8016480:	6808      	ldr	r0, [r1, #0]
 8016482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016486:	f01e 0f10 	tst.w	lr, #16
 801648a:	bf08      	it	eq
 801648c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016490:	f380 8809 	msr	PSP, r0
 8016494:	f3bf 8f6f 	isb	sy
 8016498:	4770      	bx	lr
 801649a:	bf00      	nop
 801649c:	f3af 8000 	nop.w

080164a0 <pxCurrentTCBConst>:
 80164a0:	20001f44 	.word	0x20001f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80164a4:	bf00      	nop
 80164a6:	bf00      	nop

080164a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
	__asm volatile
 80164ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b2:	f383 8811 	msr	BASEPRI, r3
 80164b6:	f3bf 8f6f 	isb	sy
 80164ba:	f3bf 8f4f 	dsb	sy
 80164be:	607b      	str	r3, [r7, #4]
}
 80164c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80164c2:	f7fe fe77 	bl	80151b4 <xTaskIncrementTick>
 80164c6:	4603      	mov	r3, r0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d003      	beq.n	80164d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80164cc:	4b06      	ldr	r3, [pc, #24]	; (80164e8 <xPortSysTickHandler+0x40>)
 80164ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164d2:	601a      	str	r2, [r3, #0]
 80164d4:	2300      	movs	r3, #0
 80164d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	f383 8811 	msr	BASEPRI, r3
}
 80164de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80164e0:	bf00      	nop
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	e000ed04 	.word	0xe000ed04

080164ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80164ec:	b480      	push	{r7}
 80164ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80164f0:	4b0b      	ldr	r3, [pc, #44]	; (8016520 <vPortSetupTimerInterrupt+0x34>)
 80164f2:	2200      	movs	r2, #0
 80164f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80164f6:	4b0b      	ldr	r3, [pc, #44]	; (8016524 <vPortSetupTimerInterrupt+0x38>)
 80164f8:	2200      	movs	r2, #0
 80164fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80164fc:	4b0a      	ldr	r3, [pc, #40]	; (8016528 <vPortSetupTimerInterrupt+0x3c>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a0a      	ldr	r2, [pc, #40]	; (801652c <vPortSetupTimerInterrupt+0x40>)
 8016502:	fba2 2303 	umull	r2, r3, r2, r3
 8016506:	099b      	lsrs	r3, r3, #6
 8016508:	4a09      	ldr	r2, [pc, #36]	; (8016530 <vPortSetupTimerInterrupt+0x44>)
 801650a:	3b01      	subs	r3, #1
 801650c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801650e:	4b04      	ldr	r3, [pc, #16]	; (8016520 <vPortSetupTimerInterrupt+0x34>)
 8016510:	2207      	movs	r2, #7
 8016512:	601a      	str	r2, [r3, #0]
}
 8016514:	bf00      	nop
 8016516:	46bd      	mov	sp, r7
 8016518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651c:	4770      	bx	lr
 801651e:	bf00      	nop
 8016520:	e000e010 	.word	0xe000e010
 8016524:	e000e018 	.word	0xe000e018
 8016528:	20000080 	.word	0x20000080
 801652c:	10624dd3 	.word	0x10624dd3
 8016530:	e000e014 	.word	0xe000e014

08016534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016544 <vPortEnableVFP+0x10>
 8016538:	6801      	ldr	r1, [r0, #0]
 801653a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801653e:	6001      	str	r1, [r0, #0]
 8016540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016542:	bf00      	nop
 8016544:	e000ed88 	.word	0xe000ed88

08016548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016548:	b480      	push	{r7}
 801654a:	b085      	sub	sp, #20
 801654c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801654e:	f3ef 8305 	mrs	r3, IPSR
 8016552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b0f      	cmp	r3, #15
 8016558:	d914      	bls.n	8016584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801655a:	4a17      	ldr	r2, [pc, #92]	; (80165b8 <vPortValidateInterruptPriority+0x70>)
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	4413      	add	r3, r2
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016564:	4b15      	ldr	r3, [pc, #84]	; (80165bc <vPortValidateInterruptPriority+0x74>)
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	7afa      	ldrb	r2, [r7, #11]
 801656a:	429a      	cmp	r2, r3
 801656c:	d20a      	bcs.n	8016584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016572:	f383 8811 	msr	BASEPRI, r3
 8016576:	f3bf 8f6f 	isb	sy
 801657a:	f3bf 8f4f 	dsb	sy
 801657e:	607b      	str	r3, [r7, #4]
}
 8016580:	bf00      	nop
 8016582:	e7fe      	b.n	8016582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016584:	4b0e      	ldr	r3, [pc, #56]	; (80165c0 <vPortValidateInterruptPriority+0x78>)
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801658c:	4b0d      	ldr	r3, [pc, #52]	; (80165c4 <vPortValidateInterruptPriority+0x7c>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	429a      	cmp	r2, r3
 8016592:	d90a      	bls.n	80165aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016598:	f383 8811 	msr	BASEPRI, r3
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	f3bf 8f4f 	dsb	sy
 80165a4:	603b      	str	r3, [r7, #0]
}
 80165a6:	bf00      	nop
 80165a8:	e7fe      	b.n	80165a8 <vPortValidateInterruptPriority+0x60>
	}
 80165aa:	bf00      	nop
 80165ac:	3714      	adds	r7, #20
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr
 80165b6:	bf00      	nop
 80165b8:	e000e3f0 	.word	0xe000e3f0
 80165bc:	20002570 	.word	0x20002570
 80165c0:	e000ed0c 	.word	0xe000ed0c
 80165c4:	20002574 	.word	0x20002574

080165c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b08a      	sub	sp, #40	; 0x28
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80165d0:	2300      	movs	r3, #0
 80165d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80165d4:	f7fe fd1c 	bl	8015010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80165d8:	4b5b      	ldr	r3, [pc, #364]	; (8016748 <pvPortMalloc+0x180>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d101      	bne.n	80165e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80165e0:	f000 f920 	bl	8016824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80165e4:	4b59      	ldr	r3, [pc, #356]	; (801674c <pvPortMalloc+0x184>)
 80165e6:	681a      	ldr	r2, [r3, #0]
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	4013      	ands	r3, r2
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	f040 8093 	bne.w	8016718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d01d      	beq.n	8016634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80165f8:	2208      	movs	r2, #8
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	4413      	add	r3, r2
 80165fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f003 0307 	and.w	r3, r3, #7
 8016606:	2b00      	cmp	r3, #0
 8016608:	d014      	beq.n	8016634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f023 0307 	bic.w	r3, r3, #7
 8016610:	3308      	adds	r3, #8
 8016612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f003 0307 	and.w	r3, r3, #7
 801661a:	2b00      	cmp	r3, #0
 801661c:	d00a      	beq.n	8016634 <pvPortMalloc+0x6c>
	__asm volatile
 801661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016622:	f383 8811 	msr	BASEPRI, r3
 8016626:	f3bf 8f6f 	isb	sy
 801662a:	f3bf 8f4f 	dsb	sy
 801662e:	617b      	str	r3, [r7, #20]
}
 8016630:	bf00      	nop
 8016632:	e7fe      	b.n	8016632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d06e      	beq.n	8016718 <pvPortMalloc+0x150>
 801663a:	4b45      	ldr	r3, [pc, #276]	; (8016750 <pvPortMalloc+0x188>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	687a      	ldr	r2, [r7, #4]
 8016640:	429a      	cmp	r2, r3
 8016642:	d869      	bhi.n	8016718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016644:	4b43      	ldr	r3, [pc, #268]	; (8016754 <pvPortMalloc+0x18c>)
 8016646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016648:	4b42      	ldr	r3, [pc, #264]	; (8016754 <pvPortMalloc+0x18c>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801664e:	e004      	b.n	801665a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	687a      	ldr	r2, [r7, #4]
 8016660:	429a      	cmp	r2, r3
 8016662:	d903      	bls.n	801666c <pvPortMalloc+0xa4>
 8016664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d1f1      	bne.n	8016650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801666c:	4b36      	ldr	r3, [pc, #216]	; (8016748 <pvPortMalloc+0x180>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016672:	429a      	cmp	r2, r3
 8016674:	d050      	beq.n	8016718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016676:	6a3b      	ldr	r3, [r7, #32]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2208      	movs	r2, #8
 801667c:	4413      	add	r3, r2
 801667e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016682:	681a      	ldr	r2, [r3, #0]
 8016684:	6a3b      	ldr	r3, [r7, #32]
 8016686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801668a:	685a      	ldr	r2, [r3, #4]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	1ad2      	subs	r2, r2, r3
 8016690:	2308      	movs	r3, #8
 8016692:	005b      	lsls	r3, r3, #1
 8016694:	429a      	cmp	r2, r3
 8016696:	d91f      	bls.n	80166d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	4413      	add	r3, r2
 801669e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80166a0:	69bb      	ldr	r3, [r7, #24]
 80166a2:	f003 0307 	and.w	r3, r3, #7
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d00a      	beq.n	80166c0 <pvPortMalloc+0xf8>
	__asm volatile
 80166aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ae:	f383 8811 	msr	BASEPRI, r3
 80166b2:	f3bf 8f6f 	isb	sy
 80166b6:	f3bf 8f4f 	dsb	sy
 80166ba:	613b      	str	r3, [r7, #16]
}
 80166bc:	bf00      	nop
 80166be:	e7fe      	b.n	80166be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80166c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c2:	685a      	ldr	r2, [r3, #4]
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	1ad2      	subs	r2, r2, r3
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80166cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80166d2:	69b8      	ldr	r0, [r7, #24]
 80166d4:	f000 f90a 	bl	80168ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80166d8:	4b1d      	ldr	r3, [pc, #116]	; (8016750 <pvPortMalloc+0x188>)
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	1ad3      	subs	r3, r2, r3
 80166e2:	4a1b      	ldr	r2, [pc, #108]	; (8016750 <pvPortMalloc+0x188>)
 80166e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80166e6:	4b1a      	ldr	r3, [pc, #104]	; (8016750 <pvPortMalloc+0x188>)
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	4b1b      	ldr	r3, [pc, #108]	; (8016758 <pvPortMalloc+0x190>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d203      	bcs.n	80166fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80166f2:	4b17      	ldr	r3, [pc, #92]	; (8016750 <pvPortMalloc+0x188>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	4a18      	ldr	r2, [pc, #96]	; (8016758 <pvPortMalloc+0x190>)
 80166f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80166fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fc:	685a      	ldr	r2, [r3, #4]
 80166fe:	4b13      	ldr	r3, [pc, #76]	; (801674c <pvPortMalloc+0x184>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	431a      	orrs	r2, r3
 8016704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670a:	2200      	movs	r2, #0
 801670c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801670e:	4b13      	ldr	r3, [pc, #76]	; (801675c <pvPortMalloc+0x194>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	3301      	adds	r3, #1
 8016714:	4a11      	ldr	r2, [pc, #68]	; (801675c <pvPortMalloc+0x194>)
 8016716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016718:	f7fe fc88 	bl	801502c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	f003 0307 	and.w	r3, r3, #7
 8016722:	2b00      	cmp	r3, #0
 8016724:	d00a      	beq.n	801673c <pvPortMalloc+0x174>
	__asm volatile
 8016726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801672a:	f383 8811 	msr	BASEPRI, r3
 801672e:	f3bf 8f6f 	isb	sy
 8016732:	f3bf 8f4f 	dsb	sy
 8016736:	60fb      	str	r3, [r7, #12]
}
 8016738:	bf00      	nop
 801673a:	e7fe      	b.n	801673a <pvPortMalloc+0x172>
	return pvReturn;
 801673c:	69fb      	ldr	r3, [r7, #28]
}
 801673e:	4618      	mov	r0, r3
 8016740:	3728      	adds	r7, #40	; 0x28
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	2001ac20 	.word	0x2001ac20
 801674c:	2001ac34 	.word	0x2001ac34
 8016750:	2001ac24 	.word	0x2001ac24
 8016754:	2001ac18 	.word	0x2001ac18
 8016758:	2001ac28 	.word	0x2001ac28
 801675c:	2001ac2c 	.word	0x2001ac2c

08016760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b086      	sub	sp, #24
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d04d      	beq.n	801680e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016772:	2308      	movs	r3, #8
 8016774:	425b      	negs	r3, r3
 8016776:	697a      	ldr	r2, [r7, #20]
 8016778:	4413      	add	r3, r2
 801677a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	685a      	ldr	r2, [r3, #4]
 8016784:	4b24      	ldr	r3, [pc, #144]	; (8016818 <vPortFree+0xb8>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	4013      	ands	r3, r2
 801678a:	2b00      	cmp	r3, #0
 801678c:	d10a      	bne.n	80167a4 <vPortFree+0x44>
	__asm volatile
 801678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016792:	f383 8811 	msr	BASEPRI, r3
 8016796:	f3bf 8f6f 	isb	sy
 801679a:	f3bf 8f4f 	dsb	sy
 801679e:	60fb      	str	r3, [r7, #12]
}
 80167a0:	bf00      	nop
 80167a2:	e7fe      	b.n	80167a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00a      	beq.n	80167c2 <vPortFree+0x62>
	__asm volatile
 80167ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b0:	f383 8811 	msr	BASEPRI, r3
 80167b4:	f3bf 8f6f 	isb	sy
 80167b8:	f3bf 8f4f 	dsb	sy
 80167bc:	60bb      	str	r3, [r7, #8]
}
 80167be:	bf00      	nop
 80167c0:	e7fe      	b.n	80167c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	685a      	ldr	r2, [r3, #4]
 80167c6:	4b14      	ldr	r3, [pc, #80]	; (8016818 <vPortFree+0xb8>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4013      	ands	r3, r2
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d01e      	beq.n	801680e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d11a      	bne.n	801680e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	685a      	ldr	r2, [r3, #4]
 80167dc:	4b0e      	ldr	r3, [pc, #56]	; (8016818 <vPortFree+0xb8>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	43db      	mvns	r3, r3
 80167e2:	401a      	ands	r2, r3
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80167e8:	f7fe fc12 	bl	8015010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	685a      	ldr	r2, [r3, #4]
 80167f0:	4b0a      	ldr	r3, [pc, #40]	; (801681c <vPortFree+0xbc>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	4413      	add	r3, r2
 80167f6:	4a09      	ldr	r2, [pc, #36]	; (801681c <vPortFree+0xbc>)
 80167f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80167fa:	6938      	ldr	r0, [r7, #16]
 80167fc:	f000 f876 	bl	80168ec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016800:	4b07      	ldr	r3, [pc, #28]	; (8016820 <vPortFree+0xc0>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	3301      	adds	r3, #1
 8016806:	4a06      	ldr	r2, [pc, #24]	; (8016820 <vPortFree+0xc0>)
 8016808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801680a:	f7fe fc0f 	bl	801502c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801680e:	bf00      	nop
 8016810:	3718      	adds	r7, #24
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	2001ac34 	.word	0x2001ac34
 801681c:	2001ac24 	.word	0x2001ac24
 8016820:	2001ac30 	.word	0x2001ac30

08016824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016824:	b480      	push	{r7}
 8016826:	b085      	sub	sp, #20
 8016828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801682a:	4b29      	ldr	r3, [pc, #164]	; (80168d0 <prvHeapInit+0xac>)
 801682c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801682e:	4b29      	ldr	r3, [pc, #164]	; (80168d4 <prvHeapInit+0xb0>)
 8016830:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f003 0307 	and.w	r3, r3, #7
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00c      	beq.n	8016856 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	3307      	adds	r3, #7
 8016840:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	f023 0307 	bic.w	r3, r3, #7
 8016848:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801684a:	68ba      	ldr	r2, [r7, #8]
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	1ad3      	subs	r3, r2, r3
 8016850:	4a20      	ldr	r2, [pc, #128]	; (80168d4 <prvHeapInit+0xb0>)
 8016852:	4413      	add	r3, r2
 8016854:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801685a:	4a1f      	ldr	r2, [pc, #124]	; (80168d8 <prvHeapInit+0xb4>)
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016860:	4b1d      	ldr	r3, [pc, #116]	; (80168d8 <prvHeapInit+0xb4>)
 8016862:	2200      	movs	r2, #0
 8016864:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	68ba      	ldr	r2, [r7, #8]
 801686a:	4413      	add	r3, r2
 801686c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801686e:	2208      	movs	r2, #8
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	1a9b      	subs	r3, r3, r2
 8016874:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	f023 0307 	bic.w	r3, r3, #7
 801687c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	4a16      	ldr	r2, [pc, #88]	; (80168dc <prvHeapInit+0xb8>)
 8016882:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016884:	4b15      	ldr	r3, [pc, #84]	; (80168dc <prvHeapInit+0xb8>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	2200      	movs	r2, #0
 801688a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801688c:	4b13      	ldr	r3, [pc, #76]	; (80168dc <prvHeapInit+0xb8>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2200      	movs	r2, #0
 8016892:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	68fa      	ldr	r2, [r7, #12]
 801689c:	1ad2      	subs	r2, r2, r3
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80168a2:	4b0e      	ldr	r3, [pc, #56]	; (80168dc <prvHeapInit+0xb8>)
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	4a0c      	ldr	r2, [pc, #48]	; (80168e0 <prvHeapInit+0xbc>)
 80168b0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	685b      	ldr	r3, [r3, #4]
 80168b6:	4a0b      	ldr	r2, [pc, #44]	; (80168e4 <prvHeapInit+0xc0>)
 80168b8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80168ba:	4b0b      	ldr	r3, [pc, #44]	; (80168e8 <prvHeapInit+0xc4>)
 80168bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80168c0:	601a      	str	r2, [r3, #0]
}
 80168c2:	bf00      	nop
 80168c4:	3714      	adds	r7, #20
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	000186a0 	.word	0x000186a0
 80168d4:	20002578 	.word	0x20002578
 80168d8:	2001ac18 	.word	0x2001ac18
 80168dc:	2001ac20 	.word	0x2001ac20
 80168e0:	2001ac28 	.word	0x2001ac28
 80168e4:	2001ac24 	.word	0x2001ac24
 80168e8:	2001ac34 	.word	0x2001ac34

080168ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80168f4:	4b28      	ldr	r3, [pc, #160]	; (8016998 <prvInsertBlockIntoFreeList+0xac>)
 80168f6:	60fb      	str	r3, [r7, #12]
 80168f8:	e002      	b.n	8016900 <prvInsertBlockIntoFreeList+0x14>
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	60fb      	str	r3, [r7, #12]
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	687a      	ldr	r2, [r7, #4]
 8016906:	429a      	cmp	r2, r3
 8016908:	d8f7      	bhi.n	80168fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	68ba      	ldr	r2, [r7, #8]
 8016914:	4413      	add	r3, r2
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	429a      	cmp	r2, r3
 801691a:	d108      	bne.n	801692e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	685a      	ldr	r2, [r3, #4]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	441a      	add	r2, r3
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	685b      	ldr	r3, [r3, #4]
 8016936:	68ba      	ldr	r2, [r7, #8]
 8016938:	441a      	add	r2, r3
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	429a      	cmp	r2, r3
 8016940:	d118      	bne.n	8016974 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	4b15      	ldr	r3, [pc, #84]	; (801699c <prvInsertBlockIntoFreeList+0xb0>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	429a      	cmp	r2, r3
 801694c:	d00d      	beq.n	801696a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	685a      	ldr	r2, [r3, #4]
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	441a      	add	r2, r3
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	601a      	str	r2, [r3, #0]
 8016968:	e008      	b.n	801697c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801696a:	4b0c      	ldr	r3, [pc, #48]	; (801699c <prvInsertBlockIntoFreeList+0xb0>)
 801696c:	681a      	ldr	r2, [r3, #0]
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	601a      	str	r2, [r3, #0]
 8016972:	e003      	b.n	801697c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801697c:	68fa      	ldr	r2, [r7, #12]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	429a      	cmp	r2, r3
 8016982:	d002      	beq.n	801698a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801698a:	bf00      	nop
 801698c:	3714      	adds	r7, #20
 801698e:	46bd      	mov	sp, r7
 8016990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016994:	4770      	bx	lr
 8016996:	bf00      	nop
 8016998:	2001ac18 	.word	0x2001ac18
 801699c:	2001ac20 	.word	0x2001ac20

080169a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80169a0:	b480      	push	{r7}
 80169a2:	b083      	sub	sp, #12
 80169a4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80169a6:	4b24      	ldr	r3, [pc, #144]	; (8016a38 <_DoInit+0x98>)
 80169a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2203      	movs	r2, #3
 80169ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2203      	movs	r2, #3
 80169b4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	4a20      	ldr	r2, [pc, #128]	; (8016a3c <_DoInit+0x9c>)
 80169ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	4a20      	ldr	r2, [pc, #128]	; (8016a40 <_DoInit+0xa0>)
 80169c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80169c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2200      	movs	r2, #0
 80169ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2200      	movs	r2, #0
 80169da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	4a17      	ldr	r2, [pc, #92]	; (8016a3c <_DoInit+0x9c>)
 80169e0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	4a17      	ldr	r2, [pc, #92]	; (8016a44 <_DoInit+0xa4>)
 80169e6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2210      	movs	r2, #16
 80169ec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2200      	movs	r2, #0
 80169f2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2200      	movs	r2, #0
 80169f8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2200      	movs	r2, #0
 80169fe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3307      	adds	r3, #7
 8016a04:	4a10      	ldr	r2, [pc, #64]	; (8016a48 <_DoInit+0xa8>)
 8016a06:	6810      	ldr	r0, [r2, #0]
 8016a08:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8016a0a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	4a0e      	ldr	r2, [pc, #56]	; (8016a4c <_DoInit+0xac>)
 8016a12:	6810      	ldr	r0, [r2, #0]
 8016a14:	6018      	str	r0, [r3, #0]
 8016a16:	8891      	ldrh	r1, [r2, #4]
 8016a18:	7992      	ldrb	r2, [r2, #6]
 8016a1a:	8099      	strh	r1, [r3, #4]
 8016a1c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8016a1e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2220      	movs	r2, #32
 8016a26:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8016a28:	f3bf 8f5f 	dmb	sy
}
 8016a2c:	bf00      	nop
 8016a2e:	370c      	adds	r7, #12
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr
 8016a38:	2001e8d8 	.word	0x2001e8d8
 8016a3c:	08018d48 	.word	0x08018d48
 8016a40:	2001ac38 	.word	0x2001ac38
 8016a44:	2001b038 	.word	0x2001b038
 8016a48:	08018d54 	.word	0x08018d54
 8016a4c:	08018d58 	.word	0x08018d58

08016a50 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b08c      	sub	sp, #48	; 0x30
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8016a5c:	4b3e      	ldr	r3, [pc, #248]	; (8016b58 <SEGGER_RTT_ReadNoLock+0x108>)
 8016a5e:	623b      	str	r3, [r7, #32]
 8016a60:	6a3b      	ldr	r3, [r7, #32]
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d101      	bne.n	8016a6e <SEGGER_RTT_ReadNoLock+0x1e>
 8016a6a:	f7ff ff99 	bl	80169a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8016a6e:	68fa      	ldr	r2, [r7, #12]
 8016a70:	4613      	mov	r3, r2
 8016a72:	005b      	lsls	r3, r3, #1
 8016a74:	4413      	add	r3, r2
 8016a76:	00db      	lsls	r3, r3, #3
 8016a78:	3360      	adds	r3, #96	; 0x60
 8016a7a:	4a37      	ldr	r2, [pc, #220]	; (8016b58 <SEGGER_RTT_ReadNoLock+0x108>)
 8016a7c:	4413      	add	r3, r2
 8016a7e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	691b      	ldr	r3, [r3, #16]
 8016a88:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	68db      	ldr	r3, [r3, #12]
 8016a8e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8016a90:	2300      	movs	r3, #0
 8016a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8016a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d92b      	bls.n	8016af4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	689a      	ldr	r2, [r3, #8]
 8016aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8016aa6:	697a      	ldr	r2, [r7, #20]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	4293      	cmp	r3, r2
 8016aac:	bf28      	it	cs
 8016aae:	4613      	movcs	r3, r2
 8016ab0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8016ab2:	69fb      	ldr	r3, [r7, #28]
 8016ab4:	685a      	ldr	r2, [r3, #4]
 8016ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab8:	4413      	add	r3, r2
 8016aba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8016abc:	697a      	ldr	r2, [r7, #20]
 8016abe:	6939      	ldr	r1, [r7, #16]
 8016ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ac2:	f001 fa9b 	bl	8017ffc <memcpy>
    NumBytesRead += NumBytesRem;
 8016ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	4413      	add	r3, r2
 8016acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8016ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8016ad6:	687a      	ldr	r2, [r7, #4]
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	1ad3      	subs	r3, r2, r3
 8016adc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8016ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	4413      	add	r3, r2
 8016ae4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8016ae6:	69fb      	ldr	r3, [r7, #28]
 8016ae8:	689b      	ldr	r3, [r3, #8]
 8016aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016aec:	429a      	cmp	r2, r3
 8016aee:	d101      	bne.n	8016af4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8016af0:	2300      	movs	r3, #0
 8016af2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8016af4:	69ba      	ldr	r2, [r7, #24]
 8016af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af8:	1ad3      	subs	r3, r2, r3
 8016afa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8016afc:	697a      	ldr	r2, [r7, #20]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	4293      	cmp	r3, r2
 8016b02:	bf28      	it	cs
 8016b04:	4613      	movcs	r3, r2
 8016b06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d019      	beq.n	8016b42 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8016b0e:	69fb      	ldr	r3, [r7, #28]
 8016b10:	685a      	ldr	r2, [r3, #4]
 8016b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b14:	4413      	add	r3, r2
 8016b16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8016b18:	697a      	ldr	r2, [r7, #20]
 8016b1a:	6939      	ldr	r1, [r7, #16]
 8016b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b1e:	f001 fa6d 	bl	8017ffc <memcpy>
    NumBytesRead += NumBytesRem;
 8016b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	4413      	add	r3, r2
 8016b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8016b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	4413      	add	r3, r2
 8016b30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	1ad3      	subs	r3, r2, r3
 8016b38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8016b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	4413      	add	r3, r2
 8016b40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8016b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d002      	beq.n	8016b4e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3730      	adds	r7, #48	; 0x30
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	2001e8d8 	.word	0x2001e8d8

08016b5c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b088      	sub	sp, #32
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
 8016b68:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8016b6a:	4b3d      	ldr	r3, [pc, #244]	; (8016c60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8016b6c:	61bb      	str	r3, [r7, #24]
 8016b6e:	69bb      	ldr	r3, [r7, #24]
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d101      	bne.n	8016b7c <SEGGER_RTT_AllocUpBuffer+0x20>
 8016b78:	f7ff ff12 	bl	80169a0 <_DoInit>
  SEGGER_RTT_LOCK();
 8016b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8016b80:	f04f 0120 	mov.w	r1, #32
 8016b84:	f381 8811 	msr	BASEPRI, r1
 8016b88:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8016b8a:	4b35      	ldr	r3, [pc, #212]	; (8016c60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8016b8c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8016b92:	6939      	ldr	r1, [r7, #16]
 8016b94:	69fb      	ldr	r3, [r7, #28]
 8016b96:	1c5a      	adds	r2, r3, #1
 8016b98:	4613      	mov	r3, r2
 8016b9a:	005b      	lsls	r3, r3, #1
 8016b9c:	4413      	add	r3, r2
 8016b9e:	00db      	lsls	r3, r3, #3
 8016ba0:	440b      	add	r3, r1
 8016ba2:	3304      	adds	r3, #4
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d008      	beq.n	8016bbc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	3301      	adds	r3, #1
 8016bae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	691b      	ldr	r3, [r3, #16]
 8016bb4:	69fa      	ldr	r2, [r7, #28]
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	dbeb      	blt.n	8016b92 <SEGGER_RTT_AllocUpBuffer+0x36>
 8016bba:	e000      	b.n	8016bbe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8016bbc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	691b      	ldr	r3, [r3, #16]
 8016bc2:	69fa      	ldr	r2, [r7, #28]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	da3f      	bge.n	8016c48 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8016bc8:	6939      	ldr	r1, [r7, #16]
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	1c5a      	adds	r2, r3, #1
 8016bce:	4613      	mov	r3, r2
 8016bd0:	005b      	lsls	r3, r3, #1
 8016bd2:	4413      	add	r3, r2
 8016bd4:	00db      	lsls	r3, r3, #3
 8016bd6:	440b      	add	r3, r1
 8016bd8:	68fa      	ldr	r2, [r7, #12]
 8016bda:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8016bdc:	6939      	ldr	r1, [r7, #16]
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	1c5a      	adds	r2, r3, #1
 8016be2:	4613      	mov	r3, r2
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	4413      	add	r3, r2
 8016be8:	00db      	lsls	r3, r3, #3
 8016bea:	440b      	add	r3, r1
 8016bec:	3304      	adds	r3, #4
 8016bee:	68ba      	ldr	r2, [r7, #8]
 8016bf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8016bf2:	6939      	ldr	r1, [r7, #16]
 8016bf4:	69fa      	ldr	r2, [r7, #28]
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	005b      	lsls	r3, r3, #1
 8016bfa:	4413      	add	r3, r2
 8016bfc:	00db      	lsls	r3, r3, #3
 8016bfe:	440b      	add	r3, r1
 8016c00:	3320      	adds	r3, #32
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8016c06:	6939      	ldr	r1, [r7, #16]
 8016c08:	69fa      	ldr	r2, [r7, #28]
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	005b      	lsls	r3, r3, #1
 8016c0e:	4413      	add	r3, r2
 8016c10:	00db      	lsls	r3, r3, #3
 8016c12:	440b      	add	r3, r1
 8016c14:	3328      	adds	r3, #40	; 0x28
 8016c16:	2200      	movs	r2, #0
 8016c18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8016c1a:	6939      	ldr	r1, [r7, #16]
 8016c1c:	69fa      	ldr	r2, [r7, #28]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	005b      	lsls	r3, r3, #1
 8016c22:	4413      	add	r3, r2
 8016c24:	00db      	lsls	r3, r3, #3
 8016c26:	440b      	add	r3, r1
 8016c28:	3324      	adds	r3, #36	; 0x24
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8016c2e:	6939      	ldr	r1, [r7, #16]
 8016c30:	69fa      	ldr	r2, [r7, #28]
 8016c32:	4613      	mov	r3, r2
 8016c34:	005b      	lsls	r3, r3, #1
 8016c36:	4413      	add	r3, r2
 8016c38:	00db      	lsls	r3, r3, #3
 8016c3a:	440b      	add	r3, r1
 8016c3c:	332c      	adds	r3, #44	; 0x2c
 8016c3e:	683a      	ldr	r2, [r7, #0]
 8016c40:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8016c42:	f3bf 8f5f 	dmb	sy
 8016c46:	e002      	b.n	8016c4e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8016c48:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8016c54:	69fb      	ldr	r3, [r7, #28]
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3720      	adds	r7, #32
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	2001e8d8 	.word	0x2001e8d8

08016c64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b08a      	sub	sp, #40	; 0x28
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	60f8      	str	r0, [r7, #12]
 8016c6c:	60b9      	str	r1, [r7, #8]
 8016c6e:	607a      	str	r2, [r7, #4]
 8016c70:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8016c72:	4b21      	ldr	r3, [pc, #132]	; (8016cf8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8016c74:	623b      	str	r3, [r7, #32]
 8016c76:	6a3b      	ldr	r3, [r7, #32]
 8016c78:	781b      	ldrb	r3, [r3, #0]
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d101      	bne.n	8016c84 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8016c80:	f7ff fe8e 	bl	80169a0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8016c84:	4b1c      	ldr	r3, [pc, #112]	; (8016cf8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8016c86:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	2b02      	cmp	r3, #2
 8016c8c:	d82c      	bhi.n	8016ce8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8016c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8016c92:	f04f 0120 	mov.w	r1, #32
 8016c96:	f381 8811 	msr	BASEPRI, r1
 8016c9a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8016c9c:	68fa      	ldr	r2, [r7, #12]
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	005b      	lsls	r3, r3, #1
 8016ca2:	4413      	add	r3, r2
 8016ca4:	00db      	lsls	r3, r3, #3
 8016ca6:	3360      	adds	r3, #96	; 0x60
 8016ca8:	69fa      	ldr	r2, [r7, #28]
 8016caa:	4413      	add	r3, r2
 8016cac:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00e      	beq.n	8016cd2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	68ba      	ldr	r2, [r7, #8]
 8016cb8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	687a      	ldr	r2, [r7, #4]
 8016cbe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	683a      	ldr	r2, [r7, #0]
 8016cc4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	2200      	movs	r2, #0
 8016cca:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cd6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8016cd8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8016cdc:	69bb      	ldr	r3, [r7, #24]
 8016cde:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ce6:	e002      	b.n	8016cee <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8016ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8016cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3728      	adds	r7, #40	; 0x28
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}
 8016cf8:	2001e8d8 	.word	0x2001e8d8

08016cfc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8016cfc:	b480      	push	{r7}
 8016cfe:	b087      	sub	sp, #28
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	60f8      	str	r0, [r7, #12]
 8016d04:	60b9      	str	r1, [r7, #8]
 8016d06:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d00f      	beq.n	8016d32 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8016d12:	e002      	b.n	8016d1a <_EncodeStr+0x1e>
      Len++;
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	3301      	adds	r3, #1
 8016d18:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8016d1a:	68ba      	ldr	r2, [r7, #8]
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	4413      	add	r3, r2
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d1f6      	bne.n	8016d14 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8016d26:	693a      	ldr	r2, [r7, #16]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d901      	bls.n	8016d32 <_EncodeStr+0x36>
      Len = Limit;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	2bfe      	cmp	r3, #254	; 0xfe
 8016d36:	d806      	bhi.n	8016d46 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	1c5a      	adds	r2, r3, #1
 8016d3c:	60fa      	str	r2, [r7, #12]
 8016d3e:	693a      	ldr	r2, [r7, #16]
 8016d40:	b2d2      	uxtb	r2, r2
 8016d42:	701a      	strb	r2, [r3, #0]
 8016d44:	e011      	b.n	8016d6a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	1c5a      	adds	r2, r3, #1
 8016d4a:	60fa      	str	r2, [r7, #12]
 8016d4c:	22ff      	movs	r2, #255	; 0xff
 8016d4e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	1c5a      	adds	r2, r3, #1
 8016d54:	60fa      	str	r2, [r7, #12]
 8016d56:	693a      	ldr	r2, [r7, #16]
 8016d58:	b2d2      	uxtb	r2, r2
 8016d5a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8016d5c:	693b      	ldr	r3, [r7, #16]
 8016d5e:	0a19      	lsrs	r1, r3, #8
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	1c5a      	adds	r2, r3, #1
 8016d64:	60fa      	str	r2, [r7, #12]
 8016d66:	b2ca      	uxtb	r2, r1
 8016d68:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8016d6e:	e00a      	b.n	8016d86 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8016d70:	68ba      	ldr	r2, [r7, #8]
 8016d72:	1c53      	adds	r3, r2, #1
 8016d74:	60bb      	str	r3, [r7, #8]
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	1c59      	adds	r1, r3, #1
 8016d7a:	60f9      	str	r1, [r7, #12]
 8016d7c:	7812      	ldrb	r2, [r2, #0]
 8016d7e:	701a      	strb	r2, [r3, #0]
    n++;
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	3301      	adds	r3, #1
 8016d84:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8016d86:	697a      	ldr	r2, [r7, #20]
 8016d88:	693b      	ldr	r3, [r7, #16]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d3f0      	bcc.n	8016d70 <_EncodeStr+0x74>
  }
  return pPayload;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	371c      	adds	r7, #28
 8016d94:	46bd      	mov	sp, r7
 8016d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9a:	4770      	bx	lr

08016d9c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8016d9c:	b480      	push	{r7}
 8016d9e:	b083      	sub	sp, #12
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	3304      	adds	r3, #4
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	370c      	adds	r7, #12
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr

08016db4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8016dba:	4b36      	ldr	r3, [pc, #216]	; (8016e94 <_HandleIncomingPacket+0xe0>)
 8016dbc:	7e1b      	ldrb	r3, [r3, #24]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	1cfb      	adds	r3, r7, #3
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	f7ff fe43 	bl	8016a50 <SEGGER_RTT_ReadNoLock>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	dd54      	ble.n	8016e7e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8016dd4:	78fb      	ldrb	r3, [r7, #3]
 8016dd6:	2b80      	cmp	r3, #128	; 0x80
 8016dd8:	d032      	beq.n	8016e40 <_HandleIncomingPacket+0x8c>
 8016dda:	2b80      	cmp	r3, #128	; 0x80
 8016ddc:	dc42      	bgt.n	8016e64 <_HandleIncomingPacket+0xb0>
 8016dde:	2b07      	cmp	r3, #7
 8016de0:	dc16      	bgt.n	8016e10 <_HandleIncomingPacket+0x5c>
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	dd3e      	ble.n	8016e64 <_HandleIncomingPacket+0xb0>
 8016de6:	3b01      	subs	r3, #1
 8016de8:	2b06      	cmp	r3, #6
 8016dea:	d83b      	bhi.n	8016e64 <_HandleIncomingPacket+0xb0>
 8016dec:	a201      	add	r2, pc, #4	; (adr r2, 8016df4 <_HandleIncomingPacket+0x40>)
 8016dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016df2:	bf00      	nop
 8016df4:	08016e17 	.word	0x08016e17
 8016df8:	08016e1d 	.word	0x08016e1d
 8016dfc:	08016e23 	.word	0x08016e23
 8016e00:	08016e29 	.word	0x08016e29
 8016e04:	08016e2f 	.word	0x08016e2f
 8016e08:	08016e35 	.word	0x08016e35
 8016e0c:	08016e3b 	.word	0x08016e3b
 8016e10:	2b7f      	cmp	r3, #127	; 0x7f
 8016e12:	d036      	beq.n	8016e82 <_HandleIncomingPacket+0xce>
 8016e14:	e026      	b.n	8016e64 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8016e16:	f000 fba7 	bl	8017568 <SEGGER_SYSVIEW_Start>
      break;
 8016e1a:	e037      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8016e1c:	f000 fc5e 	bl	80176dc <SEGGER_SYSVIEW_Stop>
      break;
 8016e20:	e034      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8016e22:	f000 fe37 	bl	8017a94 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8016e26:	e031      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8016e28:	f000 fdfc 	bl	8017a24 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8016e2c:	e02e      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8016e2e:	f000 fc7b 	bl	8017728 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8016e32:	e02b      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8016e34:	f000 fff0 	bl	8017e18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8016e38:	e028      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8016e3a:	f000 ffcf 	bl	8017ddc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8016e3e:	e025      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8016e40:	4b14      	ldr	r3, [pc, #80]	; (8016e94 <_HandleIncomingPacket+0xe0>)
 8016e42:	7e1b      	ldrb	r3, [r3, #24]
 8016e44:	4618      	mov	r0, r3
 8016e46:	1cfb      	adds	r3, r7, #3
 8016e48:	2201      	movs	r2, #1
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	f7ff fe00 	bl	8016a50 <SEGGER_RTT_ReadNoLock>
 8016e50:	4603      	mov	r3, r0
 8016e52:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	dd15      	ble.n	8016e86 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8016e5a:	78fb      	ldrb	r3, [r7, #3]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f000 ff3d 	bl	8017cdc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8016e62:	e010      	b.n	8016e86 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8016e64:	78fb      	ldrb	r3, [r7, #3]
 8016e66:	b25b      	sxtb	r3, r3
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	da0e      	bge.n	8016e8a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8016e6c:	4b09      	ldr	r3, [pc, #36]	; (8016e94 <_HandleIncomingPacket+0xe0>)
 8016e6e:	7e1b      	ldrb	r3, [r3, #24]
 8016e70:	4618      	mov	r0, r3
 8016e72:	1cfb      	adds	r3, r7, #3
 8016e74:	2201      	movs	r2, #1
 8016e76:	4619      	mov	r1, r3
 8016e78:	f7ff fdea 	bl	8016a50 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8016e7c:	e005      	b.n	8016e8a <_HandleIncomingPacket+0xd6>
    }
  }
 8016e7e:	bf00      	nop
 8016e80:	e004      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
      break;
 8016e82:	bf00      	nop
 8016e84:	e002      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
      break;
 8016e86:	bf00      	nop
 8016e88:	e000      	b.n	8016e8c <_HandleIncomingPacket+0xd8>
      break;
 8016e8a:	bf00      	nop
}
 8016e8c:	bf00      	nop
 8016e8e:	3708      	adds	r7, #8
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	2001b450 	.word	0x2001b450

08016e98 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b08c      	sub	sp, #48	; 0x30
 8016e9c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8016ea2:	1d3b      	adds	r3, r7, #4
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8016ea8:	69fb      	ldr	r3, [r7, #28]
 8016eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016eac:	4b31      	ldr	r3, [pc, #196]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016eae:	695b      	ldr	r3, [r3, #20]
 8016eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8016eb2:	e00b      	b.n	8016ecc <_TrySendOverflowPacket+0x34>
 8016eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb6:	b2da      	uxtb	r2, r3
 8016eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eba:	1c59      	adds	r1, r3, #1
 8016ebc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016ec2:	b2d2      	uxtb	r2, r2
 8016ec4:	701a      	strb	r2, [r3, #0]
 8016ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec8:	09db      	lsrs	r3, r3, #7
 8016eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ece:	2b7f      	cmp	r3, #127	; 0x7f
 8016ed0:	d8f0      	bhi.n	8016eb4 <_TrySendOverflowPacket+0x1c>
 8016ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed4:	1c5a      	adds	r2, r3, #1
 8016ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eda:	b2d2      	uxtb	r2, r2
 8016edc:	701a      	strb	r2, [r3, #0]
 8016ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8016ee2:	4b25      	ldr	r3, [pc, #148]	; (8016f78 <_TrySendOverflowPacket+0xe0>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8016ee8:	4b22      	ldr	r3, [pc, #136]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016eea:	68db      	ldr	r3, [r3, #12]
 8016eec:	69ba      	ldr	r2, [r7, #24]
 8016eee:	1ad3      	subs	r3, r2, r3
 8016ef0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8016ef2:	69fb      	ldr	r3, [r7, #28]
 8016ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ef6:	697b      	ldr	r3, [r7, #20]
 8016ef8:	623b      	str	r3, [r7, #32]
 8016efa:	e00b      	b.n	8016f14 <_TrySendOverflowPacket+0x7c>
 8016efc:	6a3b      	ldr	r3, [r7, #32]
 8016efe:	b2da      	uxtb	r2, r3
 8016f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f02:	1c59      	adds	r1, r3, #1
 8016f04:	6279      	str	r1, [r7, #36]	; 0x24
 8016f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8016f0a:	b2d2      	uxtb	r2, r2
 8016f0c:	701a      	strb	r2, [r3, #0]
 8016f0e:	6a3b      	ldr	r3, [r7, #32]
 8016f10:	09db      	lsrs	r3, r3, #7
 8016f12:	623b      	str	r3, [r7, #32]
 8016f14:	6a3b      	ldr	r3, [r7, #32]
 8016f16:	2b7f      	cmp	r3, #127	; 0x7f
 8016f18:	d8f0      	bhi.n	8016efc <_TrySendOverflowPacket+0x64>
 8016f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1c:	1c5a      	adds	r2, r3, #1
 8016f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8016f20:	6a3a      	ldr	r2, [r7, #32]
 8016f22:	b2d2      	uxtb	r2, r2
 8016f24:	701a      	strb	r2, [r3, #0]
 8016f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f28:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8016f2a:	4b12      	ldr	r3, [pc, #72]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016f2c:	785b      	ldrb	r3, [r3, #1]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	1d3b      	adds	r3, r7, #4
 8016f32:	69fa      	ldr	r2, [r7, #28]
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	461a      	mov	r2, r3
 8016f38:	1d3b      	adds	r3, r7, #4
 8016f3a:	4619      	mov	r1, r3
 8016f3c:	f7e9 f948 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8016f40:	4603      	mov	r3, r0
 8016f42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d009      	beq.n	8016f5e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8016f4a:	4a0a      	ldr	r2, [pc, #40]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8016f50:	4b08      	ldr	r3, [pc, #32]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016f52:	781b      	ldrb	r3, [r3, #0]
 8016f54:	3b01      	subs	r3, #1
 8016f56:	b2da      	uxtb	r2, r3
 8016f58:	4b06      	ldr	r3, [pc, #24]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016f5a:	701a      	strb	r2, [r3, #0]
 8016f5c:	e004      	b.n	8016f68 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8016f5e:	4b05      	ldr	r3, [pc, #20]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016f60:	695b      	ldr	r3, [r3, #20]
 8016f62:	3301      	adds	r3, #1
 8016f64:	4a03      	ldr	r2, [pc, #12]	; (8016f74 <_TrySendOverflowPacket+0xdc>)
 8016f66:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8016f68:	693b      	ldr	r3, [r7, #16]
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	3730      	adds	r7, #48	; 0x30
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}
 8016f72:	bf00      	nop
 8016f74:	2001b450 	.word	0x2001b450
 8016f78:	e0001004 	.word	0xe0001004

08016f7c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b08a      	sub	sp, #40	; 0x28
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8016f88:	4b6c      	ldr	r3, [pc, #432]	; (801713c <_SendPacket+0x1c0>)
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d010      	beq.n	8016fb2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8016f90:	4b6a      	ldr	r3, [pc, #424]	; (801713c <_SendPacket+0x1c0>)
 8016f92:	781b      	ldrb	r3, [r3, #0]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	f000 80a3 	beq.w	80170e0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8016f9a:	4b68      	ldr	r3, [pc, #416]	; (801713c <_SendPacket+0x1c0>)
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	2b02      	cmp	r3, #2
 8016fa0:	d109      	bne.n	8016fb6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8016fa2:	f7ff ff79 	bl	8016e98 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8016fa6:	4b65      	ldr	r3, [pc, #404]	; (801713c <_SendPacket+0x1c0>)
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	2b01      	cmp	r3, #1
 8016fac:	f040 809a 	bne.w	80170e4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8016fb0:	e001      	b.n	8016fb6 <_SendPacket+0x3a>
    goto Send;
 8016fb2:	bf00      	nop
 8016fb4:	e000      	b.n	8016fb8 <_SendPacket+0x3c>
Send:
 8016fb6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2b1f      	cmp	r3, #31
 8016fbc:	d809      	bhi.n	8016fd2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8016fbe:	4b5f      	ldr	r3, [pc, #380]	; (801713c <_SendPacket+0x1c0>)
 8016fc0:	69da      	ldr	r2, [r3, #28]
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8016fc8:	f003 0301 	and.w	r3, r3, #1
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	f040 808b 	bne.w	80170e8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	2b17      	cmp	r3, #23
 8016fd6:	d807      	bhi.n	8016fe8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	3b01      	subs	r3, #1
 8016fdc:	60fb      	str	r3, [r7, #12]
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	b2da      	uxtb	r2, r3
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	701a      	strb	r2, [r3, #0]
 8016fe6:	e03d      	b.n	8017064 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8016fe8:	68ba      	ldr	r2, [r7, #8]
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	1ad3      	subs	r3, r2, r3
 8016fee:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8016ff0:	69fb      	ldr	r3, [r7, #28]
 8016ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8016ff4:	d912      	bls.n	801701c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8016ff6:	69fb      	ldr	r3, [r7, #28]
 8016ff8:	09da      	lsrs	r2, r3, #7
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	3b01      	subs	r3, #1
 8016ffe:	60fb      	str	r3, [r7, #12]
 8017000:	b2d2      	uxtb	r2, r2
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	b2db      	uxtb	r3, r3
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	3a01      	subs	r2, #1
 801700e:	60fa      	str	r2, [r7, #12]
 8017010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017014:	b2da      	uxtb	r2, r3
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	701a      	strb	r2, [r3, #0]
 801701a:	e006      	b.n	801702a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	3b01      	subs	r3, #1
 8017020:	60fb      	str	r3, [r7, #12]
 8017022:	69fb      	ldr	r3, [r7, #28]
 8017024:	b2da      	uxtb	r2, r3
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2b7f      	cmp	r3, #127	; 0x7f
 801702e:	d912      	bls.n	8017056 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	09da      	lsrs	r2, r3, #7
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	3b01      	subs	r3, #1
 8017038:	60fb      	str	r3, [r7, #12]
 801703a:	b2d2      	uxtb	r2, r2
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	b2db      	uxtb	r3, r3
 8017044:	68fa      	ldr	r2, [r7, #12]
 8017046:	3a01      	subs	r2, #1
 8017048:	60fa      	str	r2, [r7, #12]
 801704a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801704e:	b2da      	uxtb	r2, r3
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	701a      	strb	r2, [r3, #0]
 8017054:	e006      	b.n	8017064 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	3b01      	subs	r3, #1
 801705a:	60fb      	str	r3, [r7, #12]
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	b2da      	uxtb	r2, r3
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8017064:	4b36      	ldr	r3, [pc, #216]	; (8017140 <_SendPacket+0x1c4>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 801706a:	4b34      	ldr	r3, [pc, #208]	; (801713c <_SendPacket+0x1c0>)
 801706c:	68db      	ldr	r3, [r3, #12]
 801706e:	69ba      	ldr	r2, [r7, #24]
 8017070:	1ad3      	subs	r3, r2, r3
 8017072:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	627b      	str	r3, [r7, #36]	; 0x24
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	623b      	str	r3, [r7, #32]
 801707c:	e00b      	b.n	8017096 <_SendPacket+0x11a>
 801707e:	6a3b      	ldr	r3, [r7, #32]
 8017080:	b2da      	uxtb	r2, r3
 8017082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017084:	1c59      	adds	r1, r3, #1
 8017086:	6279      	str	r1, [r7, #36]	; 0x24
 8017088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801708c:	b2d2      	uxtb	r2, r2
 801708e:	701a      	strb	r2, [r3, #0]
 8017090:	6a3b      	ldr	r3, [r7, #32]
 8017092:	09db      	lsrs	r3, r3, #7
 8017094:	623b      	str	r3, [r7, #32]
 8017096:	6a3b      	ldr	r3, [r7, #32]
 8017098:	2b7f      	cmp	r3, #127	; 0x7f
 801709a:	d8f0      	bhi.n	801707e <_SendPacket+0x102>
 801709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709e:	1c5a      	adds	r2, r3, #1
 80170a0:	627a      	str	r2, [r7, #36]	; 0x24
 80170a2:	6a3a      	ldr	r2, [r7, #32]
 80170a4:	b2d2      	uxtb	r2, r2
 80170a6:	701a      	strb	r2, [r3, #0]
 80170a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170aa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80170ac:	4b23      	ldr	r3, [pc, #140]	; (801713c <_SendPacket+0x1c0>)
 80170ae:	785b      	ldrb	r3, [r3, #1]
 80170b0:	4618      	mov	r0, r3
 80170b2:	68ba      	ldr	r2, [r7, #8]
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	1ad3      	subs	r3, r2, r3
 80170b8:	461a      	mov	r2, r3
 80170ba:	68f9      	ldr	r1, [r7, #12]
 80170bc:	f7e9 f888 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80170c0:	4603      	mov	r3, r0
 80170c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80170c4:	693b      	ldr	r3, [r7, #16]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d003      	beq.n	80170d2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80170ca:	4a1c      	ldr	r2, [pc, #112]	; (801713c <_SendPacket+0x1c0>)
 80170cc:	69bb      	ldr	r3, [r7, #24]
 80170ce:	60d3      	str	r3, [r2, #12]
 80170d0:	e00b      	b.n	80170ea <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80170d2:	4b1a      	ldr	r3, [pc, #104]	; (801713c <_SendPacket+0x1c0>)
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	3301      	adds	r3, #1
 80170d8:	b2da      	uxtb	r2, r3
 80170da:	4b18      	ldr	r3, [pc, #96]	; (801713c <_SendPacket+0x1c0>)
 80170dc:	701a      	strb	r2, [r3, #0]
 80170de:	e004      	b.n	80170ea <_SendPacket+0x16e>
    goto SendDone;
 80170e0:	bf00      	nop
 80170e2:	e002      	b.n	80170ea <_SendPacket+0x16e>
      goto SendDone;
 80170e4:	bf00      	nop
 80170e6:	e000      	b.n	80170ea <_SendPacket+0x16e>
      goto SendDone;
 80170e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80170ea:	4b14      	ldr	r3, [pc, #80]	; (801713c <_SendPacket+0x1c0>)
 80170ec:	7e1b      	ldrb	r3, [r3, #24]
 80170ee:	4619      	mov	r1, r3
 80170f0:	4a14      	ldr	r2, [pc, #80]	; (8017144 <_SendPacket+0x1c8>)
 80170f2:	460b      	mov	r3, r1
 80170f4:	005b      	lsls	r3, r3, #1
 80170f6:	440b      	add	r3, r1
 80170f8:	00db      	lsls	r3, r3, #3
 80170fa:	4413      	add	r3, r2
 80170fc:	336c      	adds	r3, #108	; 0x6c
 80170fe:	681a      	ldr	r2, [r3, #0]
 8017100:	4b0e      	ldr	r3, [pc, #56]	; (801713c <_SendPacket+0x1c0>)
 8017102:	7e1b      	ldrb	r3, [r3, #24]
 8017104:	4618      	mov	r0, r3
 8017106:	490f      	ldr	r1, [pc, #60]	; (8017144 <_SendPacket+0x1c8>)
 8017108:	4603      	mov	r3, r0
 801710a:	005b      	lsls	r3, r3, #1
 801710c:	4403      	add	r3, r0
 801710e:	00db      	lsls	r3, r3, #3
 8017110:	440b      	add	r3, r1
 8017112:	3370      	adds	r3, #112	; 0x70
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	429a      	cmp	r2, r3
 8017118:	d00b      	beq.n	8017132 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 801711a:	4b08      	ldr	r3, [pc, #32]	; (801713c <_SendPacket+0x1c0>)
 801711c:	789b      	ldrb	r3, [r3, #2]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d107      	bne.n	8017132 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8017122:	4b06      	ldr	r3, [pc, #24]	; (801713c <_SendPacket+0x1c0>)
 8017124:	2201      	movs	r2, #1
 8017126:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8017128:	f7ff fe44 	bl	8016db4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 801712c:	4b03      	ldr	r3, [pc, #12]	; (801713c <_SendPacket+0x1c0>)
 801712e:	2200      	movs	r2, #0
 8017130:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8017132:	bf00      	nop
 8017134:	3728      	adds	r7, #40	; 0x28
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}
 801713a:	bf00      	nop
 801713c:	2001b450 	.word	0x2001b450
 8017140:	e0001004 	.word	0xe0001004
 8017144:	2001e8d8 	.word	0x2001e8d8

08017148 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8017148:	b580      	push	{r7, lr}
 801714a:	b086      	sub	sp, #24
 801714c:	af02      	add	r7, sp, #8
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	60b9      	str	r1, [r7, #8]
 8017152:	607a      	str	r2, [r7, #4]
 8017154:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8017156:	2300      	movs	r3, #0
 8017158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801715c:	4917      	ldr	r1, [pc, #92]	; (80171bc <SEGGER_SYSVIEW_Init+0x74>)
 801715e:	4818      	ldr	r0, [pc, #96]	; (80171c0 <SEGGER_SYSVIEW_Init+0x78>)
 8017160:	f7ff fcfc 	bl	8016b5c <SEGGER_RTT_AllocUpBuffer>
 8017164:	4603      	mov	r3, r0
 8017166:	b2da      	uxtb	r2, r3
 8017168:	4b16      	ldr	r3, [pc, #88]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 801716a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 801716c:	4b15      	ldr	r3, [pc, #84]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 801716e:	785a      	ldrb	r2, [r3, #1]
 8017170:	4b14      	ldr	r3, [pc, #80]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8017172:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8017174:	4b13      	ldr	r3, [pc, #76]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8017176:	7e1b      	ldrb	r3, [r3, #24]
 8017178:	4618      	mov	r0, r3
 801717a:	2300      	movs	r3, #0
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	2308      	movs	r3, #8
 8017180:	4a11      	ldr	r2, [pc, #68]	; (80171c8 <SEGGER_SYSVIEW_Init+0x80>)
 8017182:	490f      	ldr	r1, [pc, #60]	; (80171c0 <SEGGER_SYSVIEW_Init+0x78>)
 8017184:	f7ff fd6e 	bl	8016c64 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8017188:	4b0e      	ldr	r3, [pc, #56]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 801718a:	2200      	movs	r2, #0
 801718c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801718e:	4b0f      	ldr	r3, [pc, #60]	; (80171cc <SEGGER_SYSVIEW_Init+0x84>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	4a0c      	ldr	r2, [pc, #48]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8017194:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8017196:	4a0b      	ldr	r2, [pc, #44]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 801719c:	4a09      	ldr	r2, [pc, #36]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80171a2:	4a08      	ldr	r2, [pc, #32]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80171a8:	4a06      	ldr	r2, [pc, #24]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80171ae:	4b05      	ldr	r3, [pc, #20]	; (80171c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80171b0:	2200      	movs	r2, #0
 80171b2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80171b4:	bf00      	nop
 80171b6:	3710      	adds	r7, #16
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}
 80171bc:	2001b048 	.word	0x2001b048
 80171c0:	08018d60 	.word	0x08018d60
 80171c4:	2001b450 	.word	0x2001b450
 80171c8:	2001b448 	.word	0x2001b448
 80171cc:	e0001004 	.word	0xe0001004

080171d0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80171d0:	b480      	push	{r7}
 80171d2:	b083      	sub	sp, #12
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80171d8:	4a04      	ldr	r2, [pc, #16]	; (80171ec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	6113      	str	r3, [r2, #16]
}
 80171de:	bf00      	nop
 80171e0:	370c      	adds	r7, #12
 80171e2:	46bd      	mov	sp, r7
 80171e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e8:	4770      	bx	lr
 80171ea:	bf00      	nop
 80171ec:	2001b450 	.word	0x2001b450

080171f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b084      	sub	sp, #16
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80171f8:	f3ef 8311 	mrs	r3, BASEPRI
 80171fc:	f04f 0120 	mov.w	r1, #32
 8017200:	f381 8811 	msr	BASEPRI, r1
 8017204:	60fb      	str	r3, [r7, #12]
 8017206:	4808      	ldr	r0, [pc, #32]	; (8017228 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8017208:	f7ff fdc8 	bl	8016d9c <_PreparePacket>
 801720c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	68b9      	ldr	r1, [r7, #8]
 8017212:	68b8      	ldr	r0, [r7, #8]
 8017214:	f7ff feb2 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	f383 8811 	msr	BASEPRI, r3
}
 801721e:	bf00      	nop
 8017220:	3710      	adds	r7, #16
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	2001b480 	.word	0x2001b480

0801722c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 801722c:	b580      	push	{r7, lr}
 801722e:	b088      	sub	sp, #32
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8017236:	f3ef 8311 	mrs	r3, BASEPRI
 801723a:	f04f 0120 	mov.w	r1, #32
 801723e:	f381 8811 	msr	BASEPRI, r1
 8017242:	617b      	str	r3, [r7, #20]
 8017244:	4816      	ldr	r0, [pc, #88]	; (80172a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8017246:	f7ff fda9 	bl	8016d9c <_PreparePacket>
 801724a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	61fb      	str	r3, [r7, #28]
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	61bb      	str	r3, [r7, #24]
 8017258:	e00b      	b.n	8017272 <SEGGER_SYSVIEW_RecordU32+0x46>
 801725a:	69bb      	ldr	r3, [r7, #24]
 801725c:	b2da      	uxtb	r2, r3
 801725e:	69fb      	ldr	r3, [r7, #28]
 8017260:	1c59      	adds	r1, r3, #1
 8017262:	61f9      	str	r1, [r7, #28]
 8017264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017268:	b2d2      	uxtb	r2, r2
 801726a:	701a      	strb	r2, [r3, #0]
 801726c:	69bb      	ldr	r3, [r7, #24]
 801726e:	09db      	lsrs	r3, r3, #7
 8017270:	61bb      	str	r3, [r7, #24]
 8017272:	69bb      	ldr	r3, [r7, #24]
 8017274:	2b7f      	cmp	r3, #127	; 0x7f
 8017276:	d8f0      	bhi.n	801725a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	1c5a      	adds	r2, r3, #1
 801727c:	61fa      	str	r2, [r7, #28]
 801727e:	69ba      	ldr	r2, [r7, #24]
 8017280:	b2d2      	uxtb	r2, r2
 8017282:	701a      	strb	r2, [r3, #0]
 8017284:	69fb      	ldr	r3, [r7, #28]
 8017286:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8017288:	687a      	ldr	r2, [r7, #4]
 801728a:	68f9      	ldr	r1, [r7, #12]
 801728c:	6938      	ldr	r0, [r7, #16]
 801728e:	f7ff fe75 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017292:	697b      	ldr	r3, [r7, #20]
 8017294:	f383 8811 	msr	BASEPRI, r3
}
 8017298:	bf00      	nop
 801729a:	3720      	adds	r7, #32
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	2001b480 	.word	0x2001b480

080172a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b08c      	sub	sp, #48	; 0x30
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	60b9      	str	r1, [r7, #8]
 80172ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80172b0:	f3ef 8311 	mrs	r3, BASEPRI
 80172b4:	f04f 0120 	mov.w	r1, #32
 80172b8:	f381 8811 	msr	BASEPRI, r1
 80172bc:	61fb      	str	r3, [r7, #28]
 80172be:	4825      	ldr	r0, [pc, #148]	; (8017354 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80172c0:	f7ff fd6c 	bl	8016d9c <_PreparePacket>
 80172c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80172c6:	69bb      	ldr	r3, [r7, #24]
 80172c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80172d2:	e00b      	b.n	80172ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80172d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d6:	b2da      	uxtb	r2, r3
 80172d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172da:	1c59      	adds	r1, r3, #1
 80172dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80172de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80172e2:	b2d2      	uxtb	r2, r2
 80172e4:	701a      	strb	r2, [r3, #0]
 80172e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e8:	09db      	lsrs	r3, r3, #7
 80172ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80172ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ee:	2b7f      	cmp	r3, #127	; 0x7f
 80172f0:	d8f0      	bhi.n	80172d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80172f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f4:	1c5a      	adds	r2, r3, #1
 80172f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80172f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172fa:	b2d2      	uxtb	r2, r2
 80172fc:	701a      	strb	r2, [r3, #0]
 80172fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017300:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8017302:	697b      	ldr	r3, [r7, #20]
 8017304:	627b      	str	r3, [r7, #36]	; 0x24
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	623b      	str	r3, [r7, #32]
 801730a:	e00b      	b.n	8017324 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 801730c:	6a3b      	ldr	r3, [r7, #32]
 801730e:	b2da      	uxtb	r2, r3
 8017310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017312:	1c59      	adds	r1, r3, #1
 8017314:	6279      	str	r1, [r7, #36]	; 0x24
 8017316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801731a:	b2d2      	uxtb	r2, r2
 801731c:	701a      	strb	r2, [r3, #0]
 801731e:	6a3b      	ldr	r3, [r7, #32]
 8017320:	09db      	lsrs	r3, r3, #7
 8017322:	623b      	str	r3, [r7, #32]
 8017324:	6a3b      	ldr	r3, [r7, #32]
 8017326:	2b7f      	cmp	r3, #127	; 0x7f
 8017328:	d8f0      	bhi.n	801730c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 801732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801732c:	1c5a      	adds	r2, r3, #1
 801732e:	627a      	str	r2, [r7, #36]	; 0x24
 8017330:	6a3a      	ldr	r2, [r7, #32]
 8017332:	b2d2      	uxtb	r2, r2
 8017334:	701a      	strb	r2, [r3, #0]
 8017336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017338:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801733a:	68fa      	ldr	r2, [r7, #12]
 801733c:	6979      	ldr	r1, [r7, #20]
 801733e:	69b8      	ldr	r0, [r7, #24]
 8017340:	f7ff fe1c 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017344:	69fb      	ldr	r3, [r7, #28]
 8017346:	f383 8811 	msr	BASEPRI, r3
}
 801734a:	bf00      	nop
 801734c:	3730      	adds	r7, #48	; 0x30
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	2001b480 	.word	0x2001b480

08017358 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8017358:	b580      	push	{r7, lr}
 801735a:	b08e      	sub	sp, #56	; 0x38
 801735c:	af00      	add	r7, sp, #0
 801735e:	60f8      	str	r0, [r7, #12]
 8017360:	60b9      	str	r1, [r7, #8]
 8017362:	607a      	str	r2, [r7, #4]
 8017364:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8017366:	f3ef 8311 	mrs	r3, BASEPRI
 801736a:	f04f 0120 	mov.w	r1, #32
 801736e:	f381 8811 	msr	BASEPRI, r1
 8017372:	61fb      	str	r3, [r7, #28]
 8017374:	4832      	ldr	r0, [pc, #200]	; (8017440 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8017376:	f7ff fd11 	bl	8016d9c <_PreparePacket>
 801737a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801737c:	69bb      	ldr	r3, [r7, #24]
 801737e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	637b      	str	r3, [r7, #52]	; 0x34
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	633b      	str	r3, [r7, #48]	; 0x30
 8017388:	e00b      	b.n	80173a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 801738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801738c:	b2da      	uxtb	r2, r3
 801738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017390:	1c59      	adds	r1, r3, #1
 8017392:	6379      	str	r1, [r7, #52]	; 0x34
 8017394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017398:	b2d2      	uxtb	r2, r2
 801739a:	701a      	strb	r2, [r3, #0]
 801739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739e:	09db      	lsrs	r3, r3, #7
 80173a0:	633b      	str	r3, [r7, #48]	; 0x30
 80173a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a4:	2b7f      	cmp	r3, #127	; 0x7f
 80173a6:	d8f0      	bhi.n	801738a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80173a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173aa:	1c5a      	adds	r2, r3, #1
 80173ac:	637a      	str	r2, [r7, #52]	; 0x34
 80173ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173b0:	b2d2      	uxtb	r2, r2
 80173b2:	701a      	strb	r2, [r3, #0]
 80173b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	62bb      	str	r3, [r7, #40]	; 0x28
 80173c0:	e00b      	b.n	80173da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80173c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c4:	b2da      	uxtb	r2, r3
 80173c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c8:	1c59      	adds	r1, r3, #1
 80173ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80173cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80173d0:	b2d2      	uxtb	r2, r2
 80173d2:	701a      	strb	r2, [r3, #0]
 80173d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d6:	09db      	lsrs	r3, r3, #7
 80173d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80173da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173dc:	2b7f      	cmp	r3, #127	; 0x7f
 80173de:	d8f0      	bhi.n	80173c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80173e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e2:	1c5a      	adds	r2, r3, #1
 80173e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80173e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173e8:	b2d2      	uxtb	r2, r2
 80173ea:	701a      	strb	r2, [r3, #0]
 80173ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	627b      	str	r3, [r7, #36]	; 0x24
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	623b      	str	r3, [r7, #32]
 80173f8:	e00b      	b.n	8017412 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80173fa:	6a3b      	ldr	r3, [r7, #32]
 80173fc:	b2da      	uxtb	r2, r3
 80173fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017400:	1c59      	adds	r1, r3, #1
 8017402:	6279      	str	r1, [r7, #36]	; 0x24
 8017404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017408:	b2d2      	uxtb	r2, r2
 801740a:	701a      	strb	r2, [r3, #0]
 801740c:	6a3b      	ldr	r3, [r7, #32]
 801740e:	09db      	lsrs	r3, r3, #7
 8017410:	623b      	str	r3, [r7, #32]
 8017412:	6a3b      	ldr	r3, [r7, #32]
 8017414:	2b7f      	cmp	r3, #127	; 0x7f
 8017416:	d8f0      	bhi.n	80173fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8017418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741a:	1c5a      	adds	r2, r3, #1
 801741c:	627a      	str	r2, [r7, #36]	; 0x24
 801741e:	6a3a      	ldr	r2, [r7, #32]
 8017420:	b2d2      	uxtb	r2, r2
 8017422:	701a      	strb	r2, [r3, #0]
 8017424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017426:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8017428:	68fa      	ldr	r2, [r7, #12]
 801742a:	6979      	ldr	r1, [r7, #20]
 801742c:	69b8      	ldr	r0, [r7, #24]
 801742e:	f7ff fda5 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017432:	69fb      	ldr	r3, [r7, #28]
 8017434:	f383 8811 	msr	BASEPRI, r3
}
 8017438:	bf00      	nop
 801743a:	3738      	adds	r7, #56	; 0x38
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	2001b480 	.word	0x2001b480

08017444 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8017444:	b580      	push	{r7, lr}
 8017446:	b090      	sub	sp, #64	; 0x40
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
 801744e:	607a      	str	r2, [r7, #4]
 8017450:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8017452:	f3ef 8311 	mrs	r3, BASEPRI
 8017456:	f04f 0120 	mov.w	r1, #32
 801745a:	f381 8811 	msr	BASEPRI, r1
 801745e:	61fb      	str	r3, [r7, #28]
 8017460:	4840      	ldr	r0, [pc, #256]	; (8017564 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8017462:	f7ff fc9b 	bl	8016d9c <_PreparePacket>
 8017466:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8017468:	69bb      	ldr	r3, [r7, #24]
 801746a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	63bb      	str	r3, [r7, #56]	; 0x38
 8017474:	e00b      	b.n	801748e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8017476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017478:	b2da      	uxtb	r2, r3
 801747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801747c:	1c59      	adds	r1, r3, #1
 801747e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8017480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017484:	b2d2      	uxtb	r2, r2
 8017486:	701a      	strb	r2, [r3, #0]
 8017488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801748a:	09db      	lsrs	r3, r3, #7
 801748c:	63bb      	str	r3, [r7, #56]	; 0x38
 801748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017490:	2b7f      	cmp	r3, #127	; 0x7f
 8017492:	d8f0      	bhi.n	8017476 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8017494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017496:	1c5a      	adds	r2, r3, #1
 8017498:	63fa      	str	r2, [r7, #60]	; 0x3c
 801749a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801749c:	b2d2      	uxtb	r2, r2
 801749e:	701a      	strb	r2, [r3, #0]
 80174a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80174a4:	697b      	ldr	r3, [r7, #20]
 80174a6:	637b      	str	r3, [r7, #52]	; 0x34
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	633b      	str	r3, [r7, #48]	; 0x30
 80174ac:	e00b      	b.n	80174c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80174ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b0:	b2da      	uxtb	r2, r3
 80174b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174b4:	1c59      	adds	r1, r3, #1
 80174b6:	6379      	str	r1, [r7, #52]	; 0x34
 80174b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80174bc:	b2d2      	uxtb	r2, r2
 80174be:	701a      	strb	r2, [r3, #0]
 80174c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c2:	09db      	lsrs	r3, r3, #7
 80174c4:	633b      	str	r3, [r7, #48]	; 0x30
 80174c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c8:	2b7f      	cmp	r3, #127	; 0x7f
 80174ca:	d8f0      	bhi.n	80174ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80174cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174ce:	1c5a      	adds	r2, r3, #1
 80174d0:	637a      	str	r2, [r7, #52]	; 0x34
 80174d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174d4:	b2d2      	uxtb	r2, r2
 80174d6:	701a      	strb	r2, [r3, #0]
 80174d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80174e4:	e00b      	b.n	80174fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80174e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e8:	b2da      	uxtb	r2, r3
 80174ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ec:	1c59      	adds	r1, r3, #1
 80174ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80174f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80174f4:	b2d2      	uxtb	r2, r2
 80174f6:	701a      	strb	r2, [r3, #0]
 80174f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fa:	09db      	lsrs	r3, r3, #7
 80174fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80174fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017500:	2b7f      	cmp	r3, #127	; 0x7f
 8017502:	d8f0      	bhi.n	80174e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8017504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017506:	1c5a      	adds	r2, r3, #1
 8017508:	62fa      	str	r2, [r7, #44]	; 0x2c
 801750a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801750c:	b2d2      	uxtb	r2, r2
 801750e:	701a      	strb	r2, [r3, #0]
 8017510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017512:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	627b      	str	r3, [r7, #36]	; 0x24
 8017518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801751a:	623b      	str	r3, [r7, #32]
 801751c:	e00b      	b.n	8017536 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801751e:	6a3b      	ldr	r3, [r7, #32]
 8017520:	b2da      	uxtb	r2, r3
 8017522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017524:	1c59      	adds	r1, r3, #1
 8017526:	6279      	str	r1, [r7, #36]	; 0x24
 8017528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801752c:	b2d2      	uxtb	r2, r2
 801752e:	701a      	strb	r2, [r3, #0]
 8017530:	6a3b      	ldr	r3, [r7, #32]
 8017532:	09db      	lsrs	r3, r3, #7
 8017534:	623b      	str	r3, [r7, #32]
 8017536:	6a3b      	ldr	r3, [r7, #32]
 8017538:	2b7f      	cmp	r3, #127	; 0x7f
 801753a:	d8f0      	bhi.n	801751e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753e:	1c5a      	adds	r2, r3, #1
 8017540:	627a      	str	r2, [r7, #36]	; 0x24
 8017542:	6a3a      	ldr	r2, [r7, #32]
 8017544:	b2d2      	uxtb	r2, r2
 8017546:	701a      	strb	r2, [r3, #0]
 8017548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801754a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801754c:	68fa      	ldr	r2, [r7, #12]
 801754e:	6979      	ldr	r1, [r7, #20]
 8017550:	69b8      	ldr	r0, [r7, #24]
 8017552:	f7ff fd13 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	f383 8811 	msr	BASEPRI, r3
}
 801755c:	bf00      	nop
 801755e:	3740      	adds	r7, #64	; 0x40
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}
 8017564:	2001b480 	.word	0x2001b480

08017568 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8017568:	b580      	push	{r7, lr}
 801756a:	b08c      	sub	sp, #48	; 0x30
 801756c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801756e:	4b58      	ldr	r3, [pc, #352]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 8017570:	2201      	movs	r2, #1
 8017572:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8017574:	f3ef 8311 	mrs	r3, BASEPRI
 8017578:	f04f 0120 	mov.w	r1, #32
 801757c:	f381 8811 	msr	BASEPRI, r1
 8017580:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8017582:	4b53      	ldr	r3, [pc, #332]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 8017584:	785b      	ldrb	r3, [r3, #1]
 8017586:	220a      	movs	r2, #10
 8017588:	4952      	ldr	r1, [pc, #328]	; (80176d4 <SEGGER_SYSVIEW_Start+0x16c>)
 801758a:	4618      	mov	r0, r3
 801758c:	f7e8 fe20 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8017596:	200a      	movs	r0, #10
 8017598:	f7ff fe2a 	bl	80171f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801759c:	f3ef 8311 	mrs	r3, BASEPRI
 80175a0:	f04f 0120 	mov.w	r1, #32
 80175a4:	f381 8811 	msr	BASEPRI, r1
 80175a8:	60bb      	str	r3, [r7, #8]
 80175aa:	484b      	ldr	r0, [pc, #300]	; (80176d8 <SEGGER_SYSVIEW_Start+0x170>)
 80175ac:	f7ff fbf6 	bl	8016d9c <_PreparePacket>
 80175b0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175ba:	4b45      	ldr	r3, [pc, #276]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	62bb      	str	r3, [r7, #40]	; 0x28
 80175c0:	e00b      	b.n	80175da <SEGGER_SYSVIEW_Start+0x72>
 80175c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c4:	b2da      	uxtb	r2, r3
 80175c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c8:	1c59      	adds	r1, r3, #1
 80175ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80175cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80175d0:	b2d2      	uxtb	r2, r2
 80175d2:	701a      	strb	r2, [r3, #0]
 80175d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d6:	09db      	lsrs	r3, r3, #7
 80175d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80175da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175dc:	2b7f      	cmp	r3, #127	; 0x7f
 80175de:	d8f0      	bhi.n	80175c2 <SEGGER_SYSVIEW_Start+0x5a>
 80175e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e2:	1c5a      	adds	r2, r3, #1
 80175e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80175e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175e8:	b2d2      	uxtb	r2, r2
 80175ea:	701a      	strb	r2, [r3, #0]
 80175ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	627b      	str	r3, [r7, #36]	; 0x24
 80175f4:	4b36      	ldr	r3, [pc, #216]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 80175f6:	689b      	ldr	r3, [r3, #8]
 80175f8:	623b      	str	r3, [r7, #32]
 80175fa:	e00b      	b.n	8017614 <SEGGER_SYSVIEW_Start+0xac>
 80175fc:	6a3b      	ldr	r3, [r7, #32]
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017602:	1c59      	adds	r1, r3, #1
 8017604:	6279      	str	r1, [r7, #36]	; 0x24
 8017606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801760a:	b2d2      	uxtb	r2, r2
 801760c:	701a      	strb	r2, [r3, #0]
 801760e:	6a3b      	ldr	r3, [r7, #32]
 8017610:	09db      	lsrs	r3, r3, #7
 8017612:	623b      	str	r3, [r7, #32]
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	2b7f      	cmp	r3, #127	; 0x7f
 8017618:	d8f0      	bhi.n	80175fc <SEGGER_SYSVIEW_Start+0x94>
 801761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761c:	1c5a      	adds	r2, r3, #1
 801761e:	627a      	str	r2, [r7, #36]	; 0x24
 8017620:	6a3a      	ldr	r2, [r7, #32]
 8017622:	b2d2      	uxtb	r2, r2
 8017624:	701a      	strb	r2, [r3, #0]
 8017626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017628:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	61fb      	str	r3, [r7, #28]
 801762e:	4b28      	ldr	r3, [pc, #160]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 8017630:	691b      	ldr	r3, [r3, #16]
 8017632:	61bb      	str	r3, [r7, #24]
 8017634:	e00b      	b.n	801764e <SEGGER_SYSVIEW_Start+0xe6>
 8017636:	69bb      	ldr	r3, [r7, #24]
 8017638:	b2da      	uxtb	r2, r3
 801763a:	69fb      	ldr	r3, [r7, #28]
 801763c:	1c59      	adds	r1, r3, #1
 801763e:	61f9      	str	r1, [r7, #28]
 8017640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017644:	b2d2      	uxtb	r2, r2
 8017646:	701a      	strb	r2, [r3, #0]
 8017648:	69bb      	ldr	r3, [r7, #24]
 801764a:	09db      	lsrs	r3, r3, #7
 801764c:	61bb      	str	r3, [r7, #24]
 801764e:	69bb      	ldr	r3, [r7, #24]
 8017650:	2b7f      	cmp	r3, #127	; 0x7f
 8017652:	d8f0      	bhi.n	8017636 <SEGGER_SYSVIEW_Start+0xce>
 8017654:	69fb      	ldr	r3, [r7, #28]
 8017656:	1c5a      	adds	r2, r3, #1
 8017658:	61fa      	str	r2, [r7, #28]
 801765a:	69ba      	ldr	r2, [r7, #24]
 801765c:	b2d2      	uxtb	r2, r2
 801765e:	701a      	strb	r2, [r3, #0]
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	617b      	str	r3, [r7, #20]
 8017668:	2300      	movs	r3, #0
 801766a:	613b      	str	r3, [r7, #16]
 801766c:	e00b      	b.n	8017686 <SEGGER_SYSVIEW_Start+0x11e>
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	b2da      	uxtb	r2, r3
 8017672:	697b      	ldr	r3, [r7, #20]
 8017674:	1c59      	adds	r1, r3, #1
 8017676:	6179      	str	r1, [r7, #20]
 8017678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801767c:	b2d2      	uxtb	r2, r2
 801767e:	701a      	strb	r2, [r3, #0]
 8017680:	693b      	ldr	r3, [r7, #16]
 8017682:	09db      	lsrs	r3, r3, #7
 8017684:	613b      	str	r3, [r7, #16]
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	2b7f      	cmp	r3, #127	; 0x7f
 801768a:	d8f0      	bhi.n	801766e <SEGGER_SYSVIEW_Start+0x106>
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	1c5a      	adds	r2, r3, #1
 8017690:	617a      	str	r2, [r7, #20]
 8017692:	693a      	ldr	r2, [r7, #16]
 8017694:	b2d2      	uxtb	r2, r2
 8017696:	701a      	strb	r2, [r3, #0]
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801769c:	2218      	movs	r2, #24
 801769e:	6839      	ldr	r1, [r7, #0]
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7ff fc6b 	bl	8016f7c <_SendPacket>
      RECORD_END();
 80176a6:	68bb      	ldr	r3, [r7, #8]
 80176a8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80176ac:	4b08      	ldr	r3, [pc, #32]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 80176ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d002      	beq.n	80176ba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80176b4:	4b06      	ldr	r3, [pc, #24]	; (80176d0 <SEGGER_SYSVIEW_Start+0x168>)
 80176b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80176ba:	f000 f9eb 	bl	8017a94 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80176be:	f000 f9b1 	bl	8017a24 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80176c2:	f000 fba9 	bl	8017e18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80176c6:	bf00      	nop
 80176c8:	3730      	adds	r7, #48	; 0x30
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop
 80176d0:	2001b450 	.word	0x2001b450
 80176d4:	08018f60 	.word	0x08018f60
 80176d8:	2001b480 	.word	0x2001b480

080176dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80176e2:	f3ef 8311 	mrs	r3, BASEPRI
 80176e6:	f04f 0120 	mov.w	r1, #32
 80176ea:	f381 8811 	msr	BASEPRI, r1
 80176ee:	607b      	str	r3, [r7, #4]
 80176f0:	480b      	ldr	r0, [pc, #44]	; (8017720 <SEGGER_SYSVIEW_Stop+0x44>)
 80176f2:	f7ff fb53 	bl	8016d9c <_PreparePacket>
 80176f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80176f8:	4b0a      	ldr	r3, [pc, #40]	; (8017724 <SEGGER_SYSVIEW_Stop+0x48>)
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d007      	beq.n	8017710 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8017700:	220b      	movs	r2, #11
 8017702:	6839      	ldr	r1, [r7, #0]
 8017704:	6838      	ldr	r0, [r7, #0]
 8017706:	f7ff fc39 	bl	8016f7c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801770a:	4b06      	ldr	r3, [pc, #24]	; (8017724 <SEGGER_SYSVIEW_Stop+0x48>)
 801770c:	2200      	movs	r2, #0
 801770e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	f383 8811 	msr	BASEPRI, r3
}
 8017716:	bf00      	nop
 8017718:	3708      	adds	r7, #8
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2001b480 	.word	0x2001b480
 8017724:	2001b450 	.word	0x2001b450

08017728 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8017728:	b580      	push	{r7, lr}
 801772a:	b08c      	sub	sp, #48	; 0x30
 801772c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801772e:	f3ef 8311 	mrs	r3, BASEPRI
 8017732:	f04f 0120 	mov.w	r1, #32
 8017736:	f381 8811 	msr	BASEPRI, r1
 801773a:	60fb      	str	r3, [r7, #12]
 801773c:	4845      	ldr	r0, [pc, #276]	; (8017854 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801773e:	f7ff fb2d 	bl	8016d9c <_PreparePacket>
 8017742:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8017744:	68bb      	ldr	r3, [r7, #8]
 8017746:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801774c:	4b42      	ldr	r3, [pc, #264]	; (8017858 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801774e:	685b      	ldr	r3, [r3, #4]
 8017750:	62bb      	str	r3, [r7, #40]	; 0x28
 8017752:	e00b      	b.n	801776c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8017754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017756:	b2da      	uxtb	r2, r3
 8017758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801775a:	1c59      	adds	r1, r3, #1
 801775c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801775e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017762:	b2d2      	uxtb	r2, r2
 8017764:	701a      	strb	r2, [r3, #0]
 8017766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017768:	09db      	lsrs	r3, r3, #7
 801776a:	62bb      	str	r3, [r7, #40]	; 0x28
 801776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776e:	2b7f      	cmp	r3, #127	; 0x7f
 8017770:	d8f0      	bhi.n	8017754 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8017772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017774:	1c5a      	adds	r2, r3, #1
 8017776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801777a:	b2d2      	uxtb	r2, r2
 801777c:	701a      	strb	r2, [r3, #0]
 801777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017780:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	627b      	str	r3, [r7, #36]	; 0x24
 8017786:	4b34      	ldr	r3, [pc, #208]	; (8017858 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8017788:	689b      	ldr	r3, [r3, #8]
 801778a:	623b      	str	r3, [r7, #32]
 801778c:	e00b      	b.n	80177a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 801778e:	6a3b      	ldr	r3, [r7, #32]
 8017790:	b2da      	uxtb	r2, r3
 8017792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017794:	1c59      	adds	r1, r3, #1
 8017796:	6279      	str	r1, [r7, #36]	; 0x24
 8017798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801779c:	b2d2      	uxtb	r2, r2
 801779e:	701a      	strb	r2, [r3, #0]
 80177a0:	6a3b      	ldr	r3, [r7, #32]
 80177a2:	09db      	lsrs	r3, r3, #7
 80177a4:	623b      	str	r3, [r7, #32]
 80177a6:	6a3b      	ldr	r3, [r7, #32]
 80177a8:	2b7f      	cmp	r3, #127	; 0x7f
 80177aa:	d8f0      	bhi.n	801778e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80177ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	627a      	str	r2, [r7, #36]	; 0x24
 80177b2:	6a3a      	ldr	r2, [r7, #32]
 80177b4:	b2d2      	uxtb	r2, r2
 80177b6:	701a      	strb	r2, [r3, #0]
 80177b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	61fb      	str	r3, [r7, #28]
 80177c0:	4b25      	ldr	r3, [pc, #148]	; (8017858 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80177c2:	691b      	ldr	r3, [r3, #16]
 80177c4:	61bb      	str	r3, [r7, #24]
 80177c6:	e00b      	b.n	80177e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80177c8:	69bb      	ldr	r3, [r7, #24]
 80177ca:	b2da      	uxtb	r2, r3
 80177cc:	69fb      	ldr	r3, [r7, #28]
 80177ce:	1c59      	adds	r1, r3, #1
 80177d0:	61f9      	str	r1, [r7, #28]
 80177d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80177d6:	b2d2      	uxtb	r2, r2
 80177d8:	701a      	strb	r2, [r3, #0]
 80177da:	69bb      	ldr	r3, [r7, #24]
 80177dc:	09db      	lsrs	r3, r3, #7
 80177de:	61bb      	str	r3, [r7, #24]
 80177e0:	69bb      	ldr	r3, [r7, #24]
 80177e2:	2b7f      	cmp	r3, #127	; 0x7f
 80177e4:	d8f0      	bhi.n	80177c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80177e6:	69fb      	ldr	r3, [r7, #28]
 80177e8:	1c5a      	adds	r2, r3, #1
 80177ea:	61fa      	str	r2, [r7, #28]
 80177ec:	69ba      	ldr	r2, [r7, #24]
 80177ee:	b2d2      	uxtb	r2, r2
 80177f0:	701a      	strb	r2, [r3, #0]
 80177f2:	69fb      	ldr	r3, [r7, #28]
 80177f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	617b      	str	r3, [r7, #20]
 80177fa:	2300      	movs	r3, #0
 80177fc:	613b      	str	r3, [r7, #16]
 80177fe:	e00b      	b.n	8017818 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8017800:	693b      	ldr	r3, [r7, #16]
 8017802:	b2da      	uxtb	r2, r3
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	1c59      	adds	r1, r3, #1
 8017808:	6179      	str	r1, [r7, #20]
 801780a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801780e:	b2d2      	uxtb	r2, r2
 8017810:	701a      	strb	r2, [r3, #0]
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	09db      	lsrs	r3, r3, #7
 8017816:	613b      	str	r3, [r7, #16]
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	2b7f      	cmp	r3, #127	; 0x7f
 801781c:	d8f0      	bhi.n	8017800 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	1c5a      	adds	r2, r3, #1
 8017822:	617a      	str	r2, [r7, #20]
 8017824:	693a      	ldr	r2, [r7, #16]
 8017826:	b2d2      	uxtb	r2, r2
 8017828:	701a      	strb	r2, [r3, #0]
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801782e:	2218      	movs	r2, #24
 8017830:	6879      	ldr	r1, [r7, #4]
 8017832:	68b8      	ldr	r0, [r7, #8]
 8017834:	f7ff fba2 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801783e:	4b06      	ldr	r3, [pc, #24]	; (8017858 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8017840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017842:	2b00      	cmp	r3, #0
 8017844:	d002      	beq.n	801784c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8017846:	4b04      	ldr	r3, [pc, #16]	; (8017858 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8017848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801784a:	4798      	blx	r3
  }
}
 801784c:	bf00      	nop
 801784e:	3730      	adds	r7, #48	; 0x30
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	2001b480 	.word	0x2001b480
 8017858:	2001b450 	.word	0x2001b450

0801785c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 801785c:	b580      	push	{r7, lr}
 801785e:	b092      	sub	sp, #72	; 0x48
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8017864:	f3ef 8311 	mrs	r3, BASEPRI
 8017868:	f04f 0120 	mov.w	r1, #32
 801786c:	f381 8811 	msr	BASEPRI, r1
 8017870:	617b      	str	r3, [r7, #20]
 8017872:	486a      	ldr	r0, [pc, #424]	; (8017a1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8017874:	f7ff fa92 	bl	8016d9c <_PreparePacket>
 8017878:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	647b      	str	r3, [r7, #68]	; 0x44
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	4b66      	ldr	r3, [pc, #408]	; (8017a20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8017888:	691b      	ldr	r3, [r3, #16]
 801788a:	1ad3      	subs	r3, r2, r3
 801788c:	643b      	str	r3, [r7, #64]	; 0x40
 801788e:	e00b      	b.n	80178a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8017890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017892:	b2da      	uxtb	r2, r3
 8017894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017896:	1c59      	adds	r1, r3, #1
 8017898:	6479      	str	r1, [r7, #68]	; 0x44
 801789a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801789e:	b2d2      	uxtb	r2, r2
 80178a0:	701a      	strb	r2, [r3, #0]
 80178a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178a4:	09db      	lsrs	r3, r3, #7
 80178a6:	643b      	str	r3, [r7, #64]	; 0x40
 80178a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178aa:	2b7f      	cmp	r3, #127	; 0x7f
 80178ac:	d8f0      	bhi.n	8017890 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80178ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178b0:	1c5a      	adds	r2, r3, #1
 80178b2:	647a      	str	r2, [r7, #68]	; 0x44
 80178b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80178b6:	b2d2      	uxtb	r2, r2
 80178b8:	701a      	strb	r2, [r3, #0]
 80178ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80178bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	689b      	ldr	r3, [r3, #8]
 80178c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80178c8:	e00b      	b.n	80178e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80178ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178cc:	b2da      	uxtb	r2, r3
 80178ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178d0:	1c59      	adds	r1, r3, #1
 80178d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80178d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80178d8:	b2d2      	uxtb	r2, r2
 80178da:	701a      	strb	r2, [r3, #0]
 80178dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178de:	09db      	lsrs	r3, r3, #7
 80178e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80178e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178e4:	2b7f      	cmp	r3, #127	; 0x7f
 80178e6:	d8f0      	bhi.n	80178ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80178e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178ea:	1c5a      	adds	r2, r3, #1
 80178ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80178ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80178f0:	b2d2      	uxtb	r2, r2
 80178f2:	701a      	strb	r2, [r3, #0]
 80178f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	685b      	ldr	r3, [r3, #4]
 80178fc:	2220      	movs	r2, #32
 80178fe:	4619      	mov	r1, r3
 8017900:	68f8      	ldr	r0, [r7, #12]
 8017902:	f7ff f9fb 	bl	8016cfc <_EncodeStr>
 8017906:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8017908:	2209      	movs	r2, #9
 801790a:	68f9      	ldr	r1, [r7, #12]
 801790c:	6938      	ldr	r0, [r7, #16]
 801790e:	f7ff fb35 	bl	8016f7c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8017912:	693b      	ldr	r3, [r7, #16]
 8017914:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	637b      	str	r3, [r7, #52]	; 0x34
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681a      	ldr	r2, [r3, #0]
 801791e:	4b40      	ldr	r3, [pc, #256]	; (8017a20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8017920:	691b      	ldr	r3, [r3, #16]
 8017922:	1ad3      	subs	r3, r2, r3
 8017924:	633b      	str	r3, [r7, #48]	; 0x30
 8017926:	e00b      	b.n	8017940 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8017928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801792a:	b2da      	uxtb	r2, r3
 801792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801792e:	1c59      	adds	r1, r3, #1
 8017930:	6379      	str	r1, [r7, #52]	; 0x34
 8017932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017936:	b2d2      	uxtb	r2, r2
 8017938:	701a      	strb	r2, [r3, #0]
 801793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793c:	09db      	lsrs	r3, r3, #7
 801793e:	633b      	str	r3, [r7, #48]	; 0x30
 8017940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017942:	2b7f      	cmp	r3, #127	; 0x7f
 8017944:	d8f0      	bhi.n	8017928 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8017946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017948:	1c5a      	adds	r2, r3, #1
 801794a:	637a      	str	r2, [r7, #52]	; 0x34
 801794c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801794e:	b2d2      	uxtb	r2, r2
 8017950:	701a      	strb	r2, [r3, #0]
 8017952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017954:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	62fb      	str	r3, [r7, #44]	; 0x2c
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	68db      	ldr	r3, [r3, #12]
 801795e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017960:	e00b      	b.n	801797a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8017962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017964:	b2da      	uxtb	r2, r3
 8017966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017968:	1c59      	adds	r1, r3, #1
 801796a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801796c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017970:	b2d2      	uxtb	r2, r2
 8017972:	701a      	strb	r2, [r3, #0]
 8017974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017976:	09db      	lsrs	r3, r3, #7
 8017978:	62bb      	str	r3, [r7, #40]	; 0x28
 801797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801797c:	2b7f      	cmp	r3, #127	; 0x7f
 801797e:	d8f0      	bhi.n	8017962 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8017980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017982:	1c5a      	adds	r2, r3, #1
 8017984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017988:	b2d2      	uxtb	r2, r2
 801798a:	701a      	strb	r2, [r3, #0]
 801798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	627b      	str	r3, [r7, #36]	; 0x24
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	691b      	ldr	r3, [r3, #16]
 8017998:	623b      	str	r3, [r7, #32]
 801799a:	e00b      	b.n	80179b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 801799c:	6a3b      	ldr	r3, [r7, #32]
 801799e:	b2da      	uxtb	r2, r3
 80179a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a2:	1c59      	adds	r1, r3, #1
 80179a4:	6279      	str	r1, [r7, #36]	; 0x24
 80179a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80179aa:	b2d2      	uxtb	r2, r2
 80179ac:	701a      	strb	r2, [r3, #0]
 80179ae:	6a3b      	ldr	r3, [r7, #32]
 80179b0:	09db      	lsrs	r3, r3, #7
 80179b2:	623b      	str	r3, [r7, #32]
 80179b4:	6a3b      	ldr	r3, [r7, #32]
 80179b6:	2b7f      	cmp	r3, #127	; 0x7f
 80179b8:	d8f0      	bhi.n	801799c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80179ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179bc:	1c5a      	adds	r2, r3, #1
 80179be:	627a      	str	r2, [r7, #36]	; 0x24
 80179c0:	6a3a      	ldr	r2, [r7, #32]
 80179c2:	b2d2      	uxtb	r2, r2
 80179c4:	701a      	strb	r2, [r3, #0]
 80179c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	61fb      	str	r3, [r7, #28]
 80179ce:	2300      	movs	r3, #0
 80179d0:	61bb      	str	r3, [r7, #24]
 80179d2:	e00b      	b.n	80179ec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80179d4:	69bb      	ldr	r3, [r7, #24]
 80179d6:	b2da      	uxtb	r2, r3
 80179d8:	69fb      	ldr	r3, [r7, #28]
 80179da:	1c59      	adds	r1, r3, #1
 80179dc:	61f9      	str	r1, [r7, #28]
 80179de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80179e2:	b2d2      	uxtb	r2, r2
 80179e4:	701a      	strb	r2, [r3, #0]
 80179e6:	69bb      	ldr	r3, [r7, #24]
 80179e8:	09db      	lsrs	r3, r3, #7
 80179ea:	61bb      	str	r3, [r7, #24]
 80179ec:	69bb      	ldr	r3, [r7, #24]
 80179ee:	2b7f      	cmp	r3, #127	; 0x7f
 80179f0:	d8f0      	bhi.n	80179d4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80179f2:	69fb      	ldr	r3, [r7, #28]
 80179f4:	1c5a      	adds	r2, r3, #1
 80179f6:	61fa      	str	r2, [r7, #28]
 80179f8:	69ba      	ldr	r2, [r7, #24]
 80179fa:	b2d2      	uxtb	r2, r2
 80179fc:	701a      	strb	r2, [r3, #0]
 80179fe:	69fb      	ldr	r3, [r7, #28]
 8017a00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8017a02:	2215      	movs	r2, #21
 8017a04:	68f9      	ldr	r1, [r7, #12]
 8017a06:	6938      	ldr	r0, [r7, #16]
 8017a08:	f7ff fab8 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	f383 8811 	msr	BASEPRI, r3
}
 8017a12:	bf00      	nop
 8017a14:	3748      	adds	r7, #72	; 0x48
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	2001b480 	.word	0x2001b480
 8017a20:	2001b450 	.word	0x2001b450

08017a24 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8017a24:	b580      	push	{r7, lr}
 8017a26:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8017a28:	4b07      	ldr	r3, [pc, #28]	; (8017a48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8017a2a:	6a1b      	ldr	r3, [r3, #32]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d008      	beq.n	8017a42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8017a30:	4b05      	ldr	r3, [pc, #20]	; (8017a48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8017a32:	6a1b      	ldr	r3, [r3, #32]
 8017a34:	685b      	ldr	r3, [r3, #4]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d003      	beq.n	8017a42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8017a3a:	4b03      	ldr	r3, [pc, #12]	; (8017a48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8017a3c:	6a1b      	ldr	r3, [r3, #32]
 8017a3e:	685b      	ldr	r3, [r3, #4]
 8017a40:	4798      	blx	r3
  }
}
 8017a42:	bf00      	nop
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	bf00      	nop
 8017a48:	2001b450 	.word	0x2001b450

08017a4c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b086      	sub	sp, #24
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8017a54:	f3ef 8311 	mrs	r3, BASEPRI
 8017a58:	f04f 0120 	mov.w	r1, #32
 8017a5c:	f381 8811 	msr	BASEPRI, r1
 8017a60:	617b      	str	r3, [r7, #20]
 8017a62:	480b      	ldr	r0, [pc, #44]	; (8017a90 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8017a64:	f7ff f99a 	bl	8016d9c <_PreparePacket>
 8017a68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8017a6a:	2280      	movs	r2, #128	; 0x80
 8017a6c:	6879      	ldr	r1, [r7, #4]
 8017a6e:	6938      	ldr	r0, [r7, #16]
 8017a70:	f7ff f944 	bl	8016cfc <_EncodeStr>
 8017a74:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8017a76:	220e      	movs	r2, #14
 8017a78:	68f9      	ldr	r1, [r7, #12]
 8017a7a:	6938      	ldr	r0, [r7, #16]
 8017a7c:	f7ff fa7e 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017a80:	697b      	ldr	r3, [r7, #20]
 8017a82:	f383 8811 	msr	BASEPRI, r3
}
 8017a86:	bf00      	nop
 8017a88:	3718      	adds	r7, #24
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	2001b480 	.word	0x2001b480

08017a94 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8017a94:	b590      	push	{r4, r7, lr}
 8017a96:	b083      	sub	sp, #12
 8017a98:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8017a9a:	4b15      	ldr	r3, [pc, #84]	; (8017af0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8017a9c:	6a1b      	ldr	r3, [r3, #32]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d01a      	beq.n	8017ad8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8017aa2:	4b13      	ldr	r3, [pc, #76]	; (8017af0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8017aa4:	6a1b      	ldr	r3, [r3, #32]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d015      	beq.n	8017ad8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8017aac:	4b10      	ldr	r3, [pc, #64]	; (8017af0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8017aae:	6a1b      	ldr	r3, [r3, #32]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	4798      	blx	r3
 8017ab4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8017ab8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8017aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017abe:	f04f 0200 	mov.w	r2, #0
 8017ac2:	f04f 0300 	mov.w	r3, #0
 8017ac6:	000a      	movs	r2, r1
 8017ac8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8017aca:	4613      	mov	r3, r2
 8017acc:	461a      	mov	r2, r3
 8017ace:	4621      	mov	r1, r4
 8017ad0:	200d      	movs	r0, #13
 8017ad2:	f7ff fbe7 	bl	80172a4 <SEGGER_SYSVIEW_RecordU32x2>
 8017ad6:	e006      	b.n	8017ae6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8017ad8:	4b06      	ldr	r3, [pc, #24]	; (8017af4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	4619      	mov	r1, r3
 8017ade:	200c      	movs	r0, #12
 8017ae0:	f7ff fba4 	bl	801722c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8017ae4:	bf00      	nop
 8017ae6:	bf00      	nop
 8017ae8:	370c      	adds	r7, #12
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd90      	pop	{r4, r7, pc}
 8017aee:	bf00      	nop
 8017af0:	2001b450 	.word	0x2001b450
 8017af4:	e0001004 	.word	0xe0001004

08017af8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b082      	sub	sp, #8
 8017afc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8017afe:	f3ef 8311 	mrs	r3, BASEPRI
 8017b02:	f04f 0120 	mov.w	r1, #32
 8017b06:	f381 8811 	msr	BASEPRI, r1
 8017b0a:	607b      	str	r3, [r7, #4]
 8017b0c:	4807      	ldr	r0, [pc, #28]	; (8017b2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8017b0e:	f7ff f945 	bl	8016d9c <_PreparePacket>
 8017b12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8017b14:	2211      	movs	r2, #17
 8017b16:	6839      	ldr	r1, [r7, #0]
 8017b18:	6838      	ldr	r0, [r7, #0]
 8017b1a:	f7ff fa2f 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f383 8811 	msr	BASEPRI, r3
}
 8017b24:	bf00      	nop
 8017b26:	3708      	adds	r7, #8
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}
 8017b2c:	2001b480 	.word	0x2001b480

08017b30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b088      	sub	sp, #32
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8017b38:	f3ef 8311 	mrs	r3, BASEPRI
 8017b3c:	f04f 0120 	mov.w	r1, #32
 8017b40:	f381 8811 	msr	BASEPRI, r1
 8017b44:	617b      	str	r3, [r7, #20]
 8017b46:	4819      	ldr	r0, [pc, #100]	; (8017bac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8017b48:	f7ff f928 	bl	8016d9c <_PreparePacket>
 8017b4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8017b4e:	693b      	ldr	r3, [r7, #16]
 8017b50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8017b52:	4b17      	ldr	r3, [pc, #92]	; (8017bb0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8017b54:	691b      	ldr	r3, [r3, #16]
 8017b56:	687a      	ldr	r2, [r7, #4]
 8017b58:	1ad3      	subs	r3, r2, r3
 8017b5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	61fb      	str	r3, [r7, #28]
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	61bb      	str	r3, [r7, #24]
 8017b64:	e00b      	b.n	8017b7e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8017b66:	69bb      	ldr	r3, [r7, #24]
 8017b68:	b2da      	uxtb	r2, r3
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	1c59      	adds	r1, r3, #1
 8017b6e:	61f9      	str	r1, [r7, #28]
 8017b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017b74:	b2d2      	uxtb	r2, r2
 8017b76:	701a      	strb	r2, [r3, #0]
 8017b78:	69bb      	ldr	r3, [r7, #24]
 8017b7a:	09db      	lsrs	r3, r3, #7
 8017b7c:	61bb      	str	r3, [r7, #24]
 8017b7e:	69bb      	ldr	r3, [r7, #24]
 8017b80:	2b7f      	cmp	r3, #127	; 0x7f
 8017b82:	d8f0      	bhi.n	8017b66 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	1c5a      	adds	r2, r3, #1
 8017b88:	61fa      	str	r2, [r7, #28]
 8017b8a:	69ba      	ldr	r2, [r7, #24]
 8017b8c:	b2d2      	uxtb	r2, r2
 8017b8e:	701a      	strb	r2, [r3, #0]
 8017b90:	69fb      	ldr	r3, [r7, #28]
 8017b92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8017b94:	2208      	movs	r2, #8
 8017b96:	68f9      	ldr	r1, [r7, #12]
 8017b98:	6938      	ldr	r0, [r7, #16]
 8017b9a:	f7ff f9ef 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	f383 8811 	msr	BASEPRI, r3
}
 8017ba4:	bf00      	nop
 8017ba6:	3720      	adds	r7, #32
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	2001b480 	.word	0x2001b480
 8017bb0:	2001b450 	.word	0x2001b450

08017bb4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b088      	sub	sp, #32
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8017bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8017bc0:	f04f 0120 	mov.w	r1, #32
 8017bc4:	f381 8811 	msr	BASEPRI, r1
 8017bc8:	617b      	str	r3, [r7, #20]
 8017bca:	4819      	ldr	r0, [pc, #100]	; (8017c30 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8017bcc:	f7ff f8e6 	bl	8016d9c <_PreparePacket>
 8017bd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8017bd2:	693b      	ldr	r3, [r7, #16]
 8017bd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8017bd6:	4b17      	ldr	r3, [pc, #92]	; (8017c34 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8017bd8:	691b      	ldr	r3, [r3, #16]
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	1ad3      	subs	r3, r2, r3
 8017bde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	61fb      	str	r3, [r7, #28]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	61bb      	str	r3, [r7, #24]
 8017be8:	e00b      	b.n	8017c02 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	b2da      	uxtb	r2, r3
 8017bee:	69fb      	ldr	r3, [r7, #28]
 8017bf0:	1c59      	adds	r1, r3, #1
 8017bf2:	61f9      	str	r1, [r7, #28]
 8017bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017bf8:	b2d2      	uxtb	r2, r2
 8017bfa:	701a      	strb	r2, [r3, #0]
 8017bfc:	69bb      	ldr	r3, [r7, #24]
 8017bfe:	09db      	lsrs	r3, r3, #7
 8017c00:	61bb      	str	r3, [r7, #24]
 8017c02:	69bb      	ldr	r3, [r7, #24]
 8017c04:	2b7f      	cmp	r3, #127	; 0x7f
 8017c06:	d8f0      	bhi.n	8017bea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8017c08:	69fb      	ldr	r3, [r7, #28]
 8017c0a:	1c5a      	adds	r2, r3, #1
 8017c0c:	61fa      	str	r2, [r7, #28]
 8017c0e:	69ba      	ldr	r2, [r7, #24]
 8017c10:	b2d2      	uxtb	r2, r2
 8017c12:	701a      	strb	r2, [r3, #0]
 8017c14:	69fb      	ldr	r3, [r7, #28]
 8017c16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8017c18:	2204      	movs	r2, #4
 8017c1a:	68f9      	ldr	r1, [r7, #12]
 8017c1c:	6938      	ldr	r0, [r7, #16]
 8017c1e:	f7ff f9ad 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017c22:	697b      	ldr	r3, [r7, #20]
 8017c24:	f383 8811 	msr	BASEPRI, r3
}
 8017c28:	bf00      	nop
 8017c2a:	3720      	adds	r7, #32
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	2001b480 	.word	0x2001b480
 8017c34:	2001b450 	.word	0x2001b450

08017c38 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b088      	sub	sp, #32
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8017c40:	f3ef 8311 	mrs	r3, BASEPRI
 8017c44:	f04f 0120 	mov.w	r1, #32
 8017c48:	f381 8811 	msr	BASEPRI, r1
 8017c4c:	617b      	str	r3, [r7, #20]
 8017c4e:	4819      	ldr	r0, [pc, #100]	; (8017cb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8017c50:	f7ff f8a4 	bl	8016d9c <_PreparePacket>
 8017c54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8017c5a:	4b17      	ldr	r3, [pc, #92]	; (8017cb8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8017c5c:	691b      	ldr	r3, [r3, #16]
 8017c5e:	687a      	ldr	r2, [r7, #4]
 8017c60:	1ad3      	subs	r3, r2, r3
 8017c62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	61fb      	str	r3, [r7, #28]
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	61bb      	str	r3, [r7, #24]
 8017c6c:	e00b      	b.n	8017c86 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8017c6e:	69bb      	ldr	r3, [r7, #24]
 8017c70:	b2da      	uxtb	r2, r3
 8017c72:	69fb      	ldr	r3, [r7, #28]
 8017c74:	1c59      	adds	r1, r3, #1
 8017c76:	61f9      	str	r1, [r7, #28]
 8017c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017c7c:	b2d2      	uxtb	r2, r2
 8017c7e:	701a      	strb	r2, [r3, #0]
 8017c80:	69bb      	ldr	r3, [r7, #24]
 8017c82:	09db      	lsrs	r3, r3, #7
 8017c84:	61bb      	str	r3, [r7, #24]
 8017c86:	69bb      	ldr	r3, [r7, #24]
 8017c88:	2b7f      	cmp	r3, #127	; 0x7f
 8017c8a:	d8f0      	bhi.n	8017c6e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	1c5a      	adds	r2, r3, #1
 8017c90:	61fa      	str	r2, [r7, #28]
 8017c92:	69ba      	ldr	r2, [r7, #24]
 8017c94:	b2d2      	uxtb	r2, r2
 8017c96:	701a      	strb	r2, [r3, #0]
 8017c98:	69fb      	ldr	r3, [r7, #28]
 8017c9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8017c9c:	2206      	movs	r2, #6
 8017c9e:	68f9      	ldr	r1, [r7, #12]
 8017ca0:	6938      	ldr	r0, [r7, #16]
 8017ca2:	f7ff f96b 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	f383 8811 	msr	BASEPRI, r3
}
 8017cac:	bf00      	nop
 8017cae:	3720      	adds	r7, #32
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	2001b480 	.word	0x2001b480
 8017cb8:	2001b450 	.word	0x2001b450

08017cbc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8017cbc:	b480      	push	{r7}
 8017cbe:	b083      	sub	sp, #12
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8017cc4:	4b04      	ldr	r3, [pc, #16]	; (8017cd8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8017cc6:	691b      	ldr	r3, [r3, #16]
 8017cc8:	687a      	ldr	r2, [r7, #4]
 8017cca:	1ad3      	subs	r3, r2, r3
}
 8017ccc:	4618      	mov	r0, r3
 8017cce:	370c      	adds	r7, #12
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd6:	4770      	bx	lr
 8017cd8:	2001b450 	.word	0x2001b450

08017cdc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b08c      	sub	sp, #48	; 0x30
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8017ce6:	4b3b      	ldr	r3, [pc, #236]	; (8017dd4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d06d      	beq.n	8017dca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8017cee:	4b39      	ldr	r3, [pc, #228]	; (8017dd4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017cf8:	e008      	b.n	8017d0c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8017cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfc:	691b      	ldr	r3, [r3, #16]
 8017cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8017d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d007      	beq.n	8017d16 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8017d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d08:	3301      	adds	r3, #1
 8017d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d0c:	79fb      	ldrb	r3, [r7, #7]
 8017d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d3f2      	bcc.n	8017cfa <SEGGER_SYSVIEW_SendModule+0x1e>
 8017d14:	e000      	b.n	8017d18 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8017d16:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8017d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d055      	beq.n	8017dca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8017d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8017d22:	f04f 0120 	mov.w	r1, #32
 8017d26:	f381 8811 	msr	BASEPRI, r1
 8017d2a:	617b      	str	r3, [r7, #20]
 8017d2c:	482a      	ldr	r0, [pc, #168]	; (8017dd8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8017d2e:	f7ff f835 	bl	8016d9c <_PreparePacket>
 8017d32:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8017d3c:	79fb      	ldrb	r3, [r7, #7]
 8017d3e:	623b      	str	r3, [r7, #32]
 8017d40:	e00b      	b.n	8017d5a <SEGGER_SYSVIEW_SendModule+0x7e>
 8017d42:	6a3b      	ldr	r3, [r7, #32]
 8017d44:	b2da      	uxtb	r2, r3
 8017d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d48:	1c59      	adds	r1, r3, #1
 8017d4a:	6279      	str	r1, [r7, #36]	; 0x24
 8017d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017d50:	b2d2      	uxtb	r2, r2
 8017d52:	701a      	strb	r2, [r3, #0]
 8017d54:	6a3b      	ldr	r3, [r7, #32]
 8017d56:	09db      	lsrs	r3, r3, #7
 8017d58:	623b      	str	r3, [r7, #32]
 8017d5a:	6a3b      	ldr	r3, [r7, #32]
 8017d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8017d5e:	d8f0      	bhi.n	8017d42 <SEGGER_SYSVIEW_SendModule+0x66>
 8017d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d62:	1c5a      	adds	r2, r3, #1
 8017d64:	627a      	str	r2, [r7, #36]	; 0x24
 8017d66:	6a3a      	ldr	r2, [r7, #32]
 8017d68:	b2d2      	uxtb	r2, r2
 8017d6a:	701a      	strb	r2, [r3, #0]
 8017d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	61fb      	str	r3, [r7, #28]
 8017d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d76:	689b      	ldr	r3, [r3, #8]
 8017d78:	61bb      	str	r3, [r7, #24]
 8017d7a:	e00b      	b.n	8017d94 <SEGGER_SYSVIEW_SendModule+0xb8>
 8017d7c:	69bb      	ldr	r3, [r7, #24]
 8017d7e:	b2da      	uxtb	r2, r3
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	1c59      	adds	r1, r3, #1
 8017d84:	61f9      	str	r1, [r7, #28]
 8017d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017d8a:	b2d2      	uxtb	r2, r2
 8017d8c:	701a      	strb	r2, [r3, #0]
 8017d8e:	69bb      	ldr	r3, [r7, #24]
 8017d90:	09db      	lsrs	r3, r3, #7
 8017d92:	61bb      	str	r3, [r7, #24]
 8017d94:	69bb      	ldr	r3, [r7, #24]
 8017d96:	2b7f      	cmp	r3, #127	; 0x7f
 8017d98:	d8f0      	bhi.n	8017d7c <SEGGER_SYSVIEW_SendModule+0xa0>
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	1c5a      	adds	r2, r3, #1
 8017d9e:	61fa      	str	r2, [r7, #28]
 8017da0:	69ba      	ldr	r2, [r7, #24]
 8017da2:	b2d2      	uxtb	r2, r2
 8017da4:	701a      	strb	r2, [r3, #0]
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8017daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2280      	movs	r2, #128	; 0x80
 8017db0:	4619      	mov	r1, r3
 8017db2:	68f8      	ldr	r0, [r7, #12]
 8017db4:	f7fe ffa2 	bl	8016cfc <_EncodeStr>
 8017db8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8017dba:	2216      	movs	r2, #22
 8017dbc:	68f9      	ldr	r1, [r7, #12]
 8017dbe:	6938      	ldr	r0, [r7, #16]
 8017dc0:	f7ff f8dc 	bl	8016f7c <_SendPacket>
      RECORD_END();
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8017dca:	bf00      	nop
 8017dcc:	3730      	adds	r7, #48	; 0x30
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	2001b478 	.word	0x2001b478
 8017dd8:	2001b480 	.word	0x2001b480

08017ddc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b082      	sub	sp, #8
 8017de0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8017de2:	4b0c      	ldr	r3, [pc, #48]	; (8017e14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d00f      	beq.n	8017e0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8017dea:	4b0a      	ldr	r3, [pc, #40]	; (8017e14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	68db      	ldr	r3, [r3, #12]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d002      	beq.n	8017dfe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	68db      	ldr	r3, [r3, #12]
 8017dfc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	691b      	ldr	r3, [r3, #16]
 8017e02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d1f2      	bne.n	8017df0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8017e0a:	bf00      	nop
 8017e0c:	3708      	adds	r7, #8
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	2001b478 	.word	0x2001b478

08017e18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b086      	sub	sp, #24
 8017e1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8017e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8017e22:	f04f 0120 	mov.w	r1, #32
 8017e26:	f381 8811 	msr	BASEPRI, r1
 8017e2a:	60fb      	str	r3, [r7, #12]
 8017e2c:	4817      	ldr	r0, [pc, #92]	; (8017e8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8017e2e:	f7fe ffb5 	bl	8016d9c <_PreparePacket>
 8017e32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	617b      	str	r3, [r7, #20]
 8017e3c:	4b14      	ldr	r3, [pc, #80]	; (8017e90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	613b      	str	r3, [r7, #16]
 8017e42:	e00b      	b.n	8017e5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	b2da      	uxtb	r2, r3
 8017e48:	697b      	ldr	r3, [r7, #20]
 8017e4a:	1c59      	adds	r1, r3, #1
 8017e4c:	6179      	str	r1, [r7, #20]
 8017e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017e52:	b2d2      	uxtb	r2, r2
 8017e54:	701a      	strb	r2, [r3, #0]
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	09db      	lsrs	r3, r3, #7
 8017e5a:	613b      	str	r3, [r7, #16]
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8017e60:	d8f0      	bhi.n	8017e44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	1c5a      	adds	r2, r3, #1
 8017e66:	617a      	str	r2, [r7, #20]
 8017e68:	693a      	ldr	r2, [r7, #16]
 8017e6a:	b2d2      	uxtb	r2, r2
 8017e6c:	701a      	strb	r2, [r3, #0]
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8017e72:	221b      	movs	r2, #27
 8017e74:	6879      	ldr	r1, [r7, #4]
 8017e76:	68b8      	ldr	r0, [r7, #8]
 8017e78:	f7ff f880 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	f383 8811 	msr	BASEPRI, r3
}
 8017e82:	bf00      	nop
 8017e84:	3718      	adds	r7, #24
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}
 8017e8a:	bf00      	nop
 8017e8c:	2001b480 	.word	0x2001b480
 8017e90:	2001b47c 	.word	0x2001b47c

08017e94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b08a      	sub	sp, #40	; 0x28
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8017e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8017ea0:	f04f 0120 	mov.w	r1, #32
 8017ea4:	f381 8811 	msr	BASEPRI, r1
 8017ea8:	617b      	str	r3, [r7, #20]
 8017eaa:	4827      	ldr	r0, [pc, #156]	; (8017f48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8017eac:	f7fe ff76 	bl	8016d9c <_PreparePacket>
 8017eb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8017eb2:	2280      	movs	r2, #128	; 0x80
 8017eb4:	6879      	ldr	r1, [r7, #4]
 8017eb6:	6938      	ldr	r0, [r7, #16]
 8017eb8:	f7fe ff20 	bl	8016cfc <_EncodeStr>
 8017ebc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	623b      	str	r3, [r7, #32]
 8017ec6:	e00b      	b.n	8017ee0 <SEGGER_SYSVIEW_Warn+0x4c>
 8017ec8:	6a3b      	ldr	r3, [r7, #32]
 8017eca:	b2da      	uxtb	r2, r3
 8017ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ece:	1c59      	adds	r1, r3, #1
 8017ed0:	6279      	str	r1, [r7, #36]	; 0x24
 8017ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017ed6:	b2d2      	uxtb	r2, r2
 8017ed8:	701a      	strb	r2, [r3, #0]
 8017eda:	6a3b      	ldr	r3, [r7, #32]
 8017edc:	09db      	lsrs	r3, r3, #7
 8017ede:	623b      	str	r3, [r7, #32]
 8017ee0:	6a3b      	ldr	r3, [r7, #32]
 8017ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8017ee4:	d8f0      	bhi.n	8017ec8 <SEGGER_SYSVIEW_Warn+0x34>
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	1c5a      	adds	r2, r3, #1
 8017eea:	627a      	str	r2, [r7, #36]	; 0x24
 8017eec:	6a3a      	ldr	r2, [r7, #32]
 8017eee:	b2d2      	uxtb	r2, r2
 8017ef0:	701a      	strb	r2, [r3, #0]
 8017ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	61fb      	str	r3, [r7, #28]
 8017efa:	2300      	movs	r3, #0
 8017efc:	61bb      	str	r3, [r7, #24]
 8017efe:	e00b      	b.n	8017f18 <SEGGER_SYSVIEW_Warn+0x84>
 8017f00:	69bb      	ldr	r3, [r7, #24]
 8017f02:	b2da      	uxtb	r2, r3
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	1c59      	adds	r1, r3, #1
 8017f08:	61f9      	str	r1, [r7, #28]
 8017f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017f0e:	b2d2      	uxtb	r2, r2
 8017f10:	701a      	strb	r2, [r3, #0]
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	09db      	lsrs	r3, r3, #7
 8017f16:	61bb      	str	r3, [r7, #24]
 8017f18:	69bb      	ldr	r3, [r7, #24]
 8017f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8017f1c:	d8f0      	bhi.n	8017f00 <SEGGER_SYSVIEW_Warn+0x6c>
 8017f1e:	69fb      	ldr	r3, [r7, #28]
 8017f20:	1c5a      	adds	r2, r3, #1
 8017f22:	61fa      	str	r2, [r7, #28]
 8017f24:	69ba      	ldr	r2, [r7, #24]
 8017f26:	b2d2      	uxtb	r2, r2
 8017f28:	701a      	strb	r2, [r3, #0]
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8017f2e:	221a      	movs	r2, #26
 8017f30:	68f9      	ldr	r1, [r7, #12]
 8017f32:	6938      	ldr	r0, [r7, #16]
 8017f34:	f7ff f822 	bl	8016f7c <_SendPacket>
  RECORD_END();
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	f383 8811 	msr	BASEPRI, r3
}
 8017f3e:	bf00      	nop
 8017f40:	3728      	adds	r7, #40	; 0x28
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}
 8017f46:	bf00      	nop
 8017f48:	2001b480 	.word	0x2001b480

08017f4c <arm_pid_init_f32>:
 8017f4c:	edd0 6a08 	vldr	s13, [r0, #32]
 8017f50:	edd0 7a06 	vldr	s15, [r0, #24]
 8017f54:	ed90 7a07 	vldr	s14, [r0, #28]
 8017f58:	edc0 6a02 	vstr	s13, [r0, #8]
 8017f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017f60:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8017f64:	eef1 7a67 	vneg.f32	s15, s15
 8017f68:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017f6c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017f70:	ed80 7a00 	vstr	s14, [r0]
 8017f74:	edc0 7a01 	vstr	s15, [r0, #4]
 8017f78:	b901      	cbnz	r1, 8017f7c <arm_pid_init_f32+0x30>
 8017f7a:	4770      	bx	lr
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	60c3      	str	r3, [r0, #12]
 8017f80:	6103      	str	r3, [r0, #16]
 8017f82:	6143      	str	r3, [r0, #20]
 8017f84:	4770      	bx	lr
 8017f86:	bf00      	nop

08017f88 <__errno>:
 8017f88:	4b01      	ldr	r3, [pc, #4]	; (8017f90 <__errno+0x8>)
 8017f8a:	6818      	ldr	r0, [r3, #0]
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop
 8017f90:	20001444 	.word	0x20001444

08017f94 <__libc_init_array>:
 8017f94:	b570      	push	{r4, r5, r6, lr}
 8017f96:	4d0d      	ldr	r5, [pc, #52]	; (8017fcc <__libc_init_array+0x38>)
 8017f98:	4c0d      	ldr	r4, [pc, #52]	; (8017fd0 <__libc_init_array+0x3c>)
 8017f9a:	1b64      	subs	r4, r4, r5
 8017f9c:	10a4      	asrs	r4, r4, #2
 8017f9e:	2600      	movs	r6, #0
 8017fa0:	42a6      	cmp	r6, r4
 8017fa2:	d109      	bne.n	8017fb8 <__libc_init_array+0x24>
 8017fa4:	4d0b      	ldr	r5, [pc, #44]	; (8017fd4 <__libc_init_array+0x40>)
 8017fa6:	4c0c      	ldr	r4, [pc, #48]	; (8017fd8 <__libc_init_array+0x44>)
 8017fa8:	f000 fe22 	bl	8018bf0 <_init>
 8017fac:	1b64      	subs	r4, r4, r5
 8017fae:	10a4      	asrs	r4, r4, #2
 8017fb0:	2600      	movs	r6, #0
 8017fb2:	42a6      	cmp	r6, r4
 8017fb4:	d105      	bne.n	8017fc2 <__libc_init_array+0x2e>
 8017fb6:	bd70      	pop	{r4, r5, r6, pc}
 8017fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fbc:	4798      	blx	r3
 8017fbe:	3601      	adds	r6, #1
 8017fc0:	e7ee      	b.n	8017fa0 <__libc_init_array+0xc>
 8017fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fc6:	4798      	blx	r3
 8017fc8:	3601      	adds	r6, #1
 8017fca:	e7f2      	b.n	8017fb2 <__libc_init_array+0x1e>
 8017fcc:	08019008 	.word	0x08019008
 8017fd0:	08019008 	.word	0x08019008
 8017fd4:	08019008 	.word	0x08019008
 8017fd8:	0801900c 	.word	0x0801900c

08017fdc <__retarget_lock_acquire_recursive>:
 8017fdc:	4770      	bx	lr

08017fde <__retarget_lock_release_recursive>:
 8017fde:	4770      	bx	lr

08017fe0 <memcmp>:
 8017fe0:	b530      	push	{r4, r5, lr}
 8017fe2:	3901      	subs	r1, #1
 8017fe4:	2400      	movs	r4, #0
 8017fe6:	42a2      	cmp	r2, r4
 8017fe8:	d101      	bne.n	8017fee <memcmp+0xe>
 8017fea:	2000      	movs	r0, #0
 8017fec:	e005      	b.n	8017ffa <memcmp+0x1a>
 8017fee:	5d03      	ldrb	r3, [r0, r4]
 8017ff0:	3401      	adds	r4, #1
 8017ff2:	5d0d      	ldrb	r5, [r1, r4]
 8017ff4:	42ab      	cmp	r3, r5
 8017ff6:	d0f6      	beq.n	8017fe6 <memcmp+0x6>
 8017ff8:	1b58      	subs	r0, r3, r5
 8017ffa:	bd30      	pop	{r4, r5, pc}

08017ffc <memcpy>:
 8017ffc:	440a      	add	r2, r1
 8017ffe:	4291      	cmp	r1, r2
 8018000:	f100 33ff 	add.w	r3, r0, #4294967295
 8018004:	d100      	bne.n	8018008 <memcpy+0xc>
 8018006:	4770      	bx	lr
 8018008:	b510      	push	{r4, lr}
 801800a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801800e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018012:	4291      	cmp	r1, r2
 8018014:	d1f9      	bne.n	801800a <memcpy+0xe>
 8018016:	bd10      	pop	{r4, pc}

08018018 <memset>:
 8018018:	4402      	add	r2, r0
 801801a:	4603      	mov	r3, r0
 801801c:	4293      	cmp	r3, r2
 801801e:	d100      	bne.n	8018022 <memset+0xa>
 8018020:	4770      	bx	lr
 8018022:	f803 1b01 	strb.w	r1, [r3], #1
 8018026:	e7f9      	b.n	801801c <memset+0x4>

08018028 <cleanup_glue>:
 8018028:	b538      	push	{r3, r4, r5, lr}
 801802a:	460c      	mov	r4, r1
 801802c:	6809      	ldr	r1, [r1, #0]
 801802e:	4605      	mov	r5, r0
 8018030:	b109      	cbz	r1, 8018036 <cleanup_glue+0xe>
 8018032:	f7ff fff9 	bl	8018028 <cleanup_glue>
 8018036:	4621      	mov	r1, r4
 8018038:	4628      	mov	r0, r5
 801803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801803e:	f000 b869 	b.w	8018114 <_free_r>
	...

08018044 <_reclaim_reent>:
 8018044:	4b2c      	ldr	r3, [pc, #176]	; (80180f8 <_reclaim_reent+0xb4>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	4283      	cmp	r3, r0
 801804a:	b570      	push	{r4, r5, r6, lr}
 801804c:	4604      	mov	r4, r0
 801804e:	d051      	beq.n	80180f4 <_reclaim_reent+0xb0>
 8018050:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018052:	b143      	cbz	r3, 8018066 <_reclaim_reent+0x22>
 8018054:	68db      	ldr	r3, [r3, #12]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d14a      	bne.n	80180f0 <_reclaim_reent+0xac>
 801805a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801805c:	6819      	ldr	r1, [r3, #0]
 801805e:	b111      	cbz	r1, 8018066 <_reclaim_reent+0x22>
 8018060:	4620      	mov	r0, r4
 8018062:	f000 f857 	bl	8018114 <_free_r>
 8018066:	6961      	ldr	r1, [r4, #20]
 8018068:	b111      	cbz	r1, 8018070 <_reclaim_reent+0x2c>
 801806a:	4620      	mov	r0, r4
 801806c:	f000 f852 	bl	8018114 <_free_r>
 8018070:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018072:	b111      	cbz	r1, 801807a <_reclaim_reent+0x36>
 8018074:	4620      	mov	r0, r4
 8018076:	f000 f84d 	bl	8018114 <_free_r>
 801807a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801807c:	b111      	cbz	r1, 8018084 <_reclaim_reent+0x40>
 801807e:	4620      	mov	r0, r4
 8018080:	f000 f848 	bl	8018114 <_free_r>
 8018084:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018086:	b111      	cbz	r1, 801808e <_reclaim_reent+0x4a>
 8018088:	4620      	mov	r0, r4
 801808a:	f000 f843 	bl	8018114 <_free_r>
 801808e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018090:	b111      	cbz	r1, 8018098 <_reclaim_reent+0x54>
 8018092:	4620      	mov	r0, r4
 8018094:	f000 f83e 	bl	8018114 <_free_r>
 8018098:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801809a:	b111      	cbz	r1, 80180a2 <_reclaim_reent+0x5e>
 801809c:	4620      	mov	r0, r4
 801809e:	f000 f839 	bl	8018114 <_free_r>
 80180a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80180a4:	b111      	cbz	r1, 80180ac <_reclaim_reent+0x68>
 80180a6:	4620      	mov	r0, r4
 80180a8:	f000 f834 	bl	8018114 <_free_r>
 80180ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180ae:	b111      	cbz	r1, 80180b6 <_reclaim_reent+0x72>
 80180b0:	4620      	mov	r0, r4
 80180b2:	f000 f82f 	bl	8018114 <_free_r>
 80180b6:	69a3      	ldr	r3, [r4, #24]
 80180b8:	b1e3      	cbz	r3, 80180f4 <_reclaim_reent+0xb0>
 80180ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80180bc:	4620      	mov	r0, r4
 80180be:	4798      	blx	r3
 80180c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80180c2:	b1b9      	cbz	r1, 80180f4 <_reclaim_reent+0xb0>
 80180c4:	4620      	mov	r0, r4
 80180c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180ca:	f7ff bfad 	b.w	8018028 <cleanup_glue>
 80180ce:	5949      	ldr	r1, [r1, r5]
 80180d0:	b941      	cbnz	r1, 80180e4 <_reclaim_reent+0xa0>
 80180d2:	3504      	adds	r5, #4
 80180d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180d6:	2d80      	cmp	r5, #128	; 0x80
 80180d8:	68d9      	ldr	r1, [r3, #12]
 80180da:	d1f8      	bne.n	80180ce <_reclaim_reent+0x8a>
 80180dc:	4620      	mov	r0, r4
 80180de:	f000 f819 	bl	8018114 <_free_r>
 80180e2:	e7ba      	b.n	801805a <_reclaim_reent+0x16>
 80180e4:	680e      	ldr	r6, [r1, #0]
 80180e6:	4620      	mov	r0, r4
 80180e8:	f000 f814 	bl	8018114 <_free_r>
 80180ec:	4631      	mov	r1, r6
 80180ee:	e7ef      	b.n	80180d0 <_reclaim_reent+0x8c>
 80180f0:	2500      	movs	r5, #0
 80180f2:	e7ef      	b.n	80180d4 <_reclaim_reent+0x90>
 80180f4:	bd70      	pop	{r4, r5, r6, pc}
 80180f6:	bf00      	nop
 80180f8:	20001444 	.word	0x20001444

080180fc <__malloc_lock>:
 80180fc:	4801      	ldr	r0, [pc, #4]	; (8018104 <__malloc_lock+0x8>)
 80180fe:	f7ff bf6d 	b.w	8017fdc <__retarget_lock_acquire_recursive>
 8018102:	bf00      	nop
 8018104:	2001e984 	.word	0x2001e984

08018108 <__malloc_unlock>:
 8018108:	4801      	ldr	r0, [pc, #4]	; (8018110 <__malloc_unlock+0x8>)
 801810a:	f7ff bf68 	b.w	8017fde <__retarget_lock_release_recursive>
 801810e:	bf00      	nop
 8018110:	2001e984 	.word	0x2001e984

08018114 <_free_r>:
 8018114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018116:	2900      	cmp	r1, #0
 8018118:	d048      	beq.n	80181ac <_free_r+0x98>
 801811a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801811e:	9001      	str	r0, [sp, #4]
 8018120:	2b00      	cmp	r3, #0
 8018122:	f1a1 0404 	sub.w	r4, r1, #4
 8018126:	bfb8      	it	lt
 8018128:	18e4      	addlt	r4, r4, r3
 801812a:	f7ff ffe7 	bl	80180fc <__malloc_lock>
 801812e:	4a20      	ldr	r2, [pc, #128]	; (80181b0 <_free_r+0x9c>)
 8018130:	9801      	ldr	r0, [sp, #4]
 8018132:	6813      	ldr	r3, [r2, #0]
 8018134:	4615      	mov	r5, r2
 8018136:	b933      	cbnz	r3, 8018146 <_free_r+0x32>
 8018138:	6063      	str	r3, [r4, #4]
 801813a:	6014      	str	r4, [r2, #0]
 801813c:	b003      	add	sp, #12
 801813e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018142:	f7ff bfe1 	b.w	8018108 <__malloc_unlock>
 8018146:	42a3      	cmp	r3, r4
 8018148:	d90b      	bls.n	8018162 <_free_r+0x4e>
 801814a:	6821      	ldr	r1, [r4, #0]
 801814c:	1862      	adds	r2, r4, r1
 801814e:	4293      	cmp	r3, r2
 8018150:	bf04      	itt	eq
 8018152:	681a      	ldreq	r2, [r3, #0]
 8018154:	685b      	ldreq	r3, [r3, #4]
 8018156:	6063      	str	r3, [r4, #4]
 8018158:	bf04      	itt	eq
 801815a:	1852      	addeq	r2, r2, r1
 801815c:	6022      	streq	r2, [r4, #0]
 801815e:	602c      	str	r4, [r5, #0]
 8018160:	e7ec      	b.n	801813c <_free_r+0x28>
 8018162:	461a      	mov	r2, r3
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	b10b      	cbz	r3, 801816c <_free_r+0x58>
 8018168:	42a3      	cmp	r3, r4
 801816a:	d9fa      	bls.n	8018162 <_free_r+0x4e>
 801816c:	6811      	ldr	r1, [r2, #0]
 801816e:	1855      	adds	r5, r2, r1
 8018170:	42a5      	cmp	r5, r4
 8018172:	d10b      	bne.n	801818c <_free_r+0x78>
 8018174:	6824      	ldr	r4, [r4, #0]
 8018176:	4421      	add	r1, r4
 8018178:	1854      	adds	r4, r2, r1
 801817a:	42a3      	cmp	r3, r4
 801817c:	6011      	str	r1, [r2, #0]
 801817e:	d1dd      	bne.n	801813c <_free_r+0x28>
 8018180:	681c      	ldr	r4, [r3, #0]
 8018182:	685b      	ldr	r3, [r3, #4]
 8018184:	6053      	str	r3, [r2, #4]
 8018186:	4421      	add	r1, r4
 8018188:	6011      	str	r1, [r2, #0]
 801818a:	e7d7      	b.n	801813c <_free_r+0x28>
 801818c:	d902      	bls.n	8018194 <_free_r+0x80>
 801818e:	230c      	movs	r3, #12
 8018190:	6003      	str	r3, [r0, #0]
 8018192:	e7d3      	b.n	801813c <_free_r+0x28>
 8018194:	6825      	ldr	r5, [r4, #0]
 8018196:	1961      	adds	r1, r4, r5
 8018198:	428b      	cmp	r3, r1
 801819a:	bf04      	itt	eq
 801819c:	6819      	ldreq	r1, [r3, #0]
 801819e:	685b      	ldreq	r3, [r3, #4]
 80181a0:	6063      	str	r3, [r4, #4]
 80181a2:	bf04      	itt	eq
 80181a4:	1949      	addeq	r1, r1, r5
 80181a6:	6021      	streq	r1, [r4, #0]
 80181a8:	6054      	str	r4, [r2, #4]
 80181aa:	e7c7      	b.n	801813c <_free_r+0x28>
 80181ac:	b003      	add	sp, #12
 80181ae:	bd30      	pop	{r4, r5, pc}
 80181b0:	2001b564 	.word	0x2001b564

080181b4 <fmax>:
 80181b4:	b508      	push	{r3, lr}
 80181b6:	ed2d 8b04 	vpush	{d8-d9}
 80181ba:	eeb0 8a40 	vmov.f32	s16, s0
 80181be:	eef0 8a60 	vmov.f32	s17, s1
 80181c2:	eeb0 9a41 	vmov.f32	s18, s2
 80181c6:	eef0 9a61 	vmov.f32	s19, s3
 80181ca:	f000 f81b 	bl	8018204 <__fpclassifyd>
 80181ce:	b168      	cbz	r0, 80181ec <fmax+0x38>
 80181d0:	eeb0 0a49 	vmov.f32	s0, s18
 80181d4:	eef0 0a69 	vmov.f32	s1, s19
 80181d8:	f000 f814 	bl	8018204 <__fpclassifyd>
 80181dc:	b150      	cbz	r0, 80181f4 <fmax+0x40>
 80181de:	ec53 2b19 	vmov	r2, r3, d9
 80181e2:	ec51 0b18 	vmov	r0, r1, d8
 80181e6:	f7e8 fc89 	bl	8000afc <__aeabi_dcmpgt>
 80181ea:	b918      	cbnz	r0, 80181f4 <fmax+0x40>
 80181ec:	eeb0 8a49 	vmov.f32	s16, s18
 80181f0:	eef0 8a69 	vmov.f32	s17, s19
 80181f4:	eeb0 0a48 	vmov.f32	s0, s16
 80181f8:	eef0 0a68 	vmov.f32	s1, s17
 80181fc:	ecbd 8b04 	vpop	{d8-d9}
 8018200:	bd08      	pop	{r3, pc}
	...

08018204 <__fpclassifyd>:
 8018204:	ec51 0b10 	vmov	r0, r1, d0
 8018208:	b510      	push	{r4, lr}
 801820a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801820e:	460b      	mov	r3, r1
 8018210:	d019      	beq.n	8018246 <__fpclassifyd+0x42>
 8018212:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8018216:	490e      	ldr	r1, [pc, #56]	; (8018250 <__fpclassifyd+0x4c>)
 8018218:	428a      	cmp	r2, r1
 801821a:	d90e      	bls.n	801823a <__fpclassifyd+0x36>
 801821c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8018220:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8018224:	428a      	cmp	r2, r1
 8018226:	d908      	bls.n	801823a <__fpclassifyd+0x36>
 8018228:	4a0a      	ldr	r2, [pc, #40]	; (8018254 <__fpclassifyd+0x50>)
 801822a:	4213      	tst	r3, r2
 801822c:	d007      	beq.n	801823e <__fpclassifyd+0x3a>
 801822e:	4294      	cmp	r4, r2
 8018230:	d107      	bne.n	8018242 <__fpclassifyd+0x3e>
 8018232:	fab0 f080 	clz	r0, r0
 8018236:	0940      	lsrs	r0, r0, #5
 8018238:	bd10      	pop	{r4, pc}
 801823a:	2004      	movs	r0, #4
 801823c:	e7fc      	b.n	8018238 <__fpclassifyd+0x34>
 801823e:	2003      	movs	r0, #3
 8018240:	e7fa      	b.n	8018238 <__fpclassifyd+0x34>
 8018242:	2000      	movs	r0, #0
 8018244:	e7f8      	b.n	8018238 <__fpclassifyd+0x34>
 8018246:	2800      	cmp	r0, #0
 8018248:	d1ee      	bne.n	8018228 <__fpclassifyd+0x24>
 801824a:	2002      	movs	r0, #2
 801824c:	e7f4      	b.n	8018238 <__fpclassifyd+0x34>
 801824e:	bf00      	nop
 8018250:	7fdfffff 	.word	0x7fdfffff
 8018254:	7ff00000 	.word	0x7ff00000

08018258 <exp>:
 8018258:	b538      	push	{r3, r4, r5, lr}
 801825a:	ed2d 8b02 	vpush	{d8}
 801825e:	ec55 4b10 	vmov	r4, r5, d0
 8018262:	f000 f8c5 	bl	80183f0 <__ieee754_exp>
 8018266:	4b22      	ldr	r3, [pc, #136]	; (80182f0 <exp+0x98>)
 8018268:	eeb0 8a40 	vmov.f32	s16, s0
 801826c:	eef0 8a60 	vmov.f32	s17, s1
 8018270:	f993 3000 	ldrsb.w	r3, [r3]
 8018274:	3301      	adds	r3, #1
 8018276:	d012      	beq.n	801829e <exp+0x46>
 8018278:	ec45 4b10 	vmov	d0, r4, r5
 801827c:	f000 fca2 	bl	8018bc4 <finite>
 8018280:	b168      	cbz	r0, 801829e <exp+0x46>
 8018282:	a313      	add	r3, pc, #76	; (adr r3, 80182d0 <exp+0x78>)
 8018284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018288:	4620      	mov	r0, r4
 801828a:	4629      	mov	r1, r5
 801828c:	f7e8 fc36 	bl	8000afc <__aeabi_dcmpgt>
 8018290:	b160      	cbz	r0, 80182ac <exp+0x54>
 8018292:	f7ff fe79 	bl	8017f88 <__errno>
 8018296:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80182d8 <exp+0x80>
 801829a:	2322      	movs	r3, #34	; 0x22
 801829c:	6003      	str	r3, [r0, #0]
 801829e:	eeb0 0a48 	vmov.f32	s0, s16
 80182a2:	eef0 0a68 	vmov.f32	s1, s17
 80182a6:	ecbd 8b02 	vpop	{d8}
 80182aa:	bd38      	pop	{r3, r4, r5, pc}
 80182ac:	a30c      	add	r3, pc, #48	; (adr r3, 80182e0 <exp+0x88>)
 80182ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b2:	4620      	mov	r0, r4
 80182b4:	4629      	mov	r1, r5
 80182b6:	f7e8 fc03 	bl	8000ac0 <__aeabi_dcmplt>
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d0ef      	beq.n	801829e <exp+0x46>
 80182be:	f7ff fe63 	bl	8017f88 <__errno>
 80182c2:	2322      	movs	r3, #34	; 0x22
 80182c4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80182e8 <exp+0x90>
 80182c8:	6003      	str	r3, [r0, #0]
 80182ca:	e7e8      	b.n	801829e <exp+0x46>
 80182cc:	f3af 8000 	nop.w
 80182d0:	fefa39ef 	.word	0xfefa39ef
 80182d4:	40862e42 	.word	0x40862e42
 80182d8:	00000000 	.word	0x00000000
 80182dc:	7ff00000 	.word	0x7ff00000
 80182e0:	d52d3051 	.word	0xd52d3051
 80182e4:	c0874910 	.word	0xc0874910
	...
 80182f0:	200014a8 	.word	0x200014a8
 80182f4:	00000000 	.word	0x00000000

080182f8 <log>:
 80182f8:	b538      	push	{r3, r4, r5, lr}
 80182fa:	ed2d 8b02 	vpush	{d8}
 80182fe:	ec55 4b10 	vmov	r4, r5, d0
 8018302:	f000 f9f1 	bl	80186e8 <__ieee754_log>
 8018306:	4b1e      	ldr	r3, [pc, #120]	; (8018380 <log+0x88>)
 8018308:	eeb0 8a40 	vmov.f32	s16, s0
 801830c:	eef0 8a60 	vmov.f32	s17, s1
 8018310:	f993 3000 	ldrsb.w	r3, [r3]
 8018314:	3301      	adds	r3, #1
 8018316:	d01a      	beq.n	801834e <log+0x56>
 8018318:	4622      	mov	r2, r4
 801831a:	462b      	mov	r3, r5
 801831c:	4620      	mov	r0, r4
 801831e:	4629      	mov	r1, r5
 8018320:	f7e8 fbf6 	bl	8000b10 <__aeabi_dcmpun>
 8018324:	b998      	cbnz	r0, 801834e <log+0x56>
 8018326:	2200      	movs	r2, #0
 8018328:	2300      	movs	r3, #0
 801832a:	4620      	mov	r0, r4
 801832c:	4629      	mov	r1, r5
 801832e:	f7e8 fbe5 	bl	8000afc <__aeabi_dcmpgt>
 8018332:	b960      	cbnz	r0, 801834e <log+0x56>
 8018334:	2200      	movs	r2, #0
 8018336:	2300      	movs	r3, #0
 8018338:	4620      	mov	r0, r4
 801833a:	4629      	mov	r1, r5
 801833c:	f7e8 fbb6 	bl	8000aac <__aeabi_dcmpeq>
 8018340:	b160      	cbz	r0, 801835c <log+0x64>
 8018342:	f7ff fe21 	bl	8017f88 <__errno>
 8018346:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8018378 <log+0x80>
 801834a:	2322      	movs	r3, #34	; 0x22
 801834c:	6003      	str	r3, [r0, #0]
 801834e:	eeb0 0a48 	vmov.f32	s0, s16
 8018352:	eef0 0a68 	vmov.f32	s1, s17
 8018356:	ecbd 8b02 	vpop	{d8}
 801835a:	bd38      	pop	{r3, r4, r5, pc}
 801835c:	f7ff fe14 	bl	8017f88 <__errno>
 8018360:	ecbd 8b02 	vpop	{d8}
 8018364:	2321      	movs	r3, #33	; 0x21
 8018366:	6003      	str	r3, [r0, #0]
 8018368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801836c:	4805      	ldr	r0, [pc, #20]	; (8018384 <log+0x8c>)
 801836e:	f000 bc37 	b.w	8018be0 <nan>
 8018372:	bf00      	nop
 8018374:	f3af 8000 	nop.w
 8018378:	00000000 	.word	0x00000000
 801837c:	fff00000 	.word	0xfff00000
 8018380:	200014a8 	.word	0x200014a8
 8018384:	08018fcc 	.word	0x08018fcc

08018388 <sqrt>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	ed2d 8b02 	vpush	{d8}
 801838e:	ec55 4b10 	vmov	r4, r5, d0
 8018392:	f000 fb63 	bl	8018a5c <__ieee754_sqrt>
 8018396:	4b15      	ldr	r3, [pc, #84]	; (80183ec <sqrt+0x64>)
 8018398:	eeb0 8a40 	vmov.f32	s16, s0
 801839c:	eef0 8a60 	vmov.f32	s17, s1
 80183a0:	f993 3000 	ldrsb.w	r3, [r3]
 80183a4:	3301      	adds	r3, #1
 80183a6:	d019      	beq.n	80183dc <sqrt+0x54>
 80183a8:	4622      	mov	r2, r4
 80183aa:	462b      	mov	r3, r5
 80183ac:	4620      	mov	r0, r4
 80183ae:	4629      	mov	r1, r5
 80183b0:	f7e8 fbae 	bl	8000b10 <__aeabi_dcmpun>
 80183b4:	b990      	cbnz	r0, 80183dc <sqrt+0x54>
 80183b6:	2200      	movs	r2, #0
 80183b8:	2300      	movs	r3, #0
 80183ba:	4620      	mov	r0, r4
 80183bc:	4629      	mov	r1, r5
 80183be:	f7e8 fb7f 	bl	8000ac0 <__aeabi_dcmplt>
 80183c2:	b158      	cbz	r0, 80183dc <sqrt+0x54>
 80183c4:	f7ff fde0 	bl	8017f88 <__errno>
 80183c8:	2321      	movs	r3, #33	; 0x21
 80183ca:	6003      	str	r3, [r0, #0]
 80183cc:	2200      	movs	r2, #0
 80183ce:	2300      	movs	r3, #0
 80183d0:	4610      	mov	r0, r2
 80183d2:	4619      	mov	r1, r3
 80183d4:	f7e8 fa2c 	bl	8000830 <__aeabi_ddiv>
 80183d8:	ec41 0b18 	vmov	d8, r0, r1
 80183dc:	eeb0 0a48 	vmov.f32	s0, s16
 80183e0:	eef0 0a68 	vmov.f32	s1, s17
 80183e4:	ecbd 8b02 	vpop	{d8}
 80183e8:	bd38      	pop	{r3, r4, r5, pc}
 80183ea:	bf00      	nop
 80183ec:	200014a8 	.word	0x200014a8

080183f0 <__ieee754_exp>:
 80183f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183f4:	ec55 4b10 	vmov	r4, r5, d0
 80183f8:	49b1      	ldr	r1, [pc, #708]	; (80186c0 <__ieee754_exp+0x2d0>)
 80183fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80183fe:	428b      	cmp	r3, r1
 8018400:	ed2d 8b04 	vpush	{d8-d9}
 8018404:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8018408:	d937      	bls.n	801847a <__ieee754_exp+0x8a>
 801840a:	49ae      	ldr	r1, [pc, #696]	; (80186c4 <__ieee754_exp+0x2d4>)
 801840c:	428b      	cmp	r3, r1
 801840e:	d916      	bls.n	801843e <__ieee754_exp+0x4e>
 8018410:	ee10 3a10 	vmov	r3, s0
 8018414:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8018418:	4313      	orrs	r3, r2
 801841a:	d009      	beq.n	8018430 <__ieee754_exp+0x40>
 801841c:	ee10 2a10 	vmov	r2, s0
 8018420:	462b      	mov	r3, r5
 8018422:	4620      	mov	r0, r4
 8018424:	4629      	mov	r1, r5
 8018426:	f7e7 ff23 	bl	8000270 <__adddf3>
 801842a:	4604      	mov	r4, r0
 801842c:	460d      	mov	r5, r1
 801842e:	e000      	b.n	8018432 <__ieee754_exp+0x42>
 8018430:	bb06      	cbnz	r6, 8018474 <__ieee754_exp+0x84>
 8018432:	ecbd 8b04 	vpop	{d8-d9}
 8018436:	ec45 4b10 	vmov	d0, r4, r5
 801843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801843e:	a38a      	add	r3, pc, #552	; (adr r3, 8018668 <__ieee754_exp+0x278>)
 8018440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018444:	ee10 0a10 	vmov	r0, s0
 8018448:	4629      	mov	r1, r5
 801844a:	f7e8 fb57 	bl	8000afc <__aeabi_dcmpgt>
 801844e:	b138      	cbz	r0, 8018460 <__ieee754_exp+0x70>
 8018450:	a387      	add	r3, pc, #540	; (adr r3, 8018670 <__ieee754_exp+0x280>)
 8018452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018456:	4610      	mov	r0, r2
 8018458:	4619      	mov	r1, r3
 801845a:	f7e8 f8bf 	bl	80005dc <__aeabi_dmul>
 801845e:	e7e4      	b.n	801842a <__ieee754_exp+0x3a>
 8018460:	a385      	add	r3, pc, #532	; (adr r3, 8018678 <__ieee754_exp+0x288>)
 8018462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018466:	4620      	mov	r0, r4
 8018468:	4629      	mov	r1, r5
 801846a:	f7e8 fb29 	bl	8000ac0 <__aeabi_dcmplt>
 801846e:	2800      	cmp	r0, #0
 8018470:	f000 8087 	beq.w	8018582 <__ieee754_exp+0x192>
 8018474:	2400      	movs	r4, #0
 8018476:	2500      	movs	r5, #0
 8018478:	e7db      	b.n	8018432 <__ieee754_exp+0x42>
 801847a:	4a93      	ldr	r2, [pc, #588]	; (80186c8 <__ieee754_exp+0x2d8>)
 801847c:	4293      	cmp	r3, r2
 801847e:	f240 80ac 	bls.w	80185da <__ieee754_exp+0x1ea>
 8018482:	4a92      	ldr	r2, [pc, #584]	; (80186cc <__ieee754_exp+0x2dc>)
 8018484:	4293      	cmp	r3, r2
 8018486:	d87c      	bhi.n	8018582 <__ieee754_exp+0x192>
 8018488:	4b91      	ldr	r3, [pc, #580]	; (80186d0 <__ieee754_exp+0x2e0>)
 801848a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018492:	ee10 0a10 	vmov	r0, s0
 8018496:	4629      	mov	r1, r5
 8018498:	f7e7 fee8 	bl	800026c <__aeabi_dsub>
 801849c:	4b8d      	ldr	r3, [pc, #564]	; (80186d4 <__ieee754_exp+0x2e4>)
 801849e:	00f7      	lsls	r7, r6, #3
 80184a0:	443b      	add	r3, r7
 80184a2:	ed93 7b00 	vldr	d7, [r3]
 80184a6:	f1c6 0a01 	rsb	sl, r6, #1
 80184aa:	4680      	mov	r8, r0
 80184ac:	4689      	mov	r9, r1
 80184ae:	ebaa 0a06 	sub.w	sl, sl, r6
 80184b2:	eeb0 8a47 	vmov.f32	s16, s14
 80184b6:	eef0 8a67 	vmov.f32	s17, s15
 80184ba:	ec53 2b18 	vmov	r2, r3, d8
 80184be:	4640      	mov	r0, r8
 80184c0:	4649      	mov	r1, r9
 80184c2:	f7e7 fed3 	bl	800026c <__aeabi_dsub>
 80184c6:	4604      	mov	r4, r0
 80184c8:	460d      	mov	r5, r1
 80184ca:	4622      	mov	r2, r4
 80184cc:	462b      	mov	r3, r5
 80184ce:	4620      	mov	r0, r4
 80184d0:	4629      	mov	r1, r5
 80184d2:	f7e8 f883 	bl	80005dc <__aeabi_dmul>
 80184d6:	a36a      	add	r3, pc, #424	; (adr r3, 8018680 <__ieee754_exp+0x290>)
 80184d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184dc:	4606      	mov	r6, r0
 80184de:	460f      	mov	r7, r1
 80184e0:	f7e8 f87c 	bl	80005dc <__aeabi_dmul>
 80184e4:	a368      	add	r3, pc, #416	; (adr r3, 8018688 <__ieee754_exp+0x298>)
 80184e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ea:	f7e7 febf 	bl	800026c <__aeabi_dsub>
 80184ee:	4632      	mov	r2, r6
 80184f0:	463b      	mov	r3, r7
 80184f2:	f7e8 f873 	bl	80005dc <__aeabi_dmul>
 80184f6:	a366      	add	r3, pc, #408	; (adr r3, 8018690 <__ieee754_exp+0x2a0>)
 80184f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fc:	f7e7 feb8 	bl	8000270 <__adddf3>
 8018500:	4632      	mov	r2, r6
 8018502:	463b      	mov	r3, r7
 8018504:	f7e8 f86a 	bl	80005dc <__aeabi_dmul>
 8018508:	a363      	add	r3, pc, #396	; (adr r3, 8018698 <__ieee754_exp+0x2a8>)
 801850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801850e:	f7e7 fead 	bl	800026c <__aeabi_dsub>
 8018512:	4632      	mov	r2, r6
 8018514:	463b      	mov	r3, r7
 8018516:	f7e8 f861 	bl	80005dc <__aeabi_dmul>
 801851a:	a361      	add	r3, pc, #388	; (adr r3, 80186a0 <__ieee754_exp+0x2b0>)
 801851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018520:	f7e7 fea6 	bl	8000270 <__adddf3>
 8018524:	4632      	mov	r2, r6
 8018526:	463b      	mov	r3, r7
 8018528:	f7e8 f858 	bl	80005dc <__aeabi_dmul>
 801852c:	4602      	mov	r2, r0
 801852e:	460b      	mov	r3, r1
 8018530:	4620      	mov	r0, r4
 8018532:	4629      	mov	r1, r5
 8018534:	f7e7 fe9a 	bl	800026c <__aeabi_dsub>
 8018538:	4602      	mov	r2, r0
 801853a:	460b      	mov	r3, r1
 801853c:	4606      	mov	r6, r0
 801853e:	460f      	mov	r7, r1
 8018540:	4620      	mov	r0, r4
 8018542:	4629      	mov	r1, r5
 8018544:	f7e8 f84a 	bl	80005dc <__aeabi_dmul>
 8018548:	ec41 0b19 	vmov	d9, r0, r1
 801854c:	f1ba 0f00 	cmp.w	sl, #0
 8018550:	d15d      	bne.n	801860e <__ieee754_exp+0x21e>
 8018552:	2200      	movs	r2, #0
 8018554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018558:	4630      	mov	r0, r6
 801855a:	4639      	mov	r1, r7
 801855c:	f7e7 fe86 	bl	800026c <__aeabi_dsub>
 8018560:	4602      	mov	r2, r0
 8018562:	460b      	mov	r3, r1
 8018564:	ec51 0b19 	vmov	r0, r1, d9
 8018568:	f7e8 f962 	bl	8000830 <__aeabi_ddiv>
 801856c:	4622      	mov	r2, r4
 801856e:	462b      	mov	r3, r5
 8018570:	f7e7 fe7c 	bl	800026c <__aeabi_dsub>
 8018574:	4602      	mov	r2, r0
 8018576:	460b      	mov	r3, r1
 8018578:	2000      	movs	r0, #0
 801857a:	4957      	ldr	r1, [pc, #348]	; (80186d8 <__ieee754_exp+0x2e8>)
 801857c:	f7e7 fe76 	bl	800026c <__aeabi_dsub>
 8018580:	e753      	b.n	801842a <__ieee754_exp+0x3a>
 8018582:	4856      	ldr	r0, [pc, #344]	; (80186dc <__ieee754_exp+0x2ec>)
 8018584:	a348      	add	r3, pc, #288	; (adr r3, 80186a8 <__ieee754_exp+0x2b8>)
 8018586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801858e:	4629      	mov	r1, r5
 8018590:	4620      	mov	r0, r4
 8018592:	f7e8 f823 	bl	80005dc <__aeabi_dmul>
 8018596:	e9d6 2300 	ldrd	r2, r3, [r6]
 801859a:	f7e7 fe69 	bl	8000270 <__adddf3>
 801859e:	f7e8 facd 	bl	8000b3c <__aeabi_d2iz>
 80185a2:	4682      	mov	sl, r0
 80185a4:	f7e7 ffb0 	bl	8000508 <__aeabi_i2d>
 80185a8:	a341      	add	r3, pc, #260	; (adr r3, 80186b0 <__ieee754_exp+0x2c0>)
 80185aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ae:	4606      	mov	r6, r0
 80185b0:	460f      	mov	r7, r1
 80185b2:	f7e8 f813 	bl	80005dc <__aeabi_dmul>
 80185b6:	4602      	mov	r2, r0
 80185b8:	460b      	mov	r3, r1
 80185ba:	4620      	mov	r0, r4
 80185bc:	4629      	mov	r1, r5
 80185be:	f7e7 fe55 	bl	800026c <__aeabi_dsub>
 80185c2:	a33d      	add	r3, pc, #244	; (adr r3, 80186b8 <__ieee754_exp+0x2c8>)
 80185c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c8:	4680      	mov	r8, r0
 80185ca:	4689      	mov	r9, r1
 80185cc:	4630      	mov	r0, r6
 80185ce:	4639      	mov	r1, r7
 80185d0:	f7e8 f804 	bl	80005dc <__aeabi_dmul>
 80185d4:	ec41 0b18 	vmov	d8, r0, r1
 80185d8:	e76f      	b.n	80184ba <__ieee754_exp+0xca>
 80185da:	4a41      	ldr	r2, [pc, #260]	; (80186e0 <__ieee754_exp+0x2f0>)
 80185dc:	4293      	cmp	r3, r2
 80185de:	d811      	bhi.n	8018604 <__ieee754_exp+0x214>
 80185e0:	a323      	add	r3, pc, #140	; (adr r3, 8018670 <__ieee754_exp+0x280>)
 80185e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e6:	ee10 0a10 	vmov	r0, s0
 80185ea:	4629      	mov	r1, r5
 80185ec:	f7e7 fe40 	bl	8000270 <__adddf3>
 80185f0:	4b39      	ldr	r3, [pc, #228]	; (80186d8 <__ieee754_exp+0x2e8>)
 80185f2:	2200      	movs	r2, #0
 80185f4:	f7e8 fa82 	bl	8000afc <__aeabi_dcmpgt>
 80185f8:	b138      	cbz	r0, 801860a <__ieee754_exp+0x21a>
 80185fa:	4b37      	ldr	r3, [pc, #220]	; (80186d8 <__ieee754_exp+0x2e8>)
 80185fc:	2200      	movs	r2, #0
 80185fe:	4620      	mov	r0, r4
 8018600:	4629      	mov	r1, r5
 8018602:	e710      	b.n	8018426 <__ieee754_exp+0x36>
 8018604:	f04f 0a00 	mov.w	sl, #0
 8018608:	e75f      	b.n	80184ca <__ieee754_exp+0xda>
 801860a:	4682      	mov	sl, r0
 801860c:	e75d      	b.n	80184ca <__ieee754_exp+0xda>
 801860e:	4632      	mov	r2, r6
 8018610:	463b      	mov	r3, r7
 8018612:	2000      	movs	r0, #0
 8018614:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8018618:	f7e7 fe28 	bl	800026c <__aeabi_dsub>
 801861c:	4602      	mov	r2, r0
 801861e:	460b      	mov	r3, r1
 8018620:	ec51 0b19 	vmov	r0, r1, d9
 8018624:	f7e8 f904 	bl	8000830 <__aeabi_ddiv>
 8018628:	4602      	mov	r2, r0
 801862a:	460b      	mov	r3, r1
 801862c:	ec51 0b18 	vmov	r0, r1, d8
 8018630:	f7e7 fe1c 	bl	800026c <__aeabi_dsub>
 8018634:	4642      	mov	r2, r8
 8018636:	464b      	mov	r3, r9
 8018638:	f7e7 fe18 	bl	800026c <__aeabi_dsub>
 801863c:	4602      	mov	r2, r0
 801863e:	460b      	mov	r3, r1
 8018640:	2000      	movs	r0, #0
 8018642:	4925      	ldr	r1, [pc, #148]	; (80186d8 <__ieee754_exp+0x2e8>)
 8018644:	f7e7 fe12 	bl	800026c <__aeabi_dsub>
 8018648:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801864c:	4592      	cmp	sl, r2
 801864e:	db02      	blt.n	8018656 <__ieee754_exp+0x266>
 8018650:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8018654:	e6e9      	b.n	801842a <__ieee754_exp+0x3a>
 8018656:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801865a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801865e:	2200      	movs	r2, #0
 8018660:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8018664:	e6f9      	b.n	801845a <__ieee754_exp+0x6a>
 8018666:	bf00      	nop
 8018668:	fefa39ef 	.word	0xfefa39ef
 801866c:	40862e42 	.word	0x40862e42
 8018670:	8800759c 	.word	0x8800759c
 8018674:	7e37e43c 	.word	0x7e37e43c
 8018678:	d52d3051 	.word	0xd52d3051
 801867c:	c0874910 	.word	0xc0874910
 8018680:	72bea4d0 	.word	0x72bea4d0
 8018684:	3e663769 	.word	0x3e663769
 8018688:	c5d26bf1 	.word	0xc5d26bf1
 801868c:	3ebbbd41 	.word	0x3ebbbd41
 8018690:	af25de2c 	.word	0xaf25de2c
 8018694:	3f11566a 	.word	0x3f11566a
 8018698:	16bebd93 	.word	0x16bebd93
 801869c:	3f66c16c 	.word	0x3f66c16c
 80186a0:	5555553e 	.word	0x5555553e
 80186a4:	3fc55555 	.word	0x3fc55555
 80186a8:	652b82fe 	.word	0x652b82fe
 80186ac:	3ff71547 	.word	0x3ff71547
 80186b0:	fee00000 	.word	0xfee00000
 80186b4:	3fe62e42 	.word	0x3fe62e42
 80186b8:	35793c76 	.word	0x35793c76
 80186bc:	3dea39ef 	.word	0x3dea39ef
 80186c0:	40862e41 	.word	0x40862e41
 80186c4:	7fefffff 	.word	0x7fefffff
 80186c8:	3fd62e42 	.word	0x3fd62e42
 80186cc:	3ff0a2b1 	.word	0x3ff0a2b1
 80186d0:	08018fe0 	.word	0x08018fe0
 80186d4:	08018ff0 	.word	0x08018ff0
 80186d8:	3ff00000 	.word	0x3ff00000
 80186dc:	08018fd0 	.word	0x08018fd0
 80186e0:	3e2fffff 	.word	0x3e2fffff
 80186e4:	00000000 	.word	0x00000000

080186e8 <__ieee754_log>:
 80186e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ec:	ec51 0b10 	vmov	r0, r1, d0
 80186f0:	ed2d 8b04 	vpush	{d8-d9}
 80186f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80186f8:	b083      	sub	sp, #12
 80186fa:	460d      	mov	r5, r1
 80186fc:	da29      	bge.n	8018752 <__ieee754_log+0x6a>
 80186fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018702:	4303      	orrs	r3, r0
 8018704:	ee10 2a10 	vmov	r2, s0
 8018708:	d10c      	bne.n	8018724 <__ieee754_log+0x3c>
 801870a:	49cf      	ldr	r1, [pc, #828]	; (8018a48 <__ieee754_log+0x360>)
 801870c:	2200      	movs	r2, #0
 801870e:	2300      	movs	r3, #0
 8018710:	2000      	movs	r0, #0
 8018712:	f7e8 f88d 	bl	8000830 <__aeabi_ddiv>
 8018716:	ec41 0b10 	vmov	d0, r0, r1
 801871a:	b003      	add	sp, #12
 801871c:	ecbd 8b04 	vpop	{d8-d9}
 8018720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018724:	2900      	cmp	r1, #0
 8018726:	da05      	bge.n	8018734 <__ieee754_log+0x4c>
 8018728:	460b      	mov	r3, r1
 801872a:	f7e7 fd9f 	bl	800026c <__aeabi_dsub>
 801872e:	2200      	movs	r2, #0
 8018730:	2300      	movs	r3, #0
 8018732:	e7ee      	b.n	8018712 <__ieee754_log+0x2a>
 8018734:	4bc5      	ldr	r3, [pc, #788]	; (8018a4c <__ieee754_log+0x364>)
 8018736:	2200      	movs	r2, #0
 8018738:	f7e7 ff50 	bl	80005dc <__aeabi_dmul>
 801873c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8018740:	460d      	mov	r5, r1
 8018742:	4ac3      	ldr	r2, [pc, #780]	; (8018a50 <__ieee754_log+0x368>)
 8018744:	4295      	cmp	r5, r2
 8018746:	dd06      	ble.n	8018756 <__ieee754_log+0x6e>
 8018748:	4602      	mov	r2, r0
 801874a:	460b      	mov	r3, r1
 801874c:	f7e7 fd90 	bl	8000270 <__adddf3>
 8018750:	e7e1      	b.n	8018716 <__ieee754_log+0x2e>
 8018752:	2300      	movs	r3, #0
 8018754:	e7f5      	b.n	8018742 <__ieee754_log+0x5a>
 8018756:	152c      	asrs	r4, r5, #20
 8018758:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801875c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8018760:	441c      	add	r4, r3
 8018762:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8018766:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801876a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801876e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8018772:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8018776:	ea42 0105 	orr.w	r1, r2, r5
 801877a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801877e:	2200      	movs	r2, #0
 8018780:	4bb4      	ldr	r3, [pc, #720]	; (8018a54 <__ieee754_log+0x36c>)
 8018782:	f7e7 fd73 	bl	800026c <__aeabi_dsub>
 8018786:	1cab      	adds	r3, r5, #2
 8018788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801878c:	2b02      	cmp	r3, #2
 801878e:	4682      	mov	sl, r0
 8018790:	468b      	mov	fp, r1
 8018792:	f04f 0200 	mov.w	r2, #0
 8018796:	dc53      	bgt.n	8018840 <__ieee754_log+0x158>
 8018798:	2300      	movs	r3, #0
 801879a:	f7e8 f987 	bl	8000aac <__aeabi_dcmpeq>
 801879e:	b1d0      	cbz	r0, 80187d6 <__ieee754_log+0xee>
 80187a0:	2c00      	cmp	r4, #0
 80187a2:	f000 8122 	beq.w	80189ea <__ieee754_log+0x302>
 80187a6:	4620      	mov	r0, r4
 80187a8:	f7e7 feae 	bl	8000508 <__aeabi_i2d>
 80187ac:	a390      	add	r3, pc, #576	; (adr r3, 80189f0 <__ieee754_log+0x308>)
 80187ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187b2:	4606      	mov	r6, r0
 80187b4:	460f      	mov	r7, r1
 80187b6:	f7e7 ff11 	bl	80005dc <__aeabi_dmul>
 80187ba:	a38f      	add	r3, pc, #572	; (adr r3, 80189f8 <__ieee754_log+0x310>)
 80187bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187c0:	4604      	mov	r4, r0
 80187c2:	460d      	mov	r5, r1
 80187c4:	4630      	mov	r0, r6
 80187c6:	4639      	mov	r1, r7
 80187c8:	f7e7 ff08 	bl	80005dc <__aeabi_dmul>
 80187cc:	4602      	mov	r2, r0
 80187ce:	460b      	mov	r3, r1
 80187d0:	4620      	mov	r0, r4
 80187d2:	4629      	mov	r1, r5
 80187d4:	e7ba      	b.n	801874c <__ieee754_log+0x64>
 80187d6:	a38a      	add	r3, pc, #552	; (adr r3, 8018a00 <__ieee754_log+0x318>)
 80187d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187dc:	4650      	mov	r0, sl
 80187de:	4659      	mov	r1, fp
 80187e0:	f7e7 fefc 	bl	80005dc <__aeabi_dmul>
 80187e4:	4602      	mov	r2, r0
 80187e6:	460b      	mov	r3, r1
 80187e8:	2000      	movs	r0, #0
 80187ea:	499b      	ldr	r1, [pc, #620]	; (8018a58 <__ieee754_log+0x370>)
 80187ec:	f7e7 fd3e 	bl	800026c <__aeabi_dsub>
 80187f0:	4652      	mov	r2, sl
 80187f2:	4606      	mov	r6, r0
 80187f4:	460f      	mov	r7, r1
 80187f6:	465b      	mov	r3, fp
 80187f8:	4650      	mov	r0, sl
 80187fa:	4659      	mov	r1, fp
 80187fc:	f7e7 feee 	bl	80005dc <__aeabi_dmul>
 8018800:	4602      	mov	r2, r0
 8018802:	460b      	mov	r3, r1
 8018804:	4630      	mov	r0, r6
 8018806:	4639      	mov	r1, r7
 8018808:	f7e7 fee8 	bl	80005dc <__aeabi_dmul>
 801880c:	4606      	mov	r6, r0
 801880e:	460f      	mov	r7, r1
 8018810:	b914      	cbnz	r4, 8018818 <__ieee754_log+0x130>
 8018812:	4632      	mov	r2, r6
 8018814:	463b      	mov	r3, r7
 8018816:	e0a2      	b.n	801895e <__ieee754_log+0x276>
 8018818:	4620      	mov	r0, r4
 801881a:	f7e7 fe75 	bl	8000508 <__aeabi_i2d>
 801881e:	a374      	add	r3, pc, #464	; (adr r3, 80189f0 <__ieee754_log+0x308>)
 8018820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018824:	4680      	mov	r8, r0
 8018826:	4689      	mov	r9, r1
 8018828:	f7e7 fed8 	bl	80005dc <__aeabi_dmul>
 801882c:	a372      	add	r3, pc, #456	; (adr r3, 80189f8 <__ieee754_log+0x310>)
 801882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018832:	4604      	mov	r4, r0
 8018834:	460d      	mov	r5, r1
 8018836:	4640      	mov	r0, r8
 8018838:	4649      	mov	r1, r9
 801883a:	f7e7 fecf 	bl	80005dc <__aeabi_dmul>
 801883e:	e0a7      	b.n	8018990 <__ieee754_log+0x2a8>
 8018840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018844:	f7e7 fd14 	bl	8000270 <__adddf3>
 8018848:	4602      	mov	r2, r0
 801884a:	460b      	mov	r3, r1
 801884c:	4650      	mov	r0, sl
 801884e:	4659      	mov	r1, fp
 8018850:	f7e7 ffee 	bl	8000830 <__aeabi_ddiv>
 8018854:	ec41 0b18 	vmov	d8, r0, r1
 8018858:	4620      	mov	r0, r4
 801885a:	f7e7 fe55 	bl	8000508 <__aeabi_i2d>
 801885e:	ec53 2b18 	vmov	r2, r3, d8
 8018862:	ec41 0b19 	vmov	d9, r0, r1
 8018866:	ec51 0b18 	vmov	r0, r1, d8
 801886a:	f7e7 feb7 	bl	80005dc <__aeabi_dmul>
 801886e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8018872:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8018876:	9301      	str	r3, [sp, #4]
 8018878:	4602      	mov	r2, r0
 801887a:	460b      	mov	r3, r1
 801887c:	4680      	mov	r8, r0
 801887e:	4689      	mov	r9, r1
 8018880:	f7e7 feac 	bl	80005dc <__aeabi_dmul>
 8018884:	a360      	add	r3, pc, #384	; (adr r3, 8018a08 <__ieee754_log+0x320>)
 8018886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801888a:	4606      	mov	r6, r0
 801888c:	460f      	mov	r7, r1
 801888e:	f7e7 fea5 	bl	80005dc <__aeabi_dmul>
 8018892:	a35f      	add	r3, pc, #380	; (adr r3, 8018a10 <__ieee754_log+0x328>)
 8018894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018898:	f7e7 fcea 	bl	8000270 <__adddf3>
 801889c:	4632      	mov	r2, r6
 801889e:	463b      	mov	r3, r7
 80188a0:	f7e7 fe9c 	bl	80005dc <__aeabi_dmul>
 80188a4:	a35c      	add	r3, pc, #368	; (adr r3, 8018a18 <__ieee754_log+0x330>)
 80188a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188aa:	f7e7 fce1 	bl	8000270 <__adddf3>
 80188ae:	4632      	mov	r2, r6
 80188b0:	463b      	mov	r3, r7
 80188b2:	f7e7 fe93 	bl	80005dc <__aeabi_dmul>
 80188b6:	a35a      	add	r3, pc, #360	; (adr r3, 8018a20 <__ieee754_log+0x338>)
 80188b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188bc:	f7e7 fcd8 	bl	8000270 <__adddf3>
 80188c0:	4642      	mov	r2, r8
 80188c2:	464b      	mov	r3, r9
 80188c4:	f7e7 fe8a 	bl	80005dc <__aeabi_dmul>
 80188c8:	a357      	add	r3, pc, #348	; (adr r3, 8018a28 <__ieee754_log+0x340>)
 80188ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ce:	4680      	mov	r8, r0
 80188d0:	4689      	mov	r9, r1
 80188d2:	4630      	mov	r0, r6
 80188d4:	4639      	mov	r1, r7
 80188d6:	f7e7 fe81 	bl	80005dc <__aeabi_dmul>
 80188da:	a355      	add	r3, pc, #340	; (adr r3, 8018a30 <__ieee754_log+0x348>)
 80188dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188e0:	f7e7 fcc6 	bl	8000270 <__adddf3>
 80188e4:	4632      	mov	r2, r6
 80188e6:	463b      	mov	r3, r7
 80188e8:	f7e7 fe78 	bl	80005dc <__aeabi_dmul>
 80188ec:	a352      	add	r3, pc, #328	; (adr r3, 8018a38 <__ieee754_log+0x350>)
 80188ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f2:	f7e7 fcbd 	bl	8000270 <__adddf3>
 80188f6:	4632      	mov	r2, r6
 80188f8:	463b      	mov	r3, r7
 80188fa:	f7e7 fe6f 	bl	80005dc <__aeabi_dmul>
 80188fe:	460b      	mov	r3, r1
 8018900:	4602      	mov	r2, r0
 8018902:	4649      	mov	r1, r9
 8018904:	4640      	mov	r0, r8
 8018906:	f7e7 fcb3 	bl	8000270 <__adddf3>
 801890a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801890e:	9b01      	ldr	r3, [sp, #4]
 8018910:	3551      	adds	r5, #81	; 0x51
 8018912:	431d      	orrs	r5, r3
 8018914:	2d00      	cmp	r5, #0
 8018916:	4680      	mov	r8, r0
 8018918:	4689      	mov	r9, r1
 801891a:	dd48      	ble.n	80189ae <__ieee754_log+0x2c6>
 801891c:	4b4e      	ldr	r3, [pc, #312]	; (8018a58 <__ieee754_log+0x370>)
 801891e:	2200      	movs	r2, #0
 8018920:	4650      	mov	r0, sl
 8018922:	4659      	mov	r1, fp
 8018924:	f7e7 fe5a 	bl	80005dc <__aeabi_dmul>
 8018928:	4652      	mov	r2, sl
 801892a:	465b      	mov	r3, fp
 801892c:	f7e7 fe56 	bl	80005dc <__aeabi_dmul>
 8018930:	4602      	mov	r2, r0
 8018932:	460b      	mov	r3, r1
 8018934:	4606      	mov	r6, r0
 8018936:	460f      	mov	r7, r1
 8018938:	4640      	mov	r0, r8
 801893a:	4649      	mov	r1, r9
 801893c:	f7e7 fc98 	bl	8000270 <__adddf3>
 8018940:	ec53 2b18 	vmov	r2, r3, d8
 8018944:	f7e7 fe4a 	bl	80005dc <__aeabi_dmul>
 8018948:	4680      	mov	r8, r0
 801894a:	4689      	mov	r9, r1
 801894c:	b964      	cbnz	r4, 8018968 <__ieee754_log+0x280>
 801894e:	4602      	mov	r2, r0
 8018950:	460b      	mov	r3, r1
 8018952:	4630      	mov	r0, r6
 8018954:	4639      	mov	r1, r7
 8018956:	f7e7 fc89 	bl	800026c <__aeabi_dsub>
 801895a:	4602      	mov	r2, r0
 801895c:	460b      	mov	r3, r1
 801895e:	4650      	mov	r0, sl
 8018960:	4659      	mov	r1, fp
 8018962:	f7e7 fc83 	bl	800026c <__aeabi_dsub>
 8018966:	e6d6      	b.n	8018716 <__ieee754_log+0x2e>
 8018968:	a321      	add	r3, pc, #132	; (adr r3, 80189f0 <__ieee754_log+0x308>)
 801896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801896e:	ec51 0b19 	vmov	r0, r1, d9
 8018972:	f7e7 fe33 	bl	80005dc <__aeabi_dmul>
 8018976:	a320      	add	r3, pc, #128	; (adr r3, 80189f8 <__ieee754_log+0x310>)
 8018978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801897c:	4604      	mov	r4, r0
 801897e:	460d      	mov	r5, r1
 8018980:	ec51 0b19 	vmov	r0, r1, d9
 8018984:	f7e7 fe2a 	bl	80005dc <__aeabi_dmul>
 8018988:	4642      	mov	r2, r8
 801898a:	464b      	mov	r3, r9
 801898c:	f7e7 fc70 	bl	8000270 <__adddf3>
 8018990:	4602      	mov	r2, r0
 8018992:	460b      	mov	r3, r1
 8018994:	4630      	mov	r0, r6
 8018996:	4639      	mov	r1, r7
 8018998:	f7e7 fc68 	bl	800026c <__aeabi_dsub>
 801899c:	4652      	mov	r2, sl
 801899e:	465b      	mov	r3, fp
 80189a0:	f7e7 fc64 	bl	800026c <__aeabi_dsub>
 80189a4:	4602      	mov	r2, r0
 80189a6:	460b      	mov	r3, r1
 80189a8:	4620      	mov	r0, r4
 80189aa:	4629      	mov	r1, r5
 80189ac:	e7d9      	b.n	8018962 <__ieee754_log+0x27a>
 80189ae:	4602      	mov	r2, r0
 80189b0:	460b      	mov	r3, r1
 80189b2:	4650      	mov	r0, sl
 80189b4:	4659      	mov	r1, fp
 80189b6:	f7e7 fc59 	bl	800026c <__aeabi_dsub>
 80189ba:	ec53 2b18 	vmov	r2, r3, d8
 80189be:	f7e7 fe0d 	bl	80005dc <__aeabi_dmul>
 80189c2:	4606      	mov	r6, r0
 80189c4:	460f      	mov	r7, r1
 80189c6:	2c00      	cmp	r4, #0
 80189c8:	f43f af23 	beq.w	8018812 <__ieee754_log+0x12a>
 80189cc:	a308      	add	r3, pc, #32	; (adr r3, 80189f0 <__ieee754_log+0x308>)
 80189ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d2:	ec51 0b19 	vmov	r0, r1, d9
 80189d6:	f7e7 fe01 	bl	80005dc <__aeabi_dmul>
 80189da:	a307      	add	r3, pc, #28	; (adr r3, 80189f8 <__ieee754_log+0x310>)
 80189dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e0:	4604      	mov	r4, r0
 80189e2:	460d      	mov	r5, r1
 80189e4:	ec51 0b19 	vmov	r0, r1, d9
 80189e8:	e727      	b.n	801883a <__ieee754_log+0x152>
 80189ea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8018a40 <__ieee754_log+0x358>
 80189ee:	e694      	b.n	801871a <__ieee754_log+0x32>
 80189f0:	fee00000 	.word	0xfee00000
 80189f4:	3fe62e42 	.word	0x3fe62e42
 80189f8:	35793c76 	.word	0x35793c76
 80189fc:	3dea39ef 	.word	0x3dea39ef
 8018a00:	55555555 	.word	0x55555555
 8018a04:	3fd55555 	.word	0x3fd55555
 8018a08:	df3e5244 	.word	0xdf3e5244
 8018a0c:	3fc2f112 	.word	0x3fc2f112
 8018a10:	96cb03de 	.word	0x96cb03de
 8018a14:	3fc74664 	.word	0x3fc74664
 8018a18:	94229359 	.word	0x94229359
 8018a1c:	3fd24924 	.word	0x3fd24924
 8018a20:	55555593 	.word	0x55555593
 8018a24:	3fe55555 	.word	0x3fe55555
 8018a28:	d078c69f 	.word	0xd078c69f
 8018a2c:	3fc39a09 	.word	0x3fc39a09
 8018a30:	1d8e78af 	.word	0x1d8e78af
 8018a34:	3fcc71c5 	.word	0x3fcc71c5
 8018a38:	9997fa04 	.word	0x9997fa04
 8018a3c:	3fd99999 	.word	0x3fd99999
	...
 8018a48:	c3500000 	.word	0xc3500000
 8018a4c:	43500000 	.word	0x43500000
 8018a50:	7fefffff 	.word	0x7fefffff
 8018a54:	3ff00000 	.word	0x3ff00000
 8018a58:	3fe00000 	.word	0x3fe00000

08018a5c <__ieee754_sqrt>:
 8018a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a60:	ec55 4b10 	vmov	r4, r5, d0
 8018a64:	4e56      	ldr	r6, [pc, #344]	; (8018bc0 <__ieee754_sqrt+0x164>)
 8018a66:	43ae      	bics	r6, r5
 8018a68:	ee10 0a10 	vmov	r0, s0
 8018a6c:	ee10 3a10 	vmov	r3, s0
 8018a70:	4629      	mov	r1, r5
 8018a72:	462a      	mov	r2, r5
 8018a74:	d110      	bne.n	8018a98 <__ieee754_sqrt+0x3c>
 8018a76:	ee10 2a10 	vmov	r2, s0
 8018a7a:	462b      	mov	r3, r5
 8018a7c:	f7e7 fdae 	bl	80005dc <__aeabi_dmul>
 8018a80:	4602      	mov	r2, r0
 8018a82:	460b      	mov	r3, r1
 8018a84:	4620      	mov	r0, r4
 8018a86:	4629      	mov	r1, r5
 8018a88:	f7e7 fbf2 	bl	8000270 <__adddf3>
 8018a8c:	4604      	mov	r4, r0
 8018a8e:	460d      	mov	r5, r1
 8018a90:	ec45 4b10 	vmov	d0, r4, r5
 8018a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a98:	2d00      	cmp	r5, #0
 8018a9a:	dc10      	bgt.n	8018abe <__ieee754_sqrt+0x62>
 8018a9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018aa0:	4330      	orrs	r0, r6
 8018aa2:	d0f5      	beq.n	8018a90 <__ieee754_sqrt+0x34>
 8018aa4:	b15d      	cbz	r5, 8018abe <__ieee754_sqrt+0x62>
 8018aa6:	ee10 2a10 	vmov	r2, s0
 8018aaa:	462b      	mov	r3, r5
 8018aac:	ee10 0a10 	vmov	r0, s0
 8018ab0:	f7e7 fbdc 	bl	800026c <__aeabi_dsub>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	460b      	mov	r3, r1
 8018ab8:	f7e7 feba 	bl	8000830 <__aeabi_ddiv>
 8018abc:	e7e6      	b.n	8018a8c <__ieee754_sqrt+0x30>
 8018abe:	1509      	asrs	r1, r1, #20
 8018ac0:	d076      	beq.n	8018bb0 <__ieee754_sqrt+0x154>
 8018ac2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018ac6:	07ce      	lsls	r6, r1, #31
 8018ac8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8018acc:	bf5e      	ittt	pl
 8018ace:	0fda      	lsrpl	r2, r3, #31
 8018ad0:	005b      	lslpl	r3, r3, #1
 8018ad2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8018ad6:	0fda      	lsrs	r2, r3, #31
 8018ad8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8018adc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	106d      	asrs	r5, r5, #1
 8018ae4:	005b      	lsls	r3, r3, #1
 8018ae6:	f04f 0e16 	mov.w	lr, #22
 8018aea:	4684      	mov	ip, r0
 8018aec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018af0:	eb0c 0401 	add.w	r4, ip, r1
 8018af4:	4294      	cmp	r4, r2
 8018af6:	bfde      	ittt	le
 8018af8:	1b12      	suble	r2, r2, r4
 8018afa:	eb04 0c01 	addle.w	ip, r4, r1
 8018afe:	1840      	addle	r0, r0, r1
 8018b00:	0052      	lsls	r2, r2, #1
 8018b02:	f1be 0e01 	subs.w	lr, lr, #1
 8018b06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018b0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018b0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018b12:	d1ed      	bne.n	8018af0 <__ieee754_sqrt+0x94>
 8018b14:	4671      	mov	r1, lr
 8018b16:	2720      	movs	r7, #32
 8018b18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018b1c:	4562      	cmp	r2, ip
 8018b1e:	eb04 060e 	add.w	r6, r4, lr
 8018b22:	dc02      	bgt.n	8018b2a <__ieee754_sqrt+0xce>
 8018b24:	d113      	bne.n	8018b4e <__ieee754_sqrt+0xf2>
 8018b26:	429e      	cmp	r6, r3
 8018b28:	d811      	bhi.n	8018b4e <__ieee754_sqrt+0xf2>
 8018b2a:	2e00      	cmp	r6, #0
 8018b2c:	eb06 0e04 	add.w	lr, r6, r4
 8018b30:	da43      	bge.n	8018bba <__ieee754_sqrt+0x15e>
 8018b32:	f1be 0f00 	cmp.w	lr, #0
 8018b36:	db40      	blt.n	8018bba <__ieee754_sqrt+0x15e>
 8018b38:	f10c 0801 	add.w	r8, ip, #1
 8018b3c:	eba2 020c 	sub.w	r2, r2, ip
 8018b40:	429e      	cmp	r6, r3
 8018b42:	bf88      	it	hi
 8018b44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018b48:	1b9b      	subs	r3, r3, r6
 8018b4a:	4421      	add	r1, r4
 8018b4c:	46c4      	mov	ip, r8
 8018b4e:	0052      	lsls	r2, r2, #1
 8018b50:	3f01      	subs	r7, #1
 8018b52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018b56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018b5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018b5e:	d1dd      	bne.n	8018b1c <__ieee754_sqrt+0xc0>
 8018b60:	4313      	orrs	r3, r2
 8018b62:	d006      	beq.n	8018b72 <__ieee754_sqrt+0x116>
 8018b64:	1c4c      	adds	r4, r1, #1
 8018b66:	bf13      	iteet	ne
 8018b68:	3101      	addne	r1, #1
 8018b6a:	3001      	addeq	r0, #1
 8018b6c:	4639      	moveq	r1, r7
 8018b6e:	f021 0101 	bicne.w	r1, r1, #1
 8018b72:	1043      	asrs	r3, r0, #1
 8018b74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018b78:	0849      	lsrs	r1, r1, #1
 8018b7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018b7e:	07c2      	lsls	r2, r0, #31
 8018b80:	bf48      	it	mi
 8018b82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018b86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8018b8a:	460c      	mov	r4, r1
 8018b8c:	463d      	mov	r5, r7
 8018b8e:	e77f      	b.n	8018a90 <__ieee754_sqrt+0x34>
 8018b90:	0ada      	lsrs	r2, r3, #11
 8018b92:	3815      	subs	r0, #21
 8018b94:	055b      	lsls	r3, r3, #21
 8018b96:	2a00      	cmp	r2, #0
 8018b98:	d0fa      	beq.n	8018b90 <__ieee754_sqrt+0x134>
 8018b9a:	02d7      	lsls	r7, r2, #11
 8018b9c:	d50a      	bpl.n	8018bb4 <__ieee754_sqrt+0x158>
 8018b9e:	f1c1 0420 	rsb	r4, r1, #32
 8018ba2:	fa23 f404 	lsr.w	r4, r3, r4
 8018ba6:	1e4d      	subs	r5, r1, #1
 8018ba8:	408b      	lsls	r3, r1
 8018baa:	4322      	orrs	r2, r4
 8018bac:	1b41      	subs	r1, r0, r5
 8018bae:	e788      	b.n	8018ac2 <__ieee754_sqrt+0x66>
 8018bb0:	4608      	mov	r0, r1
 8018bb2:	e7f0      	b.n	8018b96 <__ieee754_sqrt+0x13a>
 8018bb4:	0052      	lsls	r2, r2, #1
 8018bb6:	3101      	adds	r1, #1
 8018bb8:	e7ef      	b.n	8018b9a <__ieee754_sqrt+0x13e>
 8018bba:	46e0      	mov	r8, ip
 8018bbc:	e7be      	b.n	8018b3c <__ieee754_sqrt+0xe0>
 8018bbe:	bf00      	nop
 8018bc0:	7ff00000 	.word	0x7ff00000

08018bc4 <finite>:
 8018bc4:	b082      	sub	sp, #8
 8018bc6:	ed8d 0b00 	vstr	d0, [sp]
 8018bca:	9801      	ldr	r0, [sp, #4]
 8018bcc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018bd0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018bd4:	0fc0      	lsrs	r0, r0, #31
 8018bd6:	b002      	add	sp, #8
 8018bd8:	4770      	bx	lr
 8018bda:	0000      	movs	r0, r0
 8018bdc:	0000      	movs	r0, r0
	...

08018be0 <nan>:
 8018be0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018be8 <nan+0x8>
 8018be4:	4770      	bx	lr
 8018be6:	bf00      	nop
 8018be8:	00000000 	.word	0x00000000
 8018bec:	7ff80000 	.word	0x7ff80000

08018bf0 <_init>:
 8018bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bf2:	bf00      	nop
 8018bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bf6:	bc08      	pop	{r3}
 8018bf8:	469e      	mov	lr, r3
 8018bfa:	4770      	bx	lr

08018bfc <_fini>:
 8018bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bfe:	bf00      	nop
 8018c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c02:	bc08      	pop	{r3}
 8018c04:	469e      	mov	lr, r3
 8018c06:	4770      	bx	lr
