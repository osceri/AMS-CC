
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001beb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  0801c040  0801c040  0002c040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8a0  0801c8a0  000314ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801c8a0  0801c8a0  0002c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8a8  0801c8a8  000314ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c8a8  0801c8a8  0002c8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8ac  0801c8ac  0002c8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  0801c8b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000314ac  2**0
                  CONTENTS
 10 .bss          0001d854  200014b0  200014b0  000314b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001ed04  2001ed04  000314b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000314ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056c61  00000000  00000000  000314dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009943  00000000  00000000  0008813d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005318  00000000  00000000  00091a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004db0  00000000  00000000  00096d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf49  00000000  00000000  0009bb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040db1  00000000  00000000  000c7a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001012dd  00000000  00000000  00108842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  00209b1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00016a6c  00000000  00000000  00209be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c028 	.word	0x0801c028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	0801c028 	.word	0x0801c028

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001ec50 	.word	0x2001ec50

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	797b      	ldrb	r3, [r7, #5]
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71bb      	strb	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	fa42 f303 	asr.w	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d802      	bhi.n	800100c <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001006:	f06f 0315 	mvn.w	r3, #21
 800100a:	e03b      	b.n	8001084 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbd 	bl	8000f94 <unpack_right_shift_u8>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffb2 	bl	8000f94 <unpack_right_shift_u8>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	22f0      	movs	r2, #240	; 0xf0
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffbf 	bl	8000fc4 <unpack_right_shift_u16>
 8001046:	4603      	mov	r3, r0
 8001048:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff85 	bl	8000f64 <unpack_left_shift_u16>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4313      	orrs	r3, r2
 8001062:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001074:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001078:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 800107a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	805a      	strh	r2, [r3, #2]

    return (0);
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010bc:	b4f0      	push	{r4, r5, r6, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	79b9      	ldrb	r1, [r7, #6]
 80010de:	f1a1 0620 	sub.w	r6, r1, #32
 80010e2:	f1c1 0020 	rsb	r0, r1, #32
 80010e6:	fa03 f501 	lsl.w	r5, r3, r1
 80010ea:	fa02 f606 	lsl.w	r6, r2, r6
 80010ee:	4335      	orrs	r5, r6
 80010f0:	fa22 f000 	lsr.w	r0, r2, r0
 80010f4:	4305      	orrs	r5, r0
 80010f6:	fa02 f401 	lsl.w	r4, r2, r1
 80010fa:	4622      	mov	r2, r4
 80010fc:	462b      	mov	r3, r5
}
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bcf0      	pop	{r4, r5, r6, r7}
 8001108:	4770      	bx	lr

0800110a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	460b      	mov	r3, r1
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	4013      	ands	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	fa42 f303 	asr.w	r3, r2, r3
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	4013      	ands	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	fa42 f303 	asr.w	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800116a:	b4f0      	push	{r4, r5, r6, r7}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	460b      	mov	r3, r1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b2da      	uxtb	r2, r3
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	79b9      	ldrb	r1, [r7, #6]
 800118c:	f1c1 0620 	rsb	r6, r1, #32
 8001190:	f1a1 0020 	sub.w	r0, r1, #32
 8001194:	fa22 f401 	lsr.w	r4, r2, r1
 8001198:	fa03 f606 	lsl.w	r6, r3, r6
 800119c:	4334      	orrs	r4, r6
 800119e:	fa23 f000 	lsr.w	r0, r3, r0
 80011a2:	4304      	orrs	r4, r0
 80011a4:	fa23 f501 	lsr.w	r5, r3, r1
 80011a8:	4622      	mov	r2, r4
 80011aa:	462b      	mov	r3, r5
}
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcf0      	pop	{r4, r5, r6, r7}
 80011b6:	4770      	bx	lr

080011b8 <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d802      	bhi.n	80011d0 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 80011ca:	f06f 0315 	mvn.w	r3, #21
 80011ce:	e081      	b.n	80012d4 <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff95 	bl	800110a <unpack_right_shift_u8>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff89 	bl	800110a <unpack_right_shift_u8>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff7d 	bl	800110a <unpack_right_shift_u8>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2208      	movs	r2, #8
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff71 	bl	800110a <unpack_right_shift_u8>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3302      	adds	r3, #2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff7d 	bl	800113a <unpack_right_shift_u16>
 8001240:	4603      	mov	r3, r0
 8001242:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3303      	adds	r3, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2108      	movs	r1, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff1c 	bl	800108c <unpack_left_shift_u16>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4313      	orrs	r3, r2
 800125c:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800125e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3304      	adds	r3, #4
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff62 	bl	800113a <unpack_right_shift_u16>
 8001276:	4603      	mov	r3, r0
 8001278:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3305      	adds	r3, #5
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2108      	movs	r1, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff01 	bl	800108c <unpack_left_shift_u16>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8abb      	ldrh	r3, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 8001294:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3306      	adds	r3, #6
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff47 	bl	800113a <unpack_right_shift_u16>
 80012ac:	4603      	mov	r3, r0
 80012ae:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3307      	adds	r3, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2108      	movs	r1, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fee6 	bl	800108c <unpack_left_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 80012ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	811a      	strh	r2, [r3, #8]

    return (0);
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80012dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e0:	b08e      	sub	sp, #56	; 0x38
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80012e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80012e8:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d802      	bhi.n	80012f6 <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 80012f0:	f06f 0315 	mvn.w	r3, #21
 80012f4:	e081      	b.n	80013fa <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	2128      	movs	r1, #40	; 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fedc 	bl	80010bc <unpack_left_shift_u64>
 8001304:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	2120      	movs	r1, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fed2 	bl	80010bc <unpack_left_shift_u64>
 8001318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800131c:	ea42 0400 	orr.w	r4, r2, r0
 8001320:	ea43 0501 	orr.w	r5, r3, r1
 8001324:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	3302      	adds	r3, #2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	2118      	movs	r1, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec2 	bl	80010bc <unpack_left_shift_u64>
 8001338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800133c:	ea42 0800 	orr.w	r8, r2, r0
 8001340:	ea43 0901 	orr.w	r9, r3, r1
 8001344:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	2110      	movs	r1, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feb2 	bl	80010bc <unpack_left_shift_u64>
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	ea42 0400 	orr.w	r4, r2, r0
 8001360:	613c      	str	r4, [r7, #16]
 8001362:	430b      	orrs	r3, r1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800136a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	2108      	movs	r1, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe9f 	bl	80010bc <unpack_left_shift_u64>
 800137e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001382:	ea42 0400 	orr.w	r4, r2, r0
 8001386:	60bc      	str	r4, [r7, #8]
 8001388:	430b      	orrs	r3, r1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001390:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fee3 	bl	800116a <unpack_right_shift_u64>
 80013a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013a8:	ea42 0400 	orr.w	r4, r2, r0
 80013ac:	603c      	str	r4, [r7, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 80013ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c6:	ea02 0400 	and.w	r4, r2, r0
 80013ca:	61bc      	str	r4, [r7, #24]
 80013cc:	400b      	ands	r3, r1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013d4:	4323      	orrs	r3, r4
 80013d6:	d00a      	beq.n	80013ee <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 80013d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013dc:	f04f 0000 	mov.w	r0, #0
 80013e0:	4908      	ldr	r1, [pc, #32]	; (8001404 <can2_ivt_msg_result_i_unpack+0x128>)
 80013e2:	ea42 0a00 	orr.w	sl, r2, r0
 80013e6:	ea43 0b01 	orr.w	fp, r3, r1
 80013ea:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 80013ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001404:	ffff0000 	.word	0xffff0000

08001408 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b08e      	sub	sp, #56	; 0x38
 800140e:	af00      	add	r7, sp, #0
 8001410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001412:	62b9      	str	r1, [r7, #40]	; 0x28
 8001414:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2b05      	cmp	r3, #5
 800141a:	d802      	bhi.n	8001422 <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800141c:	f06f 0315 	mvn.w	r3, #21
 8001420:	e081      	b.n	8001526 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	2128      	movs	r1, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe46 	bl	80010bc <unpack_left_shift_u64>
 8001430:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	2120      	movs	r1, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe3c 	bl	80010bc <unpack_left_shift_u64>
 8001444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001448:	ea42 0400 	orr.w	r4, r2, r0
 800144c:	ea43 0501 	orr.w	r5, r3, r1
 8001450:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	2118      	movs	r1, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2c 	bl	80010bc <unpack_left_shift_u64>
 8001464:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001468:	ea42 0800 	orr.w	r8, r2, r0
 800146c:	ea43 0901 	orr.w	r9, r3, r1
 8001470:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	2110      	movs	r1, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe1c 	bl	80010bc <unpack_left_shift_u64>
 8001484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001488:	ea42 0400 	orr.w	r4, r2, r0
 800148c:	613c      	str	r4, [r7, #16]
 800148e:	430b      	orrs	r3, r1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	3304      	adds	r3, #4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	2108      	movs	r1, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe09 	bl	80010bc <unpack_left_shift_u64>
 80014aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ae:	ea42 0400 	orr.w	r4, r2, r0
 80014b2:	60bc      	str	r4, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	3305      	adds	r3, #5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe4d 	bl	800116a <unpack_right_shift_u64>
 80014d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d4:	ea42 0400 	orr.w	r4, r2, r0
 80014d8:	603c      	str	r4, [r7, #0]
 80014da:	430b      	orrs	r3, r1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 80014e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	ea02 0400 	and.w	r4, r2, r0
 80014f6:	61bc      	str	r4, [r7, #24]
 80014f8:	400b      	ands	r3, r1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001500:	4323      	orrs	r3, r4
 8001502:	d00a      	beq.n	800151a <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 8001504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <can2_ivt_msg_result_u1_unpack+0x128>)
 800150e:	ea42 0a00 	orr.w	sl, r2, r0
 8001512:	ea43 0b01 	orr.w	fp, r3, r1
 8001516:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800151a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800151e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001520:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001530:	ffff0000 	.word	0xffff0000

08001534 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b08e      	sub	sp, #56	; 0x38
 800153a:	af00      	add	r7, sp, #0
 800153c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800153e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2b05      	cmp	r3, #5
 8001546:	d802      	bhi.n	800154e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 8001548:	f06f 0315 	mvn.w	r3, #21
 800154c:	e081      	b.n	8001652 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdb0 	bl	80010bc <unpack_left_shift_u64>
 800155c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2120      	movs	r1, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fda6 	bl	80010bc <unpack_left_shift_u64>
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	ea42 0400 	orr.w	r4, r2, r0
 8001578:	ea43 0501 	orr.w	r5, r3, r1
 800157c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	2118      	movs	r1, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd96 	bl	80010bc <unpack_left_shift_u64>
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	ea42 0800 	orr.w	r8, r2, r0
 8001598:	ea43 0901 	orr.w	r9, r3, r1
 800159c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	3303      	adds	r3, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2110      	movs	r1, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd86 	bl	80010bc <unpack_left_shift_u64>
 80015b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015b4:	ea42 0400 	orr.w	r4, r2, r0
 80015b8:	613c      	str	r4, [r7, #16]
 80015ba:	430b      	orrs	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	3304      	adds	r3, #4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	2108      	movs	r1, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd73 	bl	80010bc <unpack_left_shift_u64>
 80015d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015da:	ea42 0400 	orr.w	r4, r2, r0
 80015de:	60bc      	str	r4, [r7, #8]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	3305      	adds	r3, #5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb7 	bl	800116a <unpack_right_shift_u64>
 80015fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001600:	ea42 0400 	orr.w	r4, r2, r0
 8001604:	603c      	str	r4, [r7, #0]
 8001606:	430b      	orrs	r3, r1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800160e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 8001612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	ea02 0400 	and.w	r4, r2, r0
 8001622:	61bc      	str	r4, [r7, #24]
 8001624:	400b      	ands	r3, r1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800162c:	4323      	orrs	r3, r4
 800162e:	d00a      	beq.n	8001646 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 8001630:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <can2_ivt_msg_result_u3_unpack+0x128>)
 800163a:	ea42 0a00 	orr.w	sl, r2, r0
 800163e:	ea43 0b01 	orr.w	fp, r3, r1
 8001642:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 8001646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800164a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800164c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165c:	ffff0000 	.word	0xffff0000

08001660 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 8001672:	f06f 0315 	mvn.w	r3, #21
 8001676:	e00b      	b.n	8001690 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd42 	bl	800110a <unpack_right_shift_u8>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	701a      	strb	r2, [r3, #0]

    return (0);
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800169c:	2208      	movs	r2, #8
 800169e:	4904      	ldr	r1, [pc, #16]	; (80016b0 <can1_dbu_status_1_decode+0x18>)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <can1_dbu_status_1_decode+0x1c>)
 80016a2:	f7ff fca7 	bl	8000ff4 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <can1_dbu_status_1_decode+0x20>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200014cc 	.word	0x200014cc
 80016b4:	200014d4 	.word	0x200014d4
 80016b8:	20001501 	.word	0x20001501

080016bc <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 80016c0:	2208      	movs	r2, #8
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <can2_amk1_setpoints_1_decode+0x18>)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <can2_amk1_setpoints_1_decode+0x1c>)
 80016c6:	f7ff fd77 	bl	80011b8 <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <can2_amk1_setpoints_1_decode+0x20>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200014cc 	.word	0x200014cc
 80016d8:	200014d8 	.word	0x200014d8
 80016dc:	20001502 	.word	0x20001502

080016e0 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 80016e4:	2206      	movs	r2, #6
 80016e6:	4904      	ldr	r1, [pc, #16]	; (80016f8 <can2_ivt_msg_result_i_decode+0x18>)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <can2_ivt_msg_result_i_decode+0x1c>)
 80016ea:	f7ff fdf7 	bl	80012dc <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <can2_ivt_msg_result_i_decode+0x20>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200014cc 	.word	0x200014cc
 80016fc:	200014e8 	.word	0x200014e8
 8001700:	20001503 	.word	0x20001503

08001704 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 8001708:	2206      	movs	r2, #6
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <can2_ivt_msg_result_u1_decode+0x18>)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <can2_ivt_msg_result_u1_decode+0x1c>)
 800170e:	f7ff fe7b 	bl	8001408 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <can2_ivt_msg_result_u1_decode+0x20>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200014cc 	.word	0x200014cc
 8001720:	200014f0 	.word	0x200014f0
 8001724:	20001504 	.word	0x20001504

08001728 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800172c:	2206      	movs	r2, #6
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <can2_ivt_msg_result_u3_decode+0x18>)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <can2_ivt_msg_result_u3_decode+0x1c>)
 8001732:	f7ff feff 	bl	8001534 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <can2_ivt_msg_result_u3_decode+0x20>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200014cc 	.word	0x200014cc
 8001744:	200014f8 	.word	0x200014f8
 8001748:	20001505 	.word	0x20001505

0800174c <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4904      	ldr	r1, [pc, #16]	; (8001764 <can2_cc_status_decode+0x18>)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <can2_cc_status_decode+0x1c>)
 8001756:	f7ff ff83 	bl	8001660 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <can2_cc_status_decode+0x20>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200014cc 	.word	0x200014cc
 8001768:	20001500 	.word	0x20001500
 800176c:	20001506 	.word	0x20001506

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
       can2_cc_status_rx_callback(&cc_status);
       can2_cc_status_flag = 0;
   }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f010 fffa 	bl	801277a <HAL_CAN_GetRxMessage>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d136      	bne.n	80017fa <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f240 5224 	movw	r2, #1316	; 0x524
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8001796:	f240 5224 	movw	r2, #1316	; 0x524
 800179a:	4293      	cmp	r3, r2
 800179c:	d82e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800179e:	f240 5222 	movw	r2, #1314	; 0x522
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d020      	beq.n	80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80017a6:	f240 5222 	movw	r2, #1314	; 0x522
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d826      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ae:	f240 5221 	movw	r2, #1313	; 0x521
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d015      	beq.n	80017e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 80017b6:	f240 5221 	movw	r2, #1313	; 0x521
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d81e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 80017c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c8:	d818      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d003      	beq.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017ce:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 80017d4:	e012      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 80017d6:	f7ff ff5f 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 80017da:	e00f      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 80017dc:	f7ff ff6e 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 80017e0:	e00c      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 80017e2:	f7ff ff7d 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 80017e6:	e009      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 80017e8:	f7ff ff8c 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 80017ec:	e006      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 80017ee:	f7ff ff9b 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 80017f2:	e003      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 80017f4:	f7ff ffaa 	bl	800174c <can2_cc_status_decode>
               break;
 80017f8:	e000      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
    }
 80017fa:	bf00      	nop
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20001508 	.word	0x20001508

08001808 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8001816:	2101      	movs	r1, #1
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f010 ffae 	bl	801277a <HAL_CAN_GetRxMessage>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d136      	bne.n	8001892 <HAL_CAN_RxFifo1MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f240 5224 	movw	r2, #1316	; 0x524
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 800182e:	f240 5224 	movw	r2, #1316	; 0x524
 8001832:	4293      	cmp	r3, r2
 8001834:	d82e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001836:	f240 5222 	movw	r2, #1314	; 0x522
 800183a:	4293      	cmp	r3, r2
 800183c:	d020      	beq.n	8001880 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
 800183e:	f240 5222 	movw	r2, #1314	; 0x522
 8001842:	4293      	cmp	r3, r2
 8001844:	d826      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001846:	f240 5221 	movw	r2, #1313	; 0x521
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 800184e:	f240 5221 	movw	r2, #1313	; 0x521
 8001852:	4293      	cmp	r3, r2
 8001854:	d81e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001856:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800185a:	d017      	beq.n	800188c <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
 800185c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8001860:	d818      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d003      	beq.n	800186e <HAL_CAN_RxFifo1MsgPendingCallback+0x66>
 8001866:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 800186a:	d003      	beq.n	8001874 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 800186c:	e012      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 800186e:	f7ff ff13 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 8001872:	e00f      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 8001874:	f7ff ff22 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 8001878:	e00c      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 800187a:	f7ff ff31 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 800187e:	e009      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 8001880:	f7ff ff40 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 8001884:	e006      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 8001886:	f7ff ff4f 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 800188a:	e003      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 800188c:	f7ff ff5e 	bl	800174c <can2_cc_status_decode>
               break;
 8001890:	e000      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
    }
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20001510 	.word	0x20001510

080018a0 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <inc_res+0x20>
		ptr[0]++;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 80018be:	e002      	b.n	80018c6 <inc_res+0x26>
		ptr[0] = 0;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <COM_voltages_ok>:
 * @Param	A vector of voltages to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_voltages_ok(double *voltages,
		uint16_t sample_constraint) {
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 4.19;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <COM_voltages_ok+0xc8>)
 80018e2:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <COM_voltages_ok+0xcc>)
 80018e6:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e04d      	b.n	800198a <COM_voltages_ok+0xb6>
		inc_res(voltages[p] > upper_boundary, &over_voltages[p]);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018fa:	6938      	ldr	r0, [r7, #16]
 80018fc:	f7fe fe16 	bl	800052c <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	2101      	movs	r1, #1
 8001906:	460e      	mov	r6, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff f8f6 	bl	8000afc <__aeabi_dcmpgt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <COM_voltages_ok+0x46>
 8001916:	2300      	movs	r3, #0
 8001918:	461e      	mov	r6, r3
 800191a:	b2f3      	uxtb	r3, r6
 800191c:	4618      	mov	r0, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <COM_voltages_ok+0xd0>)
 8001922:	4413      	add	r3, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff ffbb 	bl	80018a0 <inc_res>
		inc_res(lower_boundary > voltages[p], &under_voltages[p]);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7fe fdfe 	bl	800052c <__aeabi_f2d>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	2401      	movs	r4, #1
 800193e:	f7ff f8dd 	bl	8000afc <__aeabi_dcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <COM_voltages_ok+0x78>
 8001948:	2300      	movs	r3, #0
 800194a:	461c      	mov	r4, r3
 800194c:	b2e3      	uxtb	r3, r4
 800194e:	4618      	mov	r0, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <COM_voltages_ok+0xd4>)
 8001954:	4413      	add	r3, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff ffa2 	bl	80018a0 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <COM_voltages_ok+0xd0>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	429a      	cmp	r2, r3
 800196a:	d201      	bcs.n	8001970 <COM_voltages_ok+0x9c>
			return ERROR_OVER_VOLTAGE;
 800196c:	2316      	movs	r3, #22
 800196e:	e010      	b.n	8001992 <COM_voltages_ok+0xbe>
		}
		if (under_voltages[p] > sample_constraint) {
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <COM_voltages_ok+0xd4>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	429a      	cmp	r2, r3
 800197e:	d201      	bcs.n	8001984 <COM_voltages_ok+0xb0>
			return ERROR_UNDER_VOLTAGE;
 8001980:	2315      	movs	r3, #21
 8001982:	e006      	b.n	8001992 <COM_voltages_ok+0xbe>
	for (int p = 0; p < 126; p++) {
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b7d      	cmp	r3, #125	; 0x7d
 800198e:	ddae      	ble.n	80018ee <COM_voltages_ok+0x1a>
		}
	}

	return 0;
 8001990:	2300      	movs	r3, #0

}
 8001992:	4618      	mov	r0, r3
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199a:	bf00      	nop
 800199c:	4086147b 	.word	0x4086147b
 80019a0:	4033d70a 	.word	0x4033d70a
 80019a4:	20001518 	.word	0x20001518
 80019a8:	20001598 	.word	0x20001598

080019ac <COM_temperatures_ok>:
 * @Param	A vector of temperatures to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_temperatures_ok(double *temperatures,
		uint16_t sample_constraint) {
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 60;
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <COM_temperatures_ok+0xc8>)
 80019ba:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <COM_temperatures_ok+0xcc>)
 80019be:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e04d      	b.n	8001a62 <COM_temperatures_ok+0xb6>
		inc_res(temperatures[p] > upper_boundary,
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f7fe fdaa 	bl	800052c <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	2101      	movs	r1, #1
 80019de:	460e      	mov	r6, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7ff f88a 	bl	8000afc <__aeabi_dcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <COM_temperatures_ok+0x46>
 80019ee:	2300      	movs	r3, #0
 80019f0:	461e      	mov	r6, r3
 80019f2:	b2f3      	uxtb	r3, r6
 80019f4:	4618      	mov	r0, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <COM_temperatures_ok+0xd0>)
 80019fa:	4413      	add	r3, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff ff4f 	bl	80018a0 <inc_res>
				&over_temperatures[p]);
		inc_res(lower_boundary > temperatures[p],
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7fe fd92 	bl	800052c <__aeabi_f2d>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	2401      	movs	r4, #1
 8001a16:	f7ff f871 	bl	8000afc <__aeabi_dcmpgt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <COM_temperatures_ok+0x78>
 8001a20:	2300      	movs	r3, #0
 8001a22:	461c      	mov	r4, r3
 8001a24:	b2e3      	uxtb	r3, r4
 8001a26:	4618      	mov	r0, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <COM_temperatures_ok+0xd4>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff ff36 	bl	80018a0 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <COM_temperatures_ok+0xd0>)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d201      	bcs.n	8001a48 <COM_temperatures_ok+0x9c>
			return ERROR_OVER_TEMPERATURE;
 8001a44:	2318      	movs	r3, #24
 8001a46:	e010      	b.n	8001a6a <COM_temperatures_ok+0xbe>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <COM_temperatures_ok+0xd4>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d201      	bcs.n	8001a5c <COM_temperatures_ok+0xb0>
			return ERROR_UNDER_TEMPERATURE;
 8001a58:	2317      	movs	r3, #23
 8001a5a:	e006      	b.n	8001a6a <COM_temperatures_ok+0xbe>
	for (int p = 0; p < 60; p++) {
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b3b      	cmp	r3, #59	; 0x3b
 8001a66:	ddae      	ble.n	80019c6 <COM_temperatures_ok+0x1a>
		}
	}

	return 0;
 8001a68:	2300      	movs	r3, #0

}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	42700000 	.word	0x42700000
 8001a78:	c1a00000 	.word	0xc1a00000
 8001a7c:	20001618 	.word	0x20001618
 8001a80:	20001654 	.word	0x20001654

08001a84 <COM_current_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	An error code
 */
error_t COM_current_ok(double *current,
		uint16_t sample_constraint) {
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
	const float upper_boundary = 100;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <COM_current_ok+0x94>)
 8001a92:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -40;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <COM_current_ok+0x98>)
 8001a96:	60bb      	str	r3, [r7, #8]

	inc_res(current[0] > upper_boundary, &over_current);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7fe fd44 	bl	800052c <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	460e      	mov	r6, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7ff f824 	bl	8000afc <__aeabi_dcmpgt>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <COM_current_ok+0x3a>
 8001aba:	2300      	movs	r3, #0
 8001abc:	461e      	mov	r6, r3
 8001abe:	b2f3      	uxtb	r3, r6
 8001ac0:	4917      	ldr	r1, [pc, #92]	; (8001b20 <COM_current_ok+0x9c>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff feec 	bl	80018a0 <inc_res>
	inc_res(lower_boundary > current[0], &under_current);
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f7fe fd2f 	bl	800052c <__aeabi_f2d>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	2401      	movs	r4, #1
 8001ad6:	f7ff f811 	bl	8000afc <__aeabi_dcmpgt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <COM_current_ok+0x60>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	461c      	mov	r4, r3
 8001ae4:	b2e3      	uxtb	r3, r4
 8001ae6:	490f      	ldr	r1, [pc, #60]	; (8001b24 <COM_current_ok+0xa0>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fed9 	bl	80018a0 <inc_res>

	if (over_current > sample_constraint) {
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <COM_current_ok+0x9c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d201      	bcs.n	8001afe <COM_current_ok+0x7a>
		return ERROR_OVER_CURRENT;
 8001afa:	2320      	movs	r3, #32
 8001afc:	e008      	b.n	8001b10 <COM_current_ok+0x8c>
	}
	if (under_current > sample_constraint) {
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <COM_current_ok+0xa0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	887a      	ldrh	r2, [r7, #2]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d201      	bcs.n	8001b0e <COM_current_ok+0x8a>
		return ERROR_UNDER_CURRENT;
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	e000      	b.n	8001b10 <COM_current_ok+0x8c>
	}

	return 0;
 8001b0e:	2300      	movs	r3, #0

}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b18:	42c80000 	.word	0x42c80000
 8001b1c:	c2200000 	.word	0xc2200000
 8001b20:	20001690 	.word	0x20001690
 8001b24:	20001691 	.word	0x20001691

08001b28 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <FAN_initialize+0x4c>)
 8001b32:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001b34:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001b78 <FAN_initialize+0x50>
 8001b38:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b48:	ee17 2a90 	vmov	r2, s15
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0852      	lsrs	r2, r2, #1
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001b64:	2108      	movs	r1, #8
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f013 fae6 	bl	8015138 <HAL_TIM_PWM_Start>

}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	447a0000 	.word	0x447a0000
 8001b78:	477fff00 	.word	0x477fff00

08001b7c <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001b88:	edd7 7a00 	vldr	s15, [r7]
 8001b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d502      	bpl.n	8001b9c <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001b9c:	edd7 7a00 	vldr	s15, [r7]
 8001ba0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bf4 <FAN_duty_cycle+0x78>
 8001ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	dd01      	ble.n	8001bb2 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <FAN_duty_cycle+0x7c>)
 8001bb0:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 8001bb2:	edd7 7a00 	vldr	s15, [r7]
 8001bb6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001bf4 <FAN_duty_cycle+0x78>
 8001bba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd8:	ee17 2a90 	vmov	r2, s15
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	42c80000 	.word	0x42c80000
 8001bf8:	42c80000 	.word	0x42c80000

08001bfc <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
	float conq = 0;
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d148      	bne.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0xb4>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c1e:	2104      	movs	r1, #4
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f014 f91f 	bl	8015e64 <HAL_TIM_ReadCapturedValue>
 8001c26:	ee07 0a90 	vmov	s15, r0
 8001c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2e:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c32:	2100      	movs	r1, #0
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f014 f915 	bl	8015e64 <HAL_TIM_ReadCapturedValue>
 8001c3a:	ee07 0a90 	vmov	s15, r0
 8001c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c42:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001c46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c52:	ee16 0a90 	vmov	r0, s13
 8001c56:	f7fe fc69 	bl	800052c <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c60:	e9c1 2300 	strd	r2, r3, [r1]
		IMD.frequency = 100000000 / (conq + 1);
 8001c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c70:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001cbc <HAL_TIM_IC_CaptureCallback+0xc0>
 8001c74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c78:	ee16 0a90 	vmov	r0, s13
 8001c7c:	f7fe fc56 	bl	800052c <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c86:	e9c1 2302 	strd	r2, r3, [r1, #8]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f107 020c 	add.w	r2, r7, #12
 8001c92:	2302      	movs	r3, #2
 8001c94:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c96:	f015 fbc5 	bl	8017424 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0xb4>
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	f3bf 8f6f 	isb	sy
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20001698 	.word	0x20001698
 8001cbc:	4cbebc20 	.word	0x4cbebc20
 8001cc0:	2001b5d4 	.word	0x2001b5d4
 8001cc4:	e000ed04 	.word	0xe000ed04

08001cc8 <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <initialize_IMD+0x3c>)
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f013 fc2a 	bl	8015534 <HAL_TIM_IC_Start_IT>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <initialize_IMD+0x22>
		Error_Handler();
 8001ce6:	f002 fb49 	bl	800437c <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 8001cea:	2104      	movs	r1, #4
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f013 fb45 	bl	801537c <HAL_TIM_IC_Start>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <initialize_IMD+0x34>
		Error_Handler();
 8001cf8:	f002 fb40 	bl	800437c <Error_Handler>
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	0280de80 	.word	0x0280de80

08001d08 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 0218 	add.w	r2, r3, #24
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617a      	str	r2, [r7, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d48:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7e:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	d503      	bpl.n	8001dba <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d503      	bpl.n	8001dd8 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	61f8      	str	r0, [r7, #28]
 8001dee:	ed87 0a06 	vstr	s0, [r7, #24]
 8001df2:	edc7 0a05 	vstr	s1, [r7, #20]
 8001df6:	ed87 1a04 	vstr	s2, [r7, #16]
 8001dfa:	edc7 1a03 	vstr	s3, [r7, #12]
 8001dfe:	ed87 2a02 	vstr	s4, [r7, #8]
 8001e02:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8001e06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d501      	bpl.n	8001e1c <PID_initialize+0x36>
		return 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e024      	b.n	8001e66 <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	3318      	adds	r3, #24
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f019 fa90 	bl	801b384 <arm_pid_init_f32>

	return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <_cbSendSystemDesc+0x14>)
 8001e76:	f018 fff1 	bl	801ae5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <_cbSendSystemDesc+0x18>)
 8001e7c:	f018 ffee 	bl	801ae5c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	0801c040 	.word	0x0801c040
 8001e88:	0801c06c 	.word	0x0801c06c

08001e8c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SEGGER_SYSVIEW_Conf+0x20>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SEGGER_SYSVIEW_Conf+0x20>)
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SEGGER_SYSVIEW_Conf+0x24>)
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <SEGGER_SYSVIEW_Conf+0x28>)
 8001e9c:	f018 fb5c 	bl	801a558 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ea0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ea4:	f018 fb9c 	bl	801a5e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000084 	.word	0x20000084
 8001eb0:	08001e71 	.word	0x08001e71
 8001eb4:	0801c1d4 	.word	0x0801c1d4

08001eb8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	e048      	b.n	8001f56 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001ec4:	4929      	ldr	r1, [pc, #164]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f016 fdc7 	bl	8018a68 <uxTaskGetStackHighWaterMark>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4823      	ldr	r0, [pc, #140]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4403      	add	r3, r0
 8001eea:	3310      	adds	r3, #16
 8001eec:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001eee:	491f      	ldr	r1, [pc, #124]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	491b      	ldr	r1, [pc, #108]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	4c16      	ldr	r4, [pc, #88]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4423      	add	r3, r4
 8001f1e:	3308      	adds	r3, #8
 8001f20:	681c      	ldr	r4, [r3, #0]
 8001f22:	4d12      	ldr	r5, [pc, #72]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	442b      	add	r3, r5
 8001f30:	330c      	adds	r3, #12
 8001f32:	681d      	ldr	r5, [r3, #0]
 8001f34:	4e0d      	ldr	r6, [pc, #52]	; (8001f6c <_cbSendTaskList+0xb4>)
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4433      	add	r3, r6
 8001f42:	3310      	adds	r3, #16
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	462b      	mov	r3, r5
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	f000 f8b6 	bl	80020bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3301      	adds	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <_cbSendTaskList+0xb8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3b1      	bcc.n	8001ec4 <_cbSendTaskList+0xc>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200016a8 	.word	0x200016a8
 8001f70:	200017e8 	.word	0x200017e8

08001f74 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001f7a:	f016 fa4d 	bl	8018418 <xTaskGetTickCountFromISR>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	f04f 0500 	mov.w	r5, #0
 8001f9a:	015d      	lsls	r5, r3, #5
 8001f9c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fa0:	0154      	lsls	r4, r2, #5
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	1a12      	subs	r2, r2, r0
 8001fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8001fac:	f04f 0400 	mov.w	r4, #0
 8001fb0:	f04f 0500 	mov.w	r5, #0
 8001fb4:	009d      	lsls	r5, r3, #2
 8001fb6:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001fba:	0094      	lsls	r4, r2, #2
 8001fbc:	4622      	mov	r2, r4
 8001fbe:	462b      	mov	r3, r5
 8001fc0:	1812      	adds	r2, r2, r0
 8001fc2:	eb41 0303 	adc.w	r3, r1, r3
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fd4:	00d0      	lsls	r0, r2, #3
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001fde:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}

08001fec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001ffa:	2205      	movs	r2, #5
 8001ffc:	492b      	ldr	r1, [pc, #172]	; (80020ac <SYSVIEW_AddTask+0xc0>)
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f019 fa0a 	bl	801b418 <memcmp>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04b      	beq.n	80020a2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d903      	bls.n	800201a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002012:	4828      	ldr	r0, [pc, #160]	; (80020b4 <SYSVIEW_AddTask+0xc8>)
 8002014:	f019 f95a 	bl	801b2cc <SEGGER_SYSVIEW_Warn>
    return;
 8002018:	e044      	b.n	80020a4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4926      	ldr	r1, [pc, #152]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4921      	ldr	r1, [pc, #132]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3304      	adds	r3, #4
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	491b      	ldr	r1, [pc, #108]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3308      	adds	r3, #8
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4916      	ldr	r1, [pc, #88]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	330c      	adds	r3, #12
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4910      	ldr	r1, [pc, #64]	; (80020b8 <SYSVIEW_AddTask+0xcc>)
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3310      	adds	r3, #16
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <SYSVIEW_AddTask+0xc4>)
 800208e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f80e 	bl	80020bc <SYSVIEW_SendTaskInfo>
 80020a0:	e000      	b.n	80020a4 <SYSVIEW_AddTask+0xb8>
    return;
 80020a2:	bf00      	nop

}
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	0801c07c 	.word	0x0801c07c
 80020b0:	200017e8 	.word	0x200017e8
 80020b4:	0801c084 	.word	0x0801c084
 80020b8:	200016a8 	.word	0x200016a8

080020bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	2214      	movs	r2, #20
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f019 f9bc 	bl	801b450 <memset>
  TaskInfo.TaskID     = TaskID;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4618      	mov	r0, r3
 80020f2:	f018 fdbb 	bl	801ac6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002114:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <MX_ADC1_Init+0xf4>)
 8002116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800211a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800211e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002128:	2201      	movs	r2, #1
 800212a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800212e:	2200      	movs	r2, #0
 8002130:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800213c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002144:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <MX_ADC1_Init+0xf0>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002152:	2204      	movs	r2, #4
 8002154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002160:	2201      	movs	r2, #1
 8002162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002164:	4822      	ldr	r0, [pc, #136]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002166:	f00f fcb1 	bl	8011acc <HAL_ADC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002170:	f002 f904 	bl	800437c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002174:	2301      	movs	r3, #1
 8002176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002178:	2301      	movs	r3, #1
 800217a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800217c:	2302      	movs	r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_ADC1_Init+0xf0>)
 8002186:	f00f ff53 	bl	8012030 <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002190:	f002 f8f4 	bl	800437c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002194:	2302      	movs	r3, #2
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002198:	2302      	movs	r3, #2
 800219a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_ADC1_Init+0xf0>)
 80021a2:	f00f ff45 	bl	8012030 <HAL_ADC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80021ac:	f002 f8e6 	bl	800437c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021b0:	2303      	movs	r3, #3
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80021b4:	2303      	movs	r3, #3
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_ADC1_Init+0xf0>)
 80021be:	f00f ff37 	bl	8012030 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80021c8:	f002 f8d8 	bl	800437c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021cc:	2304      	movs	r3, #4
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80021d0:	2304      	movs	r3, #4
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_ADC1_Init+0xf0>)
 80021da:	f00f ff29 	bl	8012030 <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80021e4:	f002 f8ca 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2001b600 	.word	0x2001b600
 80021f4:	40012000 	.word	0x40012000

080021f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <HAL_ADC_MspInit+0xec>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d15f      	bne.n	80022da <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_ADC_MspInit+0xf0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8002252:	231e      	movs	r3, #30
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002256:	2303      	movs	r3, #3
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <HAL_ADC_MspInit+0xf4>)
 8002266:	f011 fa11 	bl	801368c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800226c:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_ADC_MspInit+0xfc>)
 800226e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002288:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800228c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002290:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 8002294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002298:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ae:	4810      	ldr	r0, [pc, #64]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022b0:	f010 fe7c 	bl	8012fac <HAL_DMA_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80022ba:	f002 f85f 	bl	800437c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_ADC_MspInit+0xf8>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2105      	movs	r1, #5
 80022ce:	2012      	movs	r0, #18
 80022d0:	f010 fe42 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022d4:	2012      	movs	r0, #18
 80022d6:	f010 fe5b 	bl	8012f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012000 	.word	0x40012000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	2001b648 	.word	0x2001b648
 80022f4:	40026410 	.word	0x40026410

080022f8 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 80022f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022fc:	b08e      	sub	sp, #56	; 0x38
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8002308:	4bd3      	ldr	r3, [pc, #844]	; (8002658 <interpret_ADC_buffer+0x360>)
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 800230c:	4bd3      	ldr	r3, [pc, #844]	; (800265c <interpret_ADC_buffer+0x364>)
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8002310:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002314:	eeb1 7a67 	vneg.f32	s14, s15
 8002318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800231c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002320:	ee16 0a90 	vmov	r0, s13
 8002324:	f7fe f902 	bl	800052c <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	ec43 2b10 	vmov	d0, r2, r3
 8002330:	f019 f9ae 	bl	801b690 <exp>
 8002334:	ec51 0b10 	vmov	r0, r1, d0
 8002338:	a3c3      	add	r3, pc, #780	; (adr r3, 8002648 <interpret_ADC_buffer+0x350>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fe f94d 	bl	80005dc <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc3f 	bl	8000bcc <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8002352:	4bc3      	ldr	r3, [pc, #780]	; (8002660 <interpret_ADC_buffer+0x368>)
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8002356:	4bc3      	ldr	r3, [pc, #780]	; (8002664 <interpret_ADC_buffer+0x36c>)
 8002358:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 800235a:	2300      	movs	r3, #0
 800235c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800235e:	e063      	b.n	8002428 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8002360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002368:	4413      	add	r3, r2
 800236a:	3b28      	subs	r3, #40	; 0x28
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 8002372:	2300      	movs	r3, #0
 8002374:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002376:	e020      	b.n	80023ba <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8002378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002380:	4413      	add	r3, r2
 8002382:	3b28      	subs	r3, #40	; 0x28
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ac:	4413      	add	r3, r2
 80023ae:	3b28      	subs	r3, #40	; 0x28
 80023b0:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 80023b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023b6:	3301      	adds	r3, #1
 80023b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3d9      	bcc.n	8002378 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 80023c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023cc:	4413      	add	r3, r2
 80023ce:	3b28      	subs	r3, #40	; 0x28
 80023d0:	edd3 6a00 	vldr	s13, [r3]
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ea:	4413      	add	r3, r2
 80023ec:	3b28      	subs	r3, #40	; 0x28
 80023ee:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 80023f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023fa:	4413      	add	r3, r2
 80023fc:	3b28      	subs	r3, #40	; 0x28
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d508      	bpl.n	8002422 <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8002410:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002418:	4413      	add	r3, r2
 800241a:	3b28      	subs	r3, #40	; 0x28
 800241c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002420:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8002422:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002424:	3301      	adds	r3, #1
 8002426:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002428:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800242a:	2b03      	cmp	r3, #3
 800242c:	d998      	bls.n	8002360 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 800242e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002430:	f7fe f87c 	bl	800052c <__aeabi_f2d>
 8002434:	4604      	mov	r4, r0
 8002436:	460d      	mov	r5, r1
 8002438:	ed97 7a04 	vldr	s14, [r7, #16]
 800243c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002448:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800244c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002454:	ee17 0a90 	vmov	r0, s15
 8002458:	f7fe f868 	bl	800052c <__aeabi_f2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	ec43 2b10 	vmov	d0, r2, r3
 8002464:	f019 f964 	bl	801b730 <log>
 8002468:	ec59 8b10 	vmov	r8, r9, d0
 800246c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800246e:	f7fe f85d 	bl	800052c <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	ec43 2b10 	vmov	d0, r2, r3
 800247a:	f019 f959 	bl	801b730 <log>
 800247e:	ec53 2b10 	vmov	r2, r3, d0
 8002482:	4640      	mov	r0, r8
 8002484:	4649      	mov	r1, r9
 8002486:	f7fd fef1 	bl	800026c <__aeabi_dsub>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fe f9cd 	bl	8000830 <__aeabi_ddiv>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
			- 273.15;
 800249e:	a36c      	add	r3, pc, #432	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fd fee2 	bl	800026c <__aeabi_dsub>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
	temperatures->precharge_resistor = beta
 80024ac:	68f9      	ldr	r1, [r7, #12]
 80024ae:	e9c1 2300 	strd	r2, r3, [r1]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 80024b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b4:	f7fe f83a 	bl	800052c <__aeabi_f2d>
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
 80024bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80024c0:	edd7 6a08 	vldr	s13, [r7, #32]
 80024c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	ee17 0a90 	vmov	r0, s15
 80024dc:	f7fe f826 	bl	800052c <__aeabi_f2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	ec43 2b10 	vmov	d0, r2, r3
 80024e8:	f019 f922 	bl	801b730 <log>
 80024ec:	ec59 8b10 	vmov	r8, r9, d0
 80024f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024f2:	f7fe f81b 	bl	800052c <__aeabi_f2d>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ec43 2b10 	vmov	d0, r2, r3
 80024fe:	f019 f917 	bl	801b730 <log>
 8002502:	ec53 2b10 	vmov	r2, r3, d0
 8002506:	4640      	mov	r0, r8
 8002508:	4649      	mov	r1, r9
 800250a:	f7fd feaf 	bl	800026c <__aeabi_dsub>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fe f98b 	bl	8000830 <__aeabi_ddiv>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
			- 273.15;
 8002522:	a34b      	add	r3, pc, #300	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd fea0 	bl	800026c <__aeabi_dsub>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
	temperatures->fuse = beta
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8002536:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002538:	f7fd fff8 	bl	800052c <__aeabi_f2d>
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
 8002540:	ed97 7a06 	vldr	s14, [r7, #24]
 8002544:	edd7 6a08 	vldr	s13, [r7, #32]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002550:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002554:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	ee17 0a90 	vmov	r0, s15
 8002560:	f7fd ffe4 	bl	800052c <__aeabi_f2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	ec43 2b10 	vmov	d0, r2, r3
 800256c:	f019 f8e0 	bl	801b730 <log>
 8002570:	ec59 8b10 	vmov	r8, r9, d0
 8002574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002576:	f7fd ffd9 	bl	800052c <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	ec43 2b10 	vmov	d0, r2, r3
 8002582:	f019 f8d5 	bl	801b730 <log>
 8002586:	ec53 2b10 	vmov	r2, r3, d0
 800258a:	4640      	mov	r0, r8
 800258c:	4649      	mov	r1, r9
 800258e:	f7fd fe6d 	bl	800026c <__aeabi_dsub>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fe f949 	bl	8000830 <__aeabi_ddiv>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
			- 273.15;
 80025a6:	a32a      	add	r3, pc, #168	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fd fe5e 	bl	800026c <__aeabi_dsub>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
	temperatures->aux_1 = beta
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 80025ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025bc:	f7fd ffb6 	bl	800052c <__aeabi_f2d>
 80025c0:	4604      	mov	r4, r0
 80025c2:	460d      	mov	r5, r1
 80025c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80025c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80025cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	ee17 0a90 	vmov	r0, s15
 80025e4:	f7fd ffa2 	bl	800052c <__aeabi_f2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	ec43 2b10 	vmov	d0, r2, r3
 80025f0:	f019 f89e 	bl	801b730 <log>
 80025f4:	ec59 8b10 	vmov	r8, r9, d0
 80025f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025fa:	f7fd ff97 	bl	800052c <__aeabi_f2d>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ec43 2b10 	vmov	d0, r2, r3
 8002606:	f019 f893 	bl	801b730 <log>
 800260a:	ec53 2b10 	vmov	r2, r3, d0
 800260e:	4640      	mov	r0, r8
 8002610:	4649      	mov	r1, r9
 8002612:	f7fd fe2b 	bl	800026c <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fe f907 	bl	8000830 <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
			- 273.15;
 800262a:	a309      	add	r3, pc, #36	; (adr r3, 8002650 <interpret_ADC_buffer+0x358>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd fe1c 	bl	800026c <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
	temperatures->aux_2 = beta
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 800263e:	bf00      	nop
 8002640:	3738      	adds	r7, #56	; 0x38
 8002642:	46bd      	mov	sp, r7
 8002644:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002648:	00000000 	.word	0x00000000
 800264c:	40c38800 	.word	0x40c38800
 8002650:	66666666 	.word	0x66666666
 8002654:	40711266 	.word	0x40711266
 8002658:	455ac000 	.word	0x455ac000
 800265c:	43951333 	.word	0x43951333
 8002660:	461c4000 	.word	0x461c4000
 8002664:	457ff000 	.word	0x457ff000

08002668 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2241      	movs	r2, #65	; 0x41
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f012 fc2b 	bl	8014ed4 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <ADC_initialize+0x24>)
 8002680:	2201      	movs	r2, #1
 8002682:	801a      	strh	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000000 	.word	0x20000000

08002690 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <ADC_step+0x30>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <ADC_step+0x26>
		ADC_FLAG = 0;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <ADC_step+0x30>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	461a      	mov	r2, r3
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4804      	ldr	r0, [pc, #16]	; (80026c4 <ADC_step+0x34>)
 80026b2:	f00f fb8f 	bl	8011dd4 <HAL_ADC_Start_DMA>
	}
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000
 80026c4:	2001b600 	.word	0x2001b600

080026c8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	801a      	strh	r2, [r3, #0]

}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_CAN1_Init+0x64>)
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <MX_CAN1_Init+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <MX_CAN1_Init+0x64>)
 80026f4:	2202      	movs	r2, #2
 80026f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_CAN1_Init+0x64>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <MX_CAN1_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_CAN1_Init+0x64>)
 8002706:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800270a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <MX_CAN1_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_CAN1_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_CAN1_Init+0x64>)
 800271a:	2200      	movs	r2, #0
 800271c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_CAN1_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_CAN1_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_CAN1_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_CAN1_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_CAN1_Init+0x64>)
 8002738:	f00f ff24 	bl	8012584 <HAL_CAN_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002742:	f001 fe1b 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2001b6d0 	.word	0x2001b6d0
 8002750:	40006400 	.word	0x40006400

08002754 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_CAN2_Init+0x64>)
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <MX_CAN2_Init+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002760:	2204      	movs	r2, #4
 8002762:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <MX_CAN2_Init+0x64>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002772:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002776:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <MX_CAN2_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <MX_CAN2_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <MX_CAN2_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_CAN2_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_CAN2_Init+0x64>)
 80027a4:	f00f feee 	bl	8012584 <HAL_CAN_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80027ae:	f001 fde5 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2001b6a8 	.word	0x2001b6a8
 80027bc:	40006800 	.word	0x40006800

080027c0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5b      	ldr	r2, [pc, #364]	; (800294c <HAL_CAN_MspInit+0x18c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d14e      	bne.n	8002880 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a59      	ldr	r2, [pc, #356]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80027ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027ec:	4b58      	ldr	r3, [pc, #352]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10d      	bne.n	8002810 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a55      	ldr	r2, [pc, #340]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80027fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4a4e      	ldr	r2, [pc, #312]	; (8002954 <HAL_CAN_MspInit+0x194>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6313      	str	r3, [r2, #48]	; 0x30
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800282c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800283e:	2309      	movs	r3, #9
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4619      	mov	r1, r3
 8002848:	4843      	ldr	r0, [pc, #268]	; (8002958 <HAL_CAN_MspInit+0x198>)
 800284a:	f010 ff1f 	bl	801368c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	2013      	movs	r0, #19
 8002854:	f010 fb80 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002858:	2013      	movs	r0, #19
 800285a:	f010 fb99 	bl	8012f90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	2014      	movs	r0, #20
 8002864:	f010 fb78 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002868:	2014      	movs	r0, #20
 800286a:	f010 fb91 	bl	8012f90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2105      	movs	r1, #5
 8002872:	2015      	movs	r0, #21
 8002874:	f010 fb70 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002878:	2015      	movs	r0, #21
 800287a:	f010 fb89 	bl	8012f90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800287e:	e060      	b.n	8002942 <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a35      	ldr	r2, [pc, #212]	; (800295c <HAL_CAN_MspInit+0x19c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d15b      	bne.n	8002942 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_CAN_MspInit+0x194>)
 8002894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_CAN_MspInit+0x194>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80028ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_CAN_MspInit+0x190>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10d      	bne.n	80028d4 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c6:	6413      	str	r3, [r2, #64]	; 0x40
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_CAN_MspInit+0x194>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80028f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002902:	2309      	movs	r3, #9
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	4814      	ldr	r0, [pc, #80]	; (8002960 <HAL_CAN_MspInit+0x1a0>)
 800290e:	f010 febd 	bl	801368c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2105      	movs	r1, #5
 8002916:	203f      	movs	r0, #63	; 0x3f
 8002918:	f010 fb1e 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800291c:	203f      	movs	r0, #63	; 0x3f
 800291e:	f010 fb37 	bl	8012f90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2105      	movs	r1, #5
 8002926:	2040      	movs	r0, #64	; 0x40
 8002928:	f010 fb16 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800292c:	2040      	movs	r0, #64	; 0x40
 800292e:	f010 fb2f 	bl	8012f90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2105      	movs	r1, #5
 8002936:	2041      	movs	r0, #65	; 0x41
 8002938:	f010 fb0e 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800293c:	2041      	movs	r0, #65	; 0x41
 800293e:	f010 fb27 	bl	8012f90 <HAL_NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40006400 	.word	0x40006400
 8002950:	200017ec 	.word	0x200017ec
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000
 800295c:	40006800 	.word	0x40006800
 8002960:	40020400 	.word	0x40020400

08002964 <swap>:
#define _abc(a,b,c) _abcd(a,b,c,0)_abcd(a,b,c,1)_abcd(a,b,c,2)_abcd(a,b,c,3)_abcd(a,b,c,4)_abcd(a,b,c,5)_abcd(a,b,c,6)
#define _ab(a,b) _abc(a,b,0)_abc(a,b,1)_abc(a,b,2)
#define _a(a) _ab(a,0)_ab(a,1)_ab(a,2)
		_a(0)_a(1) };

void swap(uint8_t g) {
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
	uint8_t _I = sorted_indices[g];
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <swap+0x38>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	73fb      	strb	r3, [r7, #15]
	sorted_indices[g] = sorted_indices[g - 1];
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <swap+0x38>)
 800297e:	5c89      	ldrb	r1, [r1, r2]
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <swap+0x38>)
 8002982:	54d1      	strb	r1, [r2, r3]
	sorted_indices[g - 1] = _I;
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	3b01      	subs	r3, #1
 8002988:	4904      	ldr	r1, [pc, #16]	; (800299c <swap+0x38>)
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	54ca      	strb	r2, [r1, r3]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000004 	.word	0x20000004

080029a0 <compare>:

uint8_t compare(uint8_t g) {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	return cell_voltages[sorted_indices[g]] < cell_voltages[sorted_indices[g - 1]];
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <compare+0x4c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	490f      	ldr	r1, [pc, #60]	; (80029f0 <compare+0x50>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <compare+0x4c>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	4c0a      	ldr	r4, [pc, #40]	; (80029f0 <compare+0x50>)
 80029c6:	5ce3      	ldrb	r3, [r4, r3]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	2401      	movs	r4, #1
 80029d2:	f7fe f875 	bl	8000ac0 <__aeabi_dcmplt>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <compare+0x40>
 80029dc:	2300      	movs	r3, #0
 80029de:	461c      	mov	r4, r3
 80029e0:	b2e3      	uxtb	r3, r4
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2001b74c 	.word	0x2001b74c
 80029f0:	20000004 	.word	0x20000004

080029f4 <gnome_sort>:

void gnome_sort() {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
	uint8_t gnome = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 80029fe:	e014      	b.n	8002a2a <gnome_sort+0x36>
		if ((gnome == 0) || compare(gnome)) {
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <gnome_sort+0x20>
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ffc9 	bl	80029a0 <compare>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <gnome_sort+0x28>
			gnome++;
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	3301      	adds	r3, #1
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	e006      	b.n	8002a2a <gnome_sort+0x36>
		} else {
			swap(gnome);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffa0 	bl	8002964 <swap>
			gnome--;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
	while (gnome < 126) {
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b7d      	cmp	r3, #125	; 0x7d
 8002a2e:	d9e7      	bls.n	8002a00 <gnome_sort+0xc>
		}
	}
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <do_cell_balancing>:

uint8_t do_cell_balancing() {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <do_cell_balancing+0x6c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	4918      	ldr	r1, [pc, #96]	; (8002aac <do_cell_balancing+0x70>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f014 feaa 	bl	80177a4 <xQueuePeek>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d023      	beq.n	8002a9e <do_cell_balancing+0x62>
		gnome_sort();
 8002a56:	f7ff ffcd 	bl	80029f4 <gnome_sort>
		for (int i = 0; i < 126; i++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	e009      	b.n	8002a74 <do_cell_balancing+0x38>
			set_balance_ext(0, i, NULL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	4619      	mov	r1, r3
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f001 fd51 	bl	8004510 <set_balance_ext>
		for (int i = 0; i < 126; i++) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3301      	adds	r3, #1
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b7d      	cmp	r3, #125	; 0x7d
 8002a78:	ddf2      	ble.n	8002a60 <do_cell_balancing+0x24>
		}
		for (int i = 0; i < 41; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	e00b      	b.n	8002a98 <do_cell_balancing+0x5c>
			set_balance_ext(1, sorted_indices[i], NULL);
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <do_cell_balancing+0x74>)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f001 fd3f 	bl	8004510 <set_balance_ext>
		for (int i = 0; i < 41; i++) {
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b28      	cmp	r3, #40	; 0x28
 8002a9c:	ddf0      	ble.n	8002a80 <do_cell_balancing+0x44>

		}
	}
	return 1;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2001b5c0 	.word	0x2001b5c0
 8002aac:	2001b74c 	.word	0x2001b74c
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <end_cell_balancing>:

uint8_t end_cell_balancing() {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 126; i++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	e009      	b.n	8002ad4 <end_cell_balancing+0x20>
		set_balance_ext(0, i, NULL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f001 fd21 	bl	8004510 <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b7d      	cmp	r3, #125	; 0x7d
 8002ad8:	ddf2      	ble.n	8002ac0 <end_cell_balancing+0xc>
	}
	return 1;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <MX_DMA_Init+0x3c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <MX_DMA_Init+0x3c>)
 8002af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_DMA_Init+0x3c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2105      	movs	r1, #5
 8002b0a:	2038      	movs	r0, #56	; 0x38
 8002b0c:	f010 fa24 	bl	8012f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b10:	2038      	movs	r0, #56	; 0x38
 8002b12:	f010 fa3d 	bl	8012f90 <HAL_NVIC_EnableIRQ>

}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <MX_GPIO_Init+0x150>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 8002baa:	2200      	movs	r2, #0
 8002bac:	210e      	movs	r1, #14
 8002bae:	4832      	ldr	r0, [pc, #200]	; (8002c78 <MX_GPIO_Init+0x154>)
 8002bb0:	f010 ff08 	bl	80139c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	21e0      	movs	r1, #224	; 0xe0
 8002bb8:	4830      	ldr	r0, [pc, #192]	; (8002c7c <MX_GPIO_Init+0x158>)
 8002bba:	f010 ff03 	bl	80139c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002bc4:	482e      	ldr	r0, [pc, #184]	; (8002c80 <MX_GPIO_Init+0x15c>)
 8002bc6:	f010 fefd 	bl	80139c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 8002bca:	230e      	movs	r3, #14
 8002bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <MX_GPIO_Init+0x154>)
 8002be2:	f010 fd53 	bl	801368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8002be6:	2370      	movs	r3, #112	; 0x70
 8002be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481f      	ldr	r0, [pc, #124]	; (8002c78 <MX_GPIO_Init+0x154>)
 8002bfa:	f010 fd47 	bl	801368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8002bfe:	23e0      	movs	r3, #224	; 0xe0
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4819      	ldr	r0, [pc, #100]	; (8002c7c <MX_GPIO_Init+0x158>)
 8002c16:	f010 fd39 	bl	801368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8002c1a:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8002c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	4813      	ldr	r0, [pc, #76]	; (8002c80 <MX_GPIO_Init+0x15c>)
 8002c34:	f010 fd2a 	bl	801368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8002c38:	2306      	movs	r3, #6
 8002c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480e      	ldr	r0, [pc, #56]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002c4c:	f010 fd1e 	bl	801368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8002c50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4806      	ldr	r0, [pc, #24]	; (8002c80 <MX_GPIO_Init+0x15c>)
 8002c66:	f010 fd11 	bl	801368c <HAL_GPIO_Init>

}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020800 	.word	0x40020800
 8002c84:	40020400 	.word	0x40020400

08002c88 <main>:
		sizeof(ams_state_t), };

const queue_info error_queue_info = { .element_count = 1, .element_size =
		sizeof(error_t), };

int main() {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 8002c8c:	f7ff f8fe 	bl	8001e8c <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 8002c90:	f00e feb6 	bl	8011a00 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 8002c94:	f000 f984 	bl	8002fa0 <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 8002c98:	f7ff ff44 	bl	8002b24 <MX_GPIO_Init>
	MX_SPI2_Init();
 8002c9c:	f001 ff2c 	bl	8004af8 <MX_SPI2_Init>
	MX_CAN1_Init();
 8002ca0:	f7ff fd22 	bl	80026e8 <MX_CAN1_Init>
	MX_CAN2_Init();
 8002ca4:	f7ff fd56 	bl	8002754 <MX_CAN2_Init>
	MX_TIM1_Init();
 8002ca8:	f002 f8e0 	bl	8004e6c <MX_TIM1_Init>
	MX_DMA_Init();
 8002cac:	f7ff ff1a 	bl	8002ae4 <MX_DMA_Init>
	MX_TIM3_Init();
 8002cb0:	f002 fa18 	bl	80050e4 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002cb4:	f002 f97a 	bl	8004fac <MX_TIM2_Init>
	MX_ADC1_Init();
 8002cb8:	f7ff fa22 	bl	8002100 <MX_ADC1_Init>

#ifndef SIMULATION
	initialize_CAN(&hcan1, &hcan2);
#endif
	initialize_LTC(&hspi2);
 8002cbc:	4888      	ldr	r0, [pc, #544]	; (8002ee0 <main+0x258>)
 8002cbe:	f001 fc77 	bl	80045b0 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 8002cc2:	f013 ff23 	bl	8016b0c <osKernelInitialize>

	/* INITIALIZE QUEUES */

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	2207      	movs	r2, #7
 8002cca:	4611      	mov	r1, r2
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f014 fa1e 	bl	8017110 <xQueueGenericCreate>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <main+0x25c>)
 8002cd8:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4611      	mov	r1, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f014 fa14 	bl	8017110 <xQueueGenericCreate>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a7f      	ldr	r2, [pc, #508]	; (8002ee8 <main+0x260>)
 8002cec:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	CSE_queue = xQueueCreate(CSE_queue_info.element_count,
 8002cee:	2301      	movs	r3, #1
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f014 fa0a 	bl	8017110 <xQueueGenericCreate>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	; (8002eec <main+0x264>)
 8002d00:	6013      	str	r3, [r2, #0]
			CSE_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8002d02:	2301      	movs	r3, #1
 8002d04:	2220      	movs	r2, #32
 8002d06:	4611      	mov	r1, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f014 fa00 	bl	8017110 <xQueueGenericCreate>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <main+0x268>)
 8002d14:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	PID_queue = xQueueCreate(PID_queue_info.element_count,
 8002d16:	2301      	movs	r3, #1
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f014 f9f6 	bl	8017110 <xQueueGenericCreate>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a73      	ldr	r2, [pc, #460]	; (8002ef4 <main+0x26c>)
 8002d28:	6013      	str	r3, [r2, #0]
			PID_queue_info.element_size);

	charger_queue = xQueueCreate(charger_queue_info.element_count,
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2218      	movs	r2, #24
 8002d2e:	4611      	mov	r1, r2
 8002d30:	2200      	movs	r2, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f014 f9ec 	bl	8017110 <xQueueGenericCreate>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ef8 <main+0x270>)
 8002d3c:	6013      	str	r3, [r2, #0]
			charger_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2208      	movs	r2, #8
 8002d42:	4611      	mov	r1, r2
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f014 f9e2 	bl	8017110 <xQueueGenericCreate>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <main+0x274>)
 8002d50:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 8002d52:	2301      	movs	r3, #1
 8002d54:	2208      	movs	r2, #8
 8002d56:	4611      	mov	r1, r2
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f014 f9d8 	bl	8017110 <xQueueGenericCreate>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4a67      	ldr	r2, [pc, #412]	; (8002f00 <main+0x278>)
 8002d64:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 8002d66:	2301      	movs	r3, #1
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f014 f9ce 	bl	8017110 <xQueueGenericCreate>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <main+0x27c>)
 8002d78:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	4611      	mov	r1, r2
 8002d80:	2200      	movs	r2, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f014 f9c4 	bl	8017110 <xQueueGenericCreate>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a5f      	ldr	r2, [pc, #380]	; (8002f08 <main+0x280>)
 8002d8c:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 8002d8e:	2301      	movs	r3, #1
 8002d90:	2204      	movs	r2, #4
 8002d92:	4611      	mov	r1, r2
 8002d94:	2200      	movs	r2, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f014 f9ba 	bl	8017110 <xQueueGenericCreate>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <main+0x284>)
 8002da0:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 8002da2:	2301      	movs	r3, #1
 8002da4:	2201      	movs	r2, #1
 8002da6:	4611      	mov	r1, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f014 f9b0 	bl	8017110 <xQueueGenericCreate>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4a57      	ldr	r2, [pc, #348]	; (8002f10 <main+0x288>)
 8002db4:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 8002db6:	2301      	movs	r3, #1
 8002db8:	2201      	movs	r2, #1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f014 f9a6 	bl	8017110 <xQueueGenericCreate>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a53      	ldr	r2, [pc, #332]	; (8002f14 <main+0x28c>)
 8002dc8:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 8002dca:	2301      	movs	r3, #1
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f014 f99c 	bl	8017110 <xQueueGenericCreate>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a4f      	ldr	r2, [pc, #316]	; (8002f18 <main+0x290>)
 8002ddc:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	state_queue = xQueueCreate(state_queue_info.element_count,
 8002dde:	2301      	movs	r3, #1
 8002de0:	2201      	movs	r2, #1
 8002de2:	4611      	mov	r1, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f014 f992 	bl	8017110 <xQueueGenericCreate>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <main+0x294>)
 8002df0:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	error_queue = xQueueCreate(error_queue_info.element_count,
 8002df2:	2301      	movs	r3, #1
 8002df4:	2201      	movs	r2, #1
 8002df6:	4611      	mov	r1, r2
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f014 f988 	bl	8017110 <xQueueGenericCreate>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <main+0x298>)
 8002e04:	6013      	str	r3, [r2, #0]
			error_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 8002e06:	f013 fecb 	bl	8016ba0 <osKernelGetTickCount>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fb6b 	bl	80004e8 <__aeabi_ui2d>
 8002e12:	a331      	add	r3, pc, #196	; (adr r3, 8002ed8 <main+0x250>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fa2a 	bl	8000270 <__adddf3>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7fd feb2 	bl	8000b8c <__aeabi_d2uiz>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4a3e      	ldr	r2, [pc, #248]	; (8002f24 <main+0x29c>)
 8002e2c:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 8002e2e:	4a3e      	ldr	r2, [pc, #248]	; (8002f28 <main+0x2a0>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	483e      	ldr	r0, [pc, #248]	; (8002f2c <main+0x2a4>)
 8002e34:	f013 fec9 	bl	8016bca <osThreadNew>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <main+0x2a8>)
 8002e3c:	6013      	str	r3, [r2, #0]

#ifdef SIMULATION
	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 8002e3e:	4a3d      	ldr	r2, [pc, #244]	; (8002f34 <main+0x2ac>)
 8002e40:	2100      	movs	r1, #0
 8002e42:	483d      	ldr	r0, [pc, #244]	; (8002f38 <main+0x2b0>)
 8002e44:	f013 fec1 	bl	8016bca <osThreadNew>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4a3c      	ldr	r2, [pc, #240]	; (8002f3c <main+0x2b4>)
 8002e4c:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);
#endif

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 8002e4e:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <main+0x2b8>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	483c      	ldr	r0, [pc, #240]	; (8002f44 <main+0x2bc>)
 8002e54:	f013 feb9 	bl	8016bca <osThreadNew>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <main+0x2c0>)
 8002e5c:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <main+0x2c4>)
 8002e60:	2100      	movs	r1, #0
 8002e62:	483b      	ldr	r0, [pc, #236]	; (8002f50 <main+0x2c8>)
 8002e64:	f013 feb1 	bl	8016bca <osThreadNew>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <main+0x2cc>)
 8002e6c:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <main+0x2d0>)
 8002e70:	2100      	movs	r1, #0
 8002e72:	483a      	ldr	r0, [pc, #232]	; (8002f5c <main+0x2d4>)
 8002e74:	f013 fea9 	bl	8016bca <osThreadNew>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a39      	ldr	r2, [pc, #228]	; (8002f60 <main+0x2d8>)
 8002e7c:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 8002e7e:	4a39      	ldr	r2, [pc, #228]	; (8002f64 <main+0x2dc>)
 8002e80:	2100      	movs	r1, #0
 8002e82:	4839      	ldr	r0, [pc, #228]	; (8002f68 <main+0x2e0>)
 8002e84:	f013 fea1 	bl	8016bca <osThreadNew>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <main+0x2e4>)
 8002e8c:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8002e8e:	4a38      	ldr	r2, [pc, #224]	; (8002f70 <main+0x2e8>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	4838      	ldr	r0, [pc, #224]	; (8002f74 <main+0x2ec>)
 8002e94:	f013 fe99 	bl	8016bca <osThreadNew>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <main+0x2f0>)
 8002e9c:	6013      	str	r3, [r2, #0]
#ifndef SIMULATION
	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
			&CAN_task_info.attributes);
#endif

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 8002e9e:	4a37      	ldr	r2, [pc, #220]	; (8002f7c <main+0x2f4>)
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4837      	ldr	r0, [pc, #220]	; (8002f80 <main+0x2f8>)
 8002ea4:	f013 fe91 	bl	8016bca <osThreadNew>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4a36      	ldr	r2, [pc, #216]	; (8002f84 <main+0x2fc>)
 8002eac:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <main+0x300>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4836      	ldr	r0, [pc, #216]	; (8002f8c <main+0x304>)
 8002eb4:	f013 fe89 	bl	8016bca <osThreadNew>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <main+0x308>)
 8002ebc:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8002ebe:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <main+0x30c>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4835      	ldr	r0, [pc, #212]	; (8002f98 <main+0x310>)
 8002ec4:	f013 fe81 	bl	8016bca <osThreadNew>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <main+0x314>)
 8002ecc:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 8002ece:	f013 fe41 	bl	8016b54 <osKernelStart>

	for (;;)
 8002ed2:	e7fe      	b.n	8002ed2 <main+0x24a>
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	aaaaaaab 	.word	0xaaaaaaab
 8002edc:	406a0aaa 	.word	0x406a0aaa
 8002ee0:	2001bf38 	.word	0x2001bf38
 8002ee4:	2001b5ec 	.word	0x2001b5ec
 8002ee8:	2001b5d4 	.word	0x2001b5d4
 8002eec:	2001b5f8 	.word	0x2001b5f8
 8002ef0:	2001b5cc 	.word	0x2001b5cc
 8002ef4:	2001b5e4 	.word	0x2001b5e4
 8002ef8:	2001b5e8 	.word	0x2001b5e8
 8002efc:	2001b5f0 	.word	0x2001b5f0
 8002f00:	2001b5e0 	.word	0x2001b5e0
 8002f04:	2001b5fc 	.word	0x2001b5fc
 8002f08:	2001b5c0 	.word	0x2001b5c0
 8002f0c:	2001b5dc 	.word	0x2001b5dc
 8002f10:	2001b5c4 	.word	0x2001b5c4
 8002f14:	2001b5d8 	.word	0x2001b5d8
 8002f18:	2001b5f4 	.word	0x2001b5f4
 8002f1c:	2001b5c8 	.word	0x2001b5c8
 8002f20:	2001b5d0 	.word	0x2001b5d0
 8002f24:	2001b784 	.word	0x2001b784
 8002f28:	0801c1dc 	.word	0x0801c1dc
 8002f2c:	08003271 	.word	0x08003271
 8002f30:	2001b768 	.word	0x2001b768
 8002f34:	0801c20c 	.word	0x0801c20c
 8002f38:	080040e9 	.word	0x080040e9
 8002f3c:	2001b770 	.word	0x2001b770
 8002f40:	0801c26c 	.word	0x0801c26c
 8002f44:	08003ca9 	.word	0x08003ca9
 8002f48:	2001b778 	.word	0x2001b778
 8002f4c:	0801c32c 	.word	0x0801c32c
 8002f50:	08003601 	.word	0x08003601
 8002f54:	2001b78c 	.word	0x2001b78c
 8002f58:	0801c2fc 	.word	0x0801c2fc
 8002f5c:	080036e1 	.word	0x080036e1
 8002f60:	2001b764 	.word	0x2001b764
 8002f64:	0801c2cc 	.word	0x0801c2cc
 8002f68:	08003811 	.word	0x08003811
 8002f6c:	2001b77c 	.word	0x2001b77c
 8002f70:	0801c23c 	.word	0x0801c23c
 8002f74:	08003e39 	.word	0x08003e39
 8002f78:	2001b774 	.word	0x2001b774
 8002f7c:	0801c29c 	.word	0x0801c29c
 8002f80:	080038f1 	.word	0x080038f1
 8002f84:	2001b760 	.word	0x2001b760
 8002f88:	0801c38c 	.word	0x0801c38c
 8002f8c:	08004031 	.word	0x08004031
 8002f90:	2001b788 	.word	0x2001b788
 8002f94:	0801c35c 	.word	0x0801c35c
 8002f98:	08003fc9 	.word	0x08003fc9
 8002f9c:	2001b75c 	.word	0x2001b75c

08002fa0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b094      	sub	sp, #80	; 0x50
 8002fa4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002fa6:	f107 0320 	add.w	r3, r7, #32
 8002faa:	2230      	movs	r2, #48	; 0x30
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f018 fa4e 	bl	801b450 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <SystemClock_Config+0xd0>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4a28      	ldr	r2, [pc, #160]	; (8003070 <SystemClock_Config+0xd0>)
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <SystemClock_Config+0xd0>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <SystemClock_Config+0xd4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	; (8003074 <SystemClock_Config+0xd4>)
 8002fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <SystemClock_Config+0xd4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003000:	2301      	movs	r3, #1
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003004:	2310      	movs	r3, #16
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003008:	2301      	movs	r3, #1
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800300c:	2302      	movs	r3, #2
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003010:	2300      	movs	r3, #0
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003014:	2308      	movs	r3, #8
 8003016:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 8003018:	23a0      	movs	r3, #160	; 0xa0
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800301c:	2302      	movs	r3, #2
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003020:	2304      	movs	r3, #4
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003024:	f107 0320 	add.w	r3, r7, #32
 8003028:	4618      	mov	r0, r3
 800302a:	f010 fcf5 	bl	8013a18 <HAL_RCC_OscConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <SystemClock_Config+0x98>
		Error_Handler();
 8003034:	f001 f9a2 	bl	800437c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003038:	230f      	movs	r3, #15
 800303a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303c:	2302      	movs	r3, #2
 800303e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003044:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003048:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800304a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	2105      	movs	r1, #5
 8003056:	4618      	mov	r0, r3
 8003058:	f010 ff56 	bl	8013f08 <HAL_RCC_ClockConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <SystemClock_Config+0xc6>
		Error_Handler();
 8003062:	f001 f98b 	bl	800437c <Error_Handler>
	}
}
 8003066:	bf00      	nop
 8003068:	3750      	adds	r7, #80	; 0x50
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000

08003078 <__wait_for_data>:
#define WAIT_FOR_DRIVE					0x0020
#define WAIT_FOR_CHARGE					0x0040
#define WAIT_FOR_BALANCE				0x0080
#define WAIT_FOR_ALL 					0xFFFF

void __wait_for_data(uint16_t FLAGS) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
	uint8_t NOT_OK = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	77fb      	strb	r3, [r7, #31]

	double _d;
	double *_dptr;
	uint8_t _u8;
	while (NOT_OK) {
 8003086:	e0a3      	b.n	80031d0 <__wait_for_data+0x158>
		osDelay(0.500 * TICK2HZ);
 8003088:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800308c:	f013 fe2f 	bl	8016cee <osDelay>
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_VOLTAGES)
				&& xQueuePeek(cell_voltages_queue, &_dptr, 0));
 8003090:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <__wait_for_data+0x16c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f107 010c 	add.w	r1, r7, #12
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f014 fb82 	bl	80177a4 <xQueuePeek>
 80030a0:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_VOLTAGES)
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	b25a      	sxtb	r2, r3
 80030ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_TEMPERATURES)
				&& xQueuePeek(cell_temperatures_queue, &_dptr, 0));
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <__wait_for_data+0x170>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f107 010c 	add.w	r1, r7, #12
 80030c0:	2200      	movs	r2, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f014 fb6e 	bl	80177a4 <xQueuePeek>
 80030c8:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CELL_TEMPERATURES)
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	b25a      	sxtb	r2, r3
 80030d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030da:	4013      	ands	r3, r2
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_CURRENT)
				&& xQueuePeek(accumulator_current_queue, &_d, 0));
 80030e0:	4b42      	ldr	r3, [pc, #264]	; (80031ec <__wait_for_data+0x174>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f107 0110 	add.w	r1, r7, #16
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f014 fb5a 	bl	80177a4 <xQueuePeek>
 80030f0:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_CURRENT)
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003102:	4013      	ands	r3, r2
 8003104:	b25b      	sxtb	r3, r3
 8003106:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_VOLTAGE)
				&& xQueuePeek(accumulator_voltage_queue, &_d, 0));
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <__wait_for_data+0x178>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f107 0110 	add.w	r1, r7, #16
 8003110:	2200      	movs	r2, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f014 fb46 	bl	80177a4 <xQueuePeek>
 8003118:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_ACCUMULATOR_VOLTAGE)
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	b25a      	sxtb	r2, r3
 8003126:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800312a:	4013      	ands	r3, r2
 800312c:	b25b      	sxtb	r3, r3
 800312e:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_VEHICLE_VOLTAGE)
				&& xQueuePeek(vehicle_voltage_queue, &_d, 0));
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <__wait_for_data+0x17c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f107 0110 	add.w	r1, r7, #16
 8003138:	2200      	movs	r2, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f014 fb32 	bl	80177a4 <xQueuePeek>
 8003140:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_VEHICLE_VOLTAGE)
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	b25a      	sxtb	r2, r3
 800314e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003152:	4013      	ands	r3, r2
 8003154:	b25b      	sxtb	r3, r3
 8003156:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_DRIVE)
				&& xQueuePeek(start_drive_queue, &_u8, 0));
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <__wait_for_data+0x180>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f107 010b 	add.w	r1, r7, #11
 8003160:	2200      	movs	r2, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f014 fb1e 	bl	80177a4 <xQueuePeek>
 8003168:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_DRIVE)
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	b25a      	sxtb	r2, r3
 8003176:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800317a:	4013      	ands	r3, r2
 800317c:	b25b      	sxtb	r3, r3
 800317e:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_CHARGE)
				&& xQueuePeek(start_charge_queue, &_u8, 0));
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <__wait_for_data+0x184>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f107 010b 	add.w	r1, r7, #11
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f014 fb0a 	bl	80177a4 <xQueuePeek>
 8003190:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_CHARGE)
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	b25a      	sxtb	r2, r3
 800319e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031a2:	4013      	ands	r3, r2
 80031a4:	b25b      	sxtb	r3, r3
 80031a6:	77fb      	strb	r3, [r7, #31]
		NOT_OK &= !((FLAGS | WAIT_FOR_BALANCE)
				&& xQueuePeek(start_balance_queue, &_u8, 0));
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <__wait_for_data+0x188>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f107 010b 	add.w	r1, r7, #11
 80031b0:	2200      	movs	r2, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f014 faf6 	bl	80177a4 <xQueuePeek>
 80031b8:	4603      	mov	r3, r0
		NOT_OK &= !((FLAGS | WAIT_FOR_BALANCE)
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	b25a      	sxtb	r2, r3
 80031c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	77fb      	strb	r3, [r7, #31]
	while (NOT_OK) {
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f47f af58 	bne.w	8003088 <__wait_for_data+0x10>
	}
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2001b5c0 	.word	0x2001b5c0
 80031e8:	2001b5dc 	.word	0x2001b5dc
 80031ec:	2001b5fc 	.word	0x2001b5fc
 80031f0:	2001b5f0 	.word	0x2001b5f0
 80031f4:	2001b5e0 	.word	0x2001b5e0
 80031f8:	2001b5c4 	.word	0x2001b5c4
 80031fc:	2001b5d8 	.word	0x2001b5d8
 8003200:	2001b5f4 	.word	0x2001b5f4

08003204 <__raise_ams_error>:

error_t __error;
void __raise_ams_error(error_t error) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
	set_ams_error_ext(1);
 800320e:	2001      	movs	r0, #1
 8003210:	f001 f926 	bl	8004460 <set_ams_error_ext>
	__error = error;
 8003214:	79fa      	ldrb	r2, [r7, #7]
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <__raise_ams_error+0x2c>)
 8003218:	701a      	strb	r2, [r3, #0]
	xQueueOverwrite(error_queue, &error);
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <__raise_ams_error+0x30>)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	1df9      	adds	r1, r7, #7
 8003220:	2302      	movs	r3, #2
 8003222:	2200      	movs	r2, #0
 8003224:	f013 ffd8 	bl	80171d8 <xQueueGenericSend>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2001b76c 	.word	0x2001b76c
 8003234:	2001b5d0 	.word	0x2001b5d0

08003238 <__raise_imd_error>:

void __raise_imd_error(error_t error) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
	set_imd_error_ext(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f001 f92c 	bl	80044a0 <set_imd_error_ext>
	__error = error;
 8003248:	79fa      	ldrb	r2, [r7, #7]
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <__raise_imd_error+0x2c>)
 800324c:	701a      	strb	r2, [r3, #0]
	xQueueOverwrite(error_queue, &error);
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <__raise_imd_error+0x30>)
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	1df9      	adds	r1, r7, #7
 8003254:	2302      	movs	r3, #2
 8003256:	2200      	movs	r2, #0
 8003258:	f013 ffbe 	bl	80171d8 <xQueueGenericSend>
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2001b76c 	.word	0x2001b76c
 8003268:	2001b5d0 	.word	0x2001b5d0
 800326c:	00000000 	.word	0x00000000

08003270 <start_SM_task>:

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b09a      	sub	sp, #104	; 0x68
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8003278:	f017 fb7e 	bl	801a978 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <start_SM_task+0x1b0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8003282:	4b68      	ldr	r3, [pc, #416]	; (8003424 <start_SM_task+0x1b4>)
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f951 	bl	800052c <__aeabi_f2d>
 800328a:	a363      	add	r3, pc, #396	; (adr r3, 8003418 <start_SM_task+0x1a8>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fd f9a4 	bl	80005dc <__aeabi_dmul>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f7fd fc76 	bl	8000b8c <__aeabi_d2uiz>
 80032a0:	4603      	mov	r3, r0
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Make task-specific structures */
	charger_t charger;
	ams_inputs.Ts = SM_task_info.periodicity;
 80032a4:	4a5f      	ldr	r2, [pc, #380]	; (8003424 <start_SM_task+0x1b4>)
 80032a6:	4b60      	ldr	r3, [pc, #384]	; (8003428 <start_SM_task+0x1b8>)
 80032a8:	619a      	str	r2, [r3, #24]
	double mean;
	double variance;
	double maximum;

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 80032aa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032ac:	f7fd f91c 	bl	80004e8 <__aeabi_ui2d>
 80032b0:	4604      	mov	r4, r0
 80032b2:	460d      	mov	r5, r1
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f937 	bl	800052c <__aeabi_f2d>
 80032be:	a356      	add	r3, pc, #344	; (adr r3, 8003418 <start_SM_task+0x1a8>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f98a 	bl	80005dc <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4620      	mov	r0, r4
 80032ce:	4629      	mov	r1, r5
 80032d0:	f7fc ffce 	bl	8000270 <__adddf3>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	f7fd fc56 	bl	8000b8c <__aeabi_d2uiz>
 80032e0:	4603      	mov	r3, r0
 80032e2:	667b      	str	r3, [r7, #100]	; 0x64
	osDelayUntil(next_tick);
 80032e4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032e6:	f013 fd1d 	bl	8016d24 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 80032ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032ee:	f7ff fec3 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Receive every piece of data which is required to propagate the state machine */
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80032f2:	4b4e      	ldr	r3, [pc, #312]	; (800342c <start_SM_task+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f107 010c 	add.w	r1, r7, #12
 80032fa:	2200      	movs	r2, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f014 fa51 	bl	80177a4 <xQueuePeek>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8123 	beq.w	8003550 <start_SM_task+0x2e0>
				&& xQueuePeek(accumulator_current_queue,
 800330a:	4b49      	ldr	r3, [pc, #292]	; (8003430 <start_SM_task+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	4948      	ldr	r1, [pc, #288]	; (8003434 <start_SM_task+0x1c4>)
 8003312:	4618      	mov	r0, r3
 8003314:	f014 fa46 	bl	80177a4 <xQueuePeek>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8118 	beq.w	8003550 <start_SM_task+0x2e0>
						&ams_inputs.accumulator_current, 0)
				&& xQueuePeek(accumulator_voltage_queue,
 8003320:	4b45      	ldr	r3, [pc, #276]	; (8003438 <start_SM_task+0x1c8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	4940      	ldr	r1, [pc, #256]	; (8003428 <start_SM_task+0x1b8>)
 8003328:	4618      	mov	r0, r3
 800332a:	f014 fa3b 	bl	80177a4 <xQueuePeek>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 810d 	beq.w	8003550 <start_SM_task+0x2e0>
						&ams_inputs.accumulator_voltage, 0)
				&& xQueuePeek(vehicle_voltage_queue,
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <start_SM_task+0x1cc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	4940      	ldr	r1, [pc, #256]	; (8003440 <start_SM_task+0x1d0>)
 800333e:	4618      	mov	r0, r3
 8003340:	f014 fa30 	bl	80177a4 <xQueuePeek>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8102 	beq.w	8003550 <start_SM_task+0x2e0>
						&ams_inputs.vehicle_voltage, 0)) {

			/* Calculate mean, maximum and variance of cell voltages */
			{
				mean = 0;
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				variance = 0;
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				maximum = cell_voltages[0];
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				minimum = cell_voltages[0];
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337c:	e03a      	b.n	80033f4 <start_SM_task+0x184>
					mean += cell_voltages[i];
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800338e:	f7fc ff6f 	bl	8000270 <__adddf3>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					if (cell_voltages[i] > maximum) {
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80033aa:	f7fd fb89 	bl	8000ac0 <__aeabi_dcmplt>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <start_SM_task+0x154>
						maximum = cell_voltages[i];
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
					}
					if (cell_voltages[i] < minimum) {
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033d4:	f7fd fb92 	bl	8000afc <__aeabi_dcmpgt>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <start_SM_task+0x17e>
						minimum = cell_voltages[i];
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				for (int i = 0; i < 126; i++) {
 80033ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f0:	3301      	adds	r3, #1
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f6:	2b7d      	cmp	r3, #125	; 0x7d
 80033f8:	ddc1      	ble.n	800337e <start_SM_task+0x10e>
					}
				}
				mean /= 126;
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <start_SM_task+0x1d4>)
 8003400:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003404:	f7fd fa14 	bl	8000830 <__aeabi_ddiv>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				for (int i = 0; i < 126; i++) {
 8003410:	2300      	movs	r3, #0
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
 8003414:	e039      	b.n	800348a <start_SM_task+0x21a>
 8003416:	bf00      	nop
 8003418:	aaaaaaab 	.word	0xaaaaaaab
 800341c:	408a0aaa 	.word	0x408a0aaa
 8003420:	2001b784 	.word	0x2001b784
 8003424:	3dcccccd 	.word	0x3dcccccd
 8003428:	2001b6f8 	.word	0x2001b6f8
 800342c:	2001b5c0 	.word	0x2001b5c0
 8003430:	2001b5fc 	.word	0x2001b5fc
 8003434:	2001b700 	.word	0x2001b700
 8003438:	2001b5f0 	.word	0x2001b5f0
 800343c:	2001b5e0 	.word	0x2001b5e0
 8003440:	2001b718 	.word	0x2001b718
 8003444:	405f8000 	.word	0x405f8000
					double svar = cell_voltages[i] - mean;
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003458:	f7fc ff08 	bl	800026c <__aeabi_dsub>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					variance += svar * svar;
 8003464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003468:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800346c:	f7fd f8b6 	bl	80005dc <__aeabi_dmul>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003478:	f7fc fefa 	bl	8000270 <__adddf3>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				for (int i = 0; i < 126; i++) {
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	3301      	adds	r3, #1
 8003488:	63bb      	str	r3, [r7, #56]	; 0x38
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	2b7d      	cmp	r3, #125	; 0x7d
 800348e:	dddb      	ble.n	8003448 <start_SM_task+0x1d8>
				}
			}

			/* Set the rest of the state machine inputs */
			ams_inputs.cell_voltages_variance = variance;
 8003490:	494f      	ldr	r1, [pc, #316]	; (80035d0 <start_SM_task+0x360>)
 8003492:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003496:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ams_inputs.maximum_cell_voltage = maximum;
 800349a:	494d      	ldr	r1, [pc, #308]	; (80035d0 <start_SM_task+0x360>)
 800349c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			ams_inputs.minimum_cell_voltage = minimum;
 80034a4:	494a      	ldr	r1, [pc, #296]	; (80035d0 <start_SM_task+0x360>)
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ams_inputs.charger_is_awake = 1;
 80034ae:	4b48      	ldr	r3, [pc, #288]	; (80035d0 <start_SM_task+0x360>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			ams_inputs.ams_error = get_ams_error_latched_ext();
 80034b6:	f000 ffe7 	bl	8004488 <get_ams_error_latched_ext>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <start_SM_task+0x360>)
 80034c0:	775a      	strb	r2, [r3, #29]
			ams_inputs.imd_error = get_imd_error_latched_ext();
 80034c2:	f001 f801 	bl	80044c8 <get_imd_error_latched_ext>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <start_SM_task+0x360>)
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			ams_inputs.air_minus_closed = get_air_minus_ext();
 80034d0:	f000 ff92 	bl	80043f8 <get_air_minus_ext>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <start_SM_task+0x360>)
 80034da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			ams_inputs.air_plus_closed = get_air_plus_ext();
 80034de:	f000 ff67 	bl	80043b0 <get_air_plus_ext>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <start_SM_task+0x360>)
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			ams_inputs.precharge_closed = get_precharge_ext();
 80034ec:	f000 ffa8 	bl	8004440 <get_precharge_ext>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <start_SM_task+0x360>)
 80034f6:	779a      	strb	r2, [r3, #30]
			ams_inputs.SC = get_sc_probe_ext();
 80034f8:	f000 fff2 	bl	80044e0 <get_sc_probe_ext>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <start_SM_task+0x360>)
 8003502:	771a      	strb	r2, [r3, #28]

			/* Try to get the trigger signals */
			if (!xQueueReceive(start_drive_queue, &ams_inputs.drive, 0)) {
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <start_SM_task+0x364>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	4933      	ldr	r1, [pc, #204]	; (80035d8 <start_SM_task+0x368>)
 800350c:	4618      	mov	r0, r3
 800350e:	f014 f839 	bl	8017584 <xQueueReceive>
				//ams_inputs.drive = 0;
			}
			if (!xQueueReceive(start_charge_queue, &ams_inputs.charge, 0)) {
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <start_SM_task+0x36c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	4931      	ldr	r1, [pc, #196]	; (80035e0 <start_SM_task+0x370>)
 800351a:	4618      	mov	r0, r3
 800351c:	f014 f832 	bl	8017584 <xQueueReceive>
				//ams_inputs.charge = 0;
			}
			if (!xQueueReceive(start_balance_queue, &ams_inputs.balance, 0)) {
 8003520:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <start_SM_task+0x374>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	4930      	ldr	r1, [pc, #192]	; (80035e8 <start_SM_task+0x378>)
 8003528:	4618      	mov	r0, r3
 800352a:	f014 f82b 	bl	8017584 <xQueueReceive>
				//ams_inputs.balance = 0;
			}

			ams_state_t state = ams_function(); // _step
 800352e:	f00e f96b 	bl	8011808 <ams_function>
 8003532:	4603      	mov	r3, r0
 8003534:	72fb      	strb	r3, [r7, #11]

#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("state %i", state);
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	4619      	mov	r1, r3
 800353a:	482c      	ldr	r0, [pc, #176]	; (80035ec <start_SM_task+0x37c>)
 800353c:	f017 feb2 	bl	801b2a4 <SEGGER_SYSVIEW_PrintfHost>
#endif
			xQueueOverwrite(state_queue, &state);
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <start_SM_task+0x380>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	f107 010b 	add.w	r1, r7, #11
 8003548:	2302      	movs	r3, #2
 800354a:	2200      	movs	r2, #0
 800354c:	f013 fe44 	bl	80171d8 <xQueueGenericSend>
		}

		/* If any error was produced by the state machine (1xx), then raise them */
		if (ams_outputs.error) {
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <start_SM_task+0x384>)
 8003552:	78db      	ldrb	r3, [r3, #3]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <start_SM_task+0x2f2>
			__raise_ams_error((error_t) ams_outputs.error);
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <start_SM_task+0x384>)
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fe51 	bl	8003204 <__raise_ams_error>
		}

		charger.charger_current_limit = 6.6 * 2; 		// 2 * C
 8003562:	a317      	add	r3, pc, #92	; (adr r3, 80035c0 <start_SM_task+0x350>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	e9c7 2304 	strd	r2, r3, [r7, #16]
		charger.charger_voltage_limit = 4.15 * 126;	// sought cell voltage times aount of cells
 800356c:	a316      	add	r3, pc, #88	; (adr r3, 80035c8 <start_SM_task+0x358>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	e9c7 2306 	strd	r2, r3, [r7, #24]
		charger.enable_charger = ams_outputs.enable_charger;
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <start_SM_task+0x384>)
 8003578:	795b      	ldrb	r3, [r3, #5]
 800357a:	f887 3020 	strb.w	r3, [r7, #32]

		xQueueOverwrite(charger_queue, &charger);
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <start_SM_task+0x388>)
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	f107 0110 	add.w	r1, r7, #16
 8003586:	2302      	movs	r3, #2
 8003588:	2200      	movs	r2, #0
 800358a:	f013 fe25 	bl	80171d8 <xQueueGenericSend>

		set_air_minus_ext(ams_outputs.close_air_minus);
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <start_SM_task+0x384>)
 8003590:	785b      	ldrb	r3, [r3, #1]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 ff1c 	bl	80043d0 <set_air_minus_ext>
		set_air_plus_ext(ams_outputs.close_air_plus);
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <start_SM_task+0x384>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fef3 	bl	8004388 <set_air_plus_ext>
		set_precharge_ext(ams_outputs.close_precharge);
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <start_SM_task+0x384>)
 80035a4:	789b      	ldrb	r3, [r3, #2]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ff36 	bl	8004418 <set_precharge_ext>

		/* Wait until next period */
		next_tick += tick_increment;
 80035ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	4413      	add	r3, r2
 80035b2:	667b      	str	r3, [r7, #100]	; 0x64
		osDelayUntil(next_tick);
 80035b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80035b6:	f013 fbb5 	bl	8016d24 <osDelayUntil>
		if (0x1 && xQueuePeek(cell_voltages_queue, &cell_voltages, 0)
 80035ba:	e69a      	b.n	80032f2 <start_SM_task+0x82>
 80035bc:	f3af 8000 	nop.w
 80035c0:	66666666 	.word	0x66666666
 80035c4:	402a6666 	.word	0x402a6666
 80035c8:	33333334 	.word	0x33333334
 80035cc:	40805733 	.word	0x40805733
 80035d0:	2001b6f8 	.word	0x2001b6f8
 80035d4:	2001b5c4 	.word	0x2001b5c4
 80035d8:	2001b738 	.word	0x2001b738
 80035dc:	2001b5d8 	.word	0x2001b5d8
 80035e0:	2001b720 	.word	0x2001b720
 80035e4:	2001b5f4 	.word	0x2001b5f4
 80035e8:	2001b73c 	.word	0x2001b73c
 80035ec:	0801c15c 	.word	0x0801c15c
 80035f0:	2001b5c8 	.word	0x2001b5c8
 80035f4:	2001b740 	.word	0x2001b740
 80035f8:	2001b5e8 	.word	0x2001b5e8
 80035fc:	00000000 	.word	0x00000000

08003600 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <start_IMD_task+0xc8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <start_IMD_task+0xcc>)
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ff8b 	bl	800052c <__aeabi_f2d>
 8003616:	a32a      	add	r3, pc, #168	; (adr r3, 80036c0 <start_IMD_task+0xc0>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f7fc ffde 	bl	80005dc <__aeabi_dmul>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f7fd fab0 	bl	8000b8c <__aeabi_d2uiz>
 800362c:	4603      	mov	r3, r0
 800362e:	623b      	str	r3, [r7, #32]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8003630:	4827      	ldr	r0, [pc, #156]	; (80036d0 <start_IMD_task+0xd0>)
 8003632:	f7fe fb49 	bl	8001cc8 <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 8003636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003638:	f7fc ff56 	bl	80004e8 <__aeabi_ui2d>
 800363c:	4604      	mov	r4, r0
 800363e:	460d      	mov	r5, r1
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc ff71 	bl	800052c <__aeabi_f2d>
 800364a:	a31d      	add	r3, pc, #116	; (adr r3, 80036c0 <start_IMD_task+0xc0>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f7fc ffc4 	bl	80005dc <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc fe08 	bl	8000270 <__adddf3>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f7fd fa90 	bl	8000b8c <__aeabi_d2uiz>
 800366c:	4603      	mov	r3, r0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
	osDelayUntil(next_tick);
 8003670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003672:	f013 fb57 	bl	8016d24 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <start_IMD_task+0xd4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f107 0108 	add.w	r1, r7, #8
 800367e:	2200      	movs	r2, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f014 f88f 	bl	80177a4 <xQueuePeek>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <start_IMD_task+0xaa>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 800368c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <start_IMD_task+0xd8>)
 8003696:	f7fd f8cb 	bl	8000830 <__aeabi_ddiv>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa73 	bl	8000b8c <__aeabi_d2uiz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	77fb      	strb	r3, [r7, #31]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	4413      	add	r3, r2
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
		osDelayUntil(next_tick);
 80036b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036b4:	f013 fb36 	bl	8016d24 <osDelayUntil>
		if (xQueuePeek(IMD_queue, &IMD, 0)) {
 80036b8:	e7dd      	b.n	8003676 <start_IMD_task+0x76>
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w
 80036c0:	aaaaaaab 	.word	0xaaaaaaab
 80036c4:	408a0aaa 	.word	0x408a0aaa
 80036c8:	2001b784 	.word	0x2001b784
 80036cc:	3dcccccd 	.word	0x3dcccccd
 80036d0:	2001c068 	.word	0x2001c068
 80036d4:	2001b5d4 	.word	0x2001b5d4
 80036d8:	40240000 	.word	0x40240000
 80036dc:	00000000 	.word	0x00000000

080036e0 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 80036e0:	b5b0      	push	{r4, r5, r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <start_GPIO_task+0x118>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 80036ee:	4b43      	ldr	r3, [pc, #268]	; (80037fc <start_GPIO_task+0x11c>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fc ff1b 	bl	800052c <__aeabi_f2d>
 80036f6:	a33e      	add	r3, pc, #248	; (adr r3, 80037f0 <start_GPIO_task+0x110>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f7fc ff6e 	bl	80005dc <__aeabi_dmul>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	f7fd fa40 	bl	8000b8c <__aeabi_d2uiz>
 800370c:	4603      	mov	r3, r0
 800370e:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f7fc fee9 	bl	80004e8 <__aeabi_ui2d>
 8003716:	4604      	mov	r4, r0
 8003718:	460d      	mov	r5, r1
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc ff04 	bl	800052c <__aeabi_f2d>
 8003724:	a332      	add	r3, pc, #200	; (adr r3, 80037f0 <start_GPIO_task+0x110>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fc ff57 	bl	80005dc <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4620      	mov	r0, r4
 8003734:	4629      	mov	r1, r5
 8003736:	f7fc fd9b 	bl	8000270 <__adddf3>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	f7fd fa23 	bl	8000b8c <__aeabi_d2uiz>
 8003746:	4603      	mov	r3, r0
 8003748:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f013 faea 	bl	8016d24 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8003750:	f000 fe9a 	bl	8004488 <get_ams_error_latched_ext>
 8003754:	4603      	mov	r3, r0
 8003756:	723b      	strb	r3, [r7, #8]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 8003758:	f000 feb6 	bl	80044c8 <get_imd_error_latched_ext>
 800375c:	4603      	mov	r3, r0
 800375e:	727b      	strb	r3, [r7, #9]
		GPIO.SC_probe = get_sc_probe_ext();
 8003760:	f000 febe 	bl	80044e0 <get_sc_probe_ext>
 8003764:	4603      	mov	r3, r0
 8003766:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = get_imd_ok_ext();
 8003768:	f000 feca 	bl	8004500 <get_imd_ok_ext>
 800376c:	4603      	mov	r3, r0
 800376e:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8003770:	f000 fe1e 	bl	80043b0 <get_air_plus_ext>
 8003774:	4603      	mov	r3, r0
 8003776:	733b      	strb	r3, [r7, #12]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8003778:	f000 fe3e 	bl	80043f8 <get_air_minus_ext>
 800377c:	4603      	mov	r3, r0
 800377e:	737b      	strb	r3, [r7, #13]
		GPIO.precharge_closed = get_precharge_ext();
 8003780:	f000 fe5e 	bl	8004440 <get_precharge_ext>
 8003784:	4603      	mov	r3, r0
 8003786:	73bb      	strb	r3, [r7, #14]

		if (!GPIO.IMD_ok) {
 8003788:	7afb      	ldrb	r3, [r7, #11]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <start_GPIO_task+0xb4>
			__raise_imd_error(ERROR_IMD);
 800378e:	2002      	movs	r0, #2
 8003790:	f7ff fd52 	bl	8003238 <__raise_imd_error>
		}

		if (ams_outputs.air_minus_closed_s != ams_inputs.air_minus_closed) {
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <start_GPIO_task+0x120>)
 8003796:	7a5a      	ldrb	r2, [r3, #9]
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <start_GPIO_task+0x124>)
 800379a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800379e:	429a      	cmp	r2, r3
 80037a0:	d002      	beq.n	80037a8 <start_GPIO_task+0xc8>
			__raise_ams_error(ERROR_AIR_MINUS);
 80037a2:	2029      	movs	r0, #41	; 0x29
 80037a4:	f7ff fd2e 	bl	8003204 <__raise_ams_error>
		}

		if (ams_outputs.air_plus_closed_s != ams_inputs.air_plus_closed) {
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <start_GPIO_task+0x120>)
 80037aa:	799a      	ldrb	r2, [r3, #6]
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <start_GPIO_task+0x124>)
 80037ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d002      	beq.n	80037bc <start_GPIO_task+0xdc>
			__raise_ams_error(ERROR_AIR_PLUS);
 80037b6:	202a      	movs	r0, #42	; 0x2a
 80037b8:	f7ff fd24 	bl	8003204 <__raise_ams_error>
		}

		if (ams_outputs.precharge_closed_s != ams_inputs.precharge_closed) {
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <start_GPIO_task+0x120>)
 80037be:	7ada      	ldrb	r2, [r3, #11]
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <start_GPIO_task+0x124>)
 80037c2:	7f9b      	ldrb	r3, [r3, #30]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d002      	beq.n	80037ce <start_GPIO_task+0xee>
			__raise_ams_error(ERROR_PRECHARGE);
 80037c8:	202b      	movs	r0, #43	; 0x2b
 80037ca:	f7ff fd1b 	bl	8003204 <__raise_ams_error>
		}

		xQueueOverwrite(GPIO_queue, &GPIO);
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <start_GPIO_task+0x128>)
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f107 0108 	add.w	r1, r7, #8
 80037d6:	2302      	movs	r3, #2
 80037d8:	2200      	movs	r2, #0
 80037da:	f013 fcfd 	bl	80171d8 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f013 fa9c 	bl	8016d24 <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 80037ec:	e7b0      	b.n	8003750 <start_GPIO_task+0x70>
 80037ee:	bf00      	nop
 80037f0:	aaaaaaab 	.word	0xaaaaaaab
 80037f4:	408a0aaa 	.word	0x408a0aaa
 80037f8:	2001b784 	.word	0x2001b784
 80037fc:	3dcccccd 	.word	0x3dcccccd
 8003800:	2001b740 	.word	0x2001b740
 8003804:	2001b6f8 	.word	0x2001b6f8
 8003808:	2001b5ec 	.word	0x2001b5ec
 800380c:	00000000 	.word	0x00000000

08003810 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b0ac      	sub	sp, #176	; 0xb0
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <start_ADC_task+0xd0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <start_ADC_task+0xd4>)
 8003822:	4618      	mov	r0, r3
 8003824:	f7fc fe82 	bl	800052c <__aeabi_f2d>
 8003828:	a32b      	add	r3, pc, #172	; (adr r3, 80038d8 <start_ADC_task+0xc8>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fed5 	bl	80005dc <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f7fd f9a7 	bl	8000b8c <__aeabi_d2uiz>
 800383e:	4603      	mov	r3, r0
 8003840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 8003844:	4828      	ldr	r0, [pc, #160]	; (80038e8 <start_ADC_task+0xd8>)
 8003846:	f7fe ff0f 	bl	8002668 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 800384a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800384e:	f7fc fe4b 	bl	80004e8 <__aeabi_ui2d>
 8003852:	4604      	mov	r4, r0
 8003854:	460d      	mov	r5, r1
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe66 	bl	800052c <__aeabi_f2d>
 8003860:	a31d      	add	r3, pc, #116	; (adr r3, 80038d8 <start_ADC_task+0xc8>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc feb9 	bl	80005dc <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4620      	mov	r0, r4
 8003870:	4629      	mov	r1, r5
 8003872:	f7fc fcfd 	bl	8000270 <__adddf3>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f985 	bl	8000b8c <__aeabi_d2uiz>
 8003882:	4603      	mov	r3, r0
 8003884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	osDelayUntil(next_tick);
 8003888:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800388c:	f013 fa4a 	bl	8016d24 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003894:	2104      	movs	r1, #4
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fefa 	bl	8002690 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 800389c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	2210      	movs	r2, #16
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fd26 	bl	80022f8 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <start_ADC_task+0xdc>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	f107 0108 	add.w	r1, r7, #8
 80038b4:	2302      	movs	r3, #2
 80038b6:	2200      	movs	r2, #0
 80038b8:	f013 fc8e 	bl	80171d8 <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 80038bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038c4:	4413      	add	r3, r2
 80038c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		osDelayUntil(next_tick);
 80038ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80038ce:	f013 fa29 	bl	8016d24 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 80038d2:	e7dd      	b.n	8003890 <start_ADC_task+0x80>
 80038d4:	f3af 8000 	nop.w
 80038d8:	aaaaaaab 	.word	0xaaaaaaab
 80038dc:	408a0aaa 	.word	0x408a0aaa
 80038e0:	2001b784 	.word	0x2001b784
 80038e4:	3dcccccd 	.word	0x3dcccccd
 80038e8:	2001bfd8 	.word	0x2001bfd8
 80038ec:	2001b5cc 	.word	0x2001b5cc

080038f0 <start_COM_task>:

#ifdef STREAM_DATA
uint8_t __k = 0;
#endif

void start_COM_task(void *argument) {
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	b096      	sub	sp, #88	; 0x58
 80038f6:	af06      	add	r7, sp, #24
 80038f8:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80038fa:	4bb5      	ldr	r3, [pc, #724]	; (8003bd0 <start_COM_task+0x2e0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 8003900:	4bb4      	ldr	r3, [pc, #720]	; (8003bd4 <start_COM_task+0x2e4>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe12 	bl	800052c <__aeabi_f2d>
 8003908:	a3ad      	add	r3, pc, #692	; (adr r3, 8003bc0 <start_COM_task+0x2d0>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fe65 	bl	80005dc <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f937 	bl	8000b8c <__aeabi_d2uiz>
 800391e:	4603      	mov	r3, r0
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
	error_t cell_temperatures_error;
	error_t accumulator_current_error;
	uint8_t cell_data_valid;
	uint8_t accumulator_current_valid;

	const float voltage_time_constraint = 0.5;
 8003922:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float temperature_time_constraint = 1.0;
 8003928:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
	const float current_time_constraint = 0.5;
 800392e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003932:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 8003934:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8003bd8 <start_COM_task+0x2e8>
 8003938:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800393c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 8003940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003944:	ee17 3a90 	vmov	r3, s15
 8003948:	877b      	strh	r3, [r7, #58]	; 0x3a
	if (voltage_sample_constraint < 1) {
 800394a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <start_COM_task+0x64>
		voltage_sample_constraint = 1;
 8003950:	2301      	movs	r3, #1
 8003952:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 8003954:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003bd8 <start_COM_task+0x2e8>
 8003958:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800395c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 8003960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003964:	ee17 3a90 	vmov	r3, s15
 8003968:	873b      	strh	r3, [r7, #56]	; 0x38
	if (temperature_sample_constraint < 1) {
 800396a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <start_COM_task+0x84>
		temperature_sample_constraint = 1;
 8003970:	2301      	movs	r3, #1
 8003972:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 8003974:	eddf 6a98 	vldr	s13, [pc, #608]	; 8003bd8 <start_COM_task+0x2e8>
 8003978:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800397c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 8003980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003984:	ee17 3a90 	vmov	r3, s15
 8003988:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (current_sample_constraint < 1) {
 800398a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <start_COM_task+0xa4>
		current_sample_constraint = 1;
 8003990:	2301      	movs	r3, #1
 8003992:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8003994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003996:	f7fc fda7 	bl	80004e8 <__aeabi_ui2d>
 800399a:	4604      	mov	r4, r0
 800399c:	460d      	mov	r5, r1
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fdc2 	bl	800052c <__aeabi_f2d>
 80039a8:	a385      	add	r3, pc, #532	; (adr r3, 8003bc0 <start_COM_task+0x2d0>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f7fc fe15 	bl	80005dc <__aeabi_dmul>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4620      	mov	r0, r4
 80039b8:	4629      	mov	r1, r5
 80039ba:	f7fc fc59 	bl	8000270 <__adddf3>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fd f8e1 	bl	8000b8c <__aeabi_d2uiz>
 80039ca:	4603      	mov	r3, r0
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 80039ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039d0:	f013 f9a8 	bl	8016d24 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ACCUMULATOR_CURRENT);
 80039d4:	2008      	movs	r0, #8
 80039d6:	f7ff fb4f 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */
		/* Take the queue elements so that other tasks may not */
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 80039da:	4b80      	ldr	r3, [pc, #512]	; (8003bdc <start_COM_task+0x2ec>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f107 0118 	add.w	r1, r7, #24
 80039e2:	2200      	movs	r2, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f013 fdcd 	bl	8017584 <xQueueReceive>
		xQueueReceive(cell_temperatures_queue, &cell_temperatures, 0);
 80039ea:	4b7d      	ldr	r3, [pc, #500]	; (8003be0 <start_COM_task+0x2f0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f107 0114 	add.w	r1, r7, #20
 80039f2:	2200      	movs	r2, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f013 fdc5 	bl	8017584 <xQueueReceive>

		/* Get new data (indirectly) form CAN */
		accumulator_current_valid = xQueuePeek(accumulator_current_queue,
 80039fa:	4b7a      	ldr	r3, [pc, #488]	; (8003be4 <start_COM_task+0x2f4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f107 0108 	add.w	r1, r7, #8
 8003a02:	2200      	movs	r2, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f013 fecd 	bl	80177a4 <xQueuePeek>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				&accumulator_current, 0);
		/* Get new data over isoSPI */
		LTC_acquire_data(1);
 8003a10:	2001      	movs	r0, #1
 8003a12:	f000 fec9 	bl	80047a8 <LTC_acquire_data>

		/* Get data from the program */
#ifdef SIMULATION
		cell_voltages = SIM0_Y.cell_voltages;
 8003a16:	4b74      	ldr	r3, [pc, #464]	; (8003be8 <start_COM_task+0x2f8>)
 8003a18:	61bb      	str	r3, [r7, #24]
		cell_temperatures = SIM0_Y.cell_temperatures;
 8003a1a:	4b74      	ldr	r3, [pc, #464]	; (8003bec <start_COM_task+0x2fc>)
 8003a1c:	617b      	str	r3, [r7, #20]
		cell_data_valid = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		cell_temperatures = LTC_temperatures;
		cell_data_valid = LTC_data_valid;
#endif

#ifdef STREAM_DATA
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003a24:	4b72      	ldr	r3, [pc, #456]	; (8003bf0 <start_COM_task+0x300>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4698      	mov	r8, r3
				(uint16_t) (10000 * cell_voltages[__k]),
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <start_COM_task+0x300>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a38:	a363      	add	r3, pc, #396	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fc fdcd 	bl	80005dc <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f89f 	bl	8000b8c <__aeabi_d2uiz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003a52:	4699      	mov	r9, r3
				(uint16_t) (10000 * cell_voltages[__k + 1]),
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <start_COM_task+0x300>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a64:	a358      	add	r3, pc, #352	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fdb7 	bl	80005dc <__aeabi_dmul>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7fd f889 	bl	8000b8c <__aeabi_d2uiz>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003a7e:	469a      	mov	sl, r3
				(uint16_t) (10000 * cell_voltages[__k + 2]),
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <start_COM_task+0x300>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3302      	adds	r3, #2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a90:	a34d      	add	r3, pc, #308	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	f7fc fda1 	bl	80005dc <__aeabi_dmul>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f7fd f873 	bl	8000b8c <__aeabi_d2uiz>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003aaa:	461c      	mov	r4, r3
				(uint16_t) (10000 * cell_voltages[__k + 3]),
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <start_COM_task+0x300>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	3303      	adds	r3, #3
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003abc:	a342      	add	r3, pc, #264	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fd8b 	bl	80005dc <__aeabi_dmul>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f7fd f85d 	bl	8000b8c <__aeabi_d2uiz>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003ad6:	461d      	mov	r5, r3
				(uint16_t) (10000 * cell_voltages[__k + 4]),
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <start_COM_task+0x300>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae8:	a337      	add	r3, pc, #220	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fd75 	bl	80005dc <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f7fd f847 	bl	8000b8c <__aeabi_d2uiz>
 8003afe:	4603      	mov	r3, r0
 8003b00:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003b02:	461e      	mov	r6, r3
				(uint16_t) (10000 * cell_voltages[__k + 5]),
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4b3a      	ldr	r3, [pc, #232]	; (8003bf0 <start_COM_task+0x300>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	3305      	adds	r3, #5
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b14:	a32c      	add	r3, pc, #176	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f7fc fd5f 	bl	80005dc <__aeabi_dmul>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fd f831 	bl	8000b8c <__aeabi_d2uiz>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003b2e:	603b      	str	r3, [r7, #0]
				(uint16_t) (10000 * cell_voltages[__k + 6]));
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <start_COM_task+0x300>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	3306      	adds	r3, #6
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b40:	a321      	add	r3, pc, #132	; (adr r3, 8003bc8 <start_COM_task+0x2d8>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fd49 	bl	80005dc <__aeabi_dmul>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f7fd f81b 	bl	8000b8c <__aeabi_d2uiz>
 8003b56:	4603      	mov	r3, r0
 8003b58:	b29b      	uxth	r3, r3
		SEGGER_SYSVIEW_PrintfHost("cell_voltages %i %i %i %i %i %i %i %i", __k,
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	9602      	str	r6, [sp, #8]
 8003b62:	9501      	str	r5, [sp, #4]
 8003b64:	9400      	str	r4, [sp, #0]
 8003b66:	4653      	mov	r3, sl
 8003b68:	464a      	mov	r2, r9
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	4821      	ldr	r0, [pc, #132]	; (8003bf4 <start_COM_task+0x304>)
 8003b6e:	f017 fb99 	bl	801b2a4 <SEGGER_SYSVIEW_PrintfHost>
		__k = (__k + 7) % 126;
 8003b72:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <start_COM_task+0x300>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	1dda      	adds	r2, r3, #7
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <start_COM_task+0x308>)
 8003b7a:	fb83 1302 	smull	r1, r3, r3, r2
 8003b7e:	4413      	add	r3, r2
 8003b80:	1199      	asrs	r1, r3, #6
 8003b82:	17d3      	asrs	r3, r2, #31
 8003b84:	1ac9      	subs	r1, r1, r3
 8003b86:	460b      	mov	r3, r1
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	1a5b      	subs	r3, r3, r1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	1ad1      	subs	r1, r2, r3
 8003b90:	b2ca      	uxtb	r2, r1
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <start_COM_task+0x300>)
 8003b94:	701a      	strb	r2, [r3, #0]
#endif

		/* If new cell data is available, supply the system with it */
		if (cell_data_valid) {
 8003b96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02e      	beq.n	8003bfc <start_COM_task+0x30c>
			xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <start_COM_task+0x2ec>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f107 0118 	add.w	r1, r7, #24
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f013 fb15 	bl	80171d8 <xQueueGenericSend>
			xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <start_COM_task+0x2f0>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	f107 0114 	add.w	r1, r7, #20
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f013 fb0d 	bl	80171d8 <xQueueGenericSend>
 8003bbe:	e020      	b.n	8003c02 <start_COM_task+0x312>
 8003bc0:	aaaaaaab 	.word	0xaaaaaaab
 8003bc4:	408a0aaa 	.word	0x408a0aaa
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	40c38800 	.word	0x40c38800
 8003bd0:	2001b784 	.word	0x2001b784
 8003bd4:	3dcccccd 	.word	0x3dcccccd
 8003bd8:	3dcccccd 	.word	0x3dcccccd
 8003bdc:	2001b5c0 	.word	0x2001b5c0
 8003be0:	2001b5dc 	.word	0x2001b5dc
 8003be4:	2001b5fc 	.word	0x2001b5fc
 8003be8:	2001d9d0 	.word	0x2001d9d0
 8003bec:	2001e5a0 	.word	0x2001e5a0
 8003bf0:	200017f0 	.word	0x200017f0
 8003bf4:	0801c168 	.word	0x0801c168
 8003bf8:	82082083 	.word	0x82082083
		} else {
			__raise_ams_error(ERROR_NO_LTC_DATA);
 8003bfc:	200a      	movs	r0, #10
 8003bfe:	f7ff fb01 	bl	8003204 <__raise_ams_error>
		}

		/* Raise an error if cell voltage time constraints are not met,
		 * or if there is no data being received */
		cell_voltages_error = COM_voltages_ok(cell_voltages,
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd fe63 	bl	80018d4 <COM_voltages_ok>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				voltage_sample_constraint);

		if (cell_voltages_error) {
 8003c14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <start_COM_task+0x336>
			__raise_ams_error(cell_voltages_error);
 8003c1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff faef 	bl	8003204 <__raise_ams_error>
		}

		/* Raise an error if cell temperature time constraints are not met,
		 * or if there is no data being received */
		cell_temperatures_error = COM_temperatures_ok(cell_temperatures,
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f7fd feb7 	bl	80019ac <COM_temperatures_ok>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3020 	strb.w	r3, [r7, #32]
				!temperature_sample_constraint);

		if (cell_temperatures_error) {
 8003c44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d004      	beq.n	8003c56 <start_COM_task+0x366>
			__raise_ams_error(cell_temperatures_error);
 8003c4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fad7 	bl	8003204 <__raise_ams_error>
		}

		/* If no new accumulator current was gathered, raise an error */
		if (!accumulator_current_valid) {
 8003c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <start_COM_task+0x374>
			__raise_ams_error(ERROR_NO_CURRENT_DATA);
 8003c5e:	200b      	movs	r0, #11
 8003c60:	f7ff fad0 	bl	8003204 <__raise_ams_error>
		}

		/* Raise an error if accumulator current time constraints are not met,
		 * or if there is no data being received */
		accumulator_current_error = COM_current_ok(&accumulator_current,
 8003c64:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fd ff09 	bl	8001a84 <COM_current_ok>
 8003c72:	4603      	mov	r3, r0
 8003c74:	77fb      	strb	r3, [r7, #31]
				current_sample_constraint);

		if (accumulator_current_error) {
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <start_COM_task+0x39e>
			__raise_ams_error(accumulator_current_error);
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fac0 	bl	8003204 <__raise_ams_error>
		}
		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003c84:	e003      	b.n	8003c8e <start_COM_task+0x39e>
			next_tick += tick_increment;
 8003c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	4413      	add	r3, r2
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 8003c8e:	f012 ff87 	bl	8016ba0 <osKernelGetTickCount>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d3f5      	bcc.n	8003c86 <start_COM_task+0x396>
		}
		osDelayUntil(next_tick);
 8003c9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c9c:	f013 f842 	bl	8016d24 <osDelayUntil>
		xQueueReceive(cell_voltages_queue, &cell_voltages, 0);
 8003ca0:	e69b      	b.n	80039da <start_COM_task+0xea>
 8003ca2:	bf00      	nop
 8003ca4:	0000      	movs	r0, r0
	...

08003ca8 <start_CSE_task>:
		}
		osDelayUntil(next_tick);
	}
}

void start_CSE_task(void *argument) {
 8003ca8:	b5b0      	push	{r4, r5, r7, lr}
 8003caa:	b090      	sub	sp, #64	; 0x40
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <start_CSE_task+0x170>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <start_CSE_task+0x174>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fc37 	bl	800052c <__aeabi_f2d>
 8003cbe:	a352      	add	r3, pc, #328	; (adr r3, 8003e08 <start_CSE_task+0x160>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fc8a 	bl	80005dc <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f7fc ff5c 	bl	8000b8c <__aeabi_d2uiz>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Make task-specific structures */
	CSE_initialize();
 8003cd8:	f003 fa8a 	bl	80071f0 <CSE_initialize>
	double *cell_voltages;
	double accumulator_current;
	double mean_cell_voltage;

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8003cdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cde:	f7fc fc03 	bl	80004e8 <__aeabi_ui2d>
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc1e 	bl	800052c <__aeabi_f2d>
 8003cf0:	a345      	add	r3, pc, #276	; (adr r3, 8003e08 <start_CSE_task+0x160>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fc71 	bl	80005dc <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7fc fab5 	bl	8000270 <__adddf3>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f7fc ff3d 	bl	8000b8c <__aeabi_d2uiz>
 8003d12:	4603      	mov	r3, r0
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 8003d16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d18:	f013 f804 	bl	8016d24 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 8003d1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003d20:	f7ff f9aa 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* Collect cell voltages and accumulator current -- then calcualte SOC/SOH */
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <start_CSE_task+0x178>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f107 0108 	add.w	r1, r7, #8
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f013 fd38 	bl	80177a4 <xQueuePeek>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d05c      	beq.n	8003df4 <start_CSE_task+0x14c>
				&& xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <start_CSE_task+0x17c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f107 0114 	add.w	r1, r7, #20
 8003d42:	2200      	movs	r2, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f013 fd2d 	bl	80177a4 <xQueuePeek>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d051      	beq.n	8003df4 <start_CSE_task+0x14c>
			/*
			 * Calculate the mean cell voltage -- if the periodicity is high enough
			 * one might calculate them all individually at some point (and/or do them interleaving)
			 */
			mean_cell_voltage = 0;
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d60:	e010      	b.n	8003d84 <start_CSE_task+0xdc>
				mean_cell_voltage += cell_voltages[i];
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003d72:	f7fc fa7d 	bl	8000270 <__adddf3>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			for (int i = 0; i < 126; i++) {
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	3301      	adds	r3, #1
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	2b7d      	cmp	r3, #125	; 0x7d
 8003d88:	ddeb      	ble.n	8003d62 <start_CSE_task+0xba>
			}
			mean_cell_voltage /= 126;
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <start_CSE_task+0x180>)
 8003d90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003d94:	f7fc fd4c 	bl	8000830 <__aeabi_ddiv>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			CSE_U.current = accumulator_current;
 8003da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da4:	4921      	ldr	r1, [pc, #132]	; (8003e2c <start_CSE_task+0x184>)
 8003da6:	e9c1 2300 	strd	r2, r3, [r1]
			CSE_U.y = mean_cell_voltage;
 8003daa:	4920      	ldr	r1, [pc, #128]	; (8003e2c <start_CSE_task+0x184>)
 8003dac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003db0:	e9c1 2302 	strd	r2, r3, [r1, #8]

			CSE_step();
 8003db4:	f001 ff18 	bl	8005be8 <CSE_step>

			CSE.SOC = CSE_Y.soc;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <start_CSE_task+0x188>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
			CSE.SOH = CSE_Y.capacity / (6.6 * 3600);
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <start_CSE_task+0x188>)
 8003dc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003dc8:	a311      	add	r3, pc, #68	; (adr r3, 8003e10 <start_CSE_task+0x168>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fd2f 	bl	8000830 <__aeabi_ddiv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
			xQueueOverwrite(CSE_queue, &CSE);
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <start_CSE_task+0x18c>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f107 0118 	add.w	r1, r7, #24
 8003de2:	2302      	movs	r3, #2
 8003de4:	2200      	movs	r2, #0
 8003de6:	f013 f9f7 	bl	80171d8 <xQueueGenericSend>

		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003dea:	e003      	b.n	8003df4 <start_CSE_task+0x14c>
			next_tick += tick_increment;
 8003dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	4413      	add	r3, r2
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (next_tick < osKernelGetTickCount()) {
 8003df4:	f012 fed4 	bl	8016ba0 <osKernelGetTickCount>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d3f5      	bcc.n	8003dec <start_CSE_task+0x144>
		}
		osDelayUntil(next_tick);
 8003e00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e02:	f012 ff8f 	bl	8016d24 <osDelayUntil>
		if (xQueuePeek(accumulator_current_queue, &accumulator_current, 0)
 8003e06:	e78d      	b.n	8003d24 <start_CSE_task+0x7c>
 8003e08:	aaaaaaab 	.word	0xaaaaaaab
 8003e0c:	408a0aaa 	.word	0x408a0aaa
 8003e10:	00000000 	.word	0x00000000
 8003e14:	40d73400 	.word	0x40d73400
 8003e18:	2001b784 	.word	0x2001b784
 8003e1c:	3dcccccd 	.word	0x3dcccccd
 8003e20:	2001b5fc 	.word	0x2001b5fc
 8003e24:	2001b5c0 	.word	0x2001b5c0
 8003e28:	405f8000 	.word	0x405f8000
 8003e2c:	2001c0c0 	.word	0x2001c0c0
 8003e30:	2001c0b0 	.word	0x2001c0b0
 8003e34:	2001b5f8 	.word	0x2001b5f8

08003e38 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8003e38:	b5b0      	push	{r4, r5, r7, lr}
 8003e3a:	b09c      	sub	sp, #112	; 0x70
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003e40:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <start_COOL_task+0x170>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8003e46:	4b59      	ldr	r3, [pc, #356]	; (8003fac <start_COOL_task+0x174>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fb6f 	bl	800052c <__aeabi_f2d>
 8003e4e:	a354      	add	r3, pc, #336	; (adr r3, 8003fa0 <start_COOL_task+0x168>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc fbc2 	bl	80005dc <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7fc fe94 	bl	8000b8c <__aeabi_d2uiz>
 8003e64:	4603      	mov	r3, r0
 8003e66:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Make task-specific structures */
	PID_t PID;
	pPID_t pPID;

	PID_initialize(&PID, // *ptr
 8003e68:	f107 031c 	add.w	r3, r7, #28
 8003e6c:	eddf 2a50 	vldr	s5, [pc, #320]	; 8003fb0 <start_COOL_task+0x178>
 8003e70:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8003e74:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8003fb4 <start_COOL_task+0x17c>
 8003e78:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8003fb4 <start_COOL_task+0x17c>
 8003e7c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003e80:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fd ffae 	bl	8001de6 <PID_initialize>
			0,			// Integral gain
			0,			// Differential gain
			20,			// Lower PID output bound
			100			// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8003e8a:	484b      	ldr	r0, [pc, #300]	; (8003fb8 <start_COOL_task+0x180>)
 8003e8c:	f7fd fe4c 	bl	8001b28 <FAN_initialize>

	double *cell_temperatures;
	double max_cell_temperature;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8003e90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e92:	f7fc fb29 	bl	80004e8 <__aeabi_ui2d>
 8003e96:	4604      	mov	r4, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fb44 	bl	800052c <__aeabi_f2d>
 8003ea4:	a33e      	add	r3, pc, #248	; (adr r3, 8003fa0 <start_COOL_task+0x168>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc fb97 	bl	80005dc <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc f9db 	bl	8000270 <__adddf3>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7fc fe63 	bl	8000b8c <__aeabi_d2uiz>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
	osDelayUntil(next_tick);
 8003eca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ecc:	f012 ff2a 	bl	8016d24 <osDelayUntil>

	__wait_for_data(WAIT_FOR_CELL_TEMPERATURES);
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f7ff f8d1 	bl	8003078 <__wait_for_data>

	for (;;) {
		/* Enter periodic behaviour */

		/* If the cell temperatures are received one may input them into the PID */
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <start_COOL_task+0x184>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f107 010c 	add.w	r1, r7, #12
 8003ede:	2200      	movs	r2, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f013 fc5f 	bl	80177a4 <xQueuePeek>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d04f      	beq.n	8003f8c <start_COOL_task+0x154>
			/* Calculate the maximum cell temperature */
			max_cell_temperature = 0;
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8003ef8:	2300      	movs	r3, #0
 8003efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003efc:	e010      	b.n	8003f20 <start_COOL_task+0xe8>
				max_cell_temperature += cell_temperatures[i];
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f0e:	f7fc f9af 	bl	8000270 <__adddf3>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int i = 0; i < 126; i++) {
 8003f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f22:	2b7d      	cmp	r3, #125	; 0x7d
 8003f24:	ddeb      	ble.n	8003efe <start_COOL_task+0xc6>
			}
			max_cell_temperature /= 126;
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <start_COOL_task+0x188>)
 8003f2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f30:	f7fc fc7e 	bl	8000830 <__aeabi_ddiv>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			/* Progress the PID and set the fan duty cycle accordingly */
			PID_progress(&PID, max_cell_temperature);
 8003f3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f40:	f7fc fe44 	bl	8000bcc <__aeabi_d2f>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f107 031c 	add.w	r3, r7, #28
 8003f4a:	ee00 2a10 	vmov	s0, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd feda 	bl	8001d08 <PID_progress>
			FAN_duty_cycle(&htim1, PID.output);
 8003f54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f58:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5c:	4816      	ldr	r0, [pc, #88]	; (8003fb8 <start_COOL_task+0x180>)
 8003f5e:	f7fd fe0d 	bl	8001b7c <FAN_duty_cycle>

			pPID.duty_cycle = PID.output;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc fae1 	bl	800052c <__aeabi_f2d>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
			xQueueOverwrite(PID_queue, &pPID);
 8003f72:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <start_COOL_task+0x18c>)
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	f107 0110 	add.w	r1, r7, #16
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f013 f92b 	bl	80171d8 <xQueueGenericSend>
		}

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 8003f82:	e003      	b.n	8003f8c <start_COOL_task+0x154>
			next_tick += tick_increment;
 8003f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f88:	4413      	add	r3, r2
 8003f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (next_tick < osKernelGetTickCount()) {
 8003f8c:	f012 fe08 	bl	8016ba0 <osKernelGetTickCount>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d3f5      	bcc.n	8003f84 <start_COOL_task+0x14c>
		}
		osDelayUntil(next_tick);
 8003f98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f9a:	f012 fec3 	bl	8016d24 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &cell_temperatures, 0)) {
 8003f9e:	e79a      	b.n	8003ed6 <start_COOL_task+0x9e>
 8003fa0:	aaaaaaab 	.word	0xaaaaaaab
 8003fa4:	408a0aaa 	.word	0x408a0aaa
 8003fa8:	2001b784 	.word	0x2001b784
 8003fac:	3dcccccd 	.word	0x3dcccccd
 8003fb0:	42c80000 	.word	0x42c80000
 8003fb4:	00000000 	.word	0x00000000
 8003fb8:	2001c020 	.word	0x2001c020
 8003fbc:	2001b5dc 	.word	0x2001b5dc
 8003fc0:	405f8000 	.word	0x405f8000
 8003fc4:	2001b5e4 	.word	0x2001b5e4

08003fc8 <start_event_handler_task>:
	}
}
void start_event_handler_task(void *argument) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	__wait_for_data(WAIT_FOR_ALL);
 8003fd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003fd4:	f7ff f850 	bl	8003078 <__wait_for_data>
	error_t error;

	for (;;) {
		/* Always unlatch the errors after this time has ended
		 * -- this will of course not affect the actual XXX_error_latched signal */
		set_ams_error_ext(0);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f000 fa41 	bl	8004460 <set_ams_error_ext>
		set_imd_error_ext(0);
 8003fde:	2000      	movs	r0, #0
 8003fe0:	f000 fa5e 	bl	80044a0 <set_imd_error_ext>
		/* Wait forever for an error to be raised */
		if (xQueueReceive(error_queue, &error, portMAX_DELAY)) {
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <start_event_handler_task+0x60>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f107 010f 	add.w	r1, r7, #15
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f013 fac7 	bl	8017584 <xQueueReceive>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00f      	beq.n	800401c <start_event_handler_task+0x54>
			switch (error) {
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d103      	bne.n	800400a <start_event_handler_task+0x42>
			case ERROR_IMD:
				set_imd_error_ext(1);
 8004002:	2001      	movs	r0, #1
 8004004:	f000 fa4c 	bl	80044a0 <set_imd_error_ext>
				break;
 8004008:	e003      	b.n	8004012 <start_event_handler_task+0x4a>
			default:
				set_ams_error_ext(1);
 800400a:	2001      	movs	r0, #1
 800400c:	f000 fa28 	bl	8004460 <set_ams_error_ext>
				break;
 8004010:	bf00      	nop
			}
#ifdef STREAM_DATA
			SEGGER_SYSVIEW_PrintfHost("error %i", error);
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	4619      	mov	r1, r3
 8004016:	4805      	ldr	r0, [pc, #20]	; (800402c <start_event_handler_task+0x64>)
 8004018:	f017 f944 	bl	801b2a4 <SEGGER_SYSVIEW_PrintfHost>
#endif
		}

		/* Latch the ams_error for 500 ms */
		osDelay(0.500 * TICK2HZ);
 800401c:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8004020:	f012 fe65 	bl	8016cee <osDelay>
		set_ams_error_ext(0);
 8004024:	e7d8      	b.n	8003fd8 <start_event_handler_task+0x10>
 8004026:	bf00      	nop
 8004028:	2001b5d0 	.word	0x2001b5d0
 800402c:	0801c190 	.word	0x0801c190

08004030 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <start_IWDG_task+0xa8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <start_IWDG_task+0xac>)
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc fa73 	bl	800052c <__aeabi_f2d>
 8004046:	a322      	add	r3, pc, #136	; (adr r3, 80040d0 <start_IWDG_task+0xa0>)
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f7fc fac6 	bl	80005dc <__aeabi_dmul>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f7fc fd98 	bl	8000b8c <__aeabi_d2uiz>
 800405c:	4603      	mov	r3, r0
 800405e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7fc fa41 	bl	80004e8 <__aeabi_ui2d>
 8004066:	4604      	mov	r4, r0
 8004068:	460d      	mov	r5, r1
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fa5c 	bl	800052c <__aeabi_f2d>
 8004074:	a316      	add	r3, pc, #88	; (adr r3, 80040d0 <start_IWDG_task+0xa0>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc faaf 	bl	80005dc <__aeabi_dmul>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4620      	mov	r0, r4
 8004084:	4629      	mov	r1, r5
 8004086:	f7fc f8f3 	bl	8000270 <__adddf3>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f7fc fd7b 	bl	8000b8c <__aeabi_d2uiz>
 8004096:	4603      	mov	r3, r0
 8004098:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f012 fe42 	bl	8016d24 <osDelayUntil>

	__wait_for_data(WAIT_FOR_ALL);
 80040a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80040a4:	f7fe ffe8 	bl	8003078 <__wait_for_data>
	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 80040a8:	480d      	ldr	r0, [pc, #52]	; (80040e0 <start_IWDG_task+0xb0>)
 80040aa:	f00f fca4 	bl	80139f6 <HAL_IWDG_Refresh>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80040ae:	e003      	b.n	80040b8 <start_IWDG_task+0x88>
			next_tick += tick_increment;
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4413      	add	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
		while (next_tick < osKernelGetTickCount()) {
 80040b8:	f012 fd72 	bl	8016ba0 <osKernelGetTickCount>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d3f5      	bcc.n	80040b0 <start_IWDG_task+0x80>
		}
		osDelayUntil(next_tick);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f012 fe2d 	bl	8016d24 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 80040ca:	e7ed      	b.n	80040a8 <start_IWDG_task+0x78>
 80040cc:	f3af 8000 	nop.w
 80040d0:	aaaaaaab 	.word	0xaaaaaaab
 80040d4:	408a0aaa 	.word	0x408a0aaa
 80040d8:	2001b784 	.word	0x2001b784
 80040dc:	3dcccccd 	.word	0x3dcccccd
 80040e0:	2001b750 	.word	0x2001b750
 80040e4:	00000000 	.word	0x00000000

080040e8 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 80040e8:	b5b0      	push	{r4, r5, r7, lr}
 80040ea:	b08e      	sub	sp, #56	; 0x38
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80040f0:	4b89      	ldr	r3, [pc, #548]	; (8004318 <start_SIM_task+0x230>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 80040f6:	4b89      	ldr	r3, [pc, #548]	; (800431c <start_SIM_task+0x234>)
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fa17 	bl	800052c <__aeabi_f2d>
 80040fe:	a384      	add	r3, pc, #528	; (adr r3, 8004310 <start_SIM_task+0x228>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f7fc fa6a 	bl	80005dc <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f7fc fd3c 	bl	8000b8c <__aeabi_d2uiz>
 8004114:	4603      	mov	r3, r0
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Make task-specific structures */
	SIM0_initialize();
 8004118:	f004 f9a2 	bl	8008460 <SIM0_initialize>
	charger_t charger;
	uint16_t k = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	867b      	strh	r3, [r7, #50]	; 0x32

	uint8_t SC = 1;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t start_drive = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
	uint8_t start_charge = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	73bb      	strb	r3, [r7, #14]
	uint8_t start_balance = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	737b      	strb	r3, [r7, #13]

	SIM0_P.Ts = SIM_task_info.periodicity;
 8004132:	4b7a      	ldr	r3, [pc, #488]	; (800431c <start_SIM_task+0x234>)
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc f9f9 	bl	800052c <__aeabi_f2d>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4978      	ldr	r1, [pc, #480]	; (8004320 <start_SIM_task+0x238>)
 8004140:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = SC;
 8004144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc f9cd 	bl	80004e8 <__aeabi_ui2d>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4974      	ldr	r1, [pc, #464]	; (8004324 <start_SIM_task+0x23c>)
 8004154:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = start_drive ^ start_balance;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	7b7b      	ldrb	r3, [r7, #13]
 800415c:	4053      	eors	r3, r2
 800415e:	b2db      	uxtb	r3, r3
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f9d1 	bl	8000508 <__aeabi_i2d>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	496e      	ldr	r1, [pc, #440]	; (8004324 <start_SIM_task+0x23c>)
 800416c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = start_charge ^ start_balance;
 8004170:	7bba      	ldrb	r2, [r7, #14]
 8004172:	7b7b      	ldrb	r3, [r7, #13]
 8004174:	4053      	eors	r3, r2
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc f9c5 	bl	8000508 <__aeabi_i2d>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4968      	ldr	r1, [pc, #416]	; (8004324 <start_SIM_task+0x23c>)
 8004184:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -10;
 8004188:	4b66      	ldr	r3, [pc, #408]	; (8004324 <start_SIM_task+0x23c>)
 800418a:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b65      	ldr	r3, [pc, #404]	; (8004328 <start_SIM_task+0x240>)
 8004194:	e9c1 2300 	strd	r2, r3, [r1]

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 8004198:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800419a:	f7fc f9a5 	bl	80004e8 <__aeabi_ui2d>
 800419e:	4604      	mov	r4, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f9c0 	bl	800052c <__aeabi_f2d>
 80041ac:	a358      	add	r3, pc, #352	; (adr r3, 8004310 <start_SIM_task+0x228>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc fa13 	bl	80005dc <__aeabi_dmul>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4620      	mov	r0, r4
 80041bc:	4629      	mov	r1, r5
 80041be:	f7fc f857 	bl	8000270 <__adddf3>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7fc fcdf 	bl	8000b8c <__aeabi_d2uiz>
 80041ce:	4603      	mov	r3, r0
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
	osDelayUntil(next_tick);
 80041d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041d4:	f012 fda6 	bl	8016d24 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (k == 10) {
 80041d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041da:	2b0a      	cmp	r3, #10
 80041dc:	d107      	bne.n	80041ee <start_SIM_task+0x106>
			xQueueOverwrite(start_drive_queue, &start_drive);
 80041de:	4b53      	ldr	r3, [pc, #332]	; (800432c <start_SIM_task+0x244>)
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f107 010f 	add.w	r1, r7, #15
 80041e6:	2302      	movs	r3, #2
 80041e8:	2200      	movs	r2, #0
 80041ea:	f012 fff5 	bl	80171d8 <xQueueGenericSend>
		}

		if (k == 40) {
 80041ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041f0:	2b28      	cmp	r3, #40	; 0x28
 80041f2:	d106      	bne.n	8004202 <start_SIM_task+0x11a>
			SIM0_U.SC = 0;
 80041f4:	494b      	ldr	r1, [pc, #300]	; (8004324 <start_SIM_task+0x23c>)
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		if (k == 60) {
 8004202:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004204:	2b3c      	cmp	r3, #60	; 0x3c
 8004206:	d105      	bne.n	8004214 <start_SIM_task+0x12c>
			SIM0_U.SC = 1;
 8004208:	4946      	ldr	r1, [pc, #280]	; (8004324 <start_SIM_task+0x23c>)
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	4b48      	ldr	r3, [pc, #288]	; (8004330 <start_SIM_task+0x248>)
 8004210:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
		if (k == 180) {
 8004214:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004216:	2bb4      	cmp	r3, #180	; 0xb4
 8004218:	d105      	bne.n	8004226 <start_SIM_task+0x13e>
			SIM0_U.AMS_error_reset = 1;
 800421a:	4942      	ldr	r1, [pc, #264]	; (8004324 <start_SIM_task+0x23c>)
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <start_SIM_task+0x248>)
 8004222:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		if (k == 200) {
 8004226:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004228:	2bc8      	cmp	r3, #200	; 0xc8
 800422a:	d11e      	bne.n	800426a <start_SIM_task+0x182>
			SIM0_U.AMS_error_reset = 0;
 800422c:	493d      	ldr	r1, [pc, #244]	; (8004324 <start_SIM_task+0x23c>)
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9c1 2302 	strd	r2, r3, [r1, #8]
			xQueueOverwrite(start_drive_queue, &start_drive);
 800423a:	4b3c      	ldr	r3, [pc, #240]	; (800432c <start_SIM_task+0x244>)
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	f107 010f 	add.w	r1, r7, #15
 8004242:	2302      	movs	r3, #2
 8004244:	2200      	movs	r2, #0
 8004246:	f012 ffc7 	bl	80171d8 <xQueueGenericSend>
			xQueueOverwrite(start_charge_queue, &start_charge);
 800424a:	4b3a      	ldr	r3, [pc, #232]	; (8004334 <start_SIM_task+0x24c>)
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	f107 010e 	add.w	r1, r7, #14
 8004252:	2302      	movs	r3, #2
 8004254:	2200      	movs	r2, #0
 8004256:	f012 ffbf 	bl	80171d8 <xQueueGenericSend>
			xQueueOverwrite(start_balance_queue, &start_balance);
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <start_SIM_task+0x250>)
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	f107 010d 	add.w	r1, r7, #13
 8004262:	2302      	movs	r3, #2
 8004264:	2200      	movs	r2, #0
 8004266:	f012 ffb7 	bl	80171d8 <xQueueGenericSend>
		}
		if (k == 300) {
 800426a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800426c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004270:	d109      	bne.n	8004286 <start_SIM_task+0x19e>
			start_drive = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
			xQueueOverwrite(start_drive_queue, &start_drive);
 8004276:	4b2d      	ldr	r3, [pc, #180]	; (800432c <start_SIM_task+0x244>)
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	f107 010f 	add.w	r1, r7, #15
 800427e:	2302      	movs	r3, #2
 8004280:	2200      	movs	r2, #0
 8004282:	f012 ffa9 	bl	80171d8 <xQueueGenericSend>
		}
		k++;
 8004286:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004288:	3301      	adds	r3, #1
 800428a:	867b      	strh	r3, [r7, #50]	; 0x32

		xQueuePeek(charger_queue, &charger, 0);
 800428c:	4b2b      	ldr	r3, [pc, #172]	; (800433c <start_SIM_task+0x254>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f107 0110 	add.w	r1, r7, #16
 8004294:	2200      	movs	r2, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f013 fa84 	bl	80177a4 <xQueuePeek>
		SIM0_U.CurrentLimit = charger.charger_current_limit;
 800429c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a0:	4920      	ldr	r1, [pc, #128]	; (8004324 <start_SIM_task+0x23c>)
 80042a2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		SIM0_U.VoltageLimit = charger.charger_voltage_limit;
 80042a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042aa:	491e      	ldr	r1, [pc, #120]	; (8004324 <start_SIM_task+0x23c>)
 80042ac:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		SIM0_U.EnableCharge = charger.enable_charger;
 80042b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc f917 	bl	80004e8 <__aeabi_ui2d>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4919      	ldr	r1, [pc, #100]	; (8004324 <start_SIM_task+0x23c>)
 80042c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		SIM0_step();
 80042c4:	f002 ffb8 	bl	8007238 <SIM0_step>

		xQueueOverwrite(accumulator_voltage_queue, &SIM0_Y.accumulator_voltage);
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <start_SIM_task+0x258>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	2302      	movs	r3, #2
 80042ce:	2200      	movs	r2, #0
 80042d0:	491c      	ldr	r1, [pc, #112]	; (8004344 <start_SIM_task+0x25c>)
 80042d2:	f012 ff81 	bl	80171d8 <xQueueGenericSend>
		xQueueOverwrite(vehicle_voltage_queue, &SIM0_Y.vehicle_voltage);
 80042d6:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <start_SIM_task+0x260>)
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	2302      	movs	r3, #2
 80042dc:	2200      	movs	r2, #0
 80042de:	491b      	ldr	r1, [pc, #108]	; (800434c <start_SIM_task+0x264>)
 80042e0:	f012 ff7a 	bl	80171d8 <xQueueGenericSend>
		xQueueOverwrite(accumulator_current_queue, &SIM0_Y.current);
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <start_SIM_task+0x268>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	2302      	movs	r3, #2
 80042ea:	2200      	movs	r2, #0
 80042ec:	4919      	ldr	r1, [pc, #100]	; (8004354 <start_SIM_task+0x26c>)
 80042ee:	f012 ff73 	bl	80171d8 <xQueueGenericSend>

		/* Wait until next period */
		while (next_tick < osKernelGetTickCount()) {
 80042f2:	e003      	b.n	80042fc <start_SIM_task+0x214>
			next_tick += tick_increment;
 80042f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	4413      	add	r3, r2
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
		while (next_tick < osKernelGetTickCount()) {
 80042fc:	f012 fc50 	bl	8016ba0 <osKernelGetTickCount>
 8004300:	4602      	mov	r2, r0
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	4293      	cmp	r3, r2
 8004306:	d3f5      	bcc.n	80042f4 <start_SIM_task+0x20c>
		}
		osDelayUntil(next_tick);
 8004308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800430a:	f012 fd0b 	bl	8016d24 <osDelayUntil>
		if (k == 10) {
 800430e:	e763      	b.n	80041d8 <start_SIM_task+0xf0>
 8004310:	aaaaaaab 	.word	0xaaaaaaab
 8004314:	408a0aaa 	.word	0x408a0aaa
 8004318:	2001b784 	.word	0x2001b784
 800431c:	3dcccccd 	.word	0x3dcccccd
 8004320:	20000360 	.word	0x20000360
 8004324:	2001e788 	.word	0x2001e788
 8004328:	c0240000 	.word	0xc0240000
 800432c:	2001b5c4 	.word	0x2001b5c4
 8004330:	3ff00000 	.word	0x3ff00000
 8004334:	2001b5d8 	.word	0x2001b5d8
 8004338:	2001b5f4 	.word	0x2001b5f4
 800433c:	2001b5e8 	.word	0x2001b5e8
 8004340:	2001b5f0 	.word	0x2001b5f0
 8004344:	2001d9c8 	.word	0x2001d9c8
 8004348:	2001b5e0 	.word	0x2001b5e0
 800434c:	2001d9b8 	.word	0x2001d9b8
 8004350:	2001b5fc 	.word	0x2001b5fc
 8004354:	2001d9c0 	.word	0x2001d9c0

08004358 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800436a:	f00d fb6b 	bl	8011a44 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40000c00 	.word	0x40000c00

0800437c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004380:	b672      	cpsid	i
}
 8004382:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004384:	e7fe      	b.n	8004384 <Error_Handler+0x8>
	...

08004388 <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirPlus = closed;
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc f8a7 	bl	80004e8 <__aeabi_ui2d>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4903      	ldr	r1, [pc, #12]	; (80043ac <set_air_plus_ext+0x24>)
 80043a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
#elif
	HAL_GPIO_WritePin(enable_AIR_plus_Port, enable_AIR_plus_GPIO_Pin, closed);
#endif
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	2001e788 	.word	0x2001e788

080043b0 <get_air_plus_ext>:

uint8_t get_air_plus_ext() {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_plus_closed;
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <get_air_plus_ext+0x1c>)
 80043b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	f7fc fbe5 	bl	8000b8c <__aeabi_d2uiz>
 80043c2:	4603      	mov	r3, r0
 80043c4:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(AIR_plus_closed_Port, AIR_plus_closed_GPIO_Pin);
#endif
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2001d990 	.word	0x2001d990

080043d0 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnableAirMinus = closed;
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f883 	bl	80004e8 <__aeabi_ui2d>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4903      	ldr	r1, [pc, #12]	; (80043f4 <set_air_minus_ext+0x24>)
 80043e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
#elif
	HAL_GPIO_WritePin(enable_AIR_minus_Port, enable_AIR_minus_GPIO_Pin, closed);
#endif
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	2001e788 	.word	0x2001e788

080043f8 <get_air_minus_ext>:

uint8_t get_air_minus_ext() {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AIR_minus_closed;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <get_air_minus_ext+0x1c>)
 80043fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	f7fc fbc1 	bl	8000b8c <__aeabi_d2uiz>
 800440a:	4603      	mov	r3, r0
 800440c:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(AIR_minus_closed_Port, AIR_minus_closed_GPIO_Pin);
#endif
}
 800440e:	4618      	mov	r0, r3
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	2001d990 	.word	0x2001d990

08004418 <set_precharge_ext>:

void set_precharge_ext(uint8_t closed) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.EnablePrecharge = closed;
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fc f85f 	bl	80004e8 <__aeabi_ui2d>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4903      	ldr	r1, [pc, #12]	; (800443c <set_precharge_ext+0x24>)
 8004430:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#elif
	HAL_GPIO_WritePin(enable_precharge_Port, enable_precharge_GPIO_Pin, closed);
#endif
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2001e788 	.word	0x2001e788

08004440 <get_precharge_ext>:

uint8_t get_precharge_ext() {
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.precharge_closed;
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <get_precharge_ext+0x1c>)
 8004446:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f7fc fb9d 	bl	8000b8c <__aeabi_d2uiz>
 8004452:	4603      	mov	r3, r0
 8004454:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(precharge_closed_Port, precharge_closed_GPIO_Pin);
#endif

}
 8004456:	4618      	mov	r0, r3
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2001d990 	.word	0x2001d990

08004460 <set_ams_error_ext>:

void set_ams_error_ext(uint8_t raise_error) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.AMS_error = raise_error;
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc f83b 	bl	80004e8 <__aeabi_ui2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4903      	ldr	r1, [pc, #12]	; (8004484 <set_ams_error_ext+0x24>)
 8004478:	e9c1 2300 	strd	r2, r3, [r1]
#elif
	HAL_GPIO_WritePin(AMS_error_Port, AMS_error_GPIO_Pin, closed);
#endif
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2001e788 	.word	0x2001e788

08004488 <get_ams_error_latched_ext>:

uint8_t get_ams_error_latched_ext() {
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.AMS_error_latched;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <get_ams_error_latched_ext+0x14>)
 800448e:	781b      	ldrb	r3, [r3, #0]
#elif
	return HAL_GPIO_ReadPin(AMS_error_latched_Port, AMS_error_latched_GPIO_Pin);
#endif
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2001d990 	.word	0x2001d990

080044a0 <set_imd_error_ext>:

void set_imd_error_ext(uint8_t raise_error) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
#ifdef SIMULATION
	SIM0_U.IMD_error = raise_error;
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc f81b 	bl	80004e8 <__aeabi_ui2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4903      	ldr	r1, [pc, #12]	; (80044c4 <set_imd_error_ext+0x24>)
 80044b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
#elif
	return HAL_GPIO_ReadPin(IMD_error_Port, IMD_error_GPIO_Pin);
#endif
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	2001e788 	.word	0x2001e788

080044c8 <get_imd_error_latched_ext>:

uint8_t get_imd_error_latched_ext() {
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.IMD_error_latched;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <get_imd_error_latched_ext+0x14>)
 80044ce:	785b      	ldrb	r3, [r3, #1]
#elif
	return HAL_GPIO_ReadPin(IMD_error_latched_Port, IMD_error_latched_GPIO_Pin);
#endif
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2001d990 	.word	0x2001d990

080044e0 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext() {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return SIM0_Y.SC_probe;
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <get_sc_probe_ext+0x1c>)
 80044e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fb4d 	bl	8000b8c <__aeabi_d2uiz>
 80044f2:	4603      	mov	r3, r0
 80044f4:	b2db      	uxtb	r3, r3
#elif
	return HAL_GPIO_ReadPin(SC_probe_latched_Port, SC_probe_GPIO_Pin);
#endif
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	2001d990 	.word	0x2001d990

08004500 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext() {
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	return 1;
 8004504:	2301      	movs	r3, #1
#elif
	return HAL_GPIO_ReadPin(IMD_ok_Port, IMD_ok_GPIO_Pin);
#endif
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <set_balance_ext>:


void set_balance_ext(uint8_t closed, uint8_t index, void *settings) {
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	603a      	str	r2, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
 800451c:	460b      	mov	r3, r1
 800451e:	71bb      	strb	r3, [r7, #6]
#ifdef SIMULATION
	SIM0_U.BalanceOut[index] = closed;
 8004520:	79bc      	ldrb	r4, [r7, #6]
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	4618      	mov	r0, r3
 8004526:	f7fb ffdf 	bl	80004e8 <__aeabi_ui2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4805      	ldr	r0, [pc, #20]	; (8004544 <set_balance_ext+0x34>)
 8004530:	f104 010d 	add.w	r1, r4, #13
 8004534:	00c9      	lsls	r1, r1, #3
 8004536:	4401      	add	r1, r0
 8004538:	e9c1 2300 	strd	r2, r3, [r1]
#elif

#endif

}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}
 8004544:	2001e788 	.word	0x2001e788

08004548 <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8004554:	2310      	movs	r3, #16
 8004556:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8004558:	2300      	movs	r3, #0
 800455a:	737b      	strb	r3, [r7, #13]
 800455c:	e018      	b.n	8004590 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 800455e:	89fb      	ldrh	r3, [r7, #14]
 8004560:	09db      	lsrs	r3, r3, #7
 8004562:	b29a      	uxth	r2, r3
 8004564:	7b7b      	ldrb	r3, [r7, #13]
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	440b      	add	r3, r1
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	4053      	eors	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	b29a      	uxth	r2, r3
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	490b      	ldr	r1, [pc, #44]	; (80045ac <pec15_calc+0x64>)
 8004580:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004584:	b29b      	uxth	r3, r3
 8004586:	4053      	eors	r3, r2
 8004588:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 800458a:	7b7b      	ldrb	r3, [r7, #13]
 800458c:	3301      	adds	r3, #1
 800458e:	737b      	strb	r3, [r7, #13]
 8004590:	7b7a      	ldrb	r2, [r7, #13]
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	429a      	cmp	r2, r3
 8004596:	d3e2      	bcc.n	800455e <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	0801c3bc 	.word	0x0801c3bc

080045b0 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <initialize_LTC+0x1c>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6013      	str	r3, [r2, #0]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2001b79c 	.word	0x2001b79c

080045d0 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2110      	movs	r1, #16
 80045d8:	4802      	ldr	r0, [pc, #8]	; (80045e4 <LTC_CS_select+0x14>)
 80045da:	f00f f9f3 	bl	80139c4 <HAL_GPIO_WritePin>
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40020800 	.word	0x40020800

080045e8 <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 80045ec:	2201      	movs	r2, #1
 80045ee:	2110      	movs	r1, #16
 80045f0:	4802      	ldr	r0, [pc, #8]	; (80045fc <LTC_CS_deselect+0x14>)
 80045f2:	f00f f9e7 	bl	80139c4 <HAL_GPIO_WritePin>
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40020800 	.word	0x40020800

08004600 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 8004606:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 800460a:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b29b      	uxth	r3, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <LTC_wake+0x60>)
 8004616:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <LTC_wake+0x60>)
 800461e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004620:	490f      	ldr	r1, [pc, #60]	; (8004660 <LTC_wake+0x60>)
 8004622:	2002      	movs	r0, #2
 8004624:	f7ff ff90 	bl	8004548 <pec15_calc>
 8004628:	4603      	mov	r3, r0
 800462a:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 800462c:	88bb      	ldrh	r3, [r7, #4]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	b29b      	uxth	r3, r3
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <LTC_wake+0x60>)
 8004636:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8004638:	88bb      	ldrh	r3, [r7, #4]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <LTC_wake+0x60>)
 800463e:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8004640:	f7ff ffc6 	bl	80045d0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <LTC_wake+0x64>)
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	2204      	movs	r2, #4
 800464c:	4904      	ldr	r1, [pc, #16]	; (8004660 <LTC_wake+0x60>)
 800464e:	f00f fed2 	bl	80143f6 <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8004652:	f7ff ffc9 	bl	80045e8 <LTC_CS_deselect>

	return 1;
 8004656:	2301      	movs	r3, #1
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	2001b7b0 	.word	0x2001b7b0
 8004664:	2001b79c 	.word	0x2001b79c

08004668 <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	460a      	mov	r2, r1
 8004672:	71fb      	strb	r3, [r7, #7]
 8004674:	4613      	mov	r3, r2
 8004676:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <LTC_command+0x24>
		if (!LTC_wake()) {
 800467e:	f7ff ffbf 	bl	8004600 <LTC_wake>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <LTC_command+0x24>
			return 0;
 8004688:	2300      	movs	r3, #0
 800468a:	e025      	b.n	80046d8 <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 800468c:	88bb      	ldrh	r3, [r7, #4]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b29b      	uxth	r3, r3
 8004692:	b2da      	uxtb	r2, r3
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <LTC_command+0x78>)
 8004696:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8004698:	88bb      	ldrh	r3, [r7, #4]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <LTC_command+0x78>)
 800469e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 80046a0:	490f      	ldr	r1, [pc, #60]	; (80046e0 <LTC_command+0x78>)
 80046a2:	2002      	movs	r0, #2
 80046a4:	f7ff ff50 	bl	8004548 <pec15_calc>
 80046a8:	4603      	mov	r3, r0
 80046aa:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <LTC_command+0x78>)
 80046b6:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 80046b8:	89fb      	ldrh	r3, [r7, #14]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <LTC_command+0x78>)
 80046be:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 80046c0:	f7ff ff86 	bl	80045d0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <LTC_command+0x7c>)
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	2300      	movs	r3, #0
 80046ca:	2204      	movs	r2, #4
 80046cc:	4904      	ldr	r1, [pc, #16]	; (80046e0 <LTC_command+0x78>)
 80046ce:	f00f fe92 	bl	80143f6 <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80046d2:	f7ff ff89 	bl	80045e8 <LTC_CS_deselect>

	return 1;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	2001b7b0 	.word	0x2001b7b0
 80046e4:	2001b79c 	.word	0x2001b79c

080046e8 <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	460a      	mov	r2, r1
 80046f2:	71fb      	strb	r3, [r7, #7]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <LTC_read_command+0x24>
		if (!LTC_wake()) {
 80046fe:	f7ff ff7f 	bl	8004600 <LTC_wake>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <LTC_read_command+0x24>
			return 0;
 8004708:	2300      	movs	r3, #0
 800470a:	e042      	b.n	8004792 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 800470c:	88bb      	ldrh	r3, [r7, #4]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	b29b      	uxth	r3, r3
 8004712:	b2da      	uxtb	r2, r3
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <LTC_read_command+0xb4>)
 8004716:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8004718:	88bb      	ldrh	r3, [r7, #4]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <LTC_read_command+0xb4>)
 800471e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004720:	491e      	ldr	r1, [pc, #120]	; (800479c <LTC_read_command+0xb4>)
 8004722:	2002      	movs	r0, #2
 8004724:	f7ff ff10 	bl	8004548 <pec15_calc>
 8004728:	4603      	mov	r3, r0
 800472a:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 800472c:	89fb      	ldrh	r3, [r7, #14]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	b29b      	uxth	r3, r3
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <LTC_read_command+0xb4>)
 8004736:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <LTC_read_command+0xb4>)
 800473e:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8004740:	f7ff ff46 	bl	80045d0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8004744:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <LTC_read_command+0xb8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	2300      	movs	r3, #0
 800474a:	2204      	movs	r2, #4
 800474c:	4913      	ldr	r1, [pc, #76]	; (800479c <LTC_read_command+0xb4>)
 800474e:	f00f fe52 	bl	80143f6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <LTC_read_command+0xb8>)
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	2300      	movs	r3, #0
 8004758:	220a      	movs	r2, #10
 800475a:	4912      	ldr	r1, [pc, #72]	; (80047a4 <LTC_read_command+0xbc>)
 800475c:	f00f ff87 	bl	801466e <HAL_SPI_Receive>
	LTC_CS_deselect();
 8004760:	f7ff ff42 	bl	80045e8 <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8004764:	490f      	ldr	r1, [pc, #60]	; (80047a4 <LTC_read_command+0xbc>)
 8004766:	2008      	movs	r0, #8
 8004768:	f7ff feee 	bl	8004548 <pec15_calc>
 800476c:	4603      	mov	r3, r0
 800476e:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8004770:	89fb      	ldrh	r3, [r7, #14]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	b29b      	uxth	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <LTC_read_command+0xbc>)
 800477a:	7a12      	ldrb	r2, [r2, #8]
 800477c:	4293      	cmp	r3, r2
 800477e:	d005      	beq.n	800478c <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <LTC_read_command+0xbc>)
 8004786:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <LTC_read_command+0xa8>
		return 0;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <LTC_read_command+0xaa>
	}

	return 1;
 8004790:	2301      	movs	r3, #1
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2001b7b0 	.word	0x2001b7b0
 80047a0:	2001b79c 	.word	0x2001b79c
 80047a4:	2001b7a4 	.word	0x2001b7a4

080047a8 <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_data_valid[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
	int p, k, i, j, command;
	uint16_t all_read; /* LTC_data_valid[n] might only be high if slave n was read (PEC correct, among other things) */
	uint16_t all_zeros; /* LTC_data_valid[n] might only be high if the bits are not all zero, as this would constitute a zero voltage reference (or zeroed/floating cell voltages) */
	uint16_t all_ones; /* LTC_data_valid[n] might only be high if the bits are not all ones, as this is indicative of the message being corrupted */

	LTC_data_valid = 0;
 80047b2:	4b42      	ldr	r3, [pc, #264]	; (80048bc <LTC_acquire_data+0x114>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 80047b8:	f44f 735c 	mov.w	r3, #880	; 0x370
 80047bc:	613b      	str	r3, [r7, #16]

	LTC_command(wake, command);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff ff4e 	bl	8004668 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80047cc:	2002      	movs	r0, #2
 80047ce:	f00d f959 	bl	8011a84 <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 80047d2:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80047d6:	613b      	str	r3, [r7, #16]

	LTC_command(0, command);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4619      	mov	r1, r3
 80047de:	2000      	movs	r0, #0
 80047e0:	f7ff ff42 	bl	8004668 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80047e4:	2002      	movs	r0, #2
 80047e6:	f00d f94d 	bl	8011a84 <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24

	for (k = 0; k < 12; k++) { // 12 segments
 80047ee:	2300      	movs	r3, #0
 80047f0:	623b      	str	r3, [r7, #32]
 80047f2:	e056      	b.n	80048a2 <LTC_acquire_data+0xfa>
		all_read = 1;
 80047f4:	2301      	movs	r3, #1
 80047f6:	82fb      	strh	r3, [r7, #22]
		all_zeros = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	81fb      	strh	r3, [r7, #14]
		all_ones = 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	81bb      	strh	r3, [r7, #12]

		for (i = 0; i < 6; i++) {
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	e038      	b.n	8004878 <LTC_acquire_data+0xd0>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	02db      	lsls	r3, r3, #11
 800480a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	613b      	str	r3, [r7, #16]
			command += 2 * i;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

			all_read &= LTC_read_command(0, command);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	b29b      	uxth	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	2000      	movs	r0, #0
 8004826:	f7ff ff5f 	bl	80046e8 <LTC_read_command>
 800482a:	4603      	mov	r3, r0
 800482c:	b29a      	uxth	r2, r3
 800482e:	8afb      	ldrh	r3, [r7, #22]
 8004830:	4013      	ands	r3, r2
 8004832:	82fb      	strh	r3, [r7, #22]

			for (j = 0; j < 3; j++) {
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e018      	b.n	800486c <LTC_acquire_data+0xc4>
				LTC_data[p] = LTC_read_buffer[2 * j]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <LTC_acquire_data+0x118>)
 8004840:	5cd3      	ldrb	r3, [r2, r3]
 8004842:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	3301      	adds	r3, #1
 800484a:	491d      	ldr	r1, [pc, #116]	; (80048c0 <LTC_acquire_data+0x118>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	b21b      	sxth	r3, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	b21b      	sxth	r3, r3
 8004856:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 8004858:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <LTC_acquire_data+0x11c>)
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				//all_zeros &= (LTC_data[p] == 0);
				//all_ones &= (LTC_data[p] == -1);

				p++;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 3; j++) {
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	3301      	adds	r3, #1
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b02      	cmp	r3, #2
 8004870:	dde3      	ble.n	800483a <LTC_acquire_data+0x92>
		for (i = 0; i < 6; i++) {
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3301      	adds	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b05      	cmp	r3, #5
 800487c:	ddc3      	ble.n	8004806 <LTC_acquire_data+0x5e>
			}
		}

		LTC_data_valid = (all_read && !all_zeros && !all_ones);
 800487e:	8afb      	ldrh	r3, [r7, #22]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <LTC_acquire_data+0xec>
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <LTC_acquire_data+0xec>
 800488a:	89bb      	ldrh	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <LTC_acquire_data+0xec>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <LTC_acquire_data+0xee>
 8004894:	2300      	movs	r3, #0
 8004896:	b2da      	uxtb	r2, r3
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <LTC_acquire_data+0x114>)
 800489a:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < 12; k++) { // 12 segments
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	3301      	adds	r3, #1
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2b0b      	cmp	r3, #11
 80048a6:	dda5      	ble.n	80047f4 <LTC_acquire_data+0x4c>
	}

	LTC_make_voltages();
 80048a8:	f000 f80e 	bl	80048c8 <LTC_make_voltages>
	LTC_make_temperatures();
 80048ac:	f000 f854 	bl	8004958 <LTC_make_temperatures>

	return 1;
 80048b0:	2301      	movs	r3, #1
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3728      	adds	r7, #40	; 0x28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2001b7a0 	.word	0x2001b7a0
 80048c0:	2001b7a4 	.word	0x2001b7a4
 80048c4:	2001bba8 	.word	0x2001bba8

080048c8 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	p = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80048d2:	2300      	movs	r3, #0
 80048d4:	80fb      	strh	r3, [r7, #6]
 80048d6:	e02e      	b.n	8004936 <LTC_make_voltages+0x6e>
		K = cellstack_voltage_count(cellstack);
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f1c3 030b 	rsb	r3, r3, #11
 80048e4:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 80048e6:	2300      	movs	r3, #0
 80048e8:	80bb      	strh	r3, [r7, #4]
 80048ea:	e01d      	b.n	8004928 <LTC_make_voltages+0x60>
			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	461a      	mov	r2, r3
 80048f8:	88bb      	ldrh	r3, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <LTC_make_voltages+0x88>)
 80048fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fb fe00 	bl	8000508 <__aeabi_i2d>
 8004908:	887c      	ldrh	r4, [r7, #2]
 800490a:	a30f      	add	r3, pc, #60	; (adr r3, 8004948 <LTC_make_voltages+0x80>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fe64 	bl	80005dc <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	480e      	ldr	r0, [pc, #56]	; (8004954 <LTC_make_voltages+0x8c>)
 800491a:	00e1      	lsls	r1, r4, #3
 800491c:	4401      	add	r1, r0
 800491e:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 8004922:	88bb      	ldrh	r3, [r7, #4]
 8004924:	3301      	adds	r3, #1
 8004926:	80bb      	strh	r3, [r7, #4]
 8004928:	88ba      	ldrh	r2, [r7, #4]
 800492a:	883b      	ldrh	r3, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3dd      	bcc.n	80048ec <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	3301      	adds	r3, #1
 8004934:	80fb      	strh	r3, [r7, #6]
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b0b      	cmp	r3, #11
 800493a:	d9cd      	bls.n	80048d8 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 800493c:	2301      	movs	r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	eb1c432d 	.word	0xeb1c432d
 800494c:	3f1a36e2 	.word	0x3f1a36e2
 8004950:	2001bba8 	.word	0x2001bba8
 8004954:	2001b7b8 	.word	0x2001b7b8

08004958 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8004958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800495c:	b08d      	sub	sp, #52	; 0x34
 800495e:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	double beta = 3500;
 8004960:	a35f      	add	r3, pc, #380	; (adr r3, 8004ae0 <LTC_make_temperatures+0x188>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temp = 25 + 273.15;
 800496a:	a35f      	add	r3, pc, #380	; (adr r3, 8004ae8 <LTC_make_temperatures+0x190>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double R0 = 10000 * exp(-beta / temp);
 8004974:	6a38      	ldr	r0, [r7, #32]
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 800497c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004980:	f7fb ff56 	bl	8000830 <__aeabi_ddiv>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	ec43 2b17 	vmov	d7, r2, r3
 800498c:	eeb0 0a47 	vmov.f32	s0, s14
 8004990:	eef0 0a67 	vmov.f32	s1, s15
 8004994:	f016 fe7c 	bl	801b690 <exp>
 8004998:	ec51 0b10 	vmov	r0, r1, d0
 800499c:	a354      	add	r3, pc, #336	; (adr r3, 8004af0 <LTC_make_temperatures+0x198>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fe1b 	bl	80005dc <__aeabi_dmul>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double R = 10000;
 80049ae:	a350      	add	r3, pc, #320	; (adr r3, 8004af0 <LTC_make_temperatures+0x198>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	p = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	80fb      	strh	r3, [r7, #6]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80049bc:	2300      	movs	r3, #0
 80049be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049c0:	e07b      	b.n	8004aba <LTC_make_temperatures+0x162>
		K = 5;
 80049c2:	2305      	movs	r3, #5
 80049c4:	80bb      	strh	r3, [r7, #4]

		for (k = 0; k < K; k++) {
 80049c6:	2300      	movs	r3, #0
 80049c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049ca:	e06f      	b.n	8004aac <LTC_make_temperatures+0x154>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80049cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4413      	add	r3, r2
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	f103 020c 	add.w	r2, r3, #12
 80049da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049dc:	4413      	add	r3, r2
 80049de:	4a3e      	ldr	r2, [pc, #248]	; (8004ad8 <LTC_make_temperatures+0x180>)
 80049e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fb fd8f 	bl	8000508 <__aeabi_i2d>
 80049ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ee:	f7fb fdf5 	bl	80005dc <__aeabi_dmul>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	ec43 2b17 	vmov	d7, r2, r3
 80049fa:	eeb0 0a47 	vmov.f32	s0, s14
 80049fe:	eef0 0a67 	vmov.f32	s1, s15
 8004a02:	f016 fe95 	bl	801b730 <log>
 8004a06:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8004a0a:	693c      	ldr	r4, [r7, #16]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
											* (LTC_data[18 * cellstack + 12 + k]
 8004a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f103 020c 	add.w	r2, r3, #12
 8004a20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a22:	4413      	add	r3, r2
 8004a24:	4a2c      	ldr	r2, [pc, #176]	; (8004ad8 <LTC_make_temperatures+0x180>)
 8004a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2a:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8004a2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8004a36:	f103 020c 	add.w	r2, r3, #12
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8004a3e:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <LTC_make_temperatures+0x180>)
 8004a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a44:	1acb      	subs	r3, r1, r3
							- log(
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fb fd5e 	bl	8000508 <__aeabi_i2d>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4620      	mov	r0, r4
 8004a52:	4629      	mov	r1, r5
 8004a54:	f7fb fdc2 	bl	80005dc <__aeabi_dmul>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	ec43 2b17 	vmov	d7, r2, r3
 8004a60:	eeb0 0a47 	vmov.f32	s0, s14
 8004a64:	eef0 0a67 	vmov.f32	s1, s15
 8004a68:	f016 fe62 	bl	801b730 <log>
 8004a6c:	ec53 2b10 	vmov	r2, r3, d0
 8004a70:	4640      	mov	r0, r8
 8004a72:	4649      	mov	r1, r9
 8004a74:	f7fb fbfa 	bl	800026c <__aeabi_dsub>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 8004a7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004a80:	f7fb fed6 	bl	8000830 <__aeabi_ddiv>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
			LTC_temperatures[p] = beta
 8004a8c:	88fe      	ldrh	r6, [r7, #6]
					- 273.15;
 8004a8e:	a310      	add	r3, pc, #64	; (adr r3, 8004ad0 <LTC_make_temperatures+0x178>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fbea 	bl	800026c <__aeabi_dsub>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 8004a9c:	480f      	ldr	r0, [pc, #60]	; (8004adc <LTC_make_temperatures+0x184>)
 8004a9e:	00f1      	lsls	r1, r6, #3
 8004aa0:	4401      	add	r1, r0
 8004aa2:	e9c1 2300 	strd	r2, r3, [r1]
		for (k = 0; k < K; k++) {
 8004aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004aac:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004aae:	88bb      	ldrh	r3, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d38b      	bcc.n	80049cc <LTC_make_temperatures+0x74>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004ab4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004abc:	2b0b      	cmp	r3, #11
 8004abe:	d980      	bls.n	80049c2 <LTC_make_temperatures+0x6a>

		}
	}

	return 1;
 8004ac0:	2301      	movs	r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3734      	adds	r7, #52	; 0x34
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004acc:	f3af 8000 	nop.w
 8004ad0:	66666666 	.word	0x66666666
 8004ad4:	40711266 	.word	0x40711266
 8004ad8:	2001bba8 	.word	0x2001bba8
 8004adc:	2001bd58 	.word	0x2001bd58
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	40ab5800 	.word	0x40ab5800
 8004ae8:	66666666 	.word	0x66666666
 8004aec:	4072a266 	.word	0x4072a266
 8004af0:	00000000 	.word	0x00000000
 8004af4:	40c38800 	.word	0x40c38800

08004af8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <MX_SPI2_Init+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b02:	4b16      	ldr	r3, [pc, #88]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004b22:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b44:	220a      	movs	r2, #10
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b48:	4804      	ldr	r0, [pc, #16]	; (8004b5c <MX_SPI2_Init+0x64>)
 8004b4a:	f00f fbcb 	bl	80142e4 <HAL_SPI_Init>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004b54:	f7ff fc12 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004b58:	bf00      	nop
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	2001bf38 	.word	0x2001bf38
 8004b60:	40003800 	.word	0x40003800

08004b64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a28      	ldr	r2, [pc, #160]	; (8004c24 <HAL_SPI_MspInit+0xc0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d14a      	bne.n	8004c1c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b94:	6413      	str	r3, [r2, #64]	; 0x40
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_SPI_MspInit+0xc4>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004bda:	230c      	movs	r3, #12
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bde:	2302      	movs	r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be6:	2303      	movs	r3, #3
 8004be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bea:	2305      	movs	r3, #5
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bee:	f107 0314 	add.w	r3, r7, #20
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	480d      	ldr	r0, [pc, #52]	; (8004c2c <HAL_SPI_MspInit+0xc8>)
 8004bf6:	f00e fd49 	bl	801368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c00:	2302      	movs	r3, #2
 8004c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c0c:	2305      	movs	r3, #5
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	4619      	mov	r1, r3
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <HAL_SPI_MspInit+0xcc>)
 8004c18:	f00e fd38 	bl	801368c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3728      	adds	r7, #40	; 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40003800 	.word	0x40003800
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40020800 	.word	0x40020800
 8004c30:	40020400 	.word	0x40020400

08004c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <HAL_MspInit+0x54>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <HAL_MspInit+0x54>)
 8004c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c48:	6453      	str	r3, [r2, #68]	; 0x44
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <HAL_MspInit+0x54>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_MspInit+0x54>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <HAL_MspInit+0x54>)
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6413      	str	r3, [r2, #64]	; 0x40
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <HAL_MspInit+0x54>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	210f      	movs	r1, #15
 8004c76:	f06f 0001 	mvn.w	r0, #1
 8004c7a:	f00e f96d 	bl	8012f58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800

08004c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	2032      	movs	r0, #50	; 0x32
 8004ca2:	f00e f959 	bl	8012f58 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ca6:	2032      	movs	r0, #50	; 0x32
 8004ca8:	f00e f972 	bl	8012f90 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <HAL_InitTick+0xa4>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_InitTick+0xa4>)
 8004cb6:	f043 0308 	orr.w	r3, r3, #8
 8004cba:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbc:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <HAL_InitTick+0xa4>)
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004cc8:	f107 0210 	add.w	r2, r7, #16
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f00f fad4 	bl	8014280 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004cd8:	f00f fabe 	bl	8014258 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <HAL_InitTick+0xa8>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	0c9b      	lsrs	r3, r3, #18
 8004cec:	3b01      	subs	r3, #1
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004cf0:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <HAL_InitTick+0xac>)
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <HAL_InitTick+0xb0>)
 8004cf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <HAL_InitTick+0xac>)
 8004cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cfc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <HAL_InitTick+0xac>)
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_InitTick+0xac>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_InitTick+0xac>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8004d10:	4809      	ldr	r0, [pc, #36]	; (8004d38 <HAL_InitTick+0xac>)
 8004d12:	f010 f88f 	bl	8014e34 <HAL_TIM_Base_Init>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d104      	bne.n	8004d26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8004d1c:	4806      	ldr	r0, [pc, #24]	; (8004d38 <HAL_InitTick+0xac>)
 8004d1e:	f010 f941 	bl	8014fa4 <HAL_TIM_Base_Start_IT>
 8004d22:	4603      	mov	r3, r0
 8004d24:	e000      	b.n	8004d28 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	431bde83 	.word	0x431bde83
 8004d38:	2001bf90 	.word	0x2001bf90
 8004d3c:	40000c00 	.word	0x40000c00

08004d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d44:	e7fe      	b.n	8004d44 <NMI_Handler+0x4>

08004d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d4a:	e7fe      	b.n	8004d4a <HardFault_Handler+0x4>

08004d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d50:	e7fe      	b.n	8004d50 <MemManage_Handler+0x4>

08004d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d52:	b480      	push	{r7}
 8004d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d56:	e7fe      	b.n	8004d56 <BusFault_Handler+0x4>

08004d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d5c:	e7fe      	b.n	8004d5c <UsageFault_Handler+0x4>

08004d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004d70:	4802      	ldr	r0, [pc, #8]	; (8004d7c <ADC_IRQHandler+0x10>)
 8004d72:	f00c feee 	bl	8011b52 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2001b600 	.word	0x2001b600

08004d80 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004d84:	4802      	ldr	r0, [pc, #8]	; (8004d90 <CAN1_TX_IRQHandler+0x10>)
 8004d86:	f00d fe0a 	bl	801299e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2001b6d0 	.word	0x2001b6d0

08004d94 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004d98:	4802      	ldr	r0, [pc, #8]	; (8004da4 <CAN1_RX0_IRQHandler+0x10>)
 8004d9a:	f00d fe00 	bl	801299e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2001b6d0 	.word	0x2001b6d0

08004da8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004dac:	4802      	ldr	r0, [pc, #8]	; (8004db8 <CAN1_RX1_IRQHandler+0x10>)
 8004dae:	f00d fdf6 	bl	801299e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	2001b6d0 	.word	0x2001b6d0

08004dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004dc0:	4802      	ldr	r0, [pc, #8]	; (8004dcc <TIM2_IRQHandler+0x10>)
 8004dc2:	f010 fcdf 	bl	8015784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	2001c068 	.word	0x2001c068

08004dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004dd4:	4802      	ldr	r0, [pc, #8]	; (8004de0 <TIM3_IRQHandler+0x10>)
 8004dd6:	f010 fcd5 	bl	8015784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2001bfd8 	.word	0x2001bfd8

08004de4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004de8:	4802      	ldr	r0, [pc, #8]	; (8004df4 <TIM5_IRQHandler+0x10>)
 8004dea:	f010 fccb 	bl	8015784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	2001bf90 	.word	0x2001bf90

08004df8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <DMA2_Stream0_IRQHandler+0x10>)
 8004dfe:	f00e f9db 	bl	80131b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	2001b648 	.word	0x2001b648

08004e0c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004e10:	4802      	ldr	r0, [pc, #8]	; (8004e1c <CAN2_TX_IRQHandler+0x10>)
 8004e12:	f00d fdc4 	bl	801299e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2001b6a8 	.word	0x2001b6a8

08004e20 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004e24:	4802      	ldr	r0, [pc, #8]	; (8004e30 <CAN2_RX0_IRQHandler+0x10>)
 8004e26:	f00d fdba 	bl	801299e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	2001b6a8 	.word	0x2001b6a8

08004e34 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <CAN2_RX1_IRQHandler+0x10>)
 8004e3a:	f00d fdb0 	bl	801299e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	2001b6a8 	.word	0x2001b6a8

08004e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <SystemInit+0x20>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <SystemInit+0x20>)
 8004e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b096      	sub	sp, #88	; 0x58
 8004e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	611a      	str	r2, [r3, #16]
 8004e9a:	615a      	str	r2, [r3, #20]
 8004e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f016 fad3 	bl	801b450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004eac:	4a3e      	ldr	r2, [pc, #248]	; (8004fa8 <MX_TIM1_Init+0x13c>)
 8004eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004eb0:	4b3c      	ldr	r3, [pc, #240]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb6:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec4:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed0:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004ed6:	4833      	ldr	r0, [pc, #204]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004ed8:	f00f ffac 	bl	8014e34 <HAL_TIM_Base_Init>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004ee2:	f7ff fa4b 	bl	800437c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004eec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	482c      	ldr	r0, [pc, #176]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004ef4:	f010 feac 	bl	8015c50 <HAL_TIM_ConfigClockSource>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004efe:	f7ff fa3d 	bl	800437c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004f02:	4828      	ldr	r0, [pc, #160]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004f04:	f010 f8be 	bl	8015084 <HAL_TIM_PWM_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004f0e:	f7ff fa35 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f12:	2300      	movs	r3, #0
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4820      	ldr	r0, [pc, #128]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004f22:	f011 fccd 	bl	80168c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004f2c:	f7ff fa26 	bl	800437c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f30:	2360      	movs	r3, #96	; 0x60
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f50:	2208      	movs	r2, #8
 8004f52:	4619      	mov	r1, r3
 8004f54:	4813      	ldr	r0, [pc, #76]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004f56:	f010 fdb9 	bl	8015acc <HAL_TIM_PWM_ConfigChannel>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004f60:	f7ff fa0c 	bl	800437c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4807      	ldr	r0, [pc, #28]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004f88:	f011 fd16 	bl	80169b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004f92:	f7ff f9f3 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f96:	4803      	ldr	r0, [pc, #12]	; (8004fa4 <MX_TIM1_Init+0x138>)
 8004f98:	f000 f974 	bl	8005284 <HAL_TIM_MspPostInit>

}
 8004f9c:	bf00      	nop
 8004f9e:	3758      	adds	r7, #88	; 0x58
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	2001c020 	.word	0x2001c020
 8004fa8:	40010000 	.word	0x40010000

08004fac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b090      	sub	sp, #64	; 0x40
 8004fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004fd0:	f107 030c 	add.w	r3, r7, #12
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <MX_TIM2_Init+0x134>)
 8004fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004fee:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <MX_TIM2_Init+0x134>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <MX_TIM2_Init+0x134>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <MX_TIM2_Init+0x134>)
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8005000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <MX_TIM2_Init+0x134>)
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <MX_TIM2_Init+0x134>)
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800500e:	4834      	ldr	r0, [pc, #208]	; (80050e0 <MX_TIM2_Init+0x134>)
 8005010:	f00f ff10 	bl	8014e34 <HAL_TIM_Base_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800501a:	f7ff f9af 	bl	800437c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800501e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005028:	4619      	mov	r1, r3
 800502a:	482d      	ldr	r0, [pc, #180]	; (80050e0 <MX_TIM2_Init+0x134>)
 800502c:	f010 fe10 	bl	8015c50 <HAL_TIM_ConfigClockSource>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005036:	f7ff f9a1 	bl	800437c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800503a:	4829      	ldr	r0, [pc, #164]	; (80050e0 <MX_TIM2_Init+0x134>)
 800503c:	f010 f944 	bl	80152c8 <HAL_TIM_IC_Init>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8005046:	f7ff f999 	bl	800437c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800504a:	2304      	movs	r3, #4
 800504c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800504e:	2350      	movs	r3, #80	; 0x50
 8005050:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005052:	2300      	movs	r3, #0
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8005056:	2300      	movs	r3, #0
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	4619      	mov	r1, r3
 8005064:	481e      	ldr	r0, [pc, #120]	; (80050e0 <MX_TIM2_Init+0x134>)
 8005066:	f010 feba 	bl	8015dde <HAL_TIM_SlaveConfigSynchro>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8005070:	f7ff f984 	bl	800437c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005078:	2301      	movs	r3, #1
 800507a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	2200      	movs	r2, #0
 800508a:	4619      	mov	r1, r3
 800508c:	4814      	ldr	r0, [pc, #80]	; (80050e0 <MX_TIM2_Init+0x134>)
 800508e:	f010 fc81 	bl	8015994 <HAL_TIM_IC_ConfigChannel>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8005098:	f7ff f970 	bl	800437c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800509c:	2302      	movs	r3, #2
 800509e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80050a0:	2302      	movs	r3, #2
 80050a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80050a4:	f107 030c 	add.w	r3, r7, #12
 80050a8:	2204      	movs	r2, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	480c      	ldr	r0, [pc, #48]	; (80050e0 <MX_TIM2_Init+0x134>)
 80050ae:	f010 fc71 	bl	8015994 <HAL_TIM_IC_ConfigChannel>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80050b8:	f7ff f960 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050bc:	2300      	movs	r3, #0
 80050be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <MX_TIM2_Init+0x134>)
 80050ca:	f011 fbf9 	bl	80168c0 <HAL_TIMEx_MasterConfigSynchronization>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80050d4:	f7ff f952 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80050d8:	bf00      	nop
 80050da:	3740      	adds	r7, #64	; 0x40
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	2001c068 	.word	0x2001c068

080050e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	605a      	str	r2, [r3, #4]
 80050f4:	609a      	str	r2, [r3, #8]
 80050f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f8:	463b      	mov	r3, r7
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <MX_TIM3_Init+0x94>)
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <MX_TIM3_Init+0x98>)
 8005104:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <MX_TIM3_Init+0x94>)
 8005108:	2200      	movs	r2, #0
 800510a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <MX_TIM3_Init+0x94>)
 800510e:	2200      	movs	r2, #0
 8005110:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005112:	4b19      	ldr	r3, [pc, #100]	; (8005178 <MX_TIM3_Init+0x94>)
 8005114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005118:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800511a:	4b17      	ldr	r3, [pc, #92]	; (8005178 <MX_TIM3_Init+0x94>)
 800511c:	2200      	movs	r2, #0
 800511e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005120:	4b15      	ldr	r3, [pc, #84]	; (8005178 <MX_TIM3_Init+0x94>)
 8005122:	2200      	movs	r2, #0
 8005124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005126:	4814      	ldr	r0, [pc, #80]	; (8005178 <MX_TIM3_Init+0x94>)
 8005128:	f00f fe84 	bl	8014e34 <HAL_TIM_Base_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005132:	f7ff f923 	bl	800437c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800513a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	4619      	mov	r1, r3
 8005142:	480d      	ldr	r0, [pc, #52]	; (8005178 <MX_TIM3_Init+0x94>)
 8005144:	f010 fd84 	bl	8015c50 <HAL_TIM_ConfigClockSource>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800514e:	f7ff f915 	bl	800437c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005152:	2320      	movs	r3, #32
 8005154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800515a:	463b      	mov	r3, r7
 800515c:	4619      	mov	r1, r3
 800515e:	4806      	ldr	r0, [pc, #24]	; (8005178 <MX_TIM3_Init+0x94>)
 8005160:	f011 fbae 	bl	80168c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800516a:	f7ff f907 	bl	800437c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800516e:	bf00      	nop
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2001bfd8 	.word	0x2001bfd8
 800517c:	40000400 	.word	0x40000400

08005180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	; 0x30
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005188:	f107 031c 	add.w	r3, r7, #28
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	; (8005274 <HAL_TIM_Base_MspInit+0xf4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10e      	bne.n	80051c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	4a33      	ldr	r2, [pc, #204]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6453      	str	r3, [r2, #68]	; 0x44
 80051b2:	4b31      	ldr	r3, [pc, #196]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80051be:	e055      	b.n	800526c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d135      	bne.n	8005236 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a29      	ldr	r2, [pc, #164]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	6313      	str	r3, [r2, #48]	; 0x30
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8005202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005208:	2302      	movs	r3, #2
 800520a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005210:	2300      	movs	r3, #0
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005214:	2301      	movs	r3, #1
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8005218:	f107 031c 	add.w	r3, r7, #28
 800521c:	4619      	mov	r1, r3
 800521e:	4817      	ldr	r0, [pc, #92]	; (800527c <HAL_TIM_Base_MspInit+0xfc>)
 8005220:	f00e fa34 	bl	801368c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005224:	2200      	movs	r2, #0
 8005226:	2105      	movs	r1, #5
 8005228:	201c      	movs	r0, #28
 800522a:	f00d fe95 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800522e:	201c      	movs	r0, #28
 8005230:	f00d feae 	bl	8012f90 <HAL_NVIC_EnableIRQ>
}
 8005234:	e01a      	b.n	800526c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <HAL_TIM_Base_MspInit+0x100>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d115      	bne.n	800526c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	6413      	str	r3, [r2, #64]	; 0x40
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <HAL_TIM_Base_MspInit+0xf8>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800525c:	2200      	movs	r2, #0
 800525e:	2105      	movs	r1, #5
 8005260:	201d      	movs	r0, #29
 8005262:	f00d fe79 	bl	8012f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005266:	201d      	movs	r0, #29
 8005268:	f00d fe92 	bl	8012f90 <HAL_NVIC_EnableIRQ>
}
 800526c:	bf00      	nop
 800526e:	3730      	adds	r7, #48	; 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40010000 	.word	0x40010000
 8005278:	40023800 	.word	0x40023800
 800527c:	40020000 	.word	0x40020000
 8005280:	40000400 	.word	0x40000400

08005284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 030c 	add.w	r3, r7, #12
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a12      	ldr	r2, [pc, #72]	; (80052ec <HAL_TIM_MspPostInit+0x68>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d11e      	bne.n	80052e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_TIM_MspPostInit+0x6c>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_TIM_MspPostInit+0x6c>)
 80052b0:	f043 0310 	orr.w	r3, r3, #16
 80052b4:	6313      	str	r3, [r2, #48]	; 0x30
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <HAL_TIM_MspPostInit+0x6c>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 80052c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 80052d8:	f107 030c 	add.w	r3, r7, #12
 80052dc:	4619      	mov	r1, r3
 80052de:	4805      	ldr	r0, [pc, #20]	; (80052f4 <HAL_TIM_MspPostInit+0x70>)
 80052e0:	f00e f9d4 	bl	801368c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052e4:	bf00      	nop
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40021000 	.word	0x40021000

080052f8 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 80052f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3308      	adds	r3, #8
 8005308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3310      	adds	r3, #16
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f7fb fa8c 	bl	8000830 <__aeabi_ddiv>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8005320:	4b3e      	ldr	r3, [pc, #248]	; (800541c <CSE_S_x+0x124>)
 8005322:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005326:	4614      	mov	r4, r2
 8005328:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800532c:	220c      	movs	r2, #12
 800532e:	493c      	ldr	r1, [pc, #240]	; (8005420 <CSE_S_x+0x128>)
 8005330:	483c      	ldr	r0, [pc, #240]	; (8005424 <CSE_S_x+0x12c>)
 8005332:	ed97 0b04 	vldr	d0, [r7, #16]
 8005336:	f005 fb4f 	bl	800a9d8 <look1_binlxpw>
 800533a:	ec53 2b10 	vmov	r2, r3, d0
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb fa75 	bl	8000830 <__aeabi_ddiv>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	ec43 2b17 	vmov	d7, r2, r3
 800534e:	eeb0 0a47 	vmov.f32	s0, s14
 8005352:	eef0 0a67 	vmov.f32	s1, s15
 8005356:	f016 f99b 	bl	801b690 <exp>
 800535a:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 800535e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	4930      	ldr	r1, [pc, #192]	; (8005428 <CSE_S_x+0x130>)
 8005368:	f7fa ff80 	bl	800026c <__aeabi_dsub>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	4b2d      	ldr	r3, [pc, #180]	; (800542c <CSE_S_x+0x134>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb f92f 	bl	80005dc <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4614      	mov	r4, r2
 8005384:	461d      	mov	r5, r3
 8005386:	220c      	movs	r2, #12
 8005388:	4924      	ldr	r1, [pc, #144]	; (800541c <CSE_S_x+0x124>)
 800538a:	4826      	ldr	r0, [pc, #152]	; (8005424 <CSE_S_x+0x12c>)
 800538c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005390:	f005 fb22 	bl	800a9d8 <look1_binlxpw>
 8005394:	ec53 2b10 	vmov	r2, r3, d0
 8005398:	4620      	mov	r0, r4
 800539a:	4629      	mov	r1, r5
 800539c:	f7fb f91e 	bl	80005dc <__aeabi_dmul>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053b2:	f7fb f913 	bl	80005dc <__aeabi_dmul>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4620      	mov	r0, r4
 80053bc:	4629      	mov	r1, r5
 80053be:	f7fa ff57 	bl	8000270 <__adddf3>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <CSE_S_x+0x134>)
 80053ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <CSE_S_x+0x124>)
 80053d4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80053d8:	f7fb f900 	bl	80005dc <__aeabi_dmul>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4690      	mov	r8, r2
 80053e2:	4699      	mov	r9, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3308      	adds	r3, #8
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	f101 0408 	add.w	r4, r1, #8
 80053f2:	4640      	mov	r0, r8
 80053f4:	4649      	mov	r1, r9
 80053f6:	f7fa ff3b 	bl	8000270 <__adddf3>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f103 0110 	add.w	r1, r3, #16
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800540e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005412:	bf00      	nop
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800541c:	20000088 	.word	0x20000088
 8005420:	20000230 	.word	0x20000230
 8005424:	200001c8 	.word	0x200001c8
 8005428:	3ff00000 	.word	0x3ff00000
 800542c:	2001c0c0 	.word	0x2001c0c0

08005430 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8005430:	b5b0      	push	{r4, r5, r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3308      	adds	r3, #8
 800543e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3310      	adds	r3, #16
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fb f9f1 	bl	8000830 <__aeabi_ddiv>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8005456:	4b19      	ldr	r3, [pc, #100]	; (80054bc <CSE_M_x+0x8c>)
 8005458:	e9d3 4500 	ldrd	r4, r5, [r3]
 800545c:	220c      	movs	r2, #12
 800545e:	4918      	ldr	r1, [pc, #96]	; (80054c0 <CSE_M_x+0x90>)
 8005460:	4818      	ldr	r0, [pc, #96]	; (80054c4 <CSE_M_x+0x94>)
 8005462:	ed97 0b02 	vldr	d0, [r7, #8]
 8005466:	f005 fab7 	bl	800a9d8 <look1_binlxpw>
 800546a:	ec53 2b10 	vmov	r2, r3, d0
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f7fb f8b3 	bl	80005dc <__aeabi_dmul>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4614      	mov	r4, r2
 800547c:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 800547e:	220c      	movs	r2, #12
 8005480:	4911      	ldr	r1, [pc, #68]	; (80054c8 <CSE_M_x+0x98>)
 8005482:	4810      	ldr	r0, [pc, #64]	; (80054c4 <CSE_M_x+0x94>)
 8005484:	ed97 0b02 	vldr	d0, [r7, #8]
 8005488:	f005 faa6 	bl	800a9d8 <look1_binlxpw>
 800548c:	ec53 2b10 	vmov	r2, r3, d0
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	f7fa feec 	bl	8000270 <__adddf3>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fa fee3 	bl	8000270 <__adddf3>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bdb0      	pop	{r4, r5, r7, pc}
 80054bc:	2001c0c0 	.word	0x2001c0c0
 80054c0:	200000f0 	.word	0x200000f0
 80054c4:	200001c8 	.word	0x200001c8
 80054c8:	20000160 	.word	0x20000160

080054cc <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 80054cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	ed2d 8b02 	vpush	{d8}
 80054d4:	b0e1      	sub	sp, #388	; 0x184
 80054d6:	af04      	add	r7, sp, #16
 80054d8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80054dc:	ed84 0b00 	vstr	d0, [r4]
 80054e0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80054e4:	6020      	str	r0, [r4, #0]
 80054e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80054ea:	6001      	str	r1, [r0, #0]
 80054ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80054f0:	ed81 1b00 	vstr	d1, [r1]
 80054f4:	f107 0120 	add.w	r1, r7, #32
 80054f8:	ed81 2b00 	vstr	d2, [r1]
 80054fc:	f107 0118 	add.w	r1, r7, #24
 8005500:	ed81 3b00 	vstr	d3, [r1]
 8005504:	f107 0114 	add.w	r1, r7, #20
 8005508:	600a      	str	r2, [r1, #0]
 800550a:	f107 0210 	add.w	r2, r7, #16
 800550e:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8005510:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005514:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551c:	f7fb f85e 	bl	80005dc <__aeabi_dmul>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005528:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 800552c:	f107 0118 	add.w	r1, r7, #24
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	4b96      	ldr	r3, [pc, #600]	; (8005790 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8005536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800553a:	f7fa fe99 	bl	8000270 <__adddf3>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f845 	bl	80005dc <__aeabi_dmul>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800555a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 800555e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f04f 0000 	mov.w	r0, #0
 800556a:	4989      	ldr	r1, [pc, #548]	; (8005790 <UKFCorrectorAdditive_getPredict+0x2c4>)
 800556c:	f7fb f960 	bl	8000830 <__aeabi_ddiv>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	4986      	ldr	r1, [pc, #536]	; (8005794 <UKFCorrectorAdditive_getPredict+0x2c8>)
 800557a:	f7fa fe77 	bl	800026c <__aeabi_dsub>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005586:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 800558a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800558e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	f7fa fe6b 	bl	8000270 <__adddf3>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	497c      	ldr	r1, [pc, #496]	; (8005794 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80055a4:	f7fb f944 	bl	8000830 <__aeabi_ddiv>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80055b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 80055b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f04f 0000 	mov.w	r0, #0
 80055c0:	4974      	ldr	r1, [pc, #464]	; (8005794 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80055c2:	f7fa fe53 	bl	800026c <__aeabi_dsub>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	f107 0320 	add.w	r3, r7, #32
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fe4b 	bl	8000270 <__adddf3>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa fe41 	bl	8000270 <__adddf3>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80055f6:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 80055fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005602:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005606:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 800560a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800560e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	f7fb fa47 	bl	8000aac <__aeabi_dcmpeq>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d154      	bne.n	80056ce <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8005624:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005630:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8005634:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005640:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8005644:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800564c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fb f8ec 	bl	8000830 <__aeabi_ddiv>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005660:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8005664:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800566c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fb f8dc 	bl	8000830 <__aeabi_ddiv>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005680:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8005684:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005688:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800568c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8005690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005694:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fb f8c6 	bl	8000830 <__aeabi_ddiv>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80056ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80056b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80056bc:	f7fb f8b8 	bl	8000830 <__aeabi_ddiv>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80056c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80056cc:	e006      	b.n	80056dc <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 80056ce:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80056d8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 80056dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056e0:	ed93 7b00 	vldr	d7, [r3]
 80056e4:	eeb0 0a47 	vmov.f32	s0, s14
 80056e8:	eef0 0a67 	vmov.f32	s1, s15
 80056ec:	f016 f868 	bl	801b7c0 <sqrt>
 80056f0:	eeb0 7a40 	vmov.f32	s14, s0
 80056f4:	eef0 7a60 	vmov.f32	s15, s1
 80056f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056fc:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005706:	e037      	b.n	8005778 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 8005708:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	4413      	add	r3, r2
 8005716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800571a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa ff5b 	bl	80005dc <__aeabi_dmul>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800572e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8005732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800573e:	00c9      	lsls	r1, r1, #3
 8005740:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005744:	4401      	add	r1, r0
 8005746:	39a0      	subs	r1, #160	; 0xa0
 8005748:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 800574c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005758:	3109      	adds	r1, #9
 800575a:	4690      	mov	r8, r2
 800575c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005760:	00cb      	lsls	r3, r1, #3
 8005762:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005766:	4413      	add	r3, r2
 8005768:	3ba0      	subs	r3, #160	; 0xa0
 800576a:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 800576e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005772:	3301      	adds	r3, #1
 8005774:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005778:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800577c:	2b08      	cmp	r3, #8
 800577e:	ddc3      	ble.n	8005708 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005786:	2300      	movs	r3, #0
 8005788:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800578c:	e065      	b.n	800585a <UKFCorrectorAdditive_getPredict+0x38e>
 800578e:	bf00      	nop
 8005790:	40080000 	.word	0x40080000
 8005794:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8005798:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80057a2:	4413      	add	r3, r2
 80057a4:	3ba0      	subs	r3, #160	; 0xa0
 80057a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa fd5c 	bl	8000270 <__adddf3>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80057c0:	00c9      	lsls	r1, r1, #3
 80057c2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80057c6:	4401      	add	r1, r0
 80057c8:	39a0      	subs	r1, #160	; 0xa0
 80057ca:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 80057ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80057d2:	3301      	adds	r3, #1
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80057da:	4413      	add	r3, r2
 80057dc:	3ba0      	subs	r3, #160	; 0xa0
 80057de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80057f2:	3401      	adds	r4, #1
 80057f4:	f7fa fd3c 	bl	8000270 <__adddf3>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	00e1      	lsls	r1, r4, #3
 80057fe:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005802:	4401      	add	r1, r0
 8005804:	39a0      	subs	r1, #160	; 0xa0
 8005806:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 800580a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800580e:	3302      	adds	r3, #2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005816:	4413      	add	r3, r2
 8005818:	3ba0      	subs	r3, #160	; 0xa0
 800581a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800581e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3310      	adds	r3, #16
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 800582e:	3402      	adds	r4, #2
 8005830:	f7fa fd1e 	bl	8000270 <__adddf3>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	00e1      	lsls	r1, r4, #3
 800583a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800583e:	4401      	add	r1, r0
 8005840:	39a0      	subs	r1, #160	; 0xa0
 8005842:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8005846:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800584a:	3303      	adds	r3, #3
 800584c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005850:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005854:	3301      	adds	r3, #1
 8005856:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800585a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800585e:	2b05      	cmp	r3, #5
 8005860:	dd9a      	ble.n	8005798 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800586e:	e018      	b.n	80058a2 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8005870:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005874:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	18d0      	adds	r0, r2, r3
 800587c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005880:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4413      	add	r3, r2
 8005888:	4619      	mov	r1, r3
 800588a:	f7ff fdd1 	bl	8005430 <CSE_M_x>
    knt_0 += 3;
 800588e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005892:	3303      	adds	r3, #3
 8005894:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005898:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800589c:	3301      	adds	r3, #1
 800589e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80058a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	dde2      	ble.n	8005870 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 80058aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058b2:	4611      	mov	r1, r2
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	f7ff fdbb 	bl	8005430 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80058ba:	2300      	movs	r3, #0
 80058bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80058c0:	e027      	b.n	8005912 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 80058c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80058cc:	4413      	add	r3, r2
 80058ce:	3bd0      	subs	r3, #208	; 0xd0
 80058d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fcc6 	bl	800026c <__aeabi_dsub>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f7fa fcbe 	bl	8000270 <__adddf3>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80058fc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005900:	00c9      	lsls	r1, r1, #3
 8005902:	4401      	add	r1, r0
 8005904:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8005908:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800590c:	3301      	adds	r3, #1
 800590e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005912:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005916:	2b05      	cmp	r3, #5
 8005918:	ddd3      	ble.n	80058c2 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 800591a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800591e:	ed93 7b00 	vldr	d7, [r3]
 8005922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005926:	ed93 6b00 	vldr	d6, [r3]
 800592a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800592e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8005932:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005936:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800593a:	f107 0210 	add.w	r2, r7, #16
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	9203      	str	r2, [sp, #12]
 8005942:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005946:	9202      	str	r2, [sp, #8]
 8005948:	f107 0214 	add.w	r2, r7, #20
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	9201      	str	r2, [sp, #4]
 8005950:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005954:	9200      	str	r2, [sp, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4622      	mov	r2, r4
 800595a:	eeb0 1a46 	vmov.f32	s2, s12
 800595e:	eef0 1a66 	vmov.f32	s3, s13
 8005962:	eeb0 0a47 	vmov.f32	s0, s14
 8005966:	eef0 0a67 	vmov.f32	s1, s15
 800596a:	f004 fbdb 	bl	800a124 <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 800596e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800597a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 800597e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 800598e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800599a:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 800599e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059a2:	2202      	movs	r2, #2
 80059a4:	4619      	mov	r1, r3
 80059a6:	2001      	movs	r0, #1
 80059a8:	f009 feec 	bl	800f784 <xnrm2_Mnmxg9YT>
 80059ac:	eeb0 7a40 	vmov.f32	s14, s0
 80059b0:	eef0 7a60 	vmov.f32	s15, s1
 80059b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059b8:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80059bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	f7fb f86e 	bl	8000aac <__aeabi_dcmpeq>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d000      	beq.n	80059d8 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80059d6:	e0fa      	b.n	8005bce <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 80059d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059dc:	ed93 7b00 	vldr	d7, [r3]
 80059e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059e4:	ed93 6b00 	vldr	d6, [r3]
 80059e8:	eeb0 1a46 	vmov.f32	s2, s12
 80059ec:	eef0 1a66 	vmov.f32	s3, s13
 80059f0:	eeb0 0a47 	vmov.f32	s0, s14
 80059f4:	eef0 0a67 	vmov.f32	s1, s15
 80059f8:	f007 fb3a 	bl	800d070 <rt_hypotd_snf>
 80059fc:	eeb0 7a40 	vmov.f32	s14, s0
 8005a00:	eef0 7a60 	vmov.f32	s15, s1
 8005a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a08:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 8005a0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	f7fb f864 	bl	8000ae8 <__aeabi_dcmpge>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8005a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	4615      	mov	r5, r2
 8005a30:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005a34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a38:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 8005a3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	60ba      	str	r2, [r7, #8]
 8005a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a58:	f7fb f832 	bl	8000ac0 <__aeabi_dcmplt>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80ad 	beq.w	8005bbe <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 8005a6a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8005a74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005a82:	f7fa fdab 	bl	80005dc <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005a8e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8005a92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	4b50      	ldr	r3, [pc, #320]	; (8005be0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005aa0:	f7fa fd9c 	bl	80005dc <__aeabi_dmul>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005aac:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 8005ab0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005abe:	f7fa fd8d 	bl	80005dc <__aeabi_dmul>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005aca:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 8005ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	603a      	str	r2, [r7, #0]
 8005ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aea:	f7fa ffe9 	bl	8000ac0 <__aeabi_dcmplt>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <UKFCorrectorAdditive_getPredict+0x630>
 8005af4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005af8:	2b13      	cmp	r3, #19
 8005afa:	ddb6      	ble.n	8005a6a <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 8005afc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005b00:	ed93 8b00 	vldr	d8, [r3]
 8005b04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b08:	2202      	movs	r2, #2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f009 fe39 	bl	800f784 <xnrm2_Mnmxg9YT>
 8005b12:	eeb0 7a40 	vmov.f32	s14, s0
 8005b16:	eef0 7a60 	vmov.f32	s15, s1
 8005b1a:	eeb0 1a47 	vmov.f32	s2, s14
 8005b1e:	eef0 1a67 	vmov.f32	s3, s15
 8005b22:	eeb0 0a48 	vmov.f32	s0, s16
 8005b26:	eef0 0a68 	vmov.f32	s1, s17
 8005b2a:	f007 faa1 	bl	800d070 <rt_hypotd_snf>
 8005b2e:	eeb0 7a40 	vmov.f32	s14, s0
 8005b32:	eef0 7a60 	vmov.f32	s15, s1
 8005b36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b3a:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8005b3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	f7fa ffcb 	bl	8000ae8 <__aeabi_dcmpge>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8005b58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	4692      	mov	sl, r2
 8005b62:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b6a:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005b74:	e014      	b.n	8005ba0 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8005b76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005b86:	f7fa fd29 	bl	80005dc <__aeabi_dmul>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005b92:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8005b96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005ba0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8005ba4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	dbe4      	blt.n	8005b76 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8005bac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005bb8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005bbc:	e007      	b.n	8005bce <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8005bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005bca:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005bce:	bf00      	nop
 8005bd0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	ecbd 8b02 	vpop	{d8}
 8005bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bde:	bf00      	nop
 8005be0:	7c900000 	.word	0x7c900000
 8005be4:	00000000 	.word	0x00000000

08005be8 <CSE_step>:

void CSE_step(void)
{
 8005be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bec:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8005bf0:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8005bf2:	4bb3      	ldr	r3, [pc, #716]	; (8005ec0 <CSE_step+0x2d8>)
 8005bf4:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f001 803e 	beq.w	8006c7a <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	48ae      	ldr	r0, [pc, #696]	; (8005ec4 <CSE_step+0x2dc>)
 8005c0c:	f7ff fc10 	bl	8005430 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8005c10:	4bab      	ldr	r3, [pc, #684]	; (8005ec0 <CSE_step+0x2d8>)
 8005c12:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8005c16:	f107 0110 	add.w	r1, r7, #16
 8005c1a:	f107 0208 	add.w	r2, r7, #8
 8005c1e:	463b      	mov	r3, r7
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	460b      	mov	r3, r1
 8005c24:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8005ea8 <CSE_step+0x2c0>
 8005c28:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8005eb0 <CSE_step+0x2c8>
 8005c2c:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005eb8 <CSE_step+0x2d0>
 8005c30:	49a5      	ldr	r1, [pc, #660]	; (8005ec8 <CSE_step+0x2e0>)
 8005c32:	48a4      	ldr	r0, [pc, #656]	; (8005ec4 <CSE_step+0x2dc>)
 8005c34:	eeb0 0a47 	vmov.f32	s0, s14
 8005c38:	eef0 0a67 	vmov.f32	s1, s15
 8005c3c:	f7ff fc46 	bl	80054cc <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8005c40:	4ba2      	ldr	r3, [pc, #648]	; (8005ecc <CSE_step+0x2e4>)
 8005c42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fb0d 	bl	800026c <__aeabi_dsub>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	f107 0108 	add.w	r1, r7, #8
 8005c5a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005c64:	2300      	movs	r3, #0
 8005c66:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005c6a:	e04a      	b.n	8005d02 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8005c6c:	4a96      	ldr	r2, [pc, #600]	; (8005ec8 <CSE_step+0x2e0>)
 8005c6e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005c7e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005c82:	00c9      	lsls	r1, r1, #3
 8005c84:	4401      	add	r1, r0
 8005c86:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8005c8a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c8e:	3303      	adds	r3, #3
 8005c90:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005c94:	1c51      	adds	r1, r2, #1
 8005c96:	4a8c      	ldr	r2, [pc, #560]	; (8005ec8 <CSE_step+0x2e0>)
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005ca4:	00c9      	lsls	r1, r1, #3
 8005ca6:	4401      	add	r1, r0
 8005ca8:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8005cac:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cb0:	3306      	adds	r3, #6
 8005cb2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005cb6:	1c91      	adds	r1, r2, #2
 8005cb8:	4a83      	ldr	r2, [pc, #524]	; (8005ec8 <CSE_step+0x2e0>)
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005cc6:	00c9      	lsls	r1, r1, #3
 8005cc8:	4401      	add	r1, r0
 8005cca:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8005cce:	f107 0210 	add.w	r2, r7, #16
 8005cd2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8005ce2:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005ce6:	00c9      	lsls	r1, r1, #3
 8005ce8:	4401      	add	r1, r0
 8005cea:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005cee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005cf2:	3303      	adds	r3, #3
 8005cf4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005cf8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005d02:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	ddb0      	ble.n	8005c6c <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	ed93 7b00 	vldr	d7, [r3]
 8005d10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d14:	4618      	mov	r0, r3
 8005d16:	eeb0 0a47 	vmov.f32	s0, s14
 8005d1a:	eef0 0a67 	vmov.f32	s1, s15
 8005d1e:	f009 f8cb 	bl	800eeb8 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8005d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005d2e:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8005d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005d3a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005d3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8005d42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d4a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005d4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8005d52:	463b      	mov	r3, r7
 8005d54:	ed93 7b00 	vldr	d7, [r3]
 8005d58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d62:	eef0 0a67 	vmov.f32	s1, s15
 8005d66:	f009 f8a7 	bl	800eeb8 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8005d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d72:	463b      	mov	r3, r7
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fc30 	bl	80005dc <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	f107 0110 	add.w	r1, r7, #16
 8005d84:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005d8e:	e011      	b.n	8005db4 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8005d90:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005d94:	3301      	adds	r3, #1
 8005d96:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	18d1      	adds	r1, r2, r3
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005daa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005db4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	dde9      	ble.n	8005d90 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8005dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dc0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f7fa fc07 	bl	80005dc <__aeabi_dmul>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	f107 0110 	add.w	r1, r7, #16
 8005dd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8005dda:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8005dea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005df2:	463b      	mov	r3, r7
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fbf0 	bl	80005dc <__aeabi_dmul>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	f107 0110 	add.w	r1, r7, #16
 8005e04:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8005e08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e10:	2301      	movs	r3, #1
 8005e12:	461e      	mov	r6, r3
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	f7fa fe46 	bl	8000aac <__aeabi_dcmpeq>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <CSE_step+0x242>
 8005e26:	2300      	movs	r3, #0
 8005e28:	461e      	mov	r6, r3
 8005e2a:	b2f3      	uxtb	r3, r6
 8005e2c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8005e30:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d113      	bne.n	8005e60 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8005e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e3c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005e40:	2301      	movs	r3, #1
 8005e42:	461e      	mov	r6, r3
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	f7fa fe2e 	bl	8000aac <__aeabi_dcmpeq>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <CSE_step+0x272>
 8005e56:	2300      	movs	r3, #0
 8005e58:	461e      	mov	r6, r3
 8005e5a:	b2f3      	uxtb	r3, r6
 8005e5c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8005e60:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d113      	bne.n	8005e90 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8005e68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e6c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005e70:	2301      	movs	r3, #1
 8005e72:	461e      	mov	r6, r3
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	f7fa fe16 	bl	8000aac <__aeabi_dcmpeq>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <CSE_step+0x2a2>
 8005e86:	2300      	movs	r3, #0
 8005e88:	461e      	mov	r6, r3
 8005e8a:	b2f3      	uxtb	r3, r6
 8005e8c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8005e96:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <CSE_step+0x2e8>
      guard1 = true;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005ea4:	e395      	b.n	80065d2 <CSE_step+0x9ea>
 8005ea6:	bf00      	nop
	...
 8005eb4:	40000000 	.word	0x40000000
 8005eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ebc:	3f50624d 	.word	0x3f50624d
 8005ec0:	20000088 	.word	0x20000088
 8005ec4:	2001c118 	.word	0x2001c118
 8005ec8:	2001c0d0 	.word	0x2001c0d0
 8005ecc:	2001c0c0 	.word	0x2001c0c0
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005ed8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005edc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ee8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa fc9e 	bl	8000830 <__aeabi_ddiv>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005efc:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8005f00:	f107 0310 	add.w	r3, r7, #16
 8005f04:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005f08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f14:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005f18:	f7fa fb60 	bl	80005dc <__aeabi_dmul>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4640      	mov	r0, r8
 8005f22:	4649      	mov	r1, r9
 8005f24:	f7fa f9a2 	bl	800026c <__aeabi_dsub>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f38:	f7fa fc7a 	bl	8000830 <__aeabi_ddiv>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005f44:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8005f48:	f107 0310 	add.w	r3, r7, #16
 8005f4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005f50:	4639      	mov	r1, r7
 8005f52:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005f5c:	e025      	b.n	8005faa <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8005f5e:	463b      	mov	r3, r7
 8005f60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f64:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f68:	3306      	adds	r3, #6
 8005f6a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005f7a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f7fa fb29 	bl	80005dc <__aeabi_dmul>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	f7fa f96b 	bl	800026c <__aeabi_dsub>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005fa0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005faa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	ddd5      	ble.n	8005f5e <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fbc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005fc0:	f7fa fc36 	bl	8000830 <__aeabi_ddiv>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005fd8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8005fdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005fea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fee:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005ffa:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005ffe:	f7fa fd7d 	bl	8000afc <__aeabi_dcmpgt>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <CSE_step+0x436>
        temp = 1.0;
 8006008:	4639      	mov	r1, r7
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	4bbf      	ldr	r3, [pc, #764]	; (800630c <CSE_step+0x724>)
 8006010:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8006014:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006018:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800601c:	e016      	b.n	800604c <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8006026:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800602a:	f7fa fc01 	bl	8000830 <__aeabi_ddiv>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8006036:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800603a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800603e:	f7fa facd 	bl	80005dc <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4639      	mov	r1, r7
 8006048:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 800604c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006050:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006054:	4611      	mov	r1, r2
 8006056:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800605a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800605e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8006062:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006066:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800606a:	f7fa fd47 	bl	8000afc <__aeabi_dcmpgt>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d02b      	beq.n	80060cc <CSE_step+0x4e4>
        t = scale / absxk;
 8006074:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006078:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 800607c:	f7fa fbd8 	bl	8000830 <__aeabi_ddiv>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8006088:	463b      	mov	r3, r7
 800608a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800608e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006092:	f7fa faa3 	bl	80005dc <__aeabi_dmul>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4610      	mov	r0, r2
 800609c:	4619      	mov	r1, r3
 800609e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80060a2:	f7fa fa9b 	bl	80005dc <__aeabi_dmul>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	4b96      	ldr	r3, [pc, #600]	; (800630c <CSE_step+0x724>)
 80060b4:	f7fa f8dc 	bl	8000270 <__adddf3>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4639      	mov	r1, r7
 80060be:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80060c2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80060c6:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 80060ca:	e01d      	b.n	8006108 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 80060cc:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80060d0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80060d4:	f7fa fbac 	bl	8000830 <__aeabi_ddiv>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 80060e0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80060e4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80060e8:	f7fa fa78 	bl	80005dc <__aeabi_dmul>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4610      	mov	r0, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	463b      	mov	r3, r7
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f8b9 	bl	8000270 <__adddf3>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4639      	mov	r1, r7
 8006104:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8006108:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800610c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006110:	4611      	mov	r1, r2
 8006112:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8006116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800611a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 800611e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006122:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8006126:	f7fa fce9 	bl	8000afc <__aeabi_dcmpgt>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d02b      	beq.n	8006188 <CSE_step+0x5a0>
        t = scale / absxk;
 8006130:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006134:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8006138:	f7fa fb7a 	bl	8000830 <__aeabi_ddiv>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8006144:	463b      	mov	r3, r7
 8006146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800614a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800614e:	f7fa fa45 	bl	80005dc <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800615e:	f7fa fa3d 	bl	80005dc <__aeabi_dmul>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	4b67      	ldr	r3, [pc, #412]	; (800630c <CSE_step+0x724>)
 8006170:	f7fa f87e 	bl	8000270 <__adddf3>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4639      	mov	r1, r7
 800617a:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800617e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006182:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8006186:	e01d      	b.n	80061c4 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8006188:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800618c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8006190:	f7fa fb4e 	bl	8000830 <__aeabi_ddiv>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 800619c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80061a0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80061a4:	f7fa fa1a 	bl	80005dc <__aeabi_dmul>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4610      	mov	r0, r2
 80061ae:	4619      	mov	r1, r3
 80061b0:	463b      	mov	r3, r7
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f7fa f85b 	bl	8000270 <__adddf3>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4639      	mov	r1, r7
 80061c0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 80061c4:	463b      	mov	r3, r7
 80061c6:	ed93 7b00 	vldr	d7, [r3]
 80061ca:	eeb0 0a47 	vmov.f32	s0, s14
 80061ce:	eef0 0a67 	vmov.f32	s1, s15
 80061d2:	f015 faf5 	bl	801b7c0 <sqrt>
 80061d6:	ec51 0b10 	vmov	r0, r1, d0
 80061da:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80061de:	f7fa f9fd 	bl	80005dc <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4639      	mov	r1, r7
 80061e8:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 80061ec:	463b      	mov	r3, r7
 80061ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	4b45      	ldr	r3, [pc, #276]	; (800630c <CSE_step+0x724>)
 80061f8:	f7fa fc76 	bl	8000ae8 <__aeabi_dcmpge>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <CSE_step+0x622>
        guard1 = true;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8006208:	e1e3      	b.n	80065d2 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 800620a:	463b      	mov	r3, r7
 800620c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006210:	463b      	mov	r3, r7
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f7fa f9e1 	bl	80005dc <__aeabi_dmul>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	f04f 0000 	mov.w	r0, #0
 8006222:	493a      	ldr	r1, [pc, #232]	; (800630c <CSE_step+0x724>)
 8006224:	f7fa f822 	bl	800026c <__aeabi_dsub>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	ec43 2b17 	vmov	d7, r2, r3
 8006230:	eeb0 0a47 	vmov.f32	s0, s14
 8006234:	eef0 0a67 	vmov.f32	s1, s15
 8006238:	f015 fac2 	bl	801b7c0 <sqrt>
 800623c:	eeb0 6a40 	vmov.f32	s12, s0
 8006240:	eef0 6a60 	vmov.f32	s13, s1
 8006244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006248:	ed93 7b04 	vldr	d7, [r3, #16]
 800624c:	463a      	mov	r2, r7
 800624e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006252:	f103 0110 	add.w	r1, r3, #16
 8006256:	f107 0310 	add.w	r3, r7, #16
 800625a:	3310      	adds	r3, #16
 800625c:	4618      	mov	r0, r3
 800625e:	eeb0 1a47 	vmov.f32	s2, s14
 8006262:	eef0 1a67 	vmov.f32	s3, s15
 8006266:	eeb0 0a46 	vmov.f32	s0, s12
 800626a:	eef0 0a66 	vmov.f32	s1, s13
 800626e:	f006 fd75 	bl	800cd5c <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8006272:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8006282:	463b      	mov	r3, r7
 8006284:	ed93 7b00 	vldr	d7, [r3]
 8006288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800628c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006290:	463a      	mov	r2, r7
 8006292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006296:	f103 0108 	add.w	r1, r3, #8
 800629a:	f107 0310 	add.w	r3, r7, #16
 800629e:	3308      	adds	r3, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	eeb0 1a46 	vmov.f32	s2, s12
 80062a6:	eef0 1a66 	vmov.f32	s3, s13
 80062aa:	eeb0 0a47 	vmov.f32	s0, s14
 80062ae:	eef0 0a67 	vmov.f32	s1, s15
 80062b2:	f006 fd53 	bl	800cd5c <rotate_LZ7ctbe0>
        C[1] = 0.0;
 80062b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 80062c6:	463b      	mov	r3, r7
 80062c8:	ed93 7b00 	vldr	d7, [r3]
 80062cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80062d0:	ed93 6b00 	vldr	d6, [r3]
 80062d4:	463a      	mov	r2, r7
 80062d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80062da:	f107 0310 	add.w	r3, r7, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	eeb0 1a46 	vmov.f32	s2, s12
 80062e4:	eef0 1a66 	vmov.f32	s3, s13
 80062e8:	eeb0 0a47 	vmov.f32	s0, s14
 80062ec:	eef0 0a67 	vmov.f32	s1, s15
 80062f0:	f006 fd34 	bl	800cd5c <rotate_LZ7ctbe0>
        C[0] = 0.0;
 80062f4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800630a:	e06e      	b.n	80063ea <CSE_step+0x802>
 800630c:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8006310:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006314:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006320:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006324:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4413      	add	r3, r2
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f7fa f954 	bl	80005dc <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4639      	mov	r1, r7
 800633a:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 800633e:	f107 0210 	add.w	r2, r7, #16
 8006342:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4413      	add	r3, r2
 800634a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800634e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006352:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7fa f93d 	bl	80005dc <__aeabi_dmul>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4690      	mov	r8, r2
 8006368:	4699      	mov	r9, r3
 800636a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800636e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4413      	add	r3, r2
 8006376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800637a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7fa f92b 	bl	80005dc <__aeabi_dmul>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7f9 ff6d 	bl	800026c <__aeabi_dsub>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800639a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800639e:	00c9      	lsls	r1, r1, #3
 80063a0:	4401      	add	r1, r0
 80063a2:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 80063a6:	f107 0210 	add.w	r2, r7, #16
 80063aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4413      	add	r3, r2
 80063b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa f90d 	bl	80005dc <__aeabi_dmul>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	463b      	mov	r3, r7
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f7f9 ff4e 	bl	8000270 <__adddf3>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063dc:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 80063e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063e4:	3b01      	subs	r3, #1
 80063e6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80063ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da8e      	bge.n	8006310 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80063f2:	2301      	movs	r3, #1
 80063f4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80063f8:	e06f      	b.n	80064da <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 80063fa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063fe:	3303      	adds	r3, #3
 8006400:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	4639      	mov	r1, r7
 800640e:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8006412:	f107 0210 	add.w	r2, r7, #16
 8006416:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4413      	add	r3, r2
 800641e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006422:	463b      	mov	r3, r7
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7fa f8d8 	bl	80005dc <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4690      	mov	r8, r2
 8006432:	4699      	mov	r9, r3
 8006434:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006438:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006444:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006448:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800644c:	f7fa f8c6 	bl	80005dc <__aeabi_dmul>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800645c:	1cde      	adds	r6, r3, #3
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7f9 ff01 	bl	800026c <__aeabi_dsub>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006472:	00f1      	lsls	r1, r6, #3
 8006474:	4401      	add	r1, r0
 8006476:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 800647a:	f107 0210 	add.w	r2, r7, #16
 800647e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	4413      	add	r3, r2
 8006486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800648a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800648e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006492:	f7fa f8a3 	bl	80005dc <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064a2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064ae:	463b      	mov	r3, r7
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7fa f892 	bl	80005dc <__aeabi_dmul>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	f7f9 fed6 	bl	8000270 <__adddf3>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80064cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80064d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80064da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da8b      	bge.n	80063fa <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80064e2:	2302      	movs	r3, #2
 80064e4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80064e8:	e06f      	b.n	80065ca <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 80064ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064ee:	3306      	adds	r3, #6
 80064f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	4639      	mov	r1, r7
 80064fe:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 8006502:	f107 0210 	add.w	r2, r7, #16
 8006506:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006512:	463b      	mov	r3, r7
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7fa f860 	bl	80005dc <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4690      	mov	r8, r2
 8006522:	4699      	mov	r9, r3
 8006524:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006528:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
 8006530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006534:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006538:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800653c:	f7fa f84e 	bl	80005dc <__aeabi_dmul>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800654c:	1d9e      	adds	r6, r3, #6
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fe89 	bl	800026c <__aeabi_dsub>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006562:	00f1      	lsls	r1, r6, #3
 8006564:	4401      	add	r1, r0
 8006566:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 800656a:	f107 0210 	add.w	r2, r7, #16
 800656e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800657a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800657e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006582:	f7fa f82b 	bl	80005dc <__aeabi_dmul>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4690      	mov	r8, r2
 800658c:	4699      	mov	r9, r3
 800658e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006592:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4413      	add	r3, r2
 800659a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800659e:	463b      	mov	r3, r7
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7fa f81a 	bl	80005dc <__aeabi_dmul>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4640      	mov	r0, r8
 80065ae:	4649      	mov	r1, r9
 80065b0:	f7f9 fe5e 	bl	8000270 <__adddf3>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80065bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80065c0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80065c4:	3b01      	subs	r3, #1
 80065c6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80065ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da8b      	bge.n	80064ea <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 80065d2:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 82e1 	beq.w	8006b9e <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80065e2:	2300      	movs	r3, #0
 80065e4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80065e8:	e0d6      	b.n	8006798 <CSE_step+0xbb0>
        coffset = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80065f6:	e0c0      	b.n	800677a <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 80065f8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80065fc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006600:	4413      	add	r3, r2
 8006602:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 8006606:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800660a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	18d1      	adds	r1, r2, r3
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 800661e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006622:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800662e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006632:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800663e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006642:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	4413      	add	r3, r2
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 ffc5 	bl	80005dc <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4640      	mov	r0, r8
 8006658:	4649      	mov	r1, r9
 800665a:	f7f9 fe09 	bl	8000270 <__adddf3>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006666:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800666a:	00c9      	lsls	r1, r1, #3
 800666c:	4401      	add	r1, r0
 800666e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 8006672:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006676:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4413      	add	r3, r2
 800667e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006682:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006686:	3301      	adds	r3, #1
 8006688:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006694:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006698:	3301      	adds	r3, #1
 800669a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 ff99 	bl	80005dc <__aeabi_dmul>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4640      	mov	r0, r8
 80066b0:	4649      	mov	r1, r9
 80066b2:	f7f9 fddd 	bl	8000270 <__adddf3>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80066be:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80066c2:	00c9      	lsls	r1, r1, #3
 80066c4:	4401      	add	r1, r0
 80066c6:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 80066ca:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80066ce:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	4413      	add	r3, r2
 80066d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80066de:	3302      	adds	r3, #2
 80066e0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4413      	add	r3, r2
 80066e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ec:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80066f0:	3302      	adds	r3, #2
 80066f2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 ff6d 	bl	80005dc <__aeabi_dmul>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7f9 fdb1 	bl	8000270 <__adddf3>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006716:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800671a:	00c9      	lsls	r1, r1, #3
 800671c:	4401      	add	r1, r0
 800671e:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8006722:	f107 0210 	add.w	r2, r7, #16
 8006726:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	4413      	add	r3, r2
 800672e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006732:	f107 0210 	add.w	r2, r7, #16
 8006736:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006742:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8006746:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800674a:	4433      	add	r3, r6
 800674c:	461e      	mov	r6, r3
 800674e:	4642      	mov	r2, r8
 8006750:	464b      	mov	r3, r9
 8006752:	f7f9 ff43 	bl	80005dc <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800675e:	00f1      	lsls	r1, r6, #3
 8006760:	4401      	add	r1, r0
 8006762:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8006766:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800676a:	3303      	adds	r3, #3
 800676c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006770:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006774:	3301      	adds	r3, #1
 8006776:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800677a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800677e:	2b02      	cmp	r3, #2
 8006780:	f77f af3a 	ble.w	80065f8 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 8006784:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006788:	3303      	adds	r3, #3
 800678a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800678e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006792:	3301      	adds	r3, #1
 8006794:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006798:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800679c:	2b02      	cmp	r3, #2
 800679e:	f77f af24 	ble.w	80065ea <CSE_step+0xa02>
      }

      errorCondition = true;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80067ae:	e045      	b.n	800683c <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80067b0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80067b4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80067c4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f7f9 fd4c 	bl	800026c <__aeabi_dsub>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4639      	mov	r1, r7
 80067da:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 80067de:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01a      	beq.n	800681c <CSE_step+0xc34>
 80067e6:	463b      	mov	r3, r7
 80067e8:	ed93 7b00 	vldr	d7, [r3]
 80067ec:	eeb0 0a47 	vmov.f32	s0, s14
 80067f0:	eef0 0a67 	vmov.f32	s1, s15
 80067f4:	f006 fd26 	bl	800d244 <rtIsInf>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <CSE_step+0xc2e>
 80067fe:	463b      	mov	r3, r7
 8006800:	ed93 7b00 	vldr	d7, [r3]
 8006804:	eeb0 0a47 	vmov.f32	s0, s14
 8006808:	eef0 0a67 	vmov.f32	s1, s15
 800680c:	f006 fd3e 	bl	800d28c <rtIsNaN>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <CSE_step+0xc34>
          errorCondition = false;
 8006816:	2300      	movs	r3, #0
 8006818:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 800681c:	463b      	mov	r3, r7
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006826:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 800682a:	00c9      	lsls	r1, r1, #3
 800682c:	4401      	add	r1, r0
 800682e:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8006832:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006836:	3301      	adds	r3, #1
 8006838:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800683c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006840:	2b08      	cmp	r3, #8
 8006842:	ddb5      	ble.n	80067b0 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8006844:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 800684c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006850:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006854:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006858:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800685c:	f006 fd68 	bl	800d330 <svd_u3DvUgOe>
 8006860:	e02c      	b.n	80068bc <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8006862:	4bd2      	ldr	r3, [pc, #840]	; (8006bac <CSE_step+0xfc4>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800686c:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8006870:	4bce      	ldr	r3, [pc, #824]	; (8006bac <CSE_step+0xfc4>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800687a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 800687e:	4bcb      	ldr	r3, [pc, #812]	; (8006bac <CSE_step+0xfc4>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006888:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800688c:	2300      	movs	r3, #0
 800688e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006892:	e00f      	b.n	80068b4 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8006894:	4bc5      	ldr	r3, [pc, #788]	; (8006bac <CSE_step+0xfc4>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800689e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80068a2:	00c9      	lsls	r1, r1, #3
 80068a4:	4401      	add	r1, r0
 80068a6:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80068aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80068ae:	3301      	adds	r3, #1
 80068b0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80068b4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	ddeb      	ble.n	8006894 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80068bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068c0:	2248      	movs	r2, #72	; 0x48
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f014 fdc3 	bl	801b450 <memset>
      Ss[0] = s[0];
 80068ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80068d6:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 80068da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80068e2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80068e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 80068ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80068f2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80068f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80068fa:	2300      	movs	r3, #0
 80068fc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006900:	e01e      	b.n	8006940 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 8006902:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006906:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4413      	add	r3, r2
 800690e:	ed93 7b00 	vldr	d7, [r3]
 8006912:	eeb0 0a47 	vmov.f32	s0, s14
 8006916:	eef0 0a67 	vmov.f32	s1, s15
 800691a:	f014 ff51 	bl	801b7c0 <sqrt>
 800691e:	eeb0 7a40 	vmov.f32	s14, s0
 8006922:	eef0 7a60 	vmov.f32	s15, s1
 8006926:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800692a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4413      	add	r3, r2
 8006932:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006936:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800693a:	3301      	adds	r3, #1
 800693c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006940:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006944:	2b08      	cmp	r3, #8
 8006946:	dddc      	ble.n	8006902 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006954:	e0b4      	b.n	8006ac0 <CSE_step+0xed8>
        coffset = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006962:	e09e      	b.n	8006aa2 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8006964:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006968:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800696c:	4413      	add	r3, r2
 800696e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8006972:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006976:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	18d1      	adds	r1, r2, r3
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 800698a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800698e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	e9d3 8900 	ldrd	r8, r9, [r3]
 800699a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800699e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4413      	add	r3, r2
 80069a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069aa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80069ae:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f7f9 fe0f 	bl	80005dc <__aeabi_dmul>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	f7f9 fc53 	bl	8000270 <__adddf3>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80069d2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80069d6:	00c9      	lsls	r1, r1, #3
 80069d8:	4401      	add	r1, r0
 80069da:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 80069de:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80069e2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80069f2:	3301      	adds	r3, #1
 80069f4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4413      	add	r3, r2
 80069fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a00:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006a04:	3303      	adds	r3, #3
 8006a06:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fde3 	bl	80005dc <__aeabi_dmul>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7f9 fc27 	bl	8000270 <__adddf3>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006a2a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006a2e:	00c9      	lsls	r1, r1, #3
 8006a30:	4401      	add	r1, r0
 8006a32:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8006a36:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a3a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4413      	add	r3, r2
 8006a42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a46:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	4413      	add	r3, r2
 8006a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a58:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006a5c:	3306      	adds	r3, #6
 8006a5e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	4413      	add	r3, r2
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f7f9 fdb7 	bl	80005dc <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4640      	mov	r0, r8
 8006a74:	4649      	mov	r1, r9
 8006a76:	f7f9 fbfb 	bl	8000270 <__adddf3>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006a82:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006a86:	00c9      	lsls	r1, r1, #3
 8006a88:	4401      	add	r1, r0
 8006a8a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8006a8e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006a92:	3303      	adds	r3, #3
 8006a94:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006a98:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006aa2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	f77f af5c 	ble.w	8006964 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 8006aac:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006ab0:	3303      	adds	r3, #3
 8006ab2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8006ab6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006aba:	3301      	adds	r3, #1
 8006abc:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006ac0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	f77f af46 	ble.w	8006956 <CSE_step+0xd6e>
      }

      errorCondition = true;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8006adc:	e042      	b.n	8006b64 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 8006ade:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 8006aee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	dc23      	bgt.n	8006b3e <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 8006af6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006afa:	4613      	mov	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	441a      	add	r2, r3
 8006b00:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b04:	4413      	add	r3, r2
 8006b06:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	f7f9 ffc7 	bl	8000aac <__aeabi_dcmpeq>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d106      	bne.n	8006b32 <CSE_step+0xf4a>
              errorCondition = false;
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8006b30:	e00d      	b.n	8006b4e <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8006b32:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b36:	3301      	adds	r3, #1
 8006b38:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006b3c:	e007      	b.n	8006b4e <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8006b3e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b42:	3301      	adds	r3, #1
 8006b44:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8006b4e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0c8      	beq.n	8006ae8 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8006b56:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d102      	bne.n	8006b64 <CSE_step+0xf7c>
          exitg2 = true;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8006b64:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <CSE_step+0xf8c>
 8006b6c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	ddb4      	ble.n	8006ade <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8006b74:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d110      	bne.n	8006b9e <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8006b7c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006b80:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b84:	2248      	movs	r2, #72	; 0x48
 8006b86:	4618      	mov	r0, r3
 8006b88:	f014 fc54 	bl	801b434 <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8006b8c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b90:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006b94:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f004 f807 	bl	800abac <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006baa:	e062      	b.n	8006c72 <CSE_step+0x108a>
 8006bac:	2001ebf8 	.word	0x2001ebf8
      CSE_DW.P[iAcol_0] = R[iAcol];
 8006bb0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006bb4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4413      	add	r3, r2
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	48a5      	ldr	r0, [pc, #660]	; (8006e58 <CSE_step+0x1270>)
 8006bc2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006bc6:	00c9      	lsls	r1, r1, #3
 8006bc8:	4401      	add	r1, r0
 8006bca:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8006bce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bd2:	3303      	adds	r3, #3
 8006bd4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006bd8:	1c51      	adds	r1, r2, #1
 8006bda:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4413      	add	r3, r2
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	489c      	ldr	r0, [pc, #624]	; (8006e58 <CSE_step+0x1270>)
 8006be8:	00c9      	lsls	r1, r1, #3
 8006bea:	4401      	add	r1, r0
 8006bec:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006bf0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006bf4:	3306      	adds	r3, #6
 8006bf6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006bfa:	1c91      	adds	r1, r2, #2
 8006bfc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4413      	add	r3, r2
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	4893      	ldr	r0, [pc, #588]	; (8006e58 <CSE_step+0x1270>)
 8006c0a:	00c9      	lsls	r1, r1, #3
 8006c0c:	4401      	add	r1, r0
 8006c0e:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8006c12:	4a91      	ldr	r2, [pc, #580]	; (8006e58 <CSE_step+0x1270>)
 8006c14:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c18:	3309      	adds	r3, #9
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c26:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fccf 	bl	80005dc <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 fb13 	bl	8000270 <__adddf3>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4882      	ldr	r0, [pc, #520]	; (8006e58 <CSE_step+0x1270>)
 8006c50:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8006c54:	3109      	adds	r1, #9
 8006c56:	00c9      	lsls	r1, r1, #3
 8006c58:	4401      	add	r1, r0
 8006c5a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8006c5e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c62:	3303      	adds	r3, #3
 8006c64:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006c68:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006c72:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	dd9a      	ble.n	8006bb0 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8006c7a:	4b77      	ldr	r3, [pc, #476]	; (8006e58 <CSE_step+0x1270>)
 8006c7c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006c80:	4b75      	ldr	r3, [pc, #468]	; (8006e58 <CSE_step+0x1270>)
 8006c82:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006c86:	f7f9 fdd3 	bl	8000830 <__aeabi_ddiv>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4973      	ldr	r1, [pc, #460]	; (8006e5c <CSE_step+0x1274>)
 8006c90:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8006c94:	4b70      	ldr	r3, [pc, #448]	; (8006e58 <CSE_step+0x1270>)
 8006c96:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006c9a:	4970      	ldr	r1, [pc, #448]	; (8006e5c <CSE_step+0x1274>)
 8006c9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	486e      	ldr	r0, [pc, #440]	; (8006e60 <CSE_step+0x1278>)
 8006ca8:	f7fe fb26 	bl	80052f8 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006cac:	2300      	movs	r3, #0
 8006cae:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006cb2:	e034      	b.n	8006d1e <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8006cb4:	4a68      	ldr	r2, [pc, #416]	; (8006e58 <CSE_step+0x1270>)
 8006cb6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cc2:	a363      	add	r3, pc, #396	; (adr r3, 8006e50 <CSE_step+0x1268>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f7f9 fc88 	bl	80005dc <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8006cd8:	f107 0308 	add.w	r3, r7, #8
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006ce4:	00c9      	lsls	r1, r1, #3
 8006ce6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006cea:	4401      	add	r1, r0
 8006cec:	39d0      	subs	r1, #208	; 0xd0
 8006cee:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006cfe:	3109      	adds	r1, #9
 8006d00:	4614      	mov	r4, r2
 8006d02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006d06:	00cb      	lsls	r3, r1, #3
 8006d08:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3bd0      	subs	r3, #208	; 0xd0
 8006d10:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006d14:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006d1e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	ddc6      	ble.n	8006cb4 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006d32:	e058      	b.n	8006de6 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8006d34:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006d3e:	4413      	add	r3, r2
 8006d40:	3bd0      	subs	r3, #208	; 0xd0
 8006d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d46:	4b44      	ldr	r3, [pc, #272]	; (8006e58 <CSE_step+0x1270>)
 8006d48:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006d4c:	f7f9 fa90 	bl	8000270 <__adddf3>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006d58:	00c9      	lsls	r1, r1, #3
 8006d5a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006d5e:	4401      	add	r1, r0
 8006d60:	39d0      	subs	r1, #208	; 0xd0
 8006d62:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8006d66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006d72:	4413      	add	r3, r2
 8006d74:	3bd0      	subs	r3, #208	; 0xd0
 8006d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <CSE_step+0x1270>)
 8006d7c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006d80:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006d84:	3401      	adds	r4, #1
 8006d86:	f7f9 fa73 	bl	8000270 <__adddf3>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	00e1      	lsls	r1, r4, #3
 8006d90:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006d94:	4401      	add	r1, r0
 8006d96:	39d0      	subs	r1, #208	; 0xd0
 8006d98:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8006d9c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006da0:	3302      	adds	r3, #2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006da8:	4413      	add	r3, r2
 8006daa:	3bd0      	subs	r3, #208	; 0xd0
 8006dac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006db0:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <CSE_step+0x1270>)
 8006db2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006db6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006dba:	3402      	adds	r4, #2
 8006dbc:	f7f9 fa58 	bl	8000270 <__adddf3>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	00e1      	lsls	r1, r4, #3
 8006dc6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006dca:	4401      	add	r1, r0
 8006dcc:	39d0      	subs	r1, #208	; 0xd0
 8006dce:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8006dd2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006dd6:	3303      	adds	r3, #3
 8006dd8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006ddc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006de0:	3301      	adds	r3, #1
 8006de2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006de6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	dda2      	ble.n	8006d34 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006dfa:	e018      	b.n	8006e2e <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8006dfc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8006e00:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	18d0      	adds	r0, r2, r3
 8006e08:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8006e0c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	f7fe fa6f 	bl	80052f8 <CSE_S_x>
    iAcol_0 += 3;
 8006e1a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e1e:	3303      	adds	r3, #3
 8006e20:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006e24:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e28:	3301      	adds	r3, #1
 8006e2a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006e2e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	dde2      	ble.n	8006dfc <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8006e36:	f107 0310 	add.w	r3, r7, #16
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4808      	ldr	r0, [pc, #32]	; (8006e60 <CSE_step+0x1278>)
 8006e3e:	f7fe fa5b 	bl	80052f8 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006e42:	2300      	movs	r3, #0
 8006e44:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006e48:	e021      	b.n	8006e8e <CSE_step+0x12a6>
 8006e4a:	bf00      	nop
 8006e4c:	f3af 8000 	nop.w
 8006e50:	64b487da 	.word	0x64b487da
 8006e54:	3f5c60bf 	.word	0x3f5c60bf
 8006e58:	2001c0d0 	.word	0x2001c0d0
 8006e5c:	2001c0b0 	.word	0x2001c0b0
 8006e60:	2001c118 	.word	0x2001c118
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8006e64:	4ab8      	ldr	r2, [pc, #736]	; (8007148 <CSE_step+0x1560>)
 8006e66:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e6a:	3309      	adds	r3, #9
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4413      	add	r3, r2
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006e78:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006e7c:	00c9      	lsls	r1, r1, #3
 8006e7e:	4401      	add	r1, r0
 8006e80:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006e84:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006e8e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	dde6      	ble.n	8006e64 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8006e96:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006e9a:	f107 0210 	add.w	r2, r7, #16
 8006e9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ea2:	9304      	str	r3, [sp, #16]
 8006ea4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	4ba8      	ldr	r3, [pc, #672]	; (800714c <CSE_step+0x1564>)
 8006eac:	9302      	str	r3, [sp, #8]
 8006eae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8007140 <CSE_step+0x1558>
 8006ec0:	49a3      	ldr	r1, [pc, #652]	; (8007150 <CSE_step+0x1568>)
 8006ec2:	48a4      	ldr	r0, [pc, #656]	; (8007154 <CSE_step+0x156c>)
 8006ec4:	f001 fc42 	bl	800874c <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8006ec8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ecc:	2248      	movs	r2, #72	; 0x48
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f014 fabd 	bl	801b450 <memset>
  R[0] = 1.0;
 8006ed6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	4b9e      	ldr	r3, [pc, #632]	; (8007158 <CSE_step+0x1570>)
 8006ee0:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8006ee4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	4b9a      	ldr	r3, [pc, #616]	; (8007158 <CSE_step+0x1570>)
 8006eee:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8006ef2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	4b97      	ldr	r3, [pc, #604]	; (8007158 <CSE_step+0x1570>)
 8006efc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006f06:	e07e      	b.n	8007006 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8006f08:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	4413      	add	r3, r2
 8006f12:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006f16:	2300      	movs	r3, #0
 8006f18:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006f1c:	e06a      	b.n	8006ff4 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8006f1e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006f22:	4613      	mov	r3, r2
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	4413      	add	r3, r2
 8006f28:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006f2c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006f30:	3301      	adds	r3, #1
 8006f32:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4413      	add	r3, r2
 8006f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f3e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f42:	3303      	adds	r3, #3
 8006f44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f7f9 fb44 	bl	80005dc <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4614      	mov	r4, r2
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006f60:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	4413      	add	r3, r2
 8006f68:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006f6c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006f70:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4413      	add	r3, r2
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006f7c:	f7f9 fb2e 	bl	80005dc <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7f9 f972 	bl	8000270 <__adddf3>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4690      	mov	r8, r2
 8006f92:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006f94:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006f98:	3302      	adds	r3, #2
 8006f9a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fa6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006faa:	3306      	adds	r3, #6
 8006fac:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 fb10 	bl	80005dc <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006fc4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006fc8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fcc:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 f94b 	bl	8000270 <__adddf3>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006fde:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006fe2:	00e1      	lsls	r1, r4, #3
 8006fe4:	4401      	add	r1, r0
 8006fe6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006fea:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006ff4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	dd90      	ble.n	8006f1e <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006ffc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007000:	3301      	adds	r3, #1
 8007002:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8007006:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800700a:	2b02      	cmp	r3, #2
 800700c:	f77f af7c 	ble.w	8006f08 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 800701c:	2300      	movs	r3, #0
 800701e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8007022:	e077      	b.n	8007114 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8007024:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8007028:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8007038:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800703c:	00c9      	lsls	r1, r1, #3
 800703e:	4401      	add	r1, r0
 8007040:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8007044:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007048:	1cd9      	adds	r1, r3, #3
 800704a:	4a44      	ldr	r2, [pc, #272]	; (800715c <CSE_step+0x1574>)
 800704c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8007050:	3344      	adds	r3, #68	; 0x44
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800705e:	00c9      	lsls	r1, r1, #3
 8007060:	4401      	add	r1, r0
 8007062:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8007066:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800706a:	3301      	adds	r3, #1
 800706c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8007070:	1c51      	adds	r1, r2, #1
 8007072:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8007082:	00c9      	lsls	r1, r1, #3
 8007084:	4401      	add	r1, r0
 8007086:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 800708a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800708e:	3303      	adds	r3, #3
 8007090:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8007094:	1d11      	adds	r1, r2, #4
 8007096:	4a31      	ldr	r2, [pc, #196]	; (800715c <CSE_step+0x1574>)
 8007098:	3344      	adds	r3, #68	; 0x44
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80070a6:	00c9      	lsls	r1, r1, #3
 80070a8:	4401      	add	r1, r0
 80070aa:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 80070ae:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80070b2:	3302      	adds	r3, #2
 80070b4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80070b8:	1c91      	adds	r1, r2, #2
 80070ba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4413      	add	r3, r2
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80070ca:	00c9      	lsls	r1, r1, #3
 80070cc:	4401      	add	r1, r0
 80070ce:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 80070d2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80070d6:	3306      	adds	r3, #6
 80070d8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80070dc:	1d51      	adds	r1, r2, #5
 80070de:	4a1f      	ldr	r2, [pc, #124]	; (800715c <CSE_step+0x1574>)
 80070e0:	3344      	adds	r3, #68	; 0x44
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4413      	add	r3, r2
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80070ee:	00c9      	lsls	r1, r1, #3
 80070f0:	4401      	add	r1, r0
 80070f2:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 80070f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80070fa:	3306      	adds	r3, #6
 80070fc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8007100:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007104:	3303      	adds	r3, #3
 8007106:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 800710a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800710e:	3301      	adds	r3, #1
 8007110:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8007114:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8007118:	2b02      	cmp	r3, #2
 800711a:	dd83      	ble.n	8007024 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 800711c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007120:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8007124:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007128:	4618      	mov	r0, r3
 800712a:	f004 fcc7 	bl	800babc <qr_DvOBrgQi>
  iAcol_0 = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8007134:	2300      	movs	r3, #0
 8007136:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800713a:	e04c      	b.n	80071d6 <CSE_step+0x15ee>
 800713c:	f3af 8000 	nop.w
 8007140:	00000000 	.word	0x00000000
 8007144:	c12e847e 	.word	0xc12e847e
 8007148:	2001c0d0 	.word	0x2001c0d0
 800714c:	2001c118 	.word	0x2001c118
 8007150:	0801c7e8 	.word	0x0801c7e8
 8007154:	0801c7d8 	.word	0x0801c7d8
 8007158:	3ff00000 	.word	0x3ff00000
 800715c:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 8007160:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007164:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4413      	add	r3, r2
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	481e      	ldr	r0, [pc, #120]	; (80071ec <CSE_step+0x1604>)
 8007172:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007176:	00c9      	lsls	r1, r1, #3
 8007178:	4401      	add	r1, r0
 800717a:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 800717e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007182:	3303      	adds	r3, #3
 8007184:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8007188:	1c51      	adds	r1, r2, #1
 800718a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	4815      	ldr	r0, [pc, #84]	; (80071ec <CSE_step+0x1604>)
 8007198:	00c9      	lsls	r1, r1, #3
 800719a:	4401      	add	r1, r0
 800719c:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 80071a0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80071a4:	3306      	adds	r3, #6
 80071a6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80071aa:	1c91      	adds	r1, r2, #2
 80071ac:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	4413      	add	r3, r2
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	480c      	ldr	r0, [pc, #48]	; (80071ec <CSE_step+0x1604>)
 80071ba:	00c9      	lsls	r1, r1, #3
 80071bc:	4401      	add	r1, r0
 80071be:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80071c2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80071c6:	3303      	adds	r3, #3
 80071c8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80071cc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80071d0:	3301      	adds	r3, #1
 80071d2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80071d6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80071da:	2b02      	cmp	r3, #2
 80071dc:	ddc0      	ble.n	8007160 <CSE_step+0x1578>
  }
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80071e6:	46bd      	mov	sp, r7
 80071e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ec:	2001c0d0 	.word	0x2001c0d0

080071f0 <CSE_initialize>:

void CSE_initialize(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 80071f4:	2008      	movs	r0, #8
 80071f6:	f005 ffe1 	bl	800d1bc <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 80071fa:	2248      	movs	r2, #72	; 0x48
 80071fc:	490b      	ldr	r1, [pc, #44]	; (800722c <CSE_initialize+0x3c>)
 80071fe:	480c      	ldr	r0, [pc, #48]	; (8007230 <CSE_initialize+0x40>)
 8007200:	f014 f918 	bl	801b434 <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <CSE_initialize+0x44>)
 8007206:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 800720a:	4909      	ldr	r1, [pc, #36]	; (8007230 <CSE_initialize+0x40>)
 800720c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8007210:	4b08      	ldr	r3, [pc, #32]	; (8007234 <CSE_initialize+0x44>)
 8007212:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8007216:	4906      	ldr	r1, [pc, #24]	; (8007230 <CSE_initialize+0x40>)
 8007218:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <CSE_initialize+0x44>)
 800721e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8007222:	4903      	ldr	r1, [pc, #12]	; (8007230 <CSE_initialize+0x40>)
 8007224:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8007228:	bf00      	nop
 800722a:	bd80      	pop	{r7, pc}
 800722c:	200002f8 	.word	0x200002f8
 8007230:	2001c0d0 	.word	0x2001c0d0
 8007234:	20000088 	.word	0x20000088

08007238 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8007240:	b087      	sub	sp, #28
 8007242:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 8007244:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <SIM0_step+0x90>)
 8007246:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007252:	f101 0118 	add.w	r1, r1, #24
 8007256:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800725a:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <SIM0_step+0x94>)
 800725c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8007260:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <SIM0_step+0x94>)
 8007262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007266:	a316      	add	r3, pc, #88	; (adr r3, 80072c0 <SIM0_step+0x88>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f9b6 	bl	80005dc <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4650      	mov	r0, sl
 8007276:	4659      	mov	r1, fp
 8007278:	f7f9 fada 	bl	8000830 <__aeabi_ddiv>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 8007284:	4b10      	ldr	r3, [pc, #64]	; (80072c8 <SIM0_step+0x90>)
 8007286:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800728e:	f7f9 f9a5 	bl	80005dc <__aeabi_dmul>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	ec43 2b17 	vmov	d7, r2, r3
 800729a:	eeb0 0a47 	vmov.f32	s0, s14
 800729e:	eef0 0a67 	vmov.f32	s1, s15
 80072a2:	f014 f9f5 	bl	801b690 <exp>
 80072a6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80072aa:	f103 0308 	add.w	r3, r3, #8
 80072ae:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80072b2:	2300      	movs	r3, #0
 80072b4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80072b8:	f102 020c 	add.w	r2, r2, #12
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	e243      	b.n	8007748 <SIM0_step+0x510>
 80072c0:	00000000 	.word	0x00000000
 80072c4:	40ac2000 	.word	0x40ac2000
 80072c8:	2001c130 	.word	0x2001c130
 80072cc:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 80072d0:	4aca      	ldr	r2, [pc, #808]	; (80075fc <SIM0_step+0x3c4>)
 80072d2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80072d6:	f103 030c 	add.w	r3, r3, #12
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3305      	adds	r3, #5
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 80072ea:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80072ee:	f101 010c 	add.w	r1, r1, #12
 80072f2:	6809      	ldr	r1, [r1, #0]
 80072f4:	00c9      	lsls	r1, r1, #3
 80072f6:	4401      	add	r1, r0
 80072f8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 80072fc:	4abf      	ldr	r2, [pc, #764]	; (80075fc <SIM0_step+0x3c4>)
 80072fe:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007302:	f103 030c 	add.w	r3, r3, #12
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f203 1303 	addw	r3, r3, #259	; 0x103
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4413      	add	r3, r2
 8007310:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 8007314:	4ab9      	ldr	r2, [pc, #740]	; (80075fc <SIM0_step+0x3c4>)
 8007316:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800731a:	f103 030c 	add.w	r3, r3, #12
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f203 1381 	addw	r3, r3, #385	; 0x181
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 800732c:	f7f9 fa80 	bl	8000830 <__aeabi_ddiv>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007338:	f101 0108 	add.w	r1, r1, #8
 800733c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 8007340:	220c      	movs	r2, #12
 8007342:	49af      	ldr	r1, [pc, #700]	; (8007600 <SIM0_step+0x3c8>)
 8007344:	48af      	ldr	r0, [pc, #700]	; (8007604 <SIM0_step+0x3cc>)
 8007346:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800734a:	f103 0308 	add.w	r3, r3, #8
 800734e:	ed93 0b00 	vldr	d0, [r3]
 8007352:	f003 fb41 	bl	800a9d8 <look1_binlxpw>
 8007356:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800735a:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 800735e:	220c      	movs	r2, #12
 8007360:	49a9      	ldr	r1, [pc, #676]	; (8007608 <SIM0_step+0x3d0>)
 8007362:	48a8      	ldr	r0, [pc, #672]	; (8007604 <SIM0_step+0x3cc>)
 8007364:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007368:	f103 0308 	add.w	r3, r3, #8
 800736c:	ed93 0b00 	vldr	d0, [r3]
 8007370:	f003 fb32 	bl	800a9d8 <look1_binlxpw>
 8007374:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007378:	f103 0318 	add.w	r3, r3, #24
 800737c:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 8007380:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007384:	f103 0318 	add.w	r3, r3, #24
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007394:	f7f9 f922 	bl	80005dc <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80073a0:	f101 0118 	add.w	r1, r1, #24
 80073a4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80073a8:	220c      	movs	r2, #12
 80073aa:	4998      	ldr	r1, [pc, #608]	; (800760c <SIM0_step+0x3d4>)
 80073ac:	4895      	ldr	r0, [pc, #596]	; (8007604 <SIM0_step+0x3cc>)
 80073ae:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80073b2:	f103 0308 	add.w	r3, r3, #8
 80073b6:	ed93 0b00 	vldr	d0, [r3]
 80073ba:	f003 fb0d 	bl	800a9d8 <look1_binlxpw>
 80073be:	ec51 0b10 	vmov	r0, r1, d0
 80073c2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f7f8 ff51 	bl	8000270 <__adddf3>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 80073d6:	4b8e      	ldr	r3, [pc, #568]	; (8007610 <SIM0_step+0x3d8>)
 80073d8:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80073dc:	f7f9 f8fe 	bl	80005dc <__aeabi_dmul>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80073e8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 80073ec:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80073f0:	f103 0318 	add.w	r3, r3, #24
 80073f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	f7f8 ff38 	bl	8000270 <__adddf3>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4610      	mov	r0, r2
 8007406:	4619      	mov	r1, r3
 8007408:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f7f8 ff2e 	bl	8000270 <__adddf3>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4610      	mov	r0, r2
 800741a:	4619      	mov	r1, r3
 800741c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007420:	f103 0318 	add.w	r3, r3, #24
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f7f9 f8d8 	bl	80005dc <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4692      	mov	sl, r2
 8007432:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8007434:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8007438:	f103 0318 	add.w	r3, r3, #24
 800743c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	f7f8 ff14 	bl	8000270 <__adddf3>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007454:	f7f8 ff0a 	bl	800026c <__aeabi_dsub>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8007460:	4b66      	ldr	r3, [pc, #408]	; (80075fc <SIM0_step+0x3c4>)
 8007462:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 800746a:	f7f9 f8b7 	bl	80005dc <__aeabi_dmul>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8007472:	4650      	mov	r0, sl
 8007474:	4659      	mov	r1, fp
 8007476:	f7f8 fefb 	bl	8000270 <__adddf3>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8007482:	4b63      	ldr	r3, [pc, #396]	; (8007610 <SIM0_step+0x3d8>)
 8007484:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 8007488:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800748c:	f103 0318 	add.w	r3, r3, #24
 8007490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	f7f8 feea 	bl	8000270 <__adddf3>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4650      	mov	r0, sl
 80074a2:	4659      	mov	r1, fp
 80074a4:	f7f8 fee2 	bl	800026c <__aeabi_dsub>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4610      	mov	r0, r2
 80074ae:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80074b0:	4a52      	ldr	r2, [pc, #328]	; (80075fc <SIM0_step+0x3c4>)
 80074b2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80074b6:	f103 030c 	add.w	r3, r3, #12
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3383      	adds	r3, #131	; 0x83
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f9 f889 	bl	80005dc <__aeabi_dmul>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 80074ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d2:	f7f8 fecb 	bl	800026c <__aeabi_dsub>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4692      	mov	sl, r2
 80074dc:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80074de:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80074e2:	f103 0318 	add.w	r3, r3, #24
 80074e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	f7f8 febf 	bl	8000270 <__adddf3>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
      SIM0_P.Ts);
 80074fa:	4b45      	ldr	r3, [pc, #276]	; (8007610 <SIM0_step+0x3d8>)
 80074fc:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 8007500:	f7f8 feb6 	bl	8000270 <__adddf3>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8007508:	4650      	mov	r0, sl
 800750a:	4659      	mov	r1, fp
 800750c:	f7f9 f990 	bl	8000830 <__aeabi_ddiv>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007518:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 800751c:	220c      	movs	r2, #12
 800751e:	493d      	ldr	r1, [pc, #244]	; (8007614 <SIM0_step+0x3dc>)
 8007520:	4838      	ldr	r0, [pc, #224]	; (8007604 <SIM0_step+0x3cc>)
 8007522:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007526:	f103 0308 	add.w	r3, r3, #8
 800752a:	ed93 0b00 	vldr	d0, [r3]
 800752e:	f003 fa53 	bl	800a9d8 <look1_binlxpw>
 8007532:	ec53 2b10 	vmov	r2, r3, d0
 8007536:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800753a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800753e:	f7f8 fe97 	bl	8000270 <__adddf3>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800754a:	f101 0118 	add.w	r1, r1, #24
 800754e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 8007552:	4a31      	ldr	r2, [pc, #196]	; (8007618 <SIM0_step+0x3e0>)
 8007554:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007558:	f103 030c 	add.w	r3, r3, #12
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	18d1      	adds	r1, r2, r3
 8007564:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007568:	f103 0318 	add.w	r3, r3, #24
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 8007574:	4a28      	ldr	r2, [pc, #160]	; (8007618 <SIM0_step+0x3e0>)
 8007576:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800757a:	f103 030c 	add.w	r3, r3, #12
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3386      	adds	r3, #134	; 0x86
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	18d1      	adds	r1, r2, r3
 8007586:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800758a:	f103 0308 	add.w	r3, r3, #8
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 8007596:	4a19      	ldr	r2, [pc, #100]	; (80075fc <SIM0_step+0x3c4>)
 8007598:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800759c:	f103 030c 	add.w	r3, r3, #12
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f203 1381 	addw	r3, r3, #385	; 0x181
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	481a      	ldr	r0, [pc, #104]	; (8007618 <SIM0_step+0x3e0>)
 80075b0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80075b4:	f101 010c 	add.w	r1, r1, #12
 80075b8:	6809      	ldr	r1, [r1, #0]
 80075ba:	f501 7182 	add.w	r1, r1, #260	; 0x104
 80075be:	00c9      	lsls	r1, r1, #3
 80075c0:	4401      	add	r1, r0
 80075c2:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 80075c6:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <SIM0_step+0x3c4>)
 80075c8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80075cc:	f103 030c 	add.w	r3, r3, #12
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f203 1381 	addw	r3, r3, #385	; 0x181
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4413      	add	r3, r2
 80075da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075de:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80075e2:	f103 0308 	add.w	r3, r3, #8
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 fff7 	bl	80005dc <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	f507 60fd 	add.w	r0, r7, #2024	; 0x7e8
 80075f6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80075fa:	e00f      	b.n	800761c <SIM0_step+0x3e4>
 80075fc:	2001c130 	.word	0x2001c130
 8007600:	200003e8 	.word	0x200003e8
 8007604:	20000e80 	.word	0x20000e80
 8007608:	20000ee8 	.word	0x20000ee8
 800760c:	20000380 	.word	0x20000380
 8007610:	20000360 	.word	0x20000360
 8007614:	20000e18 	.word	0x20000e18
 8007618:	2001d990 	.word	0x2001d990
 800761c:	f101 010c 	add.w	r1, r1, #12
 8007620:	6809      	ldr	r1, [r1, #0]
 8007622:	00c9      	lsls	r1, r1, #3
 8007624:	4401      	add	r1, r0
 8007626:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 800762a:	f107 0318 	add.w	r3, r7, #24
 800762e:	3b10      	subs	r3, #16
 8007630:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007634:	f102 020c 	add.w	r2, r2, #12
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	00d2      	lsls	r2, r2, #3
 800763c:	1899      	adds	r1, r3, r2
 800763e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 800764a:	4aa2      	ldr	r2, [pc, #648]	; (80078d4 <SIM0_step+0x69c>)
 800764c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007650:	f103 030c 	add.w	r3, r3, #12
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007662:	4b9d      	ldr	r3, [pc, #628]	; (80078d8 <SIM0_step+0x6a0>)
 8007664:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007668:	f7f9 f8e2 	bl	8000830 <__aeabi_ddiv>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4610      	mov	r0, r2
 8007672:	4619      	mov	r1, r3
                  * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain +
 8007674:	4a97      	ldr	r2, [pc, #604]	; (80078d4 <SIM0_step+0x69c>)
 8007676:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800767a:	f103 030c 	add.w	r3, r3, #12
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	4413      	add	r3, r2
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 ffa6 	bl	80005dc <__aeabi_dmul>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	4b8f      	ldr	r3, [pc, #572]	; (80078d8 <SIM0_step+0x6a0>)
 800769a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769e:	3318      	adds	r3, #24
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f8 ff9a 	bl	80005dc <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4610      	mov	r0, r2
 80076ae:	4619      	mov	r1, r3
 80076b0:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80076b4:	f103 0318 	add.w	r3, r3, #24
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f7f8 fdd8 	bl	8000270 <__adddf3>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4610      	mov	r0, r2
 80076c6:	4619      	mov	r1, r3
                  rtb_Memory20) * SIM0_P.Ts + SIM0_DW.Memory_PreviousInput[i];
 80076c8:	4b83      	ldr	r3, [pc, #524]	; (80078d8 <SIM0_step+0x6a0>)
 80076ca:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 80076ce:	f7f8 ff85 	bl	80005dc <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4610      	mov	r0, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	4a7e      	ldr	r2, [pc, #504]	; (80078d4 <SIM0_step+0x69c>)
 80076dc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80076e0:	f103 030c 	add.w	r3, r3, #12
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f203 1303 	addw	r3, r3, #259	; 0x103
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f8 fdbd 	bl	8000270 <__adddf3>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
    rtb_Rpz[i] = (SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 80076fa:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 80076fe:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007702:	f101 010c 	add.w	r1, r1, #12
 8007706:	6809      	ldr	r1, [r1, #0]
 8007708:	00c9      	lsls	r1, r1, #3
 800770a:	4401      	add	r1, r0
 800770c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory19[i] = rtb_is_drive;
 8007710:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007714:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007718:	f103 030c 	add.w	r3, r3, #12
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	18d1      	adds	r1, r2, r3
 8007722:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007726:	f103 0318 	add.w	r3, r3, #24
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 8007732:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007736:	f103 030c 	add.w	r3, r3, #12
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007742:	f102 020c 	add.w	r2, r2, #12
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800774c:	f103 030c 	add.w	r3, r3, #12
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b7d      	cmp	r3, #125	; 0x7d
 8007754:	f77f adbc 	ble.w	80072d0 <SIM0_step+0x98>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8007758:	4b5e      	ldr	r3, [pc, #376]	; (80078d4 <SIM0_step+0x69c>)
 800775a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800775e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	f7f9 f99f 	bl	8000aac <__aeabi_dcmpeq>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <SIM0_step+0x540>
 8007774:	2602      	movs	r6, #2
 8007776:	e000      	b.n	800777a <SIM0_step+0x542>
 8007778:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 800777a:	4b56      	ldr	r3, [pc, #344]	; (80078d4 <SIM0_step+0x69c>)
 800777c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007780:	3308      	adds	r3, #8
 8007782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007786:	2301      	movs	r3, #1
 8007788:	469a      	mov	sl, r3
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	f04f 0300 	mov.w	r3, #0
 8007792:	f7f9 f98b 	bl	8000aac <__aeabi_dcmpeq>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <SIM0_step+0x568>
 800779c:	2300      	movs	r3, #0
 800779e:	469a      	mov	sl, r3
 80077a0:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80077a4:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80077a6:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 80077a8:	4b4a      	ldr	r3, [pc, #296]	; (80078d4 <SIM0_step+0x69c>)
 80077aa:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80077ae:	3318      	adds	r3, #24
 80077b0:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80077b2:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80077b4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077b8:	f102 020c 	add.w	r2, r2, #12
 80077bc:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 80077be:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077c2:	f103 030c 	add.w	r3, r3, #12
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a43      	ldr	r2, [pc, #268]	; (80078d8 <SIM0_step+0x6a0>)
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80077d0:	3318      	adds	r3, #24
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80077d8:	f102 0217 	add.w	r2, r2, #23
 80077dc:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 80077de:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077e2:	f103 030c 	add.w	r3, r3, #12
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	4a3b      	ldr	r2, [pc, #236]	; (80078d8 <SIM0_step+0x6a0>)
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80077f2:	3318      	adds	r3, #24
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80077fa:	f102 0216 	add.w	r2, r2, #22
 80077fe:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 8007800:	4a36      	ldr	r2, [pc, #216]	; (80078dc <SIM0_step+0x6a4>)
 8007802:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007806:	f103 0317 	add.w	r3, r3, #23
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 800780e:	4b31      	ldr	r3, [pc, #196]	; (80078d4 <SIM0_step+0x69c>)
 8007810:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007814:	3310      	adds	r3, #16
 8007816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	f7f9 f943 	bl	8000aac <__aeabi_dcmpeq>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <SIM0_step+0x5f8>
 800782c:	2602      	movs	r6, #2
 800782e:	e000      	b.n	8007832 <SIM0_step+0x5fa>
 8007830:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8007832:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <SIM0_step+0x69c>)
 8007834:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007838:	3318      	adds	r3, #24
 800783a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800783e:	2301      	movs	r3, #1
 8007840:	469a      	mov	sl, r3
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	f7f9 f92f 	bl	8000aac <__aeabi_dcmpeq>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <SIM0_step+0x620>
 8007854:	2300      	movs	r3, #0
 8007856:	469a      	mov	sl, r3
 8007858:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 800785c:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 800785e:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <SIM0_step+0x69c>)
 8007862:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8007866:	3319      	adds	r3, #25
 8007868:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 800786a:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 800786c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007870:	f102 020c 	add.w	r2, r2, #12
 8007874:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 8007876:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800787a:	f103 030c 	add.w	r3, r3, #12
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a15      	ldr	r2, [pc, #84]	; (80078d8 <SIM0_step+0x6a0>)
 8007882:	4413      	add	r3, r2
 8007884:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8007888:	3308      	adds	r3, #8
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007890:	f102 0215 	add.w	r2, r2, #21
 8007894:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 8007896:	4a11      	ldr	r2, [pc, #68]	; (80078dc <SIM0_step+0x6a4>)
 8007898:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800789c:	f103 0315 	add.w	r3, r3, #21
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 80078a4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80078a8:	f103 0316 	add.w	r3, r3, #22
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <SIM0_step+0x6a8>
 80078b2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80078b6:	f103 030c 	add.w	r3, r3, #12
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	4a06      	ldr	r2, [pc, #24]	; (80078d8 <SIM0_step+0x6a0>)
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80078c6:	3308      	adds	r3, #8
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7f8 fe0c 	bl	80004e8 <__aeabi_ui2d>
 80078d0:	e00a      	b.n	80078e8 <SIM0_step+0x6b0>
 80078d2:	bf00      	nop
 80078d4:	2001c130 	.word	0x2001c130
 80078d8:	20000360 	.word	0x20000360
 80078dc:	2001d990 	.word	0x2001d990
 80078e0:	f04f 0000 	mov.w	r0, #0
 80078e4:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 80078e8:	4bba      	ldr	r3, [pc, #744]	; (8007bd4 <SIM0_step+0x99c>)
 80078ea:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 80078f2:	f7f8 fe73 	bl	80005dc <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80078fe:	f101 0108 	add.w	r1, r1, #8
 8007902:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 8007906:	49b4      	ldr	r1, [pc, #720]	; (8007bd8 <SIM0_step+0x9a0>)
 8007908:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800790c:	f103 0308 	add.w	r3, r3, #8
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 8007918:	4bae      	ldr	r3, [pc, #696]	; (8007bd4 <SIM0_step+0x99c>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007922:	f101 0108 	add.w	r1, r1, #8
 8007926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792a:	f7f8 fe57 	bl	80005dc <__aeabi_dmul>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007936:	f101 0108 	add.w	r1, r1, #8
 800793a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 800793e:	49a6      	ldr	r1, [pc, #664]	; (8007bd8 <SIM0_step+0x9a0>)
 8007940:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007944:	f103 0308 	add.w	r3, r3, #8
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 8007950:	4ba0      	ldr	r3, [pc, #640]	; (8007bd4 <SIM0_step+0x99c>)
 8007952:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007956:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800795a:	f101 0108 	add.w	r1, r1, #8
 800795e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007962:	f7f8 fe3b 	bl	80005dc <__aeabi_dmul>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800796e:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 8007972:	4b98      	ldr	r3, [pc, #608]	; (8007bd4 <SIM0_step+0x99c>)
 8007974:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007978:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800797c:	f101 0108 	add.w	r1, r1, #8
 8007980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007984:	f7f8 fe2a 	bl	80005dc <__aeabi_dmul>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007990:	f101 0108 	add.w	r1, r1, #8
 8007994:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 8007998:	2301      	movs	r3, #1
 800799a:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800799e:	f102 020c 	add.w	r2, r2, #12
 80079a2:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80079aa:	f102 0204 	add.w	r2, r2, #4
 80079ae:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80079bc:	f101 0118 	add.w	r1, r1, #24
 80079c0:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 80079c4:	4b83      	ldr	r3, [pc, #524]	; (8007bd4 <SIM0_step+0x99c>)
 80079c6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80079ca:	3308      	adds	r3, #8
 80079cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	f7f9 f868 	bl	8000aac <__aeabi_dcmpeq>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10c      	bne.n	80079fc <SIM0_step+0x7c4>
    i = 2;
 80079e2:	2302      	movs	r3, #2
 80079e4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80079e8:	f102 020c 	add.w	r2, r2, #12
 80079ec:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80079f4:	f102 0204 	add.w	r2, r2, #4
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	e01d      	b.n	8007a38 <SIM0_step+0x800>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 80079fc:	4b75      	ldr	r3, [pc, #468]	; (8007bd4 <SIM0_step+0x99c>)
 80079fe:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007a02:	3310      	adds	r3, #16
 8007a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	f7f9 f84c 	bl	8000aac <__aeabi_dcmpeq>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10e      	bne.n	8007a38 <SIM0_step+0x800>
    i = 3;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007a20:	f102 020c 	add.w	r2, r2, #12
 8007a24:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	4b6c      	ldr	r3, [pc, #432]	; (8007bdc <SIM0_step+0x9a4>)
 8007a2c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007a30:	f101 0118 	add.w	r1, r1, #24
 8007a34:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 8007a38:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007a44:	f101 0108 	add.w	r1, r1, #8
 8007a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a4c:	f7f8 fdc6 	bl	80005dc <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007a58:	f101 0118 	add.w	r1, r1, #24
 8007a5c:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 8007a60:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <SIM0_step+0x99c>)
 8007a62:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007a66:	3318      	adds	r3, #24
 8007a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a6c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007a70:	f103 0318 	add.w	r3, r3, #24
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f7f8 fdb0 	bl	80005dc <__aeabi_dmul>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007a84:	f101 0118 	add.w	r1, r1, #24
 8007a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a8c:	f7f8 fda6 	bl	80005dc <__aeabi_dmul>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007a98:	f101 0118 	add.w	r1, r1, #24
 8007a9c:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 8007aa0:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007aac:	f101 0110 	add.w	r1, r1, #16
 8007ab0:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007aba:	f102 0208 	add.w	r2, r2, #8
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e026      	b.n	8007b10 <SIM0_step+0x8d8>
    rtb_y += rtb_Memory15[iU + 1];
 8007ac2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007ac6:	f103 0308 	add.w	r3, r3, #8
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007ade:	f101 0110 	add.w	r1, r1, #16
 8007ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae6:	f7f8 fbc3 	bl	8000270 <__adddf3>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007af2:	f101 0110 	add.w	r1, r1, #16
 8007af6:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8007afa:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007afe:	f103 0308 	add.w	r3, r3, #8
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007b0a:	f102 0208 	add.w	r2, r2, #8
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007b14:	f103 0308 	add.w	r3, r3, #8
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b7c      	cmp	r3, #124	; 0x7c
 8007b1c:	ddd1      	ble.n	8007ac2 <SIM0_step+0x88a>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 8007b1e:	4b2d      	ldr	r3, [pc, #180]	; (8007bd4 <SIM0_step+0x99c>)
 8007b20:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b24:	3308      	adds	r3, #8
 8007b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f7f8 ffbb 	bl	8000aac <__aeabi_dcmpeq>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d151      	bne.n	8007be0 <SIM0_step+0x9a8>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 8007b3c:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <SIM0_step+0x99c>)
 8007b3e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b46:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007b4a:	f103 0310 	add.w	r3, r3, #16
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fb8b 	bl	800026c <__aeabi_dsub>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b5e:	f101 0110 	add.w	r1, r1, #16
 8007b62:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b72:	f101 0110 	add.w	r1, r1, #16
 8007b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b7a:	f7f8 ffa1 	bl	8000ac0 <__aeabi_dcmplt>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <SIM0_step+0x960>
      rtb_Current = 0.0;
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b90:	f101 0110 	add.w	r1, r1, #16
 8007b94:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <SIM0_step+0x99c>)
 8007b9a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007b9e:	3310      	adds	r3, #16
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007ba8:	f101 0110 	add.w	r1, r1, #16
 8007bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb0:	f7f8 ffa4 	bl	8000afc <__aeabi_dcmpgt>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01c      	beq.n	8007bf4 <SIM0_step+0x9bc>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <SIM0_step+0x99c>)
 8007bbc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007bca:	f101 0110 	add.w	r1, r1, #16
 8007bce:	e9c1 2300 	strd	r2, r3, [r1]
 8007bd2:	e00f      	b.n	8007bf4 <SIM0_step+0x9bc>
 8007bd4:	2001c130 	.word	0x2001c130
 8007bd8:	2001d990 	.word	0x2001d990
 8007bdc:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007bec:	f101 0110 	add.w	r1, r1, #16
 8007bf0:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c00:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 8007c04:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007c08:	f103 030c 	add.w	r3, r3, #12
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d109      	bne.n	8007c26 <SIM0_step+0x9ee>
    rtb_Exp = -1.0;
 8007c12:	f04f 0200 	mov.w	r2, #0
 8007c16:	4bc0      	ldr	r3, [pc, #768]	; (8007f18 <SIM0_step+0xce0>)
 8007c18:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c1c:	f101 0108 	add.w	r1, r1, #8
 8007c20:	e9c1 2300 	strd	r2, r3, [r1]
 8007c24:	e1d3      	b.n	8007fce <SIM0_step+0xd96>
  } else if (i == 2) {
 8007c26:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007c2a:	f103 030c 	add.w	r3, r3, #12
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	f040 8099 	bne.w	8007d68 <SIM0_step+0xb30>
    if (rtb_Memory22 != 0.0) {
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007c42:	f101 0108 	add.w	r1, r1, #8
 8007c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c4a:	f7f8 ff2f 	bl	8000aac <__aeabi_dcmpeq>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d17f      	bne.n	8007d54 <SIM0_step+0xb1c>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c64:	f7f8 ff22 	bl	8000aac <__aeabi_dcmpeq>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00e      	beq.n	8007c8c <SIM0_step+0xa54>
 8007c6e:	f04f 0200 	mov.w	r2, #0
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c7a:	f101 0108 	add.w	r1, r1, #8
 8007c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c82:	f7f8 ff13 	bl	8000aac <__aeabi_dcmpeq>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d141      	bne.n	8007d10 <SIM0_step+0xad8>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007c8c:	4ba3      	ldr	r3, [pc, #652]	; (8007f1c <SIM0_step+0xce4>)
 8007c8e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c92:	3318      	adds	r3, #24
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007c9c:	f101 0110 	add.w	r1, r1, #16
 8007ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca4:	f7f8 fae2 	bl	800026c <__aeabi_dsub>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007cb0:	4b9a      	ldr	r3, [pc, #616]	; (8007f1c <SIM0_step+0xce4>)
 8007cb2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007cb6:	3318      	adds	r3, #24
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007cbc:	f7f8 fad8 	bl	8000270 <__adddf3>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007cc8:	f101 0108 	add.w	r1, r1, #8
 8007ccc:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 8007cd0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007cd4:	f103 0304 	add.w	r3, r3, #4
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	f7f8 fc15 	bl	8000508 <__aeabi_i2d>
 8007cde:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007ce2:	f103 0310 	add.w	r3, r3, #16
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fc77 	bl	80005dc <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007cf6:	f101 0118 	add.w	r1, r1, #24
 8007cfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cfe:	f7f8 fc6d 	bl	80005dc <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d0a:	e9c1 2300 	strd	r2, r3, [r1]
 8007d0e:	e15e      	b.n	8007fce <SIM0_step+0xd96>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007d10:	4b82      	ldr	r3, [pc, #520]	; (8007f1c <SIM0_step+0xce4>)
 8007d12:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007d16:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 8007d1a:	4b80      	ldr	r3, [pc, #512]	; (8007f1c <SIM0_step+0xce4>)
 8007d1c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007d20:	3318      	adds	r3, #24
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007d26:	f7f8 faa1 	bl	800026c <__aeabi_dsub>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007d32:	4b7a      	ldr	r3, [pc, #488]	; (8007f1c <SIM0_step+0xce4>)
 8007d34:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007d38:	3318      	adds	r3, #24
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007d3e:	f7f8 fa97 	bl	8000270 <__adddf3>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d4a:	f101 0108 	add.w	r1, r1, #8
 8007d4e:	e9c1 2300 	strd	r2, r3, [r1]
 8007d52:	e13c      	b.n	8007fce <SIM0_step+0xd96>
      }
    } else {
      rtb_Exp = -1.0;
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	4b6f      	ldr	r3, [pc, #444]	; (8007f18 <SIM0_step+0xce0>)
 8007d5a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d5e:	f101 0108 	add.w	r1, r1, #8
 8007d62:	e9c1 2300 	strd	r2, r3, [r1]
 8007d66:	e132      	b.n	8007fce <SIM0_step+0xd96>
    }
  } else if (rtb_Memory22 != 0.0) {
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007d74:	f101 0108 	add.w	r1, r1, #8
 8007d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7c:	f7f8 fe96 	bl	8000aac <__aeabi_dcmpeq>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 811a 	bne.w	8007fbc <SIM0_step+0xd84>
    if (rtb_Product1_n != 0.0) {
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d98:	f7f8 fe88 	bl	8000aac <__aeabi_dcmpeq>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d152      	bne.n	8007e48 <SIM0_step+0xc10>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8007da2:	4b5e      	ldr	r3, [pc, #376]	; (8007f1c <SIM0_step+0xce4>)
 8007da4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007da8:	3318      	adds	r3, #24
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007db2:	f101 0110 	add.w	r1, r1, #16
 8007db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dba:	f7f8 fa57 	bl	800026c <__aeabi_dsub>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	a352      	add	r3, pc, #328	; (adr r3, 8007f10 <SIM0_step+0xcd8>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f7f8 fc06 	bl	80005dc <__aeabi_dmul>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007dd8:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <SIM0_step+0xce4>)
 8007dda:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007dde:	3318      	adds	r3, #24
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8007de4:	f7f8 fa44 	bl	8000270 <__adddf3>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007df0:	f101 0108 	add.w	r1, r1, #8
 8007df4:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 8007df8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007dfc:	f103 0308 	add.w	r3, r3, #8
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007e08:	f101 0110 	add.w	r1, r1, #16
 8007e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e10:	f7f8 fa2c 	bl	800026c <__aeabi_dsub>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	4b3f      	ldr	r3, [pc, #252]	; (8007f20 <SIM0_step+0xce8>)
 8007e22:	f7f8 fd05 	bl	8000830 <__aeabi_ddiv>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007e2e:	f101 0118 	add.w	r1, r1, #24
 8007e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e36:	f7f8 fa19 	bl	800026c <__aeabi_dsub>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007e42:	e9c1 2300 	strd	r2, r3, [r1]
 8007e46:	e0c2      	b.n	8007fce <SIM0_step+0xd96>
    } else if (rtb_Exp != 0.0) {
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007e54:	f101 0108 	add.w	r1, r1, #8
 8007e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e5c:	f7f8 fe26 	bl	8000aac <__aeabi_dcmpeq>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d162      	bne.n	8007f2c <SIM0_step+0xcf4>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007e66:	4b2d      	ldr	r3, [pc, #180]	; (8007f1c <SIM0_step+0xce4>)
 8007e68:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007e6c:	3318      	adds	r3, #24
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007e76:	f101 0110 	add.w	r1, r1, #16
 8007e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e7e:	f7f8 f9f5 	bl	800026c <__aeabi_dsub>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	4b25      	ldr	r3, [pc, #148]	; (8007f24 <SIM0_step+0xcec>)
 8007e90:	f7f8 fcce 	bl	8000830 <__aeabi_ddiv>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007e9c:	4b1f      	ldr	r3, [pc, #124]	; (8007f1c <SIM0_step+0xce4>)
 8007e9e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007ea2:	3318      	adds	r3, #24
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007ea8:	f7f8 f9e2 	bl	8000270 <__adddf3>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007eb4:	f101 0108 	add.w	r1, r1, #8
 8007eb8:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 8007ebc:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007ec0:	f103 0308 	add.w	r3, r3, #8
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007ecc:	f101 0110 	add.w	r1, r1, #16
 8007ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed4:	f7f8 f9ca 	bl	800026c <__aeabi_dsub>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <SIM0_step+0xcf0>)
 8007ee6:	f7f8 fca3 	bl	8000830 <__aeabi_ddiv>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007ef2:	f101 0118 	add.w	r1, r1, #24
 8007ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efa:	f7f8 f9b7 	bl	800026c <__aeabi_dsub>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007f06:	e9c1 2300 	strd	r2, r3, [r1]
 8007f0a:	e060      	b.n	8007fce <SIM0_step+0xd96>
 8007f0c:	f3af 8000 	nop.w
 8007f10:	9999999a 	.word	0x9999999a
 8007f14:	3fe99999 	.word	0x3fe99999
 8007f18:	bff00000 	.word	0xbff00000
 8007f1c:	2001c130 	.word	0x2001c130
 8007f20:	3fe00000 	.word	0x3fe00000
 8007f24:	40490000 	.word	0x40490000
 8007f28:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007f2c:	4bad      	ldr	r3, [pc, #692]	; (80081e4 <SIM0_step+0xfac>)
 8007f2e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007f32:	3318      	adds	r3, #24
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f04f 0000 	mov.w	r0, #0
 8007f3c:	f04f 0100 	mov.w	r1, #0
 8007f40:	f7f8 f994 	bl	800026c <__aeabi_dsub>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	4ba5      	ldr	r3, [pc, #660]	; (80081e8 <SIM0_step+0xfb0>)
 8007f52:	f7f8 fc6d 	bl	8000830 <__aeabi_ddiv>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007f5e:	4ba1      	ldr	r3, [pc, #644]	; (80081e4 <SIM0_step+0xfac>)
 8007f60:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007f64:	3318      	adds	r3, #24
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007f6a:	f7f8 f981 	bl	8000270 <__adddf3>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007f76:	f101 0108 	add.w	r1, r1, #8
 8007f7a:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 8007f7e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007f82:	f103 0308 	add.w	r3, r3, #8
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f04f 0000 	mov.w	r0, #0
 8007f8e:	f04f 0100 	mov.w	r1, #0
 8007f92:	f7f8 f96b 	bl	800026c <__aeabi_dsub>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4690      	mov	r8, r2
 8007f9c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	4b91      	ldr	r3, [pc, #580]	; (80081ec <SIM0_step+0xfb4>)
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	4649      	mov	r1, r9
 8007faa:	f7f8 fc41 	bl	8000830 <__aeabi_ddiv>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007fb6:	e9c1 2300 	strd	r2, r3, [r1]
 8007fba:	e008      	b.n	8007fce <SIM0_step+0xd96>
    }
  } else {
    rtb_Exp = -1.0;
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	4b8b      	ldr	r3, [pc, #556]	; (80081f0 <SIM0_step+0xfb8>)
 8007fc2:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007fc6:	f101 0108 	add.w	r1, r1, #8
 8007fca:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 8007fce:	4989      	ldr	r1, [pc, #548]	; (80081f4 <SIM0_step+0xfbc>)
 8007fd0:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007fd4:	f103 0308 	add.w	r3, r3, #8
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 8007fe0:	4984      	ldr	r1, [pc, #528]	; (80081f4 <SIM0_step+0xfbc>)
 8007fe2:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 8007fee:	4981      	ldr	r1, [pc, #516]	; (80081f4 <SIM0_step+0xfbc>)
 8007ff0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007ff4:	f103 0310 	add.w	r3, r3, #16
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 8008000:	497c      	ldr	r1, [pc, #496]	; (80081f4 <SIM0_step+0xfbc>)
 8008002:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008006:	f103 0308 	add.w	r3, r3, #8
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 8008012:	4978      	ldr	r1, [pc, #480]	; (80081f4 <SIM0_step+0xfbc>)
 8008014:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 8008020:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008024:	4974      	ldr	r1, [pc, #464]	; (80081f8 <SIM0_step+0xfc0>)
 8008026:	4875      	ldr	r0, [pc, #468]	; (80081fc <SIM0_step+0xfc4>)
 8008028:	f013 fa04 	bl	801b434 <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 800802c:	4b74      	ldr	r3, [pc, #464]	; (8008200 <SIM0_step+0xfc8>)
 800802e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008032:	4970      	ldr	r1, [pc, #448]	; (80081f4 <SIM0_step+0xfbc>)
 8008034:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 8008038:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 800803c:	4b69      	ldr	r3, [pc, #420]	; (80081e4 <SIM0_step+0xfac>)
 800803e:	f603 0108 	addw	r1, r3, #2056	; 0x808
 8008042:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 800804e:	4b65      	ldr	r3, [pc, #404]	; (80081e4 <SIM0_step+0xfac>)
 8008050:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 8008054:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008058:	f103 0318 	add.w	r3, r3, #24
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 8008064:	4b5f      	ldr	r3, [pc, #380]	; (80081e4 <SIM0_step+0xfac>)
 8008066:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800806a:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 800806e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008072:	f103 0318 	add.w	r3, r3, #24
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f7f8 f8f9 	bl	8000270 <__adddf3>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4614      	mov	r4, r2
 8008084:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008088:	4b56      	ldr	r3, [pc, #344]	; (80081e4 <SIM0_step+0xfac>)
 800808a:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800808e:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 8008092:	2300      	movs	r3, #0
 8008094:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8008098:	f102 020c 	add.w	r2, r2, #12
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	e109      	b.n	80082b4 <SIM0_step+0x107c>
    rtb_Memory22 = rtb_Memory21[i];
 80080a0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 80080a4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80080a8:	f103 030c 	add.w	r3, r3, #12
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	4413      	add	r3, r2
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80080ba:	f101 0108 	add.w	r1, r1, #8
 80080be:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Rpz[i];
 80080c2:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80080c6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80080ca:	f103 030c 	add.w	r3, r3, #12
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	4413      	add	r3, r2
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80080dc:	f101 0118 	add.w	r1, r1, #24
 80080e0:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Memory19[i];
 80080e4:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 80080e8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80080ec:	f103 030c 	add.w	r3, r3, #12
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	4413      	add	r3, r2
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80080fe:	f101 0118 	add.w	r1, r1, #24
 8008102:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 8008106:	4a37      	ldr	r2, [pc, #220]	; (80081e4 <SIM0_step+0xfac>)
 8008108:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800810c:	f103 030c 	add.w	r3, r3, #12
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3305      	adds	r3, #5
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	18d1      	adds	r1, r2, r3
 8008118:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800811c:	f103 0318 	add.w	r3, r3, #24
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 8008128:	f107 0318 	add.w	r3, r7, #24
 800812c:	3b10      	subs	r3, #16
 800812e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8008132:	f102 020c 	add.w	r2, r2, #12
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	00d2      	lsls	r2, r2, #3
 800813a:	4413      	add	r3, r2
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	4828      	ldr	r0, [pc, #160]	; (80081e4 <SIM0_step+0xfac>)
 8008142:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8008146:	f101 010c 	add.w	r1, r1, #12
 800814a:	6809      	ldr	r1, [r1, #0]
 800814c:	3183      	adds	r1, #131	; 0x83
 800814e:	00c9      	lsls	r1, r1, #3
 8008150:	4401      	add	r1, r0
 8008152:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 8008156:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800815a:	f103 0308 	add.w	r3, r3, #8
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8008166:	f101 0118 	add.w	r1, r1, #24
 800816a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800816e:	f7f8 fcc5 	bl	8000afc <__aeabi_dcmpgt>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d012      	beq.n	800819e <SIM0_step+0xf66>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 8008178:	4a1a      	ldr	r2, [pc, #104]	; (80081e4 <SIM0_step+0xfac>)
 800817a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800817e:	f103 030c 	add.w	r3, r3, #12
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	18d1      	adds	r1, r2, r3
 800818c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008190:	f103 0308 	add.w	r3, r3, #8
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	e9c1 2300 	strd	r2, r3, [r1]
 800819c:	e044      	b.n	8008228 <SIM0_step+0xff0>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 800819e:	4b18      	ldr	r3, [pc, #96]	; (8008200 <SIM0_step+0xfc8>)
 80081a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80081ac:	f101 0118 	add.w	r1, r1, #24
 80081b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b4:	f7f8 fc84 	bl	8000ac0 <__aeabi_dcmplt>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d022      	beq.n	8008204 <SIM0_step+0xfcc>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 80081be:	4b10      	ldr	r3, [pc, #64]	; (8008200 <SIM0_step+0xfc8>)
 80081c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	4806      	ldr	r0, [pc, #24]	; (80081e4 <SIM0_step+0xfac>)
 80081ca:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80081ce:	f101 010c 	add.w	r1, r1, #12
 80081d2:	6809      	ldr	r1, [r1, #0]
 80081d4:	f201 1103 	addw	r1, r1, #259	; 0x103
 80081d8:	00c9      	lsls	r1, r1, #3
 80081da:	4401      	add	r1, r0
 80081dc:	e9c1 2300 	strd	r2, r3, [r1]
 80081e0:	e022      	b.n	8008228 <SIM0_step+0xff0>
 80081e2:	bf00      	nop
 80081e4:	2001c130 	.word	0x2001c130
 80081e8:	40140000 	.word	0x40140000
 80081ec:	40240000 	.word	0x40240000
 80081f0:	bff00000 	.word	0xbff00000
 80081f4:	2001d990 	.word	0x2001d990
 80081f8:	20000c38 	.word	0x20000c38
 80081fc:	2001e5a0 	.word	0x2001e5a0
 8008200:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 8008204:	4a94      	ldr	r2, [pc, #592]	; (8008458 <SIM0_step+0x1220>)
 8008206:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800820a:	f103 030c 	add.w	r3, r3, #12
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008214:	00db      	lsls	r3, r3, #3
 8008216:	18d1      	adds	r1, r2, r3
 8008218:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800821c:	f103 0318 	add.w	r3, r3, #24
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 8008228:	4a8b      	ldr	r2, [pc, #556]	; (8008458 <SIM0_step+0x1220>)
 800822a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800822e:	f103 030c 	add.w	r3, r3, #12
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f203 1381 	addw	r3, r3, #385	; 0x181
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	18d1      	adds	r1, r2, r3
 800823c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008240:	f103 0308 	add.w	r3, r3, #8
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 800824c:	4a83      	ldr	r2, [pc, #524]	; (800845c <SIM0_step+0x1224>)
 800824e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008252:	f103 030c 	add.w	r3, r3, #12
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	330d      	adds	r3, #13
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	4413      	add	r3, r2
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	487d      	ldr	r0, [pc, #500]	; (8008458 <SIM0_step+0x1220>)
 8008264:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8008268:	f101 010c 	add.w	r1, r1, #12
 800826c:	6809      	ldr	r1, [r1, #0]
 800826e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8008272:	00c9      	lsls	r1, r1, #3
 8008274:	4401      	add	r1, r0
 8008276:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 800827a:	4a77      	ldr	r2, [pc, #476]	; (8008458 <SIM0_step+0x1220>)
 800827c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008280:	f103 030c 	add.w	r3, r3, #12
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	18d1      	adds	r1, r2, r3
 800828e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008292:	f103 0318 	add.w	r3, r3, #24
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800829e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80082a2:	f103 030c 	add.w	r3, r3, #12
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3301      	adds	r3, #1
 80082aa:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80082ae:	f102 020c 	add.w	r2, r2, #12
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80082b8:	f103 030c 	add.w	r3, r3, #12
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b7d      	cmp	r3, #125	; 0x7d
 80082c0:	f77f aeee 	ble.w	80080a0 <SIM0_step+0xe68>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 80082c4:	4b65      	ldr	r3, [pc, #404]	; (800845c <SIM0_step+0x1224>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	4963      	ldr	r1, [pc, #396]	; (8008458 <SIM0_step+0x1220>)
 80082cc:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 80082d0:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 80082d4:	4b61      	ldr	r3, [pc, #388]	; (800845c <SIM0_step+0x1224>)
 80082d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80082da:	4b5f      	ldr	r3, [pc, #380]	; (8008458 <SIM0_step+0x1220>)
 80082dc:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80082e0:	3308      	adds	r3, #8
 80082e2:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 80082e6:	4b5c      	ldr	r3, [pc, #368]	; (8008458 <SIM0_step+0x1220>)
 80082e8:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80082ec:	3318      	adds	r3, #24
 80082ee:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80082f2:	f102 0217 	add.w	r2, r2, #23
 80082f6:	7812      	ldrb	r2, [r2, #0]
 80082f8:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 80082fa:	4b58      	ldr	r3, [pc, #352]	; (800845c <SIM0_step+0x1224>)
 80082fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008300:	4b55      	ldr	r3, [pc, #340]	; (8008458 <SIM0_step+0x1220>)
 8008302:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008306:	3310      	adds	r3, #16
 8008308:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 800830c:	4b53      	ldr	r3, [pc, #332]	; (800845c <SIM0_step+0x1224>)
 800830e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008312:	4b51      	ldr	r3, [pc, #324]	; (8008458 <SIM0_step+0x1220>)
 8008314:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008318:	3318      	adds	r3, #24
 800831a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 800831e:	4b4e      	ldr	r3, [pc, #312]	; (8008458 <SIM0_step+0x1220>)
 8008320:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008324:	3319      	adds	r3, #25
 8008326:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800832a:	f102 0215 	add.w	r2, r2, #21
 800832e:	7812      	ldrb	r2, [r2, #0]
 8008330:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 8008332:	4b4a      	ldr	r3, [pc, #296]	; (800845c <SIM0_step+0x1224>)
 8008334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008338:	4947      	ldr	r1, [pc, #284]	; (8008458 <SIM0_step+0x1220>)
 800833a:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800833e:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 8008342:	4b45      	ldr	r3, [pc, #276]	; (8008458 <SIM0_step+0x1220>)
 8008344:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008348:	3308      	adds	r3, #8
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	4942      	ldr	r1, [pc, #264]	; (8008458 <SIM0_step+0x1220>)
 8008350:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 8008354:	4b40      	ldr	r3, [pc, #256]	; (8008458 <SIM0_step+0x1220>)
 8008356:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800835a:	493f      	ldr	r1, [pc, #252]	; (8008458 <SIM0_step+0x1220>)
 800835c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 8008360:	4b3d      	ldr	r3, [pc, #244]	; (8008458 <SIM0_step+0x1220>)
 8008362:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008366:	3310      	adds	r3, #16
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	493a      	ldr	r1, [pc, #232]	; (8008458 <SIM0_step+0x1220>)
 800836e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 8008372:	4b39      	ldr	r3, [pc, #228]	; (8008458 <SIM0_step+0x1220>)
 8008374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008378:	4937      	ldr	r1, [pc, #220]	; (8008458 <SIM0_step+0x1220>)
 800837a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 800837e:	4b36      	ldr	r3, [pc, #216]	; (8008458 <SIM0_step+0x1220>)
 8008380:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	4933      	ldr	r1, [pc, #204]	; (8008458 <SIM0_step+0x1220>)
 800838a:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 800838e:	4b33      	ldr	r3, [pc, #204]	; (800845c <SIM0_step+0x1224>)
 8008390:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008394:	4b30      	ldr	r3, [pc, #192]	; (8008458 <SIM0_step+0x1220>)
 8008396:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800839a:	3308      	adds	r3, #8
 800839c:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 80083a0:	4b2e      	ldr	r3, [pc, #184]	; (800845c <SIM0_step+0x1224>)
 80083a2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80083a6:	4b2c      	ldr	r3, [pc, #176]	; (8008458 <SIM0_step+0x1220>)
 80083a8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80083ac:	3310      	adds	r3, #16
 80083ae:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 80083b2:	4b2a      	ldr	r3, [pc, #168]	; (800845c <SIM0_step+0x1224>)
 80083b4:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80083b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083bc:	4b26      	ldr	r3, [pc, #152]	; (8008458 <SIM0_step+0x1220>)
 80083be:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80083c2:	3318      	adds	r3, #24
 80083c4:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 80083c8:	4b24      	ldr	r3, [pc, #144]	; (800845c <SIM0_step+0x1224>)
 80083ca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80083ce:	4922      	ldr	r1, [pc, #136]	; (8008458 <SIM0_step+0x1220>)
 80083d0:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 80083d4:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 80083d8:	4b20      	ldr	r3, [pc, #128]	; (800845c <SIM0_step+0x1224>)
 80083da:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80083de:	4b1e      	ldr	r3, [pc, #120]	; (8008458 <SIM0_step+0x1220>)
 80083e0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80083e4:	3308      	adds	r3, #8
 80083e6:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 80083ea:	4b1c      	ldr	r3, [pc, #112]	; (800845c <SIM0_step+0x1224>)
 80083ec:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80083f0:	4b19      	ldr	r3, [pc, #100]	; (8008458 <SIM0_step+0x1220>)
 80083f2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80083f6:	3310      	adds	r3, #16
 80083f8:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 80083fc:	4b16      	ldr	r3, [pc, #88]	; (8008458 <SIM0_step+0x1220>)
 80083fe:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8008402:	3318      	adds	r3, #24
 8008404:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8008408:	f102 0208 	add.w	r2, r2, #8
 800840c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008410:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 8008414:	4b11      	ldr	r3, [pc, #68]	; (800845c <SIM0_step+0x1224>)
 8008416:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800841a:	490f      	ldr	r1, [pc, #60]	; (8008458 <SIM0_step+0x1220>)
 800841c:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8008420:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 8008424:	4b0d      	ldr	r3, [pc, #52]	; (800845c <SIM0_step+0x1224>)
 8008426:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800842a:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <SIM0_step+0x1220>)
 800842c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008430:	3308      	adds	r3, #8
 8008432:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <SIM0_step+0x1224>)
 8008438:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <SIM0_step+0x1220>)
 800843e:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008442:	3310      	adds	r3, #16
 8008444:	e9c3 0100 	strd	r0, r1, [r3]
}
 8008448:	bf00      	nop
 800844a:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	bf00      	nop
 8008458:	2001c130 	.word	0x2001c130
 800845c:	2001e788 	.word	0x2001e788

08008460 <SIM0_initialize>:

void SIM0_initialize(void)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <SIM0_initialize+0x48>)
 8008468:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	490e      	ldr	r1, [pc, #56]	; (80084ac <SIM0_initialize+0x4c>)
 8008472:	f601 0108 	addw	r1, r1, #2056	; 0x808
 8008476:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 800847a:	4b0b      	ldr	r3, [pc, #44]	; (80084a8 <SIM0_initialize+0x48>)
 800847c:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	4909      	ldr	r1, [pc, #36]	; (80084ac <SIM0_initialize+0x4c>)
 8008486:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 800848a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 800848e:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <SIM0_initialize+0x48>)
 8008490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	4904      	ldr	r1, [pc, #16]	; (80084ac <SIM0_initialize+0x4c>)
 800849a:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 800849e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
 80084a6:	e05b      	b.n	8008560 <SIM0_initialize+0x100>
 80084a8:	20000360 	.word	0x20000360
 80084ac:	2001c130 	.word	0x2001c130
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 80084b0:	4ba4      	ldr	r3, [pc, #656]	; (8008744 <SIM0_initialize+0x2e4>)
 80084b2:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	48a3      	ldr	r0, [pc, #652]	; (8008748 <SIM0_initialize+0x2e8>)
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	3105      	adds	r1, #5
 80084c0:	00c9      	lsls	r1, r1, #3
 80084c2:	4401      	add	r1, r0
 80084c4:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 80084c8:	4a9e      	ldr	r2, [pc, #632]	; (8008744 <SIM0_initialize+0x2e4>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	489b      	ldr	r0, [pc, #620]	; (8008748 <SIM0_initialize+0x2e8>)
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	3183      	adds	r1, #131	; 0x83
 80084de:	00c9      	lsls	r1, r1, #3
 80084e0:	4401      	add	r1, r0
 80084e2:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 80084e6:	4a97      	ldr	r2, [pc, #604]	; (8008744 <SIM0_initialize+0x2e4>)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	339d      	adds	r3, #157	; 0x9d
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	4413      	add	r3, r2
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	4894      	ldr	r0, [pc, #592]	; (8008748 <SIM0_initialize+0x2e8>)
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	f201 1103 	addw	r1, r1, #259	; 0x103
 80084fc:	00c9      	lsls	r1, r1, #3
 80084fe:	4401      	add	r1, r0
 8008500:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 8008504:	4a8f      	ldr	r2, [pc, #572]	; (8008744 <SIM0_initialize+0x2e4>)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	331f      	adds	r3, #31
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4413      	add	r3, r2
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	488d      	ldr	r0, [pc, #564]	; (8008748 <SIM0_initialize+0x2e8>)
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	f201 1181 	addw	r1, r1, #385	; 0x181
 800851a:	00c9      	lsls	r1, r1, #3
 800851c:	4401      	add	r1, r0
 800851e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 8008522:	4b88      	ldr	r3, [pc, #544]	; (8008744 <SIM0_initialize+0x2e4>)
 8008524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008528:	3308      	adds	r3, #8
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	4886      	ldr	r0, [pc, #536]	; (8008748 <SIM0_initialize+0x2e8>)
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8008536:	00c9      	lsls	r1, r1, #3
 8008538:	4401      	add	r1, r0
 800853a:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 800853e:	4b81      	ldr	r3, [pc, #516]	; (8008744 <SIM0_initialize+0x2e4>)
 8008540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008544:	3310      	adds	r3, #16
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	487f      	ldr	r0, [pc, #508]	; (8008748 <SIM0_initialize+0x2e8>)
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	f201 217e 	addw	r1, r1, #638	; 0x27e
 8008552:	00c9      	lsls	r1, r1, #3
 8008554:	4401      	add	r1, r0
 8008556:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3301      	adds	r3, #1
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b7d      	cmp	r3, #125	; 0x7d
 8008564:	dda4      	ble.n	80084b0 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 8008566:	4b77      	ldr	r3, [pc, #476]	; (8008744 <SIM0_initialize+0x2e4>)
 8008568:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800856c:	3308      	adds	r3, #8
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	4975      	ldr	r1, [pc, #468]	; (8008748 <SIM0_initialize+0x2e8>)
 8008574:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8008578:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 800857c:	4b71      	ldr	r3, [pc, #452]	; (8008744 <SIM0_initialize+0x2e4>)
 800857e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008582:	3310      	adds	r3, #16
 8008584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008588:	4b6f      	ldr	r3, [pc, #444]	; (8008748 <SIM0_initialize+0x2e8>)
 800858a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800858e:	3308      	adds	r3, #8
 8008590:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 8008594:	4b6b      	ldr	r3, [pc, #428]	; (8008744 <SIM0_initialize+0x2e4>)
 8008596:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 800859a:	4b6b      	ldr	r3, [pc, #428]	; (8008748 <SIM0_initialize+0x2e8>)
 800859c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80085a0:	3318      	adds	r3, #24
 80085a2:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 80085a4:	4b67      	ldr	r3, [pc, #412]	; (8008744 <SIM0_initialize+0x2e4>)
 80085a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80085aa:	3318      	adds	r3, #24
 80085ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085b0:	4b65      	ldr	r3, [pc, #404]	; (8008748 <SIM0_initialize+0x2e8>)
 80085b2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80085b6:	3310      	adds	r3, #16
 80085b8:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 80085bc:	4b61      	ldr	r3, [pc, #388]	; (8008744 <SIM0_initialize+0x2e4>)
 80085be:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80085c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085c6:	4b60      	ldr	r3, [pc, #384]	; (8008748 <SIM0_initialize+0x2e8>)
 80085c8:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80085cc:	3318      	adds	r3, #24
 80085ce:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 80085d2:	4b5c      	ldr	r3, [pc, #368]	; (8008744 <SIM0_initialize+0x2e4>)
 80085d4:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 80085d8:	4b5b      	ldr	r3, [pc, #364]	; (8008748 <SIM0_initialize+0x2e8>)
 80085da:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80085de:	3319      	adds	r3, #25
 80085e0:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 80085e2:	4b58      	ldr	r3, [pc, #352]	; (8008744 <SIM0_initialize+0x2e4>)
 80085e4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80085e8:	3308      	adds	r3, #8
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	4956      	ldr	r1, [pc, #344]	; (8008748 <SIM0_initialize+0x2e8>)
 80085f0:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80085f4:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 80085f8:	4b52      	ldr	r3, [pc, #328]	; (8008744 <SIM0_initialize+0x2e4>)
 80085fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80085fe:	3310      	adds	r3, #16
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	4950      	ldr	r1, [pc, #320]	; (8008748 <SIM0_initialize+0x2e8>)
 8008606:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 800860a:	4b4e      	ldr	r3, [pc, #312]	; (8008744 <SIM0_initialize+0x2e4>)
 800860c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008610:	3318      	adds	r3, #24
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	494c      	ldr	r1, [pc, #304]	; (8008748 <SIM0_initialize+0x2e8>)
 8008618:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 800861c:	4b49      	ldr	r3, [pc, #292]	; (8008744 <SIM0_initialize+0x2e4>)
 800861e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	4948      	ldr	r1, [pc, #288]	; (8008748 <SIM0_initialize+0x2e8>)
 8008628:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 800862c:	4b45      	ldr	r3, [pc, #276]	; (8008744 <SIM0_initialize+0x2e4>)
 800862e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008632:	3318      	adds	r3, #24
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	4943      	ldr	r1, [pc, #268]	; (8008748 <SIM0_initialize+0x2e8>)
 800863a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 800863e:	4b41      	ldr	r3, [pc, #260]	; (8008744 <SIM0_initialize+0x2e4>)
 8008640:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	493f      	ldr	r1, [pc, #252]	; (8008748 <SIM0_initialize+0x2e8>)
 800864a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 800864e:	4b3d      	ldr	r3, [pc, #244]	; (8008744 <SIM0_initialize+0x2e4>)
 8008650:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008654:	3308      	adds	r3, #8
 8008656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800865a:	4b3b      	ldr	r3, [pc, #236]	; (8008748 <SIM0_initialize+0x2e8>)
 800865c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008660:	3308      	adds	r3, #8
 8008662:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 8008666:	4b37      	ldr	r3, [pc, #220]	; (8008744 <SIM0_initialize+0x2e4>)
 8008668:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800866c:	3310      	adds	r3, #16
 800866e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008672:	4b35      	ldr	r3, [pc, #212]	; (8008748 <SIM0_initialize+0x2e8>)
 8008674:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008678:	3310      	adds	r3, #16
 800867a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 800867e:	4b31      	ldr	r3, [pc, #196]	; (8008744 <SIM0_initialize+0x2e4>)
 8008680:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008684:	3318      	adds	r3, #24
 8008686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <SIM0_initialize+0x2e8>)
 800868c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008690:	3318      	adds	r3, #24
 8008692:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 8008696:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <SIM0_initialize+0x2e4>)
 8008698:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	4929      	ldr	r1, [pc, #164]	; (8008748 <SIM0_initialize+0x2e8>)
 80086a2:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 80086a6:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 80086aa:	4b26      	ldr	r3, [pc, #152]	; (8008744 <SIM0_initialize+0x2e4>)
 80086ac:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80086b0:	3308      	adds	r3, #8
 80086b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086b6:	4b24      	ldr	r3, [pc, #144]	; (8008748 <SIM0_initialize+0x2e8>)
 80086b8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80086bc:	3308      	adds	r3, #8
 80086be:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <SIM0_initialize+0x2e4>)
 80086c4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80086c8:	3310      	adds	r3, #16
 80086ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086ce:	4b1e      	ldr	r3, [pc, #120]	; (8008748 <SIM0_initialize+0x2e8>)
 80086d0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80086d4:	3310      	adds	r3, #16
 80086d6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 80086da:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <SIM0_initialize+0x2e4>)
 80086dc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80086e0:	3318      	adds	r3, #24
 80086e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086e6:	4b18      	ldr	r3, [pc, #96]	; (8008748 <SIM0_initialize+0x2e8>)
 80086e8:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80086ec:	3318      	adds	r3, #24
 80086ee:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <SIM0_initialize+0x2e4>)
 80086f4:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	4912      	ldr	r1, [pc, #72]	; (8008748 <SIM0_initialize+0x2e8>)
 80086fe:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8008702:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <SIM0_initialize+0x2e4>)
 8008708:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800870c:	3308      	adds	r3, #8
 800870e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <SIM0_initialize+0x2e8>)
 8008714:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008718:	3308      	adds	r3, #8
 800871a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <SIM0_initialize+0x2e4>)
 8008720:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8008724:	3310      	adds	r3, #16
 8008726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800872a:	4b07      	ldr	r3, [pc, #28]	; (8008748 <SIM0_initialize+0x2e8>)
 800872c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008730:	3310      	adds	r3, #16
 8008732:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	20000360 	.word	0x20000360
 8008748:	2001c130 	.word	0x2001c130

0800874c <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 800874c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008750:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8008754:	af00      	add	r7, sp, #0
 8008756:	f107 0414 	add.w	r4, r7, #20
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	f107 0010 	add.w	r0, r7, #16
 8008760:	6001      	str	r1, [r0, #0]
 8008762:	f107 0108 	add.w	r1, r7, #8
 8008766:	ed81 0b00 	vstr	d0, [r1]
 800876a:	1d39      	adds	r1, r7, #4
 800876c:	600a      	str	r2, [r1, #0]
 800876e:	463a      	mov	r2, r7
 8008770:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800877a:	f107 0314 	add.w	r3, r7, #20
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 ff2a 	bl	80005dc <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8008790:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3308      	adds	r3, #8
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80087ac:	3408      	adds	r4, #8
 80087ae:	f7f7 ff15 	bl	80005dc <__aeabi_dmul>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 80087ba:	f107 0314 	add.w	r3, r7, #20
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087c4:	1d3b      	adds	r3, r7, #4
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3310      	adds	r3, #16
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80087d2:	3410      	adds	r4, #16
 80087d4:	f7f7 ff02 	bl	80005dc <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80087e6:	2300      	movs	r3, #0
 80087e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80087ec:	e079      	b.n	80088e2 <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 80087ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80087f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087f6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	463a      	mov	r2, r7
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	4413      	add	r3, r2
 8008802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008806:	f107 0314 	add.w	r3, r7, #20
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f7f7 fee3 	bl	80005dc <__aeabi_dmul>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f7f7 fd27 	bl	8000270 <__adddf3>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800882a:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 800882e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008832:	3308      	adds	r3, #8
 8008834:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008838:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800883c:	3301      	adds	r3, #1
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	463a      	mov	r2, r7
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	4413      	add	r3, r2
 8008846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800884a:	f107 0314 	add.w	r3, r7, #20
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3308      	adds	r3, #8
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fec1 	bl	80005dc <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4610      	mov	r0, r2
 8008860:	4619      	mov	r1, r3
 8008862:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008866:	f103 0608 	add.w	r6, r3, #8
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f7 fcfd 	bl	8000270 <__adddf3>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 800887e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008882:	3310      	adds	r3, #16
 8008884:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008888:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800888c:	3302      	adds	r3, #2
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	463a      	mov	r2, r7
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	4413      	add	r3, r2
 8008896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3308      	adds	r3, #8
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fe99 	bl	80005dc <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80088b6:	f103 0610 	add.w	r6, r3, #16
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f7 fcd5 	bl	8000270 <__adddf3>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 80088ce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80088d2:	3303      	adds	r3, #3
 80088d4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80088d8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088dc:	3301      	adds	r3, #1
 80088de:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80088e2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	dd81      	ble.n	80087ee <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 80088ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f107 0108 	add.w	r1, r7, #8
 80088f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088fa:	f7f7 fe6f 	bl	80005dc <__aeabi_dmul>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800890e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008912:	f7f7 fcab 	bl	800026c <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 800891e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8008922:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008926:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 800892a:	1d3b      	adds	r3, r7, #4
 800892c:	6819      	ldr	r1, [r3, #0]
 800892e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008932:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 8008936:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800893a:	3308      	adds	r3, #8
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008948:	f7f7 fe48 	bl	80005dc <__aeabi_dmul>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 8008954:	1d3b      	adds	r3, r7, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800895e:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008962:	f7f7 fc83 	bl	800026c <__aeabi_dsub>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 800896e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008972:	f103 0108 	add.w	r1, r3, #8
 8008976:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800897a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 800897e:	1d3b      	adds	r3, r7, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f103 0108 	add.w	r1, r3, #8
 8008986:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800898a:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 800898e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008992:	3310      	adds	r3, #16
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a0:	f7f7 fe1c 	bl	80005dc <__aeabi_dmul>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3310      	adds	r3, #16
 80089b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089b6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80089ba:	f7f7 fc57 	bl	800026c <__aeabi_dsub>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 80089c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80089ca:	f103 0110 	add.w	r1, r3, #16
 80089ce:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80089d2:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f103 0110 	add.w	r1, r3, #16
 80089de:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80089e2:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80089ec:	2300      	movs	r3, #0
 80089ee:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80089f2:	e054      	b.n	8008a9e <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 80089f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	463a      	mov	r2, r7
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	4413      	add	r3, r2
 8008a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a04:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008a10:	00e4      	lsls	r4, r4, #3
 8008a12:	463d      	mov	r5, r7
 8008a14:	682d      	ldr	r5, [r5, #0]
 8008a16:	442c      	add	r4, r5
 8008a18:	f7f7 fc28 	bl	800026c <__aeabi_dsub>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 8008a24:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a28:	3301      	adds	r3, #1
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	463a      	mov	r2, r7
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a36:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008a44:	3401      	adds	r4, #1
 8008a46:	00e4      	lsls	r4, r4, #3
 8008a48:	463d      	mov	r5, r7
 8008a4a:	682d      	ldr	r5, [r5, #0]
 8008a4c:	442c      	add	r4, r5
 8008a4e:	f7f7 fc0d 	bl	800026c <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8008a5a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a5e:	3302      	adds	r3, #2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	463a      	mov	r2, r7
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	4413      	add	r3, r2
 8008a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a6c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a70:	3302      	adds	r3, #2
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	463a      	mov	r2, r7
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	18d4      	adds	r4, r2, r3
 8008a7a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008a7e:	f7f7 fbf5 	bl	800026c <__aeabi_dsub>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8008a8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008a8e:	3303      	adds	r3, #3
 8008a90:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8008a94:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008a9e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	dda6      	ble.n	80089f4 <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	ed93 0b00 	vldr	d0, [r3]
 8008aae:	f004 fbed 	bl	800d28c <rtIsNaN>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d006      	beq.n	8008ac6 <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 8008ab8:	f107 0308 	add.w	r3, r7, #8
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8008ac4:	e029      	b.n	8008b1a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 8008ac6:	f107 0108 	add.w	r1, r7, #8
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad6:	f7f7 fff3 	bl	8000ac0 <__aeabi_dcmplt>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	4bce      	ldr	r3, [pc, #824]	; (8008e20 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8008ae6:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8008aea:	e016      	b.n	8008b1a <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afc:	f7f7 fffe 	bl	8000afc <__aeabi_dcmpgt>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 8008b06:	f04f 0200 	mov.w	r2, #0
 8008b0a:	4bc6      	ldr	r3, [pc, #792]	; (8008e24 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008b0c:	e003      	b.n	8008b16 <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8008b1a:	f107 0310 	add.w	r3, r7, #16
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008b28:	f7f7 fd58 	bl	80005dc <__aeabi_dmul>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 8008b34:	f107 0310 	add.w	r3, r7, #16
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008b44:	f7f7 fd4a 	bl	80005dc <__aeabi_dmul>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8008b50:	f107 0408 	add.w	r4, r7, #8
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b60:	f7f7 fd3c 	bl	80005dc <__aeabi_dmul>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	ed93 0b00 	vldr	d0, [r3]
 8008b74:	f012 fe24 	bl	801b7c0 <sqrt>
 8008b78:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8008b7c:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8008b80:	f012 fe1e 	bl	801b7c0 <sqrt>
 8008b84:	eeb0 7a40 	vmov.f32	s14, s0
 8008b88:	eef0 7a60 	vmov.f32	s15, s1
 8008b8c:	f107 0318 	add.w	r3, r7, #24
 8008b90:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008ba0:	e03c      	b.n	8008c1c <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008bae:	e027      	b.n	8008c00 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8008bb0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008bb4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	463a      	mov	r2, r7
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bc6:	f107 0318 	add.w	r3, r7, #24
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8008bd2:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8008bd6:	442c      	add	r4, r5
 8008bd8:	f7f7 fd00 	bl	80005dc <__aeabi_dmul>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008be4:	00e1      	lsls	r1, r4, #3
 8008be6:	4401      	add	r1, r0
 8008be8:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8008bec:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008bf0:	3303      	adds	r3, #3
 8008bf2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8008bf6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008c00:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008c04:	2b05      	cmp	r3, #5
 8008c06:	ddd3      	ble.n	8008bb0 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8008c08:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008c0c:	3306      	adds	r3, #6
 8008c0e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008c12:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c16:	3301      	adds	r3, #1
 8008c18:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008c1c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	ddbe      	ble.n	8008ba2 <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8008c24:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8008c28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c2c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 ff43 	bl	800babc <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 8008c36:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8008c3a:	f004 fb27 	bl	800d28c <rtIsNaN>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d125      	bne.n	8008c90 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008c50:	f7f7 ff36 	bl	8000ac0 <__aeabi_dcmplt>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8008c5a:	f04f 0200 	mov.w	r2, #0
 8008c5e:	4b70      	ldr	r3, [pc, #448]	; (8008e20 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8008c60:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8008c64:	e014      	b.n	8008c90 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	f04f 0300 	mov.w	r3, #0
 8008c6e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008c72:	f7f7 ff43 	bl	8000afc <__aeabi_dcmpgt>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	4b68      	ldr	r3, [pc, #416]	; (8008e24 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008c82:	e003      	b.n	8008c8c <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	4b63      	ldr	r3, [pc, #396]	; (8008e24 <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008c96:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008c9a:	f7f7 ff07 	bl	8000aac <__aeabi_dcmpeq>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 81bd 	beq.w	8009020 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008cac:	e011      	b.n	8008cd2 <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8008cae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008cba:	18d1      	adds	r1, r2, r3
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008cc8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008cd2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	dde9      	ble.n	8008cae <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8008cda:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008cde:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	f04f 0300 	mov.w	r3, #0
 8008cea:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8008cee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008cf2:	f04f 0200 	mov.w	r2, #0
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8008cfe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8008d0e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d12:	ed93 7b00 	vldr	d7, [r3]
 8008d16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008d1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d1e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d22:	4618      	mov	r0, r3
 8008d24:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8008d28:	eeb0 0a47 	vmov.f32	s0, s14
 8008d2c:	eef0 0a67 	vmov.f32	s1, s15
 8008d30:	f004 f814 	bl	800cd5c <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8008d34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d3c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008d40:	f7f7 fc4c 	bl	80005dc <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4614      	mov	r4, r2
 8008d4a:	461d      	mov	r5, r3
 8008d4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d54:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d58:	3318      	adds	r3, #24
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fc3d 	bl	80005dc <__aeabi_dmul>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fa7f 	bl	800026c <__aeabi_dsub>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	f107 0118 	add.w	r1, r7, #24
 8008d76:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8008d7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d82:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d86:	3318      	adds	r3, #24
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fc26 	bl	80005dc <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4690      	mov	r8, r2
 8008d96:	4699      	mov	r9, r3
 8008d98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008da0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008da4:	f7f7 fc1a 	bl	80005dc <__aeabi_dmul>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4610      	mov	r0, r2
 8008dae:	4619      	mov	r1, r3
 8008db0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008db4:	f103 0418 	add.w	r4, r3, #24
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	f7f7 fa56 	bl	8000270 <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8008dcc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008dd0:	3320      	adds	r3, #32
 8008dd2:	ed93 7b00 	vldr	d7, [r3]
 8008dd6:	f107 0318 	add.w	r3, r7, #24
 8008dda:	ed93 6b00 	vldr	d6, [r3]
 8008dde:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008de2:	f103 0220 	add.w	r2, r3, #32
 8008de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008dea:	f103 0108 	add.w	r1, r3, #8
 8008dee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008df2:	3308      	adds	r3, #8
 8008df4:	4618      	mov	r0, r3
 8008df6:	eeb0 1a46 	vmov.f32	s2, s12
 8008dfa:	eef0 1a66 	vmov.f32	s3, s13
 8008dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8008e02:	eef0 0a67 	vmov.f32	s1, s15
 8008e06:	f003 ffa9 	bl	800cd5c <rotate_LZ7ctbe0>
    temp = b_t;
 8008e0a:	f107 0118 	add.w	r1, r7, #24
 8008e0e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008e12:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008e16:	2300      	movs	r3, #0
 8008e18:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e1c:	e06f      	b.n	8008efe <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8008e1e:	bf00      	nop
 8008e20:	bff00000 	.word	0xbff00000
 8008e24:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8008e28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008e2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4413      	add	r3, r2
 8008e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e38:	f107 0318 	add.w	r3, r7, #24
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 fbcc 	bl	80005dc <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8008e4c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e50:	3306      	adds	r3, #6
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e58:	4413      	add	r3, r2
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8008e62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008e66:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e72:	f107 0318 	add.w	r3, r7, #24
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fbaf 	bl	80005dc <__aeabi_dmul>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4614      	mov	r4, r2
 8008e84:	461d      	mov	r5, r3
 8008e86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008e8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4413      	add	r3, r2
 8008e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e96:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008e9a:	f7f7 fb9f 	bl	80005dc <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7f7 f9e1 	bl	800026c <__aeabi_dsub>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	f107 0118 	add.w	r1, r7, #24
 8008eb2:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 8008eb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008eba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ec6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008eca:	f7f7 fb87 	bl	80005dc <__aeabi_dmul>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008eda:	3306      	adds	r3, #6
 8008edc:	00db      	lsls	r3, r3, #3
 8008ede:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ee2:	18d4      	adds	r4, r2, r3
 8008ee4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008ee8:	f7f7 f9c2 	bl	8000270 <__adddf3>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008ef4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008efe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	dd90      	ble.n	8008e28 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 8008f06:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008f0a:	3340      	adds	r3, #64	; 0x40
 8008f0c:	ed93 7b00 	vldr	d7, [r3]
 8008f10:	f107 0318 	add.w	r3, r7, #24
 8008f14:	ed93 6b00 	vldr	d6, [r3]
 8008f18:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008f1c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008f20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f24:	f103 0110 	add.w	r1, r3, #16
 8008f28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f2c:	3310      	adds	r3, #16
 8008f2e:	4618      	mov	r0, r3
 8008f30:	eeb0 1a46 	vmov.f32	s2, s12
 8008f34:	eef0 1a66 	vmov.f32	s3, s13
 8008f38:	eeb0 0a47 	vmov.f32	s0, s14
 8008f3c:	eef0 0a67 	vmov.f32	s1, s15
 8008f40:	f003 ff0c 	bl	800cd5c <rotate_LZ7ctbe0>
    kk = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f50:	e03d      	b.n	8008fce <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8008f52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008f5c:	4413      	add	r3, r2
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008f66:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008f6a:	00c9      	lsls	r1, r1, #3
 8008f6c:	4401      	add	r1, r0
 8008f6e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8008f72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f76:	3303      	adds	r3, #3
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008f7e:	4413      	add	r3, r2
 8008f80:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008f84:	1c51      	adds	r1, r2, #1
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008f8e:	00c9      	lsls	r1, r1, #3
 8008f90:	4401      	add	r1, r0
 8008f92:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8008f96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f9a:	3306      	adds	r3, #6
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008fa8:	1c91      	adds	r1, r2, #2
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008fb2:	00c9      	lsls	r1, r1, #3
 8008fb4:	4401      	add	r1, r0
 8008fb6:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8008fba:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fbe:	3303      	adds	r3, #3
 8008fc0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008fc4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008fc8:	3301      	adds	r3, #1
 8008fca:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008fce:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	ddbd      	ble.n	8008f52 <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008fdc:	e01a      	b.n	8009014 <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 8008fde:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008fe2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	4413      	add	r3, r2
 8008fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008ff8:	18d4      	adds	r4, r2, r3
 8008ffa:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008ffe:	f7f7 faed 	bl	80005dc <__aeabi_dmul>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 800900a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800900e:	3301      	adds	r3, #1
 8009010:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009014:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009018:	2b08      	cmp	r3, #8
 800901a:	dde0      	ble.n	8008fde <UTMeanCovSqrt_C2vgLQ4W+0x892>
 800901c:	f000 bf6e 	b.w	8009efc <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8009020:	2300      	movs	r3, #0
 8009022:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8009026:	2300      	movs	r3, #0
 8009028:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800902c:	e011      	b.n	8009052 <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 800902e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009032:	3301      	adds	r3, #1
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800903a:	18d1      	adds	r1, r2, r3
 800903c:	f04f 0200 	mov.w	r2, #0
 8009040:	f04f 0300 	mov.w	r3, #0
 8009044:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8009048:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800904c:	3301      	adds	r3, #1
 800904e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009052:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009056:	2b01      	cmp	r3, #1
 8009058:	dde9      	ble.n	800902e <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 800905a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800905e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009062:	f04f 0200 	mov.w	r2, #0
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 800906e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8009072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009076:	2301      	movs	r3, #1
 8009078:	461c      	mov	r4, r3
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	f7f7 fd13 	bl	8000aac <__aeabi_dcmpeq>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 800908c:	2300      	movs	r3, #0
 800908e:	461c      	mov	r4, r3
 8009090:	b2e3      	uxtb	r3, r4
 8009092:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 8009096:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800909a:	2b00      	cmp	r3, #0
 800909c:	d114      	bne.n	80090c8 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 800909e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80090a2:	3320      	adds	r3, #32
 80090a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090a8:	2301      	movs	r3, #1
 80090aa:	461c      	mov	r4, r3
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	f7f7 fcfa 	bl	8000aac <__aeabi_dcmpeq>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <UTMeanCovSqrt_C2vgLQ4W+0x976>
 80090be:	2300      	movs	r3, #0
 80090c0:	461c      	mov	r4, r3
 80090c2:	b2e3      	uxtb	r3, r4
 80090c4:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 80090c8:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d114      	bne.n	80090fa <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 80090d0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80090d4:	3340      	adds	r3, #64	; 0x40
 80090d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090da:	2301      	movs	r3, #1
 80090dc:	461c      	mov	r4, r3
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	f7f7 fce1 	bl	8000aac <__aeabi_dcmpeq>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 80090f0:	2300      	movs	r3, #0
 80090f2:	461c      	mov	r4, r3
 80090f4:	b2e3      	uxtb	r3, r4
 80090f6:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 80090fa:	2300      	movs	r3, #0
 80090fc:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8009100:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8009108:	2301      	movs	r3, #1
 800910a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 800910e:	e394      	b.n	800983a <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8009110:	f107 0120 	add.w	r1, r7, #32
 8009114:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009118:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 800911c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8009128:	f7f7 fb82 	bl	8000830 <__aeabi_ddiv>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	f107 0120 	add.w	r1, r7, #32
 8009134:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8009138:	f107 0320 	add.w	r3, r7, #32
 800913c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009140:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8009144:	3318      	adds	r3, #24
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 fa47 	bl	80005dc <__aeabi_dmul>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009156:	f7f7 f889 	bl	800026c <__aeabi_dsub>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8009166:	3320      	adds	r3, #32
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 fb60 	bl	8000830 <__aeabi_ddiv>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	f107 0120 	add.w	r1, r7, #32
 8009178:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 800917c:	f107 0118 	add.w	r1, r7, #24
 8009180:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009184:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 8009188:	2300      	movs	r3, #0
 800918a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800918e:	e027      	b.n	80091e0 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 8009190:	f107 0318 	add.w	r3, r7, #24
 8009194:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009198:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800919c:	3306      	adds	r3, #6
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80091a4:	4413      	add	r3, r2
 80091a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091aa:	f107 0220 	add.w	r2, r7, #32
 80091ae:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	4413      	add	r3, r2
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 fa0f 	bl	80005dc <__aeabi_dmul>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4620      	mov	r0, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f7 f851 	bl	800026c <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	f107 0118 	add.w	r1, r7, #24
 80091d2:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80091d6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80091da:	3301      	adds	r3, #1
 80091dc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80091e0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	ddd3      	ble.n	8009190 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 80091e8:	f107 0318 	add.w	r3, r7, #24
 80091ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091f0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80091f4:	3340      	adds	r3, #64	; 0x40
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 fb19 	bl	8000830 <__aeabi_ddiv>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	f107 0120 	add.w	r1, r7, #32
 8009206:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8009212:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 8009216:	f107 0320 	add.w	r3, r7, #32
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	4611      	mov	r1, r2
 8009220:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8009224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009228:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8009234:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009238:	f7f7 fc60 	bl	8000afc <__aeabi_dcmpgt>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00b      	beq.n	800925a <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 8009242:	f107 0118 	add.w	r1, r7, #24
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	4b85      	ldr	r3, [pc, #532]	; (8009460 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800924c:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8009250:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009254:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8009258:	e017      	b.n	800928a <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8009262:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009266:	f7f7 fae3 	bl	8000830 <__aeabi_ddiv>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 8009272:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009276:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800927a:	f7f7 f9af 	bl	80005dc <__aeabi_dmul>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	f107 0118 	add.w	r1, r7, #24
 8009286:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 800928a:	f107 0320 	add.w	r3, r7, #32
 800928e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009292:	4611      	mov	r1, r2
 8009294:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8009298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800929c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80092a0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80092a4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80092a8:	f7f7 fc28 	bl	8000afc <__aeabi_dcmpgt>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d02d      	beq.n	800930e <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 80092b2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80092b6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80092ba:	f7f7 fab9 	bl	8000830 <__aeabi_ddiv>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80092c6:	f107 0318 	add.w	r3, r7, #24
 80092ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092ce:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80092d2:	f7f7 f983 	bl	80005dc <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4610      	mov	r0, r2
 80092dc:	4619      	mov	r1, r3
 80092de:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80092e2:	f7f7 f97b 	bl	80005dc <__aeabi_dmul>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4610      	mov	r0, r2
 80092ec:	4619      	mov	r1, r3
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	4b5b      	ldr	r3, [pc, #364]	; (8009460 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80092f4:	f7f6 ffbc 	bl	8000270 <__adddf3>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	f107 0118 	add.w	r1, r7, #24
 8009300:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8009304:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009308:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800930c:	e01f      	b.n	800934e <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 800930e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8009312:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009316:	f7f7 fa8b 	bl	8000830 <__aeabi_ddiv>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 8009322:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009326:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 800932a:	f7f7 f957 	bl	80005dc <__aeabi_dmul>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f107 0318 	add.w	r3, r7, #24
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ff97 	bl	8000270 <__adddf3>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	f107 0118 	add.w	r1, r7, #24
 800934a:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 800934e:	f107 0320 	add.w	r3, r7, #32
 8009352:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009356:	4611      	mov	r1, r2
 8009358:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800935c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009360:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 8009364:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8009368:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800936c:	f7f7 fbc6 	bl	8000afc <__aeabi_dcmpgt>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d02d      	beq.n	80093d2 <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 8009376:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800937a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 800937e:	f7f7 fa57 	bl	8000830 <__aeabi_ddiv>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 800938a:	f107 0318 	add.w	r3, r7, #24
 800938e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009392:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009396:	f7f7 f921 	bl	80005dc <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4610      	mov	r0, r2
 80093a0:	4619      	mov	r1, r3
 80093a2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80093a6:	f7f7 f919 	bl	80005dc <__aeabi_dmul>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4610      	mov	r0, r2
 80093b0:	4619      	mov	r1, r3
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80093b8:	f7f6 ff5a 	bl	8000270 <__adddf3>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	f107 0118 	add.w	r1, r7, #24
 80093c4:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 80093c8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80093cc:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 80093d0:	e01f      	b.n	8009412 <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 80093d2:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80093d6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80093da:	f7f7 fa29 	bl	8000830 <__aeabi_ddiv>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 80093e6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80093ea:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80093ee:	f7f7 f8f5 	bl	80005dc <__aeabi_dmul>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4610      	mov	r0, r2
 80093f8:	4619      	mov	r1, r3
 80093fa:	f107 0318 	add.w	r3, r7, #24
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f7f6 ff35 	bl	8000270 <__adddf3>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	f107 0118 	add.w	r1, r7, #24
 800940e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 8009412:	f107 0318 	add.w	r3, r7, #24
 8009416:	ed93 7b00 	vldr	d7, [r3]
 800941a:	eeb0 0a47 	vmov.f32	s0, s14
 800941e:	eef0 0a67 	vmov.f32	s1, s15
 8009422:	f012 f9cd 	bl	801b7c0 <sqrt>
 8009426:	ec51 0b10 	vmov	r0, r1, d0
 800942a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800942e:	f7f7 f8d5 	bl	80005dc <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	f107 0118 	add.w	r1, r7, #24
 800943a:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 800943e:	f107 0318 	add.w	r3, r7, #24
 8009442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009446:	f04f 0200 	mov.w	r2, #0
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800944c:	f7f7 fb4c 	bl	8000ae8 <__aeabi_dcmpge>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d006      	beq.n	8009464 <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 800945c:	e1ed      	b.n	800983a <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 800945e:	bf00      	nop
 8009460:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 8009464:	f107 0318 	add.w	r3, r7, #24
 8009468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800946c:	f107 0318 	add.w	r3, r7, #24
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f7 f8b2 	bl	80005dc <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	f04f 0000 	mov.w	r0, #0
 8009480:	49b4      	ldr	r1, [pc, #720]	; (8009754 <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 8009482:	f7f6 fef3 	bl	800026c <__aeabi_dsub>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	ec43 2b17 	vmov	d7, r2, r3
 800948e:	eeb0 0a47 	vmov.f32	s0, s14
 8009492:	eef0 0a67 	vmov.f32	s1, s15
 8009496:	f012 f993 	bl	801b7c0 <sqrt>
 800949a:	eeb0 6a40 	vmov.f32	s12, s0
 800949e:	eef0 6a60 	vmov.f32	s13, s1
 80094a2:	f107 0320 	add.w	r3, r7, #32
 80094a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80094aa:	f107 0218 	add.w	r2, r7, #24
 80094ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094b2:	f103 0110 	add.w	r1, r3, #16
 80094b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80094ba:	3310      	adds	r3, #16
 80094bc:	4618      	mov	r0, r3
 80094be:	eeb0 1a47 	vmov.f32	s2, s14
 80094c2:	eef0 1a67 	vmov.f32	s3, s15
 80094c6:	eeb0 0a46 	vmov.f32	s0, s12
 80094ca:	eef0 0a66 	vmov.f32	s1, s13
 80094ce:	f003 fc45 	bl	800cd5c <rotate_LZ7ctbe0>
        x[2] = 0.0;
 80094d2:	f107 0120 	add.w	r1, r7, #32
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 80094e2:	f107 0318 	add.w	r3, r7, #24
 80094e6:	ed93 7b00 	vldr	d7, [r3]
 80094ea:	f107 0320 	add.w	r3, r7, #32
 80094ee:	ed93 6b02 	vldr	d6, [r3, #8]
 80094f2:	f107 0218 	add.w	r2, r7, #24
 80094f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094fa:	f103 0108 	add.w	r1, r3, #8
 80094fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009502:	3308      	adds	r3, #8
 8009504:	4618      	mov	r0, r3
 8009506:	eeb0 1a46 	vmov.f32	s2, s12
 800950a:	eef0 1a66 	vmov.f32	s3, s13
 800950e:	eeb0 0a47 	vmov.f32	s0, s14
 8009512:	eef0 0a67 	vmov.f32	s1, s15
 8009516:	f003 fc21 	bl	800cd5c <rotate_LZ7ctbe0>
        x[1] = 0.0;
 800951a:	f107 0120 	add.w	r1, r7, #32
 800951e:	f04f 0200 	mov.w	r2, #0
 8009522:	f04f 0300 	mov.w	r3, #0
 8009526:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	ed93 7b00 	vldr	d7, [r3]
 8009532:	f107 0320 	add.w	r3, r7, #32
 8009536:	ed93 6b00 	vldr	d6, [r3]
 800953a:	f107 0218 	add.w	r2, r7, #24
 800953e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009542:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009546:	4618      	mov	r0, r3
 8009548:	eeb0 1a46 	vmov.f32	s2, s12
 800954c:	eef0 1a66 	vmov.f32	s3, s13
 8009550:	eeb0 0a47 	vmov.f32	s0, s14
 8009554:	eef0 0a67 	vmov.f32	s1, s15
 8009558:	f003 fc00 	bl	800cd5c <rotate_LZ7ctbe0>
        x[0] = 0.0;
 800955c:	f107 0120 	add.w	r1, r7, #32
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 800956c:	2300      	movs	r3, #0
 800956e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009572:	e072      	b.n	800965a <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 8009574:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009578:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	4413      	add	r3, r2
 8009580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009584:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800958e:	4413      	add	r3, r2
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f7 f822 	bl	80005dc <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	f107 0118 	add.w	r1, r7, #24
 80095a0:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 80095a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80095a8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4413      	add	r3, r2
 80095b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095b4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80095be:	4413      	add	r3, r2
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	f7f7 f80a 	bl	80005dc <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4690      	mov	r8, r2
 80095ce:	4699      	mov	r9, r3
 80095d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80095d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4413      	add	r3, r2
 80095dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e0:	f107 0320 	add.w	r3, r7, #32
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f7f6 fff8 	bl	80005dc <__aeabi_dmul>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4610      	mov	r0, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80095fe:	18d4      	adds	r4, r2, r3
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4640      	mov	r0, r8
 8009606:	4649      	mov	r1, r9
 8009608:	f7f6 fe30 	bl	800026c <__aeabi_dsub>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 8009614:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009618:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	4413      	add	r3, r2
 8009620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009624:	f107 0320 	add.w	r3, r7, #32
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f7f6 ffd6 	bl	80005dc <__aeabi_dmul>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	f107 0318 	add.w	r3, r7, #24
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7f6 fe16 	bl	8000270 <__adddf3>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	f107 0120 	add.w	r1, r7, #32
 800964c:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8009650:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009654:	3b01      	subs	r3, #1
 8009656:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800965a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800965e:	2b00      	cmp	r3, #0
 8009660:	da88      	bge.n	8009574 <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8009662:	2301      	movs	r3, #1
 8009664:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009668:	e06c      	b.n	8009744 <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 800966a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800966e:	3303      	adds	r3, #3
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009676:	4413      	add	r3, r2
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 8009680:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009684:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	4413      	add	r3, r2
 800968c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009690:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009694:	f7f6 ffa2 	bl	80005dc <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4690      	mov	r8, r2
 800969e:	4699      	mov	r9, r3
 80096a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80096a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	4413      	add	r3, r2
 80096ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096b0:	f107 0320 	add.w	r3, r7, #32
 80096b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80096b8:	f7f6 ff90 	bl	80005dc <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4610      	mov	r0, r2
 80096c2:	4619      	mov	r1, r3
 80096c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096c8:	3303      	adds	r3, #3
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80096d0:	18d4      	adds	r4, r2, r3
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f6 fdc7 	bl	800026c <__aeabi_dsub>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 80096e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80096ea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096f6:	f107 0320 	add.w	r3, r7, #32
 80096fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80096fe:	f7f6 ff6d 	bl	80005dc <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4614      	mov	r4, r2
 8009708:	461d      	mov	r5, r3
 800970a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800970e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4413      	add	r3, r2
 8009716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800971a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800971e:	f7f6 ff5d 	bl	80005dc <__aeabi_dmul>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 fda1 	bl	8000270 <__adddf3>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	f107 0120 	add.w	r1, r7, #32
 8009736:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 800973a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800973e:	3b01      	subs	r3, #1
 8009740:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009744:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009748:	2b00      	cmp	r3, #0
 800974a:	da8e      	bge.n	800966a <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 800974c:	2302      	movs	r3, #2
 800974e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009752:	e06e      	b.n	8009832 <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 8009754:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8009758:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800975c:	3306      	adds	r3, #6
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009764:	4413      	add	r3, r2
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 800976e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009772:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	4413      	add	r3, r2
 800977a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800977e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009782:	f7f6 ff2b 	bl	80005dc <__aeabi_dmul>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4690      	mov	r8, r2
 800978c:	4699      	mov	r9, r3
 800978e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009792:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	4413      	add	r3, r2
 800979a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800979e:	f107 0320 	add.w	r3, r7, #32
 80097a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80097a6:	f7f6 ff19 	bl	80005dc <__aeabi_dmul>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4610      	mov	r0, r2
 80097b0:	4619      	mov	r1, r3
 80097b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80097b6:	3306      	adds	r3, #6
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80097be:	18d4      	adds	r4, r2, r3
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4640      	mov	r0, r8
 80097c6:	4649      	mov	r1, r9
 80097c8:	f7f6 fd50 	bl	800026c <__aeabi_dsub>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 80097d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80097d8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	4413      	add	r3, r2
 80097e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097e4:	f107 0320 	add.w	r3, r7, #32
 80097e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80097ec:	f7f6 fef6 	bl	80005dc <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4614      	mov	r4, r2
 80097f6:	461d      	mov	r5, r3
 80097f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80097fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	4413      	add	r3, r2
 8009804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009808:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800980c:	f7f6 fee6 	bl	80005dc <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fd2a 	bl	8000270 <__adddf3>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	f107 0120 	add.w	r1, r7, #32
 8009824:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8009828:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800982c:	3b01      	subs	r3, #1
 800982e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009832:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009836:	2b00      	cmp	r3, #0
 8009838:	da8e      	bge.n	8009758 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 800983a:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 82f0 	beq.w	8009e24 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800984a:	2300      	movs	r3, #0
 800984c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009850:	e0d3      	b.n	80099fa <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009858:	2300      	movs	r3, #0
 800985a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800985e:	e0bd      	b.n	80099dc <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8009860:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8009864:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009868:	4413      	add	r3, r2
 800986a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 800986e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009872:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	18d1      	adds	r1, r2, r3
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 8009886:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800988a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4413      	add	r3, r2
 8009892:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009896:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80098a0:	4413      	add	r3, r2
 80098a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098a6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80098b0:	4413      	add	r3, r2
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fe91 	bl	80005dc <__aeabi_dmul>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7f6 fcd5 	bl	8000270 <__adddf3>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80098ce:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80098d2:	00c9      	lsls	r1, r1, #3
 80098d4:	4401      	add	r1, r0
 80098d6:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 80098da:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80098de:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	4413      	add	r3, r2
 80098e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80098ea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80098ee:	3301      	adds	r3, #1
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80098f6:	4413      	add	r3, r2
 80098f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098fc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009900:	3301      	adds	r3, #1
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009908:	4413      	add	r3, r2
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	f7f6 fe65 	bl	80005dc <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fca9 	bl	8000270 <__adddf3>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009926:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800992a:	00c9      	lsls	r1, r1, #3
 800992c:	4401      	add	r1, r0
 800992e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 8009932:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009936:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	4413      	add	r3, r2
 800993e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009942:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009946:	3302      	adds	r3, #2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800994e:	4413      	add	r3, r2
 8009950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009954:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009958:	3302      	adds	r3, #2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009960:	4413      	add	r3, r2
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fe39 	bl	80005dc <__aeabi_dmul>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fc7d 	bl	8000270 <__adddf3>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800997e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009982:	00c9      	lsls	r1, r1, #3
 8009984:	4401      	add	r1, r0
 8009986:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 800998a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	1d3a      	adds	r2, r7, #4
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	4413      	add	r3, r2
 8009996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800999a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	1d3a      	adds	r2, r7, #4
 80099a2:	6812      	ldr	r2, [r2, #0]
 80099a4:	4413      	add	r3, r2
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80099ae:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80099b2:	442c      	add	r4, r5
 80099b4:	f7f6 fe12 	bl	80005dc <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80099c0:	00e1      	lsls	r1, r4, #3
 80099c2:	4401      	add	r1, r0
 80099c4:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 80099c8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80099cc:	3303      	adds	r3, #3
 80099ce:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 80099d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80099d6:	3301      	adds	r3, #1
 80099d8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80099dc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	f77f af3d 	ble.w	8009860 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 80099e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80099ea:	3303      	adds	r3, #3
 80099ec:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80099f0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80099f4:	3301      	adds	r3, #1
 80099f6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80099fa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	f77f af27 	ble.w	8009852 <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009a10:	e049      	b.n	8009aa6 <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 8009a12:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009a16:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	4413      	add	r3, r2
 8009a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a22:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009a26:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fc1b 	bl	800026c <__aeabi_dsub>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	f107 0118 	add.w	r1, r7, #24
 8009a3e:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8009a42:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01c      	beq.n	8009a84 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8009a4a:	f107 0318 	add.w	r3, r7, #24
 8009a4e:	ed93 7b00 	vldr	d7, [r3]
 8009a52:	eeb0 0a47 	vmov.f32	s0, s14
 8009a56:	eef0 0a67 	vmov.f32	s1, s15
 8009a5a:	f003 fbf3 	bl	800d244 <rtIsInf>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10c      	bne.n	8009a7e <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 8009a64:	f107 0318 	add.w	r3, r7, #24
 8009a68:	ed93 7b00 	vldr	d7, [r3]
 8009a6c:	eeb0 0a47 	vmov.f32	s0, s14
 8009a70:	eef0 0a67 	vmov.f32	s1, s15
 8009a74:	f003 fc0a 	bl	800d28c <rtIsNaN>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 8009a84:	f107 0318 	add.w	r3, r7, #24
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8009a90:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8009a94:	00c9      	lsls	r1, r1, #3
 8009a96:	4401      	add	r1, r0
 8009a98:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8009a9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009aa6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009aaa:	2b08      	cmp	r3, #8
 8009aac:	ddb1      	ble.n	8009a12 <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 8009aae:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 8009ab6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009aba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009abe:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009ac2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8009ac6:	f003 fc33 	bl	800d330 <svd_u3DvUgOe>
 8009aca:	e02c      	b.n	8009b26 <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 8009acc:	4bbc      	ldr	r3, [pc, #752]	; (8009dc0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009ad6:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8009ada:	4bb9      	ldr	r3, [pc, #740]	; (8009dc0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009ae4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8009ae8:	4bb5      	ldr	r3, [pc, #724]	; (8009dc0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009af2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 8009af6:	2300      	movs	r3, #0
 8009af8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009afc:	e00f      	b.n	8009b1e <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8009afe:	4bb0      	ldr	r3, [pc, #704]	; (8009dc0 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009b08:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009b0c:	00c9      	lsls	r1, r1, #3
 8009b0e:	4401      	add	r1, r0
 8009b10:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 8009b14:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009b1e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	ddeb      	ble.n	8009afe <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8009b26:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009b2a:	2248      	movs	r2, #72	; 0x48
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f011 fc8e 	bl	801b450 <memset>
      Ss[0] = s[0];
 8009b34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009b40:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8009b44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b4c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009b50:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8009b54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009b5c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009b60:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 8009b64:	2300      	movs	r3, #0
 8009b66:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009b6a:	e01e      	b.n	8009baa <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8009b6c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009b70:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	4413      	add	r3, r2
 8009b78:	ed93 7b00 	vldr	d7, [r3]
 8009b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8009b80:	eef0 0a67 	vmov.f32	s1, s15
 8009b84:	f011 fe1c 	bl	801b7c0 <sqrt>
 8009b88:	eeb0 7a40 	vmov.f32	s14, s0
 8009b8c:	eef0 7a60 	vmov.f32	s15, s1
 8009b90:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009b94:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	4413      	add	r3, r2
 8009b9c:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 8009ba0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009baa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	dddc      	ble.n	8009b6c <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009bbe:	e0c0      	b.n	8009d42 <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009bcc:	e0aa      	b.n	8009d24 <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 8009bce:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8009bd2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 8009bdc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009be6:	18d1      	adds	r1, r2, r3
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 8009bf4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009bfe:	4413      	add	r3, r2
 8009c00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009c04:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009c08:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	4413      	add	r3, r2
 8009c10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c14:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009c18:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	4413      	add	r3, r2
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f7f6 fcda 	bl	80005dc <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c3a:	18d6      	adds	r6, r2, r3
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fb14 	bl	8000270 <__adddf3>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8009c50:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c5a:	4413      	add	r3, r2
 8009c5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009c60:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009c64:	3301      	adds	r3, #1
 8009c66:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c72:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009c76:	3303      	adds	r3, #3
 8009c78:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009c7c:	00db      	lsls	r3, r3, #3
 8009c7e:	4413      	add	r3, r2
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fcaa 	bl	80005dc <__aeabi_dmul>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c9a:	18d6      	adds	r6, r2, r3
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f7f6 fae4 	bl	8000270 <__adddf3>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8009cb0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009cba:	4413      	add	r3, r2
 8009cbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009cc0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	4413      	add	r3, r2
 8009cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cd2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009cd6:	3306      	adds	r3, #6
 8009cd8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009cdc:	00db      	lsls	r3, r3, #3
 8009cde:	4413      	add	r3, r2
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fc7a 	bl	80005dc <__aeabi_dmul>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4610      	mov	r0, r2
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009cfa:	18d6      	adds	r6, r2, r3
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4620      	mov	r0, r4
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7f6 fab4 	bl	8000270 <__adddf3>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8009d10:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009d14:	3303      	adds	r3, #3
 8009d16:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009d1a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009d24:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	f77f af50 	ble.w	8009bce <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8009d2e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009d32:	3303      	adds	r3, #3
 8009d34:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009d38:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009d42:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	f77f af3a 	ble.w	8009bc0 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009d5e:	e044      	b.n	8009dea <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8009d60:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009d64:	3301      	adds	r3, #1
 8009d66:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8009d70:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	dc25      	bgt.n	8009dc4 <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8009d78:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	441a      	add	r2, r3
 8009d82:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d86:	4413      	add	r3, r2
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009d8e:	4413      	add	r3, r2
 8009d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d94:	f04f 0200 	mov.w	r2, #0
 8009d98:	f04f 0300 	mov.w	r3, #0
 8009d9c:	f7f6 fe86 	bl	8000aac <__aeabi_dcmpeq>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d106      	bne.n	8009db4 <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 8009da6:	2300      	movs	r3, #0
 8009da8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009db2:	e00f      	b.n	8009dd4 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8009db4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009db8:	3301      	adds	r3, #1
 8009dba:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009dbe:	e009      	b.n	8009dd4 <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8009dc0:	2001ebf8 	.word	0x2001ebf8
            }
          } else {
            kk++;
 8009dc4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009dc8:	3301      	adds	r3, #1
 8009dca:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 8009dd4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c6      	beq.n	8009d6a <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8009ddc:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d102      	bne.n	8009dea <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009dea:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d103      	bne.n	8009dfa <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 8009df2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	ddb2      	ble.n	8009d60 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8009dfa:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d110      	bne.n	8009e24 <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 8009e02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009e06:	2248      	movs	r2, #72	; 0x48
 8009e08:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f011 fb11 	bl	801b434 <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 8009e12:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009e16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009e1a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fec4 	bl	800abac <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009e30:	e03d      	b.n	8009eae <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8009e32:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009e3c:	4413      	add	r3, r2
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009e46:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009e4a:	00c9      	lsls	r1, r1, #3
 8009e4c:	4401      	add	r1, r0
 8009e4e:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8009e52:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009e56:	3303      	adds	r3, #3
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009e5e:	4413      	add	r3, r2
 8009e60:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009e64:	1c51      	adds	r1, r2, #1
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009e6e:	00c9      	lsls	r1, r1, #3
 8009e70:	4401      	add	r1, r0
 8009e72:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8009e76:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009e7a:	3306      	adds	r3, #6
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009e82:	4413      	add	r3, r2
 8009e84:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009e88:	1c91      	adds	r1, r2, #2
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009e92:	00c9      	lsls	r1, r1, #3
 8009e94:	4401      	add	r1, r0
 8009e96:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8009e9a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009e9e:	3303      	adds	r3, #3
 8009ea0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009ea4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009eae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	ddbd      	ble.n	8009e32 <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009ebc:	e01a      	b.n	8009ef4 <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8009ebe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009ec2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	4413      	add	r3, r2
 8009eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ece:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009ed8:	18d4      	adds	r4, r2, r3
 8009eda:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8009ede:	f7f6 fb7d 	bl	80005dc <__aeabi_dmul>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8009eea:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009ef4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ef8:	2b08      	cmp	r3, #8
 8009efa:	dde0      	ble.n	8009ebe <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009f02:	2300      	movs	r3, #0
 8009f04:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009f08:	e057      	b.n	8009fba <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8009f0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009f14:	4413      	add	r3, r2
 8009f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f1a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009f26:	00e4      	lsls	r4, r4, #3
 8009f28:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009f2c:	442c      	add	r4, r5
 8009f2e:	f7f6 f99d 	bl	800026c <__aeabi_dsub>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8009f3a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009f3e:	3301      	adds	r3, #1
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009f46:	4413      	add	r3, r2
 8009f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f4c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009f50:	3308      	adds	r3, #8
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009f5a:	3401      	adds	r4, #1
 8009f5c:	00e4      	lsls	r4, r4, #3
 8009f5e:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009f62:	442c      	add	r4, r5
 8009f64:	f7f6 f982 	bl	800026c <__aeabi_dsub>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8009f70:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009f74:	3302      	adds	r3, #2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009f7c:	4413      	add	r3, r2
 8009f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f82:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009f86:	3310      	adds	r3, #16
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009f90:	3402      	adds	r4, #2
 8009f92:	00e4      	lsls	r4, r4, #3
 8009f94:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009f98:	442c      	add	r4, r5
 8009f9a:	f7f6 f967 	bl	800026c <__aeabi_dsub>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8009fa6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009faa:	3303      	adds	r3, #3
 8009fac:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009fb0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009fba:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009fbe:	2b05      	cmp	r3, #5
 8009fc0:	dda3      	ble.n	8009f0a <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8009fce:	f7f6 fb05 	bl	80005dc <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009fe0:	e071      	b.n	800a0c6 <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009fee:	e061      	b.n	800a0b4 <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8009ff0:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8009ff4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8009ffe:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800a002:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	18d1      	adds	r1, r2, r3
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	f04f 0300 	mov.w	r3, #0
 800a012:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800a022:	e039      	b.n	800a098 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 800a024:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800a028:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	4413      	add	r3, r2
 800a030:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a034:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800a038:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a03c:	4413      	add	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800a044:	4413      	add	r3, r2
 800a046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a04a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800a04e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800a052:	4413      	add	r3, r2
 800a054:	00db      	lsls	r3, r3, #3
 800a056:	463a      	mov	r2, r7
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	4413      	add	r3, r2
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 fabc 	bl	80005dc <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f900 	bl	8000270 <__adddf3>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800a078:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800a07c:	00c9      	lsls	r1, r1, #3
 800a07e:	4401      	add	r1, r0
 800a080:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 800a084:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800a088:	3303      	adds	r3, #3
 800a08a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 800a08e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800a092:	3301      	adds	r3, #1
 800a094:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800a098:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	ddc1      	ble.n	800a024 <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 800a0a0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 800a0aa:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800a0b4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	dd99      	ble.n	8009ff0 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 800a0bc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800a0c6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	dd89      	ble.n	8009fe2 <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800a0d4:	e01a      	b.n	800a10c <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 800a0d6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800a0da:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800a0f0:	18d4      	adds	r4, r2, r3
 800a0f2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800a0f6:	f7f6 fa71 	bl	80005dc <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 800a102:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a106:	3301      	adds	r3, #1
 800a108:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800a10c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a110:	2b08      	cmp	r3, #8
 800a112:	dde0      	ble.n	800a0d6 <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 800a11c:	46bd      	mov	sp, r7
 800a11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a122:	bf00      	nop

0800a124 <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 800a124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a128:	ed2d 8b02 	vpush	{d8}
 800a12c:	b0ac      	sub	sp, #176	; 0xb0
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6378      	str	r0, [r7, #52]	; 0x34
 800a132:	6339      	str	r1, [r7, #48]	; 0x30
 800a134:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a138:	ed87 1b08 	vstr	d1, [r7, #32]
 800a13c:	61fa      	str	r2, [r7, #28]
 800a13e:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 800a140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a142:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a14a:	f7f6 fa47 	bl	80005dc <__aeabi_dmul>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a156:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a15a:	2300      	movs	r3, #0
 800a15c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a160:	e021      	b.n	800a1a6 <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 800a162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a166:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a16a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	3308      	adds	r3, #8
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 fa2c 	bl	80005dc <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4620      	mov	r0, r4
 800a18a:	4629      	mov	r1, r5
 800a18c:	f7f6 f870 	bl	8000270 <__adddf3>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a198:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a19c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	ddd9      	ble.n	800a162 <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 800a1ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1ba:	f7f6 fa0f 	bl	80005dc <__aeabi_dmul>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a1c6:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 800a1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a1d6:	f7f6 f849 	bl	800026c <__aeabi_dsub>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a1e8:	e01c      	b.n	800a224 <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 800a1ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	18d4      	adds	r4, r2, r3
 800a20a:	4642      	mov	r2, r8
 800a20c:	464b      	mov	r3, r9
 800a20e:	f7f6 f82d 	bl	800026c <__aeabi_dsub>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 800a21a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a21e:	3301      	adds	r3, #1
 800a220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a228:	2b05      	cmp	r3, #5
 800a22a:	ddde      	ble.n	800a1ea <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 800a22c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a230:	f003 f82c 	bl	800d28c <rtIsNaN>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d004      	beq.n	800a244 <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 800a23a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a23e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a242:	e025      	b.n	800a290 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	f04f 0300 	mov.w	r3, #0
 800a24c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a250:	f7f6 fc36 	bl	8000ac0 <__aeabi_dcmplt>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	4bc3      	ldr	r3, [pc, #780]	; (800a56c <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800a260:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a264:	e014      	b.n	800a290 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 800a266:	f04f 0200 	mov.w	r2, #0
 800a26a:	f04f 0300 	mov.w	r3, #0
 800a26e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a272:	f7f6 fc43 	bl	8000afc <__aeabi_dcmpgt>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <UTMeanCovSqrt_C6QfB9Td+0x160>
 800a27c:	f04f 0200 	mov.w	r2, #0
 800a280:	4bbb      	ldr	r3, [pc, #748]	; (800a570 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 800a282:	e003      	b.n	800a28c <UTMeanCovSqrt_C6QfB9Td+0x168>
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	f04f 0300 	mov.w	r3, #0
 800a28c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a29a:	f7f6 f99f 	bl	80005dc <__aeabi_dmul>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2b2:	f7f6 f993 	bl	80005dc <__aeabi_dmul>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 800a2be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a2c6:	f7f6 f989 	bl	80005dc <__aeabi_dmul>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 800a2d2:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800a2d6:	f011 fa73 	bl	801b7c0 <sqrt>
 800a2da:	eeb0 7a40 	vmov.f32	s14, s0
 800a2de:	eef0 7a60 	vmov.f32	s15, s1
 800a2e2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2ec:	e01a      	b.n	800a324 <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 800a2ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a300:	f7f6 f96c 	bl	80005dc <__aeabi_dmul>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a30c:	00c9      	lsls	r1, r1, #3
 800a30e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a312:	4401      	add	r1, r0
 800a314:	3948      	subs	r1, #72	; 0x48
 800a316:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a31a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a31e:	3301      	adds	r3, #1
 800a320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a328:	2b05      	cmp	r3, #5
 800a32a:	dde0      	ble.n	800a2ee <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 800a32c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a330:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 800a334:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a338:	2202      	movs	r2, #2
 800a33a:	4619      	mov	r1, r3
 800a33c:	2005      	movs	r0, #5
 800a33e:	f005 f973 	bl	800f628 <xnrm2_7bm34mDQ>
 800a342:	eeb0 7a40 	vmov.f32	s14, s0
 800a346:	eef0 7a60 	vmov.f32	s15, s1
 800a34a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 800a34e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a352:	f04f 0200 	mov.w	r2, #0
 800a356:	f04f 0300 	mov.w	r3, #0
 800a35a:	f7f6 fba7 	bl	8000aac <__aeabi_dcmpeq>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 80e7 	bne.w	800a534 <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 800a366:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800a36a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800a36e:	eeb0 1a46 	vmov.f32	s2, s12
 800a372:	eef0 1a66 	vmov.f32	s3, s13
 800a376:	eeb0 0a47 	vmov.f32	s0, s14
 800a37a:	eef0 0a67 	vmov.f32	s1, s15
 800a37e:	f002 fe77 	bl	800d070 <rt_hypotd_snf>
 800a382:	eeb0 7a40 	vmov.f32	s14, s0
 800a386:	eef0 7a60 	vmov.f32	s15, s1
 800a38a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 800a38e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a392:	f04f 0200 	mov.w	r2, #0
 800a396:	f04f 0300 	mov.w	r3, #0
 800a39a:	f7f6 fba5 	bl	8000ae8 <__aeabi_dcmpge>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 800a3a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3a8:	613a      	str	r2, [r7, #16]
 800a3aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	ed97 7b04 	vldr	d7, [r7, #16]
 800a3b4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 800a3b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3bc:	60ba      	str	r2, [r7, #8]
 800a3be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a3cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3d0:	f7f6 fb76 	bl	8000ac0 <__aeabi_dcmplt>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 80a8 	beq.w	800a52c <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 800a3e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3f2:	e01d      	b.n	800a430 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 800a3f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a3fe:	4413      	add	r3, r2
 800a400:	3b48      	subs	r3, #72	; 0x48
 800a402:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	4b5a      	ldr	r3, [pc, #360]	; (800a574 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a40c:	f7f6 f8e6 	bl	80005dc <__aeabi_dmul>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a418:	00c9      	lsls	r1, r1, #3
 800a41a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a41e:	4401      	add	r1, r0
 800a420:	3948      	subs	r1, #72	; 0x48
 800a422:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800a426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a42a:	3301      	adds	r3, #1
 800a42c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a434:	2b05      	cmp	r3, #5
 800a436:	dddd      	ble.n	800a3f4 <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 800a438:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a43c:	f04f 0200 	mov.w	r2, #0
 800a440:	4b4c      	ldr	r3, [pc, #304]	; (800a574 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a442:	f7f6 f8cb 	bl	80005dc <__aeabi_dmul>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 800a44e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	4b47      	ldr	r3, [pc, #284]	; (800a574 <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a458:	f7f6 f8c0 	bl	80005dc <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 800a464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a468:	603a      	str	r2, [r7, #0]
 800a46a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a46e:	607b      	str	r3, [r7, #4]
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a47c:	f7f6 fb20 	bl	8000ac0 <__aeabi_dcmplt>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <UTMeanCovSqrt_C6QfB9Td+0x36a>
 800a486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a48a:	2b13      	cmp	r3, #19
 800a48c:	dda9      	ble.n	800a3e2 <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 800a48e:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 800a492:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a496:	2202      	movs	r2, #2
 800a498:	4619      	mov	r1, r3
 800a49a:	2005      	movs	r0, #5
 800a49c:	f005 f8c4 	bl	800f628 <xnrm2_7bm34mDQ>
 800a4a0:	eeb0 7a40 	vmov.f32	s14, s0
 800a4a4:	eef0 7a60 	vmov.f32	s15, s1
 800a4a8:	eeb0 1a47 	vmov.f32	s2, s14
 800a4ac:	eef0 1a67 	vmov.f32	s3, s15
 800a4b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a4b4:	eef0 0a68 	vmov.f32	s1, s17
 800a4b8:	f002 fdda 	bl	800d070 <rt_hypotd_snf>
 800a4bc:	eeb0 7a40 	vmov.f32	s14, s0
 800a4c0:	eef0 7a60 	vmov.f32	s15, s1
 800a4c4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 800a4c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a4cc:	f04f 0200 	mov.w	r2, #0
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	f7f6 fb08 	bl	8000ae8 <__aeabi_dcmpge>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d006      	beq.n	800a4ec <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 800a4de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4e2:	4692      	mov	sl, r2
 800a4e4:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800a4e8:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4f2:	e010      	b.n	800a516 <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 800a4f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a4f8:	f04f 0200 	mov.w	r2, #0
 800a4fc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a500:	f7f6 f86c 	bl	80005dc <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 800a50c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a510:	3301      	adds	r3, #1
 800a512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a516:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a51a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a51e:	429a      	cmp	r2, r3
 800a520:	dbe8      	blt.n	800a4f4 <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 800a522:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a526:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a52a:	e003      	b.n	800a534 <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 800a52c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a530:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 800a534:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800a538:	eeb0 0a47 	vmov.f32	s0, s14
 800a53c:	eef0 0a67 	vmov.f32	s1, s15
 800a540:	f002 fea4 	bl	800d28c <rtIsNaN>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d12b      	bne.n	800a5a2 <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 800a54a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	f7f6 fab3 	bl	8000ac0 <__aeabi_dcmplt>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	4b01      	ldr	r3, [pc, #4]	; (800a56c <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800a566:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800a56a:	e01a      	b.n	800a5a2 <UTMeanCovSqrt_C6QfB9Td+0x47e>
 800a56c:	bff00000 	.word	0xbff00000
 800a570:	3ff00000 	.word	0x3ff00000
 800a574:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 800a578:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a57c:	f04f 0200 	mov.w	r2, #0
 800a580:	f04f 0300 	mov.w	r3, #0
 800a584:	f7f6 faba 	bl	8000afc <__aeabi_dcmpgt>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <UTMeanCovSqrt_C6QfB9Td+0x472>
 800a58e:	f04f 0200 	mov.w	r2, #0
 800a592:	4b99      	ldr	r3, [pc, #612]	; (800a7f8 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800a594:	e003      	b.n	800a59e <UTMeanCovSqrt_C6QfB9Td+0x47a>
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 800a5a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a5a6:	f04f 0200 	mov.w	r2, #0
 800a5aa:	4b93      	ldr	r3, [pc, #588]	; (800a7f8 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800a5ac:	f7f6 fa7e 	bl	8000aac <__aeabi_dcmpeq>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d021      	beq.n	800a5fa <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 800a5b6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800a5ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a5be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a5c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	ed97 1b08 	vldr	d1, [r7, #32]
 800a5cc:	eeb0 0a47 	vmov.f32	s0, s14
 800a5d0:	eef0 0a67 	vmov.f32	s1, s15
 800a5d4:	f002 fbc2 	bl	800cd5c <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 800a5d8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a5dc:	f011 f8f0 	bl	801b7c0 <sqrt>
 800a5e0:	ec51 0b10 	vmov	r0, r1, d0
 800a5e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a5e8:	f7f5 fff8 	bl	80005dc <__aeabi_dmul>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800a5f4:	e9c1 2300 	strd	r2, r3, [r1]
 800a5f8:	e016      	b.n	800a628 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 800a5fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a5fe:	ed97 0b08 	vldr	d0, [r7, #32]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f8fa 	bl	800a7fc <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 800a608:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a60c:	f011 f8d8 	bl	801b7c0 <sqrt>
 800a610:	ec51 0b10 	vmov	r0, r1, d0
 800a614:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a618:	f7f5 ffe0 	bl	80005dc <__aeabi_dmul>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800a624:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800a62e:	2300      	movs	r3, #0
 800a630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a634:	e054      	b.n	800a6e0 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 800a636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a640:	4413      	add	r3, r2
 800a642:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a650:	00e4      	lsls	r4, r4, #3
 800a652:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a656:	442c      	add	r4, r5
 800a658:	f7f5 fe08 	bl	800026c <__aeabi_dsub>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 800a664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a668:	3301      	adds	r3, #1
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a670:	4413      	add	r3, r2
 800a672:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	3308      	adds	r3, #8
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a682:	3401      	adds	r4, #1
 800a684:	00e4      	lsls	r4, r4, #3
 800a686:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a68a:	442c      	add	r4, r5
 800a68c:	f7f5 fdee 	bl	800026c <__aeabi_dsub>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 800a698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a69c:	3302      	adds	r3, #2
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a6a4:	4413      	add	r3, r2
 800a6a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	3310      	adds	r3, #16
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a6b6:	3402      	adds	r4, #2
 800a6b8:	00e4      	lsls	r4, r4, #3
 800a6ba:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a6be:	442c      	add	r4, r5
 800a6c0:	f7f5 fdd4 	bl	800026c <__aeabi_dsub>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 800a6cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800a6d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6da:	3301      	adds	r3, #1
 800a6dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6e4:	2b05      	cmp	r3, #5
 800a6e6:	dda6      	ble.n	800a636 <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 800a6e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a6ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6f0:	f7f5 ff74 	bl	80005dc <__aeabi_dmul>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a702:	e06c      	b.n	800a7de <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 800a704:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a70e:	4413      	add	r3, r2
 800a710:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	f04f 0300 	mov.w	r3, #0
 800a71c:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800a726:	2300      	movs	r3, #0
 800a728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a72c:	e037      	b.n	800a79e <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 800a72e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a738:	4413      	add	r3, r2
 800a73a:	3b60      	subs	r3, #96	; 0x60
 800a73c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a744:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a748:	4413      	add	r3, r2
 800a74a:	00db      	lsls	r3, r3, #3
 800a74c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a750:	4413      	add	r3, r2
 800a752:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f7f5 ff3a 	bl	80005dc <__aeabi_dmul>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 fd7e 	bl	8000270 <__adddf3>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a77c:	00c9      	lsls	r1, r1, #3
 800a77e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a782:	4401      	add	r1, r0
 800a784:	3960      	subs	r1, #96	; 0x60
 800a786:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 800a78a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a78e:	3303      	adds	r3, #3
 800a790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800a794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a798:	3301      	adds	r3, #1
 800a79a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a79e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	ddc3      	ble.n	800a72e <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 800a7a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3b60      	subs	r3, #96	; 0x60
 800a7b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a7bc:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800a7c0:	00e4      	lsls	r4, r4, #3
 800a7c2:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800a7c6:	442c      	add	r4, r5
 800a7c8:	f7f5 ff08 	bl	80005dc <__aeabi_dmul>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 800a7d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7d8:	3301      	adds	r3, #1
 800a7da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a7de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	dd8e      	ble.n	800a704 <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 800a7e6:	bf00      	nop
 800a7e8:	bf00      	nop
 800a7ea:	37b0      	adds	r7, #176	; 0xb0
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	ecbd 8b02 	vpop	{d8}
 800a7f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7f6:	bf00      	nop
 800a7f8:	3ff00000 	.word	0x3ff00000

0800a7fc <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 800a7fc:	b5b0      	push	{r4, r5, r7, lr}
 800a7fe:	b090      	sub	sp, #64	; 0x40
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a81e:	f04f 0200 	mov.w	r2, #0
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	f7f6 f941 	bl	8000aac <__aeabi_dcmpeq>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 800a830:	2302      	movs	r3, #2
 800a832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a836:	e065      	b.n	800a904 <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a842:	f7f5 fff5 	bl	8000830 <__aeabi_ddiv>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	63bb      	str	r3, [r7, #56]	; 0x38
 800a852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a858:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 800a85a:	f04f 0200 	mov.w	r2, #0
 800a85e:	4b5c      	ldr	r3, [pc, #368]	; (800a9d0 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a860:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a864:	f7f6 f940 	bl	8000ae8 <__aeabi_dcmpge>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 800a86e:	2301      	movs	r3, #1
 800a870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a874:	e046      	b.n	800a904 <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 800a876:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a87a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a87e:	f7f5 fead 	bl	80005dc <__aeabi_dmul>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	f04f 0000 	mov.w	r0, #0
 800a88a:	4951      	ldr	r1, [pc, #324]	; (800a9d0 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a88c:	f7f5 fcee 	bl	800026c <__aeabi_dsub>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	ec43 2b17 	vmov	d7, r2, r3
 800a898:	eeb0 0a47 	vmov.f32	s0, s14
 800a89c:	eef0 0a67 	vmov.f32	s1, s15
 800a8a0:	f010 ff8e 	bl	801b7c0 <sqrt>
 800a8a4:	eeb0 7a40 	vmov.f32	s14, s0
 800a8a8:	eef0 7a60 	vmov.f32	s15, s1
 800a8ac:	f107 0218 	add.w	r2, r7, #24
 800a8b0:	f107 0110 	add.w	r1, r7, #16
 800a8b4:	f107 0320 	add.w	r3, r7, #32
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800a8be:	eeb0 0a47 	vmov.f32	s0, s14
 800a8c2:	eef0 0a67 	vmov.f32	s1, s15
 800a8c6:	f002 fa49 	bl	800cd5c <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8d4:	f7f5 fe82 	bl	80005dc <__aeabi_dmul>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4614      	mov	r4, r2
 800a8de:	461d      	mov	r5, r3
 800a8e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	f04f 0300 	mov.w	r3, #0
 800a8ec:	f7f5 fe76 	bl	80005dc <__aeabi_dmul>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fcb8 	bl	800026c <__aeabi_dsub>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 800a904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a908:	68f9      	ldr	r1, [r7, #12]
 800a90a:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 800a90e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a912:	2b00      	cmp	r3, #0
 800a914:	d057      	beq.n	800a9c6 <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 800a916:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a91a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a91e:	f7f5 fe5d 	bl	80005dc <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4614      	mov	r4, r2
 800a928:	461d      	mov	r5, r3
 800a92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a92e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a932:	f7f5 fe53 	bl	80005dc <__aeabi_dmul>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	f7f5 fc95 	bl	800026c <__aeabi_dsub>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 800a94a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a94e:	f002 fc79 	bl	800d244 <rtIsInf>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d11d      	bne.n	800a994 <cholUpdateFactor_HBMX5a5h+0x198>
 800a958:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a95c:	f002 fc96 	bl	800d28c <rtIsNaN>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d116      	bne.n	800a994 <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	4b19      	ldr	r3, [pc, #100]	; (800a9d0 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a96c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 800a970:	f04f 0200 	mov.w	r2, #0
 800a974:	f04f 0300 	mov.w	r3, #0
 800a978:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a97c:	f7f6 f896 	bl	8000aac <__aeabi_dcmpeq>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d110      	bne.n	800a9a8 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	633b      	str	r3, [r7, #48]	; 0x30
 800a98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 800a992:	e009      	b.n	800a9a8 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 800a994:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 800a99e:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 800a9a8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a9ac:	f010 ff08 	bl	801b7c0 <sqrt>
 800a9b0:	ec51 0b10 	vmov	r0, r1, d0
 800a9b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9b8:	f7f5 fe10 	bl	80005dc <__aeabi_dmul>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	68f9      	ldr	r1, [r7, #12]
 800a9c2:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 800a9c6:	bf00      	nop
 800a9c8:	3740      	adds	r7, #64	; 0x40
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	3ff00000 	.word	0x3ff00000
 800a9d4:	2001ebf8 	.word	0x2001ebf8

0800a9d8 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800a9d8:	b5b0      	push	{r4, r5, r7, lr}
 800a9da:	b08e      	sub	sp, #56	; 0x38
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	ed87 0b04 	vstr	d0, [r7, #16]
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a9f2:	f7f6 f86f 	bl	8000ad4 <__aeabi_dcmple>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d020      	beq.n	800aa3e <look1_binlxpw+0x66>
    iLeft = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa0a:	f7f5 fc2f 	bl	800026c <__aeabi_dsub>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4614      	mov	r4, r2
 800aa14:	461d      	mov	r5, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	f7f5 fc22 	bl	800026c <__aeabi_dsub>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f5 fefe 	bl	8000830 <__aeabi_ddiv>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800aa3c:	e087      	b.n	800ab4e <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa4e:	f7f6 f837 	bl	8000ac0 <__aeabi_dcmplt>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d04b      	beq.n	800aaf0 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	085b      	lsrs	r3, r3, #1
 800aa5c:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 800aa66:	e016      	b.n	800aa96 <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa78:	f7f6 f822 	bl	8000ac0 <__aeabi_dcmplt>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 800aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa84:	627b      	str	r3, [r7, #36]	; 0x24
 800aa86:	e001      	b.n	800aa8c <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800aa8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	4413      	add	r3, r2
 800aa92:	085b      	lsrs	r3, r3, #1
 800aa94:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 800aa96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d8e3      	bhi.n	800aa68 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aab0:	f7f5 fbdc 	bl	800026c <__aeabi_dsub>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4614      	mov	r4, r2
 800aaba:	461d      	mov	r5, r3
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	3301      	adds	r3, #1
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f7f5 fbc9 	bl	800026c <__aeabi_dsub>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	4620      	mov	r0, r4
 800aae0:	4629      	mov	r1, r5
 800aae2:	f7f5 fea5 	bl	8000830 <__aeabi_ddiv>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800aaee:	e02e      	b.n	800ab4e <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800aafc:	3b01      	subs	r3, #1
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab0c:	f7f5 fbae 	bl	800026c <__aeabi_dsub>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	461d      	mov	r5, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	f7f5 fb99 	bl	800026c <__aeabi_dsub>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4620      	mov	r0, r4
 800ab40:	4629      	mov	r1, r5
 800ab42:	f7f5 fe75 	bl	8000830 <__aeabi_ddiv>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	4413      	add	r3, r2
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	3301      	adds	r3, #1
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	4413      	add	r3, r2
 800ab68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab70:	f7f5 fb7c 	bl	800026c <__aeabi_dsub>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4610      	mov	r0, r2
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ab80:	f7f5 fd2c 	bl	80005dc <__aeabi_dmul>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab90:	f7f5 fb6e 	bl	8000270 <__adddf3>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	ec43 2b17 	vmov	d7, r2, r3
}
 800ab9c:	eeb0 0a47 	vmov.f32	s0, s14
 800aba0:	eef0 0a67 	vmov.f32	s1, s15
 800aba4:	3738      	adds	r7, #56	; 0x38
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800abac <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 800abac:	b5b0      	push	{r4, r5, r7, lr}
 800abae:	b0c0      	sub	sp, #256	; 0x100
 800abb0:	af04      	add	r7, sp, #16
 800abb2:	6578      	str	r0, [r7, #84]	; 0x54
 800abb4:	6539      	str	r1, [r7, #80]	; 0x50
 800abb6:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800abb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800abbc:	2248      	movs	r2, #72	; 0x48
 800abbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abc0:	4618      	mov	r0, r3
 800abc2:	f010 fc37 	bl	801b434 <memcpy>
  tau_idx_0 = 0.0;
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	f04f 0300 	mov.w	r3, #0
 800abce:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 800abd2:	f04f 0200 	mov.w	r2, #0
 800abd6:	f04f 0300 	mov.w	r3, #0
 800abda:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 800abea:	f04f 0200 	mov.w	r2, #0
 800abee:	f04f 0300 	mov.w	r3, #0
 800abf2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 800abf6:	f04f 0200 	mov.w	r2, #0
 800abfa:	f04f 0300 	mov.w	r3, #0
 800abfe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 800ac02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ac06:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 800ac0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ac0e:	2202      	movs	r2, #2
 800ac10:	4619      	mov	r1, r3
 800ac12:	2002      	movs	r0, #2
 800ac14:	f004 ffc0 	bl	800fb98 <xnrm2_xDOlDEtw>
 800ac18:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800ac1c:	f04f 0200 	mov.w	r2, #0
 800ac20:	f04f 0300 	mov.w	r3, #0
 800ac24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac28:	f7f5 ff40 	bl	8000aac <__aeabi_dcmpeq>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f040 8172 	bne.w	800af18 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800ac34:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800ac38:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800ac3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ac40:	eef0 0a67 	vmov.f32	s1, s15
 800ac44:	f002 fa14 	bl	800d070 <rt_hypotd_snf>
 800ac48:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 800ac4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	f7f5 ff46 	bl	8000ae8 <__aeabi_dcmpge>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 800ac62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ac72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800ac76:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800ac7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7f5 ff17 	bl	8000ac0 <__aeabi_dcmplt>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 80f1 	beq.w	800ae7c <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800aca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aca4:	3301      	adds	r3, #1
 800aca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800acaa:	2301      	movs	r3, #1
 800acac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800acb0:	e01f      	b.n	800acf2 <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800acb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800acbc:	4413      	add	r3, r2
 800acbe:	3b80      	subs	r3, #128	; 0x80
 800acc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acc4:	f04f 0200 	mov.w	r2, #0
 800acc8:	4bc9      	ldr	r3, [pc, #804]	; (800aff0 <qr_5a2P8Gh6+0x444>)
 800acca:	f7f5 fc87 	bl	80005dc <__aeabi_dmul>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4610      	mov	r0, r2
 800acd4:	4619      	mov	r1, r3
 800acd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ace0:	4413      	add	r3, r2
 800ace2:	3b80      	subs	r3, #128	; 0x80
 800ace4:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800ace8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800acec:	3301      	adds	r3, #1
 800acee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800acf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dddb      	ble.n	800acb2 <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 800acfa:	f04f 0200 	mov.w	r2, #0
 800acfe:	4bbc      	ldr	r3, [pc, #752]	; (800aff0 <qr_5a2P8Gh6+0x444>)
 800ad00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ad04:	f7f5 fc6a 	bl	80005dc <__aeabi_dmul>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800ad10:	f04f 0200 	mov.w	r2, #0
 800ad14:	4bb6      	ldr	r3, [pc, #728]	; (800aff0 <qr_5a2P8Gh6+0x444>)
 800ad16:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ad1a:	f7f5 fc5f 	bl	80005dc <__aeabi_dmul>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800ad26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ad2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad34:	647b      	str	r3, [r7, #68]	; 0x44
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ad3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ad42:	f7f5 febd 	bl	8000ac0 <__aeabi_dcmplt>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <qr_5a2P8Gh6+0x1a8>
 800ad4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad50:	2b13      	cmp	r3, #19
 800ad52:	dda5      	ble.n	800aca0 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 800ad54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ad58:	2202      	movs	r2, #2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	2002      	movs	r0, #2
 800ad5e:	f004 ff1b 	bl	800fb98 <xnrm2_xDOlDEtw>
 800ad62:	eeb0 7a40 	vmov.f32	s14, s0
 800ad66:	eef0 7a60 	vmov.f32	s15, s1
 800ad6a:	eeb0 1a47 	vmov.f32	s2, s14
 800ad6e:	eef0 1a67 	vmov.f32	s3, s15
 800ad72:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800ad76:	f002 f97b 	bl	800d070 <rt_hypotd_snf>
 800ad7a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800ad7e:	f04f 0200 	mov.w	r2, #0
 800ad82:	f04f 0300 	mov.w	r3, #0
 800ad86:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ad8a:	f7f5 fead 	bl	8000ae8 <__aeabi_dcmpge>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 800ad94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ada4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800ada8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800adac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800adb0:	f7f5 fa5c 	bl	800026c <__aeabi_dsub>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4610      	mov	r0, r2
 800adba:	4619      	mov	r1, r3
 800adbc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800adc0:	f7f5 fd36 	bl	8000830 <__aeabi_ddiv>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 800adcc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800add0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800add4:	f7f5 fa4a 	bl	800026c <__aeabi_dsub>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	f04f 0000 	mov.w	r0, #0
 800ade0:	4984      	ldr	r1, [pc, #528]	; (800aff4 <qr_5a2P8Gh6+0x448>)
 800ade2:	f7f5 fd25 	bl	8000830 <__aeabi_ddiv>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800adee:	2301      	movs	r3, #1
 800adf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adf4:	e01e      	b.n	800ae34 <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 800adf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ae00:	4413      	add	r3, r2
 800ae02:	3b80      	subs	r3, #128	; 0x80
 800ae04:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae08:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ae0c:	f7f5 fbe6 	bl	80005dc <__aeabi_dmul>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4610      	mov	r0, r2
 800ae16:	4619      	mov	r1, r3
 800ae18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ae22:	4413      	add	r3, r2
 800ae24:	3b80      	subs	r3, #128	; 0x80
 800ae26:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800ae2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae2e:	3301      	adds	r3, #1
 800ae30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	dddc      	ble.n	800adf6 <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae42:	e010      	b.n	800ae66 <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ae4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae50:	f7f5 fbc4 	bl	80005dc <__aeabi_dmul>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800ae5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae60:	3301      	adds	r3, #1
 800ae62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ae6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	dbe8      	blt.n	800ae44 <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 800ae72:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ae76:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800ae7a:	e04d      	b.n	800af18 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800ae7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ae80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae84:	f7f5 f9f2 	bl	800026c <__aeabi_dsub>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ae94:	f7f5 fccc 	bl	8000830 <__aeabi_ddiv>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 800aea0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800aea4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800aea8:	f7f5 f9e0 	bl	800026c <__aeabi_dsub>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	f04f 0000 	mov.w	r0, #0
 800aeb4:	494f      	ldr	r1, [pc, #316]	; (800aff4 <qr_5a2P8Gh6+0x448>)
 800aeb6:	f7f5 fcbb 	bl	8000830 <__aeabi_ddiv>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800aec2:	2301      	movs	r3, #1
 800aec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aec8:	e01e      	b.n	800af08 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 800aeca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aed4:	4413      	add	r3, r2
 800aed6:	3b80      	subs	r3, #128	; 0x80
 800aed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aedc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800aee0:	f7f5 fb7c 	bl	80005dc <__aeabi_dmul>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4610      	mov	r0, r2
 800aeea:	4619      	mov	r1, r3
 800aeec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aef6:	4413      	add	r3, r2
 800aef8:	3b80      	subs	r3, #128	; 0x80
 800aefa:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800aefe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af02:	3301      	adds	r3, #1
 800af04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	dddc      	ble.n	800aeca <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 800af10:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800af14:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 800af18:	f04f 0200 	mov.w	r2, #0
 800af1c:	4b35      	ldr	r3, [pc, #212]	; (800aff4 <qr_5a2P8Gh6+0x448>)
 800af1e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800af2e:	f7f5 fdbd 	bl	8000aac <__aeabi_dcmpeq>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 8081 	bne.w	800b03c <qr_5a2P8Gh6+0x490>
    knt = 3;
 800af3a:	2303      	movs	r3, #3
 800af3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 800af40:	2302      	movs	r3, #2
 800af42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800af46:	e009      	b.n	800af5c <qr_5a2P8Gh6+0x3b0>
      knt--;
 800af48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af4c:	3b01      	subs	r3, #1
 800af4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800af52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af56:	3b01      	subs	r3, #1
 800af58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800af5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af60:	2b00      	cmp	r3, #0
 800af62:	dd11      	ble.n	800af88 <qr_5a2P8Gh6+0x3dc>
 800af64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af6e:	4413      	add	r3, r2
 800af70:	3b80      	subs	r3, #128	; 0x80
 800af72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af76:	f04f 0200 	mov.w	r2, #0
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	f7f5 fd95 	bl	8000aac <__aeabi_dcmpeq>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1df      	bne.n	800af48 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 800af88:	2302      	movs	r3, #2
 800af8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 800af8e:	2300      	movs	r3, #0
 800af90:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800af94:	e049      	b.n	800b02a <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800af96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800af9a:	4613      	mov	r3, r2
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 800afa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 800afb2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800afb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800afba:	441a      	add	r2, r3
 800afbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afc0:	4293      	cmp	r3, r2
 800afc2:	da1f      	bge.n	800b004 <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 800afc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800afce:	4413      	add	r3, r2
 800afd0:	3b80      	subs	r3, #128	; 0x80
 800afd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	f04f 0300 	mov.w	r3, #0
 800afde:	f7f5 fd65 	bl	8000aac <__aeabi_dcmpeq>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d107      	bne.n	800aff8 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 800afe8:	2301      	movs	r3, #1
 800afea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afee:	e011      	b.n	800b014 <qr_5a2P8Gh6+0x468>
 800aff0:	7c900000 	.word	0x7c900000
 800aff4:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800aff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800affc:	3301      	adds	r3, #1
 800affe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b002:	e007      	b.n	800b014 <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 800b004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b008:	3b01      	subs	r3, #1
 800b00a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 800b00e:	2302      	movs	r3, #2
 800b010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800b014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0c7      	beq.n	800afac <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 800b01c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b020:	2b01      	cmp	r3, #1
 800b022:	d102      	bne.n	800b02a <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 800b024:	2301      	movs	r3, #1
 800b026:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800b02a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <qr_5a2P8Gh6+0x49c>
 800b032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b036:	2b00      	cmp	r3, #0
 800b038:	dcad      	bgt.n	800af96 <qr_5a2P8Gh6+0x3ea>
 800b03a:	e005      	b.n	800b048 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800b048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd29      	ble.n	800b0a4 <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 800b050:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b058:	9302      	str	r3, [sp, #8]
 800b05a:	2301      	movs	r3, #1
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2304      	movs	r3, #4
 800b066:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b06a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b06e:	f004 f94f 	bl	800f310 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 800b072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b076:	63bb      	str	r3, [r7, #56]	; 0x38
 800b078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b07c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b082:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b086:	2304      	movs	r3, #4
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	4613      	mov	r3, r2
 800b092:	2201      	movs	r2, #1
 800b094:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800b098:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b09c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b0a0:	f004 fa3f 	bl	800f522 <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 800b0a4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b0a8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 800b0ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800b0b0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 800b0b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b0b8:	2206      	movs	r2, #6
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f004 fd6b 	bl	800fb98 <xnrm2_xDOlDEtw>
 800b0c2:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800b0c6:	f04f 0200 	mov.w	r2, #0
 800b0ca:	f04f 0300 	mov.w	r3, #0
 800b0ce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0d2:	f7f5 fceb 	bl	8000aac <__aeabi_dcmpeq>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f040 8170 	bne.w	800b3be <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 800b0de:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800b0e2:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800b0e6:	eeb0 0a47 	vmov.f32	s0, s14
 800b0ea:	eef0 0a67 	vmov.f32	s1, s15
 800b0ee:	f001 ffbf 	bl	800d070 <rt_hypotd_snf>
 800b0f2:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 800b0f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b0fa:	f04f 0200 	mov.w	r2, #0
 800b0fe:	f04f 0300 	mov.w	r3, #0
 800b102:	f7f5 fcf1 	bl	8000ae8 <__aeabi_dcmpge>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d009      	beq.n	800b120 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 800b10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b11c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b124:	633b      	str	r3, [r7, #48]	; 0x30
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b12e:	637b      	str	r3, [r7, #52]	; 0x34
 800b130:	f04f 0200 	mov.w	r2, #0
 800b134:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b138:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b13c:	f7f5 fcc0 	bl	8000ac0 <__aeabi_dcmplt>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 80ef 	beq.w	800b326 <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800b14e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b152:	3301      	adds	r3, #1
 800b154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b158:	2305      	movs	r3, #5
 800b15a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b15e:	e01f      	b.n	800b1a0 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b16a:	4413      	add	r3, r2
 800b16c:	3b80      	subs	r3, #128	; 0x80
 800b16e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b172:	f04f 0200 	mov.w	r2, #0
 800b176:	4bc9      	ldr	r3, [pc, #804]	; (800b49c <qr_5a2P8Gh6+0x8f0>)
 800b178:	f7f5 fa30 	bl	80005dc <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4610      	mov	r0, r2
 800b182:	4619      	mov	r1, r3
 800b184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b18e:	4413      	add	r3, r2
 800b190:	3b80      	subs	r3, #128	; 0x80
 800b192:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b19a:	3301      	adds	r3, #1
 800b19c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	dddb      	ble.n	800b160 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	4bbb      	ldr	r3, [pc, #748]	; (800b49c <qr_5a2P8Gh6+0x8f0>)
 800b1ae:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b1b2:	f7f5 fa13 	bl	80005dc <__aeabi_dmul>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800b1be:	f04f 0200 	mov.w	r2, #0
 800b1c2:	4bb6      	ldr	r3, [pc, #728]	; (800b49c <qr_5a2P8Gh6+0x8f0>)
 800b1c4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b1c8:	f7f5 fa08 	bl	80005dc <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b1ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b1f0:	f7f5 fc66 	bl	8000ac0 <__aeabi_dcmplt>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <qr_5a2P8Gh6+0x656>
 800b1fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1fe:	2b13      	cmp	r3, #19
 800b200:	dda5      	ble.n	800b14e <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800b202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b206:	2206      	movs	r2, #6
 800b208:	4619      	mov	r1, r3
 800b20a:	2001      	movs	r0, #1
 800b20c:	f004 fcc4 	bl	800fb98 <xnrm2_xDOlDEtw>
 800b210:	eeb0 7a40 	vmov.f32	s14, s0
 800b214:	eef0 7a60 	vmov.f32	s15, s1
 800b218:	eeb0 1a47 	vmov.f32	s2, s14
 800b21c:	eef0 1a67 	vmov.f32	s3, s15
 800b220:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800b224:	f001 ff24 	bl	800d070 <rt_hypotd_snf>
 800b228:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800b22c:	f04f 0200 	mov.w	r2, #0
 800b230:	f04f 0300 	mov.w	r3, #0
 800b234:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b238:	f7f5 fc56 	bl	8000ae8 <__aeabi_dcmpge>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d009      	beq.n	800b256 <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800b242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800b256:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b25a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b25e:	f7f5 f805 	bl	800026c <__aeabi_dsub>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4610      	mov	r0, r2
 800b268:	4619      	mov	r1, r3
 800b26a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b26e:	f7f5 fadf 	bl	8000830 <__aeabi_ddiv>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800b27a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b27e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b282:	f7f4 fff3 	bl	800026c <__aeabi_dsub>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	f04f 0000 	mov.w	r0, #0
 800b28e:	4984      	ldr	r1, [pc, #528]	; (800b4a0 <qr_5a2P8Gh6+0x8f4>)
 800b290:	f7f5 face 	bl	8000830 <__aeabi_ddiv>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b29c:	2305      	movs	r3, #5
 800b29e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2a2:	e01c      	b.n	800b2de <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 800b2a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b2ae:	4413      	add	r3, r2
 800b2b0:	3b80      	subs	r3, #128	; 0x80
 800b2b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2b6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b2ba:	f7f5 f98f 	bl	80005dc <__aeabi_dmul>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b2c6:	00c9      	lsls	r1, r1, #3
 800b2c8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b2cc:	4401      	add	r1, r0
 800b2ce:	3980      	subs	r1, #128	; 0x80
 800b2d0:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b2d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b2e2:	2b05      	cmp	r3, #5
 800b2e4:	ddde      	ble.n	800b2a4 <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2ec:	e010      	b.n	800b310 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 800b2ee:	f04f 0200 	mov.w	r2, #0
 800b2f2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b2f6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2fa:	f7f5 f96f 	bl	80005dc <__aeabi_dmul>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b30a:	3301      	adds	r3, #1
 800b30c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b310:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b314:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b318:	429a      	cmp	r2, r3
 800b31a:	dbe8      	blt.n	800b2ee <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 800b31c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b320:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800b324:	e04b      	b.n	800b3be <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800b326:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800b32a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b32e:	f7f4 ff9d 	bl	800026c <__aeabi_dsub>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4610      	mov	r0, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b33e:	f7f5 fa77 	bl	8000830 <__aeabi_ddiv>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800b34a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b34e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b352:	f7f4 ff8b 	bl	800026c <__aeabi_dsub>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	f04f 0000 	mov.w	r0, #0
 800b35e:	4950      	ldr	r1, [pc, #320]	; (800b4a0 <qr_5a2P8Gh6+0x8f4>)
 800b360:	f7f5 fa66 	bl	8000830 <__aeabi_ddiv>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800b36c:	2305      	movs	r3, #5
 800b36e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b372:	e01c      	b.n	800b3ae <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800b374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b37e:	4413      	add	r3, r2
 800b380:	3b80      	subs	r3, #128	; 0x80
 800b382:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b386:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b38a:	f7f5 f927 	bl	80005dc <__aeabi_dmul>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b396:	00c9      	lsls	r1, r1, #3
 800b398:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b39c:	4401      	add	r1, r0
 800b39e:	3980      	subs	r1, #128	; 0x80
 800b3a0:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800b3a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3b2:	2b05      	cmp	r3, #5
 800b3b4:	ddde      	ble.n	800b374 <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800b3b6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b3ba:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 800b3be:	f04f 0200 	mov.w	r2, #0
 800b3c2:	4b37      	ldr	r3, [pc, #220]	; (800b4a0 <qr_5a2P8Gh6+0x8f4>)
 800b3c4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800b3c8:	f04f 0200 	mov.w	r2, #0
 800b3cc:	f04f 0300 	mov.w	r3, #0
 800b3d0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b3d4:	f7f5 fb6a 	bl	8000aac <__aeabi_dcmpeq>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d162      	bne.n	800b4a4 <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 800b3de:	2302      	movs	r3, #2
 800b3e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800b3e4:	2305      	movs	r3, #5
 800b3e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b3ea:	e009      	b.n	800b400 <qr_5a2P8Gh6+0x854>
      knt--;
 800b3ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800b3f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd11      	ble.n	800b42c <qr_5a2P8Gh6+0x880>
 800b408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b412:	4413      	add	r3, r2
 800b414:	3b80      	subs	r3, #128	; 0x80
 800b416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b41a:	f04f 0200 	mov.w	r2, #0
 800b41e:	f04f 0300 	mov.w	r3, #0
 800b422:	f7f5 fb43 	bl	8000aac <__aeabi_dcmpeq>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1df      	bne.n	800b3ec <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800b432:	2307      	movs	r3, #7
 800b434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 800b43e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b442:	3306      	adds	r3, #6
 800b444:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b448:	429a      	cmp	r2, r3
 800b44a:	dc1b      	bgt.n	800b484 <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 800b44c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b456:	4413      	add	r3, r2
 800b458:	3b80      	subs	r3, #128	; 0x80
 800b45a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	f7f5 fb21 	bl	8000aac <__aeabi_dcmpeq>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d103      	bne.n	800b478 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 800b470:	2301      	movs	r3, #1
 800b472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b476:	e00b      	b.n	800b490 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800b478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b47c:	3301      	adds	r3, #1
 800b47e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b482:	e005      	b.n	800b490 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800b490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0cf      	beq.n	800b438 <qr_5a2P8Gh6+0x88c>
 800b498:	e00a      	b.n	800b4b0 <qr_5a2P8Gh6+0x904>
 800b49a:	bf00      	nop
 800b49c:	7c900000 	.word	0x7c900000
 800b4a0:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800b4b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dd29      	ble.n	800b50c <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800b4b8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b4bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4c0:	9302      	str	r3, [sp, #8]
 800b4c2:	2305      	movs	r3, #5
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b4d2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b4d6:	f003 ff1b 	bl	800f310 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800b4da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b4de:	623b      	str	r3, [r7, #32]
 800b4e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b4ee:	2308      	movs	r3, #8
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	2205      	movs	r2, #5
 800b4fc:	ed97 0b08 	vldr	d0, [r7, #32]
 800b500:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b504:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b508:	f004 f80b 	bl	800f522 <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 800b50c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b510:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800b514:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b518:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b51a:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b51e:	2301      	movs	r3, #1
 800b520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b524:	e00f      	b.n	800b546 <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800b526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b52e:	18d1      	adds	r1, r2, r3
 800b530:	f04f 0200 	mov.w	r2, #0
 800b534:	f04f 0300 	mov.w	r3, #0
 800b538:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b53c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b540:	3301      	adds	r3, #1
 800b542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	ddeb      	ble.n	800b526 <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 800b54e:	f04f 0200 	mov.w	r2, #0
 800b552:	f04f 0300 	mov.w	r3, #0
 800b556:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b55a:	2300      	movs	r3, #0
 800b55c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b560:	e016      	b.n	800b590 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800b562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b566:	3303      	adds	r3, #3
 800b568:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b56c:	3203      	adds	r2, #3
 800b56e:	00d2      	lsls	r2, r2, #3
 800b570:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b572:	4411      	add	r1, r2
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b57a:	4413      	add	r3, r2
 800b57c:	3b80      	subs	r3, #128	; 0x80
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b58a:	3301      	adds	r3, #1
 800b58c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b594:	2b01      	cmp	r3, #1
 800b596:	dde4      	ble.n	800b562 <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 800b598:	e010      	b.n	800b5bc <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 800b59a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b59e:	3303      	adds	r3, #3
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5a4:	18d1      	adds	r1, r2, r3
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800b5b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 800b5bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	ddea      	ble.n	800b59a <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 800b5c4:	f04f 0200 	mov.w	r2, #0
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5d6:	e016      	b.n	800b606 <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800b5d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5dc:	3306      	adds	r3, #6
 800b5de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b5e2:	3206      	adds	r2, #6
 800b5e4:	00d2      	lsls	r2, r2, #3
 800b5e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b5e8:	4411      	add	r1, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b5f0:	4413      	add	r3, r2
 800b5f2:	3b80      	subs	r3, #128	; 0x80
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b5fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b600:	3301      	adds	r3, #1
 800b602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	dde4      	ble.n	800b5d8 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	f04f 0300 	mov.w	r3, #0
 800b616:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800b61a:	f04f 0200 	mov.w	r2, #0
 800b61e:	4bc8      	ldr	r3, [pc, #800]	; (800b940 <qr_5a2P8Gh6+0xd94>)
 800b620:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b624:	2300      	movs	r3, #0
 800b626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b62a:	e014      	b.n	800b656 <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 800b62c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b630:	f1c3 0307 	rsb	r3, r3, #7
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b63a:	4413      	add	r3, r2
 800b63c:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800b640:	f04f 0200 	mov.w	r2, #0
 800b644:	f04f 0300 	mov.w	r3, #0
 800b648:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b64c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b650:	3301      	adds	r3, #1
 800b652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	dde6      	ble.n	800b62c <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 800b65e:	f04f 0200 	mov.w	r2, #0
 800b662:	4bb7      	ldr	r3, [pc, #732]	; (800b940 <qr_5a2P8Gh6+0xd94>)
 800b664:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b674:	f7f5 fa1a 	bl	8000aac <__aeabi_dcmpeq>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d15c      	bne.n	800b738 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 800b67e:	2307      	movs	r3, #7
 800b680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b684:	e009      	b.n	800b69a <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 800b686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b68a:	3b01      	subs	r3, #1
 800b68c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800b690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b694:	3b01      	subs	r3, #1
 800b696:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b69a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	dd12      	ble.n	800b6c8 <qr_5a2P8Gh6+0xb1c>
 800b6a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6a6:	3b02      	subs	r3, #2
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3b80      	subs	r3, #128	; 0x80
 800b6b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6b6:	f04f 0200 	mov.w	r2, #0
 800b6ba:	f04f 0300 	mov.w	r3, #0
 800b6be:	f7f5 f9f5 	bl	8000aac <__aeabi_dcmpeq>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1de      	bne.n	800b686 <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 800b6ce:	2308      	movs	r3, #8
 800b6d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800b6da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6de:	3307      	adds	r3, #7
 800b6e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	dc1c      	bgt.n	800b722 <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800b6e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3b80      	subs	r3, #128	; 0x80
 800b6f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	f7f5 f9d2 	bl	8000aac <__aeabi_dcmpeq>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d103      	bne.n	800b716 <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 800b70e:	2301      	movs	r3, #1
 800b710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b714:	e00b      	b.n	800b72e <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800b716:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b71a:	3301      	adds	r3, #1
 800b71c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b720:	e005      	b.n	800b72e <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800b728:	2301      	movs	r3, #1
 800b72a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800b72e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0ce      	beq.n	800b6d4 <qr_5a2P8Gh6+0xb28>
 800b736:	e005      	b.n	800b744 <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dd29      	ble.n	800b7a0 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 800b74c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b754:	9302      	str	r3, [sp, #8]
 800b756:	2305      	movs	r3, #5
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	2308      	movs	r3, #8
 800b762:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b766:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b76a:	f003 fdd1 	bl	800f310 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 800b76e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b772:	61bb      	str	r3, [r7, #24]
 800b774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b778:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b77c:	61fb      	str	r3, [r7, #28]
 800b77e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b782:	2308      	movs	r3, #8
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	4613      	mov	r3, r2
 800b78e:	2205      	movs	r2, #5
 800b790:	ed97 0b06 	vldr	d0, [r7, #24]
 800b794:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b798:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b79c:	f003 fec1 	bl	800f522 <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b7a0:	2305      	movs	r3, #5
 800b7a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7a6:	e024      	b.n	800b7f2 <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800b7a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b7b2:	4413      	add	r3, r2
 800b7b4:	3b80      	subs	r3, #128	; 0x80
 800b7b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b7ce:	f7f4 ff05 	bl	80005dc <__aeabi_dmul>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b7da:	00c9      	lsls	r1, r1, #3
 800b7dc:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b7e0:	4401      	add	r1, r0
 800b7e2:	3980      	subs	r1, #128	; 0x80
 800b7e4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b7e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7f6:	2b05      	cmp	r3, #5
 800b7f8:	ddd6      	ble.n	800b7a8 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800b7fa:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800b7fe:	f04f 0000 	mov.w	r0, #0
 800b802:	494f      	ldr	r1, [pc, #316]	; (800b940 <qr_5a2P8Gh6+0xd94>)
 800b804:	f7f4 fd32 	bl	800026c <__aeabi_dsub>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 800b810:	f04f 0200 	mov.w	r2, #0
 800b814:	f04f 0300 	mov.w	r3, #0
 800b818:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 800b81c:	f04f 0200 	mov.w	r2, #0
 800b820:	4b47      	ldr	r3, [pc, #284]	; (800b940 <qr_5a2P8Gh6+0xd94>)
 800b822:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800b826:	f04f 0200 	mov.w	r2, #0
 800b82a:	f04f 0300 	mov.w	r3, #0
 800b82e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b832:	f7f5 f93b 	bl	8000aac <__aeabi_dcmpeq>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f040 8083 	bne.w	800b944 <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 800b83e:	2303      	movs	r3, #3
 800b840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800b844:	2304      	movs	r3, #4
 800b846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b84a:	e009      	b.n	800b860 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 800b84c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b850:	3b01      	subs	r3, #1
 800b852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800b856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b85a:	3b01      	subs	r3, #1
 800b85c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd12      	ble.n	800b88e <qr_5a2P8Gh6+0xce2>
 800b868:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b86c:	3b02      	subs	r3, #2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b874:	4413      	add	r3, r2
 800b876:	3b80      	subs	r3, #128	; 0x80
 800b878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b87c:	f04f 0200 	mov.w	r2, #0
 800b880:	f04f 0300 	mov.w	r3, #0
 800b884:	f7f5 f912 	bl	8000aac <__aeabi_dcmpeq>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1de      	bne.n	800b84c <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 800b88e:	2302      	movs	r3, #2
 800b890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 800b894:	2300      	movs	r3, #0
 800b896:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b89a:	e048      	b.n	800b92e <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 800b89c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8a0:	1e5a      	subs	r2, r3, #1
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	4413      	add	r3, r2
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 800b8ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b8b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 800b8bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	da1c      	bge.n	800b908 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 800b8ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	00db      	lsls	r3, r3, #3
 800b8d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b8da:	4413      	add	r3, r2
 800b8dc:	3b80      	subs	r3, #128	; 0x80
 800b8de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	f04f 0300 	mov.w	r3, #0
 800b8ea:	f7f5 f8df 	bl	8000aac <__aeabi_dcmpeq>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d103      	bne.n	800b8fc <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8fa:	e00d      	b.n	800b918 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 800b8fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b900:	3301      	adds	r3, #1
 800b902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b906:	e007      	b.n	800b918 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800b908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b90c:	3b01      	subs	r3, #1
 800b90e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800b912:	2302      	movs	r3, #2
 800b914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800b918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0ca      	beq.n	800b8b6 <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 800b920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b924:	2b01      	cmp	r3, #1
 800b926:	d102      	bne.n	800b92e <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800b928:	2301      	movs	r3, #1
 800b92a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b92e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10c      	bne.n	800b950 <qr_5a2P8Gh6+0xda4>
 800b936:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	dcae      	bgt.n	800b89c <qr_5a2P8Gh6+0xcf0>
 800b93e:	e007      	b.n	800b950 <qr_5a2P8Gh6+0xda4>
 800b940:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b950:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd29      	ble.n	800b9ac <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 800b958:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b95c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	2301      	movs	r3, #1
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	2304      	movs	r3, #4
 800b96e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b972:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b976:	f003 fccb 	bl	800f310 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 800b97a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b97e:	60bb      	str	r3, [r7, #8]
 800b980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b984:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b98e:	2304      	movs	r3, #4
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	4613      	mov	r3, r2
 800b99a:	2201      	movs	r2, #1
 800b99c:	ed97 0b02 	vldr	d0, [r7, #8]
 800b9a0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b9a4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b9a8:	f003 fdbb 	bl	800f522 <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9b2:	e024      	b.n	800b9fe <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 800b9b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b9be:	4413      	add	r3, r2
 800b9c0:	3b80      	subs	r3, #128	; 0x80
 800b9c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b9d4:	607b      	str	r3, [r7, #4]
 800b9d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9da:	f7f4 fdff 	bl	80005dc <__aeabi_dmul>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b9e6:	00c9      	lsls	r1, r1, #3
 800b9e8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b9ec:	4401      	add	r1, r0
 800b9ee:	3980      	subs	r1, #128	; 0x80
 800b9f0:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b9f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	ddd6      	ble.n	800b9b4 <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800ba06:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800ba0a:	f04f 0000 	mov.w	r0, #0
 800ba0e:	492a      	ldr	r1, [pc, #168]	; (800bab8 <qr_5a2P8Gh6+0xf0c>)
 800ba10:	f7f4 fc2c 	bl	800026c <__aeabi_dsub>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800ba22:	2300      	movs	r3, #0
 800ba24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba28:	e03d      	b.n	800baa6 <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800ba2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba32:	18d1      	adds	r1, r2, r3
 800ba34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba38:	00db      	lsls	r3, r3, #3
 800ba3a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ba3e:	4413      	add	r3, r2
 800ba40:	3b80      	subs	r3, #128	; 0x80
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 800ba4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba4e:	3301      	adds	r3, #1
 800ba50:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba54:	3201      	adds	r2, #1
 800ba56:	00d2      	lsls	r2, r2, #3
 800ba58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba5a:	4411      	add	r1, r2
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ba62:	4413      	add	r3, r2
 800ba64:	3b80      	subs	r3, #128	; 0x80
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 800ba6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba72:	3302      	adds	r3, #2
 800ba74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba78:	3202      	adds	r2, #2
 800ba7a:	00d2      	lsls	r2, r2, #3
 800ba7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba7e:	4411      	add	r1, r2
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ba86:	4413      	add	r3, r2
 800ba88:	3b80      	subs	r3, #128	; 0x80
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 800ba92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba96:	3303      	adds	r3, #3
 800ba98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800ba9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800baa0:	3301      	adds	r3, #1
 800baa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800baaa:	2b02      	cmp	r3, #2
 800baac:	ddbd      	ble.n	800ba2a <qr_5a2P8Gh6+0xe7e>
  }
}
 800baae:	bf00      	nop
 800bab0:	bf00      	nop
 800bab2:	37f0      	adds	r7, #240	; 0xf0
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bdb0      	pop	{r4, r5, r7, pc}
 800bab8:	3ff00000 	.word	0x3ff00000

0800babc <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 800babc:	b5b0      	push	{r4, r5, r7, lr}
 800babe:	b0da      	sub	sp, #360	; 0x168
 800bac0:	af04      	add	r7, sp, #16
 800bac2:	66f8      	str	r0, [r7, #108]	; 0x6c
 800bac4:	66b9      	str	r1, [r7, #104]	; 0x68
 800bac6:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800bac8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bacc:	2290      	movs	r2, #144	; 0x90
 800bace:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bad0:	4618      	mov	r0, r3
 800bad2:	f00f fcaf 	bl	801b434 <memcpy>
  work[0] = 0.0;
 800bad6:	f04f 0200 	mov.w	r2, #0
 800bada:	f04f 0300 	mov.w	r3, #0
 800bade:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800bae2:	f04f 0200 	mov.w	r2, #0
 800bae6:	f04f 0300 	mov.w	r3, #0
 800baea:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 800baee:	f04f 0200 	mov.w	r2, #0
 800baf2:	f04f 0300 	mov.w	r3, #0
 800baf6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800bafa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bafe:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800bb02:	f04f 0200 	mov.w	r2, #0
 800bb06:	f04f 0300 	mov.w	r3, #0
 800bb0a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 800bb0e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb12:	2202      	movs	r2, #2
 800bb14:	4619      	mov	r1, r3
 800bb16:	2005      	movs	r0, #5
 800bb18:	f003 ff90 	bl	800fa3c <xnrm2_nLdASVZH>
 800bb1c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800bb20:	f04f 0200 	mov.w	r2, #0
 800bb24:	f04f 0300 	mov.w	r3, #0
 800bb28:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb2c:	f7f4 ffbe 	bl	8000aac <__aeabi_dcmpeq>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f040 8172 	bne.w	800be1c <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800bb38:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800bb3c:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800bb40:	eeb0 0a47 	vmov.f32	s0, s14
 800bb44:	eef0 0a67 	vmov.f32	s1, s15
 800bb48:	f001 fa92 	bl	800d070 <rt_hypotd_snf>
 800bb4c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 800bb50:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	f04f 0300 	mov.w	r3, #0
 800bb5c:	f7f4 ffc4 	bl	8000ae8 <__aeabi_dcmpge>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d009      	beq.n	800bb7a <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800bb66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bb6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bb6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bb76:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800bb7a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800bb7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb82:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 ff95 	bl	8000ac0 <__aeabi_dcmplt>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 80f1 	beq.w	800bd80 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800bba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bba8:	3301      	adds	r3, #1
 800bbaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bbae:	2301      	movs	r3, #1
 800bbb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bbb4:	e01f      	b.n	800bbf6 <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800bbb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bbc0:	4413      	add	r3, r2
 800bbc2:	3bd0      	subs	r3, #208	; 0xd0
 800bbc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	4bca      	ldr	r3, [pc, #808]	; (800bef8 <qr_DvOBrgQi+0x43c>)
 800bbce:	f7f4 fd05 	bl	80005dc <__aeabi_dmul>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3bd0      	subs	r3, #208	; 0xd0
 800bbe8:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bbec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bbf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	dddb      	ble.n	800bbb6 <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 800bbfe:	f04f 0200 	mov.w	r2, #0
 800bc02:	4bbd      	ldr	r3, [pc, #756]	; (800bef8 <qr_DvOBrgQi+0x43c>)
 800bc04:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bc08:	f7f4 fce8 	bl	80005dc <__aeabi_dmul>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800bc14:	f04f 0200 	mov.w	r2, #0
 800bc18:	4bb7      	ldr	r3, [pc, #732]	; (800bef8 <qr_DvOBrgQi+0x43c>)
 800bc1a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bc1e:	f7f4 fcdd 	bl	80005dc <__aeabi_dmul>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800bc2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bc2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bc34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc3a:	f04f 0200 	mov.w	r2, #0
 800bc3e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bc42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bc46:	f7f4 ff3b 	bl	8000ac0 <__aeabi_dcmplt>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <qr_DvOBrgQi+0x19c>
 800bc50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc54:	2b13      	cmp	r3, #19
 800bc56:	dda5      	ble.n	800bba4 <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800bc58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	4619      	mov	r1, r3
 800bc60:	2005      	movs	r0, #5
 800bc62:	f003 feeb 	bl	800fa3c <xnrm2_nLdASVZH>
 800bc66:	eeb0 7a40 	vmov.f32	s14, s0
 800bc6a:	eef0 7a60 	vmov.f32	s15, s1
 800bc6e:	eeb0 1a47 	vmov.f32	s2, s14
 800bc72:	eef0 1a67 	vmov.f32	s3, s15
 800bc76:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800bc7a:	f001 f9f9 	bl	800d070 <rt_hypotd_snf>
 800bc7e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	f04f 0300 	mov.w	r3, #0
 800bc8a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bc8e:	f7f4 ff2b 	bl	8000ae8 <__aeabi_dcmpge>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800bc98:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bc9c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bca8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800bcac:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bcb0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bcb4:	f7f4 fada 	bl	800026c <__aeabi_dsub>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bcc4:	f7f4 fdb4 	bl	8000830 <__aeabi_ddiv>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 800bcd0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bcd4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bcd8:	f7f4 fac8 	bl	800026c <__aeabi_dsub>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	f04f 0000 	mov.w	r0, #0
 800bce4:	4985      	ldr	r1, [pc, #532]	; (800befc <qr_DvOBrgQi+0x440>)
 800bce6:	f7f4 fda3 	bl	8000830 <__aeabi_ddiv>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bcf8:	e01e      	b.n	800bd38 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 800bcfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd04:	4413      	add	r3, r2
 800bd06:	3bd0      	subs	r3, #208	; 0xd0
 800bd08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd0c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bd10:	f7f4 fc64 	bl	80005dc <__aeabi_dmul>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4610      	mov	r0, r2
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd26:	4413      	add	r3, r2
 800bd28:	3bd0      	subs	r3, #208	; 0xd0
 800bd2a:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bd2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd32:	3301      	adds	r3, #1
 800bd34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd3c:	2b05      	cmp	r3, #5
 800bd3e:	dddc      	ble.n	800bcfa <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bd40:	2300      	movs	r3, #0
 800bd42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd46:	e010      	b.n	800bd6a <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800bd48:	f04f 0200 	mov.w	r2, #0
 800bd4c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bd50:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bd54:	f7f4 fc42 	bl	80005dc <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bd60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd64:	3301      	adds	r3, #1
 800bd66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd6a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bd6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bd72:	429a      	cmp	r2, r3
 800bd74:	dbe8      	blt.n	800bd48 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800bd76:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bd7a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800bd7e:	e04d      	b.n	800be1c <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800bd80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bd84:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bd88:	f7f4 fa70 	bl	800026c <__aeabi_dsub>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4610      	mov	r0, r2
 800bd92:	4619      	mov	r1, r3
 800bd94:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bd98:	f7f4 fd4a 	bl	8000830 <__aeabi_ddiv>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 800bda4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800bda8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bdac:	f7f4 fa5e 	bl	800026c <__aeabi_dsub>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	f04f 0000 	mov.w	r0, #0
 800bdb8:	4950      	ldr	r1, [pc, #320]	; (800befc <qr_DvOBrgQi+0x440>)
 800bdba:	f7f4 fd39 	bl	8000830 <__aeabi_ddiv>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bdcc:	e01e      	b.n	800be0c <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 800bdce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bdd8:	4413      	add	r3, r2
 800bdda:	3bd0      	subs	r3, #208	; 0xd0
 800bddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bde0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bde4:	f7f4 fbfa 	bl	80005dc <__aeabi_dmul>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4610      	mov	r0, r2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3bd0      	subs	r3, #208	; 0xd0
 800bdfe:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800be02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be06:	3301      	adds	r3, #1
 800be08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be10:	2b05      	cmp	r3, #5
 800be12:	dddc      	ble.n	800bdce <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 800be14:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800be18:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 800be1c:	f04f 0200 	mov.w	r2, #0
 800be20:	4b36      	ldr	r3, [pc, #216]	; (800befc <qr_DvOBrgQi+0x440>)
 800be22:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800be26:	f04f 0200 	mov.w	r2, #0
 800be2a:	f04f 0300 	mov.w	r3, #0
 800be2e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800be32:	f7f4 fe3b 	bl	8000aac <__aeabi_dcmpeq>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f040 8083 	bne.w	800bf44 <qr_DvOBrgQi+0x488>
    knt = 6;
 800be3e:	2306      	movs	r3, #6
 800be40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 800be44:	2305      	movs	r3, #5
 800be46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800be4a:	e009      	b.n	800be60 <qr_DvOBrgQi+0x3a4>
      knt--;
 800be4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800be50:	3b01      	subs	r3, #1
 800be52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800be56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be5a:	3b01      	subs	r3, #1
 800be5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800be60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800be64:	2b00      	cmp	r3, #0
 800be66:	dd11      	ble.n	800be8c <qr_DvOBrgQi+0x3d0>
 800be68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800be72:	4413      	add	r3, r2
 800be74:	3bd0      	subs	r3, #208	; 0xd0
 800be76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be7a:	f04f 0200 	mov.w	r2, #0
 800be7e:	f04f 0300 	mov.w	r3, #0
 800be82:	f7f4 fe13 	bl	8000aac <__aeabi_dcmpeq>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1df      	bne.n	800be4c <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 800be8c:	2302      	movs	r3, #2
 800be8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 800be92:	2300      	movs	r3, #0
 800be94:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800be98:	e04b      	b.n	800bf32 <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800be9a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800be9e:	4613      	mov	r3, r2
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	4413      	add	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800beaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800beae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800beb8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800bebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bec0:	441a      	add	r2, r3
 800bec2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bec6:	4293      	cmp	r3, r2
 800bec8:	da20      	bge.n	800bf0c <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 800beca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bed4:	4413      	add	r3, r2
 800bed6:	3bd0      	subs	r3, #208	; 0xd0
 800bed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	f7f4 fde2 	bl	8000aac <__aeabi_dcmpeq>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d108      	bne.n	800bf00 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 800beee:	2301      	movs	r3, #1
 800bef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800bef4:	e012      	b.n	800bf1c <qr_DvOBrgQi+0x460>
 800bef6:	bf00      	nop
 800bef8:	7c900000 	.word	0x7c900000
 800befc:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800bf00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bf04:	3301      	adds	r3, #1
 800bf06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bf0a:	e007      	b.n	800bf1c <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 800bf0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf10:	3b01      	subs	r3, #1
 800bf12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 800bf16:	2302      	movs	r3, #2
 800bf18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800bf1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0c6      	beq.n	800beb2 <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 800bf24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d102      	bne.n	800bf32 <qr_DvOBrgQi+0x476>
        exitg2 = true;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800bf32:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10a      	bne.n	800bf50 <qr_DvOBrgQi+0x494>
 800bf3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dcab      	bgt.n	800be9a <qr_DvOBrgQi+0x3de>
 800bf42:	e005      	b.n	800bf50 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800bf50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dd29      	ble.n	800bfac <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800bf58:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800bf5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	2301      	movs	r3, #1
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	2307      	movs	r3, #7
 800bf6e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bf72:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bf76:	f003 f943 	bl	800f200 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800bf7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bf7e:	653b      	str	r3, [r7, #80]	; 0x50
 800bf80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bf84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bf88:	657b      	str	r3, [r7, #84]	; 0x54
 800bf8a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bf8e:	2307      	movs	r3, #7
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800bfa0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bfa4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bfa8:	f003 fa38 	bl	800f41c <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 800bfac:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bfb0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 800bfb4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800bfb8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 800bfbc:	f04f 0200 	mov.w	r2, #0
 800bfc0:	f04f 0300 	mov.w	r3, #0
 800bfc4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 800bfc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bfcc:	2209      	movs	r2, #9
 800bfce:	4619      	mov	r1, r3
 800bfd0:	2004      	movs	r0, #4
 800bfd2:	f003 fd33 	bl	800fa3c <xnrm2_nLdASVZH>
 800bfd6:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800bfda:	f04f 0200 	mov.w	r2, #0
 800bfde:	f04f 0300 	mov.w	r3, #0
 800bfe2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bfe6:	f7f4 fd61 	bl	8000aac <__aeabi_dcmpeq>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 8174 	bne.w	800c2da <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 800bff2:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800bff6:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800bffa:	eeb0 0a47 	vmov.f32	s0, s14
 800bffe:	eef0 0a67 	vmov.f32	s1, s15
 800c002:	f001 f835 	bl	800d070 <rt_hypotd_snf>
 800c006:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 800c00a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	f04f 0300 	mov.w	r3, #0
 800c016:	f7f4 fd67 	bl	8000ae8 <__aeabi_dcmpge>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d009      	beq.n	800c034 <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 800c020:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c024:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c02c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c030:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800c034:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c038:	64bb      	str	r3, [r7, #72]	; 0x48
 800c03a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c03e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c042:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c044:	f04f 0200 	mov.w	r2, #0
 800c048:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c04c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c050:	f7f4 fd36 	bl	8000ac0 <__aeabi_dcmplt>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 80f1 	beq.w	800c23e <qr_DvOBrgQi+0x782>
      knt = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800c062:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c066:	3301      	adds	r3, #1
 800c068:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c06c:	2308      	movs	r3, #8
 800c06e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c072:	e01f      	b.n	800c0b4 <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800c074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c07e:	4413      	add	r3, r2
 800c080:	3bd0      	subs	r3, #208	; 0xd0
 800c082:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c086:	f04f 0200 	mov.w	r2, #0
 800c08a:	4bc6      	ldr	r3, [pc, #792]	; (800c3a4 <qr_DvOBrgQi+0x8e8>)
 800c08c:	f7f4 faa6 	bl	80005dc <__aeabi_dmul>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4610      	mov	r0, r2
 800c096:	4619      	mov	r1, r3
 800c098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3bd0      	subs	r3, #208	; 0xd0
 800c0a6:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c0aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c0b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0b8:	2b0b      	cmp	r3, #11
 800c0ba:	dddb      	ble.n	800c074 <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 800c0bc:	f04f 0200 	mov.w	r2, #0
 800c0c0:	4bb8      	ldr	r3, [pc, #736]	; (800c3a4 <qr_DvOBrgQi+0x8e8>)
 800c0c2:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c0c6:	f7f4 fa89 	bl	80005dc <__aeabi_dmul>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	4bb3      	ldr	r3, [pc, #716]	; (800c3a4 <qr_DvOBrgQi+0x8e8>)
 800c0d8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c0dc:	f7f4 fa7e 	bl	80005dc <__aeabi_dmul>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800c0e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c0ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c0ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c0f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f8:	f04f 0200 	mov.w	r2, #0
 800c0fc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c100:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c104:	f7f4 fcdc 	bl	8000ac0 <__aeabi_dcmplt>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <qr_DvOBrgQi+0x65a>
 800c10e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c112:	2b13      	cmp	r3, #19
 800c114:	dda5      	ble.n	800c062 <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 800c116:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c11a:	2209      	movs	r2, #9
 800c11c:	4619      	mov	r1, r3
 800c11e:	2004      	movs	r0, #4
 800c120:	f003 fc8c 	bl	800fa3c <xnrm2_nLdASVZH>
 800c124:	eeb0 7a40 	vmov.f32	s14, s0
 800c128:	eef0 7a60 	vmov.f32	s15, s1
 800c12c:	eeb0 1a47 	vmov.f32	s2, s14
 800c130:	eef0 1a67 	vmov.f32	s3, s15
 800c134:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800c138:	f000 ff9a 	bl	800d070 <rt_hypotd_snf>
 800c13c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800c140:	f04f 0200 	mov.w	r2, #0
 800c144:	f04f 0300 	mov.w	r3, #0
 800c148:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c14c:	f7f4 fccc 	bl	8000ae8 <__aeabi_dcmpge>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d009      	beq.n	800c16a <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800c156:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c15a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c15e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c162:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c166:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800c16a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c16e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c172:	f7f4 f87b 	bl	800026c <__aeabi_dsub>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4610      	mov	r0, r2
 800c17c:	4619      	mov	r1, r3
 800c17e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c182:	f7f4 fb55 	bl	8000830 <__aeabi_ddiv>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 800c18e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c192:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c196:	f7f4 f869 	bl	800026c <__aeabi_dsub>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	f04f 0000 	mov.w	r0, #0
 800c1a2:	4981      	ldr	r1, [pc, #516]	; (800c3a8 <qr_DvOBrgQi+0x8ec>)
 800c1a4:	f7f4 fb44 	bl	8000830 <__aeabi_ddiv>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c1b6:	e01e      	b.n	800c1f6 <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800c1b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3bd0      	subs	r3, #208	; 0xd0
 800c1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1ca:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c1ce:	f7f4 fa05 	bl	80005dc <__aeabi_dmul>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	4619      	mov	r1, r3
 800c1da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3bd0      	subs	r3, #208	; 0xd0
 800c1e8:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c1ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c1f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1fa:	2b0b      	cmp	r3, #11
 800c1fc:	dddc      	ble.n	800c1b8 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c1fe:	2300      	movs	r3, #0
 800c200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c204:	e010      	b.n	800c228 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800c206:	f04f 0200 	mov.w	r2, #0
 800c20a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c20e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c212:	f7f4 f9e3 	bl	80005dc <__aeabi_dmul>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c21e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c222:	3301      	adds	r3, #1
 800c224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c228:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c22c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c230:	429a      	cmp	r2, r3
 800c232:	dbe8      	blt.n	800c206 <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800c234:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c238:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800c23c:	e04d      	b.n	800c2da <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800c23e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800c242:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c246:	f7f4 f811 	bl	800026c <__aeabi_dsub>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4610      	mov	r0, r2
 800c250:	4619      	mov	r1, r3
 800c252:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c256:	f7f4 faeb 	bl	8000830 <__aeabi_ddiv>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800c262:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c266:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c26a:	f7f3 ffff 	bl	800026c <__aeabi_dsub>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	494c      	ldr	r1, [pc, #304]	; (800c3a8 <qr_DvOBrgQi+0x8ec>)
 800c278:	f7f4 fada 	bl	8000830 <__aeabi_ddiv>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800c284:	2308      	movs	r3, #8
 800c286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c28a:	e01e      	b.n	800c2ca <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800c28c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c296:	4413      	add	r3, r2
 800c298:	3bd0      	subs	r3, #208	; 0xd0
 800c29a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c29e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c2a2:	f7f4 f99b 	bl	80005dc <__aeabi_dmul>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3bd0      	subs	r3, #208	; 0xd0
 800c2bc:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800c2c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c2ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c2ce:	2b0b      	cmp	r3, #11
 800c2d0:	dddc      	ble.n	800c28c <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800c2d2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c2d6:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800c2da:	f04f 0200 	mov.w	r2, #0
 800c2de:	4b32      	ldr	r3, [pc, #200]	; (800c3a8 <qr_DvOBrgQi+0x8ec>)
 800c2e0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c2e4:	f04f 0200 	mov.w	r2, #0
 800c2e8:	f04f 0300 	mov.w	r3, #0
 800c2ec:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c2f0:	f7f4 fbdc 	bl	8000aac <__aeabi_dcmpeq>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d163      	bne.n	800c3c2 <qr_DvOBrgQi+0x906>
    knt = 5;
 800c2fa:	2305      	movs	r3, #5
 800c2fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800c300:	230b      	movs	r3, #11
 800c302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800c306:	e009      	b.n	800c31c <qr_DvOBrgQi+0x860>
      knt--;
 800c308:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c30c:	3b01      	subs	r3, #1
 800c30e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800c312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c316:	3b01      	subs	r3, #1
 800c318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800c31c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c320:	2b00      	cmp	r3, #0
 800c322:	dd11      	ble.n	800c348 <qr_DvOBrgQi+0x88c>
 800c324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c32e:	4413      	add	r3, r2
 800c330:	3bd0      	subs	r3, #208	; 0xd0
 800c332:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c336:	f04f 0200 	mov.w	r2, #0
 800c33a:	f04f 0300 	mov.w	r3, #0
 800c33e:	f7f4 fbb5 	bl	8000aac <__aeabi_dcmpeq>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1df      	bne.n	800c308 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800c348:	2301      	movs	r3, #1
 800c34a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800c34e:	230d      	movs	r3, #13
 800c350:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800c35a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c35e:	f103 020c 	add.w	r2, r3, #12
 800c362:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c366:	4293      	cmp	r3, r2
 800c368:	dc20      	bgt.n	800c3ac <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800c36a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c374:	4413      	add	r3, r2
 800c376:	3bd0      	subs	r3, #208	; 0xd0
 800c378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c37c:	f04f 0200 	mov.w	r2, #0
 800c380:	f04f 0300 	mov.w	r3, #0
 800c384:	f7f4 fb92 	bl	8000aac <__aeabi_dcmpeq>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d103      	bne.n	800c396 <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800c38e:	2301      	movs	r3, #1
 800c390:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c394:	e010      	b.n	800c3b8 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800c396:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c39a:	3301      	adds	r3, #1
 800c39c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c3a0:	e00a      	b.n	800c3b8 <qr_DvOBrgQi+0x8fc>
 800c3a2:	bf00      	nop
 800c3a4:	7c900000 	.word	0x7c900000
 800c3a8:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c3b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d0c9      	beq.n	800c354 <qr_DvOBrgQi+0x898>
 800c3c0:	e005      	b.n	800c3ce <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800c3ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	dd29      	ble.n	800c42a <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800c3d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c3da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c3de:	9302      	str	r3, [sp, #8]
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	230e      	movs	r3, #14
 800c3ec:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c3f0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c3f4:	f002 ff04 	bl	800f200 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800c3f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c3fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c402:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c408:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c40c:	230e      	movs	r3, #14
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	4613      	mov	r3, r2
 800c418:	2208      	movs	r2, #8
 800c41a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800c41e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c422:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c426:	f002 fff9 	bl	800f41c <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800c42a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c42e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800c432:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c436:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800c43a:	f04f 0200 	mov.w	r2, #0
 800c43e:	f04f 0300 	mov.w	r3, #0
 800c442:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800c446:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c44a:	2210      	movs	r2, #16
 800c44c:	4619      	mov	r1, r3
 800c44e:	2003      	movs	r0, #3
 800c450:	f003 faf4 	bl	800fa3c <xnrm2_nLdASVZH>
 800c454:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800c458:	f04f 0200 	mov.w	r2, #0
 800c45c:	f04f 0300 	mov.w	r3, #0
 800c460:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c464:	f7f4 fb22 	bl	8000aac <__aeabi_dcmpeq>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f040 8170 	bne.w	800c750 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800c470:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800c474:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800c478:	eeb0 0a47 	vmov.f32	s0, s14
 800c47c:	eef0 0a67 	vmov.f32	s1, s15
 800c480:	f000 fdf6 	bl	800d070 <rt_hypotd_snf>
 800c484:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800c488:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c48c:	f04f 0200 	mov.w	r2, #0
 800c490:	f04f 0300 	mov.w	r3, #0
 800c494:	f7f4 fb28 	bl	8000ae8 <__aeabi_dcmpge>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d009      	beq.n	800c4b2 <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800c49e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4a2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c4a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c4aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c4ae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800c4b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4b6:	633b      	str	r3, [r7, #48]	; 0x30
 800c4b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c4bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c2:	f04f 0200 	mov.w	r2, #0
 800c4c6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c4ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c4ce:	f7f4 faf7 	bl	8000ac0 <__aeabi_dcmplt>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 80ef 	beq.w	800c6b8 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800c4e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c4ea:	230f      	movs	r3, #15
 800c4ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c4f0:	e01f      	b.n	800c532 <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800c4f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c4fc:	4413      	add	r3, r2
 800c4fe:	3bd0      	subs	r3, #208	; 0xd0
 800c500:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	4bb5      	ldr	r3, [pc, #724]	; (800c7e0 <qr_DvOBrgQi+0xd24>)
 800c50a:	f7f4 f867 	bl	80005dc <__aeabi_dmul>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4610      	mov	r0, r2
 800c514:	4619      	mov	r1, r3
 800c516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c520:	4413      	add	r3, r2
 800c522:	3bd0      	subs	r3, #208	; 0xd0
 800c524:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c52c:	3301      	adds	r3, #1
 800c52e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c536:	2b11      	cmp	r3, #17
 800c538:	dddb      	ble.n	800c4f2 <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800c53a:	f04f 0200 	mov.w	r2, #0
 800c53e:	4ba8      	ldr	r3, [pc, #672]	; (800c7e0 <qr_DvOBrgQi+0xd24>)
 800c540:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c544:	f7f4 f84a 	bl	80005dc <__aeabi_dmul>
 800c548:	4602      	mov	r2, r0
 800c54a:	460b      	mov	r3, r1
 800c54c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800c550:	f04f 0200 	mov.w	r2, #0
 800c554:	4ba2      	ldr	r3, [pc, #648]	; (800c7e0 <qr_DvOBrgQi+0xd24>)
 800c556:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c55a:	f7f4 f83f 	bl	80005dc <__aeabi_dmul>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800c566:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c56c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c574:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c576:	f04f 0200 	mov.w	r2, #0
 800c57a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c57e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c582:	f7f4 fa9d 	bl	8000ac0 <__aeabi_dcmplt>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <qr_DvOBrgQi+0xad8>
 800c58c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c590:	2b13      	cmp	r3, #19
 800c592:	dda5      	ble.n	800c4e0 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800c594:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c598:	2210      	movs	r2, #16
 800c59a:	4619      	mov	r1, r3
 800c59c:	2003      	movs	r0, #3
 800c59e:	f003 fa4d 	bl	800fa3c <xnrm2_nLdASVZH>
 800c5a2:	eeb0 7a40 	vmov.f32	s14, s0
 800c5a6:	eef0 7a60 	vmov.f32	s15, s1
 800c5aa:	eeb0 1a47 	vmov.f32	s2, s14
 800c5ae:	eef0 1a67 	vmov.f32	s3, s15
 800c5b2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800c5b6:	f000 fd5b 	bl	800d070 <rt_hypotd_snf>
 800c5ba:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800c5be:	f04f 0200 	mov.w	r2, #0
 800c5c2:	f04f 0300 	mov.w	r3, #0
 800c5c6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c5ca:	f7f4 fa8d 	bl	8000ae8 <__aeabi_dcmpge>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d009      	beq.n	800c5e8 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800c5d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c5d8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c5dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c5e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c5e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800c5e8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c5ec:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c5f0:	f7f3 fe3c 	bl	800026c <__aeabi_dsub>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c600:	f7f4 f916 	bl	8000830 <__aeabi_ddiv>
 800c604:	4602      	mov	r2, r0
 800c606:	460b      	mov	r3, r1
 800c608:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800c60c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c610:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c614:	f7f3 fe2a 	bl	800026c <__aeabi_dsub>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	f04f 0000 	mov.w	r0, #0
 800c620:	4970      	ldr	r1, [pc, #448]	; (800c7e4 <qr_DvOBrgQi+0xd28>)
 800c622:	f7f4 f905 	bl	8000830 <__aeabi_ddiv>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c62e:	230f      	movs	r3, #15
 800c630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c634:	e01c      	b.n	800c670 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800c636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c63a:	00db      	lsls	r3, r3, #3
 800c63c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c640:	4413      	add	r3, r2
 800c642:	3bd0      	subs	r3, #208	; 0xd0
 800c644:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c648:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c64c:	f7f3 ffc6 	bl	80005dc <__aeabi_dmul>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c658:	00c9      	lsls	r1, r1, #3
 800c65a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c65e:	4401      	add	r1, r0
 800c660:	39d0      	subs	r1, #208	; 0xd0
 800c662:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c66a:	3301      	adds	r3, #1
 800c66c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c674:	2b11      	cmp	r3, #17
 800c676:	ddde      	ble.n	800c636 <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c678:	2300      	movs	r3, #0
 800c67a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c67e:	e010      	b.n	800c6a2 <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800c680:	f04f 0200 	mov.w	r2, #0
 800c684:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c688:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c68c:	f7f3 ffa6 	bl	80005dc <__aeabi_dmul>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c69c:	3301      	adds	r3, #1
 800c69e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c6a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c6a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	dbe8      	blt.n	800c680 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800c6ae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c6b2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800c6b6:	e04b      	b.n	800c750 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800c6b8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c6bc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c6c0:	f7f3 fdd4 	bl	800026c <__aeabi_dsub>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c6d0:	f7f4 f8ae 	bl	8000830 <__aeabi_ddiv>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800c6dc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c6e0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c6e4:	f7f3 fdc2 	bl	800026c <__aeabi_dsub>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	f04f 0000 	mov.w	r0, #0
 800c6f0:	493c      	ldr	r1, [pc, #240]	; (800c7e4 <qr_DvOBrgQi+0xd28>)
 800c6f2:	f7f4 f89d 	bl	8000830 <__aeabi_ddiv>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800c6fe:	230f      	movs	r3, #15
 800c700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c704:	e01c      	b.n	800c740 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800c706:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c710:	4413      	add	r3, r2
 800c712:	3bd0      	subs	r3, #208	; 0xd0
 800c714:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c718:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c71c:	f7f3 ff5e 	bl	80005dc <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c728:	00c9      	lsls	r1, r1, #3
 800c72a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c72e:	4401      	add	r1, r0
 800c730:	39d0      	subs	r1, #208	; 0xd0
 800c732:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800c736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c73a:	3301      	adds	r3, #1
 800c73c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c744:	2b11      	cmp	r3, #17
 800c746:	ddde      	ble.n	800c706 <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800c748:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c74c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800c750:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c754:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800c758:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c75c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c75e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800c762:	2301      	movs	r3, #1
 800c764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c768:	e00f      	b.n	800c78a <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800c76a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c772:	18d1      	adds	r1, r2, r3
 800c774:	f04f 0200 	mov.w	r2, #0
 800c778:	f04f 0300 	mov.w	r3, #0
 800c77c:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800c780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c784:	3301      	adds	r3, #1
 800c786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c78a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c78e:	2b02      	cmp	r3, #2
 800c790:	ddeb      	ble.n	800c76a <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800c792:	f04f 0200 	mov.w	r2, #0
 800c796:	f04f 0300 	mov.w	r3, #0
 800c79a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c7a4:	e016      	b.n	800c7d4 <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800c7a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7aa:	3306      	adds	r3, #6
 800c7ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c7b0:	3203      	adds	r2, #3
 800c7b2:	00d2      	lsls	r2, r2, #3
 800c7b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c7b6:	4411      	add	r1, r2
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c7be:	4413      	add	r3, r2
 800c7c0:	3bd0      	subs	r3, #208	; 0xd0
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c7ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c7d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	dde4      	ble.n	800c7a6 <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800c7dc:	e015      	b.n	800c80a <qr_DvOBrgQi+0xd4e>
 800c7de:	bf00      	nop
 800c7e0:	7c900000 	.word	0x7c900000
 800c7e4:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800c7e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7ec:	3303      	adds	r3, #3
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c7f2:	18d1      	adds	r1, r2, r3
 800c7f4:	f04f 0200 	mov.w	r2, #0
 800c7f8:	f04f 0300 	mov.w	r3, #0
 800c7fc:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800c800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c804:	3301      	adds	r3, #1
 800c806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800c80a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c80e:	2b02      	cmp	r3, #2
 800c810:	ddea      	ble.n	800c7e8 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800c812:	f04f 0200 	mov.w	r2, #0
 800c816:	f04f 0300 	mov.w	r3, #0
 800c81a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800c81e:	2300      	movs	r3, #0
 800c820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c824:	e016      	b.n	800c854 <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800c826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c82a:	330c      	adds	r3, #12
 800c82c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c830:	3206      	adds	r2, #6
 800c832:	00d2      	lsls	r2, r2, #3
 800c834:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c836:	4411      	add	r1, r2
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c83e:	4413      	add	r3, r2
 800c840:	3bd0      	subs	r3, #208	; 0xd0
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800c84a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c84e:	3301      	adds	r3, #1
 800c850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c858:	2b02      	cmp	r3, #2
 800c85a:	dde4      	ble.n	800c826 <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c868:	230f      	movs	r3, #15
 800c86a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c86e:	e024      	b.n	800c8ba <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800c870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c87a:	4413      	add	r3, r2
 800c87c:	3bd0      	subs	r3, #208	; 0xd0
 800c87e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c886:	623b      	str	r3, [r7, #32]
 800c888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c88c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c890:	627b      	str	r3, [r7, #36]	; 0x24
 800c892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c896:	f7f3 fea1 	bl	80005dc <__aeabi_dmul>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c8a2:	00c9      	lsls	r1, r1, #3
 800c8a4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c8a8:	4401      	add	r1, r0
 800c8aa:	39d0      	subs	r1, #208	; 0xd0
 800c8ac:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c8b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8be:	2b11      	cmp	r3, #17
 800c8c0:	ddd6      	ble.n	800c870 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800c8c2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c8c6:	f04f 0000 	mov.w	r0, #0
 800c8ca:	49cc      	ldr	r1, [pc, #816]	; (800cbfc <qr_DvOBrgQi+0x1140>)
 800c8cc:	f7f3 fcce 	bl	800026c <__aeabi_dsub>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c8de:	e014      	b.n	800c90a <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800c8e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8e4:	f1c3 030d 	rsb	r3, r3, #13
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800c8f4:	f04f 0200 	mov.w	r2, #0
 800c8f8:	f04f 0300 	mov.w	r3, #0
 800c8fc:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c904:	3301      	adds	r3, #1
 800c906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c90a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c90e:	2b01      	cmp	r3, #1
 800c910:	dde6      	ble.n	800c8e0 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	4bb9      	ldr	r3, [pc, #740]	; (800cbfc <qr_DvOBrgQi+0x1140>)
 800c918:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c91c:	f04f 0200 	mov.w	r2, #0
 800c920:	f04f 0300 	mov.w	r3, #0
 800c924:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c928:	f7f4 f8c0 	bl	8000aac <__aeabi_dcmpeq>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d15f      	bne.n	800c9f2 <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800c932:	2305      	movs	r3, #5
 800c934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800c938:	230d      	movs	r3, #13
 800c93a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c93e:	e009      	b.n	800c954 <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800c940:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c944:	3b01      	subs	r3, #1
 800c946:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c94a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c94e:	3b01      	subs	r3, #1
 800c950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dd12      	ble.n	800c982 <qr_DvOBrgQi+0xec6>
 800c95c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c960:	3b02      	subs	r3, #2
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c968:	4413      	add	r3, r2
 800c96a:	3bd0      	subs	r3, #208	; 0xd0
 800c96c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c970:	f04f 0200 	mov.w	r2, #0
 800c974:	f04f 0300 	mov.w	r3, #0
 800c978:	f7f4 f898 	bl	8000aac <__aeabi_dcmpeq>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1de      	bne.n	800c940 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800c982:	2301      	movs	r3, #1
 800c984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800c988:	230e      	movs	r3, #14
 800c98a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800c994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c998:	330d      	adds	r3, #13
 800c99a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	dc1c      	bgt.n	800c9dc <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800c9a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c9ae:	4413      	add	r3, r2
 800c9b0:	3bd0      	subs	r3, #208	; 0xd0
 800c9b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9b6:	f04f 0200 	mov.w	r2, #0
 800c9ba:	f04f 0300 	mov.w	r3, #0
 800c9be:	f7f4 f875 	bl	8000aac <__aeabi_dcmpeq>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c9ce:	e00b      	b.n	800c9e8 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800c9d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c9da:	e005      	b.n	800c9e8 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c9e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d0ce      	beq.n	800c98e <qr_DvOBrgQi+0xed2>
 800c9f0:	e005      	b.n	800c9fe <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800c9fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dd29      	ble.n	800ca5a <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800ca06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800ca0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ca0e:	9302      	str	r3, [sp, #8]
 800ca10:	2308      	movs	r3, #8
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	230e      	movs	r3, #14
 800ca1c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800ca20:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ca24:	f002 fbec 	bl	800f200 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800ca28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ca2c:	61bb      	str	r3, [r7, #24]
 800ca2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ca32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ca3c:	230e      	movs	r3, #14
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	4613      	mov	r3, r2
 800ca48:	2208      	movs	r2, #8
 800ca4a:	ed97 0b06 	vldr	d0, [r7, #24]
 800ca4e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800ca52:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ca56:	f002 fce1 	bl	800f41c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800ca5a:	2308      	movs	r3, #8
 800ca5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ca60:	e024      	b.n	800caac <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800ca62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3bd0      	subs	r3, #208	; 0xd0
 800ca70:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ca78:	613b      	str	r3, [r7, #16]
 800ca7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ca7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca82:	617b      	str	r3, [r7, #20]
 800ca84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca88:	f7f3 fda8 	bl	80005dc <__aeabi_dmul>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800ca94:	00c9      	lsls	r1, r1, #3
 800ca96:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800ca9a:	4401      	add	r1, r0
 800ca9c:	39d0      	subs	r1, #208	; 0xd0
 800ca9e:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800caa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800caa6:	3301      	adds	r3, #1
 800caa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800caac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cab0:	2b0b      	cmp	r3, #11
 800cab2:	ddd6      	ble.n	800ca62 <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800cab4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800cab8:	f04f 0000 	mov.w	r0, #0
 800cabc:	494f      	ldr	r1, [pc, #316]	; (800cbfc <qr_DvOBrgQi+0x1140>)
 800cabe:	f7f3 fbd5 	bl	800026c <__aeabi_dsub>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800caca:	f04f 0200 	mov.w	r2, #0
 800cace:	f04f 0300 	mov.w	r3, #0
 800cad2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800cad6:	f04f 0200 	mov.w	r2, #0
 800cada:	4b48      	ldr	r3, [pc, #288]	; (800cbfc <qr_DvOBrgQi+0x1140>)
 800cadc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800cae0:	f04f 0200 	mov.w	r2, #0
 800cae4:	f04f 0300 	mov.w	r3, #0
 800cae8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800caec:	f7f3 ffde 	bl	8000aac <__aeabi_dcmpeq>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f040 8084 	bne.w	800cc00 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800caf8:	2306      	movs	r3, #6
 800cafa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800cafe:	2307      	movs	r3, #7
 800cb00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800cb04:	e009      	b.n	800cb1a <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800cb06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800cb10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb14:	3b01      	subs	r3, #1
 800cb16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800cb1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	dd12      	ble.n	800cb48 <qr_DvOBrgQi+0x108c>
 800cb22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb26:	3b02      	subs	r3, #2
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cb2e:	4413      	add	r3, r2
 800cb30:	3bd0      	subs	r3, #208	; 0xd0
 800cb32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	f04f 0300 	mov.w	r3, #0
 800cb3e:	f7f3 ffb5 	bl	8000aac <__aeabi_dcmpeq>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1de      	bne.n	800cb06 <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800cb54:	e049      	b.n	800cbea <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800cb56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb5a:	1e5a      	subs	r2, r3, #1
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	005b      	lsls	r3, r3, #1
 800cb60:	4413      	add	r3, r2
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	3307      	adds	r3, #7
 800cb66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800cb6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cb6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800cb78:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800cb7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb80:	4413      	add	r3, r2
 800cb82:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800cb86:	429a      	cmp	r2, r3
 800cb88:	da1c      	bge.n	800cbc4 <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800cb8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cb96:	4413      	add	r3, r2
 800cb98:	3bd0      	subs	r3, #208	; 0xd0
 800cb9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb9e:	f04f 0200 	mov.w	r2, #0
 800cba2:	f04f 0300 	mov.w	r3, #0
 800cba6:	f7f3 ff81 	bl	8000aac <__aeabi_dcmpeq>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800cbb6:	e00d      	b.n	800cbd4 <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800cbb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cbc2:	e007      	b.n	800cbd4 <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800cbc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800cbce:	2302      	movs	r3, #2
 800cbd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800cbd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0ca      	beq.n	800cb72 <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800cbdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d102      	bne.n	800cbea <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800cbea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10c      	bne.n	800cc0c <qr_DvOBrgQi+0x1150>
 800cbf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	dcad      	bgt.n	800cb56 <qr_DvOBrgQi+0x109a>
 800cbfa:	e007      	b.n	800cc0c <qr_DvOBrgQi+0x1150>
 800cbfc:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800cc0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	dd29      	ble.n	800cc68 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800cc14:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800cc18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cc1c:	9302      	str	r3, [sp, #8]
 800cc1e:	2301      	movs	r3, #1
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	2307      	movs	r3, #7
 800cc2a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800cc2e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800cc32:	f002 fae5 	bl	800f200 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800cc36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cc3a:	60bb      	str	r3, [r7, #8]
 800cc3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cc40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cc4a:	2307      	movs	r3, #7
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	4613      	mov	r3, r2
 800cc56:	2201      	movs	r2, #1
 800cc58:	ed97 0b02 	vldr	d0, [r7, #8]
 800cc5c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800cc60:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800cc64:	f002 fbda 	bl	800f41c <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800cc6e:	e024      	b.n	800ccba <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800cc70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc74:	00db      	lsls	r3, r3, #3
 800cc76:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cc7a:	4413      	add	r3, r2
 800cc7c:	3bd0      	subs	r3, #208	; 0xd0
 800cc7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cc8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cc90:	607b      	str	r3, [r7, #4]
 800cc92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc96:	f7f3 fca1 	bl	80005dc <__aeabi_dmul>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800cca2:	00c9      	lsls	r1, r1, #3
 800cca4:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800cca8:	4401      	add	r1, r0
 800ccaa:	39d0      	subs	r1, #208	; 0xd0
 800ccac:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800ccb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ccba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccbe:	2b05      	cmp	r3, #5
 800ccc0:	ddd6      	ble.n	800cc70 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800ccc2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800ccc6:	f04f 0000 	mov.w	r0, #0
 800ccca:	4923      	ldr	r1, [pc, #140]	; (800cd58 <qr_DvOBrgQi+0x129c>)
 800cccc:	f7f3 face 	bl	800026c <__aeabi_dsub>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800ccde:	2300      	movs	r3, #0
 800cce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cce4:	e02d      	b.n	800cd42 <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800cce6:	2300      	movs	r3, #0
 800cce8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ccec:	e01b      	b.n	800cd26 <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800ccee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ccf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800ccfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cd00:	00db      	lsls	r3, r3, #3
 800cd02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd04:	18d1      	adds	r1, r2, r3
 800cd06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cd10:	4413      	add	r3, r2
 800cd12:	3bd0      	subs	r3, #208	; 0xd0
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800cd1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd20:	3301      	adds	r3, #1
 800cd22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800cd26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cd2a:	2b05      	cmp	r3, #5
 800cd2c:	dddf      	ble.n	800ccee <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800cd2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cd32:	3306      	adds	r3, #6
 800cd34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800cd38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cd42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	ddcd      	ble.n	800cce6 <qr_DvOBrgQi+0x122a>
  }
}
 800cd4a:	bf00      	nop
 800cd4c:	bf00      	nop
 800cd4e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bdb0      	pop	{r4, r5, r7, pc}
 800cd56:	bf00      	nop
 800cd58:	3ff00000 	.word	0x3ff00000

0800cd5c <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800cd5c:	b5b0      	push	{r4, r5, r7, lr}
 800cd5e:	b092      	sub	sp, #72	; 0x48
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	ed87 0b06 	vstr	d0, [r7, #24]
 800cd66:	ed87 1b04 	vstr	d1, [r7, #16]
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	643b      	str	r3, [r7, #64]	; 0x40
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd7a:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800cd88:	f04f 0200 	mov.w	r2, #0
 800cd8c:	f04f 0300 	mov.w	r3, #0
 800cd90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cd94:	f7f3 fe8a 	bl	8000aac <__aeabi_dcmpeq>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d012      	beq.n	800cdc4 <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800cd9e:	68f9      	ldr	r1, [r7, #12]
 800cda0:	f04f 0200 	mov.w	r2, #0
 800cda4:	4b4e      	ldr	r3, [pc, #312]	; (800cee0 <rotate_LZ7ctbe0+0x184>)
 800cda6:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	f04f 0200 	mov.w	r2, #0
 800cdb0:	f04f 0300 	mov.w	r3, #0
 800cdb4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cdbe:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800cdc2:	e088      	b.n	800ced6 <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	f04f 0300 	mov.w	r3, #0
 800cdcc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cdd0:	f7f3 fe6c 	bl	8000aac <__aeabi_dcmpeq>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d012      	beq.n	800ce00 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800cdda:	68f9      	ldr	r1, [r7, #12]
 800cddc:	f04f 0200 	mov.w	r2, #0
 800cde0:	f04f 0300 	mov.w	r3, #0
 800cde4:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	4b3c      	ldr	r3, [pc, #240]	; (800cee0 <rotate_LZ7ctbe0+0x184>)
 800cdf0:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cdfa:	e9c1 2300 	strd	r2, r3, [r1]
}
 800cdfe:	e06a      	b.n	800ced6 <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800ce00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ce04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ce08:	f7f3 fa32 	bl	8000270 <__adddf3>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800ce14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ce18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ce1c:	f7f3 fd08 	bl	8000830 <__aeabi_ddiv>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800ce28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ce2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ce30:	f7f3 fcfe 	bl	8000830 <__aeabi_ddiv>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce46:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800ce48:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800ce50:	ec45 4b11 	vmov	d1, r4, r5
 800ce54:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800ce58:	f000 f90a 	bl	800d070 <rt_hypotd_snf>
 800ce5c:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800ce60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ce68:	f7f3 fce2 	bl	8000830 <__aeabi_ddiv>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	68f9      	ldr	r1, [r7, #12]
 800ce72:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800ce76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ce7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ce7e:	f7f3 fcd7 	bl	8000830 <__aeabi_ddiv>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800ce8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ce92:	f7f3 fba3 	bl	80005dc <__aeabi_dmul>
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cea2:	f7f3 fcc5 	bl	8000830 <__aeabi_ddiv>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800ceb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ceb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ceb8:	f7f3 fb90 	bl	80005dc <__aeabi_dmul>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4610      	mov	r0, r2
 800cec2:	4619      	mov	r1, r3
 800cec4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cec8:	f7f3 fb88 	bl	80005dc <__aeabi_dmul>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ced6:	bf00      	nop
 800ced8:	3748      	adds	r7, #72	; 0x48
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bdb0      	pop	{r4, r5, r7, pc}
 800cede:	bf00      	nop
 800cee0:	3ff00000 	.word	0x3ff00000

0800cee4 <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ceea:	2340      	movs	r3, #64	; 0x40
 800ceec:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800ceee:	f04f 0200 	mov.w	r2, #0
 800cef2:	f04f 0300 	mov.w	r3, #0
 800cef6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b20      	cmp	r3, #32
 800cefe:	d10b      	bne.n	800cf18 <rtGetInf+0x34>
    inf = rtGetInfF();
 800cf00:	f000 f820 	bl	800cf44 <rtGetInfF>
 800cf04:	ee10 3a10 	vmov	r3, s0
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f3 fb0f 	bl	800052c <__aeabi_f2d>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cf16:	e007      	b.n	800cf28 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800cf18:	4b09      	ldr	r3, [pc, #36]	; (800cf40 <rtGetInf+0x5c>)
 800cf1a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800cf20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf24:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800cf28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cf2c:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf30:	eeb0 0a47 	vmov.f32	s0, s14
 800cf34:	eef0 0a67 	vmov.f32	s1, s15
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	7ff00000 	.word	0x7ff00000

0800cf44 <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800cf4a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800cf4e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	ee07 3a90 	vmov	s15, r3
}
 800cf56:	eeb0 0a67 	vmov.f32	s0, s15
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800cf6a:	2340      	movs	r3, #64	; 0x40
 800cf6c:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800cf6e:	f04f 0200 	mov.w	r2, #0
 800cf72:	f04f 0300 	mov.w	r3, #0
 800cf76:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2b20      	cmp	r3, #32
 800cf7e:	d10b      	bne.n	800cf98 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800cf80:	f000 f820 	bl	800cfc4 <rtGetMinusInfF>
 800cf84:	ee10 3a10 	vmov	r3, s0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7f3 facf 	bl	800052c <__aeabi_f2d>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cf96:	e007      	b.n	800cfa8 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800cf98:	4b09      	ldr	r3, [pc, #36]	; (800cfc0 <rtGetMinusInf+0x5c>)
 800cf9a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800cfa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800cfa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cfac:	ec43 2b17 	vmov	d7, r2, r3
}
 800cfb0:	eeb0 0a47 	vmov.f32	s0, s14
 800cfb4:	eef0 0a67 	vmov.f32	s1, s15
 800cfb8:	3718      	adds	r7, #24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	fff00000 	.word	0xfff00000

0800cfc4 <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800cfca:	4b06      	ldr	r3, [pc, #24]	; (800cfe4 <rtGetMinusInfF+0x20>)
 800cfcc:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	ee07 3a90 	vmov	s15, r3
}
 800cfd4:	eeb0 0a67 	vmov.f32	s0, s15
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	ff800000 	.word	0xff800000

0800cfe8 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800cfee:	2340      	movs	r3, #64	; 0x40
 800cff0:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800cff2:	f04f 0200 	mov.w	r2, #0
 800cff6:	f04f 0300 	mov.w	r3, #0
 800cffa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b20      	cmp	r3, #32
 800d002:	d10b      	bne.n	800d01c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800d004:	f000 f820 	bl	800d048 <rtGetNaNF>
 800d008:	ee10 3a10 	vmov	r3, s0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7f3 fa8d 	bl	800052c <__aeabi_f2d>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d01a:	e007      	b.n	800d02c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <rtGetNaN+0x5c>)
 800d01e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800d020:	2300      	movs	r3, #0
 800d022:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800d024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d028:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800d02c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d030:	ec43 2b17 	vmov	d7, r2, r3
}
 800d034:	eeb0 0a47 	vmov.f32	s0, s14
 800d038:	eef0 0a67 	vmov.f32	s1, s15
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	fff80000 	.word	0xfff80000

0800d048 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800d04e:	f04f 0300 	mov.w	r3, #0
 800d052:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <rtGetNaNF+0x24>)
 800d056:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	ee07 3a90 	vmov	s15, r3
}
 800d05e:	eeb0 0a67 	vmov.f32	s0, s15
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	ffc00000 	.word	0xffc00000

0800d070 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b088      	sub	sp, #32
 800d074:	af00      	add	r7, sp, #0
 800d076:	ed87 0b02 	vstr	d0, [r7, #8]
 800d07a:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	613b      	str	r3, [r7, #16]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d088:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	61bb      	str	r3, [r7, #24]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d094:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800d096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d09a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d09e:	f7f3 fd0f 	bl	8000ac0 <__aeabi_dcmplt>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d02d      	beq.n	800d104 <rt_hypotd_snf+0x94>
    a /= y;
 800d0a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0b0:	f7f3 fbbe 	bl	8000830 <__aeabi_ddiv>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800d0bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d0c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0c4:	f7f3 fa8a 	bl	80005dc <__aeabi_dmul>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	f04f 0200 	mov.w	r2, #0
 800d0d4:	4b38      	ldr	r3, [pc, #224]	; (800d1b8 <rt_hypotd_snf+0x148>)
 800d0d6:	f7f3 f8cb 	bl	8000270 <__adddf3>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	ec43 2b17 	vmov	d7, r2, r3
 800d0e2:	eeb0 0a47 	vmov.f32	s0, s14
 800d0e6:	eef0 0a67 	vmov.f32	s1, s15
 800d0ea:	f00e fb69 	bl	801b7c0 <sqrt>
 800d0ee:	ec53 2b10 	vmov	r2, r3, d0
 800d0f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d0f6:	f7f3 fa71 	bl	80005dc <__aeabi_dmul>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d102:	e048      	b.n	800d196 <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800d104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d108:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d10c:	f7f3 fcf6 	bl	8000afc <__aeabi_dcmpgt>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d02d      	beq.n	800d172 <rt_hypotd_snf+0x102>
    y /= a;
 800d116:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d11a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d11e:	f7f3 fb87 	bl	8000830 <__aeabi_ddiv>
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800d12a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d12e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d132:	f7f3 fa53 	bl	80005dc <__aeabi_dmul>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4610      	mov	r0, r2
 800d13c:	4619      	mov	r1, r3
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	4b1d      	ldr	r3, [pc, #116]	; (800d1b8 <rt_hypotd_snf+0x148>)
 800d144:	f7f3 f894 	bl	8000270 <__adddf3>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	ec43 2b17 	vmov	d7, r2, r3
 800d150:	eeb0 0a47 	vmov.f32	s0, s14
 800d154:	eef0 0a67 	vmov.f32	s1, s15
 800d158:	f00e fb32 	bl	801b7c0 <sqrt>
 800d15c:	ec53 2b10 	vmov	r2, r3, d0
 800d160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d164:	f7f3 fa3a 	bl	80005dc <__aeabi_dmul>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d170:	e011      	b.n	800d196 <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800d172:	ed97 0b06 	vldr	d0, [r7, #24]
 800d176:	f000 f889 	bl	800d28c <rtIsNaN>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800d180:	a30b      	add	r3, pc, #44	; (adr r3, 800d1b0 <rt_hypotd_snf+0x140>)
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d18a:	f7f3 fa27 	bl	80005dc <__aeabi_dmul>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800d196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d19a:	ec43 2b17 	vmov	d7, r2, r3
}
 800d19e:	eeb0 0a47 	vmov.f32	s0, s14
 800d1a2:	eef0 0a67 	vmov.f32	s1, s15
 800d1a6:	3720      	adds	r7, #32
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	667f3bcd 	.word	0x667f3bcd
 800d1b4:	3ff6a09e 	.word	0x3ff6a09e
 800d1b8:	3ff00000 	.word	0x3ff00000

0800d1bc <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800d1c4:	f7ff ff10 	bl	800cfe8 <rtGetNaN>
 800d1c8:	eeb0 7a40 	vmov.f32	s14, s0
 800d1cc:	eef0 7a60 	vmov.f32	s15, s1
 800d1d0:	4b16      	ldr	r3, [pc, #88]	; (800d22c <rt_InitInfAndNaN+0x70>)
 800d1d2:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800d1d6:	f7ff ff37 	bl	800d048 <rtGetNaNF>
 800d1da:	eef0 7a40 	vmov.f32	s15, s0
 800d1de:	4b14      	ldr	r3, [pc, #80]	; (800d230 <rt_InitInfAndNaN+0x74>)
 800d1e0:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800d1e4:	f7ff fe7e 	bl	800cee4 <rtGetInf>
 800d1e8:	eeb0 7a40 	vmov.f32	s14, s0
 800d1ec:	eef0 7a60 	vmov.f32	s15, s1
 800d1f0:	4b10      	ldr	r3, [pc, #64]	; (800d234 <rt_InitInfAndNaN+0x78>)
 800d1f2:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800d1f6:	f7ff fea5 	bl	800cf44 <rtGetInfF>
 800d1fa:	eef0 7a40 	vmov.f32	s15, s0
 800d1fe:	4b0e      	ldr	r3, [pc, #56]	; (800d238 <rt_InitInfAndNaN+0x7c>)
 800d200:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800d204:	f7ff feae 	bl	800cf64 <rtGetMinusInf>
 800d208:	eeb0 7a40 	vmov.f32	s14, s0
 800d20c:	eef0 7a60 	vmov.f32	s15, s1
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <rt_InitInfAndNaN+0x80>)
 800d212:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800d216:	f7ff fed5 	bl	800cfc4 <rtGetMinusInfF>
 800d21a:	eef0 7a40 	vmov.f32	s15, s0
 800d21e:	4b08      	ldr	r3, [pc, #32]	; (800d240 <rt_InitInfAndNaN+0x84>)
 800d220:	edc3 7a00 	vstr	s15, [r3]
}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	2001ebf8 	.word	0x2001ebf8
 800d230:	2001ebe8 	.word	0x2001ebe8
 800d234:	2001ebf0 	.word	0x2001ebf0
 800d238:	2001ebec 	.word	0x2001ebec
 800d23c:	2001ec00 	.word	0x2001ec00
 800d240:	2001ec08 	.word	0x2001ec08

0800d244 <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <rtIsInf+0x40>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d258:	f7f3 fc28 	bl	8000aac <__aeabi_dcmpeq>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d109      	bne.n	800d276 <rtIsInf+0x32>
 800d262:	4b09      	ldr	r3, [pc, #36]	; (800d288 <rtIsInf+0x44>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d26c:	f7f3 fc1e 	bl	8000aac <__aeabi_dcmpeq>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <rtIsInf+0x36>
 800d276:	2301      	movs	r3, #1
 800d278:	e000      	b.n	800d27c <rtIsInf+0x38>
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	2001ebf0 	.word	0x2001ebf0
 800d288:	2001ec00 	.word	0x2001ec00

0800d28c <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
 800d292:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800d296:	2300      	movs	r3, #0
 800d298:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800d29a:	2340      	movs	r3, #64	; 0x40
 800d29c:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	2b20      	cmp	r3, #32
 800d2a2:	d10b      	bne.n	800d2bc <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800d2a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2a8:	f7f3 fc90 	bl	8000bcc <__aeabi_d2f>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	ee00 3a10 	vmov	s0, r3
 800d2b2:	f000 f821 	bl	800d2f8 <rtIsNaNF>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	75fb      	strb	r3, [r7, #23]
 800d2ba:	e015      	b.n	800d2e8 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800d2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4b0b      	ldr	r3, [pc, #44]	; (800d2f4 <rtIsNaN+0x68>)
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	4a0a      	ldr	r2, [pc, #40]	; (800d2f4 <rtIsNaN+0x68>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d109      	bne.n	800d2e4 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d102      	bne.n	800d2e0 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800d2da:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e000      	b.n	800d2e6 <rtIsNaN+0x5a>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800d2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	7ff00000 	.word	0x7ff00000

0800d2f8 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800d30c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d310:	d106      	bne.n	800d320 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <rtIsNaNF+0x28>
 800d31c:	2301      	movs	r3, #1
 800d31e:	e000      	b.n	800d322 <rtIsNaNF+0x2a>
 800d320:	2300      	movs	r3, #0
 800d322:	b2db      	uxtb	r3, r3
}
 800d324:	4618      	mov	r0, r3
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800d330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d334:	ed2d 8b02 	vpush	{d8}
 800d338:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800d33c:	af02      	add	r7, sp, #8
 800d33e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800d342:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d346:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d34a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d34e:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800d350:	f04f 0200 	mov.w	r2, #0
 800d354:	f04f 0300 	mov.w	r3, #0
 800d358:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800d368:	f04f 0200 	mov.w	r2, #0
 800d36c:	f04f 0300 	mov.w	r3, #0
 800d370:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800d374:	f04f 0200 	mov.w	r2, #0
 800d378:	f04f 0300 	mov.w	r3, #0
 800d37c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800d380:	f04f 0200 	mov.w	r2, #0
 800d384:	f04f 0300 	mov.w	r3, #0
 800d388:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800d38c:	f04f 0200 	mov.w	r2, #0
 800d390:	f04f 0300 	mov.w	r3, #0
 800d394:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800d398:	2300      	movs	r3, #0
 800d39a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d39e:	e02e      	b.n	800d3fe <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800d3a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3a4:	00da      	lsls	r2, r3, #3
 800d3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3aa:	4413      	add	r3, r2
 800d3ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d3ba:	4413      	add	r3, r2
 800d3bc:	3b88      	subs	r3, #136	; 0x88
 800d3be:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800d3c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3c6:	00da      	lsls	r2, r3, #3
 800d3c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d3cc:	1899      	adds	r1, r3, r2
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	f04f 0300 	mov.w	r3, #0
 800d3d6:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800d3da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3de:	00da      	lsls	r2, r3, #3
 800d3e0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	1899      	adds	r1, r3, r2
 800d3e8:	f04f 0200 	mov.w	r2, #0
 800d3ec:	f04f 0300 	mov.w	r3, #0
 800d3f0:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800d3f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d3fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d402:	2b08      	cmp	r3, #8
 800d404:	ddcc      	ble.n	800d3a0 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800d412:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d416:	2201      	movs	r2, #1
 800d418:	4619      	mov	r1, r3
 800d41a:	2003      	movs	r0, #3
 800d41c:	f002 fbbc 	bl	800fb98 <xnrm2_xDOlDEtw>
 800d420:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800d424:	f04f 0200 	mov.w	r2, #0
 800d428:	f04f 0300 	mov.w	r3, #0
 800d42c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d430:	f7f3 fb64 	bl	8000afc <__aeabi_dcmpgt>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d07b      	beq.n	800d532 <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800d43a:	2301      	movs	r3, #1
 800d43c:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800d440:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d444:	f04f 0200 	mov.w	r2, #0
 800d448:	f04f 0300 	mov.w	r3, #0
 800d44c:	f7f3 fb38 	bl	8000ac0 <__aeabi_dcmplt>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d008      	beq.n	800d468 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800d456:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800d45a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d45e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800d462:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800d466:	e003      	b.n	800d470 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800d468:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d46c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800d470:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d474:	4690      	mov	r8, r2
 800d476:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800d47a:	f04f 0200 	mov.w	r2, #0
 800d47e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d482:	4640      	mov	r0, r8
 800d484:	4649      	mov	r1, r9
 800d486:	f7f3 fb2f 	bl	8000ae8 <__aeabi_dcmpge>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d016      	beq.n	800d4be <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800d490:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d494:	f04f 0000 	mov.w	r0, #0
 800d498:	49c1      	ldr	r1, [pc, #772]	; (800d7a0 <svd_u3DvUgOe+0x470>)
 800d49a:	f7f3 f9c9 	bl	8000830 <__aeabi_ddiv>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	ec43 2b17 	vmov	d7, r2, r3
 800d4a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	eeb0 0a47 	vmov.f32	s0, s14
 800d4b2:	eef0 0a67 	vmov.f32	s1, s15
 800d4b6:	2003      	movs	r0, #3
 800d4b8:	f002 fe36 	bl	8010128 <xscal_59GtRAwv>
 800d4bc:	e026      	b.n	800d50c <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d4c4:	e01e      	b.n	800d504 <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800d4c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4d0:	4413      	add	r3, r2
 800d4d2:	3b88      	subs	r3, #136	; 0x88
 800d4d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4d8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d4dc:	f7f3 f9a8 	bl	8000830 <__aeabi_ddiv>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4f2:	4413      	add	r3, r2
 800d4f4:	3b88      	subs	r3, #136	; 0x88
 800d4f6:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800d4fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4fe:	3301      	adds	r3, #1
 800d500:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d504:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d508:	2b02      	cmp	r3, #2
 800d50a:	dddc      	ble.n	800d4c6 <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800d50c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	4ba2      	ldr	r3, [pc, #648]	; (800d7a0 <svd_u3DvUgOe+0x470>)
 800d516:	f7f2 feab 	bl	8000270 <__adddf3>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800d522:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d526:	4692      	mov	sl, r2
 800d528:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800d52c:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800d530:	e005      	b.n	800d53e <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	f04f 0300 	mov.w	r3, #0
 800d53a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800d53e:	2301      	movs	r3, #1
 800d540:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d544:	e047      	b.n	800d5d6 <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800d546:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d54a:	4613      	mov	r3, r2
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	4413      	add	r3, r2
 800d550:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800d554:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d025      	beq.n	800d5a8 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800d55c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d560:	3301      	adds	r3, #1
 800d562:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d566:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4613      	mov	r3, r2
 800d56e:	2201      	movs	r2, #1
 800d570:	2003      	movs	r0, #3
 800d572:	f001 fdf8 	bl	800f166 <xdotc_mznw4aLl>
 800d576:	ec51 0b10 	vmov	r0, r1, d0
 800d57a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d57e:	f7f3 f957 	bl	8000830 <__aeabi_ddiv>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d58a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d58e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d592:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d596:	3301      	adds	r3, #1
 800d598:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d59c:	2101      	movs	r1, #1
 800d59e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800d5a2:	2003      	movs	r0, #3
 800d5a4:	f001 fd8b 	bl	800f0be <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800d5a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5b2:	4413      	add	r3, r2
 800d5b4:	3b88      	subs	r3, #136	; 0x88
 800d5b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5c4:	4413      	add	r3, r2
 800d5c6:	3bb8      	subs	r3, #184	; 0xb8
 800d5c8:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800d5cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d5d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	ddb3      	ble.n	800d546 <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800d5de:	e015      	b.n	800d60c <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800d5e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d5e4:	00da      	lsls	r2, r3, #3
 800d5e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5ea:	1899      	adds	r1, r3, r2
 800d5ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5f6:	4413      	add	r3, r2
 800d5f8:	3b88      	subs	r3, #136	; 0x88
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800d602:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d606:	3301      	adds	r3, #1
 800d608:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800d60c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d610:	2b02      	cmp	r3, #2
 800d612:	dde5      	ble.n	800d5e0 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800d614:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d618:	2202      	movs	r2, #2
 800d61a:	4619      	mov	r1, r3
 800d61c:	2002      	movs	r0, #2
 800d61e:	f002 f95f 	bl	800f8e0 <xnrm2_Rlk0oxWw>
 800d622:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800d626:	f04f 0200 	mov.w	r2, #0
 800d62a:	f04f 0300 	mov.w	r3, #0
 800d62e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d632:	f7f3 fa3b 	bl	8000aac <__aeabi_dcmpeq>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d006      	beq.n	800d64a <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800d63c:	f04f 0200 	mov.w	r2, #0
 800d640:	f04f 0300 	mov.w	r3, #0
 800d644:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800d648:	e10d      	b.n	800d866 <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800d64a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d64e:	f04f 0200 	mov.w	r2, #0
 800d652:	f04f 0300 	mov.w	r3, #0
 800d656:	f7f3 fa33 	bl	8000ac0 <__aeabi_dcmplt>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00e      	beq.n	800d67e <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800d660:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d664:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d668:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d66c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d670:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d674:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800d678:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800d67c:	e003      	b.n	800d686 <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800d67e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d682:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800d686:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d68a:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800d68e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d692:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800d696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d69a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d69e:	f04f 0200 	mov.w	r2, #0
 800d6a2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d6a6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d6aa:	f7f3 fa1d 	bl	8000ae8 <__aeabi_dcmpge>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d016      	beq.n	800d6e2 <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800d6b4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d6b8:	f04f 0000 	mov.w	r0, #0
 800d6bc:	4938      	ldr	r1, [pc, #224]	; (800d7a0 <svd_u3DvUgOe+0x470>)
 800d6be:	f7f3 f8b7 	bl	8000830 <__aeabi_ddiv>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	ec43 2b17 	vmov	d7, r2, r3
 800d6ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	eeb0 0a47 	vmov.f32	s0, s14
 800d6d6:	eef0 0a67 	vmov.f32	s1, s15
 800d6da:	2002      	movs	r0, #2
 800d6dc:	f002 fd58 	bl	8010190 <xscal_PLmmUlD2>
 800d6e0:	e026      	b.n	800d730 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d6e8:	e01e      	b.n	800d728 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800d6ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6f4:	4413      	add	r3, r2
 800d6f6:	3bb8      	subs	r3, #184	; 0xb8
 800d6f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6fc:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d700:	f7f3 f896 	bl	8000830 <__aeabi_ddiv>
 800d704:	4602      	mov	r2, r0
 800d706:	460b      	mov	r3, r1
 800d708:	4610      	mov	r0, r2
 800d70a:	4619      	mov	r1, r3
 800d70c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d716:	4413      	add	r3, r2
 800d718:	3bb8      	subs	r3, #184	; 0xb8
 800d71a:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800d71e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d722:	3301      	adds	r3, #1
 800d724:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d728:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	dddc      	ble.n	800d6ea <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800d730:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	4b19      	ldr	r3, [pc, #100]	; (800d7a0 <svd_u3DvUgOe+0x470>)
 800d73a:	f7f2 fd99 	bl	8000270 <__adddf3>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800d746:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d74a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d74e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d756:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800d75a:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800d75e:	2302      	movs	r3, #2
 800d760:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d764:	e013      	b.n	800d78e <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800d766:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d76a:	3b01      	subs	r3, #1
 800d76c:	00db      	lsls	r3, r3, #3
 800d76e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d772:	4413      	add	r3, r2
 800d774:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800d778:	f04f 0200 	mov.w	r2, #0
 800d77c:	f04f 0300 	mov.w	r3, #0
 800d780:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800d784:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d788:	3301      	adds	r3, #1
 800d78a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d78e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d792:	2b03      	cmp	r3, #3
 800d794:	dde7      	ble.n	800d766 <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800d796:	2301      	movs	r3, #1
 800d798:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d79c:	e025      	b.n	800d7ea <svd_u3DvUgOe+0x4ba>
 800d79e:	bf00      	nop
 800d7a0:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800d7a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7ae:	4413      	add	r3, r2
 800d7b0:	3bb8      	subs	r3, #184	; 0xb8
 800d7b2:	ed93 7b00 	vldr	d7, [r3]
 800d7b6:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4413      	add	r3, r2
 800d7c0:	1c98      	adds	r0, r3, #2
 800d7c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d7c6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	eeb0 0a47 	vmov.f32	s0, s14
 800d7d6:	eef0 0a67 	vmov.f32	s1, s15
 800d7da:	2002      	movs	r0, #2
 800d7dc:	f001 fbc7 	bl	800ef6e <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800d7e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d7ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	ddd8      	ble.n	800d7a4 <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d7f8:	e031      	b.n	800d85e <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800d7fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d804:	4413      	add	r3, r2
 800d806:	3bb8      	subs	r3, #184	; 0xb8
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800d810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d818:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800d81c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d820:	f7f3 f806 	bl	8000830 <__aeabi_ddiv>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	ec43 2b17 	vmov	d7, r2, r3
 800d82c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d830:	4613      	mov	r3, r2
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	4413      	add	r3, r2
 800d836:	3302      	adds	r3, #2
 800d838:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d83c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	4613      	mov	r3, r2
 800d844:	2202      	movs	r2, #2
 800d846:	eeb0 0a47 	vmov.f32	s0, s14
 800d84a:	eef0 0a67 	vmov.f32	s1, s15
 800d84e:	2002      	movs	r0, #2
 800d850:	f001 fbe1 	bl	800f016 <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800d854:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d858:	3301      	adds	r3, #1
 800d85a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d85e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d862:	2b02      	cmp	r3, #2
 800d864:	ddc9      	ble.n	800d7fa <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800d866:	2301      	movs	r3, #1
 800d868:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d86c:	e016      	b.n	800d89c <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800d86e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d872:	00da      	lsls	r2, r3, #3
 800d874:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	1899      	adds	r1, r3, r2
 800d87c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d880:	00db      	lsls	r3, r3, #3
 800d882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d886:	4413      	add	r3, r2
 800d888:	3bb8      	subs	r3, #184	; 0xb8
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d892:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d896:	3301      	adds	r3, #1
 800d898:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d89c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	dde4      	ble.n	800d86e <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800d8aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d8ae:	2205      	movs	r2, #5
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	2002      	movs	r0, #2
 800d8b4:	f002 f970 	bl	800fb98 <xnrm2_xDOlDEtw>
 800d8b8:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800d8bc:	f04f 0200 	mov.w	r2, #0
 800d8c0:	f04f 0300 	mov.w	r3, #0
 800d8c4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d8c8:	f7f3 f918 	bl	8000afc <__aeabi_dcmpgt>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f000 808a 	beq.w	800d9e8 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800d8da:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d8de:	f04f 0200 	mov.w	r2, #0
 800d8e2:	f04f 0300 	mov.w	r3, #0
 800d8e6:	f7f3 f8eb 	bl	8000ac0 <__aeabi_dcmplt>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00e      	beq.n	800d90e <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800d8f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d8fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d904:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800d908:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d90c:	e003      	b.n	800d916 <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800d90e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d912:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800d916:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d91a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800d91e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d922:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d926:	f04f 0200 	mov.w	r2, #0
 800d92a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d92e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d932:	f7f3 f8d9 	bl	8000ae8 <__aeabi_dcmpge>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d016      	beq.n	800d96a <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800d93c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d940:	f04f 0000 	mov.w	r0, #0
 800d944:	49d6      	ldr	r1, [pc, #856]	; (800dca0 <svd_u3DvUgOe+0x970>)
 800d946:	f7f2 ff73 	bl	8000830 <__aeabi_ddiv>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	ec43 2b17 	vmov	d7, r2, r3
 800d952:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d956:	2205      	movs	r2, #5
 800d958:	4619      	mov	r1, r3
 800d95a:	eeb0 0a47 	vmov.f32	s0, s14
 800d95e:	eef0 0a67 	vmov.f32	s1, s15
 800d962:	2002      	movs	r0, #2
 800d964:	f002 fbe0 	bl	8010128 <xscal_59GtRAwv>
 800d968:	e026      	b.n	800d9b8 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800d96a:	2304      	movs	r3, #4
 800d96c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d970:	e01e      	b.n	800d9b0 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800d972:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d97c:	4413      	add	r3, r2
 800d97e:	3b88      	subs	r3, #136	; 0x88
 800d980:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d984:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d988:	f7f2 ff52 	bl	8000830 <__aeabi_ddiv>
 800d98c:	4602      	mov	r2, r0
 800d98e:	460b      	mov	r3, r1
 800d990:	4610      	mov	r0, r2
 800d992:	4619      	mov	r1, r3
 800d994:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d998:	00db      	lsls	r3, r3, #3
 800d99a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d99e:	4413      	add	r3, r2
 800d9a0:	3b88      	subs	r3, #136	; 0x88
 800d9a2:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800d9a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d9b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d9b4:	2b05      	cmp	r3, #5
 800d9b6:	dddc      	ble.n	800d972 <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800d9b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d9bc:	f04f 0200 	mov.w	r2, #0
 800d9c0:	4bb7      	ldr	r3, [pc, #732]	; (800dca0 <svd_u3DvUgOe+0x970>)
 800d9c2:	f7f2 fc55 	bl	8000270 <__adddf3>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800d9ce:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d9d2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800d9d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d9da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d9de:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800d9e2:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d9e6:	e005      	b.n	800d9f4 <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800d9e8:	f04f 0200 	mov.w	r2, #0
 800d9ec:	f04f 0300 	mov.w	r3, #0
 800d9f0:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d9fa:	e048      	b.n	800da8e <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800d9fc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800da00:	4613      	mov	r3, r2
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	4413      	add	r3, r2
 800da06:	3301      	adds	r3, #1
 800da08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800da0c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800da10:	2b00      	cmp	r3, #0
 800da12:	d025      	beq.n	800da60 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800da14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da18:	3301      	adds	r3, #1
 800da1a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800da1e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	4613      	mov	r3, r2
 800da26:	2205      	movs	r2, #5
 800da28:	2002      	movs	r0, #2
 800da2a:	f001 fb9c 	bl	800f166 <xdotc_mznw4aLl>
 800da2e:	ec51 0b10 	vmov	r0, r1, d0
 800da32:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800da36:	f7f2 fefb 	bl	8000830 <__aeabi_ddiv>
 800da3a:	4602      	mov	r2, r0
 800da3c:	460b      	mov	r3, r1
 800da3e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800da42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800da46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800da4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da4e:	3301      	adds	r3, #1
 800da50:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800da54:	2105      	movs	r1, #5
 800da56:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800da5a:	2002      	movs	r0, #2
 800da5c:	f001 fb2f 	bl	800f0be <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800da60:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da6a:	4413      	add	r3, r2
 800da6c:	3b88      	subs	r3, #136	; 0x88
 800da6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da7c:	4413      	add	r3, r2
 800da7e:	3bb8      	subs	r3, #184	; 0xb8
 800da80:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800da84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da88:	3301      	adds	r3, #1
 800da8a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800da8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da92:	2b02      	cmp	r3, #2
 800da94:	ddb2      	ble.n	800d9fc <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800da96:	2301      	movs	r3, #1
 800da98:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800da9c:	e017      	b.n	800dace <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800da9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800daa2:	1cd8      	adds	r0, r3, #3
 800daa4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800daa8:	3303      	adds	r3, #3
 800daaa:	00da      	lsls	r2, r3, #3
 800daac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dab0:	1899      	adds	r1, r3, r2
 800dab2:	00c3      	lsls	r3, r0, #3
 800dab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800dab8:	4413      	add	r3, r2
 800daba:	3b88      	subs	r3, #136	; 0x88
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800dac4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dac8:	3301      	adds	r3, #1
 800daca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800dace:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	dde3      	ble.n	800da9e <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800dad6:	2301      	movs	r3, #1
 800dad8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800dadc:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800dae0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800dae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800daec:	f04f 0200 	mov.w	r2, #0
 800daf0:	f04f 0300 	mov.w	r3, #0
 800daf4:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800daf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dafc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db00:	f04f 0200 	mov.w	r2, #0
 800db04:	f04f 0300 	mov.w	r3, #0
 800db08:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800db0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db10:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db14:	f04f 0200 	mov.w	r2, #0
 800db18:	4b61      	ldr	r3, [pc, #388]	; (800dca0 <svd_u3DvUgOe+0x970>)
 800db1a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800db1e:	2301      	movs	r3, #1
 800db20:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800db24:	e100      	b.n	800dd28 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800db26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800db30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800db3a:	4413      	add	r3, r2
 800db3c:	3ba0      	subs	r3, #160	; 0xa0
 800db3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db42:	f04f 0200 	mov.w	r2, #0
 800db46:	f04f 0300 	mov.w	r3, #0
 800db4a:	f7f2 ffaf 	bl	8000aac <__aeabi_dcmpeq>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	f040 80a7 	bne.w	800dca4 <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800db56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db5a:	3301      	adds	r3, #1
 800db5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800db60:	e043      	b.n	800dbea <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800db62:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800db66:	4613      	mov	r3, r2
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	441a      	add	r2, r3
 800db6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db70:	4413      	add	r3, r2
 800db72:	3301      	adds	r3, #1
 800db74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800db78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db7c:	f1c3 0403 	rsb	r4, r3, #3
 800db80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db84:	f1c3 0003 	rsb	r0, r3, #3
 800db88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db98:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800db9c:	f001 fae3 	bl	800f166 <xdotc_mznw4aLl>
 800dba0:	ec51 0b10 	vmov	r0, r1, d0
 800dba4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dba8:	00da      	lsls	r2, r3, #3
 800dbaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbae:	4413      	add	r3, r2
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	f7f2 fe3c 	bl	8000830 <__aeabi_ddiv>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800dbc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dbc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dbc8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dbcc:	1c59      	adds	r1, r3, #1
 800dbce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dbd2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800dbd6:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f001 fa6f 	bl	800f0be <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800dbe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800dbea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	ddb7      	ble.n	800db62 <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800dbf2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dbf6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dbfa:	e026      	b.n	800dc4a <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800dbfc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dc00:	4613      	mov	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	441a      	add	r2, r3
 800dc06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc0a:	4413      	add	r3, r2
 800dc0c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800dc10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dc14:	00da      	lsls	r2, r3, #3
 800dc16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc1a:	4413      	add	r3, r2
 800dc1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800dc24:	00da      	lsls	r2, r3, #3
 800dc26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800dc30:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800dc34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dc38:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800dc3c:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800dc40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc44:	3301      	adds	r3, #1
 800dc46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800dc4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	ddd4      	ble.n	800dbfc <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800dc52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc56:	00da      	lsls	r2, r3, #3
 800dc58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc5c:	189c      	adds	r4, r3, r2
 800dc5e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800dc62:	f04f 0200 	mov.w	r2, #0
 800dc66:	4b0e      	ldr	r3, [pc, #56]	; (800dca0 <svd_u3DvUgOe+0x970>)
 800dc68:	f7f2 fb02 	bl	8000270 <__adddf3>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800dc74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	dd50      	ble.n	800dd1e <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800dc7c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dc80:	4613      	mov	r3, r2
 800dc82:	005b      	lsls	r3, r3, #1
 800dc84:	4413      	add	r3, r2
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	461a      	mov	r2, r3
 800dc8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc8e:	1899      	adds	r1, r3, r2
 800dc90:	f04f 0200 	mov.w	r2, #0
 800dc94:	f04f 0300 	mov.w	r3, #0
 800dc98:	e9c1 2300 	strd	r2, r3, [r1]
 800dc9c:	e03f      	b.n	800dd1e <svd_u3DvUgOe+0x9ee>
 800dc9e:	bf00      	nop
 800dca0:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800dca4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dca8:	4613      	mov	r3, r2
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	4413      	add	r3, r2
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dcb6:	1899      	adds	r1, r3, r2
 800dcb8:	f04f 0200 	mov.w	r2, #0
 800dcbc:	f04f 0300 	mov.w	r3, #0
 800dcc0:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800dcc4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dcc8:	4613      	mov	r3, r2
 800dcca:	005b      	lsls	r3, r3, #1
 800dccc:	4413      	add	r3, r2
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	f103 0208 	add.w	r2, r3, #8
 800dcd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dcd8:	1899      	adds	r1, r3, r2
 800dcda:	f04f 0200 	mov.w	r2, #0
 800dcde:	f04f 0300 	mov.w	r3, #0
 800dce2:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800dce6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dcea:	4613      	mov	r3, r2
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4413      	add	r3, r2
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	f103 0210 	add.w	r2, r3, #16
 800dcf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dcfa:	1899      	adds	r1, r3, r2
 800dcfc:	f04f 0200 	mov.w	r2, #0
 800dd00:	f04f 0300 	mov.w	r3, #0
 800dd04:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800dd08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd0c:	00da      	lsls	r2, r3, #3
 800dd0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd12:	1899      	adds	r1, r3, r2
 800dd14:	f04f 0200 	mov.w	r2, #0
 800dd18:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <svd_u3DvUgOe+0xa30>)
 800dd1a:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800dd1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd22:	3b01      	subs	r3, #1
 800dd24:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800dd28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f6bf aefa 	bge.w	800db26 <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800dd32:	2302      	movs	r3, #2
 800dd34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800dd38:	e096      	b.n	800de68 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800dd3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	dc4c      	bgt.n	800dddc <svd_u3DvUgOe+0xaac>
 800dd42:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800dd46:	f04f 0200 	mov.w	r2, #0
 800dd4a:	f04f 0300 	mov.w	r3, #0
 800dd4e:	f7f2 fead 	bl	8000aac <__aeabi_dcmpeq>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d141      	bne.n	800dddc <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800dd58:	2302      	movs	r3, #2
 800dd5a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800dd5e:	e039      	b.n	800ddd4 <svd_u3DvUgOe+0xaa4>
 800dd60:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800dd64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd68:	1e5a      	subs	r2, r3, #1
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	4413      	add	r3, r2
 800dd70:	3302      	adds	r3, #2
 800dd72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800dd76:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800dd7a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800dd7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	6813      	ldr	r3, [r2, #0]
 800dd86:	2202      	movs	r2, #2
 800dd88:	6809      	ldr	r1, [r1, #0]
 800dd8a:	2002      	movs	r0, #2
 800dd8c:	f001 f9eb 	bl	800f166 <xdotc_mznw4aLl>
 800dd90:	ec51 0b10 	vmov	r0, r1, d0
 800dd94:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3308      	adds	r3, #8
 800dd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda0:	f7f2 fd46 	bl	8000830 <__aeabi_ddiv>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800ddac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ddb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ddb4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800ddb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ddbc:	6812      	ldr	r2, [r2, #0]
 800ddbe:	2102      	movs	r1, #2
 800ddc0:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800ddc4:	2002      	movs	r0, #2
 800ddc6:	f001 f97a 	bl	800f0be <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800ddca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ddce:	3301      	adds	r3, #1
 800ddd0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ddd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	ddc3      	ble.n	800dd64 <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800dddc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dde0:	4613      	mov	r3, r2
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	4413      	add	r3, r2
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	461a      	mov	r2, r3
 800ddea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	1899      	adds	r1, r3, r2
 800ddf2:	f04f 0200 	mov.w	r2, #0
 800ddf6:	f04f 0300 	mov.w	r3, #0
 800ddfa:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800ddfe:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800de02:	4613      	mov	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	4413      	add	r3, r2
 800de08:	00db      	lsls	r3, r3, #3
 800de0a:	f103 0208 	add.w	r2, r3, #8
 800de0e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	1899      	adds	r1, r3, r2
 800de16:	f04f 0200 	mov.w	r2, #0
 800de1a:	f04f 0300 	mov.w	r3, #0
 800de1e:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800de22:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800de26:	4613      	mov	r3, r2
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	4413      	add	r3, r2
 800de2c:	00db      	lsls	r3, r3, #3
 800de2e:	f103 0210 	add.w	r2, r3, #16
 800de32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	1899      	adds	r1, r3, r2
 800de3a:	f04f 0200 	mov.w	r2, #0
 800de3e:	f04f 0300 	mov.w	r3, #0
 800de42:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800de46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de4a:	015a      	lsls	r2, r3, #5
 800de4c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	1899      	adds	r1, r3, r2
 800de54:	f04f 0200 	mov.w	r2, #0
 800de58:	4bbd      	ldr	r3, [pc, #756]	; (800e150 <svd_u3DvUgOe+0xe20>)
 800de5a:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800de5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de62:	3b01      	subs	r3, #1
 800de64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800de68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f6bf af64 	bge.w	800dd3a <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800de72:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800de76:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800de7a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800de7e:	f04f 0200 	mov.w	r2, #0
 800de82:	f04f 0300 	mov.w	r3, #0
 800de86:	f7f2 fe11 	bl	8000aac <__aeabi_dcmpeq>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d12a      	bne.n	800dee6 <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800de90:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800de94:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800de98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dea0:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800dea4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800dea8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800deac:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800deb0:	f7f2 fcbe 	bl	8000830 <__aeabi_ddiv>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800debc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dec0:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800dec4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800dec8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800decc:	f7f2 fcb0 	bl	8000830 <__aeabi_ddiv>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800ded8:	2101      	movs	r1, #1
 800deda:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dede:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800dee2:	f002 f989 	bl	80101f8 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800dee6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800deea:	f04f 0200 	mov.w	r2, #0
 800deee:	f04f 0300 	mov.w	r3, #0
 800def2:	f7f2 fddb 	bl	8000aac <__aeabi_dcmpeq>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d12b      	bne.n	800df54 <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800defc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800df00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800df04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800df0c:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800df10:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800df14:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800df18:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800df1c:	f7f2 fc88 	bl	8000830 <__aeabi_ddiv>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800df28:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df2c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800df30:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800df34:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800df38:	f7f2 fb50 	bl	80005dc <__aeabi_dmul>
 800df3c:	4602      	mov	r2, r0
 800df3e:	460b      	mov	r3, r1
 800df40:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800df44:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800df48:	2104      	movs	r1, #4
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800df50:	f002 f952 	bl	80101f8 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800df54:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800df58:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800df5c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800df60:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800df64:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800df68:	f04f 0200 	mov.w	r2, #0
 800df6c:	f04f 0300 	mov.w	r3, #0
 800df70:	f7f2 fd9c 	bl	8000aac <__aeabi_dcmpeq>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d12a      	bne.n	800dfd0 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800df7a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800df7e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800df82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800df8a:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800df8e:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800df92:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800df96:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df9a:	f7f2 fc49 	bl	8000830 <__aeabi_ddiv>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800dfa6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dfaa:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800dfae:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800dfb2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800dfb6:	f7f2 fc3b 	bl	8000830 <__aeabi_ddiv>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800dfc2:	2104      	movs	r1, #4
 800dfc4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dfc8:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800dfcc:	f002 f914 	bl	80101f8 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800dfd0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800dfd4:	f04f 0200 	mov.w	r2, #0
 800dfd8:	f04f 0300 	mov.w	r3, #0
 800dfdc:	f7f2 fd66 	bl	8000aac <__aeabi_dcmpeq>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d12b      	bne.n	800e03e <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800dfe6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800dfea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dfee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dff6:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800dffa:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800dffe:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e002:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e006:	f7f2 fc13 	bl	8000830 <__aeabi_ddiv>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800e012:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e016:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800e01a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e01e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800e022:	f7f2 fadb 	bl	80005dc <__aeabi_dmul>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800e02e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e032:	2107      	movs	r1, #7
 800e034:	6818      	ldr	r0, [r3, #0]
 800e036:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800e03a:	f002 f8dd 	bl	80101f8 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800e03e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e042:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800e046:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800e04a:	f04f 0200 	mov.w	r2, #0
 800e04e:	f04f 0300 	mov.w	r3, #0
 800e052:	f7f2 fd2b 	bl	8000aac <__aeabi_dcmpeq>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d11e      	bne.n	800e09a <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800e05c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e060:	67ba      	str	r2, [r7, #120]	; 0x78
 800e062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e066:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e068:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800e06c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800e070:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800e074:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e078:	f7f2 fbda 	bl	8000830 <__aeabi_ddiv>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800e084:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e088:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800e08c:	2107      	movs	r1, #7
 800e08e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e092:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800e096:	f002 f8af 	bl	80101f8 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800e09a:	f04f 0200 	mov.w	r2, #0
 800e09e:	f04f 0300 	mov.w	r3, #0
 800e0a2:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800e0ac:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800e0b0:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800e0b4:	eeb0 1a46 	vmov.f32	s2, s12
 800e0b8:	eef0 1a66 	vmov.f32	s3, s13
 800e0bc:	eeb0 0a47 	vmov.f32	s0, s14
 800e0c0:	eef0 0a67 	vmov.f32	s1, s15
 800e0c4:	f00d fa92 	bl	801b5ec <fmax>
 800e0c8:	eeb0 8a40 	vmov.f32	s16, s0
 800e0cc:	eef0 8a60 	vmov.f32	s17, s1
 800e0d0:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800e0d4:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800e0d8:	eeb0 1a46 	vmov.f32	s2, s12
 800e0dc:	eef0 1a66 	vmov.f32	s3, s13
 800e0e0:	eeb0 0a47 	vmov.f32	s0, s14
 800e0e4:	eef0 0a67 	vmov.f32	s1, s15
 800e0e8:	f00d fa80 	bl	801b5ec <fmax>
 800e0ec:	eeb0 7a40 	vmov.f32	s14, s0
 800e0f0:	eef0 7a60 	vmov.f32	s15, s1
 800e0f4:	eeb0 1a47 	vmov.f32	s2, s14
 800e0f8:	eef0 1a67 	vmov.f32	s3, s15
 800e0fc:	eeb0 0a48 	vmov.f32	s0, s16
 800e100:	eef0 0a68 	vmov.f32	s1, s17
 800e104:	f00d fa72 	bl	801b5ec <fmax>
 800e108:	eeb0 8a40 	vmov.f32	s16, s0
 800e10c:	eef0 8a60 	vmov.f32	s17, s1
 800e110:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800e114:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800e148 <svd_u3DvUgOe+0xe18>
 800e118:	eeb0 0a47 	vmov.f32	s0, s14
 800e11c:	eef0 0a67 	vmov.f32	s1, s15
 800e120:	f00d fa64 	bl	801b5ec <fmax>
 800e124:	eeb0 7a40 	vmov.f32	s14, s0
 800e128:	eef0 7a60 	vmov.f32	s15, s1
 800e12c:	eeb0 1a47 	vmov.f32	s2, s14
 800e130:	eef0 1a67 	vmov.f32	s3, s15
 800e134:	eeb0 0a48 	vmov.f32	s0, s16
 800e138:	eef0 0a68 	vmov.f32	s1, s17
 800e13c:	f00d fa56 	bl	801b5ec <fmax>
 800e140:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800e144:	f000 be8a 	b.w	800ee5c <svd_u3DvUgOe+0x1b2c>
	...
 800e150:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800e154:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e158:	3301      	adds	r3, #1
 800e15a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800e15e:	2300      	movs	r3, #0
 800e160:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800e164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e168:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800e16c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e170:	2b00      	cmp	r3, #0
 800e172:	d103      	bne.n	800e17c <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800e174:	2301      	movs	r3, #1
 800e176:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e17a:	e092      	b.n	800e2a2 <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800e17c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e180:	3b01      	subs	r3, #1
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e188:	4413      	add	r3, r2
 800e18a:	3bb8      	subs	r3, #184	; 0xb8
 800e18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e190:	673a      	str	r2, [r7, #112]	; 0x70
 800e192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e196:	677b      	str	r3, [r7, #116]	; 0x74
 800e198:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800e19c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800e1a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	00db      	lsls	r3, r3, #3
 800e1a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1ac:	4413      	add	r3, r2
 800e1ae:	3ba0      	subs	r3, #160	; 0xa0
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	66ba      	str	r2, [r7, #104]	; 0x68
 800e1b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e1c0:	00db      	lsls	r3, r3, #3
 800e1c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1c6:	4413      	add	r3, r2
 800e1c8:	3ba0      	subs	r3, #160	; 0xa0
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	663a      	str	r2, [r7, #96]	; 0x60
 800e1d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e1d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e1da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e1de:	f7f2 f847 	bl	8000270 <__adddf3>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	f04f 0200 	mov.w	r2, #0
 800e1ee:	4bb2      	ldr	r3, [pc, #712]	; (800e4b8 <svd_u3DvUgOe+0x1188>)
 800e1f0:	f7f2 f9f4 	bl	80005dc <__aeabi_dmul>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e200:	f7f2 fc72 	bl	8000ae8 <__aeabi_dcmpge>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d012      	beq.n	800e230 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800e20a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e20e:	3b01      	subs	r3, #1
 800e210:	00db      	lsls	r3, r3, #3
 800e212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e216:	4413      	add	r3, r2
 800e218:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e21c:	f04f 0200 	mov.w	r2, #0
 800e220:	f04f 0300 	mov.w	r3, #0
 800e224:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800e228:	2301      	movs	r3, #1
 800e22a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e22e:	e038      	b.n	800e2a2 <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800e230:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e234:	f04f 0200 	mov.w	r2, #0
 800e238:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800e23c:	f7f2 fc4a 	bl	8000ad4 <__aeabi_dcmple>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d115      	bne.n	800e272 <svd_u3DvUgOe+0xf42>
 800e246:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e24a:	2b14      	cmp	r3, #20
 800e24c:	dd24      	ble.n	800e298 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800e24e:	f04f 0200 	mov.w	r2, #0
 800e252:	4b99      	ldr	r3, [pc, #612]	; (800e4b8 <svd_u3DvUgOe+0x1188>)
 800e254:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e258:	f7f2 f9c0 	bl	80005dc <__aeabi_dmul>
 800e25c:	4602      	mov	r2, r0
 800e25e:	460b      	mov	r3, r1
 800e260:	4610      	mov	r0, r2
 800e262:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800e264:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e268:	f7f2 fc3e 	bl	8000ae8 <__aeabi_dcmpge>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d012      	beq.n	800e298 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800e272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e276:	3b01      	subs	r3, #1
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e27e:	4413      	add	r3, r2
 800e280:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e284:	f04f 0200 	mov.w	r2, #0
 800e288:	f04f 0300 	mov.w	r3, #0
 800e28c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800e290:	2301      	movs	r3, #1
 800e292:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e296:	e004      	b.n	800e2a2 <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800e298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e29c:	3b01      	subs	r3, #1
 800e29e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800e2a2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f43f af59 	beq.w	800e15e <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800e2ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e2b0:	1c5a      	adds	r2, r3, #1
 800e2b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d103      	bne.n	800e2c2 <svd_u3DvUgOe+0xf92>
      kase = 4;
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e2c0:	e0c7      	b.n	800e452 <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800e2c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e2c6:	3302      	adds	r3, #2
 800e2c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800e2cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e2d0:	3302      	adds	r3, #2
 800e2d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800e2dc:	e092      	b.n	800e404 <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800e2de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e2e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800e2e6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800e2ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d103      	bne.n	800e2fa <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800e2f8:	e084      	b.n	800e404 <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800e2fa:	f04f 0200 	mov.w	r2, #0
 800e2fe:	f04f 0300 	mov.w	r3, #0
 800e302:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800e306:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e310:	4293      	cmp	r3, r2
 800e312:	dc11      	bgt.n	800e338 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800e314:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e318:	3b01      	subs	r3, #1
 800e31a:	00db      	lsls	r3, r3, #3
 800e31c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e320:	4413      	add	r3, r2
 800e322:	3bb8      	subs	r3, #184	; 0xb8
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	65ba      	str	r2, [r7, #88]	; 0x58
 800e32a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e32e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e330:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800e334:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800e338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e33c:	1c5a      	adds	r2, r3, #1
 800e33e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e342:	4293      	cmp	r3, r2
 800e344:	dd17      	ble.n	800e376 <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800e346:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e34a:	3b02      	subs	r3, #2
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e352:	4413      	add	r3, r2
 800e354:	3bb8      	subs	r3, #184	; 0xb8
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	653a      	str	r2, [r7, #80]	; 0x50
 800e35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e360:	657b      	str	r3, [r7, #84]	; 0x54
 800e362:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e366:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e36a:	f7f1 ff81 	bl	8000270 <__adddf3>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800e376:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e37a:	3b01      	subs	r3, #1
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e382:	4413      	add	r3, r2
 800e384:	3ba0      	subs	r3, #160	; 0xa0
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e38c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e390:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e392:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800e396:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800e39a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e39e:	f04f 0200 	mov.w	r2, #0
 800e3a2:	4b45      	ldr	r3, [pc, #276]	; (800e4b8 <svd_u3DvUgOe+0x1188>)
 800e3a4:	f7f2 f91a 	bl	80005dc <__aeabi_dmul>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e3b4:	f7f2 fb98 	bl	8000ae8 <__aeabi_dcmpge>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10a      	bne.n	800e3d4 <svd_u3DvUgOe+0x10a4>
 800e3be:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800e3c2:	f04f 0200 	mov.w	r2, #0
 800e3c6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800e3ca:	f7f2 fb83 	bl	8000ad4 <__aeabi_dcmple>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d012      	beq.n	800e3fa <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800e3d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	00db      	lsls	r3, r3, #3
 800e3dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3e0:	4413      	add	r3, r2
 800e3e2:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800e3e6:	f04f 0200 	mov.w	r2, #0
 800e3ea:	f04f 0300 	mov.w	r3, #0
 800e3ee:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800e3f8:	e004      	b.n	800e404 <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800e3fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e3fe:	3b01      	subs	r3, #1
 800e400:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800e404:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d106      	bne.n	800e41a <svd_u3DvUgOe+0x10ea>
 800e40c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800e410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e414:	429a      	cmp	r2, r3
 800e416:	f6bf af62 	bge.w	800e2de <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800e41a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e41e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e422:	429a      	cmp	r2, r3
 800e424:	d103      	bne.n	800e42e <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800e426:	2303      	movs	r3, #3
 800e428:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e42c:	e011      	b.n	800e452 <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800e42e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e432:	1c9a      	adds	r2, r3, #2
 800e434:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e438:	4293      	cmp	r3, r2
 800e43a:	d103      	bne.n	800e444 <svd_u3DvUgOe+0x1114>
        kase = 1;
 800e43c:	2301      	movs	r3, #1
 800e43e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e442:	e006      	b.n	800e452 <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800e444:	2302      	movs	r3, #2
 800e446:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800e44a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e44e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800e452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e456:	2b03      	cmp	r3, #3
 800e458:	f000 8113 	beq.w	800e682 <svd_u3DvUgOe+0x1352>
 800e45c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e460:	2b03      	cmp	r3, #3
 800e462:	f300 8443 	bgt.w	800ecec <svd_u3DvUgOe+0x19bc>
 800e466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d005      	beq.n	800e47a <svd_u3DvUgOe+0x114a>
 800e46e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e472:	2b02      	cmp	r3, #2
 800e474:	d07b      	beq.n	800e56e <svd_u3DvUgOe+0x123e>
 800e476:	f000 bc39 	b.w	800ecec <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800e47a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e484:	4413      	add	r3, r2
 800e486:	3bb8      	subs	r3, #184	; 0xb8
 800e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800e490:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e494:	00db      	lsls	r3, r3, #3
 800e496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e49a:	4413      	add	r3, r2
 800e49c:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e4a0:	f04f 0200 	mov.w	r2, #0
 800e4a4:	f04f 0300 	mov.w	r3, #0
 800e4a8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800e4ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e4b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e4b4:	e053      	b.n	800e55e <svd_u3DvUgOe+0x122e>
 800e4b6:	bf00      	nop
 800e4b8:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800e4bc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e4c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	18d0      	adds	r0, r2, r3
 800e4c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e4cc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e4d0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800e4d4:	f001 fd2a 	bl	800ff2c <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800e4d8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e4dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	dd19      	ble.n	800e518 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800e4e4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e4e8:	643a      	str	r2, [r7, #64]	; 0x40
 800e4ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e4ee:	647b      	str	r3, [r7, #68]	; 0x44
 800e4f0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800e4f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e4f8:	f7f2 f870 	bl	80005dc <__aeabi_dmul>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800e504:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e508:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e50c:	f7f2 f866 	bl	80005dc <__aeabi_dmul>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800e518:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e51c:	4613      	mov	r3, r2
 800e51e:	005b      	lsls	r3, r3, #1
 800e520:	4413      	add	r3, r2
 800e522:	1c59      	adds	r1, r3, #1
 800e524:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	4613      	mov	r3, r2
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	4413      	add	r3, r2
 800e530:	1c5a      	adds	r2, r3, #1
 800e532:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800e536:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800e53a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e53e:	eeb0 1a46 	vmov.f32	s2, s12
 800e542:	eef0 1a66 	vmov.f32	s3, s13
 800e546:	eeb0 0a47 	vmov.f32	s0, s14
 800e54a:	eef0 0a67 	vmov.f32	s1, s15
 800e54e:	6818      	ldr	r0, [r3, #0]
 800e550:	f001 fbd0 	bl	800fcf4 <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800e554:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e558:	3b01      	subs	r3, #1
 800e55a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e55e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e562:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e566:	429a      	cmp	r2, r3
 800e568:	daa8      	bge.n	800e4bc <svd_u3DvUgOe+0x118c>
      }
      break;
 800e56a:	f000 bc77 	b.w	800ee5c <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800e56e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e572:	3b01      	subs	r3, #1
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e57a:	4413      	add	r3, r2
 800e57c:	3bb8      	subs	r3, #184	; 0xb8
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800e586:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e58a:	3b01      	subs	r3, #1
 800e58c:	00db      	lsls	r3, r3, #3
 800e58e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e592:	4413      	add	r3, r2
 800e594:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e598:	f04f 0200 	mov.w	r2, #0
 800e59c:	f04f 0300 	mov.w	r3, #0
 800e5a0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800e5a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e5a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e5ac:	e061      	b.n	800e672 <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800e5ae:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e5b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	18d0      	adds	r0, r2, r3
 800e5ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e5be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e5c2:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800e5c6:	f001 fcb1 	bl	800ff2c <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800e5ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e5ce:	63ba      	str	r2, [r7, #56]	; 0x38
 800e5d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5e0:	4413      	add	r3, r2
 800e5e2:	3bb8      	subs	r3, #184	; 0xb8
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e5ec:	f7f1 fff6 	bl	80005dc <__aeabi_dmul>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800e5f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e5fc:	00db      	lsls	r3, r3, #3
 800e5fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e602:	4413      	add	r3, r2
 800e604:	3bb8      	subs	r3, #184	; 0xb8
 800e606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e60a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e60e:	f7f1 ffe5 	bl	80005dc <__aeabi_dmul>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4610      	mov	r0, r2
 800e618:	4619      	mov	r1, r3
 800e61a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e61e:	00db      	lsls	r3, r3, #3
 800e620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e624:	4413      	add	r3, r2
 800e626:	3bb8      	subs	r3, #184	; 0xb8
 800e628:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800e62c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e630:	4613      	mov	r3, r2
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	4413      	add	r3, r2
 800e636:	1c59      	adds	r1, r3, #1
 800e638:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e63c:	1e5a      	subs	r2, r3, #1
 800e63e:	4613      	mov	r3, r2
 800e640:	005b      	lsls	r3, r3, #1
 800e642:	4413      	add	r3, r2
 800e644:	3301      	adds	r3, #1
 800e646:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800e64a:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800e64e:	eeb0 1a46 	vmov.f32	s2, s12
 800e652:	eef0 1a66 	vmov.f32	s3, s13
 800e656:	eeb0 0a47 	vmov.f32	s0, s14
 800e65a:	eef0 0a67 	vmov.f32	s1, s15
 800e65e:	461a      	mov	r2, r3
 800e660:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e664:	f001 fb46 	bl	800fcf4 <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800e668:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e66c:	3301      	adds	r3, #1
 800e66e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e672:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e67c:	4293      	cmp	r3, r2
 800e67e:	dd96      	ble.n	800e5ae <svd_u3DvUgOe+0x127e>
      }
      break;
 800e680:	e3ec      	b.n	800ee5c <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800e682:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e686:	3301      	adds	r3, #1
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e68e:	4413      	add	r3, r2
 800e690:	3ba0      	subs	r3, #160	; 0xa0
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e69a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e69e:	633a      	str	r2, [r7, #48]	; 0x30
 800e6a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6b0:	4413      	add	r3, r2
 800e6b2:	3ba0      	subs	r3, #160	; 0xa0
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	62ba      	str	r2, [r7, #40]	; 0x28
 800e6ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6c0:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800e6c4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800e6c8:	f00c ff90 	bl	801b5ec <fmax>
 800e6cc:	eeb0 7a40 	vmov.f32	s14, s0
 800e6d0:	eef0 7a60 	vmov.f32	s15, s1
 800e6d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e6d8:	00db      	lsls	r3, r3, #3
 800e6da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6de:	4413      	add	r3, r2
 800e6e0:	3bb8      	subs	r3, #184	; 0xb8
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	623a      	str	r2, [r7, #32]
 800e6e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ee:	ed97 1b08 	vldr	d1, [r7, #32]
 800e6f2:	eeb0 0a47 	vmov.f32	s0, s14
 800e6f6:	eef0 0a67 	vmov.f32	s1, s15
 800e6fa:	f00c ff77 	bl	801b5ec <fmax>
 800e6fe:	eeb0 7a40 	vmov.f32	s14, s0
 800e702:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800e706:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e710:	4413      	add	r3, r2
 800e712:	3ba0      	subs	r3, #160	; 0xa0
 800e714:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e718:	61ba      	str	r2, [r7, #24]
 800e71a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e71e:	61fb      	str	r3, [r7, #28]
 800e720:	ed97 1b06 	vldr	d1, [r7, #24]
 800e724:	eeb0 0a47 	vmov.f32	s0, s14
 800e728:	eef0 0a67 	vmov.f32	s1, s15
 800e72c:	f00c ff5e 	bl	801b5ec <fmax>
 800e730:	eeb0 7a40 	vmov.f32	s14, s0
 800e734:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800e738:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e73c:	00db      	lsls	r3, r3, #3
 800e73e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e742:	4413      	add	r3, r2
 800e744:	3bb8      	subs	r3, #184	; 0xb8
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e74a:	613a      	str	r2, [r7, #16]
 800e74c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	ed97 1b04 	vldr	d1, [r7, #16]
 800e756:	eeb0 0a47 	vmov.f32	s0, s14
 800e75a:	eef0 0a67 	vmov.f32	s1, s15
 800e75e:	f00c ff45 	bl	801b5ec <fmax>
 800e762:	eeb0 7a40 	vmov.f32	s14, s0
 800e766:	eef0 7a60 	vmov.f32	s15, s1
 800e76a:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800e76e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e772:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e776:	f7f2 f85b 	bl	8000830 <__aeabi_ddiv>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800e782:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e78c:	4413      	add	r3, r2
 800e78e:	3ba0      	subs	r3, #160	; 0xa0
 800e790:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e794:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e798:	f7f2 f84a 	bl	8000830 <__aeabi_ddiv>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800e7a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e7a8:	00db      	lsls	r3, r3, #3
 800e7aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e7ae:	4413      	add	r3, r2
 800e7b0:	3bb8      	subs	r3, #184	; 0xb8
 800e7b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e7ba:	f7f2 f839 	bl	8000830 <__aeabi_ddiv>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800e7c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e7d0:	4413      	add	r3, r2
 800e7d2:	3ba0      	subs	r3, #160	; 0xa0
 800e7d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7d8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e7dc:	f7f2 f828 	bl	8000830 <__aeabi_ddiv>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800e7e8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e7ec:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e7f0:	f7f1 fd3e 	bl	8000270 <__adddf3>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	461d      	mov	r5, r3
 800e7fc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e800:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e804:	f7f1 fd32 	bl	800026c <__aeabi_dsub>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f1 fee4 	bl	80005dc <__aeabi_dmul>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4614      	mov	r4, r2
 800e81a:	461d      	mov	r5, r3
 800e81c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e820:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e824:	f7f1 feda 	bl	80005dc <__aeabi_dmul>
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	4620      	mov	r0, r4
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f1 fd1e 	bl	8000270 <__adddf3>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4610      	mov	r0, r2
 800e83a:	4619      	mov	r1, r3
 800e83c:	f04f 0200 	mov.w	r2, #0
 800e840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e844:	f7f1 fff4 	bl	8000830 <__aeabi_ddiv>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800e850:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e854:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e858:	f7f1 fec0 	bl	80005dc <__aeabi_dmul>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800e864:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e868:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e86c:	f7f1 feb6 	bl	80005dc <__aeabi_dmul>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800e878:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e87c:	f04f 0200 	mov.w	r2, #0
 800e880:	f04f 0300 	mov.w	r3, #0
 800e884:	f7f2 f912 	bl	8000aac <__aeabi_dcmpeq>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00a      	beq.n	800e8a4 <svd_u3DvUgOe+0x1574>
 800e88e:	f04f 0200 	mov.w	r2, #0
 800e892:	f04f 0300 	mov.w	r3, #0
 800e896:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e89a:	f7f2 f907 	bl	8000aac <__aeabi_dcmpeq>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d13f      	bne.n	800e924 <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800e8a4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e8a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e8ac:	f7f1 fe96 	bl	80005dc <__aeabi_dmul>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e8bc:	f7f1 fcd8 	bl	8000270 <__adddf3>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	ec43 2b17 	vmov	d7, r2, r3
 800e8c8:	eeb0 0a47 	vmov.f32	s0, s14
 800e8cc:	eef0 0a67 	vmov.f32	s1, s15
 800e8d0:	f00c ff76 	bl	801b7c0 <sqrt>
 800e8d4:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800e8d8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e8dc:	f04f 0200 	mov.w	r2, #0
 800e8e0:	f04f 0300 	mov.w	r3, #0
 800e8e4:	f7f2 f8ec 	bl	8000ac0 <__aeabi_dcmplt>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d009      	beq.n	800e902 <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800e8ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e8f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800e8f6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e8fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e8fe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800e902:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e906:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e90a:	f7f1 fcb1 	bl	8000270 <__adddf3>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e916:	f7f1 ff8b 	bl	8000830 <__aeabi_ddiv>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800e922:	e005      	b.n	800e930 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800e924:	f04f 0200 	mov.w	r2, #0
 800e928:	f04f 0300 	mov.w	r3, #0
 800e92c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800e930:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e934:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e938:	f7f1 fc9a 	bl	8000270 <__adddf3>
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	4614      	mov	r4, r2
 800e942:	461d      	mov	r5, r3
 800e944:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e948:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e94c:	f7f1 fc8e 	bl	800026c <__aeabi_dsub>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	4620      	mov	r0, r4
 800e956:	4629      	mov	r1, r5
 800e958:	f7f1 fe40 	bl	80005dc <__aeabi_dmul>
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	4610      	mov	r0, r2
 800e962:	4619      	mov	r1, r3
 800e964:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e968:	f7f1 fc82 	bl	8000270 <__adddf3>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800e974:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e97e:	4413      	add	r3, r2
 800e980:	3bb8      	subs	r3, #184	; 0xb8
 800e982:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e986:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e98a:	f7f1 ff51 	bl	8000830 <__aeabi_ddiv>
 800e98e:	4602      	mov	r2, r0
 800e990:	460b      	mov	r3, r1
 800e992:	4610      	mov	r0, r2
 800e994:	4619      	mov	r1, r3
 800e996:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e99a:	f7f1 fe1f 	bl	80005dc <__aeabi_dmul>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800e9a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e9b0:	e183      	b.n	800ecba <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800e9b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e9b6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e9ba:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e9be:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800e9c2:	f001 fab3 	bl	800ff2c <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800e9c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	dd03      	ble.n	800e9dc <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800e9d4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e9d8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800e9dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	00db      	lsls	r3, r3, #3
 800e9e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e9e8:	4413      	add	r3, r2
 800e9ea:	3bb8      	subs	r3, #184	; 0xb8
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800e9f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea00:	4413      	add	r3, r2
 800ea02:	3ba0      	subs	r3, #160	; 0xa0
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800ea0c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ea10:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ea14:	f7f1 fde2 	bl	80005dc <__aeabi_dmul>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4690      	mov	r8, r2
 800ea1e:	4699      	mov	r9, r3
 800ea20:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800ea24:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800ea28:	f7f1 fdd8 	bl	80005dc <__aeabi_dmul>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4610      	mov	r0, r2
 800ea32:	4619      	mov	r1, r3
 800ea34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea38:	1e5c      	subs	r4, r3, #1
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4640      	mov	r0, r8
 800ea40:	4649      	mov	r1, r9
 800ea42:	f7f1 fc13 	bl	800026c <__aeabi_dsub>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	00e3      	lsls	r3, r4, #3
 800ea50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea54:	4413      	add	r3, r2
 800ea56:	3bb8      	subs	r3, #184	; 0xb8
 800ea58:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800ea5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea66:	4413      	add	r3, r2
 800ea68:	3ba0      	subs	r3, #160	; 0xa0
 800ea6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ea72:	f7f1 fdb3 	bl	80005dc <__aeabi_dmul>
 800ea76:	4602      	mov	r2, r0
 800ea78:	460b      	mov	r3, r1
 800ea7a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800ea7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea88:	4413      	add	r3, r2
 800ea8a:	3ba0      	subs	r3, #160	; 0xa0
 800ea8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea90:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ea94:	f7f1 fda2 	bl	80005dc <__aeabi_dmul>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eaa4:	00db      	lsls	r3, r3, #3
 800eaa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eaaa:	4413      	add	r3, r2
 800eaac:	3ba0      	subs	r3, #160	; 0xa0
 800eaae:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800eab2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eab6:	1e5a      	subs	r2, r3, #1
 800eab8:	4613      	mov	r3, r2
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	4413      	add	r3, r2
 800eabe:	1c59      	adds	r1, r3, #1
 800eac0:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800eac4:	4613      	mov	r3, r2
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	4413      	add	r3, r2
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800ead0:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800ead4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ead8:	eeb0 1a46 	vmov.f32	s2, s12
 800eadc:	eef0 1a66 	vmov.f32	s3, s13
 800eae0:	eeb0 0a47 	vmov.f32	s0, s14
 800eae4:	eef0 0a67 	vmov.f32	s1, s15
 800eae8:	6818      	ldr	r0, [r3, #0]
 800eaea:	f001 f903 	bl	800fcf4 <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800eaee:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800eaf2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800eaf6:	f7f1 fd71 	bl	80005dc <__aeabi_dmul>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	4690      	mov	r8, r2
 800eb00:	4699      	mov	r9, r3
 800eb02:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800eb06:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eb0a:	f7f1 fd67 	bl	80005dc <__aeabi_dmul>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4610      	mov	r0, r2
 800eb14:	4619      	mov	r1, r3
 800eb16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb1a:	1e5c      	subs	r4, r3, #1
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	4640      	mov	r0, r8
 800eb22:	4649      	mov	r1, r9
 800eb24:	f7f1 fba4 	bl	8000270 <__adddf3>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	4619      	mov	r1, r3
 800eb30:	00e3      	lsls	r3, r4, #3
 800eb32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb36:	4413      	add	r3, r2
 800eb38:	3ba0      	subs	r3, #160	; 0xa0
 800eb3a:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800eb3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb42:	3b01      	subs	r3, #1
 800eb44:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800eb48:	00db      	lsls	r3, r3, #3
 800eb4a:	18d0      	adds	r0, r2, r3
 800eb4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eb50:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800eb54:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800eb58:	f001 f9e8 	bl	800ff2c <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800eb5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb60:	3b01      	subs	r3, #1
 800eb62:	00db      	lsls	r3, r3, #3
 800eb64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb68:	4413      	add	r3, r2
 800eb6a:	3bb8      	subs	r3, #184	; 0xb8
 800eb6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eb74:	f7f1 fd32 	bl	80005dc <__aeabi_dmul>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4614      	mov	r4, r2
 800eb7e:	461d      	mov	r5, r3
 800eb80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb84:	00db      	lsls	r3, r3, #3
 800eb86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb8a:	4413      	add	r3, r2
 800eb8c:	3ba0      	subs	r3, #160	; 0xa0
 800eb8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb92:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eb96:	f7f1 fd21 	bl	80005dc <__aeabi_dmul>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	4620      	mov	r0, r4
 800eba0:	4629      	mov	r1, r5
 800eba2:	f7f1 fb65 	bl	8000270 <__adddf3>
 800eba6:	4602      	mov	r2, r0
 800eba8:	460b      	mov	r3, r1
 800ebaa:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800ebae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	00db      	lsls	r3, r3, #3
 800ebb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ebba:	4413      	add	r3, r2
 800ebbc:	3bb8      	subs	r3, #184	; 0xb8
 800ebbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebc2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ebc6:	60ba      	str	r2, [r7, #8]
 800ebc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ebd2:	f7f1 fd03 	bl	80005dc <__aeabi_dmul>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4614      	mov	r4, r2
 800ebdc:	461d      	mov	r5, r3
 800ebde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ebe8:	4413      	add	r3, r2
 800ebea:	3ba0      	subs	r3, #160	; 0xa0
 800ebec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebf0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ebf4:	f7f1 fcf2 	bl	80005dc <__aeabi_dmul>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	4629      	mov	r1, r5
 800ec00:	f7f1 fb36 	bl	8000270 <__adddf3>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec16:	4413      	add	r3, r2
 800ec18:	3ba0      	subs	r3, #160	; 0xa0
 800ec1a:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800ec1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec28:	4413      	add	r3, r2
 800ec2a:	3bb8      	subs	r3, #184	; 0xb8
 800ec2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec30:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ec34:	f7f1 fcd2 	bl	80005dc <__aeabi_dmul>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800ec40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ec44:	00db      	lsls	r3, r3, #3
 800ec46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec4a:	4413      	add	r3, r2
 800ec4c:	3bb8      	subs	r3, #184	; 0xb8
 800ec4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ec56:	f7f1 fcc1 	bl	80005dc <__aeabi_dmul>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4610      	mov	r0, r2
 800ec60:	4619      	mov	r1, r3
 800ec62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec6c:	4413      	add	r3, r2
 800ec6e:	3bb8      	subs	r3, #184	; 0xb8
 800ec70:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800ec74:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ec78:	1e5a      	subs	r2, r3, #1
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	4413      	add	r3, r2
 800ec80:	1c59      	adds	r1, r3, #1
 800ec82:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800ec86:	4613      	mov	r3, r2
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	4413      	add	r3, r2
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800ec92:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800ec96:	eeb0 1a46 	vmov.f32	s2, s12
 800ec9a:	eef0 1a66 	vmov.f32	s3, s13
 800ec9e:	eeb0 0a47 	vmov.f32	s0, s14
 800eca2:	eef0 0a67 	vmov.f32	s1, s15
 800eca6:	461a      	mov	r2, r3
 800eca8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800ecac:	f001 f822 	bl	800fcf4 <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800ecb0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ecba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ecbe:	1c5a      	adds	r2, r3, #1
 800ecc0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	f77f ae74 	ble.w	800e9b2 <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800ecca:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ecce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ecd2:	00db      	lsls	r3, r3, #3
 800ecd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ecd8:	4413      	add	r3, r2
 800ecda:	3bb8      	subs	r3, #184	; 0xb8
 800ecdc:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800ece0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ece4:	3301      	adds	r3, #1
 800ece6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800ecea:	e0b7      	b.n	800ee5c <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800ecec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ecf0:	00db      	lsls	r3, r3, #3
 800ecf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ecf6:	4413      	add	r3, r2
 800ecf8:	3ba0      	subs	r3, #160	; 0xa0
 800ecfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecfe:	f04f 0200 	mov.w	r2, #0
 800ed02:	f04f 0300 	mov.w	r3, #0
 800ed06:	f7f1 fedb 	bl	8000ac0 <__aeabi_dcmplt>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d025      	beq.n	800ed5c <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800ed10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed1a:	4413      	add	r3, r2
 800ed1c:	3ba0      	subs	r3, #160	; 0xa0
 800ed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed22:	603a      	str	r2, [r7, #0]
 800ed24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ed28:	607b      	str	r3, [r7, #4]
 800ed2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed2e:	00db      	lsls	r3, r3, #3
 800ed30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed34:	4413      	add	r3, r2
 800ed36:	3ba0      	subs	r3, #160	; 0xa0
 800ed38:	ed97 7b00 	vldr	d7, [r7]
 800ed3c:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800ed40:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ed44:	4613      	mov	r3, r2
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	4413      	add	r3, r2
 800ed4a:	1c5a      	adds	r2, r3, #1
 800ed4c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ed50:	4611      	mov	r1, r2
 800ed52:	6818      	ldr	r0, [r3, #0]
 800ed54:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800eeb0 <svd_u3DvUgOe+0x1b80>
 800ed58:	f001 fa4e 	bl	80101f8 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800ed5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed60:	3301      	adds	r3, #1
 800ed62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800ed66:	e055      	b.n	800ee14 <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800ed68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed6c:	00db      	lsls	r3, r3, #3
 800ed6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed72:	4413      	add	r3, r2
 800ed74:	3ba0      	subs	r3, #160	; 0xa0
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800ed7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ed82:	00db      	lsls	r3, r3, #3
 800ed84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed88:	4413      	add	r3, r2
 800ed8a:	3ba0      	subs	r3, #160	; 0xa0
 800ed8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed9a:	4413      	add	r3, r2
 800ed9c:	3ba0      	subs	r3, #160	; 0xa0
 800ed9e:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800eda2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800eda6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800edaa:	00db      	lsls	r3, r3, #3
 800edac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800edb0:	4413      	add	r3, r2
 800edb2:	3ba0      	subs	r3, #160	; 0xa0
 800edb4:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800edb8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800edbc:	4613      	mov	r3, r2
 800edbe:	005b      	lsls	r3, r3, #1
 800edc0:	4413      	add	r3, r2
 800edc2:	1c59      	adds	r1, r3, #1
 800edc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	4613      	mov	r3, r2
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	4413      	add	r3, r2
 800edd0:	3301      	adds	r3, #1
 800edd2:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800edd6:	461a      	mov	r2, r3
 800edd8:	6800      	ldr	r0, [r0, #0]
 800edda:	f001 fa3c 	bl	8010256 <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800edde:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	1c59      	adds	r1, r3, #1
 800edea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	4613      	mov	r3, r2
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	4413      	add	r3, r2
 800edf6:	3301      	adds	r3, #1
 800edf8:	461a      	mov	r2, r3
 800edfa:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800edfe:	f001 fa2a 	bl	8010256 <xswap_JoAqPjUv>
        d = qq;
 800ee02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ee06:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800ee0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ee0e:	3301      	adds	r3, #1
 800ee10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800ee14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	dc16      	bgt.n	800ee4a <svd_u3DvUgOe+0x1b1a>
 800ee1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ee26:	4413      	add	r3, r2
 800ee28:	3ba0      	subs	r3, #160	; 0xa0
 800ee2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ee38:	4413      	add	r3, r2
 800ee3a:	3ba0      	subs	r3, #160	; 0xa0
 800ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee40:	f7f1 fe3e 	bl	8000ac0 <__aeabi_dcmplt>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d18e      	bne.n	800ed68 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800ee50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ee54:	3b01      	subs	r3, #1
 800ee56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800ee5a:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800ee5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ee60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee64:	db04      	blt.n	800ee70 <svd_u3DvUgOe+0x1b40>
 800ee66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ee6a:	2b4a      	cmp	r3, #74	; 0x4a
 800ee6c:	f77f a972 	ble.w	800e154 <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800ee70:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800ee74:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ee78:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800ee7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee80:	f103 0108 	add.w	r1, r3, #8
 800ee84:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ee88:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800ee8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee90:	f103 0110 	add.w	r1, r3, #16
 800ee94:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800ee98:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ee9c:	bf00      	nop
 800ee9e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800eea2:	46bd      	mov	sp, r7
 800eea4:	ecbd 8b02 	vpop	{d8}
 800eea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eeac:	f3af 8000 	nop.w
 800eeb0:	00000000 	.word	0x00000000
 800eeb4:	bff00000 	.word	0xbff00000

0800eeb8 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800eeb8:	b590      	push	{r4, r7, lr}
 800eeba:	b085      	sub	sp, #20
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	ed87 0b02 	vstr	d0, [r7, #8]
 800eec2:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eeca:	f04f 0200 	mov.w	r2, #0
 800eece:	f04f 0300 	mov.w	r3, #0
 800eed2:	f7f1 fdeb 	bl	8000aac <__aeabi_dcmpeq>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10b      	bne.n	800eef4 <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eee6:	f7f1 fca3 	bl	8000830 <__aeabi_ddiv>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	3308      	adds	r3, #8
 800eef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eefc:	f04f 0200 	mov.w	r2, #0
 800ef00:	f04f 0300 	mov.w	r3, #0
 800ef04:	f7f1 fdd2 	bl	8000aac <__aeabi_dcmpeq>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10e      	bne.n	800ef2c <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3308      	adds	r3, #8
 800ef12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f103 0408 	add.w	r4, r3, #8
 800ef1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef20:	f7f1 fc86 	bl	8000830 <__aeabi_ddiv>
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3310      	adds	r3, #16
 800ef30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef34:	f04f 0200 	mov.w	r2, #0
 800ef38:	f04f 0300 	mov.w	r3, #0
 800ef3c:	f7f1 fdb6 	bl	8000aac <__aeabi_dcmpeq>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d000      	beq.n	800ef48 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800ef46:	e00e      	b.n	800ef66 <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	3310      	adds	r3, #16
 800ef4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f103 0410 	add.w	r4, r3, #16
 800ef56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef5a:	f7f1 fc69 	bl	8000830 <__aeabi_ddiv>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	460b      	mov	r3, r1
 800ef62:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ef66:	bf00      	nop
 800ef68:	3714      	adds	r7, #20
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd90      	pop	{r4, r7, pc}

0800ef6e <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800ef6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef70:	b08b      	sub	sp, #44	; 0x2c
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6178      	str	r0, [r7, #20]
 800ef76:	ed87 0b02 	vstr	d0, [r7, #8]
 800ef7a:	6139      	str	r1, [r7, #16]
 800ef7c:	607a      	str	r2, [r7, #4]
 800ef7e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	dd43      	ble.n	800f00e <xaxpy_OQ28XA21+0xa0>
 800ef86:	f04f 0200 	mov.w	r2, #0
 800ef8a:	f04f 0300 	mov.w	r3, #0
 800ef8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef92:	f7f1 fd8b 	bl	8000aac <__aeabi_dcmpeq>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d000      	beq.n	800ef9e <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800ef9c:	e037      	b.n	800f00e <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800efa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa6:	3b01      	subs	r3, #1
 800efa8:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800efaa:	2300      	movs	r3, #0
 800efac:	627b      	str	r3, [r7, #36]	; 0x24
 800efae:	e02a      	b.n	800f006 <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	00db      	lsls	r3, r3, #3
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	4413      	add	r3, r2
 800efb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	00db      	lsls	r3, r3, #3
 800efc0:	693a      	ldr	r2, [r7, #16]
 800efc2:	4413      	add	r3, r2
 800efc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800efcc:	f7f1 fb06 	bl	80005dc <__aeabi_dmul>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4610      	mov	r0, r2
 800efd6:	4619      	mov	r1, r3
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	683a      	ldr	r2, [r7, #0]
 800efde:	18d6      	adds	r6, r2, r3
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4620      	mov	r0, r4
 800efe6:	4629      	mov	r1, r5
 800efe8:	f7f1 f942 	bl	8000270 <__adddf3>
 800efec:	4602      	mov	r2, r0
 800efee:	460b      	mov	r3, r1
 800eff0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	3301      	adds	r3, #1
 800eff8:	623b      	str	r3, [r7, #32]
      iy++;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	3301      	adds	r3, #1
 800effe:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	3301      	adds	r3, #1
 800f004:	627b      	str	r3, [r7, #36]	; 0x24
 800f006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	dbd0      	blt.n	800efb0 <xaxpy_OQ28XA21+0x42>
}
 800f00e:	bf00      	nop
 800f010:	372c      	adds	r7, #44	; 0x2c
 800f012:	46bd      	mov	sp, r7
 800f014:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f016 <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800f016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f018:	b08b      	sub	sp, #44	; 0x2c
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6178      	str	r0, [r7, #20]
 800f01e:	ed87 0b02 	vstr	d0, [r7, #8]
 800f022:	6139      	str	r1, [r7, #16]
 800f024:	607a      	str	r2, [r7, #4]
 800f026:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	dd43      	ble.n	800f0b6 <xaxpy_Wxch84Fl+0xa0>
 800f02e:	f04f 0200 	mov.w	r2, #0
 800f032:	f04f 0300 	mov.w	r3, #0
 800f036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f03a:	f7f1 fd37 	bl	8000aac <__aeabi_dcmpeq>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d000      	beq.n	800f046 <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800f044:	e037      	b.n	800f0b6 <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	3b01      	subs	r3, #1
 800f04a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800f04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f04e:	3b01      	subs	r3, #1
 800f050:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f052:	2300      	movs	r3, #0
 800f054:	627b      	str	r3, [r7, #36]	; 0x24
 800f056:	e02a      	b.n	800f0ae <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	00db      	lsls	r3, r3, #3
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	4413      	add	r3, r2
 800f060:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	693a      	ldr	r2, [r7, #16]
 800f06a:	4413      	add	r3, r2
 800f06c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f074:	f7f1 fab2 	bl	80005dc <__aeabi_dmul>
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	4610      	mov	r0, r2
 800f07e:	4619      	mov	r1, r3
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	683a      	ldr	r2, [r7, #0]
 800f086:	18d6      	adds	r6, r2, r3
 800f088:	4602      	mov	r2, r0
 800f08a:	460b      	mov	r3, r1
 800f08c:	4620      	mov	r0, r4
 800f08e:	4629      	mov	r1, r5
 800f090:	f7f1 f8ee 	bl	8000270 <__adddf3>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	623b      	str	r3, [r7, #32]
      iy++;
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	dbd0      	blt.n	800f058 <xaxpy_Wxch84Fl+0x42>
}
 800f0b6:	bf00      	nop
 800f0b8:	372c      	adds	r7, #44	; 0x2c
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0be <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800f0be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c0:	b08b      	sub	sp, #44	; 0x2c
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6178      	str	r0, [r7, #20]
 800f0c6:	ed87 0b02 	vstr	d0, [r7, #8]
 800f0ca:	6139      	str	r1, [r7, #16]
 800f0cc:	607a      	str	r2, [r7, #4]
 800f0ce:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	dd43      	ble.n	800f15e <xaxpy_guu0hJif+0xa0>
 800f0d6:	f04f 0200 	mov.w	r2, #0
 800f0da:	f04f 0300 	mov.w	r3, #0
 800f0de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f0e2:	f7f1 fce3 	bl	8000aac <__aeabi_dcmpeq>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d000      	beq.n	800f0ee <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800f0ec:	e037      	b.n	800f15e <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	627b      	str	r3, [r7, #36]	; 0x24
 800f0fe:	e02a      	b.n	800f156 <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	4413      	add	r3, r2
 800f108:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f10c:	6a3b      	ldr	r3, [r7, #32]
 800f10e:	00db      	lsls	r3, r3, #3
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	4413      	add	r3, r2
 800f114:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f11c:	f7f1 fa5e 	bl	80005dc <__aeabi_dmul>
 800f120:	4602      	mov	r2, r0
 800f122:	460b      	mov	r3, r1
 800f124:	4610      	mov	r0, r2
 800f126:	4619      	mov	r1, r3
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	00db      	lsls	r3, r3, #3
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	18d6      	adds	r6, r2, r3
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	4620      	mov	r0, r4
 800f136:	4629      	mov	r1, r5
 800f138:	f7f1 f89a 	bl	8000270 <__adddf3>
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800f144:	6a3b      	ldr	r3, [r7, #32]
 800f146:	3301      	adds	r3, #1
 800f148:	623b      	str	r3, [r7, #32]
      iy++;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	3301      	adds	r3, #1
 800f14e:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	3301      	adds	r3, #1
 800f154:	627b      	str	r3, [r7, #36]	; 0x24
 800f156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	dbd0      	blt.n	800f100 <xaxpy_guu0hJif+0x42>
}
 800f15e:	bf00      	nop
 800f160:	372c      	adds	r7, #44	; 0x2c
 800f162:	46bd      	mov	sp, r7
 800f164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f166 <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b08a      	sub	sp, #40	; 0x28
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	60b9      	str	r1, [r7, #8]
 800f170:	607a      	str	r2, [r7, #4]
 800f172:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800f174:	f04f 0200 	mov.w	r2, #0
 800f178:	f04f 0300 	mov.w	r3, #0
 800f17c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	dd31      	ble.n	800f1ea <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800f18e:	2300      	movs	r3, #0
 800f190:	61fb      	str	r3, [r7, #28]
 800f192:	e026      	b.n	800f1e2 <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f19a:	3b01      	subs	r3, #1
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	f7f1 fa10 	bl	80005dc <__aeabi_dmul>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f1c4:	f7f1 f854 	bl	8000270 <__adddf3>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	61bb      	str	r3, [r7, #24]
      iy++;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	61fb      	str	r3, [r7, #28]
 800f1e2:	69fa      	ldr	r2, [r7, #28]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	dbd4      	blt.n	800f194 <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800f1ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f1ee:	ec43 2b17 	vmov	d7, r2, r3
}
 800f1f2:	eeb0 0a47 	vmov.f32	s0, s14
 800f1f6:	eef0 0a67 	vmov.f32	s1, s15
 800f1fa:	3728      	adds	r7, #40	; 0x28
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800f200:	b590      	push	{r4, r7, lr}
 800f202:	b08f      	sub	sp, #60	; 0x3c
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
 800f20c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d079      	beq.n	800f308 <xgemv_NQlWbt2i+0x108>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d076      	beq.n	800f308 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f21a:	2300      	movs	r3, #0
 800f21c:	637b      	str	r3, [r7, #52]	; 0x34
 800f21e:	e00c      	b.n	800f23a <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800f220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f222:	00db      	lsls	r3, r3, #3
 800f224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f226:	18d1      	adds	r1, r2, r3
 800f228:	f04f 0200 	mov.w	r2, #0
 800f22c:	f04f 0300 	mov.w	r3, #0
 800f230:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f236:	3301      	adds	r3, #1
 800f238:	637b      	str	r3, [r7, #52]	; 0x34
 800f23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	429a      	cmp	r2, r3
 800f240:	dbee      	blt.n	800f220 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800f242:	2300      	movs	r3, #0
 800f244:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	1e5a      	subs	r2, r3, #1
 800f24a:	4613      	mov	r3, r2
 800f24c:	005b      	lsls	r3, r3, #1
 800f24e:	4413      	add	r3, r2
 800f250:	005b      	lsls	r3, r3, #1
 800f252:	461a      	mov	r2, r3
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	4413      	add	r3, r2
 800f258:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f25e:	e04f      	b.n	800f300 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800f260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f262:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800f264:	f04f 0200 	mov.w	r2, #0
 800f268:	f04f 0300 	mov.w	r3, #0
 800f26c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800f270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	4413      	add	r3, r2
 800f276:	3b01      	subs	r3, #1
 800f278:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	633b      	str	r3, [r7, #48]	; 0x30
 800f27e:	e023      	b.n	800f2c8 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800f280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f282:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f286:	3b01      	subs	r3, #1
 800f288:	00db      	lsls	r3, r3, #3
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f298:	3b01      	subs	r3, #1
 800f29a:	00db      	lsls	r3, r3, #3
 800f29c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f29e:	4413      	add	r3, r2
 800f2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a4:	f7f1 f99a 	bl	80005dc <__aeabi_dmul>
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f2b0:	f7f0 ffde 	bl	8000270 <__adddf3>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	633b      	str	r3, [r7, #48]	; 0x30
 800f2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	ddd7      	ble.n	800f280 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800f2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2d2:	00db      	lsls	r3, r3, #3
 800f2d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2d6:	4413      	add	r3, r2
 800f2d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2de:	00db      	lsls	r3, r3, #3
 800f2e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2e2:	18d4      	adds	r4, r2, r3
 800f2e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f2e8:	f7f0 ffc2 	bl	8000270 <__adddf3>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800f2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	3306      	adds	r3, #6
 800f2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	429a      	cmp	r2, r3
 800f306:	ddab      	ble.n	800f260 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800f308:	bf00      	nop
 800f30a:	373c      	adds	r7, #60	; 0x3c
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd90      	pop	{r4, r7, pc}

0800f310 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b08f      	sub	sp, #60	; 0x3c
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
 800f31c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d077      	beq.n	800f414 <xgemv_fRiR1I1O+0x104>
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d074      	beq.n	800f414 <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f32a:	2300      	movs	r3, #0
 800f32c:	637b      	str	r3, [r7, #52]	; 0x34
 800f32e:	e00c      	b.n	800f34a <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800f330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f332:	00db      	lsls	r3, r3, #3
 800f334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f336:	18d1      	adds	r1, r2, r3
 800f338:	f04f 0200 	mov.w	r2, #0
 800f33c:	f04f 0300 	mov.w	r3, #0
 800f340:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f346:	3301      	adds	r3, #1
 800f348:	637b      	str	r3, [r7, #52]	; 0x34
 800f34a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	429a      	cmp	r2, r3
 800f350:	dbee      	blt.n	800f330 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	1e5a      	subs	r2, r3, #1
 800f35a:	4613      	mov	r3, r2
 800f35c:	005b      	lsls	r3, r3, #1
 800f35e:	4413      	add	r3, r2
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	4413      	add	r3, r2
 800f364:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f36a:	e04f      	b.n	800f40c <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800f36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f36e:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800f370:	f04f 0200 	mov.w	r2, #0
 800f374:	f04f 0300 	mov.w	r3, #0
 800f378:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800f37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	4413      	add	r3, r2
 800f382:	3b01      	subs	r3, #1
 800f384:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800f386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f388:	633b      	str	r3, [r7, #48]	; 0x30
 800f38a:	e023      	b.n	800f3d4 <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800f38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f392:	3b01      	subs	r3, #1
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	4413      	add	r3, r2
 800f39a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3aa:	4413      	add	r3, r2
 800f3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b0:	f7f1 f914 	bl	80005dc <__aeabi_dmul>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f3bc:	f7f0 ff58 	bl	8000270 <__adddf3>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	ddd7      	ble.n	800f38c <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800f3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3de:	00db      	lsls	r3, r3, #3
 800f3e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3e2:	4413      	add	r3, r2
 800f3e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ea:	00db      	lsls	r3, r3, #3
 800f3ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3ee:	18d4      	adds	r4, r2, r3
 800f3f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f3f4:	f7f0 ff3c 	bl	8000270 <__adddf3>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800f400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f402:	3301      	adds	r3, #1
 800f404:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800f406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f408:	3303      	adds	r3, #3
 800f40a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f40c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	429a      	cmp	r2, r3
 800f412:	ddab      	ble.n	800f36c <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800f414:	bf00      	nop
 800f416:	373c      	adds	r7, #60	; 0x3c
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd90      	pop	{r4, r7, pc}

0800f41c <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800f41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41e:	b091      	sub	sp, #68	; 0x44
 800f420:	af00      	add	r7, sp, #0
 800f422:	6178      	str	r0, [r7, #20]
 800f424:	6139      	str	r1, [r7, #16]
 800f426:	ed87 0b02 	vstr	d0, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
 800f42c:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800f42e:	f04f 0200 	mov.w	r2, #0
 800f432:	f04f 0300 	mov.w	r3, #0
 800f436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f43a:	f7f1 fb37 	bl	8000aac <__aeabi_dcmpeq>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d000      	beq.n	800f446 <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800f444:	e069      	b.n	800f51a <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800f446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f448:	3b01      	subs	r3, #1
 800f44a:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800f450:	2300      	movs	r3, #0
 800f452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f454:	e05d      	b.n	800f512 <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800f456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	4413      	add	r3, r2
 800f45e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f462:	f04f 0200 	mov.w	r2, #0
 800f466:	f04f 0300 	mov.w	r3, #0
 800f46a:	f7f1 fb1f 	bl	8000aac <__aeabi_dcmpeq>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d145      	bne.n	800f500 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800f474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f476:	00db      	lsls	r3, r3, #3
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	4413      	add	r3, r2
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f484:	f7f1 f8aa 	bl	80005dc <__aeabi_dmul>
 800f488:	4602      	mov	r2, r0
 800f48a:	460b      	mov	r3, r1
 800f48c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800f494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f496:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800f498:	697a      	ldr	r2, [r7, #20]
 800f49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49c:	4413      	add	r3, r2
 800f49e:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800f4a0:	e02a      	b.n	800f4f8 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4a8:	4413      	add	r3, r2
 800f4aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4ba:	4413      	add	r3, r2
 800f4bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f4c4:	f7f1 f88a 	bl	80005dc <__aeabi_dmul>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d2:	00db      	lsls	r3, r3, #3
 800f4d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4d6:	18d6      	adds	r6, r2, r3
 800f4d8:	4602      	mov	r2, r0
 800f4da:	460b      	mov	r3, r1
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	f7f0 fec6 	bl	8000270 <__adddf3>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800f4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	dbd0      	blt.n	800f4a2 <xgerc_R09LiDgJ+0x86>
      jy++;
 800f500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f502:	3301      	adds	r3, #1
 800f504:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800f506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f508:	3306      	adds	r3, #6
 800f50a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800f50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50e:	3301      	adds	r3, #1
 800f510:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	429a      	cmp	r2, r3
 800f518:	db9d      	blt.n	800f456 <xgerc_R09LiDgJ+0x3a>
}
 800f51a:	bf00      	nop
 800f51c:	3744      	adds	r7, #68	; 0x44
 800f51e:	46bd      	mov	sp, r7
 800f520:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f522 <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800f522:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f524:	b091      	sub	sp, #68	; 0x44
 800f526:	af00      	add	r7, sp, #0
 800f528:	6178      	str	r0, [r7, #20]
 800f52a:	6139      	str	r1, [r7, #16]
 800f52c:	ed87 0b02 	vstr	d0, [r7, #8]
 800f530:	607a      	str	r2, [r7, #4]
 800f532:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800f534:	f04f 0200 	mov.w	r2, #0
 800f538:	f04f 0300 	mov.w	r3, #0
 800f53c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f540:	f7f1 fab4 	bl	8000aac <__aeabi_dcmpeq>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d000      	beq.n	800f54c <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800f54a:	e069      	b.n	800f620 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800f54c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f54e:	3b01      	subs	r3, #1
 800f550:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800f556:	2300      	movs	r3, #0
 800f558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f55a:	e05d      	b.n	800f618 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800f55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55e:	00db      	lsls	r3, r3, #3
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	4413      	add	r3, r2
 800f564:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f568:	f04f 0200 	mov.w	r2, #0
 800f56c:	f04f 0300 	mov.w	r3, #0
 800f570:	f7f1 fa9c 	bl	8000aac <__aeabi_dcmpeq>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d145      	bne.n	800f606 <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800f57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	683a      	ldr	r2, [r7, #0]
 800f580:	4413      	add	r3, r2
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f58a:	f7f1 f827 	bl	80005dc <__aeabi_dmul>
 800f58e:	4602      	mov	r2, r0
 800f590:	460b      	mov	r3, r1
 800f592:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	4413      	add	r3, r2
 800f5a4:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800f5a6:	e02a      	b.n	800f5fe <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5aa:	00db      	lsls	r3, r3, #3
 800f5ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5ae:	4413      	add	r3, r2
 800f5b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5c0:	4413      	add	r3, r2
 800f5c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f5ca:	f7f1 f807 	bl	80005dc <__aeabi_dmul>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	00db      	lsls	r3, r3, #3
 800f5da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5dc:	18d6      	adds	r6, r2, r3
 800f5de:	4602      	mov	r2, r0
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f0 fe43 	bl	8000270 <__adddf3>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800f5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800f5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	429a      	cmp	r2, r3
 800f604:	dbd0      	blt.n	800f5a8 <xgerc_tNNiazQU+0x86>
      jy++;
 800f606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f608:	3301      	adds	r3, #1
 800f60a:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800f60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60e:	3303      	adds	r3, #3
 800f610:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800f612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f614:	3301      	adds	r3, #1
 800f616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	db9d      	blt.n	800f55c <xgerc_tNNiazQU+0x3a>
}
 800f620:	bf00      	nop
 800f622:	3744      	adds	r7, #68	; 0x44
 800f624:	46bd      	mov	sp, r7
 800f626:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f628 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b092      	sub	sp, #72	; 0x48
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f634:	f04f 0200 	mov.w	r2, #0
 800f638:	f04f 0300 	mov.w	r3, #0
 800f63c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2b00      	cmp	r3, #0
 800f644:	f340 8090 	ble.w	800f768 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d10e      	bne.n	800f66c <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f654:	3b01      	subs	r3, #1
 800f656:	00db      	lsls	r3, r3, #3
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	4413      	add	r3, r2
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	4611      	mov	r1, r2
 800f662:	6439      	str	r1, [r7, #64]	; 0x40
 800f664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f668:	647b      	str	r3, [r7, #68]	; 0x44
 800f66a:	e07d      	b.n	800f768 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f66c:	f04f 0200 	mov.w	r2, #0
 800f670:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f674:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	4413      	add	r3, r2
 800f67e:	3b01      	subs	r3, #1
 800f680:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f686:	e05d      	b.n	800f744 <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f68e:	3b01      	subs	r3, #1
 800f690:	00db      	lsls	r3, r3, #3
 800f692:	68ba      	ldr	r2, [r7, #8]
 800f694:	4413      	add	r3, r2
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	4611      	mov	r1, r2
 800f69c:	6239      	str	r1, [r7, #32]
 800f69e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6a2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f6a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f6a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f6ac:	f7f1 fa26 	bl	8000afc <__aeabi_dcmpgt>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d029      	beq.n	800f70a <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800f6b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f6ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f6be:	f7f1 f8b7 	bl	8000830 <__aeabi_ddiv>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f6ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f6d2:	f7f0 ff83 	bl	80005dc <__aeabi_dmul>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	460b      	mov	r3, r1
 800f6da:	4610      	mov	r0, r2
 800f6dc:	4619      	mov	r1, r3
 800f6de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6e2:	f7f0 ff7b 	bl	80005dc <__aeabi_dmul>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	f04f 0200 	mov.w	r2, #0
 800f6f2:	4b23      	ldr	r3, [pc, #140]	; (800f780 <xnrm2_7bm34mDQ+0x158>)
 800f6f4:	f7f0 fdbc 	bl	8000270 <__adddf3>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f700:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f704:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f708:	e019      	b.n	800f73e <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f70a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f70e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f712:	f7f1 f88d 	bl	8000830 <__aeabi_ddiv>
 800f716:	4602      	mov	r2, r0
 800f718:	460b      	mov	r3, r1
 800f71a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f71e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f722:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f726:	f7f0 ff59 	bl	80005dc <__aeabi_dmul>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f732:	f7f0 fd9d 	bl	8000270 <__adddf3>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f740:	3301      	adds	r3, #1
 800f742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f748:	429a      	cmp	r2, r3
 800f74a:	dd9d      	ble.n	800f688 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800f74c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f750:	f00c f836 	bl	801b7c0 <sqrt>
 800f754:	ec53 2b10 	vmov	r2, r3, d0
 800f758:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f75c:	f7f0 ff3e 	bl	80005dc <__aeabi_dmul>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f768:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f76c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f770:	eeb0 0a47 	vmov.f32	s0, s14
 800f774:	eef0 0a67 	vmov.f32	s1, s15
 800f778:	3748      	adds	r7, #72	; 0x48
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	3ff00000 	.word	0x3ff00000

0800f784 <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b092      	sub	sp, #72	; 0x48
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f790:	f04f 0200 	mov.w	r2, #0
 800f794:	f04f 0300 	mov.w	r3, #0
 800f798:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f340 8090 	ble.w	800f8c4 <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d10e      	bne.n	800f7c8 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	4611      	mov	r1, r2
 800f7be:	6439      	str	r1, [r7, #64]	; 0x40
 800f7c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7c4:	647b      	str	r3, [r7, #68]	; 0x44
 800f7c6:	e07d      	b.n	800f8c4 <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f7c8:	f04f 0200 	mov.w	r2, #0
 800f7cc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f7d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	4413      	add	r3, r2
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7e2:	e05d      	b.n	800f8a0 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	6239      	str	r1, [r7, #32]
 800f7fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f800:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f804:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f808:	f7f1 f978 	bl	8000afc <__aeabi_dcmpgt>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d029      	beq.n	800f866 <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800f812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f816:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f81a:	f7f1 f809 	bl	8000830 <__aeabi_ddiv>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f826:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f82a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f82e:	f7f0 fed5 	bl	80005dc <__aeabi_dmul>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	4610      	mov	r0, r2
 800f838:	4619      	mov	r1, r3
 800f83a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f83e:	f7f0 fecd 	bl	80005dc <__aeabi_dmul>
 800f842:	4602      	mov	r2, r0
 800f844:	460b      	mov	r3, r1
 800f846:	4610      	mov	r0, r2
 800f848:	4619      	mov	r1, r3
 800f84a:	f04f 0200 	mov.w	r2, #0
 800f84e:	4b23      	ldr	r3, [pc, #140]	; (800f8dc <xnrm2_Mnmxg9YT+0x158>)
 800f850:	f7f0 fd0e 	bl	8000270 <__adddf3>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f85c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f860:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f864:	e019      	b.n	800f89a <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f866:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f86a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f86e:	f7f0 ffdf 	bl	8000830 <__aeabi_ddiv>
 800f872:	4602      	mov	r2, r0
 800f874:	460b      	mov	r3, r1
 800f876:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f87a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f87e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f882:	f7f0 feab 	bl	80005dc <__aeabi_dmul>
 800f886:	4602      	mov	r2, r0
 800f888:	460b      	mov	r3, r1
 800f88a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f88e:	f7f0 fcef 	bl	8000270 <__adddf3>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f89c:	3301      	adds	r3, #1
 800f89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	dd9d      	ble.n	800f7e4 <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800f8a8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f8ac:	f00b ff88 	bl	801b7c0 <sqrt>
 800f8b0:	ec53 2b10 	vmov	r2, r3, d0
 800f8b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f8b8:	f7f0 fe90 	bl	80005dc <__aeabi_dmul>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f8c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f8c8:	ec43 2b17 	vmov	d7, r2, r3
}
 800f8cc:	eeb0 0a47 	vmov.f32	s0, s14
 800f8d0:	eef0 0a67 	vmov.f32	s1, s15
 800f8d4:	3748      	adds	r7, #72	; 0x48
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	3ff00000 	.word	0x3ff00000

0800f8e0 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b092      	sub	sp, #72	; 0x48
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f8ec:	f04f 0200 	mov.w	r2, #0
 800f8f0:	f04f 0300 	mov.w	r3, #0
 800f8f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f340 8090 	ble.w	800fa20 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d10e      	bne.n	800f924 <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f90c:	3b01      	subs	r3, #1
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	4413      	add	r3, r2
 800f914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f918:	4611      	mov	r1, r2
 800f91a:	6439      	str	r1, [r7, #64]	; 0x40
 800f91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f920:	647b      	str	r3, [r7, #68]	; 0x44
 800f922:	e07d      	b.n	800fa20 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f924:	f04f 0200 	mov.w	r2, #0
 800f928:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f92c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	4413      	add	r3, r2
 800f936:	3b01      	subs	r3, #1
 800f938:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f93e:	e05d      	b.n	800f9fc <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f942:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f946:	3b01      	subs	r3, #1
 800f948:	00db      	lsls	r3, r3, #3
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	4413      	add	r3, r2
 800f94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f952:	4611      	mov	r1, r2
 800f954:	6239      	str	r1, [r7, #32]
 800f956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f95a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f95c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f960:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f964:	f7f1 f8ca 	bl	8000afc <__aeabi_dcmpgt>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d029      	beq.n	800f9c2 <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800f96e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f972:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f976:	f7f0 ff5b 	bl	8000830 <__aeabi_ddiv>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f982:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f986:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f98a:	f7f0 fe27 	bl	80005dc <__aeabi_dmul>
 800f98e:	4602      	mov	r2, r0
 800f990:	460b      	mov	r3, r1
 800f992:	4610      	mov	r0, r2
 800f994:	4619      	mov	r1, r3
 800f996:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f99a:	f7f0 fe1f 	bl	80005dc <__aeabi_dmul>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	f04f 0200 	mov.w	r2, #0
 800f9aa:	4b23      	ldr	r3, [pc, #140]	; (800fa38 <xnrm2_Rlk0oxWw+0x158>)
 800f9ac:	f7f0 fc60 	bl	8000270 <__adddf3>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f9b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f9bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f9c0:	e019      	b.n	800f9f6 <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f9c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f9c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f9ca:	f7f0 ff31 	bl	8000830 <__aeabi_ddiv>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f9d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f9da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f9de:	f7f0 fdfd 	bl	80005dc <__aeabi_dmul>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f9ea:	f7f0 fc41 	bl	8000270 <__adddf3>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa00:	429a      	cmp	r2, r3
 800fa02:	dd9d      	ble.n	800f940 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800fa04:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800fa08:	f00b feda 	bl	801b7c0 <sqrt>
 800fa0c:	ec53 2b10 	vmov	r2, r3, d0
 800fa10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fa14:	f7f0 fde2 	bl	80005dc <__aeabi_dmul>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800fa20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fa24:	ec43 2b17 	vmov	d7, r2, r3
}
 800fa28:	eeb0 0a47 	vmov.f32	s0, s14
 800fa2c:	eef0 0a67 	vmov.f32	s1, s15
 800fa30:	3748      	adds	r7, #72	; 0x48
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	3ff00000 	.word	0x3ff00000

0800fa3c <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b092      	sub	sp, #72	; 0x48
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800fa48:	f04f 0200 	mov.w	r2, #0
 800fa4c:	f04f 0300 	mov.w	r3, #0
 800fa50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f340 8090 	ble.w	800fb7c <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d10e      	bne.n	800fa80 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	00db      	lsls	r3, r3, #3
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	4413      	add	r3, r2
 800fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa74:	4611      	mov	r1, r2
 800fa76:	6439      	str	r1, [r7, #64]	; 0x40
 800fa78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa7c:	647b      	str	r3, [r7, #68]	; 0x44
 800fa7e:	e07d      	b.n	800fb7c <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800fa80:	f04f 0200 	mov.w	r2, #0
 800fa84:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800fa88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	4413      	add	r3, r2
 800fa92:	3b01      	subs	r3, #1
 800fa94:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa9a:	e05d      	b.n	800fb58 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800fa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800faa2:	3b01      	subs	r3, #1
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	4413      	add	r3, r2
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	4611      	mov	r1, r2
 800fab0:	6239      	str	r1, [r7, #32]
 800fab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fab6:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800fab8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fabc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fac0:	f7f1 f81c 	bl	8000afc <__aeabi_dcmpgt>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d029      	beq.n	800fb1e <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800faca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800face:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fad2:	f7f0 fead 	bl	8000830 <__aeabi_ddiv>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800fade:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fae2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fae6:	f7f0 fd79 	bl	80005dc <__aeabi_dmul>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	4610      	mov	r0, r2
 800faf0:	4619      	mov	r1, r3
 800faf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800faf6:	f7f0 fd71 	bl	80005dc <__aeabi_dmul>
 800fafa:	4602      	mov	r2, r0
 800fafc:	460b      	mov	r3, r1
 800fafe:	4610      	mov	r0, r2
 800fb00:	4619      	mov	r1, r3
 800fb02:	f04f 0200 	mov.w	r2, #0
 800fb06:	4b23      	ldr	r3, [pc, #140]	; (800fb94 <xnrm2_nLdASVZH+0x158>)
 800fb08:	f7f0 fbb2 	bl	8000270 <__adddf3>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800fb14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fb18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800fb1c:	e019      	b.n	800fb52 <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800fb1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fb22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fb26:	f7f0 fe83 	bl	8000830 <__aeabi_ddiv>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800fb32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fb36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fb3a:	f7f0 fd4f 	bl	80005dc <__aeabi_dmul>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fb46:	f7f0 fb93 	bl	8000270 <__adddf3>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800fb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb54:	3301      	adds	r3, #1
 800fb56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	dd9d      	ble.n	800fa9c <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800fb60:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800fb64:	f00b fe2c 	bl	801b7c0 <sqrt>
 800fb68:	ec53 2b10 	vmov	r2, r3, d0
 800fb6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fb70:	f7f0 fd34 	bl	80005dc <__aeabi_dmul>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800fb7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fb80:	ec43 2b17 	vmov	d7, r2, r3
}
 800fb84:	eeb0 0a47 	vmov.f32	s0, s14
 800fb88:	eef0 0a67 	vmov.f32	s1, s15
 800fb8c:	3748      	adds	r7, #72	; 0x48
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	3ff00000 	.word	0x3ff00000

0800fb98 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b092      	sub	sp, #72	; 0x48
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800fba4:	f04f 0200 	mov.w	r2, #0
 800fba8:	f04f 0300 	mov.w	r3, #0
 800fbac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f340 8090 	ble.w	800fcd8 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d10e      	bne.n	800fbdc <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	4413      	add	r3, r2
 800fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	6439      	str	r1, [r7, #64]	; 0x40
 800fbd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbd8:	647b      	str	r3, [r7, #68]	; 0x44
 800fbda:	e07d      	b.n	800fcd8 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800fbdc:	f04f 0200 	mov.w	r2, #0
 800fbe0:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800fbe4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	4413      	add	r3, r2
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbf6:	e05d      	b.n	800fcb4 <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800fbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	00db      	lsls	r3, r3, #3
 800fc02:	68ba      	ldr	r2, [r7, #8]
 800fc04:	4413      	add	r3, r2
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	6239      	str	r1, [r7, #32]
 800fc0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800fc14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fc18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fc1c:	f7f0 ff6e 	bl	8000afc <__aeabi_dcmpgt>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d029      	beq.n	800fc7a <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800fc26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fc2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fc2e:	f7f0 fdff 	bl	8000830 <__aeabi_ddiv>
 800fc32:	4602      	mov	r2, r0
 800fc34:	460b      	mov	r3, r1
 800fc36:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800fc3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fc42:	f7f0 fccb 	bl	80005dc <__aeabi_dmul>
 800fc46:	4602      	mov	r2, r0
 800fc48:	460b      	mov	r3, r1
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc52:	f7f0 fcc3 	bl	80005dc <__aeabi_dmul>
 800fc56:	4602      	mov	r2, r0
 800fc58:	460b      	mov	r3, r1
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	f04f 0200 	mov.w	r2, #0
 800fc62:	4b23      	ldr	r3, [pc, #140]	; (800fcf0 <xnrm2_xDOlDEtw+0x158>)
 800fc64:	f7f0 fb04 	bl	8000270 <__adddf3>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800fc70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fc74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800fc78:	e019      	b.n	800fcae <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800fc7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fc7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fc82:	f7f0 fdd5 	bl	8000830 <__aeabi_ddiv>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800fc8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fc92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fc96:	f7f0 fca1 	bl	80005dc <__aeabi_dmul>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fca2:	f7f0 fae5 	bl	8000270 <__adddf3>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800fcae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fcb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	dd9d      	ble.n	800fbf8 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800fcbc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800fcc0:	f00b fd7e 	bl	801b7c0 <sqrt>
 800fcc4:	ec53 2b10 	vmov	r2, r3, d0
 800fcc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fccc:	f7f0 fc86 	bl	80005dc <__aeabi_dmul>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800fcd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fcdc:	ec43 2b17 	vmov	d7, r2, r3
}
 800fce0:	eeb0 0a47 	vmov.f32	s0, s14
 800fce4:	eef0 0a67 	vmov.f32	s1, s15
 800fce8:	3748      	adds	r7, #72	; 0x48
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	3ff00000 	.word	0x3ff00000

0800fcf4 <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800fcf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fcf8:	b08c      	sub	sp, #48	; 0x30
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	61f8      	str	r0, [r7, #28]
 800fcfe:	61b9      	str	r1, [r7, #24]
 800fd00:	617a      	str	r2, [r7, #20]
 800fd02:	ed87 0b02 	vstr	d0, [r7, #8]
 800fd06:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fd10:	3b01      	subs	r3, #1
 800fd12:	00db      	lsls	r3, r3, #3
 800fd14:	69fa      	ldr	r2, [r7, #28]
 800fd16:	4413      	add	r3, r2
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fd26:	3b01      	subs	r3, #1
 800fd28:	00db      	lsls	r3, r3, #3
 800fd2a:	69fa      	ldr	r2, [r7, #28]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800fd36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fd3e:	f7f0 fc4d 	bl	80005dc <__aeabi_dmul>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	4690      	mov	r8, r2
 800fd48:	4699      	mov	r9, r3
 800fd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fd52:	f7f0 fc43 	bl	80005dc <__aeabi_dmul>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fd64:	3b01      	subs	r3, #1
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	69fa      	ldr	r2, [r7, #28]
 800fd6a:	18d4      	adds	r4, r2, r3
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4640      	mov	r0, r8
 800fd72:	4649      	mov	r1, r9
 800fd74:	f7f0 fa7a 	bl	800026c <__aeabi_dsub>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800fd80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fd88:	f7f0 fc28 	bl	80005dc <__aeabi_dmul>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	4690      	mov	r8, r2
 800fd92:	4699      	mov	r9, r3
 800fd94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fd9c:	f7f0 fc1e 	bl	80005dc <__aeabi_dmul>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4610      	mov	r0, r2
 800fda6:	4619      	mov	r1, r3
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fdae:	3b01      	subs	r3, #1
 800fdb0:	00db      	lsls	r3, r3, #3
 800fdb2:	69fa      	ldr	r2, [r7, #28]
 800fdb4:	18d4      	adds	r4, r2, r3
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4640      	mov	r0, r8
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	f7f0 fa57 	bl	8000270 <__adddf3>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	00db      	lsls	r3, r3, #3
 800fdce:	69fa      	ldr	r2, [r7, #28]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fdd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fdda:	f7f0 fbff 	bl	80005dc <__aeabi_dmul>
 800fdde:	4602      	mov	r2, r0
 800fde0:	460b      	mov	r3, r1
 800fde2:	4614      	mov	r4, r2
 800fde4:	461d      	mov	r5, r3
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	69fa      	ldr	r2, [r7, #28]
 800fdec:	4413      	add	r3, r2
 800fdee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fdf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdf6:	f7f0 fbf1 	bl	80005dc <__aeabi_dmul>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	4620      	mov	r0, r4
 800fe00:	4629      	mov	r1, r5
 800fe02:	f7f0 fa35 	bl	8000270 <__adddf3>
 800fe06:	4602      	mov	r2, r0
 800fe08:	460b      	mov	r3, r1
 800fe0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	00db      	lsls	r3, r3, #3
 800fe12:	69fa      	ldr	r2, [r7, #28]
 800fe14:	4413      	add	r3, r2
 800fe16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fe1e:	f7f0 fbdd 	bl	80005dc <__aeabi_dmul>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	4690      	mov	r8, r2
 800fe28:	4699      	mov	r9, r3
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	00db      	lsls	r3, r3, #3
 800fe2e:	69fa      	ldr	r2, [r7, #28]
 800fe30:	4413      	add	r3, r2
 800fe32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe3a:	f7f0 fbcf 	bl	80005dc <__aeabi_dmul>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	460b      	mov	r3, r1
 800fe42:	4610      	mov	r0, r2
 800fe44:	4619      	mov	r1, r3
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	00db      	lsls	r3, r3, #3
 800fe4a:	69fa      	ldr	r2, [r7, #28]
 800fe4c:	18d4      	adds	r4, r2, r3
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	4640      	mov	r0, r8
 800fe54:	4649      	mov	r1, r9
 800fe56:	f7f0 fa09 	bl	800026c <__aeabi_dsub>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	00db      	lsls	r3, r3, #3
 800fe66:	69fa      	ldr	r2, [r7, #28]
 800fe68:	18d1      	adds	r1, r2, r3
 800fe6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fe6e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	3301      	adds	r3, #1
 800fe76:	00db      	lsls	r3, r3, #3
 800fe78:	69fa      	ldr	r2, [r7, #28]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	3301      	adds	r3, #1
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800fe96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fe9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fe9e:	f7f0 fb9d 	bl	80005dc <__aeabi_dmul>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	4690      	mov	r8, r2
 800fea8:	4699      	mov	r9, r3
 800feaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800feb2:	f7f0 fb93 	bl	80005dc <__aeabi_dmul>
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	4610      	mov	r0, r2
 800febc:	4619      	mov	r1, r3
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	3301      	adds	r3, #1
 800fec2:	00db      	lsls	r3, r3, #3
 800fec4:	69fa      	ldr	r2, [r7, #28]
 800fec6:	18d4      	adds	r4, r2, r3
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4640      	mov	r0, r8
 800fece:	4649      	mov	r1, r9
 800fed0:	f7f0 f9cc 	bl	800026c <__aeabi_dsub>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800fedc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fee0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fee4:	f7f0 fb7a 	bl	80005dc <__aeabi_dmul>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4690      	mov	r8, r2
 800feee:	4699      	mov	r9, r3
 800fef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fef4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fef8:	f7f0 fb70 	bl	80005dc <__aeabi_dmul>
 800fefc:	4602      	mov	r2, r0
 800fefe:	460b      	mov	r3, r1
 800ff00:	4610      	mov	r0, r2
 800ff02:	4619      	mov	r1, r3
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	3301      	adds	r3, #1
 800ff08:	00db      	lsls	r3, r3, #3
 800ff0a:	69fa      	ldr	r2, [r7, #28]
 800ff0c:	18d4      	adds	r4, r2, r3
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	4640      	mov	r0, r8
 800ff14:	4649      	mov	r1, r9
 800ff16:	f7f0 f9ab 	bl	8000270 <__adddf3>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ff22:	bf00      	nop
 800ff24:	3730      	adds	r7, #48	; 0x30
 800ff26:	46bd      	mov	sp, r7
 800ff28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ff2c <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800ff2c:	b5b0      	push	{r4, r5, r7, lr}
 800ff2e:	b090      	sub	sp, #64	; 0x40
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	607a      	str	r2, [r7, #4]
 800ff38:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ff4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff52:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	6239      	str	r1, [r7, #32]
 800ff5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff62:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800ff64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ff68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ff6c:	f7f0 fdc6 	bl	8000afc <__aeabi_dcmpgt>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800ff80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ff84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ff88:	f7f0 f972 	bl	8000270 <__adddf3>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	460b      	mov	r3, r1
 800ff90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800ff94:	f04f 0200 	mov.w	r2, #0
 800ff98:	f04f 0300 	mov.w	r3, #0
 800ff9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ffa0:	f7f0 fd84 	bl	8000aac <__aeabi_dcmpeq>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d01b      	beq.n	800ffe2 <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800ffaa:	6839      	ldr	r1, [r7, #0]
 800ffac:	f04f 0200 	mov.w	r2, #0
 800ffb0:	f04f 0300 	mov.w	r3, #0
 800ffb4:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800ffb8:	6879      	ldr	r1, [r7, #4]
 800ffba:	f04f 0200 	mov.w	r2, #0
 800ffbe:	4b59      	ldr	r3, [pc, #356]	; (8010124 <xrotg_XzIjz1eG+0x1f8>)
 800ffc0:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800ffc4:	68f9      	ldr	r1, [r7, #12]
 800ffc6:	f04f 0200 	mov.w	r2, #0
 800ffca:	f04f 0300 	mov.w	r3, #0
 800ffce:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800ffd2:	68b9      	ldr	r1, [r7, #8]
 800ffd4:	f04f 0200 	mov.w	r2, #0
 800ffd8:	f04f 0300 	mov.w	r3, #0
 800ffdc:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800ffe0:	e09b      	b.n	801011a <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800ffe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ffe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ffea:	f7f0 fc21 	bl	8000830 <__aeabi_ddiv>
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800fff6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fffe:	f7f0 fc17 	bl	8000830 <__aeabi_ddiv>
 8010002:	4602      	mov	r2, r0
 8010004:	460b      	mov	r3, r1
 8010006:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 801000a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801000e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010012:	f7f0 fae3 	bl	80005dc <__aeabi_dmul>
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	4614      	mov	r4, r2
 801001c:	461d      	mov	r5, r3
 801001e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010022:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010026:	f7f0 fad9 	bl	80005dc <__aeabi_dmul>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 f91d 	bl	8000270 <__adddf3>
 8010036:	4602      	mov	r2, r0
 8010038:	460b      	mov	r3, r1
 801003a:	ec43 2b17 	vmov	d7, r2, r3
 801003e:	eeb0 0a47 	vmov.f32	s0, s14
 8010042:	eef0 0a67 	vmov.f32	s1, s15
 8010046:	f00b fbbb 	bl	801b7c0 <sqrt>
 801004a:	ec53 2b10 	vmov	r2, r3, d0
 801004e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010052:	f7f0 fac3 	bl	80005dc <__aeabi_dmul>
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 801005e:	f04f 0200 	mov.w	r2, #0
 8010062:	f04f 0300 	mov.w	r3, #0
 8010066:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801006a:	f7f0 fd29 	bl	8000ac0 <__aeabi_dcmplt>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d005      	beq.n	8010080 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	633b      	str	r3, [r7, #48]	; 0x30
 8010078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801007e:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010086:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801008a:	f7f0 fbd1 	bl	8000830 <__aeabi_ddiv>
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	6879      	ldr	r1, [r7, #4]
 8010094:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801009e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80100a2:	f7f0 fbc5 	bl	8000830 <__aeabi_ddiv>
 80100a6:	4602      	mov	r2, r0
 80100a8:	460b      	mov	r3, r1
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 80100b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80100b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80100b8:	f7f0 fd20 	bl	8000afc <__aeabi_dcmpgt>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d006      	beq.n	80100d0 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c8:	68b9      	ldr	r1, [r7, #8]
 80100ca:	e9c1 2300 	strd	r2, r3, [r1]
 80100ce:	e01f      	b.n	8010110 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100d6:	f04f 0200 	mov.w	r2, #0
 80100da:	f04f 0300 	mov.w	r3, #0
 80100de:	f7f0 fce5 	bl	8000aac <__aeabi_dcmpeq>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10d      	bne.n	8010104 <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ee:	f04f 0000 	mov.w	r0, #0
 80100f2:	490c      	ldr	r1, [pc, #48]	; (8010124 <xrotg_XzIjz1eG+0x1f8>)
 80100f4:	f7f0 fb9c 	bl	8000830 <__aeabi_ddiv>
 80100f8:	4602      	mov	r2, r0
 80100fa:	460b      	mov	r3, r1
 80100fc:	68b9      	ldr	r1, [r7, #8]
 80100fe:	e9c1 2300 	strd	r2, r3, [r1]
 8010102:	e005      	b.n	8010110 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 8010104:	68b9      	ldr	r1, [r7, #8]
 8010106:	f04f 0200 	mov.w	r2, #0
 801010a:	4b06      	ldr	r3, [pc, #24]	; (8010124 <xrotg_XzIjz1eG+0x1f8>)
 801010c:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8010110:	68f9      	ldr	r1, [r7, #12]
 8010112:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010116:	e9c1 2300 	strd	r2, r3, [r1]
}
 801011a:	bf00      	nop
 801011c:	3740      	adds	r7, #64	; 0x40
 801011e:	46bd      	mov	sp, r7
 8010120:	bdb0      	pop	{r4, r5, r7, pc}
 8010122:	bf00      	nop
 8010124:	3ff00000 	.word	0x3ff00000

08010128 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 8010128:	b590      	push	{r4, r7, lr}
 801012a:	b089      	sub	sp, #36	; 0x24
 801012c:	af00      	add	r7, sp, #0
 801012e:	6178      	str	r0, [r7, #20]
 8010130:	ed87 0b02 	vstr	d0, [r7, #8]
 8010134:	6139      	str	r1, [r7, #16]
 8010136:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	4413      	add	r3, r2
 801013e:	3b01      	subs	r3, #1
 8010140:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	61fb      	str	r3, [r7, #28]
 8010146:	e01a      	b.n	801017e <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801014e:	3b01      	subs	r3, #1
 8010150:	00db      	lsls	r3, r3, #3
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	4413      	add	r3, r2
 8010156:	e9d3 0100 	ldrd	r0, r1, [r3]
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010160:	3b01      	subs	r3, #1
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	693a      	ldr	r2, [r7, #16]
 8010166:	18d4      	adds	r4, r2, r3
 8010168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801016c:	f7f0 fa36 	bl	80005dc <__aeabi_dmul>
 8010170:	4602      	mov	r2, r0
 8010172:	460b      	mov	r3, r1
 8010174:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	3301      	adds	r3, #1
 801017c:	61fb      	str	r3, [r7, #28]
 801017e:	69fa      	ldr	r2, [r7, #28]
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	429a      	cmp	r2, r3
 8010184:	dde0      	ble.n	8010148 <xscal_59GtRAwv+0x20>
  }
}
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	3724      	adds	r7, #36	; 0x24
 801018c:	46bd      	mov	sp, r7
 801018e:	bd90      	pop	{r4, r7, pc}

08010190 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 8010190:	b590      	push	{r4, r7, lr}
 8010192:	b089      	sub	sp, #36	; 0x24
 8010194:	af00      	add	r7, sp, #0
 8010196:	6178      	str	r0, [r7, #20]
 8010198:	ed87 0b02 	vstr	d0, [r7, #8]
 801019c:	6139      	str	r1, [r7, #16]
 801019e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	4413      	add	r3, r2
 80101a6:	3b01      	subs	r3, #1
 80101a8:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	61fb      	str	r3, [r7, #28]
 80101ae:	e01a      	b.n	80101e6 <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80101b6:	3b01      	subs	r3, #1
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	693a      	ldr	r2, [r7, #16]
 80101bc:	4413      	add	r3, r2
 80101be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80101c8:	3b01      	subs	r3, #1
 80101ca:	00db      	lsls	r3, r3, #3
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	18d4      	adds	r4, r2, r3
 80101d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80101d4:	f7f0 fa02 	bl	80005dc <__aeabi_dmul>
 80101d8:	4602      	mov	r2, r0
 80101da:	460b      	mov	r3, r1
 80101dc:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	3301      	adds	r3, #1
 80101e4:	61fb      	str	r3, [r7, #28]
 80101e6:	69fa      	ldr	r2, [r7, #28]
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	dde0      	ble.n	80101b0 <xscal_PLmmUlD2+0x20>
  }
}
 80101ee:	bf00      	nop
 80101f0:	bf00      	nop
 80101f2:	3724      	adds	r7, #36	; 0x24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd90      	pop	{r4, r7, pc}

080101f8 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 80101f8:	b590      	push	{r4, r7, lr}
 80101fa:	b087      	sub	sp, #28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	617b      	str	r3, [r7, #20]
 801020a:	e01a      	b.n	8010242 <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010212:	3b01      	subs	r3, #1
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	4413      	add	r3, r2
 801021a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010224:	3b01      	subs	r3, #1
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	18d4      	adds	r4, r2, r3
 801022c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010230:	f7f0 f9d4 	bl	80005dc <__aeabi_dmul>
 8010234:	4602      	mov	r2, r0
 8010236:	460b      	mov	r3, r1
 8010238:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	3301      	adds	r3, #1
 8010240:	617b      	str	r3, [r7, #20]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	3302      	adds	r3, #2
 8010246:	697a      	ldr	r2, [r7, #20]
 8010248:	429a      	cmp	r2, r3
 801024a:	dddf      	ble.n	801020c <xscal_eaAxXsvQ+0x14>
  }
}
 801024c:	bf00      	nop
 801024e:	bf00      	nop
 8010250:	371c      	adds	r7, #28
 8010252:	46bd      	mov	sp, r7
 8010254:	bd90      	pop	{r4, r7, pc}

08010256 <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 8010256:	b480      	push	{r7}
 8010258:	b087      	sub	sp, #28
 801025a:	af00      	add	r7, sp, #0
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010268:	3b01      	subs	r3, #1
 801026a:	00db      	lsls	r3, r3, #3
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	4413      	add	r3, r2
 8010270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010274:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801027e:	3b01      	subs	r3, #1
 8010280:	00db      	lsls	r3, r3, #3
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	441a      	add	r2, r3
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801028c:	3b01      	subs	r3, #1
 801028e:	00db      	lsls	r3, r3, #3
 8010290:	68f9      	ldr	r1, [r7, #12]
 8010292:	4419      	add	r1, r3
 8010294:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010298:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80102a2:	3b01      	subs	r3, #1
 80102a4:	00db      	lsls	r3, r3, #3
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	18d1      	adds	r1, r2, r3
 80102aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80102ae:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	00db      	lsls	r3, r3, #3
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	4413      	add	r3, r2
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	00db      	lsls	r3, r3, #3
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	4413      	add	r3, r2
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	00d2      	lsls	r2, r2, #3
 80102ce:	68f9      	ldr	r1, [r7, #12]
 80102d0:	4411      	add	r1, r2
 80102d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d6:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	00db      	lsls	r3, r3, #3
 80102de:	68fa      	ldr	r2, [r7, #12]
 80102e0:	18d1      	adds	r1, r2, r3
 80102e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80102e6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	3301      	adds	r3, #1
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	4413      	add	r3, r2
 80102f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	3301      	adds	r3, #1
 8010300:	00db      	lsls	r3, r3, #3
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	4413      	add	r3, r2
 8010306:	68ba      	ldr	r2, [r7, #8]
 8010308:	3201      	adds	r2, #1
 801030a:	00d2      	lsls	r2, r2, #3
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	4411      	add	r1, r2
 8010310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010314:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3301      	adds	r3, #1
 801031c:	00db      	lsls	r3, r3, #3
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	18d1      	adds	r1, r2, r3
 8010322:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010326:	e9c1 2300 	strd	r2, r3, [r1]
}
 801032a:	bf00      	nop
 801032c:	371c      	adds	r7, #28
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <ams_error>:

__weak uint8_t do_cell_balancing() {
   /* Type your actual code somewhere else */
}

__weak void ams_error() {
 8010336:	b480      	push	{r7}
 8010338:	af00      	add	r7, sp, #0
   /* Type your actual code somewhere else */
}
 801033a:	bf00      	nop
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <ams_precharge_drive_close_air_minus_function>:
static ams_state_t state_r2;
static float timer_r0;
static float timer_r1;
static float timer_r2;

ams_state_t ams_precharge_drive_close_air_minus_function() {
 8010344:	b480      	push	{r7}
 8010346:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_minus_closed) {
 8010348:	4b1f      	ldr	r3, [pc, #124]	; (80103c8 <ams_precharge_drive_close_air_minus_function+0x84>)
 801034a:	edd3 7a00 	vldr	s15, [r3]
 801034e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035a:	d510      	bpl.n	801037e <ams_precharge_drive_close_air_minus_function+0x3a>
 801035c:	4b1b      	ldr	r3, [pc, #108]	; (80103cc <ams_precharge_drive_close_air_minus_function+0x88>)
 801035e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00b      	beq.n	801037e <ams_precharge_drive_close_air_minus_function+0x3a>
       ams_outputs.close_precharge=1;
 8010366:	4b1a      	ldr	r3, [pc, #104]	; (80103d0 <ams_precharge_drive_close_air_minus_function+0x8c>)
 8010368:	2201      	movs	r2, #1
 801036a:	709a      	strb	r2, [r3, #2]
       ams_outputs.air_minus_closed_s=1;
 801036c:	4b18      	ldr	r3, [pc, #96]	; (80103d0 <ams_precharge_drive_close_air_minus_function+0x8c>)
 801036e:	2201      	movs	r2, #1
 8010370:	725a      	strb	r2, [r3, #9]
       timer_r2 = 0;
 8010372:	4b15      	ldr	r3, [pc, #84]	; (80103c8 <ams_precharge_drive_close_air_minus_function+0x84>)
 8010374:	f04f 0200 	mov.w	r2, #0
 8010378:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 801037a:	2304      	movs	r3, #4
 801037c:	e01e      	b.n	80103bc <ams_precharge_drive_close_air_minus_function+0x78>
   }

   if((timer_r2 > 2)) {
 801037e:	4b12      	ldr	r3, [pc, #72]	; (80103c8 <ams_precharge_drive_close_air_minus_function+0x84>)
 8010380:	edd3 7a00 	vldr	s15, [r3]
 8010384:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010388:	eef4 7ac7 	vcmpe.f32	s15, s14
 801038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010390:	dd08      	ble.n	80103a4 <ams_precharge_drive_close_air_minus_function+0x60>
       ams_outputs.error=111;
 8010392:	4b0f      	ldr	r3, [pc, #60]	; (80103d0 <ams_precharge_drive_close_air_minus_function+0x8c>)
 8010394:	226f      	movs	r2, #111	; 0x6f
 8010396:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010398:	4b0b      	ldr	r3, [pc, #44]	; (80103c8 <ams_precharge_drive_close_air_minus_function+0x84>)
 801039a:	f04f 0200 	mov.w	r2, #0
 801039e:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 80103a0:	2305      	movs	r3, #5
 80103a2:	e00b      	b.n	80103bc <ams_precharge_drive_close_air_minus_function+0x78>
   }

   timer_r2 += ams_inputs.Ts;
 80103a4:	4b09      	ldr	r3, [pc, #36]	; (80103cc <ams_precharge_drive_close_air_minus_function+0x88>)
 80103a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80103aa:	4b07      	ldr	r3, [pc, #28]	; (80103c8 <ams_precharge_drive_close_air_minus_function+0x84>)
 80103ac:	edd3 7a00 	vldr	s15, [r3]
 80103b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103b4:	4b04      	ldr	r3, [pc, #16]	; (80103c8 <ams_precharge_drive_close_air_minus_function+0x84>)
 80103b6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80103ba:	2303      	movs	r3, #3
}
 80103bc:	4618      	mov	r0, r3
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	200017fc 	.word	0x200017fc
 80103cc:	2001b6f8 	.word	0x2001b6f8
 80103d0:	2001b740 	.word	0x2001b740

080103d4 <ams_precharge_drive_close_precharge_function>:

ams_state_t ams_precharge_drive_close_precharge_function() {
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.precharge_closed) {
 80103d8:	4b1d      	ldr	r3, [pc, #116]	; (8010450 <ams_precharge_drive_close_precharge_function+0x7c>)
 80103da:	edd3 7a00 	vldr	s15, [r3]
 80103de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80103e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ea:	d50c      	bpl.n	8010406 <ams_precharge_drive_close_precharge_function+0x32>
 80103ec:	4b19      	ldr	r3, [pc, #100]	; (8010454 <ams_precharge_drive_close_precharge_function+0x80>)
 80103ee:	7f9b      	ldrb	r3, [r3, #30]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d008      	beq.n	8010406 <ams_precharge_drive_close_precharge_function+0x32>
       ams_outputs.precharge_closed_s=1;
 80103f4:	4b18      	ldr	r3, [pc, #96]	; (8010458 <ams_precharge_drive_close_precharge_function+0x84>)
 80103f6:	2201      	movs	r2, #1
 80103f8:	72da      	strb	r2, [r3, #11]
       timer_r2 = 0;
 80103fa:	4b15      	ldr	r3, [pc, #84]	; (8010450 <ams_precharge_drive_close_precharge_function+0x7c>)
 80103fc:	f04f 0200 	mov.w	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_WAIT;
 8010402:	2306      	movs	r3, #6
 8010404:	e01e      	b.n	8010444 <ams_precharge_drive_close_precharge_function+0x70>
   }

   if((timer_r2 > 2)) {
 8010406:	4b12      	ldr	r3, [pc, #72]	; (8010450 <ams_precharge_drive_close_precharge_function+0x7c>)
 8010408:	edd3 7a00 	vldr	s15, [r3]
 801040c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	dd08      	ble.n	801042c <ams_precharge_drive_close_precharge_function+0x58>
       ams_outputs.error=112;
 801041a:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <ams_precharge_drive_close_precharge_function+0x84>)
 801041c:	2270      	movs	r2, #112	; 0x70
 801041e:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010420:	4b0b      	ldr	r3, [pc, #44]	; (8010450 <ams_precharge_drive_close_precharge_function+0x7c>)
 8010422:	f04f 0200 	mov.w	r2, #0
 8010426:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010428:	2305      	movs	r3, #5
 801042a:	e00b      	b.n	8010444 <ams_precharge_drive_close_precharge_function+0x70>
   }

   timer_r2 += ams_inputs.Ts;
 801042c:	4b09      	ldr	r3, [pc, #36]	; (8010454 <ams_precharge_drive_close_precharge_function+0x80>)
 801042e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010432:	4b07      	ldr	r3, [pc, #28]	; (8010450 <ams_precharge_drive_close_precharge_function+0x7c>)
 8010434:	edd3 7a00 	vldr	s15, [r3]
 8010438:	ee77 7a27 	vadd.f32	s15, s14, s15
 801043c:	4b04      	ldr	r3, [pc, #16]	; (8010450 <ams_precharge_drive_close_precharge_function+0x7c>)
 801043e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE;
 8010442:	2304      	movs	r3, #4
}
 8010444:	4618      	mov	r0, r3
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	200017fc 	.word	0x200017fc
 8010454:	2001b6f8 	.word	0x2001b6f8
 8010458:	2001b740 	.word	0x2001b740

0801045c <ams_precharge_drive_error_function>:

ams_state_t ams_precharge_drive_error_function() {
 801045c:	b480      	push	{r7}
 801045e:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8010460:	4b08      	ldr	r3, [pc, #32]	; (8010484 <ams_precharge_drive_error_function+0x28>)
 8010462:	ed93 7a06 	vldr	s14, [r3, #24]
 8010466:	4b08      	ldr	r3, [pc, #32]	; (8010488 <ams_precharge_drive_error_function+0x2c>)
 8010468:	edd3 7a00 	vldr	s15, [r3]
 801046c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010470:	4b05      	ldr	r3, [pc, #20]	; (8010488 <ams_precharge_drive_error_function+0x2c>)
 8010472:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010476:	2305      	movs	r3, #5
}
 8010478:	4618      	mov	r0, r3
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	2001b6f8 	.word	0x2001b6f8
 8010488:	200017fc 	.word	0x200017fc
 801048c:	00000000 	.word	0x00000000

08010490 <ams_precharge_drive_wait_function>:

ams_state_t ams_precharge_drive_wait_function() {
 8010490:	b580      	push	{r7, lr}
 8010492:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)&&(timer_r2 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8010494:	4b2a      	ldr	r3, [pc, #168]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 8010496:	edd3 7a00 	vldr	s15, [r3]
 801049a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801049e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a6:	dd26      	ble.n	80104f6 <ams_precharge_drive_wait_function+0x66>
 80104a8:	4b25      	ldr	r3, [pc, #148]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 80104aa:	edd3 7a00 	vldr	s15, [r3]
 80104ae:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80104b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ba:	d51c      	bpl.n	80104f6 <ams_precharge_drive_wait_function+0x66>
 80104bc:	4b21      	ldr	r3, [pc, #132]	; (8010544 <ams_precharge_drive_wait_function+0xb4>)
 80104be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104c2:	a31d      	add	r3, pc, #116	; (adr r3, 8010538 <ams_precharge_drive_wait_function+0xa8>)
 80104c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c8:	f7f0 f888 	bl	80005dc <__aeabi_dmul>
 80104cc:	4602      	mov	r2, r0
 80104ce:	460b      	mov	r3, r1
 80104d0:	4610      	mov	r0, r2
 80104d2:	4619      	mov	r1, r3
 80104d4:	4b1b      	ldr	r3, [pc, #108]	; (8010544 <ams_precharge_drive_wait_function+0xb4>)
 80104d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104da:	f7f0 faf1 	bl	8000ac0 <__aeabi_dcmplt>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d008      	beq.n	80104f6 <ams_precharge_drive_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 80104e4:	4b18      	ldr	r3, [pc, #96]	; (8010548 <ams_precharge_drive_wait_function+0xb8>)
 80104e6:	2201      	movs	r2, #1
 80104e8:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 80104ea:	4b15      	ldr	r3, [pc, #84]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 80104ec:	f04f 0200 	mov.w	r2, #0
 80104f0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 80104f2:	2307      	movs	r3, #7
 80104f4:	e01e      	b.n	8010534 <ams_precharge_drive_wait_function+0xa4>
   }

   if((timer_r2 > 30)) {
 80104f6:	4b12      	ldr	r3, [pc, #72]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 80104f8:	edd3 7a00 	vldr	s15, [r3]
 80104fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010508:	dd08      	ble.n	801051c <ams_precharge_drive_wait_function+0x8c>
       ams_outputs.error=113;
 801050a:	4b0f      	ldr	r3, [pc, #60]	; (8010548 <ams_precharge_drive_wait_function+0xb8>)
 801050c:	2271      	movs	r2, #113	; 0x71
 801050e:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010510:	4b0b      	ldr	r3, [pc, #44]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 8010512:	f04f 0200 	mov.w	r2, #0
 8010516:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010518:	2305      	movs	r3, #5
 801051a:	e00b      	b.n	8010534 <ams_precharge_drive_wait_function+0xa4>
   }

   timer_r2 += ams_inputs.Ts;
 801051c:	4b09      	ldr	r3, [pc, #36]	; (8010544 <ams_precharge_drive_wait_function+0xb4>)
 801051e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010522:	4b07      	ldr	r3, [pc, #28]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 8010524:	edd3 7a00 	vldr	s15, [r3]
 8010528:	ee77 7a27 	vadd.f32	s15, s14, s15
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <ams_precharge_drive_wait_function+0xb0>)
 801052e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_WAIT;
 8010532:	2306      	movs	r3, #6
}
 8010534:	4618      	mov	r0, r3
 8010536:	bd80      	pop	{r7, pc}
 8010538:	66666666 	.word	0x66666666
 801053c:	3fee6666 	.word	0x3fee6666
 8010540:	200017fc 	.word	0x200017fc
 8010544:	2001b6f8 	.word	0x2001b6f8
 8010548:	2001b740 	.word	0x2001b740

0801054c <ams_precharge_drive_close_air_plus_function>:

ams_state_t ams_precharge_drive_close_air_plus_function() {
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_plus_closed) {
 8010550:	4b1f      	ldr	r3, [pc, #124]	; (80105d0 <ams_precharge_drive_close_air_plus_function+0x84>)
 8010552:	edd3 7a00 	vldr	s15, [r3]
 8010556:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801055a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801055e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010562:	d510      	bpl.n	8010586 <ams_precharge_drive_close_air_plus_function+0x3a>
 8010564:	4b1b      	ldr	r3, [pc, #108]	; (80105d4 <ams_precharge_drive_close_air_plus_function+0x88>)
 8010566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00b      	beq.n	8010586 <ams_precharge_drive_close_air_plus_function+0x3a>
       ams_outputs.close_precharge=0;
 801056e:	4b1a      	ldr	r3, [pc, #104]	; (80105d8 <ams_precharge_drive_close_air_plus_function+0x8c>)
 8010570:	2200      	movs	r2, #0
 8010572:	709a      	strb	r2, [r3, #2]
       ams_outputs.air_plus_closed_s=1;
 8010574:	4b18      	ldr	r3, [pc, #96]	; (80105d8 <ams_precharge_drive_close_air_plus_function+0x8c>)
 8010576:	2201      	movs	r2, #1
 8010578:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 801057a:	4b15      	ldr	r3, [pc, #84]	; (80105d0 <ams_precharge_drive_close_air_plus_function+0x84>)
 801057c:	f04f 0200 	mov.w	r2, #0
 8010580:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8010582:	2308      	movs	r3, #8
 8010584:	e01e      	b.n	80105c4 <ams_precharge_drive_close_air_plus_function+0x78>
   }

   if((timer_r2 > 2)) {
 8010586:	4b12      	ldr	r3, [pc, #72]	; (80105d0 <ams_precharge_drive_close_air_plus_function+0x84>)
 8010588:	edd3 7a00 	vldr	s15, [r3]
 801058c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010598:	dd08      	ble.n	80105ac <ams_precharge_drive_close_air_plus_function+0x60>
       ams_outputs.error=114;
 801059a:	4b0f      	ldr	r3, [pc, #60]	; (80105d8 <ams_precharge_drive_close_air_plus_function+0x8c>)
 801059c:	2272      	movs	r2, #114	; 0x72
 801059e:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 80105a0:	4b0b      	ldr	r3, [pc, #44]	; (80105d0 <ams_precharge_drive_close_air_plus_function+0x84>)
 80105a2:	f04f 0200 	mov.w	r2, #0
 80105a6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 80105a8:	2305      	movs	r3, #5
 80105aa:	e00b      	b.n	80105c4 <ams_precharge_drive_close_air_plus_function+0x78>
   }

   timer_r2 += ams_inputs.Ts;
 80105ac:	4b09      	ldr	r3, [pc, #36]	; (80105d4 <ams_precharge_drive_close_air_plus_function+0x88>)
 80105ae:	ed93 7a06 	vldr	s14, [r3, #24]
 80105b2:	4b07      	ldr	r3, [pc, #28]	; (80105d0 <ams_precharge_drive_close_air_plus_function+0x84>)
 80105b4:	edd3 7a00 	vldr	s15, [r3]
 80105b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105bc:	4b04      	ldr	r3, [pc, #16]	; (80105d0 <ams_precharge_drive_close_air_plus_function+0x84>)
 80105be:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS;
 80105c2:	2307      	movs	r3, #7
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop
 80105d0:	200017fc 	.word	0x200017fc
 80105d4:	2001b6f8 	.word	0x2001b6f8
 80105d8:	2001b740 	.word	0x2001b740

080105dc <ams_precharge_drive_open_precharge_function>:

ams_state_t ams_precharge_drive_open_precharge_function() {
 80105dc:	b480      	push	{r7}
 80105de:	af00      	add	r7, sp, #0
   if((timer_r2 > 2)) {
 80105e0:	4b1e      	ldr	r3, [pc, #120]	; (801065c <ams_precharge_drive_open_precharge_function+0x80>)
 80105e2:	edd3 7a00 	vldr	s15, [r3]
 80105e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80105ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80105ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f2:	dd08      	ble.n	8010606 <ams_precharge_drive_open_precharge_function+0x2a>
       ams_outputs.error=115;
 80105f4:	4b1a      	ldr	r3, [pc, #104]	; (8010660 <ams_precharge_drive_open_precharge_function+0x84>)
 80105f6:	2273      	movs	r2, #115	; 0x73
 80105f8:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 80105fa:	4b18      	ldr	r3, [pc, #96]	; (801065c <ams_precharge_drive_open_precharge_function+0x80>)
 80105fc:	f04f 0200 	mov.w	r2, #0
 8010600:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ERROR;
 8010602:	2305      	movs	r3, #5
 8010604:	e025      	b.n	8010652 <ams_precharge_drive_open_precharge_function+0x76>
   }

   if((timer_r2 < 2)&&!ams_inputs.precharge_closed) {
 8010606:	4b15      	ldr	r3, [pc, #84]	; (801065c <ams_precharge_drive_open_precharge_function+0x80>)
 8010608:	edd3 7a00 	vldr	s15, [r3]
 801060c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010618:	d50f      	bpl.n	801063a <ams_precharge_drive_open_precharge_function+0x5e>
 801061a:	4b12      	ldr	r3, [pc, #72]	; (8010664 <ams_precharge_drive_open_precharge_function+0x88>)
 801061c:	7f9b      	ldrb	r3, [r3, #30]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10b      	bne.n	801063a <ams_precharge_drive_open_precharge_function+0x5e>
       ams_outputs.precharge_drive_complete=1;
 8010622:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <ams_precharge_drive_open_precharge_function+0x84>)
 8010624:	2201      	movs	r2, #1
 8010626:	711a      	strb	r2, [r3, #4]
       ams_outputs.precharge_closed_s=0;
 8010628:	4b0d      	ldr	r3, [pc, #52]	; (8010660 <ams_precharge_drive_open_precharge_function+0x84>)
 801062a:	2200      	movs	r2, #0
 801062c:	72da      	strb	r2, [r3, #11]
       timer_r2 = 0;
 801062e:	4b0b      	ldr	r3, [pc, #44]	; (801065c <ams_precharge_drive_open_precharge_function+0x80>)
 8010630:	f04f 0200 	mov.w	r2, #0
 8010634:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_EXIT;
 8010636:	2309      	movs	r3, #9
 8010638:	e00b      	b.n	8010652 <ams_precharge_drive_open_precharge_function+0x76>
   }

   timer_r2 += ams_inputs.Ts;
 801063a:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <ams_precharge_drive_open_precharge_function+0x88>)
 801063c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010640:	4b06      	ldr	r3, [pc, #24]	; (801065c <ams_precharge_drive_open_precharge_function+0x80>)
 8010642:	edd3 7a00 	vldr	s15, [r3]
 8010646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801064a:	4b04      	ldr	r3, [pc, #16]	; (801065c <ams_precharge_drive_open_precharge_function+0x80>)
 801064c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE;
 8010650:	2308      	movs	r3, #8
}
 8010652:	4618      	mov	r0, r3
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	200017fc 	.word	0x200017fc
 8010660:	2001b740 	.word	0x2001b740
 8010664:	2001b6f8 	.word	0x2001b6f8

08010668 <ams_precharge_drive_exit_function>:

ams_state_t ams_precharge_drive_exit_function() {
 8010668:	b480      	push	{r7}
 801066a:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 801066c:	4b08      	ldr	r3, [pc, #32]	; (8010690 <ams_precharge_drive_exit_function+0x28>)
 801066e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010672:	4b08      	ldr	r3, [pc, #32]	; (8010694 <ams_precharge_drive_exit_function+0x2c>)
 8010674:	edd3 7a00 	vldr	s15, [r3]
 8010678:	ee77 7a27 	vadd.f32	s15, s14, s15
 801067c:	4b05      	ldr	r3, [pc, #20]	; (8010694 <ams_precharge_drive_exit_function+0x2c>)
 801067e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE_EXIT;
 8010682:	2309      	movs	r3, #9
}
 8010684:	4618      	mov	r0, r3
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	2001b6f8 	.word	0x2001b6f8
 8010694:	200017fc 	.word	0x200017fc

08010698 <ams_precharge_drive_0_function>:

ams_state_t ams_precharge_drive_0_function() {
 8010698:	b480      	push	{r7}
 801069a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 801069c:	4b04      	ldr	r3, [pc, #16]	; (80106b0 <ams_precharge_drive_0_function+0x18>)
 801069e:	f04f 0200 	mov.w	r2, #0
 80106a2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_ENTRY;
 80106a4:	230b      	movs	r3, #11
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_PRECHARGE_DRIVE_0;
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	200017fc 	.word	0x200017fc

080106b4 <ams_precharge_drive_entry_function>:

ams_state_t ams_precharge_drive_entry_function() {
 80106b4:	b480      	push	{r7}
 80106b6:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_minus=1;
 80106b8:	4b06      	ldr	r3, [pc, #24]	; (80106d4 <ams_precharge_drive_entry_function+0x20>)
 80106ba:	2201      	movs	r2, #1
 80106bc:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 80106be:	4b06      	ldr	r3, [pc, #24]	; (80106d8 <ams_precharge_drive_entry_function+0x24>)
 80106c0:	f04f 0200 	mov.w	r2, #0
 80106c4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS;
 80106c6:	2303      	movs	r3, #3
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_PRECHARGE_DRIVE_ENTRY;
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	2001b740 	.word	0x2001b740
 80106d8:	200017fc 	.word	0x200017fc
 80106dc:	00000000 	.word	0x00000000

080106e0 <ams_precharge_drive_function>:

ams_state_t ams_precharge_drive_function() {
 80106e0:	b5b0      	push	{r4, r5, r7, lr}
 80106e2:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 80106e4:	4b56      	ldr	r3, [pc, #344]	; (8010840 <ams_precharge_drive_function+0x160>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ef ff1f 	bl	800052c <__aeabi_f2d>
 80106ee:	4604      	mov	r4, r0
 80106f0:	460d      	mov	r5, r1
 80106f2:	4b54      	ldr	r3, [pc, #336]	; (8010844 <ams_precharge_drive_function+0x164>)
 80106f4:	699b      	ldr	r3, [r3, #24]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ef ff18 	bl	800052c <__aeabi_f2d>
 80106fc:	a34e      	add	r3, pc, #312	; (adr r3, 8010838 <ams_precharge_drive_function+0x158>)
 80106fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010702:	f7ef ff6b 	bl	80005dc <__aeabi_dmul>
 8010706:	4602      	mov	r2, r0
 8010708:	460b      	mov	r3, r1
 801070a:	4620      	mov	r0, r4
 801070c:	4629      	mov	r1, r5
 801070e:	f7f0 f9d7 	bl	8000ac0 <__aeabi_dcmplt>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <ams_precharge_drive_function+0x3e>
       state_r2 = STATE_AMS_PRECHARGE_DRIVE_0;
 8010718:	4b4b      	ldr	r3, [pc, #300]	; (8010848 <ams_precharge_drive_function+0x168>)
 801071a:	220a      	movs	r2, #10
 801071c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 801071e:	4b4a      	ldr	r3, [pc, #296]	; (8010848 <ams_precharge_drive_function+0x168>)
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	3b03      	subs	r3, #3
 8010724:	2b08      	cmp	r3, #8
 8010726:	d854      	bhi.n	80107d2 <ams_precharge_drive_function+0xf2>
 8010728:	a201      	add	r2, pc, #4	; (adr r2, 8010730 <ams_precharge_drive_function+0x50>)
 801072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801072e:	bf00      	nop
 8010730:	08010755 	.word	0x08010755
 8010734:	08010763 	.word	0x08010763
 8010738:	08010771 	.word	0x08010771
 801073c:	0801077f 	.word	0x0801077f
 8010740:	0801078d 	.word	0x0801078d
 8010744:	0801079b 	.word	0x0801079b
 8010748:	080107a9 	.word	0x080107a9
 801074c:	080107b7 	.word	0x080107b7
 8010750:	080107c5 	.word	0x080107c5
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_MINUS:
           state_r2 = ams_precharge_drive_close_air_minus_function();
 8010754:	f7ff fdf6 	bl	8010344 <ams_precharge_drive_close_air_minus_function>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	4b3a      	ldr	r3, [pc, #232]	; (8010848 <ams_precharge_drive_function+0x168>)
 801075e:	701a      	strb	r2, [r3, #0]
           break;
 8010760:	e03a      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_PRECHARGE:
           state_r2 = ams_precharge_drive_close_precharge_function();
 8010762:	f7ff fe37 	bl	80103d4 <ams_precharge_drive_close_precharge_function>
 8010766:	4603      	mov	r3, r0
 8010768:	461a      	mov	r2, r3
 801076a:	4b37      	ldr	r3, [pc, #220]	; (8010848 <ams_precharge_drive_function+0x168>)
 801076c:	701a      	strb	r2, [r3, #0]
           break;
 801076e:	e033      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_ERROR:
           state_r2 = ams_precharge_drive_error_function();
 8010770:	f7ff fe74 	bl	801045c <ams_precharge_drive_error_function>
 8010774:	4603      	mov	r3, r0
 8010776:	461a      	mov	r2, r3
 8010778:	4b33      	ldr	r3, [pc, #204]	; (8010848 <ams_precharge_drive_function+0x168>)
 801077a:	701a      	strb	r2, [r3, #0]
           break;
 801077c:	e02c      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_WAIT:
           state_r2 = ams_precharge_drive_wait_function();
 801077e:	f7ff fe87 	bl	8010490 <ams_precharge_drive_wait_function>
 8010782:	4603      	mov	r3, r0
 8010784:	461a      	mov	r2, r3
 8010786:	4b30      	ldr	r3, [pc, #192]	; (8010848 <ams_precharge_drive_function+0x168>)
 8010788:	701a      	strb	r2, [r3, #0]
           break;
 801078a:	e025      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_CLOSE_AIR_PLUS:
           state_r2 = ams_precharge_drive_close_air_plus_function();
 801078c:	f7ff fede 	bl	801054c <ams_precharge_drive_close_air_plus_function>
 8010790:	4603      	mov	r3, r0
 8010792:	461a      	mov	r2, r3
 8010794:	4b2c      	ldr	r3, [pc, #176]	; (8010848 <ams_precharge_drive_function+0x168>)
 8010796:	701a      	strb	r2, [r3, #0]
           break;
 8010798:	e01e      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_OPEN_PRECHARGE:
           state_r2 = ams_precharge_drive_open_precharge_function();
 801079a:	f7ff ff1f 	bl	80105dc <ams_precharge_drive_open_precharge_function>
 801079e:	4603      	mov	r3, r0
 80107a0:	461a      	mov	r2, r3
 80107a2:	4b29      	ldr	r3, [pc, #164]	; (8010848 <ams_precharge_drive_function+0x168>)
 80107a4:	701a      	strb	r2, [r3, #0]
           break;
 80107a6:	e017      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_EXIT:
           state_r2 = ams_precharge_drive_exit_function();
 80107a8:	f7ff ff5e 	bl	8010668 <ams_precharge_drive_exit_function>
 80107ac:	4603      	mov	r3, r0
 80107ae:	461a      	mov	r2, r3
 80107b0:	4b25      	ldr	r3, [pc, #148]	; (8010848 <ams_precharge_drive_function+0x168>)
 80107b2:	701a      	strb	r2, [r3, #0]
           break;
 80107b4:	e010      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_0:
           state_r2 = ams_precharge_drive_0_function();
 80107b6:	f7ff ff6f 	bl	8010698 <ams_precharge_drive_0_function>
 80107ba:	4603      	mov	r3, r0
 80107bc:	461a      	mov	r2, r3
 80107be:	4b22      	ldr	r3, [pc, #136]	; (8010848 <ams_precharge_drive_function+0x168>)
 80107c0:	701a      	strb	r2, [r3, #0]
           break;
 80107c2:	e009      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       case STATE_AMS_PRECHARGE_DRIVE_ENTRY:
           state_r2 = ams_precharge_drive_entry_function();
 80107c4:	f7ff ff76 	bl	80106b4 <ams_precharge_drive_entry_function>
 80107c8:	4603      	mov	r3, r0
 80107ca:	461a      	mov	r2, r3
 80107cc:	4b1e      	ldr	r3, [pc, #120]	; (8010848 <ams_precharge_drive_function+0x168>)
 80107ce:	701a      	strb	r2, [r3, #0]
           break;
 80107d0:	e002      	b.n	80107d8 <ams_precharge_drive_function+0xf8>
       default:
           ams_error();
 80107d2:	f7ff fdb0 	bl	8010336 <ams_error>
           break;
 80107d6:	bf00      	nop
   }

   if(ams_outputs.precharge_drive_complete) {
 80107d8:	4b1c      	ldr	r3, [pc, #112]	; (801084c <ams_precharge_drive_function+0x16c>)
 80107da:	791b      	ldrb	r3, [r3, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d008      	beq.n	80107f2 <ams_precharge_drive_function+0x112>
       ams_outputs.precharge_drive_complete=0;
 80107e0:	4b1a      	ldr	r3, [pc, #104]	; (801084c <ams_precharge_drive_function+0x16c>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	711a      	strb	r2, [r3, #4]
       timer_r1 = 0;
 80107e6:	4b16      	ldr	r3, [pc, #88]	; (8010840 <ams_precharge_drive_function+0x160>)
 80107e8:	f04f 0200 	mov.w	r2, #0
 80107ec:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE;
 80107ee:	230c      	movs	r3, #12
 80107f0:	e01e      	b.n	8010830 <ams_precharge_drive_function+0x150>
   }

   if(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 80107f2:	4b16      	ldr	r3, [pc, #88]	; (801084c <ams_precharge_drive_function+0x16c>)
 80107f4:	78db      	ldrb	r3, [r3, #3]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d108      	bne.n	801080c <ams_precharge_drive_function+0x12c>
 80107fa:	4b12      	ldr	r3, [pc, #72]	; (8010844 <ams_precharge_drive_function+0x164>)
 80107fc:	7f5b      	ldrb	r3, [r3, #29]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d104      	bne.n	801080c <ams_precharge_drive_function+0x12c>
 8010802:	4b10      	ldr	r3, [pc, #64]	; (8010844 <ams_precharge_drive_function+0x164>)
 8010804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010808:	2b00      	cmp	r3, #0
 801080a:	d005      	beq.n	8010818 <ams_precharge_drive_function+0x138>
       timer_r1 = 0;
 801080c:	4b0c      	ldr	r3, [pc, #48]	; (8010840 <ams_precharge_drive_function+0x160>)
 801080e:	f04f 0200 	mov.w	r2, #0
 8010812:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8010814:	2312      	movs	r3, #18
 8010816:	e00b      	b.n	8010830 <ams_precharge_drive_function+0x150>
   }


   timer_r1 += ams_inputs.Ts;
 8010818:	4b0a      	ldr	r3, [pc, #40]	; (8010844 <ams_precharge_drive_function+0x164>)
 801081a:	ed93 7a06 	vldr	s14, [r3, #24]
 801081e:	4b08      	ldr	r3, [pc, #32]	; (8010840 <ams_precharge_drive_function+0x160>)
 8010820:	edd3 7a00 	vldr	s15, [r3]
 8010824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010828:	4b05      	ldr	r3, [pc, #20]	; (8010840 <ams_precharge_drive_function+0x160>)
 801082a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_DRIVE;
 801082e:	2302      	movs	r3, #2
}
 8010830:	4618      	mov	r0, r3
 8010832:	bdb0      	pop	{r4, r5, r7, pc}
 8010834:	f3af 8000 	nop.w
 8010838:	d2f1a9fc 	.word	0xd2f1a9fc
 801083c:	3f50624d 	.word	0x3f50624d
 8010840:	200017f8 	.word	0x200017f8
 8010844:	2001b6f8 	.word	0x2001b6f8
 8010848:	200017f2 	.word	0x200017f2
 801084c:	2001b740 	.word	0x2001b740

08010850 <ams_drive_0_function>:

ams_state_t ams_drive_0_function() {
 8010850:	b480      	push	{r7}
 8010852:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8010854:	4b04      	ldr	r3, [pc, #16]	; (8010868 <ams_drive_0_function+0x18>)
 8010856:	f04f 0200 	mov.w	r2, #0
 801085a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_DRIVE;
 801085c:	230e      	movs	r3, #14
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_DRIVE_0;
}
 801085e:	4618      	mov	r0, r3
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	200017fc 	.word	0x200017fc
 801086c:	00000000 	.word	0x00000000

08010870 <ams_drive_drive_function>:

ams_state_t ams_drive_drive_function() {
 8010870:	b580      	push	{r7, lr}
 8010872:	af00      	add	r7, sp, #0
   if((ams_inputs.minimum_cell_voltage<2.85)||!ams_inputs.drive) {
 8010874:	4b14      	ldr	r3, [pc, #80]	; (80108c8 <ams_drive_drive_function+0x58>)
 8010876:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 801087a:	a311      	add	r3, pc, #68	; (adr r3, 80108c0 <ams_drive_drive_function+0x50>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	f7f0 f91e 	bl	8000ac0 <__aeabi_dcmplt>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d104      	bne.n	8010894 <ams_drive_drive_function+0x24>
 801088a:	4b0f      	ldr	r3, [pc, #60]	; (80108c8 <ams_drive_drive_function+0x58>)
 801088c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010890:	2b00      	cmp	r3, #0
 8010892:	d105      	bne.n	80108a0 <ams_drive_drive_function+0x30>
       timer_r2 = 0;
 8010894:	4b0d      	ldr	r3, [pc, #52]	; (80108cc <ams_drive_drive_function+0x5c>)
 8010896:	f04f 0200 	mov.w	r2, #0
 801089a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_END_DRIVE;
 801089c:	230f      	movs	r3, #15
 801089e:	e00b      	b.n	80108b8 <ams_drive_drive_function+0x48>
   }

   timer_r2 += ams_inputs.Ts;
 80108a0:	4b09      	ldr	r3, [pc, #36]	; (80108c8 <ams_drive_drive_function+0x58>)
 80108a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80108a6:	4b09      	ldr	r3, [pc, #36]	; (80108cc <ams_drive_drive_function+0x5c>)
 80108a8:	edd3 7a00 	vldr	s15, [r3]
 80108ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108b0:	4b06      	ldr	r3, [pc, #24]	; (80108cc <ams_drive_drive_function+0x5c>)
 80108b2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_DRIVE;
 80108b6:	230e      	movs	r3, #14
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	f3af 8000 	nop.w
 80108c0:	cccccccd 	.word	0xcccccccd
 80108c4:	4006cccc 	.word	0x4006cccc
 80108c8:	2001b6f8 	.word	0x2001b6f8
 80108cc:	200017fc 	.word	0x200017fc

080108d0 <ams_drive_end_drive_function>:

ams_state_t ams_drive_end_drive_function() {
 80108d0:	b580      	push	{r7, lr}
 80108d2:	af00      	add	r7, sp, #0
   if((timer_r2 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 80108d4:	4b3a      	ldr	r3, [pc, #232]	; (80109c0 <ams_drive_end_drive_function+0xf0>)
 80108d6:	edd3 7a00 	vldr	s15, [r3]
 80108da:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80108de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e6:	d531      	bpl.n	801094c <ams_drive_end_drive_function+0x7c>
 80108e8:	4b36      	ldr	r3, [pc, #216]	; (80109c4 <ams_drive_end_drive_function+0xf4>)
 80108ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80108ee:	4610      	mov	r0, r2
 80108f0:	4619      	mov	r1, r3
 80108f2:	f7f0 f96b 	bl	8000bcc <__aeabi_d2f>
 80108f6:	ee07 0a90 	vmov	s15, r0
 80108fa:	eef0 7ae7 	vabs.f32	s15, s15
 80108fe:	ee17 0a90 	vmov	r0, s15
 8010902:	f7ef fe13 	bl	800052c <__aeabi_f2d>
 8010906:	a32c      	add	r3, pc, #176	; (adr r3, 80109b8 <ams_drive_end_drive_function+0xe8>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7f0 f8d8 	bl	8000ac0 <__aeabi_dcmplt>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d01a      	beq.n	801094c <ams_drive_end_drive_function+0x7c>
       ams_outputs.close_air_plus=0;
 8010916:	4b2c      	ldr	r3, [pc, #176]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010918:	2200      	movs	r2, #0
 801091a:	701a      	strb	r2, [r3, #0]
       ams_outputs.air_plus_closed_s=0;
 801091c:	4b2a      	ldr	r3, [pc, #168]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 801091e:	2200      	movs	r2, #0
 8010920:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_air_minus=0;
 8010922:	4b29      	ldr	r3, [pc, #164]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010924:	2200      	movs	r2, #0
 8010926:	705a      	strb	r2, [r3, #1]
       ams_outputs.air_minus_closed_s=0;
 8010928:	4b27      	ldr	r3, [pc, #156]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 801092a:	2200      	movs	r2, #0
 801092c:	725a      	strb	r2, [r3, #9]
       ams_outputs.close_precharge=0;
 801092e:	4b26      	ldr	r3, [pc, #152]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010930:	2200      	movs	r2, #0
 8010932:	709a      	strb	r2, [r3, #2]
       ams_outputs.precharge_closed_s=0;
 8010934:	4b24      	ldr	r3, [pc, #144]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010936:	2200      	movs	r2, #0
 8010938:	72da      	strb	r2, [r3, #11]
       ams_outputs.drive_complete=1;
 801093a:	4b23      	ldr	r3, [pc, #140]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 801093c:	2201      	movs	r2, #1
 801093e:	71da      	strb	r2, [r3, #7]
       timer_r2 = 0;
 8010940:	4b1f      	ldr	r3, [pc, #124]	; (80109c0 <ams_drive_end_drive_function+0xf0>)
 8010942:	f04f 0200 	mov.w	r2, #0
 8010946:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_EXIT;
 8010948:	2310      	movs	r3, #16
 801094a:	e030      	b.n	80109ae <ams_drive_end_drive_function+0xde>
   }

   if((timer_r2 > 7)) {
 801094c:	4b1c      	ldr	r3, [pc, #112]	; (80109c0 <ams_drive_end_drive_function+0xf0>)
 801094e:	edd3 7a00 	vldr	s15, [r3]
 8010952:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8010956:	eef4 7ac7 	vcmpe.f32	s15, s14
 801095a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095e:	dd1a      	ble.n	8010996 <ams_drive_end_drive_function+0xc6>
       ams_outputs.close_air_plus=0;
 8010960:	4b19      	ldr	r3, [pc, #100]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010962:	2200      	movs	r2, #0
 8010964:	701a      	strb	r2, [r3, #0]
       ams_outputs.air_plus_closed_s=0;
 8010966:	4b18      	ldr	r3, [pc, #96]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010968:	2200      	movs	r2, #0
 801096a:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_air_minus=0;
 801096c:	4b16      	ldr	r3, [pc, #88]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 801096e:	2200      	movs	r2, #0
 8010970:	705a      	strb	r2, [r3, #1]
       ams_outputs.air_minus_closed_s=0;
 8010972:	4b15      	ldr	r3, [pc, #84]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010974:	2200      	movs	r2, #0
 8010976:	725a      	strb	r2, [r3, #9]
       ams_outputs.close_precharge=0;
 8010978:	4b13      	ldr	r3, [pc, #76]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 801097a:	2200      	movs	r2, #0
 801097c:	709a      	strb	r2, [r3, #2]
       ams_outputs.precharge_closed_s=0;
 801097e:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010980:	2200      	movs	r2, #0
 8010982:	72da      	strb	r2, [r3, #11]
       ams_outputs.error=131;
 8010984:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <ams_drive_end_drive_function+0xf8>)
 8010986:	2283      	movs	r2, #131	; 0x83
 8010988:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 801098a:	4b0d      	ldr	r3, [pc, #52]	; (80109c0 <ams_drive_end_drive_function+0xf0>)
 801098c:	f04f 0200 	mov.w	r2, #0
 8010990:	601a      	str	r2, [r3, #0]
       return STATE_AMS_DRIVE_FORCE_QUIT;
 8010992:	2311      	movs	r3, #17
 8010994:	e00b      	b.n	80109ae <ams_drive_end_drive_function+0xde>
   }

   timer_r2 += ams_inputs.Ts;
 8010996:	4b0b      	ldr	r3, [pc, #44]	; (80109c4 <ams_drive_end_drive_function+0xf4>)
 8010998:	ed93 7a06 	vldr	s14, [r3, #24]
 801099c:	4b08      	ldr	r3, [pc, #32]	; (80109c0 <ams_drive_end_drive_function+0xf0>)
 801099e:	edd3 7a00 	vldr	s15, [r3]
 80109a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109a6:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <ams_drive_end_drive_function+0xf0>)
 80109a8:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_END_DRIVE;
 80109ac:	230f      	movs	r3, #15
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	f3af 8000 	nop.w
 80109b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80109bc:	3f50624d 	.word	0x3f50624d
 80109c0:	200017fc 	.word	0x200017fc
 80109c4:	2001b6f8 	.word	0x2001b6f8
 80109c8:	2001b740 	.word	0x2001b740

080109cc <ams_drive_exit_function>:

ams_state_t ams_drive_exit_function() {
 80109cc:	b480      	push	{r7}
 80109ce:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 80109d0:	4b08      	ldr	r3, [pc, #32]	; (80109f4 <ams_drive_exit_function+0x28>)
 80109d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80109d6:	4b08      	ldr	r3, [pc, #32]	; (80109f8 <ams_drive_exit_function+0x2c>)
 80109d8:	edd3 7a00 	vldr	s15, [r3]
 80109dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109e0:	4b05      	ldr	r3, [pc, #20]	; (80109f8 <ams_drive_exit_function+0x2c>)
 80109e2:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_EXIT;
 80109e6:	2310      	movs	r3, #16
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	2001b6f8 	.word	0x2001b6f8
 80109f8:	200017fc 	.word	0x200017fc

080109fc <ams_drive_force_quit_function>:

ams_state_t ams_drive_force_quit_function() {
 80109fc:	b480      	push	{r7}
 80109fe:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8010a00:	4b08      	ldr	r3, [pc, #32]	; (8010a24 <ams_drive_force_quit_function+0x28>)
 8010a02:	ed93 7a06 	vldr	s14, [r3, #24]
 8010a06:	4b08      	ldr	r3, [pc, #32]	; (8010a28 <ams_drive_force_quit_function+0x2c>)
 8010a08:	edd3 7a00 	vldr	s15, [r3]
 8010a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a10:	4b05      	ldr	r3, [pc, #20]	; (8010a28 <ams_drive_force_quit_function+0x2c>)
 8010a12:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE_FORCE_QUIT;
 8010a16:	2311      	movs	r3, #17
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	2001b6f8 	.word	0x2001b6f8
 8010a28:	200017fc 	.word	0x200017fc
 8010a2c:	00000000 	.word	0x00000000

08010a30 <ams_drive_function>:

ams_state_t ams_drive_function() {
 8010a30:	b5b0      	push	{r4, r5, r7, lr}
 8010a32:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8010a34:	4b44      	ldr	r3, [pc, #272]	; (8010b48 <ams_drive_function+0x118>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7ef fd77 	bl	800052c <__aeabi_f2d>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	460d      	mov	r5, r1
 8010a42:	4b42      	ldr	r3, [pc, #264]	; (8010b4c <ams_drive_function+0x11c>)
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ef fd70 	bl	800052c <__aeabi_f2d>
 8010a4c:	a33c      	add	r3, pc, #240	; (adr r3, 8010b40 <ams_drive_function+0x110>)
 8010a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a52:	f7ef fdc3 	bl	80005dc <__aeabi_dmul>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	f7f0 f82f 	bl	8000ac0 <__aeabi_dcmplt>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d002      	beq.n	8010a6e <ams_drive_function+0x3e>
       state_r2 = STATE_AMS_DRIVE_0;
 8010a68:	4b39      	ldr	r3, [pc, #228]	; (8010b50 <ams_drive_function+0x120>)
 8010a6a:	220d      	movs	r2, #13
 8010a6c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8010a6e:	4b38      	ldr	r3, [pc, #224]	; (8010b50 <ams_drive_function+0x120>)
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	3b0d      	subs	r3, #13
 8010a74:	2b04      	cmp	r3, #4
 8010a76:	d830      	bhi.n	8010ada <ams_drive_function+0xaa>
 8010a78:	a201      	add	r2, pc, #4	; (adr r2, 8010a80 <ams_drive_function+0x50>)
 8010a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a7e:	bf00      	nop
 8010a80:	08010a95 	.word	0x08010a95
 8010a84:	08010aa3 	.word	0x08010aa3
 8010a88:	08010ab1 	.word	0x08010ab1
 8010a8c:	08010abf 	.word	0x08010abf
 8010a90:	08010acd 	.word	0x08010acd
       case STATE_AMS_DRIVE_0:
           state_r2 = ams_drive_0_function();
 8010a94:	f7ff fedc 	bl	8010850 <ams_drive_0_function>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	4b2c      	ldr	r3, [pc, #176]	; (8010b50 <ams_drive_function+0x120>)
 8010a9e:	701a      	strb	r2, [r3, #0]
           break;
 8010aa0:	e01e      	b.n	8010ae0 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_DRIVE:
           state_r2 = ams_drive_drive_function();
 8010aa2:	f7ff fee5 	bl	8010870 <ams_drive_drive_function>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	4b29      	ldr	r3, [pc, #164]	; (8010b50 <ams_drive_function+0x120>)
 8010aac:	701a      	strb	r2, [r3, #0]
           break;
 8010aae:	e017      	b.n	8010ae0 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_END_DRIVE:
           state_r2 = ams_drive_end_drive_function();
 8010ab0:	f7ff ff0e 	bl	80108d0 <ams_drive_end_drive_function>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	4b25      	ldr	r3, [pc, #148]	; (8010b50 <ams_drive_function+0x120>)
 8010aba:	701a      	strb	r2, [r3, #0]
           break;
 8010abc:	e010      	b.n	8010ae0 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_EXIT:
           state_r2 = ams_drive_exit_function();
 8010abe:	f7ff ff85 	bl	80109cc <ams_drive_exit_function>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	4b22      	ldr	r3, [pc, #136]	; (8010b50 <ams_drive_function+0x120>)
 8010ac8:	701a      	strb	r2, [r3, #0]
           break;
 8010aca:	e009      	b.n	8010ae0 <ams_drive_function+0xb0>
       case STATE_AMS_DRIVE_FORCE_QUIT:
           state_r2 = ams_drive_force_quit_function();
 8010acc:	f7ff ff96 	bl	80109fc <ams_drive_force_quit_function>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	4b1e      	ldr	r3, [pc, #120]	; (8010b50 <ams_drive_function+0x120>)
 8010ad6:	701a      	strb	r2, [r3, #0]
           break;
 8010ad8:	e002      	b.n	8010ae0 <ams_drive_function+0xb0>
       default:
           ams_error();
 8010ada:	f7ff fc2c 	bl	8010336 <ams_error>
           break;
 8010ade:	bf00      	nop
   }

   if(ams_inputs.ams_error||ams_inputs.imd_error||ams_outputs.error) {
 8010ae0:	4b1a      	ldr	r3, [pc, #104]	; (8010b4c <ams_drive_function+0x11c>)
 8010ae2:	7f5b      	ldrb	r3, [r3, #29]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d108      	bne.n	8010afa <ams_drive_function+0xca>
 8010ae8:	4b18      	ldr	r3, [pc, #96]	; (8010b4c <ams_drive_function+0x11c>)
 8010aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d103      	bne.n	8010afa <ams_drive_function+0xca>
 8010af2:	4b18      	ldr	r3, [pc, #96]	; (8010b54 <ams_drive_function+0x124>)
 8010af4:	78db      	ldrb	r3, [r3, #3]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d005      	beq.n	8010b06 <ams_drive_function+0xd6>
       timer_r1 = 0;
 8010afa:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <ams_drive_function+0x118>)
 8010afc:	f04f 0200 	mov.w	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8010b02:	2312      	movs	r3, #18
 8010b04:	e018      	b.n	8010b38 <ams_drive_function+0x108>
   }

   if(ams_outputs.drive_complete) {
 8010b06:	4b13      	ldr	r3, [pc, #76]	; (8010b54 <ams_drive_function+0x124>)
 8010b08:	79db      	ldrb	r3, [r3, #7]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d008      	beq.n	8010b20 <ams_drive_function+0xf0>
       ams_outputs.drive_complete=0;
 8010b0e:	4b11      	ldr	r3, [pc, #68]	; (8010b54 <ams_drive_function+0x124>)
 8010b10:	2200      	movs	r2, #0
 8010b12:	71da      	strb	r2, [r3, #7]
       timer_r1 = 0;
 8010b14:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <ams_drive_function+0x118>)
 8010b16:	f04f 0200 	mov.w	r2, #0
 8010b1a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8010b1c:	2327      	movs	r3, #39	; 0x27
 8010b1e:	e00b      	b.n	8010b38 <ams_drive_function+0x108>
   }


   timer_r1 += ams_inputs.Ts;
 8010b20:	4b0a      	ldr	r3, [pc, #40]	; (8010b4c <ams_drive_function+0x11c>)
 8010b22:	ed93 7a06 	vldr	s14, [r3, #24]
 8010b26:	4b08      	ldr	r3, [pc, #32]	; (8010b48 <ams_drive_function+0x118>)
 8010b28:	edd3 7a00 	vldr	s15, [r3]
 8010b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <ams_drive_function+0x118>)
 8010b32:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_DRIVE;
 8010b36:	230c      	movs	r3, #12
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8010b3c:	f3af 8000 	nop.w
 8010b40:	d2f1a9fc 	.word	0xd2f1a9fc
 8010b44:	3f50624d 	.word	0x3f50624d
 8010b48:	200017f8 	.word	0x200017f8
 8010b4c:	2001b6f8 	.word	0x2001b6f8
 8010b50:	200017f2 	.word	0x200017f2
 8010b54:	2001b740 	.word	0x2001b740

08010b58 <ams_error_0_function>:

ams_state_t ams_error_0_function() {
 8010b58:	b480      	push	{r7}
 8010b5a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8010b5c:	4b04      	ldr	r3, [pc, #16]	; (8010b70 <ams_error_0_function+0x18>)
 8010b5e:	f04f 0200 	mov.w	r2, #0
 8010b62:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_ERROR_DETECTED;
 8010b64:	2314      	movs	r3, #20
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_0;
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	200017fc 	.word	0x200017fc

08010b74 <ams_error_error_detected_function>:

ams_state_t ams_error_error_detected_function() {
 8010b74:	b480      	push	{r7}
 8010b76:	af00      	add	r7, sp, #0
   if(1) {
       ams_outputs.close_air_plus=0;
 8010b78:	4b0d      	ldr	r3, [pc, #52]	; (8010bb0 <ams_error_error_detected_function+0x3c>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	701a      	strb	r2, [r3, #0]
       ams_outputs.air_plus_closed_s=0;
 8010b7e:	4b0c      	ldr	r3, [pc, #48]	; (8010bb0 <ams_error_error_detected_function+0x3c>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_air_minus=0;
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <ams_error_error_detected_function+0x3c>)
 8010b86:	2200      	movs	r2, #0
 8010b88:	705a      	strb	r2, [r3, #1]
       ams_outputs.air_minus_closed_s=0;
 8010b8a:	4b09      	ldr	r3, [pc, #36]	; (8010bb0 <ams_error_error_detected_function+0x3c>)
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	725a      	strb	r2, [r3, #9]
       ams_outputs.close_precharge=0;
 8010b90:	4b07      	ldr	r3, [pc, #28]	; (8010bb0 <ams_error_error_detected_function+0x3c>)
 8010b92:	2200      	movs	r2, #0
 8010b94:	709a      	strb	r2, [r3, #2]
       ams_outputs.precharge_closed_s=0;
 8010b96:	4b06      	ldr	r3, [pc, #24]	; (8010bb0 <ams_error_error_detected_function+0x3c>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	72da      	strb	r2, [r3, #11]
       timer_r2 = 0;
 8010b9c:	4b05      	ldr	r3, [pc, #20]	; (8010bb4 <ams_error_error_detected_function+0x40>)
 8010b9e:	f04f 0200 	mov.w	r2, #0
 8010ba2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_RELAYS_OPENED;
 8010ba4:	2315      	movs	r3, #21
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_ERROR_ERROR_DETECTED;
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr
 8010bb0:	2001b740 	.word	0x2001b740
 8010bb4:	200017fc 	.word	0x200017fc

08010bb8 <ams_error_relays_opened_function>:

ams_state_t ams_error_relays_opened_function() {
 8010bb8:	b480      	push	{r7}
 8010bba:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)) {
 8010bbc:	4b11      	ldr	r3, [pc, #68]	; (8010c04 <ams_error_relays_opened_function+0x4c>)
 8010bbe:	edd3 7a00 	vldr	s15, [r3]
 8010bc2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	dd08      	ble.n	8010be2 <ams_error_relays_opened_function+0x2a>
       ams_outputs.error=0;
 8010bd0:	4b0d      	ldr	r3, [pc, #52]	; (8010c08 <ams_error_relays_opened_function+0x50>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010bd6:	4b0b      	ldr	r3, [pc, #44]	; (8010c04 <ams_error_relays_opened_function+0x4c>)
 8010bd8:	f04f 0200 	mov.w	r2, #0
 8010bdc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 8010bde:	2316      	movs	r3, #22
 8010be0:	e00b      	b.n	8010bfa <ams_error_relays_opened_function+0x42>
   }

   timer_r2 += ams_inputs.Ts;
 8010be2:	4b0a      	ldr	r3, [pc, #40]	; (8010c0c <ams_error_relays_opened_function+0x54>)
 8010be4:	ed93 7a06 	vldr	s14, [r3, #24]
 8010be8:	4b06      	ldr	r3, [pc, #24]	; (8010c04 <ams_error_relays_opened_function+0x4c>)
 8010bea:	edd3 7a00 	vldr	s15, [r3]
 8010bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bf2:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <ams_error_relays_opened_function+0x4c>)
 8010bf4:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_RELAYS_OPENED;
 8010bf8:	2315      	movs	r3, #21
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr
 8010c04:	200017fc 	.word	0x200017fc
 8010c08:	2001b740 	.word	0x2001b740
 8010c0c:	2001b6f8 	.word	0x2001b6f8

08010c10 <ams_error_awaiting_error_resolution_function>:

ams_state_t ams_error_awaiting_error_resolution_function() {
 8010c10:	b480      	push	{r7}
 8010c12:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8010c14:	4b08      	ldr	r3, [pc, #32]	; (8010c38 <ams_error_awaiting_error_resolution_function+0x28>)
 8010c16:	ed93 7a06 	vldr	s14, [r3, #24]
 8010c1a:	4b08      	ldr	r3, [pc, #32]	; (8010c3c <ams_error_awaiting_error_resolution_function+0x2c>)
 8010c1c:	edd3 7a00 	vldr	s15, [r3]
 8010c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c24:	4b05      	ldr	r3, [pc, #20]	; (8010c3c <ams_error_awaiting_error_resolution_function+0x2c>)
 8010c26:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION;
 8010c2a:	2316      	movs	r3, #22
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	2001b6f8 	.word	0x2001b6f8
 8010c3c:	200017fc 	.word	0x200017fc

08010c40 <ams_error_function>:

ams_state_t ams_error_function() {
 8010c40:	b5b0      	push	{r4, r5, r7, lr}
 8010c42:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8010c44:	4b38      	ldr	r3, [pc, #224]	; (8010d28 <ams_error_function+0xe8>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7ef fc6f 	bl	800052c <__aeabi_f2d>
 8010c4e:	4604      	mov	r4, r0
 8010c50:	460d      	mov	r5, r1
 8010c52:	4b36      	ldr	r3, [pc, #216]	; (8010d2c <ams_error_function+0xec>)
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ef fc68 	bl	800052c <__aeabi_f2d>
 8010c5c:	a330      	add	r3, pc, #192	; (adr r3, 8010d20 <ams_error_function+0xe0>)
 8010c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c62:	f7ef fcbb 	bl	80005dc <__aeabi_dmul>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	f7ef ff27 	bl	8000ac0 <__aeabi_dcmplt>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <ams_error_function+0x3e>
       state_r2 = STATE_AMS_ERROR_0;
 8010c78:	4b2d      	ldr	r3, [pc, #180]	; (8010d30 <ams_error_function+0xf0>)
 8010c7a:	2213      	movs	r2, #19
 8010c7c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8010c7e:	4b2c      	ldr	r3, [pc, #176]	; (8010d30 <ams_error_function+0xf0>)
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	3b13      	subs	r3, #19
 8010c84:	2b03      	cmp	r3, #3
 8010c86:	d827      	bhi.n	8010cd8 <ams_error_function+0x98>
 8010c88:	a201      	add	r2, pc, #4	; (adr r2, 8010c90 <ams_error_function+0x50>)
 8010c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c8e:	bf00      	nop
 8010c90:	08010ca1 	.word	0x08010ca1
 8010c94:	08010caf 	.word	0x08010caf
 8010c98:	08010cbd 	.word	0x08010cbd
 8010c9c:	08010ccb 	.word	0x08010ccb
       case STATE_AMS_ERROR_0:
           state_r2 = ams_error_0_function();
 8010ca0:	f7ff ff5a 	bl	8010b58 <ams_error_0_function>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	4b21      	ldr	r3, [pc, #132]	; (8010d30 <ams_error_function+0xf0>)
 8010caa:	701a      	strb	r2, [r3, #0]
           break;
 8010cac:	e017      	b.n	8010cde <ams_error_function+0x9e>
       case STATE_AMS_ERROR_ERROR_DETECTED:
           state_r2 = ams_error_error_detected_function();
 8010cae:	f7ff ff61 	bl	8010b74 <ams_error_error_detected_function>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	4b1e      	ldr	r3, [pc, #120]	; (8010d30 <ams_error_function+0xf0>)
 8010cb8:	701a      	strb	r2, [r3, #0]
           break;
 8010cba:	e010      	b.n	8010cde <ams_error_function+0x9e>
       case STATE_AMS_ERROR_RELAYS_OPENED:
           state_r2 = ams_error_relays_opened_function();
 8010cbc:	f7ff ff7c 	bl	8010bb8 <ams_error_relays_opened_function>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	4b1a      	ldr	r3, [pc, #104]	; (8010d30 <ams_error_function+0xf0>)
 8010cc6:	701a      	strb	r2, [r3, #0]
           break;
 8010cc8:	e009      	b.n	8010cde <ams_error_function+0x9e>
       case STATE_AMS_ERROR_AWAITING_ERROR_RESOLUTION:
           state_r2 = ams_error_awaiting_error_resolution_function();
 8010cca:	f7ff ffa1 	bl	8010c10 <ams_error_awaiting_error_resolution_function>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	4b17      	ldr	r3, [pc, #92]	; (8010d30 <ams_error_function+0xf0>)
 8010cd4:	701a      	strb	r2, [r3, #0]
           break;
 8010cd6:	e002      	b.n	8010cde <ams_error_function+0x9e>
       default:
           ams_error();
 8010cd8:	f7ff fb2d 	bl	8010336 <ams_error>
           break;
 8010cdc:	bf00      	nop
   }

   if(!(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error)) {
 8010cde:	4b15      	ldr	r3, [pc, #84]	; (8010d34 <ams_error_function+0xf4>)
 8010ce0:	78db      	ldrb	r3, [r3, #3]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10e      	bne.n	8010d04 <ams_error_function+0xc4>
 8010ce6:	4b11      	ldr	r3, [pc, #68]	; (8010d2c <ams_error_function+0xec>)
 8010ce8:	7f5b      	ldrb	r3, [r3, #29]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d10a      	bne.n	8010d04 <ams_error_function+0xc4>
 8010cee:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <ams_error_function+0xec>)
 8010cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d105      	bne.n	8010d04 <ams_error_function+0xc4>
       timer_r1 = 0;
 8010cf8:	4b0b      	ldr	r3, [pc, #44]	; (8010d28 <ams_error_function+0xe8>)
 8010cfa:	f04f 0200 	mov.w	r2, #0
 8010cfe:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8010d00:	2327      	movs	r3, #39	; 0x27
 8010d02:	e00b      	b.n	8010d1c <ams_error_function+0xdc>
   }


   timer_r1 += ams_inputs.Ts;
 8010d04:	4b09      	ldr	r3, [pc, #36]	; (8010d2c <ams_error_function+0xec>)
 8010d06:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d0a:	4b07      	ldr	r3, [pc, #28]	; (8010d28 <ams_error_function+0xe8>)
 8010d0c:	edd3 7a00 	vldr	s15, [r3]
 8010d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d14:	4b04      	ldr	r3, [pc, #16]	; (8010d28 <ams_error_function+0xe8>)
 8010d16:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_ERROR;
 8010d1a:	2312      	movs	r3, #18
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8010d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8010d24:	3f50624d 	.word	0x3f50624d
 8010d28:	200017f8 	.word	0x200017f8
 8010d2c:	2001b6f8 	.word	0x2001b6f8
 8010d30:	200017f2 	.word	0x200017f2
 8010d34:	2001b740 	.word	0x2001b740

08010d38 <ams_precharge_charge_close_air_minus_function>:

ams_state_t ams_precharge_charge_close_air_minus_function() {
 8010d38:	b480      	push	{r7}
 8010d3a:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_minus_closed) {
 8010d3c:	4b1f      	ldr	r3, [pc, #124]	; (8010dbc <ams_precharge_charge_close_air_minus_function+0x84>)
 8010d3e:	edd3 7a00 	vldr	s15, [r3]
 8010d42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4e:	d510      	bpl.n	8010d72 <ams_precharge_charge_close_air_minus_function+0x3a>
 8010d50:	4b1b      	ldr	r3, [pc, #108]	; (8010dc0 <ams_precharge_charge_close_air_minus_function+0x88>)
 8010d52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00b      	beq.n	8010d72 <ams_precharge_charge_close_air_minus_function+0x3a>
       ams_outputs.close_precharge=1;
 8010d5a:	4b1a      	ldr	r3, [pc, #104]	; (8010dc4 <ams_precharge_charge_close_air_minus_function+0x8c>)
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	709a      	strb	r2, [r3, #2]
       ams_outputs.air_minus_closed_s=1;
 8010d60:	4b18      	ldr	r3, [pc, #96]	; (8010dc4 <ams_precharge_charge_close_air_minus_function+0x8c>)
 8010d62:	2201      	movs	r2, #1
 8010d64:	725a      	strb	r2, [r3, #9]
       timer_r2 = 0;
 8010d66:	4b15      	ldr	r3, [pc, #84]	; (8010dbc <ams_precharge_charge_close_air_minus_function+0x84>)
 8010d68:	f04f 0200 	mov.w	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8010d6e:	2319      	movs	r3, #25
 8010d70:	e01e      	b.n	8010db0 <ams_precharge_charge_close_air_minus_function+0x78>
   }

   if((timer_r2 > 2)) {
 8010d72:	4b12      	ldr	r3, [pc, #72]	; (8010dbc <ams_precharge_charge_close_air_minus_function+0x84>)
 8010d74:	edd3 7a00 	vldr	s15, [r3]
 8010d78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d84:	dd08      	ble.n	8010d98 <ams_precharge_charge_close_air_minus_function+0x60>
       ams_outputs.error=122;
 8010d86:	4b0f      	ldr	r3, [pc, #60]	; (8010dc4 <ams_precharge_charge_close_air_minus_function+0x8c>)
 8010d88:	227a      	movs	r2, #122	; 0x7a
 8010d8a:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010d8c:	4b0b      	ldr	r3, [pc, #44]	; (8010dbc <ams_precharge_charge_close_air_minus_function+0x84>)
 8010d8e:	f04f 0200 	mov.w	r2, #0
 8010d92:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010d94:	231a      	movs	r3, #26
 8010d96:	e00b      	b.n	8010db0 <ams_precharge_charge_close_air_minus_function+0x78>
   }

   timer_r2 += ams_inputs.Ts;
 8010d98:	4b09      	ldr	r3, [pc, #36]	; (8010dc0 <ams_precharge_charge_close_air_minus_function+0x88>)
 8010d9a:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d9e:	4b07      	ldr	r3, [pc, #28]	; (8010dbc <ams_precharge_charge_close_air_minus_function+0x84>)
 8010da0:	edd3 7a00 	vldr	s15, [r3]
 8010da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010da8:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <ams_precharge_charge_close_air_minus_function+0x84>)
 8010daa:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 8010dae:	2318      	movs	r3, #24
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	200017fc 	.word	0x200017fc
 8010dc0:	2001b6f8 	.word	0x2001b6f8
 8010dc4:	2001b740 	.word	0x2001b740

08010dc8 <ams_precharge_charge_close_precharge_function>:

ams_state_t ams_precharge_charge_close_precharge_function() {
 8010dc8:	b480      	push	{r7}
 8010dca:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.precharge_closed) {
 8010dcc:	4b1d      	ldr	r3, [pc, #116]	; (8010e44 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010dce:	edd3 7a00 	vldr	s15, [r3]
 8010dd2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dde:	d50c      	bpl.n	8010dfa <ams_precharge_charge_close_precharge_function+0x32>
 8010de0:	4b19      	ldr	r3, [pc, #100]	; (8010e48 <ams_precharge_charge_close_precharge_function+0x80>)
 8010de2:	7f9b      	ldrb	r3, [r3, #30]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d008      	beq.n	8010dfa <ams_precharge_charge_close_precharge_function+0x32>
       ams_outputs.precharge_closed_s=1;
 8010de8:	4b18      	ldr	r3, [pc, #96]	; (8010e4c <ams_precharge_charge_close_precharge_function+0x84>)
 8010dea:	2201      	movs	r2, #1
 8010dec:	72da      	strb	r2, [r3, #11]
       timer_r2 = 0;
 8010dee:	4b15      	ldr	r3, [pc, #84]	; (8010e44 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010df0:	f04f 0200 	mov.w	r2, #0
 8010df4:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_WAIT;
 8010df6:	231b      	movs	r3, #27
 8010df8:	e01e      	b.n	8010e38 <ams_precharge_charge_close_precharge_function+0x70>
   }

   if((timer_r2 > 2)) {
 8010dfa:	4b12      	ldr	r3, [pc, #72]	; (8010e44 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010dfc:	edd3 7a00 	vldr	s15, [r3]
 8010e00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0c:	dd08      	ble.n	8010e20 <ams_precharge_charge_close_precharge_function+0x58>
       ams_outputs.error=123;
 8010e0e:	4b0f      	ldr	r3, [pc, #60]	; (8010e4c <ams_precharge_charge_close_precharge_function+0x84>)
 8010e10:	227b      	movs	r2, #123	; 0x7b
 8010e12:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010e14:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010e16:	f04f 0200 	mov.w	r2, #0
 8010e1a:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010e1c:	231a      	movs	r3, #26
 8010e1e:	e00b      	b.n	8010e38 <ams_precharge_charge_close_precharge_function+0x70>
   }

   timer_r2 += ams_inputs.Ts;
 8010e20:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <ams_precharge_charge_close_precharge_function+0x80>)
 8010e22:	ed93 7a06 	vldr	s14, [r3, #24]
 8010e26:	4b07      	ldr	r3, [pc, #28]	; (8010e44 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010e28:	edd3 7a00 	vldr	s15, [r3]
 8010e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e30:	4b04      	ldr	r3, [pc, #16]	; (8010e44 <ams_precharge_charge_close_precharge_function+0x7c>)
 8010e32:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE;
 8010e36:	2319      	movs	r3, #25
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	200017fc 	.word	0x200017fc
 8010e48:	2001b6f8 	.word	0x2001b6f8
 8010e4c:	2001b740 	.word	0x2001b740

08010e50 <ams_precharge_charge_error_function>:

ams_state_t ams_precharge_charge_error_function() {
 8010e50:	b480      	push	{r7}
 8010e52:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8010e54:	4b08      	ldr	r3, [pc, #32]	; (8010e78 <ams_precharge_charge_error_function+0x28>)
 8010e56:	ed93 7a06 	vldr	s14, [r3, #24]
 8010e5a:	4b08      	ldr	r3, [pc, #32]	; (8010e7c <ams_precharge_charge_error_function+0x2c>)
 8010e5c:	edd3 7a00 	vldr	s15, [r3]
 8010e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e64:	4b05      	ldr	r3, [pc, #20]	; (8010e7c <ams_precharge_charge_error_function+0x2c>)
 8010e66:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010e6a:	231a      	movs	r3, #26
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop
 8010e78:	2001b6f8 	.word	0x2001b6f8
 8010e7c:	200017fc 	.word	0x200017fc

08010e80 <ams_precharge_charge_wait_function>:

ams_state_t ams_precharge_charge_wait_function() {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
   if((timer_r2 > 5)&&(timer_r2 < 30)&&(ams_inputs.accumulator_voltage*0.95<ams_inputs.vehicle_voltage)) {
 8010e84:	4b2a      	ldr	r3, [pc, #168]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010e86:	edd3 7a00 	vldr	s15, [r3]
 8010e8a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e96:	dd26      	ble.n	8010ee6 <ams_precharge_charge_wait_function+0x66>
 8010e98:	4b25      	ldr	r3, [pc, #148]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010e9a:	edd3 7a00 	vldr	s15, [r3]
 8010e9e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eaa:	d51c      	bpl.n	8010ee6 <ams_precharge_charge_wait_function+0x66>
 8010eac:	4b21      	ldr	r3, [pc, #132]	; (8010f34 <ams_precharge_charge_wait_function+0xb4>)
 8010eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010eb2:	a31d      	add	r3, pc, #116	; (adr r3, 8010f28 <ams_precharge_charge_wait_function+0xa8>)
 8010eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb8:	f7ef fb90 	bl	80005dc <__aeabi_dmul>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	4b1b      	ldr	r3, [pc, #108]	; (8010f34 <ams_precharge_charge_wait_function+0xb4>)
 8010ec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010eca:	f7ef fdf9 	bl	8000ac0 <__aeabi_dcmplt>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d008      	beq.n	8010ee6 <ams_precharge_charge_wait_function+0x66>
       ams_outputs.close_air_plus=1;
 8010ed4:	4b18      	ldr	r3, [pc, #96]	; (8010f38 <ams_precharge_charge_wait_function+0xb8>)
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	701a      	strb	r2, [r3, #0]
       timer_r2 = 0;
 8010eda:	4b15      	ldr	r3, [pc, #84]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010edc:	f04f 0200 	mov.w	r2, #0
 8010ee0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8010ee2:	231c      	movs	r3, #28
 8010ee4:	e01e      	b.n	8010f24 <ams_precharge_charge_wait_function+0xa4>
   }

   if((timer_r2 > 30)) {
 8010ee6:	4b12      	ldr	r3, [pc, #72]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010ee8:	edd3 7a00 	vldr	s15, [r3]
 8010eec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8010ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	dd08      	ble.n	8010f0c <ams_precharge_charge_wait_function+0x8c>
       ams_outputs.error=124;
 8010efa:	4b0f      	ldr	r3, [pc, #60]	; (8010f38 <ams_precharge_charge_wait_function+0xb8>)
 8010efc:	227c      	movs	r2, #124	; 0x7c
 8010efe:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010f00:	4b0b      	ldr	r3, [pc, #44]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010f02:	f04f 0200 	mov.w	r2, #0
 8010f06:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010f08:	231a      	movs	r3, #26
 8010f0a:	e00b      	b.n	8010f24 <ams_precharge_charge_wait_function+0xa4>
   }

   timer_r2 += ams_inputs.Ts;
 8010f0c:	4b09      	ldr	r3, [pc, #36]	; (8010f34 <ams_precharge_charge_wait_function+0xb4>)
 8010f0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f12:	4b07      	ldr	r3, [pc, #28]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010f14:	edd3 7a00 	vldr	s15, [r3]
 8010f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f1c:	4b04      	ldr	r3, [pc, #16]	; (8010f30 <ams_precharge_charge_wait_function+0xb0>)
 8010f1e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_WAIT;
 8010f22:	231b      	movs	r3, #27
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	66666666 	.word	0x66666666
 8010f2c:	3fee6666 	.word	0x3fee6666
 8010f30:	200017fc 	.word	0x200017fc
 8010f34:	2001b6f8 	.word	0x2001b6f8
 8010f38:	2001b740 	.word	0x2001b740

08010f3c <ams_precharge_charge_close_air_plus_function>:

ams_state_t ams_precharge_charge_close_air_plus_function() {
 8010f3c:	b480      	push	{r7}
 8010f3e:	af00      	add	r7, sp, #0
   if((timer_r2 < 2)&&ams_inputs.air_plus_closed) {
 8010f40:	4b1f      	ldr	r3, [pc, #124]	; (8010fc0 <ams_precharge_charge_close_air_plus_function+0x84>)
 8010f42:	edd3 7a00 	vldr	s15, [r3]
 8010f46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f52:	d510      	bpl.n	8010f76 <ams_precharge_charge_close_air_plus_function+0x3a>
 8010f54:	4b1b      	ldr	r3, [pc, #108]	; (8010fc4 <ams_precharge_charge_close_air_plus_function+0x88>)
 8010f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00b      	beq.n	8010f76 <ams_precharge_charge_close_air_plus_function+0x3a>
       ams_outputs.close_precharge=0;
 8010f5e:	4b1a      	ldr	r3, [pc, #104]	; (8010fc8 <ams_precharge_charge_close_air_plus_function+0x8c>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	709a      	strb	r2, [r3, #2]
       ams_outputs.air_plus_closed_s=1;
 8010f64:	4b18      	ldr	r3, [pc, #96]	; (8010fc8 <ams_precharge_charge_close_air_plus_function+0x8c>)
 8010f66:	2201      	movs	r2, #1
 8010f68:	719a      	strb	r2, [r3, #6]
       timer_r2 = 0;
 8010f6a:	4b15      	ldr	r3, [pc, #84]	; (8010fc0 <ams_precharge_charge_close_air_plus_function+0x84>)
 8010f6c:	f04f 0200 	mov.w	r2, #0
 8010f70:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8010f72:	231d      	movs	r3, #29
 8010f74:	e01e      	b.n	8010fb4 <ams_precharge_charge_close_air_plus_function+0x78>
   }

   if((timer_r2 > 2)) {
 8010f76:	4b12      	ldr	r3, [pc, #72]	; (8010fc0 <ams_precharge_charge_close_air_plus_function+0x84>)
 8010f78:	edd3 7a00 	vldr	s15, [r3]
 8010f7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f88:	dd08      	ble.n	8010f9c <ams_precharge_charge_close_air_plus_function+0x60>
       ams_outputs.error=125;
 8010f8a:	4b0f      	ldr	r3, [pc, #60]	; (8010fc8 <ams_precharge_charge_close_air_plus_function+0x8c>)
 8010f8c:	227d      	movs	r2, #125	; 0x7d
 8010f8e:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010f90:	4b0b      	ldr	r3, [pc, #44]	; (8010fc0 <ams_precharge_charge_close_air_plus_function+0x84>)
 8010f92:	f04f 0200 	mov.w	r2, #0
 8010f96:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010f98:	231a      	movs	r3, #26
 8010f9a:	e00b      	b.n	8010fb4 <ams_precharge_charge_close_air_plus_function+0x78>
   }

   timer_r2 += ams_inputs.Ts;
 8010f9c:	4b09      	ldr	r3, [pc, #36]	; (8010fc4 <ams_precharge_charge_close_air_plus_function+0x88>)
 8010f9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8010fa2:	4b07      	ldr	r3, [pc, #28]	; (8010fc0 <ams_precharge_charge_close_air_plus_function+0x84>)
 8010fa4:	edd3 7a00 	vldr	s15, [r3]
 8010fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <ams_precharge_charge_close_air_plus_function+0x84>)
 8010fae:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS;
 8010fb2:	231c      	movs	r3, #28
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	200017fc 	.word	0x200017fc
 8010fc4:	2001b6f8 	.word	0x2001b6f8
 8010fc8:	2001b740 	.word	0x2001b740

08010fcc <ams_precharge_charge_open_precharge_function>:

ams_state_t ams_precharge_charge_open_precharge_function() {
 8010fcc:	b480      	push	{r7}
 8010fce:	af00      	add	r7, sp, #0
   if((timer_r2 > 2)) {
 8010fd0:	4b1e      	ldr	r3, [pc, #120]	; (801104c <ams_precharge_charge_open_precharge_function+0x80>)
 8010fd2:	edd3 7a00 	vldr	s15, [r3]
 8010fd6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe2:	dd08      	ble.n	8010ff6 <ams_precharge_charge_open_precharge_function+0x2a>
       ams_outputs.error=126;
 8010fe4:	4b1a      	ldr	r3, [pc, #104]	; (8011050 <ams_precharge_charge_open_precharge_function+0x84>)
 8010fe6:	227e      	movs	r2, #126	; 0x7e
 8010fe8:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 8010fea:	4b18      	ldr	r3, [pc, #96]	; (801104c <ams_precharge_charge_open_precharge_function+0x80>)
 8010fec:	f04f 0200 	mov.w	r2, #0
 8010ff0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 8010ff2:	231a      	movs	r3, #26
 8010ff4:	e025      	b.n	8011042 <ams_precharge_charge_open_precharge_function+0x76>
   }

   if((timer_r2 < 2)&&!ams_inputs.precharge_closed) {
 8010ff6:	4b15      	ldr	r3, [pc, #84]	; (801104c <ams_precharge_charge_open_precharge_function+0x80>)
 8010ff8:	edd3 7a00 	vldr	s15, [r3]
 8010ffc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011008:	d50f      	bpl.n	801102a <ams_precharge_charge_open_precharge_function+0x5e>
 801100a:	4b12      	ldr	r3, [pc, #72]	; (8011054 <ams_precharge_charge_open_precharge_function+0x88>)
 801100c:	7f9b      	ldrb	r3, [r3, #30]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d10b      	bne.n	801102a <ams_precharge_charge_open_precharge_function+0x5e>
       ams_outputs.precharge_charge_complete=1;
 8011012:	4b0f      	ldr	r3, [pc, #60]	; (8011050 <ams_precharge_charge_open_precharge_function+0x84>)
 8011014:	2201      	movs	r2, #1
 8011016:	721a      	strb	r2, [r3, #8]
       ams_outputs.precharge_closed_s=0;
 8011018:	4b0d      	ldr	r3, [pc, #52]	; (8011050 <ams_precharge_charge_open_precharge_function+0x84>)
 801101a:	2200      	movs	r2, #0
 801101c:	72da      	strb	r2, [r3, #11]
       timer_r2 = 0;
 801101e:	4b0b      	ldr	r3, [pc, #44]	; (801104c <ams_precharge_charge_open_precharge_function+0x80>)
 8011020:	f04f 0200 	mov.w	r2, #0
 8011024:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_EXIT;
 8011026:	231e      	movs	r3, #30
 8011028:	e00b      	b.n	8011042 <ams_precharge_charge_open_precharge_function+0x76>
   }

   timer_r2 += ams_inputs.Ts;
 801102a:	4b0a      	ldr	r3, [pc, #40]	; (8011054 <ams_precharge_charge_open_precharge_function+0x88>)
 801102c:	ed93 7a06 	vldr	s14, [r3, #24]
 8011030:	4b06      	ldr	r3, [pc, #24]	; (801104c <ams_precharge_charge_open_precharge_function+0x80>)
 8011032:	edd3 7a00 	vldr	s15, [r3]
 8011036:	ee77 7a27 	vadd.f32	s15, s14, s15
 801103a:	4b04      	ldr	r3, [pc, #16]	; (801104c <ams_precharge_charge_open_precharge_function+0x80>)
 801103c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE;
 8011040:	231d      	movs	r3, #29
}
 8011042:	4618      	mov	r0, r3
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	200017fc 	.word	0x200017fc
 8011050:	2001b740 	.word	0x2001b740
 8011054:	2001b6f8 	.word	0x2001b6f8

08011058 <ams_precharge_charge_exit_function>:

ams_state_t ams_precharge_charge_exit_function() {
 8011058:	b480      	push	{r7}
 801105a:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 801105c:	4b08      	ldr	r3, [pc, #32]	; (8011080 <ams_precharge_charge_exit_function+0x28>)
 801105e:	ed93 7a06 	vldr	s14, [r3, #24]
 8011062:	4b08      	ldr	r3, [pc, #32]	; (8011084 <ams_precharge_charge_exit_function+0x2c>)
 8011064:	edd3 7a00 	vldr	s15, [r3]
 8011068:	ee77 7a27 	vadd.f32	s15, s14, s15
 801106c:	4b05      	ldr	r3, [pc, #20]	; (8011084 <ams_precharge_charge_exit_function+0x2c>)
 801106e:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_EXIT;
 8011072:	231e      	movs	r3, #30
}
 8011074:	4618      	mov	r0, r3
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	2001b6f8 	.word	0x2001b6f8
 8011084:	200017fc 	.word	0x200017fc

08011088 <ams_precharge_charge_0_function>:

ams_state_t ams_precharge_charge_0_function() {
 8011088:	b480      	push	{r7}
 801108a:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 801108c:	4b04      	ldr	r3, [pc, #16]	; (80110a0 <ams_precharge_charge_0_function+0x18>)
 801108e:	f04f 0200 	mov.w	r2, #0
 8011092:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER;
 8011094:	2320      	movs	r3, #32
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_PRECHARGE_CHARGE_0;
}
 8011096:	4618      	mov	r0, r3
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr
 80110a0:	200017fc 	.word	0x200017fc

080110a4 <ams_precharge_charge_wake_charger_function>:

ams_state_t ams_precharge_charge_wake_charger_function() {
 80110a4:	b480      	push	{r7}
 80110a6:	af00      	add	r7, sp, #0
   if((timer_r2 < 10)&&ams_inputs.charger_is_awake) {
 80110a8:	4b1d      	ldr	r3, [pc, #116]	; (8011120 <ams_precharge_charge_wake_charger_function+0x7c>)
 80110aa:	edd3 7a00 	vldr	s15, [r3]
 80110ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80110b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ba:	d50d      	bpl.n	80110d8 <ams_precharge_charge_wake_charger_function+0x34>
 80110bc:	4b19      	ldr	r3, [pc, #100]	; (8011124 <ams_precharge_charge_wake_charger_function+0x80>)
 80110be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d008      	beq.n	80110d8 <ams_precharge_charge_wake_charger_function+0x34>
       ams_outputs.close_air_minus=1;
 80110c6:	4b18      	ldr	r3, [pc, #96]	; (8011128 <ams_precharge_charge_wake_charger_function+0x84>)
 80110c8:	2201      	movs	r2, #1
 80110ca:	705a      	strb	r2, [r3, #1]
       timer_r2 = 0;
 80110cc:	4b14      	ldr	r3, [pc, #80]	; (8011120 <ams_precharge_charge_wake_charger_function+0x7c>)
 80110ce:	f04f 0200 	mov.w	r2, #0
 80110d2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS;
 80110d4:	2318      	movs	r3, #24
 80110d6:	e01e      	b.n	8011116 <ams_precharge_charge_wake_charger_function+0x72>
   }

   if((timer_r2 > 10)) {
 80110d8:	4b11      	ldr	r3, [pc, #68]	; (8011120 <ams_precharge_charge_wake_charger_function+0x7c>)
 80110da:	edd3 7a00 	vldr	s15, [r3]
 80110de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80110e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ea:	dd08      	ble.n	80110fe <ams_precharge_charge_wake_charger_function+0x5a>
       ams_outputs.error=121;
 80110ec:	4b0e      	ldr	r3, [pc, #56]	; (8011128 <ams_precharge_charge_wake_charger_function+0x84>)
 80110ee:	2279      	movs	r2, #121	; 0x79
 80110f0:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 80110f2:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <ams_precharge_charge_wake_charger_function+0x7c>)
 80110f4:	f04f 0200 	mov.w	r2, #0
 80110f8:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE_ERROR;
 80110fa:	231a      	movs	r3, #26
 80110fc:	e00b      	b.n	8011116 <ams_precharge_charge_wake_charger_function+0x72>
   }

   timer_r2 += ams_inputs.Ts;
 80110fe:	4b09      	ldr	r3, [pc, #36]	; (8011124 <ams_precharge_charge_wake_charger_function+0x80>)
 8011100:	ed93 7a06 	vldr	s14, [r3, #24]
 8011104:	4b06      	ldr	r3, [pc, #24]	; (8011120 <ams_precharge_charge_wake_charger_function+0x7c>)
 8011106:	edd3 7a00 	vldr	s15, [r3]
 801110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801110e:	4b04      	ldr	r3, [pc, #16]	; (8011120 <ams_precharge_charge_wake_charger_function+0x7c>)
 8011110:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER;
 8011114:	2320      	movs	r3, #32
}
 8011116:	4618      	mov	r0, r3
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	200017fc 	.word	0x200017fc
 8011124:	2001b6f8 	.word	0x2001b6f8
 8011128:	2001b740 	.word	0x2001b740
 801112c:	00000000 	.word	0x00000000

08011130 <ams_precharge_charge_function>:

ams_state_t ams_precharge_charge_function() {
 8011130:	b5b0      	push	{r4, r5, r7, lr}
 8011132:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8011134:	4b56      	ldr	r3, [pc, #344]	; (8011290 <ams_precharge_charge_function+0x160>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4618      	mov	r0, r3
 801113a:	f7ef f9f7 	bl	800052c <__aeabi_f2d>
 801113e:	4604      	mov	r4, r0
 8011140:	460d      	mov	r5, r1
 8011142:	4b54      	ldr	r3, [pc, #336]	; (8011294 <ams_precharge_charge_function+0x164>)
 8011144:	699b      	ldr	r3, [r3, #24]
 8011146:	4618      	mov	r0, r3
 8011148:	f7ef f9f0 	bl	800052c <__aeabi_f2d>
 801114c:	a34e      	add	r3, pc, #312	; (adr r3, 8011288 <ams_precharge_charge_function+0x158>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef fa43 	bl	80005dc <__aeabi_dmul>
 8011156:	4602      	mov	r2, r0
 8011158:	460b      	mov	r3, r1
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	f7ef fcaf 	bl	8000ac0 <__aeabi_dcmplt>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d002      	beq.n	801116e <ams_precharge_charge_function+0x3e>
       state_r2 = STATE_AMS_PRECHARGE_CHARGE_0;
 8011168:	4b4b      	ldr	r3, [pc, #300]	; (8011298 <ams_precharge_charge_function+0x168>)
 801116a:	221f      	movs	r2, #31
 801116c:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 801116e:	4b4a      	ldr	r3, [pc, #296]	; (8011298 <ams_precharge_charge_function+0x168>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	3b18      	subs	r3, #24
 8011174:	2b08      	cmp	r3, #8
 8011176:	d854      	bhi.n	8011222 <ams_precharge_charge_function+0xf2>
 8011178:	a201      	add	r2, pc, #4	; (adr r2, 8011180 <ams_precharge_charge_function+0x50>)
 801117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801117e:	bf00      	nop
 8011180:	080111a5 	.word	0x080111a5
 8011184:	080111b3 	.word	0x080111b3
 8011188:	080111c1 	.word	0x080111c1
 801118c:	080111cf 	.word	0x080111cf
 8011190:	080111dd 	.word	0x080111dd
 8011194:	080111eb 	.word	0x080111eb
 8011198:	080111f9 	.word	0x080111f9
 801119c:	08011207 	.word	0x08011207
 80111a0:	08011215 	.word	0x08011215
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_MINUS:
           state_r2 = ams_precharge_charge_close_air_minus_function();
 80111a4:	f7ff fdc8 	bl	8010d38 <ams_precharge_charge_close_air_minus_function>
 80111a8:	4603      	mov	r3, r0
 80111aa:	461a      	mov	r2, r3
 80111ac:	4b3a      	ldr	r3, [pc, #232]	; (8011298 <ams_precharge_charge_function+0x168>)
 80111ae:	701a      	strb	r2, [r3, #0]
           break;
 80111b0:	e03a      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_PRECHARGE:
           state_r2 = ams_precharge_charge_close_precharge_function();
 80111b2:	f7ff fe09 	bl	8010dc8 <ams_precharge_charge_close_precharge_function>
 80111b6:	4603      	mov	r3, r0
 80111b8:	461a      	mov	r2, r3
 80111ba:	4b37      	ldr	r3, [pc, #220]	; (8011298 <ams_precharge_charge_function+0x168>)
 80111bc:	701a      	strb	r2, [r3, #0]
           break;
 80111be:	e033      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_ERROR:
           state_r2 = ams_precharge_charge_error_function();
 80111c0:	f7ff fe46 	bl	8010e50 <ams_precharge_charge_error_function>
 80111c4:	4603      	mov	r3, r0
 80111c6:	461a      	mov	r2, r3
 80111c8:	4b33      	ldr	r3, [pc, #204]	; (8011298 <ams_precharge_charge_function+0x168>)
 80111ca:	701a      	strb	r2, [r3, #0]
           break;
 80111cc:	e02c      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_WAIT:
           state_r2 = ams_precharge_charge_wait_function();
 80111ce:	f7ff fe57 	bl	8010e80 <ams_precharge_charge_wait_function>
 80111d2:	4603      	mov	r3, r0
 80111d4:	461a      	mov	r2, r3
 80111d6:	4b30      	ldr	r3, [pc, #192]	; (8011298 <ams_precharge_charge_function+0x168>)
 80111d8:	701a      	strb	r2, [r3, #0]
           break;
 80111da:	e025      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_CLOSE_AIR_PLUS:
           state_r2 = ams_precharge_charge_close_air_plus_function();
 80111dc:	f7ff feae 	bl	8010f3c <ams_precharge_charge_close_air_plus_function>
 80111e0:	4603      	mov	r3, r0
 80111e2:	461a      	mov	r2, r3
 80111e4:	4b2c      	ldr	r3, [pc, #176]	; (8011298 <ams_precharge_charge_function+0x168>)
 80111e6:	701a      	strb	r2, [r3, #0]
           break;
 80111e8:	e01e      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_OPEN_PRECHARGE:
           state_r2 = ams_precharge_charge_open_precharge_function();
 80111ea:	f7ff feef 	bl	8010fcc <ams_precharge_charge_open_precharge_function>
 80111ee:	4603      	mov	r3, r0
 80111f0:	461a      	mov	r2, r3
 80111f2:	4b29      	ldr	r3, [pc, #164]	; (8011298 <ams_precharge_charge_function+0x168>)
 80111f4:	701a      	strb	r2, [r3, #0]
           break;
 80111f6:	e017      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_EXIT:
           state_r2 = ams_precharge_charge_exit_function();
 80111f8:	f7ff ff2e 	bl	8011058 <ams_precharge_charge_exit_function>
 80111fc:	4603      	mov	r3, r0
 80111fe:	461a      	mov	r2, r3
 8011200:	4b25      	ldr	r3, [pc, #148]	; (8011298 <ams_precharge_charge_function+0x168>)
 8011202:	701a      	strb	r2, [r3, #0]
           break;
 8011204:	e010      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_0:
           state_r2 = ams_precharge_charge_0_function();
 8011206:	f7ff ff3f 	bl	8011088 <ams_precharge_charge_0_function>
 801120a:	4603      	mov	r3, r0
 801120c:	461a      	mov	r2, r3
 801120e:	4b22      	ldr	r3, [pc, #136]	; (8011298 <ams_precharge_charge_function+0x168>)
 8011210:	701a      	strb	r2, [r3, #0]
           break;
 8011212:	e009      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       case STATE_AMS_PRECHARGE_CHARGE_WAKE_CHARGER:
           state_r2 = ams_precharge_charge_wake_charger_function();
 8011214:	f7ff ff46 	bl	80110a4 <ams_precharge_charge_wake_charger_function>
 8011218:	4603      	mov	r3, r0
 801121a:	461a      	mov	r2, r3
 801121c:	4b1e      	ldr	r3, [pc, #120]	; (8011298 <ams_precharge_charge_function+0x168>)
 801121e:	701a      	strb	r2, [r3, #0]
           break;
 8011220:	e002      	b.n	8011228 <ams_precharge_charge_function+0xf8>
       default:
           ams_error();
 8011222:	f7ff f888 	bl	8010336 <ams_error>
           break;
 8011226:	bf00      	nop
   }

   if(ams_outputs.precharge_charge_complete) {
 8011228:	4b1c      	ldr	r3, [pc, #112]	; (801129c <ams_precharge_charge_function+0x16c>)
 801122a:	7a1b      	ldrb	r3, [r3, #8]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d008      	beq.n	8011242 <ams_precharge_charge_function+0x112>
       ams_outputs.precharge_charge_complete=0;
 8011230:	4b1a      	ldr	r3, [pc, #104]	; (801129c <ams_precharge_charge_function+0x16c>)
 8011232:	2200      	movs	r2, #0
 8011234:	721a      	strb	r2, [r3, #8]
       timer_r1 = 0;
 8011236:	4b16      	ldr	r3, [pc, #88]	; (8011290 <ams_precharge_charge_function+0x160>)
 8011238:	f04f 0200 	mov.w	r2, #0
 801123c:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE;
 801123e:	2321      	movs	r3, #33	; 0x21
 8011240:	e01e      	b.n	8011280 <ams_precharge_charge_function+0x150>
   }

   if(ams_outputs.error||ams_inputs.ams_error||ams_inputs.imd_error) {
 8011242:	4b16      	ldr	r3, [pc, #88]	; (801129c <ams_precharge_charge_function+0x16c>)
 8011244:	78db      	ldrb	r3, [r3, #3]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d108      	bne.n	801125c <ams_precharge_charge_function+0x12c>
 801124a:	4b12      	ldr	r3, [pc, #72]	; (8011294 <ams_precharge_charge_function+0x164>)
 801124c:	7f5b      	ldrb	r3, [r3, #29]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d104      	bne.n	801125c <ams_precharge_charge_function+0x12c>
 8011252:	4b10      	ldr	r3, [pc, #64]	; (8011294 <ams_precharge_charge_function+0x164>)
 8011254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011258:	2b00      	cmp	r3, #0
 801125a:	d005      	beq.n	8011268 <ams_precharge_charge_function+0x138>
       timer_r1 = 0;
 801125c:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <ams_precharge_charge_function+0x160>)
 801125e:	f04f 0200 	mov.w	r2, #0
 8011262:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8011264:	2312      	movs	r3, #18
 8011266:	e00b      	b.n	8011280 <ams_precharge_charge_function+0x150>
   }


   timer_r1 += ams_inputs.Ts;
 8011268:	4b0a      	ldr	r3, [pc, #40]	; (8011294 <ams_precharge_charge_function+0x164>)
 801126a:	ed93 7a06 	vldr	s14, [r3, #24]
 801126e:	4b08      	ldr	r3, [pc, #32]	; (8011290 <ams_precharge_charge_function+0x160>)
 8011270:	edd3 7a00 	vldr	s15, [r3]
 8011274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011278:	4b05      	ldr	r3, [pc, #20]	; (8011290 <ams_precharge_charge_function+0x160>)
 801127a:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_PRECHARGE_CHARGE;
 801127e:	2317      	movs	r3, #23
}
 8011280:	4618      	mov	r0, r3
 8011282:	bdb0      	pop	{r4, r5, r7, pc}
 8011284:	f3af 8000 	nop.w
 8011288:	d2f1a9fc 	.word	0xd2f1a9fc
 801128c:	3f50624d 	.word	0x3f50624d
 8011290:	200017f8 	.word	0x200017f8
 8011294:	2001b6f8 	.word	0x2001b6f8
 8011298:	200017f2 	.word	0x200017f2
 801129c:	2001b740 	.word	0x2001b740

080112a0 <ams_charge_0_function>:

ams_state_t ams_charge_0_function() {
 80112a0:	b480      	push	{r7}
 80112a2:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 80112a4:	4b04      	ldr	r3, [pc, #16]	; (80112b8 <ams_charge_0_function+0x18>)
 80112a6:	f04f 0200 	mov.w	r2, #0
 80112aa:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_CHARGE;
 80112ac:	2323      	movs	r3, #35	; 0x23
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_CHARGE_0;
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	200017fc 	.word	0x200017fc
 80112bc:	00000000 	.word	0x00000000

080112c0 <ams_charge_charge_function>:

ams_state_t ams_charge_charge_function() {
 80112c0:	b580      	push	{r7, lr}
 80112c2:	af00      	add	r7, sp, #0
   if((ams_inputs.maximum_cell_voltage>4.15)||!ams_inputs.charge) {
 80112c4:	4b16      	ldr	r3, [pc, #88]	; (8011320 <ams_charge_charge_function+0x60>)
 80112c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80112ca:	a313      	add	r3, pc, #76	; (adr r3, 8011318 <ams_charge_charge_function+0x58>)
 80112cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d0:	f7ef fc14 	bl	8000afc <__aeabi_dcmpgt>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d104      	bne.n	80112e4 <ams_charge_charge_function+0x24>
 80112da:	4b11      	ldr	r3, [pc, #68]	; (8011320 <ams_charge_charge_function+0x60>)
 80112dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d108      	bne.n	80112f6 <ams_charge_charge_function+0x36>
       ams_outputs.enable_charger=0;
 80112e4:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <ams_charge_charge_function+0x64>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	715a      	strb	r2, [r3, #5]
       timer_r2 = 0;
 80112ea:	4b0f      	ldr	r3, [pc, #60]	; (8011328 <ams_charge_charge_function+0x68>)
 80112ec:	f04f 0200 	mov.w	r2, #0
 80112f0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_END_CHARGE;
 80112f2:	2324      	movs	r3, #36	; 0x24
 80112f4:	e00b      	b.n	801130e <ams_charge_charge_function+0x4e>
   }

   timer_r2 += ams_inputs.Ts;
 80112f6:	4b0a      	ldr	r3, [pc, #40]	; (8011320 <ams_charge_charge_function+0x60>)
 80112f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80112fc:	4b0a      	ldr	r3, [pc, #40]	; (8011328 <ams_charge_charge_function+0x68>)
 80112fe:	edd3 7a00 	vldr	s15, [r3]
 8011302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011306:	4b08      	ldr	r3, [pc, #32]	; (8011328 <ams_charge_charge_function+0x68>)
 8011308:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_CHARGE;
 801130c:	2323      	movs	r3, #35	; 0x23
}
 801130e:	4618      	mov	r0, r3
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	f3af 8000 	nop.w
 8011318:	9999999a 	.word	0x9999999a
 801131c:	40109999 	.word	0x40109999
 8011320:	2001b6f8 	.word	0x2001b6f8
 8011324:	2001b740 	.word	0x2001b740
 8011328:	200017fc 	.word	0x200017fc
 801132c:	00000000 	.word	0x00000000

08011330 <ams_charge_end_charge_function>:

ams_state_t ams_charge_end_charge_function() {
 8011330:	b580      	push	{r7, lr}
 8011332:	af00      	add	r7, sp, #0
   if((timer_r2 < 7)&&(fabsf(ams_inputs.accumulator_current)<0.001)) {
 8011334:	4b3a      	ldr	r3, [pc, #232]	; (8011420 <ams_charge_end_charge_function+0xf0>)
 8011336:	edd3 7a00 	vldr	s15, [r3]
 801133a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 801133e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011346:	d531      	bpl.n	80113ac <ams_charge_end_charge_function+0x7c>
 8011348:	4b36      	ldr	r3, [pc, #216]	; (8011424 <ams_charge_end_charge_function+0xf4>)
 801134a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801134e:	4610      	mov	r0, r2
 8011350:	4619      	mov	r1, r3
 8011352:	f7ef fc3b 	bl	8000bcc <__aeabi_d2f>
 8011356:	ee07 0a90 	vmov	s15, r0
 801135a:	eef0 7ae7 	vabs.f32	s15, s15
 801135e:	ee17 0a90 	vmov	r0, s15
 8011362:	f7ef f8e3 	bl	800052c <__aeabi_f2d>
 8011366:	a32c      	add	r3, pc, #176	; (adr r3, 8011418 <ams_charge_end_charge_function+0xe8>)
 8011368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136c:	f7ef fba8 	bl	8000ac0 <__aeabi_dcmplt>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d01a      	beq.n	80113ac <ams_charge_end_charge_function+0x7c>
       ams_outputs.close_air_plus=0;
 8011376:	4b2c      	ldr	r3, [pc, #176]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 8011378:	2200      	movs	r2, #0
 801137a:	701a      	strb	r2, [r3, #0]
       ams_outputs.air_plus_closed_s=0;
 801137c:	4b2a      	ldr	r3, [pc, #168]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 801137e:	2200      	movs	r2, #0
 8011380:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_air_minus=0;
 8011382:	4b29      	ldr	r3, [pc, #164]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 8011384:	2200      	movs	r2, #0
 8011386:	705a      	strb	r2, [r3, #1]
       ams_outputs.air_minus_closed_s=0;
 8011388:	4b27      	ldr	r3, [pc, #156]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 801138a:	2200      	movs	r2, #0
 801138c:	725a      	strb	r2, [r3, #9]
       ams_outputs.close_precharge=0;
 801138e:	4b26      	ldr	r3, [pc, #152]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 8011390:	2200      	movs	r2, #0
 8011392:	709a      	strb	r2, [r3, #2]
       ams_outputs.precharge_closed_s=0;
 8011394:	4b24      	ldr	r3, [pc, #144]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 8011396:	2200      	movs	r2, #0
 8011398:	72da      	strb	r2, [r3, #11]
       ams_outputs.charge_complete=1;
 801139a:	4b23      	ldr	r3, [pc, #140]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 801139c:	2201      	movs	r2, #1
 801139e:	729a      	strb	r2, [r3, #10]
       timer_r2 = 0;
 80113a0:	4b1f      	ldr	r3, [pc, #124]	; (8011420 <ams_charge_end_charge_function+0xf0>)
 80113a2:	f04f 0200 	mov.w	r2, #0
 80113a6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_EXIT;
 80113a8:	2325      	movs	r3, #37	; 0x25
 80113aa:	e030      	b.n	801140e <ams_charge_end_charge_function+0xde>
   }

   if((timer_r2 > 7)) {
 80113ac:	4b1c      	ldr	r3, [pc, #112]	; (8011420 <ams_charge_end_charge_function+0xf0>)
 80113ae:	edd3 7a00 	vldr	s15, [r3]
 80113b2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80113b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113be:	dd1a      	ble.n	80113f6 <ams_charge_end_charge_function+0xc6>
       ams_outputs.close_air_plus=0;
 80113c0:	4b19      	ldr	r3, [pc, #100]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113c2:	2200      	movs	r2, #0
 80113c4:	701a      	strb	r2, [r3, #0]
       ams_outputs.air_plus_closed_s=0;
 80113c6:	4b18      	ldr	r3, [pc, #96]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	719a      	strb	r2, [r3, #6]
       ams_outputs.close_air_minus=0;
 80113cc:	4b16      	ldr	r3, [pc, #88]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	705a      	strb	r2, [r3, #1]
       ams_outputs.air_minus_closed_s=0;
 80113d2:	4b15      	ldr	r3, [pc, #84]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113d4:	2200      	movs	r2, #0
 80113d6:	725a      	strb	r2, [r3, #9]
       ams_outputs.close_precharge=0;
 80113d8:	4b13      	ldr	r3, [pc, #76]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113da:	2200      	movs	r2, #0
 80113dc:	709a      	strb	r2, [r3, #2]
       ams_outputs.precharge_closed_s=0;
 80113de:	4b12      	ldr	r3, [pc, #72]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	72da      	strb	r2, [r3, #11]
       ams_outputs.error=141;
 80113e4:	4b10      	ldr	r3, [pc, #64]	; (8011428 <ams_charge_end_charge_function+0xf8>)
 80113e6:	228d      	movs	r2, #141	; 0x8d
 80113e8:	70da      	strb	r2, [r3, #3]
       timer_r2 = 0;
 80113ea:	4b0d      	ldr	r3, [pc, #52]	; (8011420 <ams_charge_end_charge_function+0xf0>)
 80113ec:	f04f 0200 	mov.w	r2, #0
 80113f0:	601a      	str	r2, [r3, #0]
       return STATE_AMS_CHARGE_FORCE_QUIT;
 80113f2:	2326      	movs	r3, #38	; 0x26
 80113f4:	e00b      	b.n	801140e <ams_charge_end_charge_function+0xde>
   }

   timer_r2 += ams_inputs.Ts;
 80113f6:	4b0b      	ldr	r3, [pc, #44]	; (8011424 <ams_charge_end_charge_function+0xf4>)
 80113f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80113fc:	4b08      	ldr	r3, [pc, #32]	; (8011420 <ams_charge_end_charge_function+0xf0>)
 80113fe:	edd3 7a00 	vldr	s15, [r3]
 8011402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011406:	4b06      	ldr	r3, [pc, #24]	; (8011420 <ams_charge_end_charge_function+0xf0>)
 8011408:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_END_CHARGE;
 801140c:	2324      	movs	r3, #36	; 0x24
}
 801140e:	4618      	mov	r0, r3
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	f3af 8000 	nop.w
 8011418:	d2f1a9fc 	.word	0xd2f1a9fc
 801141c:	3f50624d 	.word	0x3f50624d
 8011420:	200017fc 	.word	0x200017fc
 8011424:	2001b6f8 	.word	0x2001b6f8
 8011428:	2001b740 	.word	0x2001b740

0801142c <ams_charge_exit_function>:

ams_state_t ams_charge_exit_function() {
 801142c:	b480      	push	{r7}
 801142e:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8011430:	4b08      	ldr	r3, [pc, #32]	; (8011454 <ams_charge_exit_function+0x28>)
 8011432:	ed93 7a06 	vldr	s14, [r3, #24]
 8011436:	4b08      	ldr	r3, [pc, #32]	; (8011458 <ams_charge_exit_function+0x2c>)
 8011438:	edd3 7a00 	vldr	s15, [r3]
 801143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011440:	4b05      	ldr	r3, [pc, #20]	; (8011458 <ams_charge_exit_function+0x2c>)
 8011442:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_EXIT;
 8011446:	2325      	movs	r3, #37	; 0x25
}
 8011448:	4618      	mov	r0, r3
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	2001b6f8 	.word	0x2001b6f8
 8011458:	200017fc 	.word	0x200017fc

0801145c <ams_charge_force_quit_function>:

ams_state_t ams_charge_force_quit_function() {
 801145c:	b480      	push	{r7}
 801145e:	af00      	add	r7, sp, #0
   timer_r2 += ams_inputs.Ts;
 8011460:	4b08      	ldr	r3, [pc, #32]	; (8011484 <ams_charge_force_quit_function+0x28>)
 8011462:	ed93 7a06 	vldr	s14, [r3, #24]
 8011466:	4b08      	ldr	r3, [pc, #32]	; (8011488 <ams_charge_force_quit_function+0x2c>)
 8011468:	edd3 7a00 	vldr	s15, [r3]
 801146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011470:	4b05      	ldr	r3, [pc, #20]	; (8011488 <ams_charge_force_quit_function+0x2c>)
 8011472:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE_FORCE_QUIT;
 8011476:	2326      	movs	r3, #38	; 0x26
}
 8011478:	4618      	mov	r0, r3
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	2001b6f8 	.word	0x2001b6f8
 8011488:	200017fc 	.word	0x200017fc
 801148c:	00000000 	.word	0x00000000

08011490 <ams_charge_function>:

ams_state_t ams_charge_function() {
 8011490:	b5b0      	push	{r4, r5, r7, lr}
 8011492:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 8011494:	4b46      	ldr	r3, [pc, #280]	; (80115b0 <ams_charge_function+0x120>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4618      	mov	r0, r3
 801149a:	f7ef f847 	bl	800052c <__aeabi_f2d>
 801149e:	4604      	mov	r4, r0
 80114a0:	460d      	mov	r5, r1
 80114a2:	4b44      	ldr	r3, [pc, #272]	; (80115b4 <ams_charge_function+0x124>)
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ef f840 	bl	800052c <__aeabi_f2d>
 80114ac:	a33e      	add	r3, pc, #248	; (adr r3, 80115a8 <ams_charge_function+0x118>)
 80114ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b2:	f7ef f893 	bl	80005dc <__aeabi_dmul>
 80114b6:	4602      	mov	r2, r0
 80114b8:	460b      	mov	r3, r1
 80114ba:	4620      	mov	r0, r4
 80114bc:	4629      	mov	r1, r5
 80114be:	f7ef faff 	bl	8000ac0 <__aeabi_dcmplt>
 80114c2:	4603      	mov	r3, r0
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d002      	beq.n	80114ce <ams_charge_function+0x3e>
       state_r2 = STATE_AMS_CHARGE_0;
 80114c8:	4b3b      	ldr	r3, [pc, #236]	; (80115b8 <ams_charge_function+0x128>)
 80114ca:	2222      	movs	r2, #34	; 0x22
 80114cc:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 80114ce:	4b3a      	ldr	r3, [pc, #232]	; (80115b8 <ams_charge_function+0x128>)
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	3b22      	subs	r3, #34	; 0x22
 80114d4:	2b04      	cmp	r3, #4
 80114d6:	d830      	bhi.n	801153a <ams_charge_function+0xaa>
 80114d8:	a201      	add	r2, pc, #4	; (adr r2, 80114e0 <ams_charge_function+0x50>)
 80114da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114de:	bf00      	nop
 80114e0:	080114f5 	.word	0x080114f5
 80114e4:	08011503 	.word	0x08011503
 80114e8:	08011511 	.word	0x08011511
 80114ec:	0801151f 	.word	0x0801151f
 80114f0:	0801152d 	.word	0x0801152d
       case STATE_AMS_CHARGE_0:
           state_r2 = ams_charge_0_function();
 80114f4:	f7ff fed4 	bl	80112a0 <ams_charge_0_function>
 80114f8:	4603      	mov	r3, r0
 80114fa:	461a      	mov	r2, r3
 80114fc:	4b2e      	ldr	r3, [pc, #184]	; (80115b8 <ams_charge_function+0x128>)
 80114fe:	701a      	strb	r2, [r3, #0]
           break;
 8011500:	e01e      	b.n	8011540 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_CHARGE:
           state_r2 = ams_charge_charge_function();
 8011502:	f7ff fedd 	bl	80112c0 <ams_charge_charge_function>
 8011506:	4603      	mov	r3, r0
 8011508:	461a      	mov	r2, r3
 801150a:	4b2b      	ldr	r3, [pc, #172]	; (80115b8 <ams_charge_function+0x128>)
 801150c:	701a      	strb	r2, [r3, #0]
           break;
 801150e:	e017      	b.n	8011540 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_END_CHARGE:
           state_r2 = ams_charge_end_charge_function();
 8011510:	f7ff ff0e 	bl	8011330 <ams_charge_end_charge_function>
 8011514:	4603      	mov	r3, r0
 8011516:	461a      	mov	r2, r3
 8011518:	4b27      	ldr	r3, [pc, #156]	; (80115b8 <ams_charge_function+0x128>)
 801151a:	701a      	strb	r2, [r3, #0]
           break;
 801151c:	e010      	b.n	8011540 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_EXIT:
           state_r2 = ams_charge_exit_function();
 801151e:	f7ff ff85 	bl	801142c <ams_charge_exit_function>
 8011522:	4603      	mov	r3, r0
 8011524:	461a      	mov	r2, r3
 8011526:	4b24      	ldr	r3, [pc, #144]	; (80115b8 <ams_charge_function+0x128>)
 8011528:	701a      	strb	r2, [r3, #0]
           break;
 801152a:	e009      	b.n	8011540 <ams_charge_function+0xb0>
       case STATE_AMS_CHARGE_FORCE_QUIT:
           state_r2 = ams_charge_force_quit_function();
 801152c:	f7ff ff96 	bl	801145c <ams_charge_force_quit_function>
 8011530:	4603      	mov	r3, r0
 8011532:	461a      	mov	r2, r3
 8011534:	4b20      	ldr	r3, [pc, #128]	; (80115b8 <ams_charge_function+0x128>)
 8011536:	701a      	strb	r2, [r3, #0]
           break;
 8011538:	e002      	b.n	8011540 <ams_charge_function+0xb0>
       default:
           ams_error();
 801153a:	f7fe fefc 	bl	8010336 <ams_error>
           break;
 801153e:	bf00      	nop
   }

   if(ams_inputs.ams_error||ams_inputs.imd_error||ams_outputs.error) {
 8011540:	4b1c      	ldr	r3, [pc, #112]	; (80115b4 <ams_charge_function+0x124>)
 8011542:	7f5b      	ldrb	r3, [r3, #29]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d108      	bne.n	801155a <ams_charge_function+0xca>
 8011548:	4b1a      	ldr	r3, [pc, #104]	; (80115b4 <ams_charge_function+0x124>)
 801154a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801154e:	2b00      	cmp	r3, #0
 8011550:	d103      	bne.n	801155a <ams_charge_function+0xca>
 8011552:	4b1a      	ldr	r3, [pc, #104]	; (80115bc <ams_charge_function+0x12c>)
 8011554:	78db      	ldrb	r3, [r3, #3]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d005      	beq.n	8011566 <ams_charge_function+0xd6>
       timer_r1 = 0;
 801155a:	4b15      	ldr	r3, [pc, #84]	; (80115b0 <ams_charge_function+0x120>)
 801155c:	f04f 0200 	mov.w	r2, #0
 8011560:	601a      	str	r2, [r3, #0]
       return STATE_AMS_ERROR;
 8011562:	2312      	movs	r3, #18
 8011564:	e01b      	b.n	801159e <ams_charge_function+0x10e>
   }

   if(ams_outputs.charge_complete) {
 8011566:	4b15      	ldr	r3, [pc, #84]	; (80115bc <ams_charge_function+0x12c>)
 8011568:	7a9b      	ldrb	r3, [r3, #10]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00b      	beq.n	8011586 <ams_charge_function+0xf6>
       ams_outputs.charge_complete=0;
 801156e:	4b13      	ldr	r3, [pc, #76]	; (80115bc <ams_charge_function+0x12c>)
 8011570:	2200      	movs	r2, #0
 8011572:	729a      	strb	r2, [r3, #10]
       ams_outputs.enable_charger=0;
 8011574:	4b11      	ldr	r3, [pc, #68]	; (80115bc <ams_charge_function+0x12c>)
 8011576:	2200      	movs	r2, #0
 8011578:	715a      	strb	r2, [r3, #5]
       timer_r1 = 0;
 801157a:	4b0d      	ldr	r3, [pc, #52]	; (80115b0 <ams_charge_function+0x120>)
 801157c:	f04f 0200 	mov.w	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 8011582:	2327      	movs	r3, #39	; 0x27
 8011584:	e00b      	b.n	801159e <ams_charge_function+0x10e>
   }


   timer_r1 += ams_inputs.Ts;
 8011586:	4b0b      	ldr	r3, [pc, #44]	; (80115b4 <ams_charge_function+0x124>)
 8011588:	ed93 7a06 	vldr	s14, [r3, #24]
 801158c:	4b08      	ldr	r3, [pc, #32]	; (80115b0 <ams_charge_function+0x120>)
 801158e:	edd3 7a00 	vldr	s15, [r3]
 8011592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011596:	4b06      	ldr	r3, [pc, #24]	; (80115b0 <ams_charge_function+0x120>)
 8011598:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_CHARGE;
 801159c:	2321      	movs	r3, #33	; 0x21
}
 801159e:	4618      	mov	r0, r3
 80115a0:	bdb0      	pop	{r4, r5, r7, pc}
 80115a2:	bf00      	nop
 80115a4:	f3af 8000 	nop.w
 80115a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80115ac:	3f50624d 	.word	0x3f50624d
 80115b0:	200017f8 	.word	0x200017f8
 80115b4:	2001b6f8 	.word	0x2001b6f8
 80115b8:	200017f2 	.word	0x200017f2
 80115bc:	2001b740 	.word	0x2001b740

080115c0 <ams_idle_function>:

ams_state_t ams_idle_function() {
 80115c0:	b580      	push	{r7, lr}
 80115c2:	af00      	add	r7, sp, #0
   if(ams_inputs.SC&&ams_inputs.drive) {
 80115c4:	4b26      	ldr	r3, [pc, #152]	; (8011660 <ams_idle_function+0xa0>)
 80115c6:	7f1b      	ldrb	r3, [r3, #28]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00a      	beq.n	80115e2 <ams_idle_function+0x22>
 80115cc:	4b24      	ldr	r3, [pc, #144]	; (8011660 <ams_idle_function+0xa0>)
 80115ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d005      	beq.n	80115e2 <ams_idle_function+0x22>
       timer_r1 = 0;
 80115d6:	4b23      	ldr	r3, [pc, #140]	; (8011664 <ams_idle_function+0xa4>)
 80115d8:	f04f 0200 	mov.w	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_DRIVE;
 80115de:	2302      	movs	r3, #2
 80115e0:	e037      	b.n	8011652 <ams_idle_function+0x92>
   }

   if(ams_inputs.SC&&ams_inputs.charge) {
 80115e2:	4b1f      	ldr	r3, [pc, #124]	; (8011660 <ams_idle_function+0xa0>)
 80115e4:	7f1b      	ldrb	r3, [r3, #28]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00d      	beq.n	8011606 <ams_idle_function+0x46>
 80115ea:	4b1d      	ldr	r3, [pc, #116]	; (8011660 <ams_idle_function+0xa0>)
 80115ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d008      	beq.n	8011606 <ams_idle_function+0x46>
       ams_outputs.enable_charger=1;
 80115f4:	4b1c      	ldr	r3, [pc, #112]	; (8011668 <ams_idle_function+0xa8>)
 80115f6:	2201      	movs	r2, #1
 80115f8:	715a      	strb	r2, [r3, #5]
       timer_r1 = 0;
 80115fa:	4b1a      	ldr	r3, [pc, #104]	; (8011664 <ams_idle_function+0xa4>)
 80115fc:	f04f 0200 	mov.w	r2, #0
 8011600:	601a      	str	r2, [r3, #0]
       return STATE_AMS_PRECHARGE_CHARGE;
 8011602:	2317      	movs	r3, #23
 8011604:	e025      	b.n	8011652 <ams_idle_function+0x92>
   }

   if(!ams_inputs.SC&&ams_inputs.balance&&(ams_inputs.cell_voltages_variance>0.01)) {
 8011606:	4b16      	ldr	r3, [pc, #88]	; (8011660 <ams_idle_function+0xa0>)
 8011608:	7f1b      	ldrb	r3, [r3, #28]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d115      	bne.n	801163a <ams_idle_function+0x7a>
 801160e:	4b14      	ldr	r3, [pc, #80]	; (8011660 <ams_idle_function+0xa0>)
 8011610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011614:	2b00      	cmp	r3, #0
 8011616:	d010      	beq.n	801163a <ams_idle_function+0x7a>
 8011618:	4b11      	ldr	r3, [pc, #68]	; (8011660 <ams_idle_function+0xa0>)
 801161a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801161e:	a30e      	add	r3, pc, #56	; (adr r3, 8011658 <ams_idle_function+0x98>)
 8011620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011624:	f7ef fa6a 	bl	8000afc <__aeabi_dcmpgt>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d005      	beq.n	801163a <ams_idle_function+0x7a>
       timer_r1 = 0;
 801162e:	4b0d      	ldr	r3, [pc, #52]	; (8011664 <ams_idle_function+0xa4>)
 8011630:	f04f 0200 	mov.w	r2, #0
 8011634:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE;
 8011636:	2328      	movs	r3, #40	; 0x28
 8011638:	e00b      	b.n	8011652 <ams_idle_function+0x92>
   }

   timer_r1 += ams_inputs.Ts;
 801163a:	4b09      	ldr	r3, [pc, #36]	; (8011660 <ams_idle_function+0xa0>)
 801163c:	ed93 7a06 	vldr	s14, [r3, #24]
 8011640:	4b08      	ldr	r3, [pc, #32]	; (8011664 <ams_idle_function+0xa4>)
 8011642:	edd3 7a00 	vldr	s15, [r3]
 8011646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801164a:	4b06      	ldr	r3, [pc, #24]	; (8011664 <ams_idle_function+0xa4>)
 801164c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_IDLE;
 8011650:	2327      	movs	r3, #39	; 0x27
}
 8011652:	4618      	mov	r0, r3
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	47ae147b 	.word	0x47ae147b
 801165c:	3f847ae1 	.word	0x3f847ae1
 8011660:	2001b6f8 	.word	0x2001b6f8
 8011664:	200017f8 	.word	0x200017f8
 8011668:	2001b740 	.word	0x2001b740

0801166c <ams_balance_0_function>:

ams_state_t ams_balance_0_function() {
 801166c:	b480      	push	{r7}
 801166e:	af00      	add	r7, sp, #0
   if(1) {
       timer_r2 = 0;
 8011670:	4b04      	ldr	r3, [pc, #16]	; (8011684 <ams_balance_0_function+0x18>)
 8011672:	f04f 0200 	mov.w	r2, #0
 8011676:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_BALANCE;
 8011678:	232a      	movs	r3, #42	; 0x2a
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_BALANCE_0;
}
 801167a:	4618      	mov	r0, r3
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr
 8011684:	200017fc 	.word	0x200017fc

08011688 <ams_balance_balance_function>:

ams_state_t ams_balance_balance_function() {
 8011688:	b580      	push	{r7, lr}
 801168a:	af00      	add	r7, sp, #0
   if(1) {
       do_cell_balancing();
 801168c:	f7f1 f9d6 	bl	8002a3c <do_cell_balancing>
       timer_r2 = 0;
 8011690:	4b03      	ldr	r3, [pc, #12]	; (80116a0 <ams_balance_balance_function+0x18>)
 8011692:	f04f 0200 	mov.w	r2, #0
 8011696:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_WAIT;
 8011698:	232b      	movs	r3, #43	; 0x2b
   }

   timer_r2 += ams_inputs.Ts;
   return STATE_AMS_BALANCE_BALANCE;
}
 801169a:	4618      	mov	r0, r3
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	200017fc 	.word	0x200017fc

080116a4 <ams_balance_wait_function>:

ams_state_t ams_balance_wait_function() {
 80116a4:	b480      	push	{r7}
 80116a6:	af00      	add	r7, sp, #0
   if((timer_r2 > 60)) {
 80116a8:	4b10      	ldr	r3, [pc, #64]	; (80116ec <ams_balance_wait_function+0x48>)
 80116aa:	edd3 7a00 	vldr	s15, [r3]
 80116ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80116f0 <ams_balance_wait_function+0x4c>
 80116b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80116b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ba:	dd05      	ble.n	80116c8 <ams_balance_wait_function+0x24>
       timer_r2 = 0;
 80116bc:	4b0b      	ldr	r3, [pc, #44]	; (80116ec <ams_balance_wait_function+0x48>)
 80116be:	f04f 0200 	mov.w	r2, #0
 80116c2:	601a      	str	r2, [r3, #0]
       return STATE_AMS_BALANCE_BALANCE;
 80116c4:	232a      	movs	r3, #42	; 0x2a
 80116c6:	e00b      	b.n	80116e0 <ams_balance_wait_function+0x3c>
   }

   timer_r2 += ams_inputs.Ts;
 80116c8:	4b0a      	ldr	r3, [pc, #40]	; (80116f4 <ams_balance_wait_function+0x50>)
 80116ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80116ce:	4b07      	ldr	r3, [pc, #28]	; (80116ec <ams_balance_wait_function+0x48>)
 80116d0:	edd3 7a00 	vldr	s15, [r3]
 80116d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116d8:	4b04      	ldr	r3, [pc, #16]	; (80116ec <ams_balance_wait_function+0x48>)
 80116da:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_BALANCE_WAIT;
 80116de:	232b      	movs	r3, #43	; 0x2b
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	200017fc 	.word	0x200017fc
 80116f0:	42700000 	.word	0x42700000
 80116f4:	2001b6f8 	.word	0x2001b6f8

080116f8 <ams_balance_function>:

ams_state_t ams_balance_function() {
 80116f8:	b5b0      	push	{r4, r5, r7, lr}
 80116fa:	af00      	add	r7, sp, #0
   if(timer_r1 < 0.001*ams_inputs.Ts) {
 80116fc:	4b38      	ldr	r3, [pc, #224]	; (80117e0 <ams_balance_function+0xe8>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4618      	mov	r0, r3
 8011702:	f7ee ff13 	bl	800052c <__aeabi_f2d>
 8011706:	4604      	mov	r4, r0
 8011708:	460d      	mov	r5, r1
 801170a:	4b36      	ldr	r3, [pc, #216]	; (80117e4 <ams_balance_function+0xec>)
 801170c:	699b      	ldr	r3, [r3, #24]
 801170e:	4618      	mov	r0, r3
 8011710:	f7ee ff0c 	bl	800052c <__aeabi_f2d>
 8011714:	a32e      	add	r3, pc, #184	; (adr r3, 80117d0 <ams_balance_function+0xd8>)
 8011716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171a:	f7ee ff5f 	bl	80005dc <__aeabi_dmul>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4620      	mov	r0, r4
 8011724:	4629      	mov	r1, r5
 8011726:	f7ef f9cb 	bl	8000ac0 <__aeabi_dcmplt>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d002      	beq.n	8011736 <ams_balance_function+0x3e>
       state_r2 = STATE_AMS_BALANCE_0;
 8011730:	4b2d      	ldr	r3, [pc, #180]	; (80117e8 <ams_balance_function+0xf0>)
 8011732:	2229      	movs	r2, #41	; 0x29
 8011734:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r2) {
 8011736:	4b2c      	ldr	r3, [pc, #176]	; (80117e8 <ams_balance_function+0xf0>)
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	2b2b      	cmp	r3, #43	; 0x2b
 801173c:	d014      	beq.n	8011768 <ams_balance_function+0x70>
 801173e:	2b2b      	cmp	r3, #43	; 0x2b
 8011740:	dc19      	bgt.n	8011776 <ams_balance_function+0x7e>
 8011742:	2b29      	cmp	r3, #41	; 0x29
 8011744:	d002      	beq.n	801174c <ams_balance_function+0x54>
 8011746:	2b2a      	cmp	r3, #42	; 0x2a
 8011748:	d007      	beq.n	801175a <ams_balance_function+0x62>
 801174a:	e014      	b.n	8011776 <ams_balance_function+0x7e>
       case STATE_AMS_BALANCE_0:
           state_r2 = ams_balance_0_function();
 801174c:	f7ff ff8e 	bl	801166c <ams_balance_0_function>
 8011750:	4603      	mov	r3, r0
 8011752:	461a      	mov	r2, r3
 8011754:	4b24      	ldr	r3, [pc, #144]	; (80117e8 <ams_balance_function+0xf0>)
 8011756:	701a      	strb	r2, [r3, #0]
           break;
 8011758:	e010      	b.n	801177c <ams_balance_function+0x84>
       case STATE_AMS_BALANCE_BALANCE:
           state_r2 = ams_balance_balance_function();
 801175a:	f7ff ff95 	bl	8011688 <ams_balance_balance_function>
 801175e:	4603      	mov	r3, r0
 8011760:	461a      	mov	r2, r3
 8011762:	4b21      	ldr	r3, [pc, #132]	; (80117e8 <ams_balance_function+0xf0>)
 8011764:	701a      	strb	r2, [r3, #0]
           break;
 8011766:	e009      	b.n	801177c <ams_balance_function+0x84>
       case STATE_AMS_BALANCE_WAIT:
           state_r2 = ams_balance_wait_function();
 8011768:	f7ff ff9c 	bl	80116a4 <ams_balance_wait_function>
 801176c:	4603      	mov	r3, r0
 801176e:	461a      	mov	r2, r3
 8011770:	4b1d      	ldr	r3, [pc, #116]	; (80117e8 <ams_balance_function+0xf0>)
 8011772:	701a      	strb	r2, [r3, #0]
           break;
 8011774:	e002      	b.n	801177c <ams_balance_function+0x84>
       default:
           ams_error();
 8011776:	f7fe fdde 	bl	8010336 <ams_error>
           break;
 801177a:	bf00      	nop
   }

   if(ams_inputs.SC||(!ams_inputs.balance)||(ams_inputs.cell_voltages_variance<0.005)) {
 801177c:	4b19      	ldr	r3, [pc, #100]	; (80117e4 <ams_balance_function+0xec>)
 801177e:	7f1b      	ldrb	r3, [r3, #28]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d10f      	bne.n	80117a4 <ams_balance_function+0xac>
 8011784:	4b17      	ldr	r3, [pc, #92]	; (80117e4 <ams_balance_function+0xec>)
 8011786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00a      	beq.n	80117a4 <ams_balance_function+0xac>
 801178e:	4b15      	ldr	r3, [pc, #84]	; (80117e4 <ams_balance_function+0xec>)
 8011790:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011794:	a310      	add	r3, pc, #64	; (adr r3, 80117d8 <ams_balance_function+0xe0>)
 8011796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179a:	f7ef f991 	bl	8000ac0 <__aeabi_dcmplt>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d007      	beq.n	80117b4 <ams_balance_function+0xbc>
       end_cell_balancing();
 80117a4:	f7f1 f986 	bl	8002ab4 <end_cell_balancing>
       timer_r1 = 0;
 80117a8:	4b0d      	ldr	r3, [pc, #52]	; (80117e0 <ams_balance_function+0xe8>)
 80117aa:	f04f 0200 	mov.w	r2, #0
 80117ae:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 80117b0:	2327      	movs	r3, #39	; 0x27
 80117b2:	e00b      	b.n	80117cc <ams_balance_function+0xd4>
   }


   timer_r1 += ams_inputs.Ts;
 80117b4:	4b0b      	ldr	r3, [pc, #44]	; (80117e4 <ams_balance_function+0xec>)
 80117b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80117ba:	4b09      	ldr	r3, [pc, #36]	; (80117e0 <ams_balance_function+0xe8>)
 80117bc:	edd3 7a00 	vldr	s15, [r3]
 80117c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117c4:	4b06      	ldr	r3, [pc, #24]	; (80117e0 <ams_balance_function+0xe8>)
 80117c6:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS_BALANCE;
 80117ca:	2328      	movs	r3, #40	; 0x28
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	bdb0      	pop	{r4, r5, r7, pc}
 80117d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80117d4:	3f50624d 	.word	0x3f50624d
 80117d8:	47ae147b 	.word	0x47ae147b
 80117dc:	3f747ae1 	.word	0x3f747ae1
 80117e0:	200017f8 	.word	0x200017f8
 80117e4:	2001b6f8 	.word	0x2001b6f8
 80117e8:	200017f2 	.word	0x200017f2

080117ec <ams_0_function>:

ams_state_t ams_0_function() {
 80117ec:	b480      	push	{r7}
 80117ee:	af00      	add	r7, sp, #0
   if(1) {
       timer_r1 = 0;
 80117f0:	4b04      	ldr	r3, [pc, #16]	; (8011804 <ams_0_function+0x18>)
 80117f2:	f04f 0200 	mov.w	r2, #0
 80117f6:	601a      	str	r2, [r3, #0]
       return STATE_AMS_IDLE;
 80117f8:	2327      	movs	r3, #39	; 0x27
   }

   timer_r1 += ams_inputs.Ts;
   return STATE_AMS_0;
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	200017f8 	.word	0x200017f8

08011808 <ams_function>:

ams_state_t ams_function() {
 8011808:	b5b0      	push	{r4, r5, r7, lr}
 801180a:	af00      	add	r7, sp, #0
   if(timer_r0 < 0.001*ams_inputs.Ts) {
 801180c:	4b64      	ldr	r3, [pc, #400]	; (80119a0 <ams_function+0x198>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4618      	mov	r0, r3
 8011812:	f7ee fe8b 	bl	800052c <__aeabi_f2d>
 8011816:	4604      	mov	r4, r0
 8011818:	460d      	mov	r5, r1
 801181a:	4b62      	ldr	r3, [pc, #392]	; (80119a4 <ams_function+0x19c>)
 801181c:	699b      	ldr	r3, [r3, #24]
 801181e:	4618      	mov	r0, r3
 8011820:	f7ee fe84 	bl	800052c <__aeabi_f2d>
 8011824:	a35c      	add	r3, pc, #368	; (adr r3, 8011998 <ams_function+0x190>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	f7ee fed7 	bl	80005dc <__aeabi_dmul>
 801182e:	4602      	mov	r2, r0
 8011830:	460b      	mov	r3, r1
 8011832:	4620      	mov	r0, r4
 8011834:	4629      	mov	r1, r5
 8011836:	f7ef f943 	bl	8000ac0 <__aeabi_dcmplt>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <ams_function+0x3e>
       state_r1 = STATE_AMS_0;
 8011840:	4b59      	ldr	r3, [pc, #356]	; (80119a8 <ams_function+0x1a0>)
 8011842:	222c      	movs	r2, #44	; 0x2c
 8011844:	701a      	strb	r2, [r3, #0]
   }

   switch(state_r1) {
 8011846:	4b58      	ldr	r3, [pc, #352]	; (80119a8 <ams_function+0x1a0>)
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	3b02      	subs	r3, #2
 801184c:	2b2a      	cmp	r3, #42	; 0x2a
 801184e:	f200 8091 	bhi.w	8011974 <ams_function+0x16c>
 8011852:	a201      	add	r2, pc, #4	; (adr r2, 8011858 <ams_function+0x50>)
 8011854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011858:	08011905 	.word	0x08011905
 801185c:	08011975 	.word	0x08011975
 8011860:	08011975 	.word	0x08011975
 8011864:	08011975 	.word	0x08011975
 8011868:	08011975 	.word	0x08011975
 801186c:	08011975 	.word	0x08011975
 8011870:	08011975 	.word	0x08011975
 8011874:	08011975 	.word	0x08011975
 8011878:	08011975 	.word	0x08011975
 801187c:	08011975 	.word	0x08011975
 8011880:	08011913 	.word	0x08011913
 8011884:	08011975 	.word	0x08011975
 8011888:	08011975 	.word	0x08011975
 801188c:	08011975 	.word	0x08011975
 8011890:	08011975 	.word	0x08011975
 8011894:	08011975 	.word	0x08011975
 8011898:	08011921 	.word	0x08011921
 801189c:	08011975 	.word	0x08011975
 80118a0:	08011975 	.word	0x08011975
 80118a4:	08011975 	.word	0x08011975
 80118a8:	08011975 	.word	0x08011975
 80118ac:	0801192f 	.word	0x0801192f
 80118b0:	08011975 	.word	0x08011975
 80118b4:	08011975 	.word	0x08011975
 80118b8:	08011975 	.word	0x08011975
 80118bc:	08011975 	.word	0x08011975
 80118c0:	08011975 	.word	0x08011975
 80118c4:	08011975 	.word	0x08011975
 80118c8:	08011975 	.word	0x08011975
 80118cc:	08011975 	.word	0x08011975
 80118d0:	08011975 	.word	0x08011975
 80118d4:	0801193d 	.word	0x0801193d
 80118d8:	08011975 	.word	0x08011975
 80118dc:	08011975 	.word	0x08011975
 80118e0:	08011975 	.word	0x08011975
 80118e4:	08011975 	.word	0x08011975
 80118e8:	08011975 	.word	0x08011975
 80118ec:	0801194b 	.word	0x0801194b
 80118f0:	08011959 	.word	0x08011959
 80118f4:	08011975 	.word	0x08011975
 80118f8:	08011975 	.word	0x08011975
 80118fc:	08011975 	.word	0x08011975
 8011900:	08011967 	.word	0x08011967
       case STATE_AMS_PRECHARGE_DRIVE:
           state_r1 = ams_precharge_drive_function();
 8011904:	f7fe feec 	bl	80106e0 <ams_precharge_drive_function>
 8011908:	4603      	mov	r3, r0
 801190a:	461a      	mov	r2, r3
 801190c:	4b26      	ldr	r3, [pc, #152]	; (80119a8 <ams_function+0x1a0>)
 801190e:	701a      	strb	r2, [r3, #0]
           break;
 8011910:	e033      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_DRIVE:
           state_r1 = ams_drive_function();
 8011912:	f7ff f88d 	bl	8010a30 <ams_drive_function>
 8011916:	4603      	mov	r3, r0
 8011918:	461a      	mov	r2, r3
 801191a:	4b23      	ldr	r3, [pc, #140]	; (80119a8 <ams_function+0x1a0>)
 801191c:	701a      	strb	r2, [r3, #0]
           break;
 801191e:	e02c      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_ERROR:
           state_r1 = ams_error_function();
 8011920:	f7ff f98e 	bl	8010c40 <ams_error_function>
 8011924:	4603      	mov	r3, r0
 8011926:	461a      	mov	r2, r3
 8011928:	4b1f      	ldr	r3, [pc, #124]	; (80119a8 <ams_function+0x1a0>)
 801192a:	701a      	strb	r2, [r3, #0]
           break;
 801192c:	e025      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_PRECHARGE_CHARGE:
           state_r1 = ams_precharge_charge_function();
 801192e:	f7ff fbff 	bl	8011130 <ams_precharge_charge_function>
 8011932:	4603      	mov	r3, r0
 8011934:	461a      	mov	r2, r3
 8011936:	4b1c      	ldr	r3, [pc, #112]	; (80119a8 <ams_function+0x1a0>)
 8011938:	701a      	strb	r2, [r3, #0]
           break;
 801193a:	e01e      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_CHARGE:
           state_r1 = ams_charge_function();
 801193c:	f7ff fda8 	bl	8011490 <ams_charge_function>
 8011940:	4603      	mov	r3, r0
 8011942:	461a      	mov	r2, r3
 8011944:	4b18      	ldr	r3, [pc, #96]	; (80119a8 <ams_function+0x1a0>)
 8011946:	701a      	strb	r2, [r3, #0]
           break;
 8011948:	e017      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_IDLE:
           state_r1 = ams_idle_function();
 801194a:	f7ff fe39 	bl	80115c0 <ams_idle_function>
 801194e:	4603      	mov	r3, r0
 8011950:	461a      	mov	r2, r3
 8011952:	4b15      	ldr	r3, [pc, #84]	; (80119a8 <ams_function+0x1a0>)
 8011954:	701a      	strb	r2, [r3, #0]
           break;
 8011956:	e010      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_BALANCE:
           state_r1 = ams_balance_function();
 8011958:	f7ff fece 	bl	80116f8 <ams_balance_function>
 801195c:	4603      	mov	r3, r0
 801195e:	461a      	mov	r2, r3
 8011960:	4b11      	ldr	r3, [pc, #68]	; (80119a8 <ams_function+0x1a0>)
 8011962:	701a      	strb	r2, [r3, #0]
           break;
 8011964:	e009      	b.n	801197a <ams_function+0x172>
       case STATE_AMS_0:
           state_r1 = ams_0_function();
 8011966:	f7ff ff41 	bl	80117ec <ams_0_function>
 801196a:	4603      	mov	r3, r0
 801196c:	461a      	mov	r2, r3
 801196e:	4b0e      	ldr	r3, [pc, #56]	; (80119a8 <ams_function+0x1a0>)
 8011970:	701a      	strb	r2, [r3, #0]
           break;
 8011972:	e002      	b.n	801197a <ams_function+0x172>
       default:
           ams_error();
 8011974:	f7fe fcdf 	bl	8010336 <ams_error>
           break;
 8011978:	bf00      	nop
   }

   timer_r0 += ams_inputs.Ts;
 801197a:	4b0a      	ldr	r3, [pc, #40]	; (80119a4 <ams_function+0x19c>)
 801197c:	ed93 7a06 	vldr	s14, [r3, #24]
 8011980:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <ams_function+0x198>)
 8011982:	edd3 7a00 	vldr	s15, [r3]
 8011986:	ee77 7a27 	vadd.f32	s15, s14, s15
 801198a:	4b05      	ldr	r3, [pc, #20]	; (80119a0 <ams_function+0x198>)
 801198c:	edc3 7a00 	vstr	s15, [r3]
   return STATE_AMS;
 8011990:	2301      	movs	r3, #1
}
 8011992:	4618      	mov	r0, r3
 8011994:	bdb0      	pop	{r4, r5, r7, pc}
 8011996:	bf00      	nop
 8011998:	d2f1a9fc 	.word	0xd2f1a9fc
 801199c:	3f50624d 	.word	0x3f50624d
 80119a0:	200017f4 	.word	0x200017f4
 80119a4:	2001b6f8 	.word	0x2001b6f8
 80119a8:	200017f1 	.word	0x200017f1

080119ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80119ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80119e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80119b0:	480d      	ldr	r0, [pc, #52]	; (80119e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80119b2:	490e      	ldr	r1, [pc, #56]	; (80119ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80119b4:	4a0e      	ldr	r2, [pc, #56]	; (80119f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80119b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80119b8:	e002      	b.n	80119c0 <LoopCopyDataInit>

080119ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80119ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80119bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80119be:	3304      	adds	r3, #4

080119c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80119c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80119c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80119c4:	d3f9      	bcc.n	80119ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80119c6:	4a0b      	ldr	r2, [pc, #44]	; (80119f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80119c8:	4c0b      	ldr	r4, [pc, #44]	; (80119f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80119ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80119cc:	e001      	b.n	80119d2 <LoopFillZerobss>

080119ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80119ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80119d0:	3204      	adds	r2, #4

080119d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80119d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80119d4:	d3fb      	bcc.n	80119ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80119d6:	f7f3 fa37 	bl	8004e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80119da:	f009 fcf7 	bl	801b3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80119de:	f7f1 f953 	bl	8002c88 <main>
  bx  lr    
 80119e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80119e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80119e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80119ec:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 80119f0:	0801c8b0 	.word	0x0801c8b0
  ldr r2, =_sbss
 80119f4:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 80119f8:	2001ed04 	.word	0x2001ed04

080119fc <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80119fc:	e7fe      	b.n	80119fc <CAN1_SCE_IRQHandler>
	...

08011a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011a04:	4b0e      	ldr	r3, [pc, #56]	; (8011a40 <HAL_Init+0x40>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4a0d      	ldr	r2, [pc, #52]	; (8011a40 <HAL_Init+0x40>)
 8011a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011a10:	4b0b      	ldr	r3, [pc, #44]	; (8011a40 <HAL_Init+0x40>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4a0a      	ldr	r2, [pc, #40]	; (8011a40 <HAL_Init+0x40>)
 8011a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011a1c:	4b08      	ldr	r3, [pc, #32]	; (8011a40 <HAL_Init+0x40>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4a07      	ldr	r2, [pc, #28]	; (8011a40 <HAL_Init+0x40>)
 8011a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011a28:	2003      	movs	r0, #3
 8011a2a:	f001 fa8a 	bl	8012f42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011a2e:	200f      	movs	r0, #15
 8011a30:	f7f3 f92c 	bl	8004c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011a34:	f7f3 f8fe 	bl	8004c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011a38:	2300      	movs	r3, #0
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	40023c00 	.word	0x40023c00

08011a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011a44:	b480      	push	{r7}
 8011a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011a48:	4b06      	ldr	r3, [pc, #24]	; (8011a64 <HAL_IncTick+0x20>)
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	4b06      	ldr	r3, [pc, #24]	; (8011a68 <HAL_IncTick+0x24>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4413      	add	r3, r2
 8011a54:	4a04      	ldr	r2, [pc, #16]	; (8011a68 <HAL_IncTick+0x24>)
 8011a56:	6013      	str	r3, [r2, #0]
}
 8011a58:	bf00      	nop
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
 8011a64:	2000143c 	.word	0x2000143c
 8011a68:	2001ec0c 	.word	0x2001ec0c

08011a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8011a70:	4b03      	ldr	r3, [pc, #12]	; (8011a80 <HAL_GetTick+0x14>)
 8011a72:	681b      	ldr	r3, [r3, #0]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	2001ec0c 	.word	0x2001ec0c

08011a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011a8c:	f7ff ffee 	bl	8011a6c <HAL_GetTick>
 8011a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a9c:	d005      	beq.n	8011aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011a9e:	4b0a      	ldr	r3, [pc, #40]	; (8011ac8 <HAL_Delay+0x44>)
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011aaa:	bf00      	nop
 8011aac:	f7ff ffde 	bl	8011a6c <HAL_GetTick>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d8f7      	bhi.n	8011aac <HAL_Delay+0x28>
  {
  }
}
 8011abc:	bf00      	nop
 8011abe:	bf00      	nop
 8011ac0:	3710      	adds	r7, #16
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	2000143c 	.word	0x2000143c

08011acc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d101      	bne.n	8011ae2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e033      	b.n	8011b4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d109      	bne.n	8011afe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7f0 fb84 	bl	80021f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b02:	f003 0310 	and.w	r3, r3, #16
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d118      	bne.n	8011b3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8011b12:	f023 0302 	bic.w	r3, r3, #2
 8011b16:	f043 0202 	orr.w	r2, r3, #2
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f000 fba8 	bl	8012274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2200      	movs	r2, #0
 8011b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b2e:	f023 0303 	bic.w	r3, r3, #3
 8011b32:	f043 0201 	orr.w	r2, r3, #1
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	641a      	str	r2, [r3, #64]	; 0x40
 8011b3a:	e001      	b.n	8011b40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	60fb      	str	r3, [r7, #12]
 8011b5e:	2300      	movs	r3, #0
 8011b60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f003 0302 	and.w	r3, r3, #2
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	bf0c      	ite	eq
 8011b70:	2301      	moveq	r3, #1
 8011b72:	2300      	movne	r3, #0
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	f003 0320 	and.w	r3, r3, #32
 8011b82:	2b20      	cmp	r3, #32
 8011b84:	bf0c      	ite	eq
 8011b86:	2301      	moveq	r3, #1
 8011b88:	2300      	movne	r3, #0
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d049      	beq.n	8011c28 <HAL_ADC_IRQHandler+0xd6>
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d046      	beq.n	8011c28 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b9e:	f003 0310 	and.w	r3, r3, #16
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d105      	bne.n	8011bb2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	689b      	ldr	r3, [r3, #8]
 8011bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d12b      	bne.n	8011c18 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d127      	bne.n	8011c18 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d006      	beq.n	8011be4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d119      	bne.n	8011c18 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	685a      	ldr	r2, [r3, #4]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f022 0220 	bic.w	r2, r2, #32
 8011bf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d105      	bne.n	8011c18 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c10:	f043 0201 	orr.w	r2, r3, #1
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f7f0 fd55 	bl	80026c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f06f 0212 	mvn.w	r2, #18
 8011c26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	f003 0304 	and.w	r3, r3, #4
 8011c32:	2b04      	cmp	r3, #4
 8011c34:	bf0c      	ite	eq
 8011c36:	2301      	moveq	r3, #1
 8011c38:	2300      	movne	r3, #0
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c48:	2b80      	cmp	r3, #128	; 0x80
 8011c4a:	bf0c      	ite	eq
 8011c4c:	2301      	moveq	r3, #1
 8011c4e:	2300      	movne	r3, #0
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d057      	beq.n	8011d0a <HAL_ADC_IRQHandler+0x1b8>
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d054      	beq.n	8011d0a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c64:	f003 0310 	and.w	r3, r3, #16
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d105      	bne.n	8011c78 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d139      	bne.n	8011cfa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d006      	beq.n	8011ca2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	689b      	ldr	r3, [r3, #8]
 8011c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d12b      	bne.n	8011cfa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d124      	bne.n	8011cfa <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	689b      	ldr	r3, [r3, #8]
 8011cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d11d      	bne.n	8011cfa <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d119      	bne.n	8011cfa <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	685a      	ldr	r2, [r3, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011cd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d105      	bne.n	8011cfa <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf2:	f043 0201 	orr.w	r2, r3, #1
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 fc38 	bl	8012570 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f06f 020c 	mvn.w	r2, #12
 8011d08:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f003 0301 	and.w	r3, r3, #1
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	bf0c      	ite	eq
 8011d18:	2301      	moveq	r3, #1
 8011d1a:	2300      	movne	r3, #0
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d2a:	2b40      	cmp	r3, #64	; 0x40
 8011d2c:	bf0c      	ite	eq
 8011d2e:	2301      	moveq	r3, #1
 8011d30:	2300      	movne	r3, #0
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d017      	beq.n	8011d6c <HAL_ADC_IRQHandler+0x21a>
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d014      	beq.n	8011d6c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f003 0301 	and.w	r3, r3, #1
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d10d      	bne.n	8011d6c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f953 	bl	8012008 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f06f 0201 	mvn.w	r2, #1
 8011d6a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f003 0320 	and.w	r3, r3, #32
 8011d76:	2b20      	cmp	r3, #32
 8011d78:	bf0c      	ite	eq
 8011d7a:	2301      	moveq	r3, #1
 8011d7c:	2300      	movne	r3, #0
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d90:	bf0c      	ite	eq
 8011d92:	2301      	moveq	r3, #1
 8011d94:	2300      	movne	r3, #0
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d015      	beq.n	8011dcc <HAL_ADC_IRQHandler+0x27a>
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d012      	beq.n	8011dcc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011daa:	f043 0202 	orr.w	r2, r3, #2
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f06f 0220 	mvn.w	r2, #32
 8011dba:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f000 f92d 	bl	801201c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f06f 0220 	mvn.w	r2, #32
 8011dca:	601a      	str	r2, [r3, #0]
  }
}
 8011dcc:	bf00      	nop
 8011dce:	3710      	adds	r7, #16
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b086      	sub	sp, #24
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8011de0:	2300      	movs	r3, #0
 8011de2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d101      	bne.n	8011df2 <HAL_ADC_Start_DMA+0x1e>
 8011dee:	2302      	movs	r3, #2
 8011df0:	e0e9      	b.n	8011fc6 <HAL_ADC_Start_DMA+0x1f2>
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2201      	movs	r2, #1
 8011df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	689b      	ldr	r3, [r3, #8]
 8011e00:	f003 0301 	and.w	r3, r3, #1
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d018      	beq.n	8011e3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	689a      	ldr	r2, [r3, #8]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f042 0201 	orr.w	r2, r2, #1
 8011e16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8011e18:	4b6d      	ldr	r3, [pc, #436]	; (8011fd0 <HAL_ADC_Start_DMA+0x1fc>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a6d      	ldr	r2, [pc, #436]	; (8011fd4 <HAL_ADC_Start_DMA+0x200>)
 8011e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8011e22:	0c9a      	lsrs	r2, r3, #18
 8011e24:	4613      	mov	r3, r2
 8011e26:	005b      	lsls	r3, r3, #1
 8011e28:	4413      	add	r3, r2
 8011e2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011e2c:	e002      	b.n	8011e34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	3b01      	subs	r3, #1
 8011e32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1f9      	bne.n	8011e2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e48:	d107      	bne.n	8011e5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	689a      	ldr	r2, [r3, #8]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011e58:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	f003 0301 	and.w	r3, r3, #1
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	f040 80a1 	bne.w	8011fac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8011e72:	f023 0301 	bic.w	r3, r3, #1
 8011e76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d007      	beq.n	8011e9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ea8:	d106      	bne.n	8011eb8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eae:	f023 0206 	bic.w	r2, r3, #6
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	645a      	str	r2, [r3, #68]	; 0x44
 8011eb6:	e002      	b.n	8011ebe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011ec6:	4b44      	ldr	r3, [pc, #272]	; (8011fd8 <HAL_ADC_Start_DMA+0x204>)
 8011ec8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ece:	4a43      	ldr	r2, [pc, #268]	; (8011fdc <HAL_ADC_Start_DMA+0x208>)
 8011ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed6:	4a42      	ldr	r2, [pc, #264]	; (8011fe0 <HAL_ADC_Start_DMA+0x20c>)
 8011ed8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ede:	4a41      	ldr	r2, [pc, #260]	; (8011fe4 <HAL_ADC_Start_DMA+0x210>)
 8011ee0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011eea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011efa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	689a      	ldr	r2, [r3, #8]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011f0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	334c      	adds	r3, #76	; 0x4c
 8011f16:	4619      	mov	r1, r3
 8011f18:	68ba      	ldr	r2, [r7, #8]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f001 f8f4 	bl	8013108 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	f003 031f 	and.w	r3, r3, #31
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d12a      	bne.n	8011f82 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a2d      	ldr	r2, [pc, #180]	; (8011fe8 <HAL_ADC_Start_DMA+0x214>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d015      	beq.n	8011f62 <HAL_ADC_Start_DMA+0x18e>
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4a2c      	ldr	r2, [pc, #176]	; (8011fec <HAL_ADC_Start_DMA+0x218>)
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d105      	bne.n	8011f4c <HAL_ADC_Start_DMA+0x178>
 8011f40:	4b25      	ldr	r3, [pc, #148]	; (8011fd8 <HAL_ADC_Start_DMA+0x204>)
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	f003 031f 	and.w	r3, r3, #31
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00a      	beq.n	8011f62 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a27      	ldr	r2, [pc, #156]	; (8011ff0 <HAL_ADC_Start_DMA+0x21c>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d136      	bne.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
 8011f56:	4b20      	ldr	r3, [pc, #128]	; (8011fd8 <HAL_ADC_Start_DMA+0x204>)
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	f003 0310 	and.w	r3, r3, #16
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d130      	bne.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d129      	bne.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	689a      	ldr	r2, [r3, #8]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011f7e:	609a      	str	r2, [r3, #8]
 8011f80:	e020      	b.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	4a18      	ldr	r2, [pc, #96]	; (8011fe8 <HAL_ADC_Start_DMA+0x214>)
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d11b      	bne.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d114      	bne.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	689a      	ldr	r2, [r3, #8]
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011fa8:	609a      	str	r2, [r3, #8]
 8011faa:	e00b      	b.n	8011fc4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fb0:	f043 0210 	orr.w	r2, r3, #16
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fbc:	f043 0201 	orr.w	r2, r3, #1
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8011fc4:	2300      	movs	r3, #0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3718      	adds	r7, #24
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	20000084 	.word	0x20000084
 8011fd4:	431bde83 	.word	0x431bde83
 8011fd8:	40012300 	.word	0x40012300
 8011fdc:	0801246d 	.word	0x0801246d
 8011fe0:	08012527 	.word	0x08012527
 8011fe4:	08012543 	.word	0x08012543
 8011fe8:	40012000 	.word	0x40012000
 8011fec:	40012100 	.word	0x40012100
 8011ff0:	40012200 	.word	0x40012200

08011ff4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8012010:	bf00      	nop
 8012012:	370c      	adds	r7, #12
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801203a:	2300      	movs	r3, #0
 801203c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012044:	2b01      	cmp	r3, #1
 8012046:	d101      	bne.n	801204c <HAL_ADC_ConfigChannel+0x1c>
 8012048:	2302      	movs	r3, #2
 801204a:	e105      	b.n	8012258 <HAL_ADC_ConfigChannel+0x228>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2201      	movs	r2, #1
 8012050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b09      	cmp	r3, #9
 801205a:	d925      	bls.n	80120a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	68d9      	ldr	r1, [r3, #12]
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	b29b      	uxth	r3, r3
 8012068:	461a      	mov	r2, r3
 801206a:	4613      	mov	r3, r2
 801206c:	005b      	lsls	r3, r3, #1
 801206e:	4413      	add	r3, r2
 8012070:	3b1e      	subs	r3, #30
 8012072:	2207      	movs	r2, #7
 8012074:	fa02 f303 	lsl.w	r3, r2, r3
 8012078:	43da      	mvns	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	400a      	ands	r2, r1
 8012080:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	68d9      	ldr	r1, [r3, #12]
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	689a      	ldr	r2, [r3, #8]
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	b29b      	uxth	r3, r3
 8012092:	4618      	mov	r0, r3
 8012094:	4603      	mov	r3, r0
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	4403      	add	r3, r0
 801209a:	3b1e      	subs	r3, #30
 801209c:	409a      	lsls	r2, r3
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	430a      	orrs	r2, r1
 80120a4:	60da      	str	r2, [r3, #12]
 80120a6:	e022      	b.n	80120ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6919      	ldr	r1, [r3, #16]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	461a      	mov	r2, r3
 80120b6:	4613      	mov	r3, r2
 80120b8:	005b      	lsls	r3, r3, #1
 80120ba:	4413      	add	r3, r2
 80120bc:	2207      	movs	r2, #7
 80120be:	fa02 f303 	lsl.w	r3, r2, r3
 80120c2:	43da      	mvns	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	400a      	ands	r2, r1
 80120ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6919      	ldr	r1, [r3, #16]
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	689a      	ldr	r2, [r3, #8]
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	b29b      	uxth	r3, r3
 80120dc:	4618      	mov	r0, r3
 80120de:	4603      	mov	r3, r0
 80120e0:	005b      	lsls	r3, r3, #1
 80120e2:	4403      	add	r3, r0
 80120e4:	409a      	lsls	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	430a      	orrs	r2, r1
 80120ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	2b06      	cmp	r3, #6
 80120f4:	d824      	bhi.n	8012140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	685a      	ldr	r2, [r3, #4]
 8012100:	4613      	mov	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	4413      	add	r3, r2
 8012106:	3b05      	subs	r3, #5
 8012108:	221f      	movs	r2, #31
 801210a:	fa02 f303 	lsl.w	r3, r2, r3
 801210e:	43da      	mvns	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	400a      	ands	r2, r1
 8012116:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	b29b      	uxth	r3, r3
 8012124:	4618      	mov	r0, r3
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	685a      	ldr	r2, [r3, #4]
 801212a:	4613      	mov	r3, r2
 801212c:	009b      	lsls	r3, r3, #2
 801212e:	4413      	add	r3, r2
 8012130:	3b05      	subs	r3, #5
 8012132:	fa00 f203 	lsl.w	r2, r0, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	430a      	orrs	r2, r1
 801213c:	635a      	str	r2, [r3, #52]	; 0x34
 801213e:	e04c      	b.n	80121da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	2b0c      	cmp	r3, #12
 8012146:	d824      	bhi.n	8012192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	685a      	ldr	r2, [r3, #4]
 8012152:	4613      	mov	r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	4413      	add	r3, r2
 8012158:	3b23      	subs	r3, #35	; 0x23
 801215a:	221f      	movs	r2, #31
 801215c:	fa02 f303 	lsl.w	r3, r2, r3
 8012160:	43da      	mvns	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	400a      	ands	r2, r1
 8012168:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	b29b      	uxth	r3, r3
 8012176:	4618      	mov	r0, r3
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	685a      	ldr	r2, [r3, #4]
 801217c:	4613      	mov	r3, r2
 801217e:	009b      	lsls	r3, r3, #2
 8012180:	4413      	add	r3, r2
 8012182:	3b23      	subs	r3, #35	; 0x23
 8012184:	fa00 f203 	lsl.w	r2, r0, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	430a      	orrs	r2, r1
 801218e:	631a      	str	r2, [r3, #48]	; 0x30
 8012190:	e023      	b.n	80121da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	685a      	ldr	r2, [r3, #4]
 801219c:	4613      	mov	r3, r2
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	4413      	add	r3, r2
 80121a2:	3b41      	subs	r3, #65	; 0x41
 80121a4:	221f      	movs	r2, #31
 80121a6:	fa02 f303 	lsl.w	r3, r2, r3
 80121aa:	43da      	mvns	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	400a      	ands	r2, r1
 80121b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	b29b      	uxth	r3, r3
 80121c0:	4618      	mov	r0, r3
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	685a      	ldr	r2, [r3, #4]
 80121c6:	4613      	mov	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	4413      	add	r3, r2
 80121cc:	3b41      	subs	r3, #65	; 0x41
 80121ce:	fa00 f203 	lsl.w	r2, r0, r3
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	430a      	orrs	r2, r1
 80121d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80121da:	4b22      	ldr	r3, [pc, #136]	; (8012264 <HAL_ADC_ConfigChannel+0x234>)
 80121dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4a21      	ldr	r2, [pc, #132]	; (8012268 <HAL_ADC_ConfigChannel+0x238>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d109      	bne.n	80121fc <HAL_ADC_ConfigChannel+0x1cc>
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b12      	cmp	r3, #18
 80121ee:	d105      	bne.n	80121fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a19      	ldr	r2, [pc, #100]	; (8012268 <HAL_ADC_ConfigChannel+0x238>)
 8012202:	4293      	cmp	r3, r2
 8012204:	d123      	bne.n	801224e <HAL_ADC_ConfigChannel+0x21e>
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2b10      	cmp	r3, #16
 801220c:	d003      	beq.n	8012216 <HAL_ADC_ConfigChannel+0x1e6>
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b11      	cmp	r3, #17
 8012214:	d11b      	bne.n	801224e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b10      	cmp	r3, #16
 8012228:	d111      	bne.n	801224e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801222a:	4b10      	ldr	r3, [pc, #64]	; (801226c <HAL_ADC_ConfigChannel+0x23c>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4a10      	ldr	r2, [pc, #64]	; (8012270 <HAL_ADC_ConfigChannel+0x240>)
 8012230:	fba2 2303 	umull	r2, r3, r2, r3
 8012234:	0c9a      	lsrs	r2, r3, #18
 8012236:	4613      	mov	r3, r2
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	4413      	add	r3, r2
 801223c:	005b      	lsls	r3, r3, #1
 801223e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012240:	e002      	b.n	8012248 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	3b01      	subs	r3, #1
 8012246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d1f9      	bne.n	8012242 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8012256:	2300      	movs	r3, #0
}
 8012258:	4618      	mov	r0, r3
 801225a:	3714      	adds	r7, #20
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	40012300 	.word	0x40012300
 8012268:	40012000 	.word	0x40012000
 801226c:	20000084 	.word	0x20000084
 8012270:	431bde83 	.word	0x431bde83

08012274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8012274:	b480      	push	{r7}
 8012276:	b085      	sub	sp, #20
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801227c:	4b79      	ldr	r3, [pc, #484]	; (8012464 <ADC_Init+0x1f0>)
 801227e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	685a      	ldr	r2, [r3, #4]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	431a      	orrs	r2, r3
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	685a      	ldr	r2, [r3, #4]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80122a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	6859      	ldr	r1, [r3, #4]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	691b      	ldr	r3, [r3, #16]
 80122b4:	021a      	lsls	r2, r3, #8
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	430a      	orrs	r2, r1
 80122bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80122cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	6859      	ldr	r1, [r3, #4]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	689a      	ldr	r2, [r3, #8]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	430a      	orrs	r2, r1
 80122de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	689a      	ldr	r2, [r3, #8]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80122ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	6899      	ldr	r1, [r3, #8]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	68da      	ldr	r2, [r3, #12]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	430a      	orrs	r2, r1
 8012300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012306:	4a58      	ldr	r2, [pc, #352]	; (8012468 <ADC_Init+0x1f4>)
 8012308:	4293      	cmp	r3, r2
 801230a:	d022      	beq.n	8012352 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	689a      	ldr	r2, [r3, #8]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801231a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	6899      	ldr	r1, [r3, #8]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	430a      	orrs	r2, r1
 801232c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	689a      	ldr	r2, [r3, #8]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801233c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	6899      	ldr	r1, [r3, #8]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	430a      	orrs	r2, r1
 801234e:	609a      	str	r2, [r3, #8]
 8012350:	e00f      	b.n	8012372 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	689a      	ldr	r2, [r3, #8]
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8012360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	689a      	ldr	r2, [r3, #8]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012370:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	689a      	ldr	r2, [r3, #8]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f022 0202 	bic.w	r2, r2, #2
 8012380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	6899      	ldr	r1, [r3, #8]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7e1b      	ldrb	r3, [r3, #24]
 801238c:	005a      	lsls	r2, r3, #1
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	430a      	orrs	r2, r1
 8012394:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f893 3020 	ldrb.w	r3, [r3, #32]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d01b      	beq.n	80123d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	685a      	ldr	r2, [r3, #4]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80123ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80123be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	6859      	ldr	r1, [r3, #4]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ca:	3b01      	subs	r3, #1
 80123cc:	035a      	lsls	r2, r3, #13
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	430a      	orrs	r2, r1
 80123d4:	605a      	str	r2, [r3, #4]
 80123d6:	e007      	b.n	80123e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	685a      	ldr	r2, [r3, #4]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80123e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80123f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	69db      	ldr	r3, [r3, #28]
 8012402:	3b01      	subs	r3, #1
 8012404:	051a      	lsls	r2, r3, #20
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	430a      	orrs	r2, r1
 801240c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	689a      	ldr	r2, [r3, #8]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801241c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	6899      	ldr	r1, [r3, #8]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801242a:	025a      	lsls	r2, r3, #9
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	430a      	orrs	r2, r1
 8012432:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	689a      	ldr	r2, [r3, #8]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	6899      	ldr	r1, [r3, #8]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	695b      	ldr	r3, [r3, #20]
 801244e:	029a      	lsls	r2, r3, #10
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	430a      	orrs	r2, r1
 8012456:	609a      	str	r2, [r3, #8]
}
 8012458:	bf00      	nop
 801245a:	3714      	adds	r7, #20
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr
 8012464:	40012300 	.word	0x40012300
 8012468:	0f000001 	.word	0x0f000001

0801246c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012478:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801247e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012482:	2b00      	cmp	r3, #0
 8012484:	d13c      	bne.n	8012500 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801248a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	689b      	ldr	r3, [r3, #8]
 8012498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801249c:	2b00      	cmp	r3, #0
 801249e:	d12b      	bne.n	80124f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d127      	bne.n	80124f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d006      	beq.n	80124c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d119      	bne.n	80124f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	685a      	ldr	r2, [r3, #4]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f022 0220 	bic.w	r2, r2, #32
 80124d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d105      	bne.n	80124f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124f0:	f043 0201 	orr.w	r2, r3, #1
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	f7f0 f8e5 	bl	80026c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80124fe:	e00e      	b.n	801251e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012504:	f003 0310 	and.w	r3, r3, #16
 8012508:	2b00      	cmp	r3, #0
 801250a:	d003      	beq.n	8012514 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f7ff fd85 	bl	801201c <HAL_ADC_ErrorCallback>
}
 8012512:	e004      	b.n	801251e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	4798      	blx	r3
}
 801251e:	bf00      	nop
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b084      	sub	sp, #16
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012532:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f7ff fd5d 	bl	8011ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801253a:	bf00      	nop
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b084      	sub	sp, #16
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801254e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2240      	movs	r2, #64	; 0x40
 8012554:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801255a:	f043 0204 	orr.w	r2, r3, #4
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f7ff fd5a 	bl	801201c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8012568:	bf00      	nop
 801256a:	3710      	adds	r7, #16
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8012570:	b480      	push	{r7}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d101      	bne.n	8012596 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8012592:	2301      	movs	r3, #1
 8012594:	e0ed      	b.n	8012772 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f893 3020 	ldrb.w	r3, [r3, #32]
 801259c:	b2db      	uxtb	r3, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d102      	bne.n	80125a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7f0 f90c 	bl	80027c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f042 0201 	orr.w	r2, r2, #1
 80125b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80125b8:	f7ff fa58 	bl	8011a6c <HAL_GetTick>
 80125bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80125be:	e012      	b.n	80125e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80125c0:	f7ff fa54 	bl	8011a6c <HAL_GetTick>
 80125c4:	4602      	mov	r2, r0
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	1ad3      	subs	r3, r2, r3
 80125ca:	2b0a      	cmp	r3, #10
 80125cc:	d90b      	bls.n	80125e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2205      	movs	r2, #5
 80125de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80125e2:	2301      	movs	r3, #1
 80125e4:	e0c5      	b.n	8012772 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	f003 0301 	and.w	r3, r3, #1
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d0e5      	beq.n	80125c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f022 0202 	bic.w	r2, r2, #2
 8012602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012604:	f7ff fa32 	bl	8011a6c <HAL_GetTick>
 8012608:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801260a:	e012      	b.n	8012632 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801260c:	f7ff fa2e 	bl	8011a6c <HAL_GetTick>
 8012610:	4602      	mov	r2, r0
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	1ad3      	subs	r3, r2, r3
 8012616:	2b0a      	cmp	r3, #10
 8012618:	d90b      	bls.n	8012632 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2205      	movs	r2, #5
 801262a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801262e:	2301      	movs	r3, #1
 8012630:	e09f      	b.n	8012772 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	f003 0302 	and.w	r3, r3, #2
 801263c:	2b00      	cmp	r3, #0
 801263e:	d1e5      	bne.n	801260c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	7e1b      	ldrb	r3, [r3, #24]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d108      	bne.n	801265a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	681a      	ldr	r2, [r3, #0]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	e007      	b.n	801266a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012668:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	7e5b      	ldrb	r3, [r3, #25]
 801266e:	2b01      	cmp	r3, #1
 8012670:	d108      	bne.n	8012684 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012680:	601a      	str	r2, [r3, #0]
 8012682:	e007      	b.n	8012694 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012692:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	7e9b      	ldrb	r3, [r3, #26]
 8012698:	2b01      	cmp	r3, #1
 801269a:	d108      	bne.n	80126ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	681a      	ldr	r2, [r3, #0]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f042 0220 	orr.w	r2, r2, #32
 80126aa:	601a      	str	r2, [r3, #0]
 80126ac:	e007      	b.n	80126be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f022 0220 	bic.w	r2, r2, #32
 80126bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	7edb      	ldrb	r3, [r3, #27]
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d108      	bne.n	80126d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f022 0210 	bic.w	r2, r2, #16
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	e007      	b.n	80126e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f042 0210 	orr.w	r2, r2, #16
 80126e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	7f1b      	ldrb	r3, [r3, #28]
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d108      	bne.n	8012702 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f042 0208 	orr.w	r2, r2, #8
 80126fe:	601a      	str	r2, [r3, #0]
 8012700:	e007      	b.n	8012712 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f022 0208 	bic.w	r2, r2, #8
 8012710:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	7f5b      	ldrb	r3, [r3, #29]
 8012716:	2b01      	cmp	r3, #1
 8012718:	d108      	bne.n	801272c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f042 0204 	orr.w	r2, r2, #4
 8012728:	601a      	str	r2, [r3, #0]
 801272a:	e007      	b.n	801273c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f022 0204 	bic.w	r2, r2, #4
 801273a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	689a      	ldr	r2, [r3, #8]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	431a      	orrs	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	691b      	ldr	r3, [r3, #16]
 801274a:	431a      	orrs	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	695b      	ldr	r3, [r3, #20]
 8012750:	ea42 0103 	orr.w	r1, r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	1e5a      	subs	r2, r3, #1
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	430a      	orrs	r2, r1
 8012760:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2201      	movs	r2, #1
 801276c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8012770:	2300      	movs	r3, #0
}
 8012772:	4618      	mov	r0, r3
 8012774:	3710      	adds	r7, #16
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801277a:	b480      	push	{r7}
 801277c:	b087      	sub	sp, #28
 801277e:	af00      	add	r7, sp, #0
 8012780:	60f8      	str	r0, [r7, #12]
 8012782:	60b9      	str	r1, [r7, #8]
 8012784:	607a      	str	r2, [r7, #4]
 8012786:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801278e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	2b01      	cmp	r3, #1
 8012794:	d003      	beq.n	801279e <HAL_CAN_GetRxMessage+0x24>
 8012796:	7dfb      	ldrb	r3, [r7, #23]
 8012798:	2b02      	cmp	r3, #2
 801279a:	f040 80f3 	bne.w	8012984 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d10e      	bne.n	80127c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	f003 0303 	and.w	r3, r3, #3
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d116      	bne.n	80127e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	e0e7      	b.n	8012992 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	691b      	ldr	r3, [r3, #16]
 80127c8:	f003 0303 	and.w	r3, r3, #3
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d107      	bne.n	80127e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80127dc:	2301      	movs	r3, #1
 80127de:	e0d8      	b.n	8012992 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	331b      	adds	r3, #27
 80127e8:	011b      	lsls	r3, r3, #4
 80127ea:	4413      	add	r3, r2
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f003 0204 	and.w	r2, r3, #4
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d10c      	bne.n	8012818 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	331b      	adds	r3, #27
 8012806:	011b      	lsls	r3, r3, #4
 8012808:	4413      	add	r3, r2
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	0d5b      	lsrs	r3, r3, #21
 801280e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	e00b      	b.n	8012830 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	331b      	adds	r3, #27
 8012820:	011b      	lsls	r3, r3, #4
 8012822:	4413      	add	r3, r2
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	08db      	lsrs	r3, r3, #3
 8012828:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	331b      	adds	r3, #27
 8012838:	011b      	lsls	r3, r3, #4
 801283a:	4413      	add	r3, r2
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f003 0202 	and.w	r2, r3, #2
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	331b      	adds	r3, #27
 801284e:	011b      	lsls	r3, r3, #4
 8012850:	4413      	add	r3, r2
 8012852:	3304      	adds	r3, #4
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	f003 020f 	and.w	r2, r3, #15
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	331b      	adds	r3, #27
 8012866:	011b      	lsls	r3, r3, #4
 8012868:	4413      	add	r3, r2
 801286a:	3304      	adds	r3, #4
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	0a1b      	lsrs	r3, r3, #8
 8012870:	b2da      	uxtb	r2, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	331b      	adds	r3, #27
 801287e:	011b      	lsls	r3, r3, #4
 8012880:	4413      	add	r3, r2
 8012882:	3304      	adds	r3, #4
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	0c1b      	lsrs	r3, r3, #16
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	681a      	ldr	r2, [r3, #0]
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	011b      	lsls	r3, r3, #4
 8012896:	4413      	add	r3, r2
 8012898:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	b2da      	uxtb	r2, r3
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	011b      	lsls	r3, r3, #4
 80128ac:	4413      	add	r3, r2
 80128ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	0a1a      	lsrs	r2, r3, #8
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	3301      	adds	r3, #1
 80128ba:	b2d2      	uxtb	r2, r2
 80128bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	011b      	lsls	r3, r3, #4
 80128c6:	4413      	add	r3, r2
 80128c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	0c1a      	lsrs	r2, r3, #16
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	3302      	adds	r3, #2
 80128d4:	b2d2      	uxtb	r2, r2
 80128d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	011b      	lsls	r3, r3, #4
 80128e0:	4413      	add	r3, r2
 80128e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	0e1a      	lsrs	r2, r3, #24
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	3303      	adds	r3, #3
 80128ee:	b2d2      	uxtb	r2, r2
 80128f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	011b      	lsls	r3, r3, #4
 80128fa:	4413      	add	r3, r2
 80128fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	3304      	adds	r3, #4
 8012906:	b2d2      	uxtb	r2, r2
 8012908:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	011b      	lsls	r3, r3, #4
 8012912:	4413      	add	r3, r2
 8012914:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	0a1a      	lsrs	r2, r3, #8
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	3305      	adds	r3, #5
 8012920:	b2d2      	uxtb	r2, r2
 8012922:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	011b      	lsls	r3, r3, #4
 801292c:	4413      	add	r3, r2
 801292e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	0c1a      	lsrs	r2, r3, #16
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	3306      	adds	r3, #6
 801293a:	b2d2      	uxtb	r2, r2
 801293c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	011b      	lsls	r3, r3, #4
 8012946:	4413      	add	r3, r2
 8012948:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	0e1a      	lsrs	r2, r3, #24
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	3307      	adds	r3, #7
 8012954:	b2d2      	uxtb	r2, r2
 8012956:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d108      	bne.n	8012970 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	68da      	ldr	r2, [r3, #12]
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f042 0220 	orr.w	r2, r2, #32
 801296c:	60da      	str	r2, [r3, #12]
 801296e:	e007      	b.n	8012980 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	691a      	ldr	r2, [r3, #16]
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	f042 0220 	orr.w	r2, r2, #32
 801297e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8012980:	2300      	movs	r3, #0
 8012982:	e006      	b.n	8012992 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012988:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8012990:	2301      	movs	r3, #1
  }
}
 8012992:	4618      	mov	r0, r3
 8012994:	371c      	adds	r7, #28
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801299e:	b580      	push	{r7, lr}
 80129a0:	b08a      	sub	sp, #40	; 0x28
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80129a6:	2300      	movs	r3, #0
 80129a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	695b      	ldr	r3, [r3, #20]
 80129b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	691b      	ldr	r3, [r3, #16]
 80129d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	699b      	ldr	r3, [r3, #24]
 80129d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80129da:	6a3b      	ldr	r3, [r7, #32]
 80129dc:	f003 0301 	and.w	r3, r3, #1
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d07c      	beq.n	8012ade <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	f003 0301 	and.w	r3, r3, #1
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d023      	beq.n	8012a36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2201      	movs	r2, #1
 80129f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	f003 0302 	and.w	r3, r3, #2
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d003      	beq.n	8012a08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 f983 	bl	8012d0c <HAL_CAN_TxMailbox0CompleteCallback>
 8012a06:	e016      	b.n	8012a36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	f003 0304 	and.w	r3, r3, #4
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d004      	beq.n	8012a1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8012a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012a18:	627b      	str	r3, [r7, #36]	; 0x24
 8012a1a:	e00c      	b.n	8012a36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	f003 0308 	and.w	r3, r3, #8
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d004      	beq.n	8012a30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8012a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8012a2e:	e002      	b.n	8012a36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 f989 	bl	8012d48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d024      	beq.n	8012a8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d003      	beq.n	8012a5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f000 f963 	bl	8012d20 <HAL_CAN_TxMailbox1CompleteCallback>
 8012a5a:	e016      	b.n	8012a8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8012a5c:	69bb      	ldr	r3, [r7, #24]
 8012a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d004      	beq.n	8012a70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8012a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8012a6e:	e00c      	b.n	8012a8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d004      	beq.n	8012a84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8012a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012a80:	627b      	str	r3, [r7, #36]	; 0x24
 8012a82:	e002      	b.n	8012a8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 f969 	bl	8012d5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d024      	beq.n	8012ade <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012a9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d003      	beq.n	8012ab0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f943 	bl	8012d34 <HAL_CAN_TxMailbox2CompleteCallback>
 8012aae:	e016      	b.n	8012ade <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d004      	beq.n	8012ac4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8012aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8012ac2:	e00c      	b.n	8012ade <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8012ac4:	69bb      	ldr	r3, [r7, #24]
 8012ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d004      	beq.n	8012ad8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8012ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ad6:	e002      	b.n	8012ade <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 f949 	bl	8012d70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8012ade:	6a3b      	ldr	r3, [r7, #32]
 8012ae0:	f003 0308 	and.w	r3, r3, #8
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d00c      	beq.n	8012b02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	f003 0310 	and.w	r3, r3, #16
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d007      	beq.n	8012b02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8012af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012af8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2210      	movs	r2, #16
 8012b00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8012b02:	6a3b      	ldr	r3, [r7, #32]
 8012b04:	f003 0304 	and.w	r3, r3, #4
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00b      	beq.n	8012b24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	f003 0308 	and.w	r3, r3, #8
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d006      	beq.n	8012b24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2208      	movs	r2, #8
 8012b1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 f930 	bl	8012d84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8012b24:	6a3b      	ldr	r3, [r7, #32]
 8012b26:	f003 0302 	and.w	r3, r3, #2
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d009      	beq.n	8012b42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	f003 0303 	and.w	r3, r3, #3
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d002      	beq.n	8012b42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7ee fe17 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8012b42:	6a3b      	ldr	r3, [r7, #32]
 8012b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d00c      	beq.n	8012b66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	f003 0310 	and.w	r3, r3, #16
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d007      	beq.n	8012b66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8012b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2210      	movs	r2, #16
 8012b64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8012b66:	6a3b      	ldr	r3, [r7, #32]
 8012b68:	f003 0320 	and.w	r3, r3, #32
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d00b      	beq.n	8012b88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	f003 0308 	and.w	r3, r3, #8
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d006      	beq.n	8012b88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2208      	movs	r2, #8
 8012b80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f000 f908 	bl	8012d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	f003 0310 	and.w	r3, r3, #16
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d009      	beq.n	8012ba6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	691b      	ldr	r3, [r3, #16]
 8012b98:	f003 0303 	and.w	r3, r3, #3
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d002      	beq.n	8012ba6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7ee fe31 	bl	8001808 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8012ba6:	6a3b      	ldr	r3, [r7, #32]
 8012ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00b      	beq.n	8012bc8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	f003 0310 	and.w	r3, r3, #16
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d006      	beq.n	8012bc8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2210      	movs	r2, #16
 8012bc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 f8f2 	bl	8012dac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00b      	beq.n	8012bea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	f003 0308 	and.w	r3, r3, #8
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d006      	beq.n	8012bea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2208      	movs	r2, #8
 8012be2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f000 f8eb 	bl	8012dc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8012bea:	6a3b      	ldr	r3, [r7, #32]
 8012bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d07b      	beq.n	8012cec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	f003 0304 	and.w	r3, r3, #4
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d072      	beq.n	8012ce4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012bfe:	6a3b      	ldr	r3, [r7, #32]
 8012c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d008      	beq.n	8012c1a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d003      	beq.n	8012c1a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	f043 0301 	orr.w	r3, r3, #1
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012c1a:	6a3b      	ldr	r3, [r7, #32]
 8012c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d008      	beq.n	8012c36 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d003      	beq.n	8012c36 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8012c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c30:	f043 0302 	orr.w	r3, r3, #2
 8012c34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012c36:	6a3b      	ldr	r3, [r7, #32]
 8012c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d008      	beq.n	8012c52 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d003      	beq.n	8012c52 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4c:	f043 0304 	orr.w	r3, r3, #4
 8012c50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012c52:	6a3b      	ldr	r3, [r7, #32]
 8012c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d043      	beq.n	8012ce4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d03e      	beq.n	8012ce4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012c6c:	2b60      	cmp	r3, #96	; 0x60
 8012c6e:	d02b      	beq.n	8012cc8 <HAL_CAN_IRQHandler+0x32a>
 8012c70:	2b60      	cmp	r3, #96	; 0x60
 8012c72:	d82e      	bhi.n	8012cd2 <HAL_CAN_IRQHandler+0x334>
 8012c74:	2b50      	cmp	r3, #80	; 0x50
 8012c76:	d022      	beq.n	8012cbe <HAL_CAN_IRQHandler+0x320>
 8012c78:	2b50      	cmp	r3, #80	; 0x50
 8012c7a:	d82a      	bhi.n	8012cd2 <HAL_CAN_IRQHandler+0x334>
 8012c7c:	2b40      	cmp	r3, #64	; 0x40
 8012c7e:	d019      	beq.n	8012cb4 <HAL_CAN_IRQHandler+0x316>
 8012c80:	2b40      	cmp	r3, #64	; 0x40
 8012c82:	d826      	bhi.n	8012cd2 <HAL_CAN_IRQHandler+0x334>
 8012c84:	2b30      	cmp	r3, #48	; 0x30
 8012c86:	d010      	beq.n	8012caa <HAL_CAN_IRQHandler+0x30c>
 8012c88:	2b30      	cmp	r3, #48	; 0x30
 8012c8a:	d822      	bhi.n	8012cd2 <HAL_CAN_IRQHandler+0x334>
 8012c8c:	2b10      	cmp	r3, #16
 8012c8e:	d002      	beq.n	8012c96 <HAL_CAN_IRQHandler+0x2f8>
 8012c90:	2b20      	cmp	r3, #32
 8012c92:	d005      	beq.n	8012ca0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8012c94:	e01d      	b.n	8012cd2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	f043 0308 	orr.w	r3, r3, #8
 8012c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012c9e:	e019      	b.n	8012cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	f043 0310 	orr.w	r3, r3, #16
 8012ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012ca8:	e014      	b.n	8012cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	f043 0320 	orr.w	r3, r3, #32
 8012cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cb2:	e00f      	b.n	8012cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cbc:	e00a      	b.n	8012cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cc6:	e005      	b.n	8012cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cd0:	e000      	b.n	8012cd4 <HAL_CAN_IRQHandler+0x336>
            break;
 8012cd2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	699a      	ldr	r2, [r3, #24]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012ce2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2204      	movs	r2, #4
 8012cea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d008      	beq.n	8012d04 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf8:	431a      	orrs	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 f868 	bl	8012dd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8012d04:	bf00      	nop
 8012d06:	3728      	adds	r7, #40	; 0x28
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8012d28:	bf00      	nop
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8012d3c:	bf00      	nop
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr

08012d5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8012d64:	bf00      	nop
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8012d78:	bf00      	nop
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr

08012d84 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b083      	sub	sp, #12
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8012d8c:	bf00      	nop
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8012da0:	bf00      	nop
 8012da2:	370c      	adds	r7, #12
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b083      	sub	sp, #12
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8012db4:	bf00      	nop
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b083      	sub	sp, #12
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8012dc8:	bf00      	nop
 8012dca:	370c      	adds	r7, #12
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8012ddc:	bf00      	nop
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b085      	sub	sp, #20
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f003 0307 	and.w	r3, r3, #7
 8012df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012df8:	4b0c      	ldr	r3, [pc, #48]	; (8012e2c <__NVIC_SetPriorityGrouping+0x44>)
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012dfe:	68ba      	ldr	r2, [r7, #8]
 8012e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012e04:	4013      	ands	r3, r2
 8012e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012e1a:	4a04      	ldr	r2, [pc, #16]	; (8012e2c <__NVIC_SetPriorityGrouping+0x44>)
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	60d3      	str	r3, [r2, #12]
}
 8012e20:	bf00      	nop
 8012e22:	3714      	adds	r7, #20
 8012e24:	46bd      	mov	sp, r7
 8012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2a:	4770      	bx	lr
 8012e2c:	e000ed00 	.word	0xe000ed00

08012e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012e30:	b480      	push	{r7}
 8012e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012e34:	4b04      	ldr	r3, [pc, #16]	; (8012e48 <__NVIC_GetPriorityGrouping+0x18>)
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	0a1b      	lsrs	r3, r3, #8
 8012e3a:	f003 0307 	and.w	r3, r3, #7
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr
 8012e48:	e000ed00 	.word	0xe000ed00

08012e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	4603      	mov	r3, r0
 8012e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	db0b      	blt.n	8012e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e5e:	79fb      	ldrb	r3, [r7, #7]
 8012e60:	f003 021f 	and.w	r2, r3, #31
 8012e64:	4907      	ldr	r1, [pc, #28]	; (8012e84 <__NVIC_EnableIRQ+0x38>)
 8012e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e6a:	095b      	lsrs	r3, r3, #5
 8012e6c:	2001      	movs	r0, #1
 8012e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8012e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012e76:	bf00      	nop
 8012e78:	370c      	adds	r7, #12
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop
 8012e84:	e000e100 	.word	0xe000e100

08012e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	4603      	mov	r3, r0
 8012e90:	6039      	str	r1, [r7, #0]
 8012e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	db0a      	blt.n	8012eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	490c      	ldr	r1, [pc, #48]	; (8012ed4 <__NVIC_SetPriority+0x4c>)
 8012ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ea6:	0112      	lsls	r2, r2, #4
 8012ea8:	b2d2      	uxtb	r2, r2
 8012eaa:	440b      	add	r3, r1
 8012eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012eb0:	e00a      	b.n	8012ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	b2da      	uxtb	r2, r3
 8012eb6:	4908      	ldr	r1, [pc, #32]	; (8012ed8 <__NVIC_SetPriority+0x50>)
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	f003 030f 	and.w	r3, r3, #15
 8012ebe:	3b04      	subs	r3, #4
 8012ec0:	0112      	lsls	r2, r2, #4
 8012ec2:	b2d2      	uxtb	r2, r2
 8012ec4:	440b      	add	r3, r1
 8012ec6:	761a      	strb	r2, [r3, #24]
}
 8012ec8:	bf00      	nop
 8012eca:	370c      	adds	r7, #12
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr
 8012ed4:	e000e100 	.word	0xe000e100
 8012ed8:	e000ed00 	.word	0xe000ed00

08012edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b089      	sub	sp, #36	; 0x24
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f003 0307 	and.w	r3, r3, #7
 8012eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	f1c3 0307 	rsb	r3, r3, #7
 8012ef6:	2b04      	cmp	r3, #4
 8012ef8:	bf28      	it	cs
 8012efa:	2304      	movcs	r3, #4
 8012efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012efe:	69fb      	ldr	r3, [r7, #28]
 8012f00:	3304      	adds	r3, #4
 8012f02:	2b06      	cmp	r3, #6
 8012f04:	d902      	bls.n	8012f0c <NVIC_EncodePriority+0x30>
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	3b03      	subs	r3, #3
 8012f0a:	e000      	b.n	8012f0e <NVIC_EncodePriority+0x32>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012f10:	f04f 32ff 	mov.w	r2, #4294967295
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	fa02 f303 	lsl.w	r3, r2, r3
 8012f1a:	43da      	mvns	r2, r3
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	401a      	ands	r2, r3
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012f24:	f04f 31ff 	mov.w	r1, #4294967295
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8012f2e:	43d9      	mvns	r1, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012f34:	4313      	orrs	r3, r2
         );
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3724      	adds	r7, #36	; 0x24
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b082      	sub	sp, #8
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f7ff ff4c 	bl	8012de8 <__NVIC_SetPriorityGrouping>
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	4603      	mov	r3, r0
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
 8012f64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012f66:	2300      	movs	r3, #0
 8012f68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012f6a:	f7ff ff61 	bl	8012e30 <__NVIC_GetPriorityGrouping>
 8012f6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012f70:	687a      	ldr	r2, [r7, #4]
 8012f72:	68b9      	ldr	r1, [r7, #8]
 8012f74:	6978      	ldr	r0, [r7, #20]
 8012f76:	f7ff ffb1 	bl	8012edc <NVIC_EncodePriority>
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f80:	4611      	mov	r1, r2
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff ff80 	bl	8012e88 <__NVIC_SetPriority>
}
 8012f88:	bf00      	nop
 8012f8a:	3718      	adds	r7, #24
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	4603      	mov	r3, r0
 8012f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7ff ff54 	bl	8012e4c <__NVIC_EnableIRQ>
}
 8012fa4:	bf00      	nop
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b086      	sub	sp, #24
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012fb8:	f7fe fd58 	bl	8011a6c <HAL_GetTick>
 8012fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d101      	bne.n	8012fc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e099      	b.n	80130fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2202      	movs	r2, #2
 8012fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f022 0201 	bic.w	r2, r2, #1
 8012fe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012fe8:	e00f      	b.n	801300a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012fea:	f7fe fd3f 	bl	8011a6c <HAL_GetTick>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	2b05      	cmp	r3, #5
 8012ff6:	d908      	bls.n	801300a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2220      	movs	r2, #32
 8012ffc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2203      	movs	r2, #3
 8013002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8013006:	2303      	movs	r3, #3
 8013008:	e078      	b.n	80130fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f003 0301 	and.w	r3, r3, #1
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1e8      	bne.n	8012fea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8013020:	697a      	ldr	r2, [r7, #20]
 8013022:	4b38      	ldr	r3, [pc, #224]	; (8013104 <HAL_DMA_Init+0x158>)
 8013024:	4013      	ands	r3, r2
 8013026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	685a      	ldr	r2, [r3, #4]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	691b      	ldr	r3, [r3, #16]
 801303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	699b      	ldr	r3, [r3, #24]
 8013048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801304e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6a1b      	ldr	r3, [r3, #32]
 8013054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013056:	697a      	ldr	r2, [r7, #20]
 8013058:	4313      	orrs	r3, r2
 801305a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013060:	2b04      	cmp	r3, #4
 8013062:	d107      	bne.n	8013074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801306c:	4313      	orrs	r3, r2
 801306e:	697a      	ldr	r2, [r7, #20]
 8013070:	4313      	orrs	r3, r2
 8013072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	697a      	ldr	r2, [r7, #20]
 801307a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	695b      	ldr	r3, [r3, #20]
 8013082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	f023 0307 	bic.w	r3, r3, #7
 801308a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013090:	697a      	ldr	r2, [r7, #20]
 8013092:	4313      	orrs	r3, r2
 8013094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801309a:	2b04      	cmp	r3, #4
 801309c:	d117      	bne.n	80130ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a2:	697a      	ldr	r2, [r7, #20]
 80130a4:	4313      	orrs	r3, r2
 80130a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00e      	beq.n	80130ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 fa6f 	bl	8013594 <DMA_CheckFifoParam>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d008      	beq.n	80130ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2240      	movs	r2, #64	; 0x40
 80130c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2201      	movs	r2, #1
 80130c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80130ca:	2301      	movs	r3, #1
 80130cc:	e016      	b.n	80130fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	697a      	ldr	r2, [r7, #20]
 80130d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 fa26 	bl	8013528 <DMA_CalcBaseAndBitshift>
 80130dc:	4603      	mov	r3, r0
 80130de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130e4:	223f      	movs	r2, #63	; 0x3f
 80130e6:	409a      	lsls	r2, r3
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2200      	movs	r2, #0
 80130f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2201      	movs	r2, #1
 80130f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80130fa:	2300      	movs	r3, #0
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3718      	adds	r7, #24
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	f010803f 	.word	0xf010803f

08013108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013116:	2300      	movs	r3, #0
 8013118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801311e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013126:	2b01      	cmp	r3, #1
 8013128:	d101      	bne.n	801312e <HAL_DMA_Start_IT+0x26>
 801312a:	2302      	movs	r3, #2
 801312c:	e040      	b.n	80131b0 <HAL_DMA_Start_IT+0xa8>
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2201      	movs	r2, #1
 8013132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801313c:	b2db      	uxtb	r3, r3
 801313e:	2b01      	cmp	r3, #1
 8013140:	d12f      	bne.n	80131a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2202      	movs	r2, #2
 8013146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2200      	movs	r2, #0
 801314e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	68b9      	ldr	r1, [r7, #8]
 8013156:	68f8      	ldr	r0, [r7, #12]
 8013158:	f000 f9b8 	bl	80134cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013160:	223f      	movs	r2, #63	; 0x3f
 8013162:	409a      	lsls	r2, r3
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f042 0216 	orr.w	r2, r2, #22
 8013176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801317c:	2b00      	cmp	r3, #0
 801317e:	d007      	beq.n	8013190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f042 0208 	orr.w	r2, r2, #8
 801318e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	f042 0201 	orr.w	r2, r2, #1
 801319e:	601a      	str	r2, [r3, #0]
 80131a0:	e005      	b.n	80131ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80131aa:	2302      	movs	r3, #2
 80131ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80131ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3718      	adds	r7, #24
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b086      	sub	sp, #24
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80131c0:	2300      	movs	r3, #0
 80131c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80131c4:	4b92      	ldr	r3, [pc, #584]	; (8013410 <HAL_DMA_IRQHandler+0x258>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	4a92      	ldr	r2, [pc, #584]	; (8013414 <HAL_DMA_IRQHandler+0x25c>)
 80131ca:	fba2 2303 	umull	r2, r3, r2, r3
 80131ce:	0a9b      	lsrs	r3, r3, #10
 80131d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131e2:	2208      	movs	r2, #8
 80131e4:	409a      	lsls	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	4013      	ands	r3, r2
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d01a      	beq.n	8013224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f003 0304 	and.w	r3, r3, #4
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d013      	beq.n	8013224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f022 0204 	bic.w	r2, r2, #4
 801320a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013210:	2208      	movs	r2, #8
 8013212:	409a      	lsls	r2, r3
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801321c:	f043 0201 	orr.w	r2, r3, #1
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013228:	2201      	movs	r2, #1
 801322a:	409a      	lsls	r2, r3
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	4013      	ands	r3, r2
 8013230:	2b00      	cmp	r3, #0
 8013232:	d012      	beq.n	801325a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	695b      	ldr	r3, [r3, #20]
 801323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801323e:	2b00      	cmp	r3, #0
 8013240:	d00b      	beq.n	801325a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013246:	2201      	movs	r2, #1
 8013248:	409a      	lsls	r2, r3
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013252:	f043 0202 	orr.w	r2, r3, #2
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801325e:	2204      	movs	r2, #4
 8013260:	409a      	lsls	r2, r3
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	4013      	ands	r3, r2
 8013266:	2b00      	cmp	r3, #0
 8013268:	d012      	beq.n	8013290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f003 0302 	and.w	r3, r3, #2
 8013274:	2b00      	cmp	r3, #0
 8013276:	d00b      	beq.n	8013290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801327c:	2204      	movs	r2, #4
 801327e:	409a      	lsls	r2, r3
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013288:	f043 0204 	orr.w	r2, r3, #4
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013294:	2210      	movs	r2, #16
 8013296:	409a      	lsls	r2, r3
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	4013      	ands	r3, r2
 801329c:	2b00      	cmp	r3, #0
 801329e:	d043      	beq.n	8013328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f003 0308 	and.w	r3, r3, #8
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d03c      	beq.n	8013328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132b2:	2210      	movs	r2, #16
 80132b4:	409a      	lsls	r2, r3
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d018      	beq.n	80132fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d108      	bne.n	80132e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d024      	beq.n	8013328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	4798      	blx	r3
 80132e6:	e01f      	b.n	8013328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d01b      	beq.n	8013328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	4798      	blx	r3
 80132f8:	e016      	b.n	8013328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013304:	2b00      	cmp	r3, #0
 8013306:	d107      	bne.n	8013318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f022 0208 	bic.w	r2, r2, #8
 8013316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801331c:	2b00      	cmp	r3, #0
 801331e:	d003      	beq.n	8013328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801332c:	2220      	movs	r2, #32
 801332e:	409a      	lsls	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	4013      	ands	r3, r2
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 808e 	beq.w	8013456 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f003 0310 	and.w	r3, r3, #16
 8013344:	2b00      	cmp	r3, #0
 8013346:	f000 8086 	beq.w	8013456 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801334e:	2220      	movs	r2, #32
 8013350:	409a      	lsls	r2, r3
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801335c:	b2db      	uxtb	r3, r3
 801335e:	2b05      	cmp	r3, #5
 8013360:	d136      	bne.n	80133d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f022 0216 	bic.w	r2, r2, #22
 8013370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	695a      	ldr	r2, [r3, #20]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013386:	2b00      	cmp	r3, #0
 8013388:	d103      	bne.n	8013392 <HAL_DMA_IRQHandler+0x1da>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801338e:	2b00      	cmp	r3, #0
 8013390:	d007      	beq.n	80133a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	681a      	ldr	r2, [r3, #0]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	f022 0208 	bic.w	r2, r2, #8
 80133a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80133a6:	223f      	movs	r2, #63	; 0x3f
 80133a8:	409a      	lsls	r2, r3
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2201      	movs	r2, #1
 80133b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2200      	movs	r2, #0
 80133ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d07d      	beq.n	80134c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	4798      	blx	r3
        }
        return;
 80133ce:	e078      	b.n	80134c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d01c      	beq.n	8013418 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d108      	bne.n	80133fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d030      	beq.n	8013456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	4798      	blx	r3
 80133fc:	e02b      	b.n	8013456 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013402:	2b00      	cmp	r3, #0
 8013404:	d027      	beq.n	8013456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	4798      	blx	r3
 801340e:	e022      	b.n	8013456 <HAL_DMA_IRQHandler+0x29e>
 8013410:	20000084 	.word	0x20000084
 8013414:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013422:	2b00      	cmp	r3, #0
 8013424:	d10f      	bne.n	8013446 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f022 0210 	bic.w	r2, r2, #16
 8013434:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2201      	movs	r2, #1
 801343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2200      	movs	r2, #0
 8013442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801344a:	2b00      	cmp	r3, #0
 801344c:	d003      	beq.n	8013456 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801345a:	2b00      	cmp	r3, #0
 801345c:	d032      	beq.n	80134c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013462:	f003 0301 	and.w	r3, r3, #1
 8013466:	2b00      	cmp	r3, #0
 8013468:	d022      	beq.n	80134b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2205      	movs	r2, #5
 801346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f022 0201 	bic.w	r2, r2, #1
 8013480:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	3301      	adds	r3, #1
 8013486:	60bb      	str	r3, [r7, #8]
 8013488:	697a      	ldr	r2, [r7, #20]
 801348a:	429a      	cmp	r2, r3
 801348c:	d307      	bcc.n	801349e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f003 0301 	and.w	r3, r3, #1
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1f2      	bne.n	8013482 <HAL_DMA_IRQHandler+0x2ca>
 801349c:	e000      	b.n	80134a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801349e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2201      	movs	r2, #1
 80134a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d005      	beq.n	80134c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	4798      	blx	r3
 80134c0:	e000      	b.n	80134c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80134c2:	bf00      	nop
    }
  }
}
 80134c4:	3718      	adds	r7, #24
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop

080134cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80134cc:	b480      	push	{r7}
 80134ce:	b085      	sub	sp, #20
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
 80134d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80134e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	2b40      	cmp	r3, #64	; 0x40
 80134f8:	d108      	bne.n	801350c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801350a:	e007      	b.n	801351c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	60da      	str	r2, [r3, #12]
}
 801351c:	bf00      	nop
 801351e:	3714      	adds	r7, #20
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8013528:	b480      	push	{r7}
 801352a:	b085      	sub	sp, #20
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	b2db      	uxtb	r3, r3
 8013536:	3b10      	subs	r3, #16
 8013538:	4a14      	ldr	r2, [pc, #80]	; (801358c <DMA_CalcBaseAndBitshift+0x64>)
 801353a:	fba2 2303 	umull	r2, r3, r2, r3
 801353e:	091b      	lsrs	r3, r3, #4
 8013540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8013542:	4a13      	ldr	r2, [pc, #76]	; (8013590 <DMA_CalcBaseAndBitshift+0x68>)
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	4413      	add	r3, r2
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	461a      	mov	r2, r3
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2b03      	cmp	r3, #3
 8013554:	d909      	bls.n	801356a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801355e:	f023 0303 	bic.w	r3, r3, #3
 8013562:	1d1a      	adds	r2, r3, #4
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	659a      	str	r2, [r3, #88]	; 0x58
 8013568:	e007      	b.n	801357a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8013572:	f023 0303 	bic.w	r3, r3, #3
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801357e:	4618      	mov	r0, r3
 8013580:	3714      	adds	r7, #20
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	aaaaaaab 	.word	0xaaaaaaab
 8013590:	0801c7f8 	.word	0x0801c7f8

08013594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8013594:	b480      	push	{r7}
 8013596:	b085      	sub	sp, #20
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801359c:	2300      	movs	r3, #0
 801359e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	699b      	ldr	r3, [r3, #24]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d11f      	bne.n	80135ee <DMA_CheckFifoParam+0x5a>
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	2b03      	cmp	r3, #3
 80135b2:	d856      	bhi.n	8013662 <DMA_CheckFifoParam+0xce>
 80135b4:	a201      	add	r2, pc, #4	; (adr r2, 80135bc <DMA_CheckFifoParam+0x28>)
 80135b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135ba:	bf00      	nop
 80135bc:	080135cd 	.word	0x080135cd
 80135c0:	080135df 	.word	0x080135df
 80135c4:	080135cd 	.word	0x080135cd
 80135c8:	08013663 	.word	0x08013663
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d046      	beq.n	8013666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80135d8:	2301      	movs	r3, #1
 80135da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80135dc:	e043      	b.n	8013666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80135e6:	d140      	bne.n	801366a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80135e8:	2301      	movs	r3, #1
 80135ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80135ec:	e03d      	b.n	801366a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	699b      	ldr	r3, [r3, #24]
 80135f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135f6:	d121      	bne.n	801363c <DMA_CheckFifoParam+0xa8>
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	2b03      	cmp	r3, #3
 80135fc:	d837      	bhi.n	801366e <DMA_CheckFifoParam+0xda>
 80135fe:	a201      	add	r2, pc, #4	; (adr r2, 8013604 <DMA_CheckFifoParam+0x70>)
 8013600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013604:	08013615 	.word	0x08013615
 8013608:	0801361b 	.word	0x0801361b
 801360c:	08013615 	.word	0x08013615
 8013610:	0801362d 	.word	0x0801362d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8013614:	2301      	movs	r3, #1
 8013616:	73fb      	strb	r3, [r7, #15]
      break;
 8013618:	e030      	b.n	801367c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013622:	2b00      	cmp	r3, #0
 8013624:	d025      	beq.n	8013672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8013626:	2301      	movs	r3, #1
 8013628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801362a:	e022      	b.n	8013672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013634:	d11f      	bne.n	8013676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8013636:	2301      	movs	r3, #1
 8013638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801363a:	e01c      	b.n	8013676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	2b02      	cmp	r3, #2
 8013640:	d903      	bls.n	801364a <DMA_CheckFifoParam+0xb6>
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	2b03      	cmp	r3, #3
 8013646:	d003      	beq.n	8013650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013648:	e018      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801364a:	2301      	movs	r3, #1
 801364c:	73fb      	strb	r3, [r7, #15]
      break;
 801364e:	e015      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00e      	beq.n	801367a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801365c:	2301      	movs	r3, #1
 801365e:	73fb      	strb	r3, [r7, #15]
      break;
 8013660:	e00b      	b.n	801367a <DMA_CheckFifoParam+0xe6>
      break;
 8013662:	bf00      	nop
 8013664:	e00a      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      break;
 8013666:	bf00      	nop
 8013668:	e008      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      break;
 801366a:	bf00      	nop
 801366c:	e006      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      break;
 801366e:	bf00      	nop
 8013670:	e004      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      break;
 8013672:	bf00      	nop
 8013674:	e002      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      break;   
 8013676:	bf00      	nop
 8013678:	e000      	b.n	801367c <DMA_CheckFifoParam+0xe8>
      break;
 801367a:	bf00      	nop
    }
  } 
  
  return status; 
 801367c:	7bfb      	ldrb	r3, [r7, #15]
}
 801367e:	4618      	mov	r0, r3
 8013680:	3714      	adds	r7, #20
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop

0801368c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801368c:	b480      	push	{r7}
 801368e:	b089      	sub	sp, #36	; 0x24
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013696:	2300      	movs	r3, #0
 8013698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801369a:	2300      	movs	r3, #0
 801369c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801369e:	2300      	movs	r3, #0
 80136a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80136a2:	2300      	movs	r3, #0
 80136a4:	61fb      	str	r3, [r7, #28]
 80136a6:	e16b      	b.n	8013980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80136a8:	2201      	movs	r2, #1
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	fa02 f303 	lsl.w	r3, r2, r3
 80136b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	697a      	ldr	r2, [r7, #20]
 80136b8:	4013      	ands	r3, r2
 80136ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80136bc:	693a      	ldr	r2, [r7, #16]
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	429a      	cmp	r2, r3
 80136c2:	f040 815a 	bne.w	801397a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	f003 0303 	and.w	r3, r3, #3
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d005      	beq.n	80136de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80136da:	2b02      	cmp	r3, #2
 80136dc:	d130      	bne.n	8013740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	005b      	lsls	r3, r3, #1
 80136e8:	2203      	movs	r2, #3
 80136ea:	fa02 f303 	lsl.w	r3, r2, r3
 80136ee:	43db      	mvns	r3, r3
 80136f0:	69ba      	ldr	r2, [r7, #24]
 80136f2:	4013      	ands	r3, r2
 80136f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	68da      	ldr	r2, [r3, #12]
 80136fa:	69fb      	ldr	r3, [r7, #28]
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	fa02 f303 	lsl.w	r3, r2, r3
 8013702:	69ba      	ldr	r2, [r7, #24]
 8013704:	4313      	orrs	r3, r2
 8013706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	69ba      	ldr	r2, [r7, #24]
 801370c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013714:	2201      	movs	r2, #1
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	fa02 f303 	lsl.w	r3, r2, r3
 801371c:	43db      	mvns	r3, r3
 801371e:	69ba      	ldr	r2, [r7, #24]
 8013720:	4013      	ands	r3, r2
 8013722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	091b      	lsrs	r3, r3, #4
 801372a:	f003 0201 	and.w	r2, r3, #1
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	fa02 f303 	lsl.w	r3, r2, r3
 8013734:	69ba      	ldr	r2, [r7, #24]
 8013736:	4313      	orrs	r3, r2
 8013738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	69ba      	ldr	r2, [r7, #24]
 801373e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	f003 0303 	and.w	r3, r3, #3
 8013748:	2b03      	cmp	r3, #3
 801374a:	d017      	beq.n	801377c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	2203      	movs	r2, #3
 8013758:	fa02 f303 	lsl.w	r3, r2, r3
 801375c:	43db      	mvns	r3, r3
 801375e:	69ba      	ldr	r2, [r7, #24]
 8013760:	4013      	ands	r3, r2
 8013762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	689a      	ldr	r2, [r3, #8]
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	005b      	lsls	r3, r3, #1
 801376c:	fa02 f303 	lsl.w	r3, r2, r3
 8013770:	69ba      	ldr	r2, [r7, #24]
 8013772:	4313      	orrs	r3, r2
 8013774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	69ba      	ldr	r2, [r7, #24]
 801377a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	f003 0303 	and.w	r3, r3, #3
 8013784:	2b02      	cmp	r3, #2
 8013786:	d123      	bne.n	80137d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	08da      	lsrs	r2, r3, #3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	3208      	adds	r2, #8
 8013790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	f003 0307 	and.w	r3, r3, #7
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	220f      	movs	r2, #15
 80137a0:	fa02 f303 	lsl.w	r3, r2, r3
 80137a4:	43db      	mvns	r3, r3
 80137a6:	69ba      	ldr	r2, [r7, #24]
 80137a8:	4013      	ands	r3, r2
 80137aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	691a      	ldr	r2, [r3, #16]
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	f003 0307 	and.w	r3, r3, #7
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	fa02 f303 	lsl.w	r3, r2, r3
 80137bc:	69ba      	ldr	r2, [r7, #24]
 80137be:	4313      	orrs	r3, r2
 80137c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	08da      	lsrs	r2, r3, #3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	3208      	adds	r2, #8
 80137ca:	69b9      	ldr	r1, [r7, #24]
 80137cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	005b      	lsls	r3, r3, #1
 80137da:	2203      	movs	r2, #3
 80137dc:	fa02 f303 	lsl.w	r3, r2, r3
 80137e0:	43db      	mvns	r3, r3
 80137e2:	69ba      	ldr	r2, [r7, #24]
 80137e4:	4013      	ands	r3, r2
 80137e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	685b      	ldr	r3, [r3, #4]
 80137ec:	f003 0203 	and.w	r2, r3, #3
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	005b      	lsls	r3, r3, #1
 80137f4:	fa02 f303 	lsl.w	r3, r2, r3
 80137f8:	69ba      	ldr	r2, [r7, #24]
 80137fa:	4313      	orrs	r3, r2
 80137fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	69ba      	ldr	r2, [r7, #24]
 8013802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801380c:	2b00      	cmp	r3, #0
 801380e:	f000 80b4 	beq.w	801397a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013812:	2300      	movs	r3, #0
 8013814:	60fb      	str	r3, [r7, #12]
 8013816:	4b60      	ldr	r3, [pc, #384]	; (8013998 <HAL_GPIO_Init+0x30c>)
 8013818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801381a:	4a5f      	ldr	r2, [pc, #380]	; (8013998 <HAL_GPIO_Init+0x30c>)
 801381c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013820:	6453      	str	r3, [r2, #68]	; 0x44
 8013822:	4b5d      	ldr	r3, [pc, #372]	; (8013998 <HAL_GPIO_Init+0x30c>)
 8013824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801382a:	60fb      	str	r3, [r7, #12]
 801382c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801382e:	4a5b      	ldr	r2, [pc, #364]	; (801399c <HAL_GPIO_Init+0x310>)
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	089b      	lsrs	r3, r3, #2
 8013834:	3302      	adds	r3, #2
 8013836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	f003 0303 	and.w	r3, r3, #3
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	220f      	movs	r2, #15
 8013846:	fa02 f303 	lsl.w	r3, r2, r3
 801384a:	43db      	mvns	r3, r3
 801384c:	69ba      	ldr	r2, [r7, #24]
 801384e:	4013      	ands	r3, r2
 8013850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a52      	ldr	r2, [pc, #328]	; (80139a0 <HAL_GPIO_Init+0x314>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d02b      	beq.n	80138b2 <HAL_GPIO_Init+0x226>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4a51      	ldr	r2, [pc, #324]	; (80139a4 <HAL_GPIO_Init+0x318>)
 801385e:	4293      	cmp	r3, r2
 8013860:	d025      	beq.n	80138ae <HAL_GPIO_Init+0x222>
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	4a50      	ldr	r2, [pc, #320]	; (80139a8 <HAL_GPIO_Init+0x31c>)
 8013866:	4293      	cmp	r3, r2
 8013868:	d01f      	beq.n	80138aa <HAL_GPIO_Init+0x21e>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	4a4f      	ldr	r2, [pc, #316]	; (80139ac <HAL_GPIO_Init+0x320>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d019      	beq.n	80138a6 <HAL_GPIO_Init+0x21a>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	4a4e      	ldr	r2, [pc, #312]	; (80139b0 <HAL_GPIO_Init+0x324>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d013      	beq.n	80138a2 <HAL_GPIO_Init+0x216>
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	4a4d      	ldr	r2, [pc, #308]	; (80139b4 <HAL_GPIO_Init+0x328>)
 801387e:	4293      	cmp	r3, r2
 8013880:	d00d      	beq.n	801389e <HAL_GPIO_Init+0x212>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	4a4c      	ldr	r2, [pc, #304]	; (80139b8 <HAL_GPIO_Init+0x32c>)
 8013886:	4293      	cmp	r3, r2
 8013888:	d007      	beq.n	801389a <HAL_GPIO_Init+0x20e>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4a4b      	ldr	r2, [pc, #300]	; (80139bc <HAL_GPIO_Init+0x330>)
 801388e:	4293      	cmp	r3, r2
 8013890:	d101      	bne.n	8013896 <HAL_GPIO_Init+0x20a>
 8013892:	2307      	movs	r3, #7
 8013894:	e00e      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 8013896:	2308      	movs	r3, #8
 8013898:	e00c      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 801389a:	2306      	movs	r3, #6
 801389c:	e00a      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 801389e:	2305      	movs	r3, #5
 80138a0:	e008      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 80138a2:	2304      	movs	r3, #4
 80138a4:	e006      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 80138a6:	2303      	movs	r3, #3
 80138a8:	e004      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 80138aa:	2302      	movs	r3, #2
 80138ac:	e002      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 80138ae:	2301      	movs	r3, #1
 80138b0:	e000      	b.n	80138b4 <HAL_GPIO_Init+0x228>
 80138b2:	2300      	movs	r3, #0
 80138b4:	69fa      	ldr	r2, [r7, #28]
 80138b6:	f002 0203 	and.w	r2, r2, #3
 80138ba:	0092      	lsls	r2, r2, #2
 80138bc:	4093      	lsls	r3, r2
 80138be:	69ba      	ldr	r2, [r7, #24]
 80138c0:	4313      	orrs	r3, r2
 80138c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80138c4:	4935      	ldr	r1, [pc, #212]	; (801399c <HAL_GPIO_Init+0x310>)
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	089b      	lsrs	r3, r3, #2
 80138ca:	3302      	adds	r3, #2
 80138cc:	69ba      	ldr	r2, [r7, #24]
 80138ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80138d2:	4b3b      	ldr	r3, [pc, #236]	; (80139c0 <HAL_GPIO_Init+0x334>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	43db      	mvns	r3, r3
 80138dc:	69ba      	ldr	r2, [r7, #24]
 80138de:	4013      	ands	r3, r2
 80138e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d003      	beq.n	80138f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80138ee:	69ba      	ldr	r2, [r7, #24]
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	4313      	orrs	r3, r2
 80138f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80138f6:	4a32      	ldr	r2, [pc, #200]	; (80139c0 <HAL_GPIO_Init+0x334>)
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80138fc:	4b30      	ldr	r3, [pc, #192]	; (80139c0 <HAL_GPIO_Init+0x334>)
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	43db      	mvns	r3, r3
 8013906:	69ba      	ldr	r2, [r7, #24]
 8013908:	4013      	ands	r3, r2
 801390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013914:	2b00      	cmp	r3, #0
 8013916:	d003      	beq.n	8013920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8013918:	69ba      	ldr	r2, [r7, #24]
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	4313      	orrs	r3, r2
 801391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013920:	4a27      	ldr	r2, [pc, #156]	; (80139c0 <HAL_GPIO_Init+0x334>)
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013926:	4b26      	ldr	r3, [pc, #152]	; (80139c0 <HAL_GPIO_Init+0x334>)
 8013928:	689b      	ldr	r3, [r3, #8]
 801392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	43db      	mvns	r3, r3
 8013930:	69ba      	ldr	r2, [r7, #24]
 8013932:	4013      	ands	r3, r2
 8013934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801393e:	2b00      	cmp	r3, #0
 8013940:	d003      	beq.n	801394a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8013942:	69ba      	ldr	r2, [r7, #24]
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	4313      	orrs	r3, r2
 8013948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801394a:	4a1d      	ldr	r2, [pc, #116]	; (80139c0 <HAL_GPIO_Init+0x334>)
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013950:	4b1b      	ldr	r3, [pc, #108]	; (80139c0 <HAL_GPIO_Init+0x334>)
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	43db      	mvns	r3, r3
 801395a:	69ba      	ldr	r2, [r7, #24]
 801395c:	4013      	ands	r3, r2
 801395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013968:	2b00      	cmp	r3, #0
 801396a:	d003      	beq.n	8013974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801396c:	69ba      	ldr	r2, [r7, #24]
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	4313      	orrs	r3, r2
 8013972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013974:	4a12      	ldr	r2, [pc, #72]	; (80139c0 <HAL_GPIO_Init+0x334>)
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	3301      	adds	r3, #1
 801397e:	61fb      	str	r3, [r7, #28]
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	2b0f      	cmp	r3, #15
 8013984:	f67f ae90 	bls.w	80136a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013988:	bf00      	nop
 801398a:	bf00      	nop
 801398c:	3724      	adds	r7, #36	; 0x24
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr
 8013996:	bf00      	nop
 8013998:	40023800 	.word	0x40023800
 801399c:	40013800 	.word	0x40013800
 80139a0:	40020000 	.word	0x40020000
 80139a4:	40020400 	.word	0x40020400
 80139a8:	40020800 	.word	0x40020800
 80139ac:	40020c00 	.word	0x40020c00
 80139b0:	40021000 	.word	0x40021000
 80139b4:	40021400 	.word	0x40021400
 80139b8:	40021800 	.word	0x40021800
 80139bc:	40021c00 	.word	0x40021c00
 80139c0:	40013c00 	.word	0x40013c00

080139c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	460b      	mov	r3, r1
 80139ce:	807b      	strh	r3, [r7, #2]
 80139d0:	4613      	mov	r3, r2
 80139d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80139d4:	787b      	ldrb	r3, [r7, #1]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d003      	beq.n	80139e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80139da:	887a      	ldrh	r2, [r7, #2]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80139e0:	e003      	b.n	80139ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80139e2:	887b      	ldrh	r3, [r7, #2]
 80139e4:	041a      	lsls	r2, r3, #16
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	619a      	str	r2, [r3, #24]
}
 80139ea:	bf00      	nop
 80139ec:	370c      	adds	r7, #12
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr

080139f6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80139f6:	b480      	push	{r7}
 80139f8:	b083      	sub	sp, #12
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013a06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr
	...

08013a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b086      	sub	sp, #24
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d101      	bne.n	8013a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013a26:	2301      	movs	r3, #1
 8013a28:	e264      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	f003 0301 	and.w	r3, r3, #1
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d075      	beq.n	8013b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013a36:	4ba3      	ldr	r3, [pc, #652]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	f003 030c 	and.w	r3, r3, #12
 8013a3e:	2b04      	cmp	r3, #4
 8013a40:	d00c      	beq.n	8013a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013a42:	4ba0      	ldr	r3, [pc, #640]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013a4a:	2b08      	cmp	r3, #8
 8013a4c:	d112      	bne.n	8013a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013a4e:	4b9d      	ldr	r3, [pc, #628]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013a5a:	d10b      	bne.n	8013a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013a5c:	4b99      	ldr	r3, [pc, #612]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d05b      	beq.n	8013b20 <HAL_RCC_OscConfig+0x108>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d157      	bne.n	8013b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013a70:	2301      	movs	r3, #1
 8013a72:	e23f      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a7c:	d106      	bne.n	8013a8c <HAL_RCC_OscConfig+0x74>
 8013a7e:	4b91      	ldr	r3, [pc, #580]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4a90      	ldr	r2, [pc, #576]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	e01d      	b.n	8013ac8 <HAL_RCC_OscConfig+0xb0>
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013a94:	d10c      	bne.n	8013ab0 <HAL_RCC_OscConfig+0x98>
 8013a96:	4b8b      	ldr	r3, [pc, #556]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a8a      	ldr	r2, [pc, #552]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013aa0:	6013      	str	r3, [r2, #0]
 8013aa2:	4b88      	ldr	r3, [pc, #544]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	4a87      	ldr	r2, [pc, #540]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013aac:	6013      	str	r3, [r2, #0]
 8013aae:	e00b      	b.n	8013ac8 <HAL_RCC_OscConfig+0xb0>
 8013ab0:	4b84      	ldr	r3, [pc, #528]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	4a83      	ldr	r2, [pc, #524]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013aba:	6013      	str	r3, [r2, #0]
 8013abc:	4b81      	ldr	r3, [pc, #516]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4a80      	ldr	r2, [pc, #512]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d013      	beq.n	8013af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ad0:	f7fd ffcc 	bl	8011a6c <HAL_GetTick>
 8013ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013ad6:	e008      	b.n	8013aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013ad8:	f7fd ffc8 	bl	8011a6c <HAL_GetTick>
 8013adc:	4602      	mov	r2, r0
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	2b64      	cmp	r3, #100	; 0x64
 8013ae4:	d901      	bls.n	8013aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013ae6:	2303      	movs	r3, #3
 8013ae8:	e204      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013aea:	4b76      	ldr	r3, [pc, #472]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d0f0      	beq.n	8013ad8 <HAL_RCC_OscConfig+0xc0>
 8013af6:	e014      	b.n	8013b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013af8:	f7fd ffb8 	bl	8011a6c <HAL_GetTick>
 8013afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013afe:	e008      	b.n	8013b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013b00:	f7fd ffb4 	bl	8011a6c <HAL_GetTick>
 8013b04:	4602      	mov	r2, r0
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	1ad3      	subs	r3, r2, r3
 8013b0a:	2b64      	cmp	r3, #100	; 0x64
 8013b0c:	d901      	bls.n	8013b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013b0e:	2303      	movs	r3, #3
 8013b10:	e1f0      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013b12:	4b6c      	ldr	r3, [pc, #432]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1f0      	bne.n	8013b00 <HAL_RCC_OscConfig+0xe8>
 8013b1e:	e000      	b.n	8013b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	f003 0302 	and.w	r3, r3, #2
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d063      	beq.n	8013bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013b2e:	4b65      	ldr	r3, [pc, #404]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b30:	689b      	ldr	r3, [r3, #8]
 8013b32:	f003 030c 	and.w	r3, r3, #12
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00b      	beq.n	8013b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013b3a:	4b62      	ldr	r3, [pc, #392]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b3c:	689b      	ldr	r3, [r3, #8]
 8013b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013b42:	2b08      	cmp	r3, #8
 8013b44:	d11c      	bne.n	8013b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013b46:	4b5f      	ldr	r3, [pc, #380]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d116      	bne.n	8013b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013b52:	4b5c      	ldr	r3, [pc, #368]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f003 0302 	and.w	r3, r3, #2
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d005      	beq.n	8013b6a <HAL_RCC_OscConfig+0x152>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	d001      	beq.n	8013b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013b66:	2301      	movs	r3, #1
 8013b68:	e1c4      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013b6a:	4b56      	ldr	r3, [pc, #344]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	691b      	ldr	r3, [r3, #16]
 8013b76:	00db      	lsls	r3, r3, #3
 8013b78:	4952      	ldr	r1, [pc, #328]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013b7e:	e03a      	b.n	8013bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d020      	beq.n	8013bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013b88:	4b4f      	ldr	r3, [pc, #316]	; (8013cc8 <HAL_RCC_OscConfig+0x2b0>)
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b8e:	f7fd ff6d 	bl	8011a6c <HAL_GetTick>
 8013b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013b94:	e008      	b.n	8013ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013b96:	f7fd ff69 	bl	8011a6c <HAL_GetTick>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	1ad3      	subs	r3, r2, r3
 8013ba0:	2b02      	cmp	r3, #2
 8013ba2:	d901      	bls.n	8013ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013ba4:	2303      	movs	r3, #3
 8013ba6:	e1a5      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013ba8:	4b46      	ldr	r3, [pc, #280]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	f003 0302 	and.w	r3, r3, #2
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d0f0      	beq.n	8013b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013bb4:	4b43      	ldr	r3, [pc, #268]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	691b      	ldr	r3, [r3, #16]
 8013bc0:	00db      	lsls	r3, r3, #3
 8013bc2:	4940      	ldr	r1, [pc, #256]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013bc4:	4313      	orrs	r3, r2
 8013bc6:	600b      	str	r3, [r1, #0]
 8013bc8:	e015      	b.n	8013bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013bca:	4b3f      	ldr	r3, [pc, #252]	; (8013cc8 <HAL_RCC_OscConfig+0x2b0>)
 8013bcc:	2200      	movs	r2, #0
 8013bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013bd0:	f7fd ff4c 	bl	8011a6c <HAL_GetTick>
 8013bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013bd6:	e008      	b.n	8013bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013bd8:	f7fd ff48 	bl	8011a6c <HAL_GetTick>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	1ad3      	subs	r3, r2, r3
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d901      	bls.n	8013bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013be6:	2303      	movs	r3, #3
 8013be8:	e184      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013bea:	4b36      	ldr	r3, [pc, #216]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f003 0302 	and.w	r3, r3, #2
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d1f0      	bne.n	8013bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f003 0308 	and.w	r3, r3, #8
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d030      	beq.n	8013c64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	695b      	ldr	r3, [r3, #20]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d016      	beq.n	8013c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013c0a:	4b30      	ldr	r3, [pc, #192]	; (8013ccc <HAL_RCC_OscConfig+0x2b4>)
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c10:	f7fd ff2c 	bl	8011a6c <HAL_GetTick>
 8013c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013c16:	e008      	b.n	8013c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013c18:	f7fd ff28 	bl	8011a6c <HAL_GetTick>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	d901      	bls.n	8013c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013c26:	2303      	movs	r3, #3
 8013c28:	e164      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013c2a:	4b26      	ldr	r3, [pc, #152]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c2e:	f003 0302 	and.w	r3, r3, #2
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d0f0      	beq.n	8013c18 <HAL_RCC_OscConfig+0x200>
 8013c36:	e015      	b.n	8013c64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013c38:	4b24      	ldr	r3, [pc, #144]	; (8013ccc <HAL_RCC_OscConfig+0x2b4>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013c3e:	f7fd ff15 	bl	8011a6c <HAL_GetTick>
 8013c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013c44:	e008      	b.n	8013c58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013c46:	f7fd ff11 	bl	8011a6c <HAL_GetTick>
 8013c4a:	4602      	mov	r2, r0
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	1ad3      	subs	r3, r2, r3
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d901      	bls.n	8013c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013c54:	2303      	movs	r3, #3
 8013c56:	e14d      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013c58:	4b1a      	ldr	r3, [pc, #104]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c5c:	f003 0302 	and.w	r3, r3, #2
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d1f0      	bne.n	8013c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f003 0304 	and.w	r3, r3, #4
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f000 80a0 	beq.w	8013db2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013c72:	2300      	movs	r3, #0
 8013c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013c76:	4b13      	ldr	r3, [pc, #76]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d10f      	bne.n	8013ca2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013c82:	2300      	movs	r3, #0
 8013c84:	60bb      	str	r3, [r7, #8]
 8013c86:	4b0f      	ldr	r3, [pc, #60]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8a:	4a0e      	ldr	r2, [pc, #56]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c90:	6413      	str	r3, [r2, #64]	; 0x40
 8013c92:	4b0c      	ldr	r3, [pc, #48]	; (8013cc4 <HAL_RCC_OscConfig+0x2ac>)
 8013c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c9a:	60bb      	str	r3, [r7, #8]
 8013c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013ca2:	4b0b      	ldr	r3, [pc, #44]	; (8013cd0 <HAL_RCC_OscConfig+0x2b8>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d121      	bne.n	8013cf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013cae:	4b08      	ldr	r3, [pc, #32]	; (8013cd0 <HAL_RCC_OscConfig+0x2b8>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4a07      	ldr	r2, [pc, #28]	; (8013cd0 <HAL_RCC_OscConfig+0x2b8>)
 8013cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013cba:	f7fd fed7 	bl	8011a6c <HAL_GetTick>
 8013cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013cc0:	e011      	b.n	8013ce6 <HAL_RCC_OscConfig+0x2ce>
 8013cc2:	bf00      	nop
 8013cc4:	40023800 	.word	0x40023800
 8013cc8:	42470000 	.word	0x42470000
 8013ccc:	42470e80 	.word	0x42470e80
 8013cd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013cd4:	f7fd feca 	bl	8011a6c <HAL_GetTick>
 8013cd8:	4602      	mov	r2, r0
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	2b02      	cmp	r3, #2
 8013ce0:	d901      	bls.n	8013ce6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013ce2:	2303      	movs	r3, #3
 8013ce4:	e106      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013ce6:	4b85      	ldr	r3, [pc, #532]	; (8013efc <HAL_RCC_OscConfig+0x4e4>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d0f0      	beq.n	8013cd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	2b01      	cmp	r3, #1
 8013cf8:	d106      	bne.n	8013d08 <HAL_RCC_OscConfig+0x2f0>
 8013cfa:	4b81      	ldr	r3, [pc, #516]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cfe:	4a80      	ldr	r2, [pc, #512]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d00:	f043 0301 	orr.w	r3, r3, #1
 8013d04:	6713      	str	r3, [r2, #112]	; 0x70
 8013d06:	e01c      	b.n	8013d42 <HAL_RCC_OscConfig+0x32a>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	689b      	ldr	r3, [r3, #8]
 8013d0c:	2b05      	cmp	r3, #5
 8013d0e:	d10c      	bne.n	8013d2a <HAL_RCC_OscConfig+0x312>
 8013d10:	4b7b      	ldr	r3, [pc, #492]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d14:	4a7a      	ldr	r2, [pc, #488]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d16:	f043 0304 	orr.w	r3, r3, #4
 8013d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8013d1c:	4b78      	ldr	r3, [pc, #480]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d20:	4a77      	ldr	r2, [pc, #476]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d22:	f043 0301 	orr.w	r3, r3, #1
 8013d26:	6713      	str	r3, [r2, #112]	; 0x70
 8013d28:	e00b      	b.n	8013d42 <HAL_RCC_OscConfig+0x32a>
 8013d2a:	4b75      	ldr	r3, [pc, #468]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d2e:	4a74      	ldr	r2, [pc, #464]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d30:	f023 0301 	bic.w	r3, r3, #1
 8013d34:	6713      	str	r3, [r2, #112]	; 0x70
 8013d36:	4b72      	ldr	r3, [pc, #456]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d3a:	4a71      	ldr	r2, [pc, #452]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d3c:	f023 0304 	bic.w	r3, r3, #4
 8013d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	689b      	ldr	r3, [r3, #8]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d015      	beq.n	8013d76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013d4a:	f7fd fe8f 	bl	8011a6c <HAL_GetTick>
 8013d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d50:	e00a      	b.n	8013d68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013d52:	f7fd fe8b 	bl	8011a6c <HAL_GetTick>
 8013d56:	4602      	mov	r2, r0
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	1ad3      	subs	r3, r2, r3
 8013d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d901      	bls.n	8013d68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013d64:	2303      	movs	r3, #3
 8013d66:	e0c5      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013d68:	4b65      	ldr	r3, [pc, #404]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d6c:	f003 0302 	and.w	r3, r3, #2
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d0ee      	beq.n	8013d52 <HAL_RCC_OscConfig+0x33a>
 8013d74:	e014      	b.n	8013da0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013d76:	f7fd fe79 	bl	8011a6c <HAL_GetTick>
 8013d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013d7c:	e00a      	b.n	8013d94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013d7e:	f7fd fe75 	bl	8011a6c <HAL_GetTick>
 8013d82:	4602      	mov	r2, r0
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	1ad3      	subs	r3, r2, r3
 8013d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d901      	bls.n	8013d94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013d90:	2303      	movs	r3, #3
 8013d92:	e0af      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013d94:	4b5a      	ldr	r3, [pc, #360]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d98:	f003 0302 	and.w	r3, r3, #2
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d1ee      	bne.n	8013d7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013da0:	7dfb      	ldrb	r3, [r7, #23]
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	d105      	bne.n	8013db2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013da6:	4b56      	ldr	r3, [pc, #344]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013daa:	4a55      	ldr	r2, [pc, #340]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	699b      	ldr	r3, [r3, #24]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	f000 809b 	beq.w	8013ef2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013dbc:	4b50      	ldr	r3, [pc, #320]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	f003 030c 	and.w	r3, r3, #12
 8013dc4:	2b08      	cmp	r3, #8
 8013dc6:	d05c      	beq.n	8013e82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	699b      	ldr	r3, [r3, #24]
 8013dcc:	2b02      	cmp	r3, #2
 8013dce:	d141      	bne.n	8013e54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013dd0:	4b4c      	ldr	r3, [pc, #304]	; (8013f04 <HAL_RCC_OscConfig+0x4ec>)
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013dd6:	f7fd fe49 	bl	8011a6c <HAL_GetTick>
 8013dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013ddc:	e008      	b.n	8013df0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013dde:	f7fd fe45 	bl	8011a6c <HAL_GetTick>
 8013de2:	4602      	mov	r2, r0
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	2b02      	cmp	r3, #2
 8013dea:	d901      	bls.n	8013df0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013dec:	2303      	movs	r3, #3
 8013dee:	e081      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013df0:	4b43      	ldr	r3, [pc, #268]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d1f0      	bne.n	8013dde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	69da      	ldr	r2, [r3, #28]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6a1b      	ldr	r3, [r3, #32]
 8013e04:	431a      	orrs	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0a:	019b      	lsls	r3, r3, #6
 8013e0c:	431a      	orrs	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e12:	085b      	lsrs	r3, r3, #1
 8013e14:	3b01      	subs	r3, #1
 8013e16:	041b      	lsls	r3, r3, #16
 8013e18:	431a      	orrs	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e1e:	061b      	lsls	r3, r3, #24
 8013e20:	4937      	ldr	r1, [pc, #220]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013e22:	4313      	orrs	r3, r2
 8013e24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013e26:	4b37      	ldr	r3, [pc, #220]	; (8013f04 <HAL_RCC_OscConfig+0x4ec>)
 8013e28:	2201      	movs	r2, #1
 8013e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013e2c:	f7fd fe1e 	bl	8011a6c <HAL_GetTick>
 8013e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013e32:	e008      	b.n	8013e46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013e34:	f7fd fe1a 	bl	8011a6c <HAL_GetTick>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	1ad3      	subs	r3, r2, r3
 8013e3e:	2b02      	cmp	r3, #2
 8013e40:	d901      	bls.n	8013e46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013e42:	2303      	movs	r3, #3
 8013e44:	e056      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013e46:	4b2e      	ldr	r3, [pc, #184]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d0f0      	beq.n	8013e34 <HAL_RCC_OscConfig+0x41c>
 8013e52:	e04e      	b.n	8013ef2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013e54:	4b2b      	ldr	r3, [pc, #172]	; (8013f04 <HAL_RCC_OscConfig+0x4ec>)
 8013e56:	2200      	movs	r2, #0
 8013e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013e5a:	f7fd fe07 	bl	8011a6c <HAL_GetTick>
 8013e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013e60:	e008      	b.n	8013e74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013e62:	f7fd fe03 	bl	8011a6c <HAL_GetTick>
 8013e66:	4602      	mov	r2, r0
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	1ad3      	subs	r3, r2, r3
 8013e6c:	2b02      	cmp	r3, #2
 8013e6e:	d901      	bls.n	8013e74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013e70:	2303      	movs	r3, #3
 8013e72:	e03f      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013e74:	4b22      	ldr	r3, [pc, #136]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1f0      	bne.n	8013e62 <HAL_RCC_OscConfig+0x44a>
 8013e80:	e037      	b.n	8013ef2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	699b      	ldr	r3, [r3, #24]
 8013e86:	2b01      	cmp	r3, #1
 8013e88:	d101      	bne.n	8013e8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e032      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013e8e:	4b1c      	ldr	r3, [pc, #112]	; (8013f00 <HAL_RCC_OscConfig+0x4e8>)
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	699b      	ldr	r3, [r3, #24]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d028      	beq.n	8013eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d121      	bne.n	8013eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d11a      	bne.n	8013eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013ebe:	4013      	ands	r3, r2
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013ec4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d111      	bne.n	8013eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ed4:	085b      	lsrs	r3, r3, #1
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d107      	bne.n	8013eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d001      	beq.n	8013ef2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e000      	b.n	8013ef4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8013ef2:	2300      	movs	r3, #0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3718      	adds	r7, #24
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	40007000 	.word	0x40007000
 8013f00:	40023800 	.word	0x40023800
 8013f04:	42470060 	.word	0x42470060

08013f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d101      	bne.n	8013f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e0cc      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013f1c:	4b68      	ldr	r3, [pc, #416]	; (80140c0 <HAL_RCC_ClockConfig+0x1b8>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	f003 0307 	and.w	r3, r3, #7
 8013f24:	683a      	ldr	r2, [r7, #0]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d90c      	bls.n	8013f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013f2a:	4b65      	ldr	r3, [pc, #404]	; (80140c0 <HAL_RCC_ClockConfig+0x1b8>)
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	b2d2      	uxtb	r2, r2
 8013f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013f32:	4b63      	ldr	r3, [pc, #396]	; (80140c0 <HAL_RCC_ClockConfig+0x1b8>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	f003 0307 	and.w	r3, r3, #7
 8013f3a:	683a      	ldr	r2, [r7, #0]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d001      	beq.n	8013f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013f40:	2301      	movs	r3, #1
 8013f42:	e0b8      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f003 0302 	and.w	r3, r3, #2
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d020      	beq.n	8013f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f003 0304 	and.w	r3, r3, #4
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d005      	beq.n	8013f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013f5c:	4b59      	ldr	r3, [pc, #356]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	4a58      	ldr	r2, [pc, #352]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	f003 0308 	and.w	r3, r3, #8
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d005      	beq.n	8013f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013f74:	4b53      	ldr	r3, [pc, #332]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013f76:	689b      	ldr	r3, [r3, #8]
 8013f78:	4a52      	ldr	r2, [pc, #328]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013f80:	4b50      	ldr	r3, [pc, #320]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	494d      	ldr	r1, [pc, #308]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013f8e:	4313      	orrs	r3, r2
 8013f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	f003 0301 	and.w	r3, r3, #1
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d044      	beq.n	8014028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d107      	bne.n	8013fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013fa6:	4b47      	ldr	r3, [pc, #284]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d119      	bne.n	8013fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	e07f      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	2b02      	cmp	r3, #2
 8013fbc:	d003      	beq.n	8013fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013fc2:	2b03      	cmp	r3, #3
 8013fc4:	d107      	bne.n	8013fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013fc6:	4b3f      	ldr	r3, [pc, #252]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d109      	bne.n	8013fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	e06f      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013fd6:	4b3b      	ldr	r3, [pc, #236]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f003 0302 	and.w	r3, r3, #2
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d101      	bne.n	8013fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	e067      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013fe6:	4b37      	ldr	r3, [pc, #220]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013fe8:	689b      	ldr	r3, [r3, #8]
 8013fea:	f023 0203 	bic.w	r2, r3, #3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	4934      	ldr	r1, [pc, #208]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013ff8:	f7fd fd38 	bl	8011a6c <HAL_GetTick>
 8013ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013ffe:	e00a      	b.n	8014016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014000:	f7fd fd34 	bl	8011a6c <HAL_GetTick>
 8014004:	4602      	mov	r2, r0
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	1ad3      	subs	r3, r2, r3
 801400a:	f241 3288 	movw	r2, #5000	; 0x1388
 801400e:	4293      	cmp	r3, r2
 8014010:	d901      	bls.n	8014016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014012:	2303      	movs	r3, #3
 8014014:	e04f      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014016:	4b2b      	ldr	r3, [pc, #172]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	f003 020c 	and.w	r2, r3, #12
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	429a      	cmp	r2, r3
 8014026:	d1eb      	bne.n	8014000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014028:	4b25      	ldr	r3, [pc, #148]	; (80140c0 <HAL_RCC_ClockConfig+0x1b8>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f003 0307 	and.w	r3, r3, #7
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	429a      	cmp	r2, r3
 8014034:	d20c      	bcs.n	8014050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014036:	4b22      	ldr	r3, [pc, #136]	; (80140c0 <HAL_RCC_ClockConfig+0x1b8>)
 8014038:	683a      	ldr	r2, [r7, #0]
 801403a:	b2d2      	uxtb	r2, r2
 801403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801403e:	4b20      	ldr	r3, [pc, #128]	; (80140c0 <HAL_RCC_ClockConfig+0x1b8>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f003 0307 	and.w	r3, r3, #7
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	429a      	cmp	r2, r3
 801404a:	d001      	beq.n	8014050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801404c:	2301      	movs	r3, #1
 801404e:	e032      	b.n	80140b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f003 0304 	and.w	r3, r3, #4
 8014058:	2b00      	cmp	r3, #0
 801405a:	d008      	beq.n	801406e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801405c:	4b19      	ldr	r3, [pc, #100]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 801405e:	689b      	ldr	r3, [r3, #8]
 8014060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	68db      	ldr	r3, [r3, #12]
 8014068:	4916      	ldr	r1, [pc, #88]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 801406a:	4313      	orrs	r3, r2
 801406c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	f003 0308 	and.w	r3, r3, #8
 8014076:	2b00      	cmp	r3, #0
 8014078:	d009      	beq.n	801408e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801407a:	4b12      	ldr	r3, [pc, #72]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 801407c:	689b      	ldr	r3, [r3, #8]
 801407e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	691b      	ldr	r3, [r3, #16]
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	490e      	ldr	r1, [pc, #56]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 801408a:	4313      	orrs	r3, r2
 801408c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801408e:	f000 f821 	bl	80140d4 <HAL_RCC_GetSysClockFreq>
 8014092:	4602      	mov	r2, r0
 8014094:	4b0b      	ldr	r3, [pc, #44]	; (80140c4 <HAL_RCC_ClockConfig+0x1bc>)
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	091b      	lsrs	r3, r3, #4
 801409a:	f003 030f 	and.w	r3, r3, #15
 801409e:	490a      	ldr	r1, [pc, #40]	; (80140c8 <HAL_RCC_ClockConfig+0x1c0>)
 80140a0:	5ccb      	ldrb	r3, [r1, r3]
 80140a2:	fa22 f303 	lsr.w	r3, r2, r3
 80140a6:	4a09      	ldr	r2, [pc, #36]	; (80140cc <HAL_RCC_ClockConfig+0x1c4>)
 80140a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80140aa:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <HAL_RCC_ClockConfig+0x1c8>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7f0 fdec 	bl	8004c8c <HAL_InitTick>

  return HAL_OK;
 80140b4:	2300      	movs	r3, #0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	40023c00 	.word	0x40023c00
 80140c4:	40023800 	.word	0x40023800
 80140c8:	0801c7bc 	.word	0x0801c7bc
 80140cc:	20000084 	.word	0x20000084
 80140d0:	20001438 	.word	0x20001438

080140d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80140d4:	b5b0      	push	{r4, r5, r7, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80140da:	2100      	movs	r1, #0
 80140dc:	6079      	str	r1, [r7, #4]
 80140de:	2100      	movs	r1, #0
 80140e0:	60f9      	str	r1, [r7, #12]
 80140e2:	2100      	movs	r1, #0
 80140e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80140e6:	2100      	movs	r1, #0
 80140e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80140ea:	4952      	ldr	r1, [pc, #328]	; (8014234 <HAL_RCC_GetSysClockFreq+0x160>)
 80140ec:	6889      	ldr	r1, [r1, #8]
 80140ee:	f001 010c 	and.w	r1, r1, #12
 80140f2:	2908      	cmp	r1, #8
 80140f4:	d00d      	beq.n	8014112 <HAL_RCC_GetSysClockFreq+0x3e>
 80140f6:	2908      	cmp	r1, #8
 80140f8:	f200 8094 	bhi.w	8014224 <HAL_RCC_GetSysClockFreq+0x150>
 80140fc:	2900      	cmp	r1, #0
 80140fe:	d002      	beq.n	8014106 <HAL_RCC_GetSysClockFreq+0x32>
 8014100:	2904      	cmp	r1, #4
 8014102:	d003      	beq.n	801410c <HAL_RCC_GetSysClockFreq+0x38>
 8014104:	e08e      	b.n	8014224 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014106:	4b4c      	ldr	r3, [pc, #304]	; (8014238 <HAL_RCC_GetSysClockFreq+0x164>)
 8014108:	60bb      	str	r3, [r7, #8]
       break;
 801410a:	e08e      	b.n	801422a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801410c:	4b4b      	ldr	r3, [pc, #300]	; (801423c <HAL_RCC_GetSysClockFreq+0x168>)
 801410e:	60bb      	str	r3, [r7, #8]
      break;
 8014110:	e08b      	b.n	801422a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014112:	4948      	ldr	r1, [pc, #288]	; (8014234 <HAL_RCC_GetSysClockFreq+0x160>)
 8014114:	6849      	ldr	r1, [r1, #4]
 8014116:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801411a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801411c:	4945      	ldr	r1, [pc, #276]	; (8014234 <HAL_RCC_GetSysClockFreq+0x160>)
 801411e:	6849      	ldr	r1, [r1, #4]
 8014120:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8014124:	2900      	cmp	r1, #0
 8014126:	d024      	beq.n	8014172 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014128:	4942      	ldr	r1, [pc, #264]	; (8014234 <HAL_RCC_GetSysClockFreq+0x160>)
 801412a:	6849      	ldr	r1, [r1, #4]
 801412c:	0989      	lsrs	r1, r1, #6
 801412e:	4608      	mov	r0, r1
 8014130:	f04f 0100 	mov.w	r1, #0
 8014134:	f240 14ff 	movw	r4, #511	; 0x1ff
 8014138:	f04f 0500 	mov.w	r5, #0
 801413c:	ea00 0204 	and.w	r2, r0, r4
 8014140:	ea01 0305 	and.w	r3, r1, r5
 8014144:	493d      	ldr	r1, [pc, #244]	; (801423c <HAL_RCC_GetSysClockFreq+0x168>)
 8014146:	fb01 f003 	mul.w	r0, r1, r3
 801414a:	2100      	movs	r1, #0
 801414c:	fb01 f102 	mul.w	r1, r1, r2
 8014150:	1844      	adds	r4, r0, r1
 8014152:	493a      	ldr	r1, [pc, #232]	; (801423c <HAL_RCC_GetSysClockFreq+0x168>)
 8014154:	fba2 0101 	umull	r0, r1, r2, r1
 8014158:	1863      	adds	r3, r4, r1
 801415a:	4619      	mov	r1, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	461a      	mov	r2, r3
 8014160:	f04f 0300 	mov.w	r3, #0
 8014164:	f7ec fd82 	bl	8000c6c <__aeabi_uldivmod>
 8014168:	4602      	mov	r2, r0
 801416a:	460b      	mov	r3, r1
 801416c:	4613      	mov	r3, r2
 801416e:	60fb      	str	r3, [r7, #12]
 8014170:	e04a      	b.n	8014208 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014172:	4b30      	ldr	r3, [pc, #192]	; (8014234 <HAL_RCC_GetSysClockFreq+0x160>)
 8014174:	685b      	ldr	r3, [r3, #4]
 8014176:	099b      	lsrs	r3, r3, #6
 8014178:	461a      	mov	r2, r3
 801417a:	f04f 0300 	mov.w	r3, #0
 801417e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014182:	f04f 0100 	mov.w	r1, #0
 8014186:	ea02 0400 	and.w	r4, r2, r0
 801418a:	ea03 0501 	and.w	r5, r3, r1
 801418e:	4620      	mov	r0, r4
 8014190:	4629      	mov	r1, r5
 8014192:	f04f 0200 	mov.w	r2, #0
 8014196:	f04f 0300 	mov.w	r3, #0
 801419a:	014b      	lsls	r3, r1, #5
 801419c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80141a0:	0142      	lsls	r2, r0, #5
 80141a2:	4610      	mov	r0, r2
 80141a4:	4619      	mov	r1, r3
 80141a6:	1b00      	subs	r0, r0, r4
 80141a8:	eb61 0105 	sbc.w	r1, r1, r5
 80141ac:	f04f 0200 	mov.w	r2, #0
 80141b0:	f04f 0300 	mov.w	r3, #0
 80141b4:	018b      	lsls	r3, r1, #6
 80141b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80141ba:	0182      	lsls	r2, r0, #6
 80141bc:	1a12      	subs	r2, r2, r0
 80141be:	eb63 0301 	sbc.w	r3, r3, r1
 80141c2:	f04f 0000 	mov.w	r0, #0
 80141c6:	f04f 0100 	mov.w	r1, #0
 80141ca:	00d9      	lsls	r1, r3, #3
 80141cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80141d0:	00d0      	lsls	r0, r2, #3
 80141d2:	4602      	mov	r2, r0
 80141d4:	460b      	mov	r3, r1
 80141d6:	1912      	adds	r2, r2, r4
 80141d8:	eb45 0303 	adc.w	r3, r5, r3
 80141dc:	f04f 0000 	mov.w	r0, #0
 80141e0:	f04f 0100 	mov.w	r1, #0
 80141e4:	0299      	lsls	r1, r3, #10
 80141e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80141ea:	0290      	lsls	r0, r2, #10
 80141ec:	4602      	mov	r2, r0
 80141ee:	460b      	mov	r3, r1
 80141f0:	4610      	mov	r0, r2
 80141f2:	4619      	mov	r1, r3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	461a      	mov	r2, r3
 80141f8:	f04f 0300 	mov.w	r3, #0
 80141fc:	f7ec fd36 	bl	8000c6c <__aeabi_uldivmod>
 8014200:	4602      	mov	r2, r0
 8014202:	460b      	mov	r3, r1
 8014204:	4613      	mov	r3, r2
 8014206:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014208:	4b0a      	ldr	r3, [pc, #40]	; (8014234 <HAL_RCC_GetSysClockFreq+0x160>)
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	0c1b      	lsrs	r3, r3, #16
 801420e:	f003 0303 	and.w	r3, r3, #3
 8014212:	3301      	adds	r3, #1
 8014214:	005b      	lsls	r3, r3, #1
 8014216:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8014218:	68fa      	ldr	r2, [r7, #12]
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014220:	60bb      	str	r3, [r7, #8]
      break;
 8014222:	e002      	b.n	801422a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014224:	4b04      	ldr	r3, [pc, #16]	; (8014238 <HAL_RCC_GetSysClockFreq+0x164>)
 8014226:	60bb      	str	r3, [r7, #8]
      break;
 8014228:	bf00      	nop
    }
  }
  return sysclockfreq;
 801422a:	68bb      	ldr	r3, [r7, #8]
}
 801422c:	4618      	mov	r0, r3
 801422e:	3710      	adds	r7, #16
 8014230:	46bd      	mov	sp, r7
 8014232:	bdb0      	pop	{r4, r5, r7, pc}
 8014234:	40023800 	.word	0x40023800
 8014238:	00f42400 	.word	0x00f42400
 801423c:	017d7840 	.word	0x017d7840

08014240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014240:	b480      	push	{r7}
 8014242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014244:	4b03      	ldr	r3, [pc, #12]	; (8014254 <HAL_RCC_GetHCLKFreq+0x14>)
 8014246:	681b      	ldr	r3, [r3, #0]
}
 8014248:	4618      	mov	r0, r3
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	20000084 	.word	0x20000084

08014258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801425c:	f7ff fff0 	bl	8014240 <HAL_RCC_GetHCLKFreq>
 8014260:	4602      	mov	r2, r0
 8014262:	4b05      	ldr	r3, [pc, #20]	; (8014278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	0a9b      	lsrs	r3, r3, #10
 8014268:	f003 0307 	and.w	r3, r3, #7
 801426c:	4903      	ldr	r1, [pc, #12]	; (801427c <HAL_RCC_GetPCLK1Freq+0x24>)
 801426e:	5ccb      	ldrb	r3, [r1, r3]
 8014270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014274:	4618      	mov	r0, r3
 8014276:	bd80      	pop	{r7, pc}
 8014278:	40023800 	.word	0x40023800
 801427c:	0801c7cc 	.word	0x0801c7cc

08014280 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014280:	b480      	push	{r7}
 8014282:	b083      	sub	sp, #12
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	220f      	movs	r2, #15
 801428e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014290:	4b12      	ldr	r3, [pc, #72]	; (80142dc <HAL_RCC_GetClockConfig+0x5c>)
 8014292:	689b      	ldr	r3, [r3, #8]
 8014294:	f003 0203 	and.w	r2, r3, #3
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801429c:	4b0f      	ldr	r3, [pc, #60]	; (80142dc <HAL_RCC_GetClockConfig+0x5c>)
 801429e:	689b      	ldr	r3, [r3, #8]
 80142a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80142a8:	4b0c      	ldr	r3, [pc, #48]	; (80142dc <HAL_RCC_GetClockConfig+0x5c>)
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80142b4:	4b09      	ldr	r3, [pc, #36]	; (80142dc <HAL_RCC_GetClockConfig+0x5c>)
 80142b6:	689b      	ldr	r3, [r3, #8]
 80142b8:	08db      	lsrs	r3, r3, #3
 80142ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80142c2:	4b07      	ldr	r3, [pc, #28]	; (80142e0 <HAL_RCC_GetClockConfig+0x60>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	f003 0207 	and.w	r2, r3, #7
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	601a      	str	r2, [r3, #0]
}
 80142ce:	bf00      	nop
 80142d0:	370c      	adds	r7, #12
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	40023800 	.word	0x40023800
 80142e0:	40023c00 	.word	0x40023c00

080142e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d101      	bne.n	80142f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80142f2:	2301      	movs	r3, #1
 80142f4:	e07b      	b.n	80143ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d108      	bne.n	8014310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014306:	d009      	beq.n	801431c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2200      	movs	r2, #0
 801430c:	61da      	str	r2, [r3, #28]
 801430e:	e005      	b.n	801431c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2200      	movs	r2, #0
 8014314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2200      	movs	r2, #0
 8014320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014328:	b2db      	uxtb	r3, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	d106      	bne.n	801433c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2200      	movs	r2, #0
 8014332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f7f0 fc14 	bl	8004b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2202      	movs	r2, #2
 8014340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	689b      	ldr	r3, [r3, #8]
 8014360:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014364:	431a      	orrs	r2, r3
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801436e:	431a      	orrs	r2, r3
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	f003 0302 	and.w	r3, r3, #2
 8014378:	431a      	orrs	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	695b      	ldr	r3, [r3, #20]
 801437e:	f003 0301 	and.w	r3, r3, #1
 8014382:	431a      	orrs	r2, r3
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	699b      	ldr	r3, [r3, #24]
 8014388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801438c:	431a      	orrs	r2, r3
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	69db      	ldr	r3, [r3, #28]
 8014392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014396:	431a      	orrs	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6a1b      	ldr	r3, [r3, #32]
 801439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143a0:	ea42 0103 	orr.w	r1, r2, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	430a      	orrs	r2, r1
 80143b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	699b      	ldr	r3, [r3, #24]
 80143b8:	0c1b      	lsrs	r3, r3, #16
 80143ba:	f003 0104 	and.w	r1, r3, #4
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c2:	f003 0210 	and.w	r2, r3, #16
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	430a      	orrs	r2, r1
 80143cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	69da      	ldr	r2, [r3, #28]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80143dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2201      	movs	r2, #1
 80143e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80143ec:	2300      	movs	r3, #0
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3708      	adds	r7, #8
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}

080143f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b088      	sub	sp, #32
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	60f8      	str	r0, [r7, #12]
 80143fe:	60b9      	str	r1, [r7, #8]
 8014400:	603b      	str	r3, [r7, #0]
 8014402:	4613      	mov	r3, r2
 8014404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014406:	2300      	movs	r3, #0
 8014408:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014410:	2b01      	cmp	r3, #1
 8014412:	d101      	bne.n	8014418 <HAL_SPI_Transmit+0x22>
 8014414:	2302      	movs	r3, #2
 8014416:	e126      	b.n	8014666 <HAL_SPI_Transmit+0x270>
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2201      	movs	r2, #1
 801441c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014420:	f7fd fb24 	bl	8011a6c <HAL_GetTick>
 8014424:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8014426:	88fb      	ldrh	r3, [r7, #6]
 8014428:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014430:	b2db      	uxtb	r3, r3
 8014432:	2b01      	cmp	r3, #1
 8014434:	d002      	beq.n	801443c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8014436:	2302      	movs	r3, #2
 8014438:	77fb      	strb	r3, [r7, #31]
    goto error;
 801443a:	e10b      	b.n	8014654 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d002      	beq.n	8014448 <HAL_SPI_Transmit+0x52>
 8014442:	88fb      	ldrh	r3, [r7, #6]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d102      	bne.n	801444e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8014448:	2301      	movs	r3, #1
 801444a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801444c:	e102      	b.n	8014654 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2203      	movs	r2, #3
 8014452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2200      	movs	r2, #0
 801445a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	88fa      	ldrh	r2, [r7, #6]
 8014466:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	88fa      	ldrh	r2, [r7, #6]
 801446c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	2200      	movs	r2, #0
 8014472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	2200      	movs	r2, #0
 8014478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2200      	movs	r2, #0
 801447e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2200      	movs	r2, #0
 8014484:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	2200      	movs	r2, #0
 801448a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	689b      	ldr	r3, [r3, #8]
 8014490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014494:	d10f      	bne.n	80144b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	681a      	ldr	r2, [r3, #0]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80144a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80144b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144c0:	2b40      	cmp	r3, #64	; 0x40
 80144c2:	d007      	beq.n	80144d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80144d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80144dc:	d14b      	bne.n	8014576 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d002      	beq.n	80144ec <HAL_SPI_Transmit+0xf6>
 80144e6:	8afb      	ldrh	r3, [r7, #22]
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d13e      	bne.n	801456a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144f0:	881a      	ldrh	r2, [r3, #0]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144fc:	1c9a      	adds	r2, r3, #2
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014506:	b29b      	uxth	r3, r3
 8014508:	3b01      	subs	r3, #1
 801450a:	b29a      	uxth	r2, r3
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8014510:	e02b      	b.n	801456a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	689b      	ldr	r3, [r3, #8]
 8014518:	f003 0302 	and.w	r3, r3, #2
 801451c:	2b02      	cmp	r3, #2
 801451e:	d112      	bne.n	8014546 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014524:	881a      	ldrh	r2, [r3, #0]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014530:	1c9a      	adds	r2, r3, #2
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801453a:	b29b      	uxth	r3, r3
 801453c:	3b01      	subs	r3, #1
 801453e:	b29a      	uxth	r2, r3
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	86da      	strh	r2, [r3, #54]	; 0x36
 8014544:	e011      	b.n	801456a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014546:	f7fd fa91 	bl	8011a6c <HAL_GetTick>
 801454a:	4602      	mov	r2, r0
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	683a      	ldr	r2, [r7, #0]
 8014552:	429a      	cmp	r2, r3
 8014554:	d803      	bhi.n	801455e <HAL_SPI_Transmit+0x168>
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	f1b3 3fff 	cmp.w	r3, #4294967295
 801455c:	d102      	bne.n	8014564 <HAL_SPI_Transmit+0x16e>
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d102      	bne.n	801456a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8014564:	2303      	movs	r3, #3
 8014566:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014568:	e074      	b.n	8014654 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801456e:	b29b      	uxth	r3, r3
 8014570:	2b00      	cmp	r3, #0
 8014572:	d1ce      	bne.n	8014512 <HAL_SPI_Transmit+0x11c>
 8014574:	e04c      	b.n	8014610 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d002      	beq.n	8014584 <HAL_SPI_Transmit+0x18e>
 801457e:	8afb      	ldrh	r3, [r7, #22]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d140      	bne.n	8014606 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	330c      	adds	r3, #12
 801458e:	7812      	ldrb	r2, [r2, #0]
 8014590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014596:	1c5a      	adds	r2, r3, #1
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	3b01      	subs	r3, #1
 80145a4:	b29a      	uxth	r2, r3
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80145aa:	e02c      	b.n	8014606 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	689b      	ldr	r3, [r3, #8]
 80145b2:	f003 0302 	and.w	r3, r3, #2
 80145b6:	2b02      	cmp	r3, #2
 80145b8:	d113      	bne.n	80145e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	330c      	adds	r3, #12
 80145c4:	7812      	ldrb	r2, [r2, #0]
 80145c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145cc:	1c5a      	adds	r2, r3, #1
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	3b01      	subs	r3, #1
 80145da:	b29a      	uxth	r2, r3
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	86da      	strh	r2, [r3, #54]	; 0x36
 80145e0:	e011      	b.n	8014606 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80145e2:	f7fd fa43 	bl	8011a6c <HAL_GetTick>
 80145e6:	4602      	mov	r2, r0
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	1ad3      	subs	r3, r2, r3
 80145ec:	683a      	ldr	r2, [r7, #0]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d803      	bhi.n	80145fa <HAL_SPI_Transmit+0x204>
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f8:	d102      	bne.n	8014600 <HAL_SPI_Transmit+0x20a>
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d102      	bne.n	8014606 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8014600:	2303      	movs	r3, #3
 8014602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014604:	e026      	b.n	8014654 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801460a:	b29b      	uxth	r3, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	d1cd      	bne.n	80145ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014610:	69ba      	ldr	r2, [r7, #24]
 8014612:	6839      	ldr	r1, [r7, #0]
 8014614:	68f8      	ldr	r0, [r7, #12]
 8014616:	f000 fbcb 	bl	8014db0 <SPI_EndRxTxTransaction>
 801461a:	4603      	mov	r3, r0
 801461c:	2b00      	cmp	r3, #0
 801461e:	d002      	beq.n	8014626 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2220      	movs	r2, #32
 8014624:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	689b      	ldr	r3, [r3, #8]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d10a      	bne.n	8014644 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801462e:	2300      	movs	r3, #0
 8014630:	613b      	str	r3, [r7, #16]
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	613b      	str	r3, [r7, #16]
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	689b      	ldr	r3, [r3, #8]
 8014640:	613b      	str	r3, [r7, #16]
 8014642:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014648:	2b00      	cmp	r3, #0
 801464a:	d002      	beq.n	8014652 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801464c:	2301      	movs	r3, #1
 801464e:	77fb      	strb	r3, [r7, #31]
 8014650:	e000      	b.n	8014654 <HAL_SPI_Transmit+0x25e>
  }

error:
 8014652:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2201      	movs	r2, #1
 8014658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2200      	movs	r2, #0
 8014660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014664:	7ffb      	ldrb	r3, [r7, #31]
}
 8014666:	4618      	mov	r0, r3
 8014668:	3720      	adds	r7, #32
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}

0801466e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801466e:	b580      	push	{r7, lr}
 8014670:	b088      	sub	sp, #32
 8014672:	af02      	add	r7, sp, #8
 8014674:	60f8      	str	r0, [r7, #12]
 8014676:	60b9      	str	r1, [r7, #8]
 8014678:	603b      	str	r3, [r7, #0]
 801467a:	4613      	mov	r3, r2
 801467c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801467e:	2300      	movs	r3, #0
 8014680:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801468a:	d112      	bne.n	80146b2 <HAL_SPI_Receive+0x44>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d10e      	bne.n	80146b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2204      	movs	r2, #4
 8014698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801469c:	88fa      	ldrh	r2, [r7, #6]
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	9300      	str	r3, [sp, #0]
 80146a2:	4613      	mov	r3, r2
 80146a4:	68ba      	ldr	r2, [r7, #8]
 80146a6:	68b9      	ldr	r1, [r7, #8]
 80146a8:	68f8      	ldr	r0, [r7, #12]
 80146aa:	f000 f8f1 	bl	8014890 <HAL_SPI_TransmitReceive>
 80146ae:	4603      	mov	r3, r0
 80146b0:	e0ea      	b.n	8014888 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d101      	bne.n	80146c0 <HAL_SPI_Receive+0x52>
 80146bc:	2302      	movs	r3, #2
 80146be:	e0e3      	b.n	8014888 <HAL_SPI_Receive+0x21a>
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2201      	movs	r2, #1
 80146c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80146c8:	f7fd f9d0 	bl	8011a6c <HAL_GetTick>
 80146cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146d4:	b2db      	uxtb	r3, r3
 80146d6:	2b01      	cmp	r3, #1
 80146d8:	d002      	beq.n	80146e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80146da:	2302      	movs	r3, #2
 80146dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80146de:	e0ca      	b.n	8014876 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d002      	beq.n	80146ec <HAL_SPI_Receive+0x7e>
 80146e6:	88fb      	ldrh	r3, [r7, #6]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d102      	bne.n	80146f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80146ec:	2301      	movs	r3, #1
 80146ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80146f0:	e0c1      	b.n	8014876 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2204      	movs	r2, #4
 80146f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2200      	movs	r2, #0
 80146fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	68ba      	ldr	r2, [r7, #8]
 8014704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	88fa      	ldrh	r2, [r7, #6]
 801470a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	88fa      	ldrh	r2, [r7, #6]
 8014710:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2200      	movs	r2, #0
 8014716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2200      	movs	r2, #0
 801471c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2200      	movs	r2, #0
 8014722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	2200      	movs	r2, #0
 8014728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2200      	movs	r2, #0
 801472e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014738:	d10f      	bne.n	801475a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014748:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014758:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014764:	2b40      	cmp	r3, #64	; 0x40
 8014766:	d007      	beq.n	8014778 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014776:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	68db      	ldr	r3, [r3, #12]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d162      	bne.n	8014846 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014780:	e02e      	b.n	80147e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	689b      	ldr	r3, [r3, #8]
 8014788:	f003 0301 	and.w	r3, r3, #1
 801478c:	2b01      	cmp	r3, #1
 801478e:	d115      	bne.n	80147bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	f103 020c 	add.w	r2, r3, #12
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801479c:	7812      	ldrb	r2, [r2, #0]
 801479e:	b2d2      	uxtb	r2, r2
 80147a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147a6:	1c5a      	adds	r2, r3, #1
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	3b01      	subs	r3, #1
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80147ba:	e011      	b.n	80147e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147bc:	f7fd f956 	bl	8011a6c <HAL_GetTick>
 80147c0:	4602      	mov	r2, r0
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	1ad3      	subs	r3, r2, r3
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d803      	bhi.n	80147d4 <HAL_SPI_Receive+0x166>
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d2:	d102      	bne.n	80147da <HAL_SPI_Receive+0x16c>
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d102      	bne.n	80147e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80147da:	2303      	movs	r3, #3
 80147dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80147de:	e04a      	b.n	8014876 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d1cb      	bne.n	8014782 <HAL_SPI_Receive+0x114>
 80147ea:	e031      	b.n	8014850 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	689b      	ldr	r3, [r3, #8]
 80147f2:	f003 0301 	and.w	r3, r3, #1
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d113      	bne.n	8014822 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	68da      	ldr	r2, [r3, #12]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014804:	b292      	uxth	r2, r2
 8014806:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801480c:	1c9a      	adds	r2, r3, #2
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014816:	b29b      	uxth	r3, r3
 8014818:	3b01      	subs	r3, #1
 801481a:	b29a      	uxth	r2, r3
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014820:	e011      	b.n	8014846 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014822:	f7fd f923 	bl	8011a6c <HAL_GetTick>
 8014826:	4602      	mov	r2, r0
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	683a      	ldr	r2, [r7, #0]
 801482e:	429a      	cmp	r2, r3
 8014830:	d803      	bhi.n	801483a <HAL_SPI_Receive+0x1cc>
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014838:	d102      	bne.n	8014840 <HAL_SPI_Receive+0x1d2>
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d102      	bne.n	8014846 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8014840:	2303      	movs	r3, #3
 8014842:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014844:	e017      	b.n	8014876 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801484a:	b29b      	uxth	r3, r3
 801484c:	2b00      	cmp	r3, #0
 801484e:	d1cd      	bne.n	80147ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014850:	693a      	ldr	r2, [r7, #16]
 8014852:	6839      	ldr	r1, [r7, #0]
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f000 fa45 	bl	8014ce4 <SPI_EndRxTransaction>
 801485a:	4603      	mov	r3, r0
 801485c:	2b00      	cmp	r3, #0
 801485e:	d002      	beq.n	8014866 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2220      	movs	r2, #32
 8014864:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801486a:	2b00      	cmp	r3, #0
 801486c:	d002      	beq.n	8014874 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801486e:	2301      	movs	r3, #1
 8014870:	75fb      	strb	r3, [r7, #23]
 8014872:	e000      	b.n	8014876 <HAL_SPI_Receive+0x208>
  }

error :
 8014874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2201      	movs	r2, #1
 801487a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2200      	movs	r2, #0
 8014882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014886:	7dfb      	ldrb	r3, [r7, #23]
}
 8014888:	4618      	mov	r0, r3
 801488a:	3718      	adds	r7, #24
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}

08014890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b08c      	sub	sp, #48	; 0x30
 8014894:	af00      	add	r7, sp, #0
 8014896:	60f8      	str	r0, [r7, #12]
 8014898:	60b9      	str	r1, [r7, #8]
 801489a:	607a      	str	r2, [r7, #4]
 801489c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801489e:	2301      	movs	r3, #1
 80148a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80148a2:	2300      	movs	r3, #0
 80148a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80148ae:	2b01      	cmp	r3, #1
 80148b0:	d101      	bne.n	80148b6 <HAL_SPI_TransmitReceive+0x26>
 80148b2:	2302      	movs	r3, #2
 80148b4:	e18a      	b.n	8014bcc <HAL_SPI_TransmitReceive+0x33c>
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2201      	movs	r2, #1
 80148ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80148be:	f7fd f8d5 	bl	8011a6c <HAL_GetTick>
 80148c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80148d4:	887b      	ldrh	r3, [r7, #2]
 80148d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80148d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d00f      	beq.n	8014900 <HAL_SPI_TransmitReceive+0x70>
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80148e6:	d107      	bne.n	80148f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	689b      	ldr	r3, [r3, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d103      	bne.n	80148f8 <HAL_SPI_TransmitReceive+0x68>
 80148f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148f4:	2b04      	cmp	r3, #4
 80148f6:	d003      	beq.n	8014900 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80148f8:	2302      	movs	r3, #2
 80148fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80148fe:	e15b      	b.n	8014bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d005      	beq.n	8014912 <HAL_SPI_TransmitReceive+0x82>
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d002      	beq.n	8014912 <HAL_SPI_TransmitReceive+0x82>
 801490c:	887b      	ldrh	r3, [r7, #2]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d103      	bne.n	801491a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8014912:	2301      	movs	r3, #1
 8014914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014918:	e14e      	b.n	8014bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014920:	b2db      	uxtb	r3, r3
 8014922:	2b04      	cmp	r3, #4
 8014924:	d003      	beq.n	801492e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2205      	movs	r2, #5
 801492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2200      	movs	r2, #0
 8014932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	887a      	ldrh	r2, [r7, #2]
 801493e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	887a      	ldrh	r2, [r7, #2]
 8014944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	68ba      	ldr	r2, [r7, #8]
 801494a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	887a      	ldrh	r2, [r7, #2]
 8014950:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	887a      	ldrh	r2, [r7, #2]
 8014956:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2200      	movs	r2, #0
 801495c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801496e:	2b40      	cmp	r3, #64	; 0x40
 8014970:	d007      	beq.n	8014982 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014980:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801498a:	d178      	bne.n	8014a7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d002      	beq.n	801499a <HAL_SPI_TransmitReceive+0x10a>
 8014994:	8b7b      	ldrh	r3, [r7, #26]
 8014996:	2b01      	cmp	r3, #1
 8014998:	d166      	bne.n	8014a68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801499e:	881a      	ldrh	r2, [r3, #0]
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149aa:	1c9a      	adds	r2, r3, #2
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	3b01      	subs	r3, #1
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80149be:	e053      	b.n	8014a68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	689b      	ldr	r3, [r3, #8]
 80149c6:	f003 0302 	and.w	r3, r3, #2
 80149ca:	2b02      	cmp	r3, #2
 80149cc:	d11b      	bne.n	8014a06 <HAL_SPI_TransmitReceive+0x176>
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d016      	beq.n	8014a06 <HAL_SPI_TransmitReceive+0x176>
 80149d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d113      	bne.n	8014a06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149e2:	881a      	ldrh	r2, [r3, #0]
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ee:	1c9a      	adds	r2, r3, #2
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	3b01      	subs	r3, #1
 80149fc:	b29a      	uxth	r2, r3
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014a02:	2300      	movs	r3, #0
 8014a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	689b      	ldr	r3, [r3, #8]
 8014a0c:	f003 0301 	and.w	r3, r3, #1
 8014a10:	2b01      	cmp	r3, #1
 8014a12:	d119      	bne.n	8014a48 <HAL_SPI_TransmitReceive+0x1b8>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d014      	beq.n	8014a48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	68da      	ldr	r2, [r3, #12]
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a28:	b292      	uxth	r2, r2
 8014a2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a30:	1c9a      	adds	r2, r3, #2
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	3b01      	subs	r3, #1
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014a44:	2301      	movs	r3, #1
 8014a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014a48:	f7fd f810 	bl	8011a6c <HAL_GetTick>
 8014a4c:	4602      	mov	r2, r0
 8014a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d807      	bhi.n	8014a68 <HAL_SPI_TransmitReceive+0x1d8>
 8014a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a5e:	d003      	beq.n	8014a68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8014a60:	2303      	movs	r3, #3
 8014a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014a66:	e0a7      	b.n	8014bb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d1a6      	bne.n	80149c0 <HAL_SPI_TransmitReceive+0x130>
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d1a1      	bne.n	80149c0 <HAL_SPI_TransmitReceive+0x130>
 8014a7c:	e07c      	b.n	8014b78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d002      	beq.n	8014a8c <HAL_SPI_TransmitReceive+0x1fc>
 8014a86:	8b7b      	ldrh	r3, [r7, #26]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d16b      	bne.n	8014b64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	330c      	adds	r3, #12
 8014a96:	7812      	ldrb	r2, [r2, #0]
 8014a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a9e:	1c5a      	adds	r2, r3, #1
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	b29a      	uxth	r2, r3
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014ab2:	e057      	b.n	8014b64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	689b      	ldr	r3, [r3, #8]
 8014aba:	f003 0302 	and.w	r3, r3, #2
 8014abe:	2b02      	cmp	r3, #2
 8014ac0:	d11c      	bne.n	8014afc <HAL_SPI_TransmitReceive+0x26c>
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d017      	beq.n	8014afc <HAL_SPI_TransmitReceive+0x26c>
 8014acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d114      	bne.n	8014afc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	330c      	adds	r3, #12
 8014adc:	7812      	ldrb	r2, [r2, #0]
 8014ade:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae4:	1c5a      	adds	r2, r3, #1
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	3b01      	subs	r3, #1
 8014af2:	b29a      	uxth	r2, r3
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014af8:	2300      	movs	r3, #0
 8014afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	689b      	ldr	r3, [r3, #8]
 8014b02:	f003 0301 	and.w	r3, r3, #1
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d119      	bne.n	8014b3e <HAL_SPI_TransmitReceive+0x2ae>
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d014      	beq.n	8014b3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	68da      	ldr	r2, [r3, #12]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b1e:	b2d2      	uxtb	r2, r2
 8014b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b26:	1c5a      	adds	r2, r3, #1
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	3b01      	subs	r3, #1
 8014b34:	b29a      	uxth	r2, r3
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014b3e:	f7fc ff95 	bl	8011a6c <HAL_GetTick>
 8014b42:	4602      	mov	r2, r0
 8014b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b46:	1ad3      	subs	r3, r2, r3
 8014b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d803      	bhi.n	8014b56 <HAL_SPI_TransmitReceive+0x2c6>
 8014b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b54:	d102      	bne.n	8014b5c <HAL_SPI_TransmitReceive+0x2cc>
 8014b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d103      	bne.n	8014b64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014b5c:	2303      	movs	r3, #3
 8014b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014b62:	e029      	b.n	8014bb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014b68:	b29b      	uxth	r3, r3
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d1a2      	bne.n	8014ab4 <HAL_SPI_TransmitReceive+0x224>
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d19d      	bne.n	8014ab4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f000 f917 	bl	8014db0 <SPI_EndRxTxTransaction>
 8014b82:	4603      	mov	r3, r0
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d006      	beq.n	8014b96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2220      	movs	r2, #32
 8014b92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8014b94:	e010      	b.n	8014bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	689b      	ldr	r3, [r3, #8]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d10b      	bne.n	8014bb6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	617b      	str	r3, [r7, #20]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	617b      	str	r3, [r7, #20]
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	689b      	ldr	r3, [r3, #8]
 8014bb0:	617b      	str	r3, [r7, #20]
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	e000      	b.n	8014bb8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8014bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2201      	movs	r2, #1
 8014bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014bc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3730      	adds	r7, #48	; 0x30
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}

08014bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b088      	sub	sp, #32
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	603b      	str	r3, [r7, #0]
 8014be0:	4613      	mov	r3, r2
 8014be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014be4:	f7fc ff42 	bl	8011a6c <HAL_GetTick>
 8014be8:	4602      	mov	r2, r0
 8014bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bec:	1a9b      	subs	r3, r3, r2
 8014bee:	683a      	ldr	r2, [r7, #0]
 8014bf0:	4413      	add	r3, r2
 8014bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014bf4:	f7fc ff3a 	bl	8011a6c <HAL_GetTick>
 8014bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014bfa:	4b39      	ldr	r3, [pc, #228]	; (8014ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	015b      	lsls	r3, r3, #5
 8014c00:	0d1b      	lsrs	r3, r3, #20
 8014c02:	69fa      	ldr	r2, [r7, #28]
 8014c04:	fb02 f303 	mul.w	r3, r2, r3
 8014c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014c0a:	e054      	b.n	8014cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c12:	d050      	beq.n	8014cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014c14:	f7fc ff2a 	bl	8011a6c <HAL_GetTick>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	69fa      	ldr	r2, [r7, #28]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d902      	bls.n	8014c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d13d      	bne.n	8014ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	685a      	ldr	r2, [r3, #4]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014c42:	d111      	bne.n	8014c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	689b      	ldr	r3, [r3, #8]
 8014c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c4c:	d004      	beq.n	8014c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	689b      	ldr	r3, [r3, #8]
 8014c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c56:	d107      	bne.n	8014c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014c70:	d10f      	bne.n	8014c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014c80:	601a      	str	r2, [r3, #0]
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2201      	movs	r2, #1
 8014c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	e017      	b.n	8014cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d101      	bne.n	8014cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014cac:	2300      	movs	r3, #0
 8014cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	689a      	ldr	r2, [r3, #8]
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	4013      	ands	r3, r2
 8014cc0:	68ba      	ldr	r2, [r7, #8]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	bf0c      	ite	eq
 8014cc6:	2301      	moveq	r3, #1
 8014cc8:	2300      	movne	r3, #0
 8014cca:	b2db      	uxtb	r3, r3
 8014ccc:	461a      	mov	r2, r3
 8014cce:	79fb      	ldrb	r3, [r7, #7]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d19b      	bne.n	8014c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014cd4:	2300      	movs	r3, #0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3720      	adds	r7, #32
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	20000084 	.word	0x20000084

08014ce4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b086      	sub	sp, #24
 8014ce8:	af02      	add	r7, sp, #8
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	685b      	ldr	r3, [r3, #4]
 8014cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014cf8:	d111      	bne.n	8014d1e <SPI_EndRxTransaction+0x3a>
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	689b      	ldr	r3, [r3, #8]
 8014cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014d02:	d004      	beq.n	8014d0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d0c:	d107      	bne.n	8014d1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014d1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014d26:	d12a      	bne.n	8014d7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	689b      	ldr	r3, [r3, #8]
 8014d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d30:	d012      	beq.n	8014d58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	2180      	movs	r1, #128	; 0x80
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f7ff ff49 	bl	8014bd4 <SPI_WaitFlagStateUntilTimeout>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d02d      	beq.n	8014da4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d4c:	f043 0220 	orr.w	r2, r3, #32
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014d54:	2303      	movs	r3, #3
 8014d56:	e026      	b.n	8014da6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	9300      	str	r3, [sp, #0]
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	2101      	movs	r1, #1
 8014d62:	68f8      	ldr	r0, [r7, #12]
 8014d64:	f7ff ff36 	bl	8014bd4 <SPI_WaitFlagStateUntilTimeout>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d01a      	beq.n	8014da4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d72:	f043 0220 	orr.w	r2, r3, #32
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014d7a:	2303      	movs	r3, #3
 8014d7c:	e013      	b.n	8014da6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	9300      	str	r3, [sp, #0]
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2200      	movs	r2, #0
 8014d86:	2101      	movs	r1, #1
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f7ff ff23 	bl	8014bd4 <SPI_WaitFlagStateUntilTimeout>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d007      	beq.n	8014da4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d98:	f043 0220 	orr.w	r2, r3, #32
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014da0:	2303      	movs	r3, #3
 8014da2:	e000      	b.n	8014da6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014da4:	2300      	movs	r3, #0
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
	...

08014db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b088      	sub	sp, #32
 8014db4:	af02      	add	r7, sp, #8
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	60b9      	str	r1, [r7, #8]
 8014dba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014dbc:	4b1b      	ldr	r3, [pc, #108]	; (8014e2c <SPI_EndRxTxTransaction+0x7c>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	4a1b      	ldr	r2, [pc, #108]	; (8014e30 <SPI_EndRxTxTransaction+0x80>)
 8014dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8014dc6:	0d5b      	lsrs	r3, r3, #21
 8014dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014dcc:	fb02 f303 	mul.w	r3, r2, r3
 8014dd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014dda:	d112      	bne.n	8014e02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	9300      	str	r3, [sp, #0]
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	2200      	movs	r2, #0
 8014de4:	2180      	movs	r1, #128	; 0x80
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f7ff fef4 	bl	8014bd4 <SPI_WaitFlagStateUntilTimeout>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d016      	beq.n	8014e20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014df6:	f043 0220 	orr.w	r2, r3, #32
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	e00f      	b.n	8014e22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d00a      	beq.n	8014e1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	689b      	ldr	r3, [r3, #8]
 8014e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e18:	2b80      	cmp	r3, #128	; 0x80
 8014e1a:	d0f2      	beq.n	8014e02 <SPI_EndRxTxTransaction+0x52>
 8014e1c:	e000      	b.n	8014e20 <SPI_EndRxTxTransaction+0x70>
        break;
 8014e1e:	bf00      	nop
  }

  return HAL_OK;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3718      	adds	r7, #24
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	20000084 	.word	0x20000084
 8014e30:	165e9f81 	.word	0x165e9f81

08014e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d101      	bne.n	8014e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014e42:	2301      	movs	r3, #1
 8014e44:	e041      	b.n	8014eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d106      	bne.n	8014e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2200      	movs	r2, #0
 8014e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014e5a:	6878      	ldr	r0, [r7, #4]
 8014e5c:	f7f0 f990 	bl	8005180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2202      	movs	r2, #2
 8014e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	3304      	adds	r3, #4
 8014e70:	4619      	mov	r1, r3
 8014e72:	4610      	mov	r0, r2
 8014e74:	f001 f858 	bl	8015f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2201      	movs	r2, #1
 8014e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2201      	movs	r2, #1
 8014e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2201      	movs	r2, #1
 8014ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
	...

08014ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b085      	sub	sp, #20
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	d001      	beq.n	8014eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8014ee8:	2301      	movs	r3, #1
 8014eea:	e046      	b.n	8014f7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2202      	movs	r2, #2
 8014ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	4a23      	ldr	r2, [pc, #140]	; (8014f88 <HAL_TIM_Base_Start+0xb4>)
 8014efa:	4293      	cmp	r3, r2
 8014efc:	d022      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f06:	d01d      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	4a1f      	ldr	r2, [pc, #124]	; (8014f8c <HAL_TIM_Base_Start+0xb8>)
 8014f0e:	4293      	cmp	r3, r2
 8014f10:	d018      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	4a1e      	ldr	r2, [pc, #120]	; (8014f90 <HAL_TIM_Base_Start+0xbc>)
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	d013      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	4a1c      	ldr	r2, [pc, #112]	; (8014f94 <HAL_TIM_Base_Start+0xc0>)
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d00e      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	4a1b      	ldr	r2, [pc, #108]	; (8014f98 <HAL_TIM_Base_Start+0xc4>)
 8014f2c:	4293      	cmp	r3, r2
 8014f2e:	d009      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	4a19      	ldr	r2, [pc, #100]	; (8014f9c <HAL_TIM_Base_Start+0xc8>)
 8014f36:	4293      	cmp	r3, r2
 8014f38:	d004      	beq.n	8014f44 <HAL_TIM_Base_Start+0x70>
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	4a18      	ldr	r2, [pc, #96]	; (8014fa0 <HAL_TIM_Base_Start+0xcc>)
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d111      	bne.n	8014f68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	689b      	ldr	r3, [r3, #8]
 8014f4a:	f003 0307 	and.w	r3, r3, #7
 8014f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2b06      	cmp	r3, #6
 8014f54:	d010      	beq.n	8014f78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	f042 0201 	orr.w	r2, r2, #1
 8014f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014f66:	e007      	b.n	8014f78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f042 0201 	orr.w	r2, r2, #1
 8014f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014f78:	2300      	movs	r3, #0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3714      	adds	r7, #20
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop
 8014f88:	40010000 	.word	0x40010000
 8014f8c:	40000400 	.word	0x40000400
 8014f90:	40000800 	.word	0x40000800
 8014f94:	40000c00 	.word	0x40000c00
 8014f98:	40010400 	.word	0x40010400
 8014f9c:	40014000 	.word	0x40014000
 8014fa0:	40001800 	.word	0x40001800

08014fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014fb2:	b2db      	uxtb	r3, r3
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d001      	beq.n	8014fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014fb8:	2301      	movs	r3, #1
 8014fba:	e04e      	b.n	801505a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2202      	movs	r2, #2
 8014fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	68da      	ldr	r2, [r3, #12]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	f042 0201 	orr.w	r2, r2, #1
 8014fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4a23      	ldr	r2, [pc, #140]	; (8015068 <HAL_TIM_Base_Start_IT+0xc4>)
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d022      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014fe6:	d01d      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	4a1f      	ldr	r2, [pc, #124]	; (801506c <HAL_TIM_Base_Start_IT+0xc8>)
 8014fee:	4293      	cmp	r3, r2
 8014ff0:	d018      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	4a1e      	ldr	r2, [pc, #120]	; (8015070 <HAL_TIM_Base_Start_IT+0xcc>)
 8014ff8:	4293      	cmp	r3, r2
 8014ffa:	d013      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	4a1c      	ldr	r2, [pc, #112]	; (8015074 <HAL_TIM_Base_Start_IT+0xd0>)
 8015002:	4293      	cmp	r3, r2
 8015004:	d00e      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4a1b      	ldr	r2, [pc, #108]	; (8015078 <HAL_TIM_Base_Start_IT+0xd4>)
 801500c:	4293      	cmp	r3, r2
 801500e:	d009      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4a19      	ldr	r2, [pc, #100]	; (801507c <HAL_TIM_Base_Start_IT+0xd8>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d004      	beq.n	8015024 <HAL_TIM_Base_Start_IT+0x80>
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	4a18      	ldr	r2, [pc, #96]	; (8015080 <HAL_TIM_Base_Start_IT+0xdc>)
 8015020:	4293      	cmp	r3, r2
 8015022:	d111      	bne.n	8015048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	f003 0307 	and.w	r3, r3, #7
 801502e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b06      	cmp	r3, #6
 8015034:	d010      	beq.n	8015058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	f042 0201 	orr.w	r2, r2, #1
 8015044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015046:	e007      	b.n	8015058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f042 0201 	orr.w	r2, r2, #1
 8015056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3714      	adds	r7, #20
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr
 8015066:	bf00      	nop
 8015068:	40010000 	.word	0x40010000
 801506c:	40000400 	.word	0x40000400
 8015070:	40000800 	.word	0x40000800
 8015074:	40000c00 	.word	0x40000c00
 8015078:	40010400 	.word	0x40010400
 801507c:	40014000 	.word	0x40014000
 8015080:	40001800 	.word	0x40001800

08015084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d101      	bne.n	8015096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015092:	2301      	movs	r3, #1
 8015094:	e041      	b.n	801511a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801509c:	b2db      	uxtb	r3, r3
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d106      	bne.n	80150b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f000 f839 	bl	8015122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2202      	movs	r2, #2
 80150b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	3304      	adds	r3, #4
 80150c0:	4619      	mov	r1, r3
 80150c2:	4610      	mov	r0, r2
 80150c4:	f000 ff30 	bl	8015f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2201      	movs	r2, #1
 80150cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2201      	movs	r2, #1
 80150d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2201      	movs	r2, #1
 80150dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2201      	movs	r2, #1
 80150e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2201      	movs	r2, #1
 80150ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2201      	movs	r2, #1
 80150f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2201      	movs	r2, #1
 80150fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2201      	movs	r2, #1
 8015104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2201      	movs	r2, #1
 801510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2201      	movs	r2, #1
 8015114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015118:	2300      	movs	r3, #0
}
 801511a:	4618      	mov	r0, r3
 801511c:	3708      	adds	r7, #8
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}

08015122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8015122:	b480      	push	{r7}
 8015124:	b083      	sub	sp, #12
 8015126:	af00      	add	r7, sp, #0
 8015128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801512a:	bf00      	nop
 801512c:	370c      	adds	r7, #12
 801512e:	46bd      	mov	sp, r7
 8015130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015134:	4770      	bx	lr
	...

08015138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d109      	bne.n	801515c <HAL_TIM_PWM_Start+0x24>
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b01      	cmp	r3, #1
 8015152:	bf14      	ite	ne
 8015154:	2301      	movne	r3, #1
 8015156:	2300      	moveq	r3, #0
 8015158:	b2db      	uxtb	r3, r3
 801515a:	e022      	b.n	80151a2 <HAL_TIM_PWM_Start+0x6a>
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	2b04      	cmp	r3, #4
 8015160:	d109      	bne.n	8015176 <HAL_TIM_PWM_Start+0x3e>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015168:	b2db      	uxtb	r3, r3
 801516a:	2b01      	cmp	r3, #1
 801516c:	bf14      	ite	ne
 801516e:	2301      	movne	r3, #1
 8015170:	2300      	moveq	r3, #0
 8015172:	b2db      	uxtb	r3, r3
 8015174:	e015      	b.n	80151a2 <HAL_TIM_PWM_Start+0x6a>
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	2b08      	cmp	r3, #8
 801517a:	d109      	bne.n	8015190 <HAL_TIM_PWM_Start+0x58>
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015182:	b2db      	uxtb	r3, r3
 8015184:	2b01      	cmp	r3, #1
 8015186:	bf14      	ite	ne
 8015188:	2301      	movne	r3, #1
 801518a:	2300      	moveq	r3, #0
 801518c:	b2db      	uxtb	r3, r3
 801518e:	e008      	b.n	80151a2 <HAL_TIM_PWM_Start+0x6a>
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015196:	b2db      	uxtb	r3, r3
 8015198:	2b01      	cmp	r3, #1
 801519a:	bf14      	ite	ne
 801519c:	2301      	movne	r3, #1
 801519e:	2300      	moveq	r3, #0
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d001      	beq.n	80151aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80151a6:	2301      	movs	r3, #1
 80151a8:	e07c      	b.n	80152a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d104      	bne.n	80151ba <HAL_TIM_PWM_Start+0x82>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2202      	movs	r2, #2
 80151b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80151b8:	e013      	b.n	80151e2 <HAL_TIM_PWM_Start+0xaa>
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	2b04      	cmp	r3, #4
 80151be:	d104      	bne.n	80151ca <HAL_TIM_PWM_Start+0x92>
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2202      	movs	r2, #2
 80151c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80151c8:	e00b      	b.n	80151e2 <HAL_TIM_PWM_Start+0xaa>
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	2b08      	cmp	r3, #8
 80151ce:	d104      	bne.n	80151da <HAL_TIM_PWM_Start+0xa2>
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2202      	movs	r2, #2
 80151d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80151d8:	e003      	b.n	80151e2 <HAL_TIM_PWM_Start+0xaa>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2202      	movs	r2, #2
 80151de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	2201      	movs	r2, #1
 80151e8:	6839      	ldr	r1, [r7, #0]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f001 fb42 	bl	8016874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4a2d      	ldr	r2, [pc, #180]	; (80152ac <HAL_TIM_PWM_Start+0x174>)
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d004      	beq.n	8015204 <HAL_TIM_PWM_Start+0xcc>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	4a2c      	ldr	r2, [pc, #176]	; (80152b0 <HAL_TIM_PWM_Start+0x178>)
 8015200:	4293      	cmp	r3, r2
 8015202:	d101      	bne.n	8015208 <HAL_TIM_PWM_Start+0xd0>
 8015204:	2301      	movs	r3, #1
 8015206:	e000      	b.n	801520a <HAL_TIM_PWM_Start+0xd2>
 8015208:	2300      	movs	r3, #0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d007      	beq.n	801521e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801521c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	4a22      	ldr	r2, [pc, #136]	; (80152ac <HAL_TIM_PWM_Start+0x174>)
 8015224:	4293      	cmp	r3, r2
 8015226:	d022      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015230:	d01d      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	4a1f      	ldr	r2, [pc, #124]	; (80152b4 <HAL_TIM_PWM_Start+0x17c>)
 8015238:	4293      	cmp	r3, r2
 801523a:	d018      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	4a1d      	ldr	r2, [pc, #116]	; (80152b8 <HAL_TIM_PWM_Start+0x180>)
 8015242:	4293      	cmp	r3, r2
 8015244:	d013      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	4a1c      	ldr	r2, [pc, #112]	; (80152bc <HAL_TIM_PWM_Start+0x184>)
 801524c:	4293      	cmp	r3, r2
 801524e:	d00e      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	4a16      	ldr	r2, [pc, #88]	; (80152b0 <HAL_TIM_PWM_Start+0x178>)
 8015256:	4293      	cmp	r3, r2
 8015258:	d009      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	4a18      	ldr	r2, [pc, #96]	; (80152c0 <HAL_TIM_PWM_Start+0x188>)
 8015260:	4293      	cmp	r3, r2
 8015262:	d004      	beq.n	801526e <HAL_TIM_PWM_Start+0x136>
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	4a16      	ldr	r2, [pc, #88]	; (80152c4 <HAL_TIM_PWM_Start+0x18c>)
 801526a:	4293      	cmp	r3, r2
 801526c:	d111      	bne.n	8015292 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	689b      	ldr	r3, [r3, #8]
 8015274:	f003 0307 	and.w	r3, r3, #7
 8015278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2b06      	cmp	r3, #6
 801527e:	d010      	beq.n	80152a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f042 0201 	orr.w	r2, r2, #1
 801528e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015290:	e007      	b.n	80152a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f042 0201 	orr.w	r2, r2, #1
 80152a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3710      	adds	r7, #16
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	40010000 	.word	0x40010000
 80152b0:	40010400 	.word	0x40010400
 80152b4:	40000400 	.word	0x40000400
 80152b8:	40000800 	.word	0x40000800
 80152bc:	40000c00 	.word	0x40000c00
 80152c0:	40014000 	.word	0x40014000
 80152c4:	40001800 	.word	0x40001800

080152c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d101      	bne.n	80152da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80152d6:	2301      	movs	r3, #1
 80152d8:	e041      	b.n	801535e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d106      	bne.n	80152f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2200      	movs	r2, #0
 80152ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f000 f839 	bl	8015366 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2202      	movs	r2, #2
 80152f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	3304      	adds	r3, #4
 8015304:	4619      	mov	r1, r3
 8015306:	4610      	mov	r0, r2
 8015308:	f000 fe0e 	bl	8015f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2201      	movs	r2, #1
 8015310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2201      	movs	r2, #1
 8015318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2201      	movs	r2, #1
 8015320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2201      	movs	r2, #1
 8015328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2201      	movs	r2, #1
 8015330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2201      	movs	r2, #1
 8015338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2201      	movs	r2, #1
 8015340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2201      	movs	r2, #1
 8015348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2201      	movs	r2, #1
 8015350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2201      	movs	r2, #1
 8015358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801535c:	2300      	movs	r3, #0
}
 801535e:	4618      	mov	r0, r3
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}

08015366 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8015366:	b480      	push	{r7}
 8015368:	b083      	sub	sp, #12
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801536e:	bf00      	nop
 8015370:	370c      	adds	r7, #12
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr
	...

0801537c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d104      	bne.n	8015396 <HAL_TIM_IC_Start+0x1a>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015392:	b2db      	uxtb	r3, r3
 8015394:	e013      	b.n	80153be <HAL_TIM_IC_Start+0x42>
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	2b04      	cmp	r3, #4
 801539a:	d104      	bne.n	80153a6 <HAL_TIM_IC_Start+0x2a>
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	e00b      	b.n	80153be <HAL_TIM_IC_Start+0x42>
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	2b08      	cmp	r3, #8
 80153aa:	d104      	bne.n	80153b6 <HAL_TIM_IC_Start+0x3a>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	e003      	b.n	80153be <HAL_TIM_IC_Start+0x42>
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d104      	bne.n	80153d0 <HAL_TIM_IC_Start+0x54>
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	e013      	b.n	80153f8 <HAL_TIM_IC_Start+0x7c>
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	2b04      	cmp	r3, #4
 80153d4:	d104      	bne.n	80153e0 <HAL_TIM_IC_Start+0x64>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	e00b      	b.n	80153f8 <HAL_TIM_IC_Start+0x7c>
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	2b08      	cmp	r3, #8
 80153e4:	d104      	bne.n	80153f0 <HAL_TIM_IC_Start+0x74>
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153ec:	b2db      	uxtb	r3, r3
 80153ee:	e003      	b.n	80153f8 <HAL_TIM_IC_Start+0x7c>
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153f6:	b2db      	uxtb	r3, r3
 80153f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80153fa:	7bfb      	ldrb	r3, [r7, #15]
 80153fc:	2b01      	cmp	r3, #1
 80153fe:	d102      	bne.n	8015406 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8015400:	7bbb      	ldrb	r3, [r7, #14]
 8015402:	2b01      	cmp	r3, #1
 8015404:	d001      	beq.n	801540a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8015406:	2301      	movs	r3, #1
 8015408:	e081      	b.n	801550e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d104      	bne.n	801541a <HAL_TIM_IC_Start+0x9e>
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2202      	movs	r2, #2
 8015414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015418:	e013      	b.n	8015442 <HAL_TIM_IC_Start+0xc6>
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	2b04      	cmp	r3, #4
 801541e:	d104      	bne.n	801542a <HAL_TIM_IC_Start+0xae>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2202      	movs	r2, #2
 8015424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015428:	e00b      	b.n	8015442 <HAL_TIM_IC_Start+0xc6>
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	2b08      	cmp	r3, #8
 801542e:	d104      	bne.n	801543a <HAL_TIM_IC_Start+0xbe>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2202      	movs	r2, #2
 8015434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015438:	e003      	b.n	8015442 <HAL_TIM_IC_Start+0xc6>
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2202      	movs	r2, #2
 801543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d104      	bne.n	8015452 <HAL_TIM_IC_Start+0xd6>
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2202      	movs	r2, #2
 801544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015450:	e013      	b.n	801547a <HAL_TIM_IC_Start+0xfe>
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	2b04      	cmp	r3, #4
 8015456:	d104      	bne.n	8015462 <HAL_TIM_IC_Start+0xe6>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2202      	movs	r2, #2
 801545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015460:	e00b      	b.n	801547a <HAL_TIM_IC_Start+0xfe>
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	2b08      	cmp	r3, #8
 8015466:	d104      	bne.n	8015472 <HAL_TIM_IC_Start+0xf6>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2202      	movs	r2, #2
 801546c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015470:	e003      	b.n	801547a <HAL_TIM_IC_Start+0xfe>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2202      	movs	r2, #2
 8015476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2201      	movs	r2, #1
 8015480:	6839      	ldr	r1, [r7, #0]
 8015482:	4618      	mov	r0, r3
 8015484:	f001 f9f6 	bl	8016874 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	4a22      	ldr	r2, [pc, #136]	; (8015518 <HAL_TIM_IC_Start+0x19c>)
 801548e:	4293      	cmp	r3, r2
 8015490:	d022      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801549a:	d01d      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	4a1e      	ldr	r2, [pc, #120]	; (801551c <HAL_TIM_IC_Start+0x1a0>)
 80154a2:	4293      	cmp	r3, r2
 80154a4:	d018      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4a1d      	ldr	r2, [pc, #116]	; (8015520 <HAL_TIM_IC_Start+0x1a4>)
 80154ac:	4293      	cmp	r3, r2
 80154ae:	d013      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	4a1b      	ldr	r2, [pc, #108]	; (8015524 <HAL_TIM_IC_Start+0x1a8>)
 80154b6:	4293      	cmp	r3, r2
 80154b8:	d00e      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4a1a      	ldr	r2, [pc, #104]	; (8015528 <HAL_TIM_IC_Start+0x1ac>)
 80154c0:	4293      	cmp	r3, r2
 80154c2:	d009      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	4a18      	ldr	r2, [pc, #96]	; (801552c <HAL_TIM_IC_Start+0x1b0>)
 80154ca:	4293      	cmp	r3, r2
 80154cc:	d004      	beq.n	80154d8 <HAL_TIM_IC_Start+0x15c>
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	4a17      	ldr	r2, [pc, #92]	; (8015530 <HAL_TIM_IC_Start+0x1b4>)
 80154d4:	4293      	cmp	r3, r2
 80154d6:	d111      	bne.n	80154fc <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	689b      	ldr	r3, [r3, #8]
 80154de:	f003 0307 	and.w	r3, r3, #7
 80154e2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	2b06      	cmp	r3, #6
 80154e8:	d010      	beq.n	801550c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	681a      	ldr	r2, [r3, #0]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f042 0201 	orr.w	r2, r2, #1
 80154f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80154fa:	e007      	b.n	801550c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f042 0201 	orr.w	r2, r2, #1
 801550a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801550c:	2300      	movs	r3, #0
}
 801550e:	4618      	mov	r0, r3
 8015510:	3710      	adds	r7, #16
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	40010000 	.word	0x40010000
 801551c:	40000400 	.word	0x40000400
 8015520:	40000800 	.word	0x40000800
 8015524:	40000c00 	.word	0x40000c00
 8015528:	40010400 	.word	0x40010400
 801552c:	40014000 	.word	0x40014000
 8015530:	40001800 	.word	0x40001800

08015534 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b084      	sub	sp, #16
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801553e:	2300      	movs	r3, #0
 8015540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d104      	bne.n	8015552 <HAL_TIM_IC_Start_IT+0x1e>
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801554e:	b2db      	uxtb	r3, r3
 8015550:	e013      	b.n	801557a <HAL_TIM_IC_Start_IT+0x46>
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	2b04      	cmp	r3, #4
 8015556:	d104      	bne.n	8015562 <HAL_TIM_IC_Start_IT+0x2e>
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801555e:	b2db      	uxtb	r3, r3
 8015560:	e00b      	b.n	801557a <HAL_TIM_IC_Start_IT+0x46>
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	2b08      	cmp	r3, #8
 8015566:	d104      	bne.n	8015572 <HAL_TIM_IC_Start_IT+0x3e>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801556e:	b2db      	uxtb	r3, r3
 8015570:	e003      	b.n	801557a <HAL_TIM_IC_Start_IT+0x46>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015578:	b2db      	uxtb	r3, r3
 801557a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d104      	bne.n	801558c <HAL_TIM_IC_Start_IT+0x58>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015588:	b2db      	uxtb	r3, r3
 801558a:	e013      	b.n	80155b4 <HAL_TIM_IC_Start_IT+0x80>
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	2b04      	cmp	r3, #4
 8015590:	d104      	bne.n	801559c <HAL_TIM_IC_Start_IT+0x68>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015598:	b2db      	uxtb	r3, r3
 801559a:	e00b      	b.n	80155b4 <HAL_TIM_IC_Start_IT+0x80>
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	2b08      	cmp	r3, #8
 80155a0:	d104      	bne.n	80155ac <HAL_TIM_IC_Start_IT+0x78>
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	e003      	b.n	80155b4 <HAL_TIM_IC_Start_IT+0x80>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80155b6:	7bbb      	ldrb	r3, [r7, #14]
 80155b8:	2b01      	cmp	r3, #1
 80155ba:	d102      	bne.n	80155c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80155bc:	7b7b      	ldrb	r3, [r7, #13]
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d001      	beq.n	80155c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80155c2:	2301      	movs	r3, #1
 80155c4:	e0cc      	b.n	8015760 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d104      	bne.n	80155d6 <HAL_TIM_IC_Start_IT+0xa2>
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2202      	movs	r2, #2
 80155d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80155d4:	e013      	b.n	80155fe <HAL_TIM_IC_Start_IT+0xca>
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	2b04      	cmp	r3, #4
 80155da:	d104      	bne.n	80155e6 <HAL_TIM_IC_Start_IT+0xb2>
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2202      	movs	r2, #2
 80155e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80155e4:	e00b      	b.n	80155fe <HAL_TIM_IC_Start_IT+0xca>
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	2b08      	cmp	r3, #8
 80155ea:	d104      	bne.n	80155f6 <HAL_TIM_IC_Start_IT+0xc2>
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2202      	movs	r2, #2
 80155f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80155f4:	e003      	b.n	80155fe <HAL_TIM_IC_Start_IT+0xca>
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2202      	movs	r2, #2
 80155fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d104      	bne.n	801560e <HAL_TIM_IC_Start_IT+0xda>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2202      	movs	r2, #2
 8015608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801560c:	e013      	b.n	8015636 <HAL_TIM_IC_Start_IT+0x102>
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	2b04      	cmp	r3, #4
 8015612:	d104      	bne.n	801561e <HAL_TIM_IC_Start_IT+0xea>
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2202      	movs	r2, #2
 8015618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801561c:	e00b      	b.n	8015636 <HAL_TIM_IC_Start_IT+0x102>
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	2b08      	cmp	r3, #8
 8015622:	d104      	bne.n	801562e <HAL_TIM_IC_Start_IT+0xfa>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2202      	movs	r2, #2
 8015628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801562c:	e003      	b.n	8015636 <HAL_TIM_IC_Start_IT+0x102>
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2202      	movs	r2, #2
 8015632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	2b0c      	cmp	r3, #12
 801563a:	d841      	bhi.n	80156c0 <HAL_TIM_IC_Start_IT+0x18c>
 801563c:	a201      	add	r2, pc, #4	; (adr r2, 8015644 <HAL_TIM_IC_Start_IT+0x110>)
 801563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015642:	bf00      	nop
 8015644:	08015679 	.word	0x08015679
 8015648:	080156c1 	.word	0x080156c1
 801564c:	080156c1 	.word	0x080156c1
 8015650:	080156c1 	.word	0x080156c1
 8015654:	0801568b 	.word	0x0801568b
 8015658:	080156c1 	.word	0x080156c1
 801565c:	080156c1 	.word	0x080156c1
 8015660:	080156c1 	.word	0x080156c1
 8015664:	0801569d 	.word	0x0801569d
 8015668:	080156c1 	.word	0x080156c1
 801566c:	080156c1 	.word	0x080156c1
 8015670:	080156c1 	.word	0x080156c1
 8015674:	080156af 	.word	0x080156af
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	68da      	ldr	r2, [r3, #12]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	f042 0202 	orr.w	r2, r2, #2
 8015686:	60da      	str	r2, [r3, #12]
      break;
 8015688:	e01d      	b.n	80156c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	68da      	ldr	r2, [r3, #12]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f042 0204 	orr.w	r2, r2, #4
 8015698:	60da      	str	r2, [r3, #12]
      break;
 801569a:	e014      	b.n	80156c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	68da      	ldr	r2, [r3, #12]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	f042 0208 	orr.w	r2, r2, #8
 80156aa:	60da      	str	r2, [r3, #12]
      break;
 80156ac:	e00b      	b.n	80156c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	68da      	ldr	r2, [r3, #12]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	f042 0210 	orr.w	r2, r2, #16
 80156bc:	60da      	str	r2, [r3, #12]
      break;
 80156be:	e002      	b.n	80156c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80156c0:	2301      	movs	r3, #1
 80156c2:	73fb      	strb	r3, [r7, #15]
      break;
 80156c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80156c6:	7bfb      	ldrb	r3, [r7, #15]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d148      	bne.n	801575e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2201      	movs	r2, #1
 80156d2:	6839      	ldr	r1, [r7, #0]
 80156d4:	4618      	mov	r0, r3
 80156d6:	f001 f8cd 	bl	8016874 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	4a22      	ldr	r2, [pc, #136]	; (8015768 <HAL_TIM_IC_Start_IT+0x234>)
 80156e0:	4293      	cmp	r3, r2
 80156e2:	d022      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80156ec:	d01d      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	4a1e      	ldr	r2, [pc, #120]	; (801576c <HAL_TIM_IC_Start_IT+0x238>)
 80156f4:	4293      	cmp	r3, r2
 80156f6:	d018      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4a1c      	ldr	r2, [pc, #112]	; (8015770 <HAL_TIM_IC_Start_IT+0x23c>)
 80156fe:	4293      	cmp	r3, r2
 8015700:	d013      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	4a1b      	ldr	r2, [pc, #108]	; (8015774 <HAL_TIM_IC_Start_IT+0x240>)
 8015708:	4293      	cmp	r3, r2
 801570a:	d00e      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	4a19      	ldr	r2, [pc, #100]	; (8015778 <HAL_TIM_IC_Start_IT+0x244>)
 8015712:	4293      	cmp	r3, r2
 8015714:	d009      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	4a18      	ldr	r2, [pc, #96]	; (801577c <HAL_TIM_IC_Start_IT+0x248>)
 801571c:	4293      	cmp	r3, r2
 801571e:	d004      	beq.n	801572a <HAL_TIM_IC_Start_IT+0x1f6>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	4a16      	ldr	r2, [pc, #88]	; (8015780 <HAL_TIM_IC_Start_IT+0x24c>)
 8015726:	4293      	cmp	r3, r2
 8015728:	d111      	bne.n	801574e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	689b      	ldr	r3, [r3, #8]
 8015730:	f003 0307 	and.w	r3, r3, #7
 8015734:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	2b06      	cmp	r3, #6
 801573a:	d010      	beq.n	801575e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	f042 0201 	orr.w	r2, r2, #1
 801574a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801574c:	e007      	b.n	801575e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	681a      	ldr	r2, [r3, #0]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f042 0201 	orr.w	r2, r2, #1
 801575c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 801575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015760:	4618      	mov	r0, r3
 8015762:	3710      	adds	r7, #16
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}
 8015768:	40010000 	.word	0x40010000
 801576c:	40000400 	.word	0x40000400
 8015770:	40000800 	.word	0x40000800
 8015774:	40000c00 	.word	0x40000c00
 8015778:	40010400 	.word	0x40010400
 801577c:	40014000 	.word	0x40014000
 8015780:	40001800 	.word	0x40001800

08015784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	691b      	ldr	r3, [r3, #16]
 8015792:	f003 0302 	and.w	r3, r3, #2
 8015796:	2b02      	cmp	r3, #2
 8015798:	d122      	bne.n	80157e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	f003 0302 	and.w	r3, r3, #2
 80157a4:	2b02      	cmp	r3, #2
 80157a6:	d11b      	bne.n	80157e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f06f 0202 	mvn.w	r2, #2
 80157b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2201      	movs	r2, #1
 80157b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	699b      	ldr	r3, [r3, #24]
 80157be:	f003 0303 	and.w	r3, r3, #3
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d003      	beq.n	80157ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f7ec fa18 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 80157cc:	e005      	b.n	80157da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f000 fb8c 	bl	8015eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f000 fb93 	bl	8015f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	691b      	ldr	r3, [r3, #16]
 80157e6:	f003 0304 	and.w	r3, r3, #4
 80157ea:	2b04      	cmp	r3, #4
 80157ec:	d122      	bne.n	8015834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	68db      	ldr	r3, [r3, #12]
 80157f4:	f003 0304 	and.w	r3, r3, #4
 80157f8:	2b04      	cmp	r3, #4
 80157fa:	d11b      	bne.n	8015834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	f06f 0204 	mvn.w	r2, #4
 8015804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2202      	movs	r2, #2
 801580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	699b      	ldr	r3, [r3, #24]
 8015812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015816:	2b00      	cmp	r3, #0
 8015818:	d003      	beq.n	8015822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7ec f9ee 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 8015820:	e005      	b.n	801582e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fb62 	bl	8015eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f000 fb69 	bl	8015f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2200      	movs	r2, #0
 8015832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	691b      	ldr	r3, [r3, #16]
 801583a:	f003 0308 	and.w	r3, r3, #8
 801583e:	2b08      	cmp	r3, #8
 8015840:	d122      	bne.n	8015888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	68db      	ldr	r3, [r3, #12]
 8015848:	f003 0308 	and.w	r3, r3, #8
 801584c:	2b08      	cmp	r3, #8
 801584e:	d11b      	bne.n	8015888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f06f 0208 	mvn.w	r2, #8
 8015858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2204      	movs	r2, #4
 801585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	69db      	ldr	r3, [r3, #28]
 8015866:	f003 0303 	and.w	r3, r3, #3
 801586a:	2b00      	cmp	r3, #0
 801586c:	d003      	beq.n	8015876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7ec f9c4 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 8015874:	e005      	b.n	8015882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 fb38 	bl	8015eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f000 fb3f 	bl	8015f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2200      	movs	r2, #0
 8015886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	691b      	ldr	r3, [r3, #16]
 801588e:	f003 0310 	and.w	r3, r3, #16
 8015892:	2b10      	cmp	r3, #16
 8015894:	d122      	bne.n	80158dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	68db      	ldr	r3, [r3, #12]
 801589c:	f003 0310 	and.w	r3, r3, #16
 80158a0:	2b10      	cmp	r3, #16
 80158a2:	d11b      	bne.n	80158dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	f06f 0210 	mvn.w	r2, #16
 80158ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2208      	movs	r2, #8
 80158b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	69db      	ldr	r3, [r3, #28]
 80158ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d003      	beq.n	80158ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f7ec f99a 	bl	8001bfc <HAL_TIM_IC_CaptureCallback>
 80158c8:	e005      	b.n	80158d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 fb0e 	bl	8015eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f000 fb15 	bl	8015f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2200      	movs	r2, #0
 80158da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	691b      	ldr	r3, [r3, #16]
 80158e2:	f003 0301 	and.w	r3, r3, #1
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d10e      	bne.n	8015908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	f003 0301 	and.w	r3, r3, #1
 80158f4:	2b01      	cmp	r3, #1
 80158f6:	d107      	bne.n	8015908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	f06f 0201 	mvn.w	r2, #1
 8015900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f7ee fd28 	bl	8004358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	691b      	ldr	r3, [r3, #16]
 801590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015912:	2b80      	cmp	r3, #128	; 0x80
 8015914:	d10e      	bne.n	8015934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	68db      	ldr	r3, [r3, #12]
 801591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015920:	2b80      	cmp	r3, #128	; 0x80
 8015922:	d107      	bne.n	8015934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f001 f89e 	bl	8016a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	691b      	ldr	r3, [r3, #16]
 801593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801593e:	2b40      	cmp	r3, #64	; 0x40
 8015940:	d10e      	bne.n	8015960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801594c:	2b40      	cmp	r3, #64	; 0x40
 801594e:	d107      	bne.n	8015960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 fada 	bl	8015f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	691b      	ldr	r3, [r3, #16]
 8015966:	f003 0320 	and.w	r3, r3, #32
 801596a:	2b20      	cmp	r3, #32
 801596c:	d10e      	bne.n	801598c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	68db      	ldr	r3, [r3, #12]
 8015974:	f003 0320 	and.w	r3, r3, #32
 8015978:	2b20      	cmp	r3, #32
 801597a:	d107      	bne.n	801598c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	f06f 0220 	mvn.w	r2, #32
 8015984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f001 f868 	bl	8016a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801598c:	bf00      	nop
 801598e:	3708      	adds	r7, #8
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b086      	sub	sp, #24
 8015998:	af00      	add	r7, sp, #0
 801599a:	60f8      	str	r0, [r7, #12]
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80159a0:	2300      	movs	r3, #0
 80159a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d101      	bne.n	80159b2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80159ae:	2302      	movs	r3, #2
 80159b0:	e088      	b.n	8015ac4 <HAL_TIM_IC_ConfigChannel+0x130>
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	2201      	movs	r2, #1
 80159b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d11b      	bne.n	80159f8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	6818      	ldr	r0, [r3, #0]
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	6819      	ldr	r1, [r3, #0]
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	685a      	ldr	r2, [r3, #4]
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	f000 fd8c 	bl	80164ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	699a      	ldr	r2, [r3, #24]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	f022 020c 	bic.w	r2, r2, #12
 80159e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	6999      	ldr	r1, [r3, #24]
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	689a      	ldr	r2, [r3, #8]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	430a      	orrs	r2, r1
 80159f4:	619a      	str	r2, [r3, #24]
 80159f6:	e060      	b.n	8015aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2b04      	cmp	r3, #4
 80159fc:	d11c      	bne.n	8015a38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	6818      	ldr	r0, [r3, #0]
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	6819      	ldr	r1, [r3, #0]
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	685a      	ldr	r2, [r3, #4]
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	f000 fe10 	bl	8016632 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	699a      	ldr	r2, [r3, #24]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8015a20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	6999      	ldr	r1, [r3, #24]
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	689b      	ldr	r3, [r3, #8]
 8015a2c:	021a      	lsls	r2, r3, #8
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	430a      	orrs	r2, r1
 8015a34:	619a      	str	r2, [r3, #24]
 8015a36:	e040      	b.n	8015aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b08      	cmp	r3, #8
 8015a3c:	d11b      	bne.n	8015a76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	6818      	ldr	r0, [r3, #0]
 8015a42:	68bb      	ldr	r3, [r7, #8]
 8015a44:	6819      	ldr	r1, [r3, #0]
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	685a      	ldr	r2, [r3, #4]
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	f000 fe5d 	bl	801670c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	69da      	ldr	r2, [r3, #28]
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f022 020c 	bic.w	r2, r2, #12
 8015a60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	69d9      	ldr	r1, [r3, #28]
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	689a      	ldr	r2, [r3, #8]
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	430a      	orrs	r2, r1
 8015a72:	61da      	str	r2, [r3, #28]
 8015a74:	e021      	b.n	8015aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b0c      	cmp	r3, #12
 8015a7a:	d11c      	bne.n	8015ab6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	6818      	ldr	r0, [r3, #0]
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	6819      	ldr	r1, [r3, #0]
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	685a      	ldr	r2, [r3, #4]
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	f000 fe7a 	bl	8016784 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	69da      	ldr	r2, [r3, #28]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8015a9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	69d9      	ldr	r1, [r3, #28]
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	689b      	ldr	r3, [r3, #8]
 8015aaa:	021a      	lsls	r2, r3, #8
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	430a      	orrs	r2, r1
 8015ab2:	61da      	str	r2, [r3, #28]
 8015ab4:	e001      	b.n	8015aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2200      	movs	r2, #0
 8015abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3718      	adds	r7, #24
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	60f8      	str	r0, [r7, #12]
 8015ad4:	60b9      	str	r1, [r7, #8]
 8015ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d101      	bne.n	8015aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8015ae6:	2302      	movs	r3, #2
 8015ae8:	e0ae      	b.n	8015c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2201      	movs	r2, #1
 8015aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2b0c      	cmp	r3, #12
 8015af6:	f200 809f 	bhi.w	8015c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8015afa:	a201      	add	r2, pc, #4	; (adr r2, 8015b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8015afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b00:	08015b35 	.word	0x08015b35
 8015b04:	08015c39 	.word	0x08015c39
 8015b08:	08015c39 	.word	0x08015c39
 8015b0c:	08015c39 	.word	0x08015c39
 8015b10:	08015b75 	.word	0x08015b75
 8015b14:	08015c39 	.word	0x08015c39
 8015b18:	08015c39 	.word	0x08015c39
 8015b1c:	08015c39 	.word	0x08015c39
 8015b20:	08015bb7 	.word	0x08015bb7
 8015b24:	08015c39 	.word	0x08015c39
 8015b28:	08015c39 	.word	0x08015c39
 8015b2c:	08015c39 	.word	0x08015c39
 8015b30:	08015bf7 	.word	0x08015bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	68b9      	ldr	r1, [r7, #8]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f000 fa94 	bl	8016068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	699a      	ldr	r2, [r3, #24]
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f042 0208 	orr.w	r2, r2, #8
 8015b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	699a      	ldr	r2, [r3, #24]
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	f022 0204 	bic.w	r2, r2, #4
 8015b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	6999      	ldr	r1, [r3, #24]
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	691a      	ldr	r2, [r3, #16]
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	430a      	orrs	r2, r1
 8015b70:	619a      	str	r2, [r3, #24]
      break;
 8015b72:	e064      	b.n	8015c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	68b9      	ldr	r1, [r7, #8]
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f000 fae4 	bl	8016148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	699a      	ldr	r2, [r3, #24]
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	699a      	ldr	r2, [r3, #24]
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	6999      	ldr	r1, [r3, #24]
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	691b      	ldr	r3, [r3, #16]
 8015baa:	021a      	lsls	r2, r3, #8
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	430a      	orrs	r2, r1
 8015bb2:	619a      	str	r2, [r3, #24]
      break;
 8015bb4:	e043      	b.n	8015c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	68b9      	ldr	r1, [r7, #8]
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f000 fb39 	bl	8016234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	69da      	ldr	r2, [r3, #28]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	f042 0208 	orr.w	r2, r2, #8
 8015bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	69da      	ldr	r2, [r3, #28]
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	f022 0204 	bic.w	r2, r2, #4
 8015be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	69d9      	ldr	r1, [r3, #28]
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	691a      	ldr	r2, [r3, #16]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	430a      	orrs	r2, r1
 8015bf2:	61da      	str	r2, [r3, #28]
      break;
 8015bf4:	e023      	b.n	8015c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	68b9      	ldr	r1, [r7, #8]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f000 fb8d 	bl	801631c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	69da      	ldr	r2, [r3, #28]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	69da      	ldr	r2, [r3, #28]
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	69d9      	ldr	r1, [r3, #28]
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	691b      	ldr	r3, [r3, #16]
 8015c2c:	021a      	lsls	r2, r3, #8
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	430a      	orrs	r2, r1
 8015c34:	61da      	str	r2, [r3, #28]
      break;
 8015c36:	e002      	b.n	8015c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8015c38:	2301      	movs	r3, #1
 8015c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8015c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2200      	movs	r2, #0
 8015c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c64:	2b01      	cmp	r3, #1
 8015c66:	d101      	bne.n	8015c6c <HAL_TIM_ConfigClockSource+0x1c>
 8015c68:	2302      	movs	r3, #2
 8015c6a:	e0b4      	b.n	8015dd6 <HAL_TIM_ConfigClockSource+0x186>
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2201      	movs	r2, #1
 8015c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2202      	movs	r2, #2
 8015c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	689b      	ldr	r3, [r3, #8]
 8015c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	68ba      	ldr	r2, [r7, #8]
 8015c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015ca4:	d03e      	beq.n	8015d24 <HAL_TIM_ConfigClockSource+0xd4>
 8015ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015caa:	f200 8087 	bhi.w	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015cb2:	f000 8086 	beq.w	8015dc2 <HAL_TIM_ConfigClockSource+0x172>
 8015cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015cba:	d87f      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015cbc:	2b70      	cmp	r3, #112	; 0x70
 8015cbe:	d01a      	beq.n	8015cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8015cc0:	2b70      	cmp	r3, #112	; 0x70
 8015cc2:	d87b      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015cc4:	2b60      	cmp	r3, #96	; 0x60
 8015cc6:	d050      	beq.n	8015d6a <HAL_TIM_ConfigClockSource+0x11a>
 8015cc8:	2b60      	cmp	r3, #96	; 0x60
 8015cca:	d877      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015ccc:	2b50      	cmp	r3, #80	; 0x50
 8015cce:	d03c      	beq.n	8015d4a <HAL_TIM_ConfigClockSource+0xfa>
 8015cd0:	2b50      	cmp	r3, #80	; 0x50
 8015cd2:	d873      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015cd4:	2b40      	cmp	r3, #64	; 0x40
 8015cd6:	d058      	beq.n	8015d8a <HAL_TIM_ConfigClockSource+0x13a>
 8015cd8:	2b40      	cmp	r3, #64	; 0x40
 8015cda:	d86f      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015cdc:	2b30      	cmp	r3, #48	; 0x30
 8015cde:	d064      	beq.n	8015daa <HAL_TIM_ConfigClockSource+0x15a>
 8015ce0:	2b30      	cmp	r3, #48	; 0x30
 8015ce2:	d86b      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015ce4:	2b20      	cmp	r3, #32
 8015ce6:	d060      	beq.n	8015daa <HAL_TIM_ConfigClockSource+0x15a>
 8015ce8:	2b20      	cmp	r3, #32
 8015cea:	d867      	bhi.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d05c      	beq.n	8015daa <HAL_TIM_ConfigClockSource+0x15a>
 8015cf0:	2b10      	cmp	r3, #16
 8015cf2:	d05a      	beq.n	8015daa <HAL_TIM_ConfigClockSource+0x15a>
 8015cf4:	e062      	b.n	8015dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	6818      	ldr	r0, [r3, #0]
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	6899      	ldr	r1, [r3, #8]
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	685a      	ldr	r2, [r3, #4]
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	68db      	ldr	r3, [r3, #12]
 8015d06:	f000 fd95 	bl	8016834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	689b      	ldr	r3, [r3, #8]
 8015d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	68ba      	ldr	r2, [r7, #8]
 8015d20:	609a      	str	r2, [r3, #8]
      break;
 8015d22:	e04f      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	6818      	ldr	r0, [r3, #0]
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	6899      	ldr	r1, [r3, #8]
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	685a      	ldr	r2, [r3, #4]
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	68db      	ldr	r3, [r3, #12]
 8015d34:	f000 fd7e 	bl	8016834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	689a      	ldr	r2, [r3, #8]
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015d46:	609a      	str	r2, [r3, #8]
      break;
 8015d48:	e03c      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6818      	ldr	r0, [r3, #0]
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	6859      	ldr	r1, [r3, #4]
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	461a      	mov	r2, r3
 8015d58:	f000 fc3c 	bl	80165d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	2150      	movs	r1, #80	; 0x50
 8015d62:	4618      	mov	r0, r3
 8015d64:	f000 fd4b 	bl	80167fe <TIM_ITRx_SetConfig>
      break;
 8015d68:	e02c      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6818      	ldr	r0, [r3, #0]
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	6859      	ldr	r1, [r3, #4]
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	68db      	ldr	r3, [r3, #12]
 8015d76:	461a      	mov	r2, r3
 8015d78:	f000 fc98 	bl	80166ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2160      	movs	r1, #96	; 0x60
 8015d82:	4618      	mov	r0, r3
 8015d84:	f000 fd3b 	bl	80167fe <TIM_ITRx_SetConfig>
      break;
 8015d88:	e01c      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6818      	ldr	r0, [r3, #0]
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	6859      	ldr	r1, [r3, #4]
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	68db      	ldr	r3, [r3, #12]
 8015d96:	461a      	mov	r2, r3
 8015d98:	f000 fc1c 	bl	80165d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	2140      	movs	r1, #64	; 0x40
 8015da2:	4618      	mov	r0, r3
 8015da4:	f000 fd2b 	bl	80167fe <TIM_ITRx_SetConfig>
      break;
 8015da8:	e00c      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681a      	ldr	r2, [r3, #0]
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	4619      	mov	r1, r3
 8015db4:	4610      	mov	r0, r2
 8015db6:	f000 fd22 	bl	80167fe <TIM_ITRx_SetConfig>
      break;
 8015dba:	e003      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8015dc0:	e000      	b.n	8015dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8015dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2201      	movs	r2, #1
 8015dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3710      	adds	r7, #16
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}

08015dde <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b082      	sub	sp, #8
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	6078      	str	r0, [r7, #4]
 8015de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d101      	bne.n	8015df6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8015df2:	2302      	movs	r3, #2
 8015df4:	e031      	b.n	8015e5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2201      	movs	r2, #1
 8015dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2202      	movs	r2, #2
 8015e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8015e06:	6839      	ldr	r1, [r7, #0]
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 fadd 	bl	80163c8 <TIM_SlaveTimer_SetConfig>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d009      	beq.n	8015e28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2201      	movs	r2, #1
 8015e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8015e24:	2301      	movs	r3, #1
 8015e26:	e018      	b.n	8015e5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68da      	ldr	r2, [r3, #12]
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015e36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	68da      	ldr	r2, [r3, #12]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8015e46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2201      	movs	r2, #1
 8015e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2200      	movs	r2, #0
 8015e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3708      	adds	r7, #8
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
	...

08015e64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b085      	sub	sp, #20
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	60fb      	str	r3, [r7, #12]
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	2b0c      	cmp	r3, #12
 8015e76:	d831      	bhi.n	8015edc <HAL_TIM_ReadCapturedValue+0x78>
 8015e78:	a201      	add	r2, pc, #4	; (adr r2, 8015e80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8015e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e7e:	bf00      	nop
 8015e80:	08015eb5 	.word	0x08015eb5
 8015e84:	08015edd 	.word	0x08015edd
 8015e88:	08015edd 	.word	0x08015edd
 8015e8c:	08015edd 	.word	0x08015edd
 8015e90:	08015ebf 	.word	0x08015ebf
 8015e94:	08015edd 	.word	0x08015edd
 8015e98:	08015edd 	.word	0x08015edd
 8015e9c:	08015edd 	.word	0x08015edd
 8015ea0:	08015ec9 	.word	0x08015ec9
 8015ea4:	08015edd 	.word	0x08015edd
 8015ea8:	08015edd 	.word	0x08015edd
 8015eac:	08015edd 	.word	0x08015edd
 8015eb0:	08015ed3 	.word	0x08015ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eba:	60fb      	str	r3, [r7, #12]

      break;
 8015ebc:	e00f      	b.n	8015ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ec4:	60fb      	str	r3, [r7, #12]

      break;
 8015ec6:	e00a      	b.n	8015ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ece:	60fb      	str	r3, [r7, #12]

      break;
 8015ed0:	e005      	b.n	8015ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ed8:	60fb      	str	r3, [r7, #12]

      break;
 8015eda:	e000      	b.n	8015ede <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8015edc:	bf00      	nop
  }

  return tmpreg;
 8015ede:	68fb      	ldr	r3, [r7, #12]
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3714      	adds	r7, #20
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr

08015eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b083      	sub	sp, #12
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015ef4:	bf00      	nop
 8015ef6:	370c      	adds	r7, #12
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efe:	4770      	bx	lr

08015f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015f00:	b480      	push	{r7}
 8015f02:	b083      	sub	sp, #12
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015f08:	bf00      	nop
 8015f0a:	370c      	adds	r7, #12
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b083      	sub	sp, #12
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015f1c:	bf00      	nop
 8015f1e:	370c      	adds	r7, #12
 8015f20:	46bd      	mov	sp, r7
 8015f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f26:	4770      	bx	lr

08015f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015f28:	b480      	push	{r7}
 8015f2a:	b085      	sub	sp, #20
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	4a40      	ldr	r2, [pc, #256]	; (801603c <TIM_Base_SetConfig+0x114>)
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	d013      	beq.n	8015f68 <TIM_Base_SetConfig+0x40>
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f46:	d00f      	beq.n	8015f68 <TIM_Base_SetConfig+0x40>
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	4a3d      	ldr	r2, [pc, #244]	; (8016040 <TIM_Base_SetConfig+0x118>)
 8015f4c:	4293      	cmp	r3, r2
 8015f4e:	d00b      	beq.n	8015f68 <TIM_Base_SetConfig+0x40>
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	4a3c      	ldr	r2, [pc, #240]	; (8016044 <TIM_Base_SetConfig+0x11c>)
 8015f54:	4293      	cmp	r3, r2
 8015f56:	d007      	beq.n	8015f68 <TIM_Base_SetConfig+0x40>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	4a3b      	ldr	r2, [pc, #236]	; (8016048 <TIM_Base_SetConfig+0x120>)
 8015f5c:	4293      	cmp	r3, r2
 8015f5e:	d003      	beq.n	8015f68 <TIM_Base_SetConfig+0x40>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	4a3a      	ldr	r2, [pc, #232]	; (801604c <TIM_Base_SetConfig+0x124>)
 8015f64:	4293      	cmp	r3, r2
 8015f66:	d108      	bne.n	8015f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	68fa      	ldr	r2, [r7, #12]
 8015f76:	4313      	orrs	r3, r2
 8015f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	4a2f      	ldr	r2, [pc, #188]	; (801603c <TIM_Base_SetConfig+0x114>)
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	d02b      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f88:	d027      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4a2c      	ldr	r2, [pc, #176]	; (8016040 <TIM_Base_SetConfig+0x118>)
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	d023      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	4a2b      	ldr	r2, [pc, #172]	; (8016044 <TIM_Base_SetConfig+0x11c>)
 8015f96:	4293      	cmp	r3, r2
 8015f98:	d01f      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	4a2a      	ldr	r2, [pc, #168]	; (8016048 <TIM_Base_SetConfig+0x120>)
 8015f9e:	4293      	cmp	r3, r2
 8015fa0:	d01b      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	4a29      	ldr	r2, [pc, #164]	; (801604c <TIM_Base_SetConfig+0x124>)
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	d017      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	4a28      	ldr	r2, [pc, #160]	; (8016050 <TIM_Base_SetConfig+0x128>)
 8015fae:	4293      	cmp	r3, r2
 8015fb0:	d013      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	4a27      	ldr	r2, [pc, #156]	; (8016054 <TIM_Base_SetConfig+0x12c>)
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d00f      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4a26      	ldr	r2, [pc, #152]	; (8016058 <TIM_Base_SetConfig+0x130>)
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	d00b      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4a25      	ldr	r2, [pc, #148]	; (801605c <TIM_Base_SetConfig+0x134>)
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d007      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	4a24      	ldr	r2, [pc, #144]	; (8016060 <TIM_Base_SetConfig+0x138>)
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d003      	beq.n	8015fda <TIM_Base_SetConfig+0xb2>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	4a23      	ldr	r2, [pc, #140]	; (8016064 <TIM_Base_SetConfig+0x13c>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d108      	bne.n	8015fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	68fa      	ldr	r2, [r7, #12]
 8015fe8:	4313      	orrs	r3, r2
 8015fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	695b      	ldr	r3, [r3, #20]
 8015ff6:	4313      	orrs	r3, r2
 8015ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	689a      	ldr	r2, [r3, #8]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	681a      	ldr	r2, [r3, #0]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	4a0a      	ldr	r2, [pc, #40]	; (801603c <TIM_Base_SetConfig+0x114>)
 8016014:	4293      	cmp	r3, r2
 8016016:	d003      	beq.n	8016020 <TIM_Base_SetConfig+0xf8>
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	4a0c      	ldr	r2, [pc, #48]	; (801604c <TIM_Base_SetConfig+0x124>)
 801601c:	4293      	cmp	r3, r2
 801601e:	d103      	bne.n	8016028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	691a      	ldr	r2, [r3, #16]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2201      	movs	r2, #1
 801602c:	615a      	str	r2, [r3, #20]
}
 801602e:	bf00      	nop
 8016030:	3714      	adds	r7, #20
 8016032:	46bd      	mov	sp, r7
 8016034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016038:	4770      	bx	lr
 801603a:	bf00      	nop
 801603c:	40010000 	.word	0x40010000
 8016040:	40000400 	.word	0x40000400
 8016044:	40000800 	.word	0x40000800
 8016048:	40000c00 	.word	0x40000c00
 801604c:	40010400 	.word	0x40010400
 8016050:	40014000 	.word	0x40014000
 8016054:	40014400 	.word	0x40014400
 8016058:	40014800 	.word	0x40014800
 801605c:	40001800 	.word	0x40001800
 8016060:	40001c00 	.word	0x40001c00
 8016064:	40002000 	.word	0x40002000

08016068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016068:	b480      	push	{r7}
 801606a:	b087      	sub	sp, #28
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6a1b      	ldr	r3, [r3, #32]
 8016076:	f023 0201 	bic.w	r2, r3, #1
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	6a1b      	ldr	r3, [r3, #32]
 8016082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	699b      	ldr	r3, [r3, #24]
 801608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	f023 0303 	bic.w	r3, r3, #3
 801609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	68fa      	ldr	r2, [r7, #12]
 80160a6:	4313      	orrs	r3, r2
 80160a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	f023 0302 	bic.w	r3, r3, #2
 80160b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	689b      	ldr	r3, [r3, #8]
 80160b6:	697a      	ldr	r2, [r7, #20]
 80160b8:	4313      	orrs	r3, r2
 80160ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	4a20      	ldr	r2, [pc, #128]	; (8016140 <TIM_OC1_SetConfig+0xd8>)
 80160c0:	4293      	cmp	r3, r2
 80160c2:	d003      	beq.n	80160cc <TIM_OC1_SetConfig+0x64>
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	4a1f      	ldr	r2, [pc, #124]	; (8016144 <TIM_OC1_SetConfig+0xdc>)
 80160c8:	4293      	cmp	r3, r2
 80160ca:	d10c      	bne.n	80160e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	f023 0308 	bic.w	r3, r3, #8
 80160d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	697a      	ldr	r2, [r7, #20]
 80160da:	4313      	orrs	r3, r2
 80160dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80160de:	697b      	ldr	r3, [r7, #20]
 80160e0:	f023 0304 	bic.w	r3, r3, #4
 80160e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	4a15      	ldr	r2, [pc, #84]	; (8016140 <TIM_OC1_SetConfig+0xd8>)
 80160ea:	4293      	cmp	r3, r2
 80160ec:	d003      	beq.n	80160f6 <TIM_OC1_SetConfig+0x8e>
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	4a14      	ldr	r2, [pc, #80]	; (8016144 <TIM_OC1_SetConfig+0xdc>)
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d111      	bne.n	801611a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80160fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	695b      	ldr	r3, [r3, #20]
 801610a:	693a      	ldr	r2, [r7, #16]
 801610c:	4313      	orrs	r3, r2
 801610e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	699b      	ldr	r3, [r3, #24]
 8016114:	693a      	ldr	r2, [r7, #16]
 8016116:	4313      	orrs	r3, r2
 8016118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	693a      	ldr	r2, [r7, #16]
 801611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	68fa      	ldr	r2, [r7, #12]
 8016124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	685a      	ldr	r2, [r3, #4]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	697a      	ldr	r2, [r7, #20]
 8016132:	621a      	str	r2, [r3, #32]
}
 8016134:	bf00      	nop
 8016136:	371c      	adds	r7, #28
 8016138:	46bd      	mov	sp, r7
 801613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613e:	4770      	bx	lr
 8016140:	40010000 	.word	0x40010000
 8016144:	40010400 	.word	0x40010400

08016148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016148:	b480      	push	{r7}
 801614a:	b087      	sub	sp, #28
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6a1b      	ldr	r3, [r3, #32]
 8016156:	f023 0210 	bic.w	r2, r3, #16
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6a1b      	ldr	r3, [r3, #32]
 8016162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	699b      	ldr	r3, [r3, #24]
 801616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801617e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	021b      	lsls	r3, r3, #8
 8016186:	68fa      	ldr	r2, [r7, #12]
 8016188:	4313      	orrs	r3, r2
 801618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	f023 0320 	bic.w	r3, r3, #32
 8016192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	689b      	ldr	r3, [r3, #8]
 8016198:	011b      	lsls	r3, r3, #4
 801619a:	697a      	ldr	r2, [r7, #20]
 801619c:	4313      	orrs	r3, r2
 801619e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	4a22      	ldr	r2, [pc, #136]	; (801622c <TIM_OC2_SetConfig+0xe4>)
 80161a4:	4293      	cmp	r3, r2
 80161a6:	d003      	beq.n	80161b0 <TIM_OC2_SetConfig+0x68>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	4a21      	ldr	r2, [pc, #132]	; (8016230 <TIM_OC2_SetConfig+0xe8>)
 80161ac:	4293      	cmp	r3, r2
 80161ae:	d10d      	bne.n	80161cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80161b0:	697b      	ldr	r3, [r7, #20]
 80161b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80161b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	68db      	ldr	r3, [r3, #12]
 80161bc:	011b      	lsls	r3, r3, #4
 80161be:	697a      	ldr	r2, [r7, #20]
 80161c0:	4313      	orrs	r3, r2
 80161c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80161ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	4a17      	ldr	r2, [pc, #92]	; (801622c <TIM_OC2_SetConfig+0xe4>)
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d003      	beq.n	80161dc <TIM_OC2_SetConfig+0x94>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	4a16      	ldr	r2, [pc, #88]	; (8016230 <TIM_OC2_SetConfig+0xe8>)
 80161d8:	4293      	cmp	r3, r2
 80161da:	d113      	bne.n	8016204 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80161dc:	693b      	ldr	r3, [r7, #16]
 80161de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80161e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80161ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	695b      	ldr	r3, [r3, #20]
 80161f0:	009b      	lsls	r3, r3, #2
 80161f2:	693a      	ldr	r2, [r7, #16]
 80161f4:	4313      	orrs	r3, r2
 80161f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	699b      	ldr	r3, [r3, #24]
 80161fc:	009b      	lsls	r3, r3, #2
 80161fe:	693a      	ldr	r2, [r7, #16]
 8016200:	4313      	orrs	r3, r2
 8016202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	693a      	ldr	r2, [r7, #16]
 8016208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	68fa      	ldr	r2, [r7, #12]
 801620e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	685a      	ldr	r2, [r3, #4]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	697a      	ldr	r2, [r7, #20]
 801621c:	621a      	str	r2, [r3, #32]
}
 801621e:	bf00      	nop
 8016220:	371c      	adds	r7, #28
 8016222:	46bd      	mov	sp, r7
 8016224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop
 801622c:	40010000 	.word	0x40010000
 8016230:	40010400 	.word	0x40010400

08016234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016234:	b480      	push	{r7}
 8016236:	b087      	sub	sp, #28
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6a1b      	ldr	r3, [r3, #32]
 8016242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6a1b      	ldr	r3, [r3, #32]
 801624e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	685b      	ldr	r3, [r3, #4]
 8016254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	69db      	ldr	r3, [r3, #28]
 801625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f023 0303 	bic.w	r3, r3, #3
 801626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	68fa      	ldr	r2, [r7, #12]
 8016272:	4313      	orrs	r3, r2
 8016274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	689b      	ldr	r3, [r3, #8]
 8016282:	021b      	lsls	r3, r3, #8
 8016284:	697a      	ldr	r2, [r7, #20]
 8016286:	4313      	orrs	r3, r2
 8016288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	4a21      	ldr	r2, [pc, #132]	; (8016314 <TIM_OC3_SetConfig+0xe0>)
 801628e:	4293      	cmp	r3, r2
 8016290:	d003      	beq.n	801629a <TIM_OC3_SetConfig+0x66>
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	4a20      	ldr	r2, [pc, #128]	; (8016318 <TIM_OC3_SetConfig+0xe4>)
 8016296:	4293      	cmp	r3, r2
 8016298:	d10d      	bne.n	80162b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80162a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	021b      	lsls	r3, r3, #8
 80162a8:	697a      	ldr	r2, [r7, #20]
 80162aa:	4313      	orrs	r3, r2
 80162ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80162b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	4a16      	ldr	r2, [pc, #88]	; (8016314 <TIM_OC3_SetConfig+0xe0>)
 80162ba:	4293      	cmp	r3, r2
 80162bc:	d003      	beq.n	80162c6 <TIM_OC3_SetConfig+0x92>
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	4a15      	ldr	r2, [pc, #84]	; (8016318 <TIM_OC3_SetConfig+0xe4>)
 80162c2:	4293      	cmp	r3, r2
 80162c4:	d113      	bne.n	80162ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80162c6:	693b      	ldr	r3, [r7, #16]
 80162c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80162ce:	693b      	ldr	r3, [r7, #16]
 80162d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80162d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	695b      	ldr	r3, [r3, #20]
 80162da:	011b      	lsls	r3, r3, #4
 80162dc:	693a      	ldr	r2, [r7, #16]
 80162de:	4313      	orrs	r3, r2
 80162e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	699b      	ldr	r3, [r3, #24]
 80162e6:	011b      	lsls	r3, r3, #4
 80162e8:	693a      	ldr	r2, [r7, #16]
 80162ea:	4313      	orrs	r3, r2
 80162ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	693a      	ldr	r2, [r7, #16]
 80162f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	68fa      	ldr	r2, [r7, #12]
 80162f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	685a      	ldr	r2, [r3, #4]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	697a      	ldr	r2, [r7, #20]
 8016306:	621a      	str	r2, [r3, #32]
}
 8016308:	bf00      	nop
 801630a:	371c      	adds	r7, #28
 801630c:	46bd      	mov	sp, r7
 801630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016312:	4770      	bx	lr
 8016314:	40010000 	.word	0x40010000
 8016318:	40010400 	.word	0x40010400

0801631c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801631c:	b480      	push	{r7}
 801631e:	b087      	sub	sp, #28
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
 8016324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6a1b      	ldr	r3, [r3, #32]
 801632a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6a1b      	ldr	r3, [r3, #32]
 8016336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	69db      	ldr	r3, [r3, #28]
 8016342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	021b      	lsls	r3, r3, #8
 801635a:	68fa      	ldr	r2, [r7, #12]
 801635c:	4313      	orrs	r3, r2
 801635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016360:	693b      	ldr	r3, [r7, #16]
 8016362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	689b      	ldr	r3, [r3, #8]
 801636c:	031b      	lsls	r3, r3, #12
 801636e:	693a      	ldr	r2, [r7, #16]
 8016370:	4313      	orrs	r3, r2
 8016372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	4a12      	ldr	r2, [pc, #72]	; (80163c0 <TIM_OC4_SetConfig+0xa4>)
 8016378:	4293      	cmp	r3, r2
 801637a:	d003      	beq.n	8016384 <TIM_OC4_SetConfig+0x68>
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	4a11      	ldr	r2, [pc, #68]	; (80163c4 <TIM_OC4_SetConfig+0xa8>)
 8016380:	4293      	cmp	r3, r2
 8016382:	d109      	bne.n	8016398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801638a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	695b      	ldr	r3, [r3, #20]
 8016390:	019b      	lsls	r3, r3, #6
 8016392:	697a      	ldr	r2, [r7, #20]
 8016394:	4313      	orrs	r3, r2
 8016396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	697a      	ldr	r2, [r7, #20]
 801639c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	68fa      	ldr	r2, [r7, #12]
 80163a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	685a      	ldr	r2, [r3, #4]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	693a      	ldr	r2, [r7, #16]
 80163b0:	621a      	str	r2, [r3, #32]
}
 80163b2:	bf00      	nop
 80163b4:	371c      	adds	r7, #28
 80163b6:	46bd      	mov	sp, r7
 80163b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop
 80163c0:	40010000 	.word	0x40010000
 80163c4:	40010400 	.word	0x40010400

080163c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b086      	sub	sp, #24
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80163d2:	2300      	movs	r3, #0
 80163d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	689b      	ldr	r3, [r3, #8]
 80163dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80163de:	693b      	ldr	r3, [r7, #16]
 80163e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80163e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	693a      	ldr	r2, [r7, #16]
 80163ec:	4313      	orrs	r3, r2
 80163ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	f023 0307 	bic.w	r3, r3, #7
 80163f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	693a      	ldr	r2, [r7, #16]
 80163fe:	4313      	orrs	r3, r2
 8016400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	693a      	ldr	r2, [r7, #16]
 8016408:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	2b70      	cmp	r3, #112	; 0x70
 8016410:	d01a      	beq.n	8016448 <TIM_SlaveTimer_SetConfig+0x80>
 8016412:	2b70      	cmp	r3, #112	; 0x70
 8016414:	d860      	bhi.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
 8016416:	2b60      	cmp	r3, #96	; 0x60
 8016418:	d054      	beq.n	80164c4 <TIM_SlaveTimer_SetConfig+0xfc>
 801641a:	2b60      	cmp	r3, #96	; 0x60
 801641c:	d85c      	bhi.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
 801641e:	2b50      	cmp	r3, #80	; 0x50
 8016420:	d046      	beq.n	80164b0 <TIM_SlaveTimer_SetConfig+0xe8>
 8016422:	2b50      	cmp	r3, #80	; 0x50
 8016424:	d858      	bhi.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
 8016426:	2b40      	cmp	r3, #64	; 0x40
 8016428:	d019      	beq.n	801645e <TIM_SlaveTimer_SetConfig+0x96>
 801642a:	2b40      	cmp	r3, #64	; 0x40
 801642c:	d854      	bhi.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
 801642e:	2b30      	cmp	r3, #48	; 0x30
 8016430:	d055      	beq.n	80164de <TIM_SlaveTimer_SetConfig+0x116>
 8016432:	2b30      	cmp	r3, #48	; 0x30
 8016434:	d850      	bhi.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
 8016436:	2b20      	cmp	r3, #32
 8016438:	d051      	beq.n	80164de <TIM_SlaveTimer_SetConfig+0x116>
 801643a:	2b20      	cmp	r3, #32
 801643c:	d84c      	bhi.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
 801643e:	2b00      	cmp	r3, #0
 8016440:	d04d      	beq.n	80164de <TIM_SlaveTimer_SetConfig+0x116>
 8016442:	2b10      	cmp	r3, #16
 8016444:	d04b      	beq.n	80164de <TIM_SlaveTimer_SetConfig+0x116>
 8016446:	e047      	b.n	80164d8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6818      	ldr	r0, [r3, #0]
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	68d9      	ldr	r1, [r3, #12]
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	689a      	ldr	r2, [r3, #8]
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	691b      	ldr	r3, [r3, #16]
 8016458:	f000 f9ec 	bl	8016834 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 801645c:	e040      	b.n	80164e0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2b05      	cmp	r3, #5
 8016464:	d101      	bne.n	801646a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8016466:	2301      	movs	r3, #1
 8016468:	e03b      	b.n	80164e2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	6a1b      	ldr	r3, [r3, #32]
 8016470:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	6a1a      	ldr	r2, [r3, #32]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	f022 0201 	bic.w	r2, r2, #1
 8016480:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	699b      	ldr	r3, [r3, #24]
 8016488:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016490:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	691b      	ldr	r3, [r3, #16]
 8016496:	011b      	lsls	r3, r3, #4
 8016498:	68ba      	ldr	r2, [r7, #8]
 801649a:	4313      	orrs	r3, r2
 801649c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	68ba      	ldr	r2, [r7, #8]
 80164a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	68fa      	ldr	r2, [r7, #12]
 80164ac:	621a      	str	r2, [r3, #32]
      break;
 80164ae:	e017      	b.n	80164e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6818      	ldr	r0, [r3, #0]
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	6899      	ldr	r1, [r3, #8]
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	691b      	ldr	r3, [r3, #16]
 80164bc:	461a      	mov	r2, r3
 80164be:	f000 f889 	bl	80165d4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80164c2:	e00d      	b.n	80164e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	6818      	ldr	r0, [r3, #0]
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	6899      	ldr	r1, [r3, #8]
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	691b      	ldr	r3, [r3, #16]
 80164d0:	461a      	mov	r2, r3
 80164d2:	f000 f8eb 	bl	80166ac <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80164d6:	e003      	b.n	80164e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80164d8:	2301      	movs	r3, #1
 80164da:	75fb      	strb	r3, [r7, #23]
      break;
 80164dc:	e000      	b.n	80164e0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80164de:	bf00      	nop
  }

  return status;
 80164e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3718      	adds	r7, #24
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}
	...

080164ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80164ec:	b480      	push	{r7}
 80164ee:	b087      	sub	sp, #28
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
 80164f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	6a1b      	ldr	r3, [r3, #32]
 80164fe:	f023 0201 	bic.w	r2, r3, #1
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	699b      	ldr	r3, [r3, #24]
 801650a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	6a1b      	ldr	r3, [r3, #32]
 8016510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	4a28      	ldr	r2, [pc, #160]	; (80165b8 <TIM_TI1_SetConfig+0xcc>)
 8016516:	4293      	cmp	r3, r2
 8016518:	d01b      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016520:	d017      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	4a25      	ldr	r2, [pc, #148]	; (80165bc <TIM_TI1_SetConfig+0xd0>)
 8016526:	4293      	cmp	r3, r2
 8016528:	d013      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	4a24      	ldr	r2, [pc, #144]	; (80165c0 <TIM_TI1_SetConfig+0xd4>)
 801652e:	4293      	cmp	r3, r2
 8016530:	d00f      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	4a23      	ldr	r2, [pc, #140]	; (80165c4 <TIM_TI1_SetConfig+0xd8>)
 8016536:	4293      	cmp	r3, r2
 8016538:	d00b      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	4a22      	ldr	r2, [pc, #136]	; (80165c8 <TIM_TI1_SetConfig+0xdc>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d007      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	4a21      	ldr	r2, [pc, #132]	; (80165cc <TIM_TI1_SetConfig+0xe0>)
 8016546:	4293      	cmp	r3, r2
 8016548:	d003      	beq.n	8016552 <TIM_TI1_SetConfig+0x66>
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	4a20      	ldr	r2, [pc, #128]	; (80165d0 <TIM_TI1_SetConfig+0xe4>)
 801654e:	4293      	cmp	r3, r2
 8016550:	d101      	bne.n	8016556 <TIM_TI1_SetConfig+0x6a>
 8016552:	2301      	movs	r3, #1
 8016554:	e000      	b.n	8016558 <TIM_TI1_SetConfig+0x6c>
 8016556:	2300      	movs	r3, #0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d008      	beq.n	801656e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	f023 0303 	bic.w	r3, r3, #3
 8016562:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8016564:	697a      	ldr	r2, [r7, #20]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	4313      	orrs	r3, r2
 801656a:	617b      	str	r3, [r7, #20]
 801656c:	e003      	b.n	8016576 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	f043 0301 	orr.w	r3, r3, #1
 8016574:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801657c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	011b      	lsls	r3, r3, #4
 8016582:	b2db      	uxtb	r3, r3
 8016584:	697a      	ldr	r2, [r7, #20]
 8016586:	4313      	orrs	r3, r2
 8016588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	f023 030a 	bic.w	r3, r3, #10
 8016590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	f003 030a 	and.w	r3, r3, #10
 8016598:	693a      	ldr	r2, [r7, #16]
 801659a:	4313      	orrs	r3, r2
 801659c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	697a      	ldr	r2, [r7, #20]
 80165a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	693a      	ldr	r2, [r7, #16]
 80165a8:	621a      	str	r2, [r3, #32]
}
 80165aa:	bf00      	nop
 80165ac:	371c      	adds	r7, #28
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr
 80165b6:	bf00      	nop
 80165b8:	40010000 	.word	0x40010000
 80165bc:	40000400 	.word	0x40000400
 80165c0:	40000800 	.word	0x40000800
 80165c4:	40000c00 	.word	0x40000c00
 80165c8:	40010400 	.word	0x40010400
 80165cc:	40014000 	.word	0x40014000
 80165d0:	40001800 	.word	0x40001800

080165d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80165d4:	b480      	push	{r7}
 80165d6:	b087      	sub	sp, #28
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	60b9      	str	r1, [r7, #8]
 80165de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	6a1b      	ldr	r3, [r3, #32]
 80165e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	6a1b      	ldr	r3, [r3, #32]
 80165ea:	f023 0201 	bic.w	r2, r3, #1
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	699b      	ldr	r3, [r3, #24]
 80165f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80165fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	011b      	lsls	r3, r3, #4
 8016604:	693a      	ldr	r2, [r7, #16]
 8016606:	4313      	orrs	r3, r2
 8016608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801660a:	697b      	ldr	r3, [r7, #20]
 801660c:	f023 030a 	bic.w	r3, r3, #10
 8016610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016612:	697a      	ldr	r2, [r7, #20]
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	4313      	orrs	r3, r2
 8016618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	693a      	ldr	r2, [r7, #16]
 801661e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	697a      	ldr	r2, [r7, #20]
 8016624:	621a      	str	r2, [r3, #32]
}
 8016626:	bf00      	nop
 8016628:	371c      	adds	r7, #28
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr

08016632 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8016632:	b480      	push	{r7}
 8016634:	b087      	sub	sp, #28
 8016636:	af00      	add	r7, sp, #0
 8016638:	60f8      	str	r0, [r7, #12]
 801663a:	60b9      	str	r1, [r7, #8]
 801663c:	607a      	str	r2, [r7, #4]
 801663e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	6a1b      	ldr	r3, [r3, #32]
 8016644:	f023 0210 	bic.w	r2, r3, #16
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	699b      	ldr	r3, [r3, #24]
 8016650:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	6a1b      	ldr	r3, [r3, #32]
 8016656:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801665e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	021b      	lsls	r3, r3, #8
 8016664:	697a      	ldr	r2, [r7, #20]
 8016666:	4313      	orrs	r3, r2
 8016668:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	031b      	lsls	r3, r3, #12
 8016676:	b29b      	uxth	r3, r3
 8016678:	697a      	ldr	r2, [r7, #20]
 801667a:	4313      	orrs	r3, r2
 801667c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016684:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	011b      	lsls	r3, r3, #4
 801668a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801668e:	693a      	ldr	r2, [r7, #16]
 8016690:	4313      	orrs	r3, r2
 8016692:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	697a      	ldr	r2, [r7, #20]
 8016698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	693a      	ldr	r2, [r7, #16]
 801669e:	621a      	str	r2, [r3, #32]
}
 80166a0:	bf00      	nop
 80166a2:	371c      	adds	r7, #28
 80166a4:	46bd      	mov	sp, r7
 80166a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166aa:	4770      	bx	lr

080166ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80166ac:	b480      	push	{r7}
 80166ae:	b087      	sub	sp, #28
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	60b9      	str	r1, [r7, #8]
 80166b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	6a1b      	ldr	r3, [r3, #32]
 80166bc:	f023 0210 	bic.w	r2, r3, #16
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	699b      	ldr	r3, [r3, #24]
 80166c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	6a1b      	ldr	r3, [r3, #32]
 80166ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80166d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	031b      	lsls	r3, r3, #12
 80166dc:	697a      	ldr	r2, [r7, #20]
 80166de:	4313      	orrs	r3, r2
 80166e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80166e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	011b      	lsls	r3, r3, #4
 80166ee:	693a      	ldr	r2, [r7, #16]
 80166f0:	4313      	orrs	r3, r2
 80166f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	697a      	ldr	r2, [r7, #20]
 80166f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	693a      	ldr	r2, [r7, #16]
 80166fe:	621a      	str	r2, [r3, #32]
}
 8016700:	bf00      	nop
 8016702:	371c      	adds	r7, #28
 8016704:	46bd      	mov	sp, r7
 8016706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670a:	4770      	bx	lr

0801670c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801670c:	b480      	push	{r7}
 801670e:	b087      	sub	sp, #28
 8016710:	af00      	add	r7, sp, #0
 8016712:	60f8      	str	r0, [r7, #12]
 8016714:	60b9      	str	r1, [r7, #8]
 8016716:	607a      	str	r2, [r7, #4]
 8016718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	6a1b      	ldr	r3, [r3, #32]
 801671e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	69db      	ldr	r3, [r3, #28]
 801672a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	6a1b      	ldr	r3, [r3, #32]
 8016730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	f023 0303 	bic.w	r3, r3, #3
 8016738:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801673a:	697a      	ldr	r2, [r7, #20]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	4313      	orrs	r3, r2
 8016740:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	011b      	lsls	r3, r3, #4
 801674e:	b2db      	uxtb	r3, r3
 8016750:	697a      	ldr	r2, [r7, #20]
 8016752:	4313      	orrs	r3, r2
 8016754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801675c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	021b      	lsls	r3, r3, #8
 8016762:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8016766:	693a      	ldr	r2, [r7, #16]
 8016768:	4313      	orrs	r3, r2
 801676a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	697a      	ldr	r2, [r7, #20]
 8016770:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	693a      	ldr	r2, [r7, #16]
 8016776:	621a      	str	r2, [r3, #32]
}
 8016778:	bf00      	nop
 801677a:	371c      	adds	r7, #28
 801677c:	46bd      	mov	sp, r7
 801677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016782:	4770      	bx	lr

08016784 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8016784:	b480      	push	{r7}
 8016786:	b087      	sub	sp, #28
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
 8016790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	6a1b      	ldr	r3, [r3, #32]
 8016796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	69db      	ldr	r3, [r3, #28]
 80167a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	6a1b      	ldr	r3, [r3, #32]
 80167a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80167b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	021b      	lsls	r3, r3, #8
 80167b6:	697a      	ldr	r2, [r7, #20]
 80167b8:	4313      	orrs	r3, r2
 80167ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80167c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	031b      	lsls	r3, r3, #12
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	697a      	ldr	r2, [r7, #20]
 80167cc:	4313      	orrs	r3, r2
 80167ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80167d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	031b      	lsls	r3, r3, #12
 80167dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80167e0:	693a      	ldr	r2, [r7, #16]
 80167e2:	4313      	orrs	r3, r2
 80167e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	697a      	ldr	r2, [r7, #20]
 80167ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	693a      	ldr	r2, [r7, #16]
 80167f0:	621a      	str	r2, [r3, #32]
}
 80167f2:	bf00      	nop
 80167f4:	371c      	adds	r7, #28
 80167f6:	46bd      	mov	sp, r7
 80167f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fc:	4770      	bx	lr

080167fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80167fe:	b480      	push	{r7}
 8016800:	b085      	sub	sp, #20
 8016802:	af00      	add	r7, sp, #0
 8016804:	6078      	str	r0, [r7, #4]
 8016806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	689b      	ldr	r3, [r3, #8]
 801680c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016816:	683a      	ldr	r2, [r7, #0]
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	4313      	orrs	r3, r2
 801681c:	f043 0307 	orr.w	r3, r3, #7
 8016820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	609a      	str	r2, [r3, #8]
}
 8016828:	bf00      	nop
 801682a:	3714      	adds	r7, #20
 801682c:	46bd      	mov	sp, r7
 801682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016832:	4770      	bx	lr

08016834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016834:	b480      	push	{r7}
 8016836:	b087      	sub	sp, #28
 8016838:	af00      	add	r7, sp, #0
 801683a:	60f8      	str	r0, [r7, #12]
 801683c:	60b9      	str	r1, [r7, #8]
 801683e:	607a      	str	r2, [r7, #4]
 8016840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	689b      	ldr	r3, [r3, #8]
 8016846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801684e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	021a      	lsls	r2, r3, #8
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	431a      	orrs	r2, r3
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	4313      	orrs	r3, r2
 801685c:	697a      	ldr	r2, [r7, #20]
 801685e:	4313      	orrs	r3, r2
 8016860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	697a      	ldr	r2, [r7, #20]
 8016866:	609a      	str	r2, [r3, #8]
}
 8016868:	bf00      	nop
 801686a:	371c      	adds	r7, #28
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016874:	b480      	push	{r7}
 8016876:	b087      	sub	sp, #28
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	f003 031f 	and.w	r3, r3, #31
 8016886:	2201      	movs	r2, #1
 8016888:	fa02 f303 	lsl.w	r3, r2, r3
 801688c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	6a1a      	ldr	r2, [r3, #32]
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	43db      	mvns	r3, r3
 8016896:	401a      	ands	r2, r3
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	6a1a      	ldr	r2, [r3, #32]
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	f003 031f 	and.w	r3, r3, #31
 80168a6:	6879      	ldr	r1, [r7, #4]
 80168a8:	fa01 f303 	lsl.w	r3, r1, r3
 80168ac:	431a      	orrs	r2, r3
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	621a      	str	r2, [r3, #32]
}
 80168b2:	bf00      	nop
 80168b4:	371c      	adds	r7, #28
 80168b6:	46bd      	mov	sp, r7
 80168b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168bc:	4770      	bx	lr
	...

080168c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80168c0:	b480      	push	{r7}
 80168c2:	b085      	sub	sp, #20
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
 80168c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80168d0:	2b01      	cmp	r3, #1
 80168d2:	d101      	bne.n	80168d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80168d4:	2302      	movs	r3, #2
 80168d6:	e05a      	b.n	801698e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2201      	movs	r2, #1
 80168dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2202      	movs	r2, #2
 80168e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	689b      	ldr	r3, [r3, #8]
 80168f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80168fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	68fa      	ldr	r2, [r7, #12]
 8016906:	4313      	orrs	r3, r2
 8016908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	68fa      	ldr	r2, [r7, #12]
 8016910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4a21      	ldr	r2, [pc, #132]	; (801699c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8016918:	4293      	cmp	r3, r2
 801691a:	d022      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016924:	d01d      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	4a1d      	ldr	r2, [pc, #116]	; (80169a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801692c:	4293      	cmp	r3, r2
 801692e:	d018      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4a1b      	ldr	r2, [pc, #108]	; (80169a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8016936:	4293      	cmp	r3, r2
 8016938:	d013      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4a1a      	ldr	r2, [pc, #104]	; (80169a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8016940:	4293      	cmp	r3, r2
 8016942:	d00e      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4a18      	ldr	r2, [pc, #96]	; (80169ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801694a:	4293      	cmp	r3, r2
 801694c:	d009      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4a17      	ldr	r2, [pc, #92]	; (80169b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8016954:	4293      	cmp	r3, r2
 8016956:	d004      	beq.n	8016962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4a15      	ldr	r2, [pc, #84]	; (80169b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801695e:	4293      	cmp	r3, r2
 8016960:	d10c      	bne.n	801697c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	68ba      	ldr	r2, [r7, #8]
 8016970:	4313      	orrs	r3, r2
 8016972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	68ba      	ldr	r2, [r7, #8]
 801697a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2201      	movs	r2, #1
 8016980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2200      	movs	r2, #0
 8016988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801698c:	2300      	movs	r3, #0
}
 801698e:	4618      	mov	r0, r3
 8016990:	3714      	adds	r7, #20
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr
 801699a:	bf00      	nop
 801699c:	40010000 	.word	0x40010000
 80169a0:	40000400 	.word	0x40000400
 80169a4:	40000800 	.word	0x40000800
 80169a8:	40000c00 	.word	0x40000c00
 80169ac:	40010400 	.word	0x40010400
 80169b0:	40014000 	.word	0x40014000
 80169b4:	40001800 	.word	0x40001800

080169b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80169b8:	b480      	push	{r7}
 80169ba:	b085      	sub	sp, #20
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80169c2:	2300      	movs	r3, #0
 80169c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d101      	bne.n	80169d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80169d0:	2302      	movs	r3, #2
 80169d2:	e03d      	b.n	8016a50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2201      	movs	r2, #1
 80169d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	68db      	ldr	r3, [r3, #12]
 80169e6:	4313      	orrs	r3, r2
 80169e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	689b      	ldr	r3, [r3, #8]
 80169f4:	4313      	orrs	r3, r2
 80169f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	4313      	orrs	r3, r2
 8016a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4313      	orrs	r3, r2
 8016a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	691b      	ldr	r3, [r3, #16]
 8016a1e:	4313      	orrs	r3, r2
 8016a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	695b      	ldr	r3, [r3, #20]
 8016a2c:	4313      	orrs	r3, r2
 8016a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	69db      	ldr	r3, [r3, #28]
 8016a3a:	4313      	orrs	r3, r2
 8016a3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	68fa      	ldr	r2, [r7, #12]
 8016a44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2200      	movs	r2, #0
 8016a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3714      	adds	r7, #20
 8016a54:	46bd      	mov	sp, r7
 8016a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5a:	4770      	bx	lr

08016a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b083      	sub	sp, #12
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016a64:	bf00      	nop
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr

08016a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016a70:	b480      	push	{r7}
 8016a72:	b083      	sub	sp, #12
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016a78:	bf00      	nop
 8016a7a:	370c      	adds	r7, #12
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr

08016a84 <__NVIC_SetPriority>:
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	6039      	str	r1, [r7, #0]
 8016a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	db0a      	blt.n	8016aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	b2da      	uxtb	r2, r3
 8016a9c:	490c      	ldr	r1, [pc, #48]	; (8016ad0 <__NVIC_SetPriority+0x4c>)
 8016a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aa2:	0112      	lsls	r2, r2, #4
 8016aa4:	b2d2      	uxtb	r2, r2
 8016aa6:	440b      	add	r3, r1
 8016aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016aac:	e00a      	b.n	8016ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	b2da      	uxtb	r2, r3
 8016ab2:	4908      	ldr	r1, [pc, #32]	; (8016ad4 <__NVIC_SetPriority+0x50>)
 8016ab4:	79fb      	ldrb	r3, [r7, #7]
 8016ab6:	f003 030f 	and.w	r3, r3, #15
 8016aba:	3b04      	subs	r3, #4
 8016abc:	0112      	lsls	r2, r2, #4
 8016abe:	b2d2      	uxtb	r2, r2
 8016ac0:	440b      	add	r3, r1
 8016ac2:	761a      	strb	r2, [r3, #24]
}
 8016ac4:	bf00      	nop
 8016ac6:	370c      	adds	r7, #12
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ace:	4770      	bx	lr
 8016ad0:	e000e100 	.word	0xe000e100
 8016ad4:	e000ed00 	.word	0xe000ed00

08016ad8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016adc:	4b05      	ldr	r3, [pc, #20]	; (8016af4 <SysTick_Handler+0x1c>)
 8016ade:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016ae0:	f002 f832 	bl	8018b48 <xTaskGetSchedulerState>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	2b01      	cmp	r3, #1
 8016ae8:	d001      	beq.n	8016aee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016aea:	f002 fe25 	bl	8019738 <xPortSysTickHandler>
  }
}
 8016aee:	bf00      	nop
 8016af0:	bd80      	pop	{r7, pc}
 8016af2:	bf00      	nop
 8016af4:	e000e010 	.word	0xe000e010

08016af8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016af8:	b580      	push	{r7, lr}
 8016afa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016afc:	2100      	movs	r1, #0
 8016afe:	f06f 0004 	mvn.w	r0, #4
 8016b02:	f7ff ffbf 	bl	8016a84 <__NVIC_SetPriority>
#endif
}
 8016b06:	bf00      	nop
 8016b08:	bd80      	pop	{r7, pc}
	...

08016b0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016b0c:	b480      	push	{r7}
 8016b0e:	b083      	sub	sp, #12
 8016b10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b12:	f3ef 8305 	mrs	r3, IPSR
 8016b16:	603b      	str	r3, [r7, #0]
  return(result);
 8016b18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d003      	beq.n	8016b26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016b1e:	f06f 0305 	mvn.w	r3, #5
 8016b22:	607b      	str	r3, [r7, #4]
 8016b24:	e00c      	b.n	8016b40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016b26:	4b0a      	ldr	r3, [pc, #40]	; (8016b50 <osKernelInitialize+0x44>)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d105      	bne.n	8016b3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016b2e:	4b08      	ldr	r3, [pc, #32]	; (8016b50 <osKernelInitialize+0x44>)
 8016b30:	2201      	movs	r2, #1
 8016b32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016b34:	2300      	movs	r3, #0
 8016b36:	607b      	str	r3, [r7, #4]
 8016b38:	e002      	b.n	8016b40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016b40:	687b      	ldr	r3, [r7, #4]
}
 8016b42:	4618      	mov	r0, r3
 8016b44:	370c      	adds	r7, #12
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop
 8016b50:	20001800 	.word	0x20001800

08016b54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b5a:	f3ef 8305 	mrs	r3, IPSR
 8016b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8016b60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d003      	beq.n	8016b6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8016b66:	f06f 0305 	mvn.w	r3, #5
 8016b6a:	607b      	str	r3, [r7, #4]
 8016b6c:	e010      	b.n	8016b90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016b6e:	4b0b      	ldr	r3, [pc, #44]	; (8016b9c <osKernelStart+0x48>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2b01      	cmp	r3, #1
 8016b74:	d109      	bne.n	8016b8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016b76:	f7ff ffbf 	bl	8016af8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016b7a:	4b08      	ldr	r3, [pc, #32]	; (8016b9c <osKernelStart+0x48>)
 8016b7c:	2202      	movs	r2, #2
 8016b7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016b80:	f001 fb08 	bl	8018194 <vTaskStartScheduler>
      stat = osOK;
 8016b84:	2300      	movs	r3, #0
 8016b86:	607b      	str	r3, [r7, #4]
 8016b88:	e002      	b.n	8016b90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016b90:	687b      	ldr	r3, [r7, #4]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	20001800 	.word	0x20001800

08016ba0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ba6:	f3ef 8305 	mrs	r3, IPSR
 8016baa:	603b      	str	r3, [r7, #0]
  return(result);
 8016bac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d003      	beq.n	8016bba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8016bb2:	f001 fc31 	bl	8018418 <xTaskGetTickCountFromISR>
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	e002      	b.n	8016bc0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8016bba:	f001 fc1d 	bl	80183f8 <xTaskGetTickCount>
 8016bbe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8016bc0:	687b      	ldr	r3, [r7, #4]
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3708      	adds	r7, #8
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016bca:	b580      	push	{r7, lr}
 8016bcc:	b08e      	sub	sp, #56	; 0x38
 8016bce:	af04      	add	r7, sp, #16
 8016bd0:	60f8      	str	r0, [r7, #12]
 8016bd2:	60b9      	str	r1, [r7, #8]
 8016bd4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bda:	f3ef 8305 	mrs	r3, IPSR
 8016bde:	617b      	str	r3, [r7, #20]
  return(result);
 8016be0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d17e      	bne.n	8016ce4 <osThreadNew+0x11a>
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d07b      	beq.n	8016ce4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016bec:	2380      	movs	r3, #128	; 0x80
 8016bee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016bf0:	2318      	movs	r3, #24
 8016bf2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d045      	beq.n	8016c90 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d002      	beq.n	8016c12 <osThreadNew+0x48>
        name = attr->name;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	699b      	ldr	r3, [r3, #24]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d002      	beq.n	8016c20 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	699b      	ldr	r3, [r3, #24]
 8016c1e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016c20:	69fb      	ldr	r3, [r7, #28]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d008      	beq.n	8016c38 <osThreadNew+0x6e>
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	2b38      	cmp	r3, #56	; 0x38
 8016c2a:	d805      	bhi.n	8016c38 <osThreadNew+0x6e>
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	f003 0301 	and.w	r3, r3, #1
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d001      	beq.n	8016c3c <osThreadNew+0x72>
        return (NULL);
 8016c38:	2300      	movs	r3, #0
 8016c3a:	e054      	b.n	8016ce6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	695b      	ldr	r3, [r3, #20]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d003      	beq.n	8016c4c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	695b      	ldr	r3, [r3, #20]
 8016c48:	089b      	lsrs	r3, r3, #2
 8016c4a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	689b      	ldr	r3, [r3, #8]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d00e      	beq.n	8016c72 <osThreadNew+0xa8>
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	2bcb      	cmp	r3, #203	; 0xcb
 8016c5a:	d90a      	bls.n	8016c72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d006      	beq.n	8016c72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	695b      	ldr	r3, [r3, #20]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d002      	beq.n	8016c72 <osThreadNew+0xa8>
        mem = 1;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	61bb      	str	r3, [r7, #24]
 8016c70:	e010      	b.n	8016c94 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	689b      	ldr	r3, [r3, #8]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d10c      	bne.n	8016c94 <osThreadNew+0xca>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	68db      	ldr	r3, [r3, #12]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d108      	bne.n	8016c94 <osThreadNew+0xca>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	691b      	ldr	r3, [r3, #16]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d104      	bne.n	8016c94 <osThreadNew+0xca>
          mem = 0;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	61bb      	str	r3, [r7, #24]
 8016c8e:	e001      	b.n	8016c94 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016c90:	2300      	movs	r3, #0
 8016c92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016c94:	69bb      	ldr	r3, [r7, #24]
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	d110      	bne.n	8016cbc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016ca2:	9202      	str	r2, [sp, #8]
 8016ca4:	9301      	str	r3, [sp, #4]
 8016ca6:	69fb      	ldr	r3, [r7, #28]
 8016ca8:	9300      	str	r3, [sp, #0]
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	6a3a      	ldr	r2, [r7, #32]
 8016cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cb0:	68f8      	ldr	r0, [r7, #12]
 8016cb2:	f000 ffe1 	bl	8017c78 <xTaskCreateStatic>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	613b      	str	r3, [r7, #16]
 8016cba:	e013      	b.n	8016ce4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016cbc:	69bb      	ldr	r3, [r7, #24]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d110      	bne.n	8016ce4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016cc2:	6a3b      	ldr	r3, [r7, #32]
 8016cc4:	b29a      	uxth	r2, r3
 8016cc6:	f107 0310 	add.w	r3, r7, #16
 8016cca:	9301      	str	r3, [sp, #4]
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cd4:	68f8      	ldr	r0, [r7, #12]
 8016cd6:	f001 f82c 	bl	8017d32 <xTaskCreate>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	2b01      	cmp	r3, #1
 8016cde:	d001      	beq.n	8016ce4 <osThreadNew+0x11a>
            hTask = NULL;
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016ce4:	693b      	ldr	r3, [r7, #16]
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3728      	adds	r7, #40	; 0x28
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}

08016cee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016cee:	b580      	push	{r7, lr}
 8016cf0:	b084      	sub	sp, #16
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016cf6:	f3ef 8305 	mrs	r3, IPSR
 8016cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8016cfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d003      	beq.n	8016d0a <osDelay+0x1c>
    stat = osErrorISR;
 8016d02:	f06f 0305 	mvn.w	r3, #5
 8016d06:	60fb      	str	r3, [r7, #12]
 8016d08:	e007      	b.n	8016d1a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d002      	beq.n	8016d1a <osDelay+0x2c>
      vTaskDelay(ticks);
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f001 fa05 	bl	8018124 <vTaskDelay>
    }
  }

  return (stat);
 8016d1a:	68fb      	ldr	r3, [r7, #12]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3710      	adds	r7, #16
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b086      	sub	sp, #24
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d2c:	f3ef 8305 	mrs	r3, IPSR
 8016d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d32:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d003      	beq.n	8016d40 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8016d38:	f06f 0305 	mvn.w	r3, #5
 8016d3c:	617b      	str	r3, [r7, #20]
 8016d3e:	e019      	b.n	8016d74 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8016d40:	2300      	movs	r3, #0
 8016d42:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8016d44:	f001 fb58 	bl	80183f8 <xTaskGetTickCount>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	687a      	ldr	r2, [r7, #4]
 8016d50:	1ad3      	subs	r3, r2, r3
 8016d52:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d009      	beq.n	8016d6e <osDelayUntil+0x4a>
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	db06      	blt.n	8016d6e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8016d60:	f107 0308 	add.w	r3, r7, #8
 8016d64:	6939      	ldr	r1, [r7, #16]
 8016d66:	4618      	mov	r0, r3
 8016d68:	f001 f95c 	bl	8018024 <vTaskDelayUntil>
 8016d6c:	e002      	b.n	8016d74 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8016d6e:	f06f 0303 	mvn.w	r3, #3
 8016d72:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016d74:	697b      	ldr	r3, [r7, #20]
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	3718      	adds	r7, #24
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
	...

08016d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016d80:	b480      	push	{r7}
 8016d82:	b085      	sub	sp, #20
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	4a07      	ldr	r2, [pc, #28]	; (8016dac <vApplicationGetIdleTaskMemory+0x2c>)
 8016d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	4a06      	ldr	r2, [pc, #24]	; (8016db0 <vApplicationGetIdleTaskMemory+0x30>)
 8016d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2280      	movs	r2, #128	; 0x80
 8016d9c:	601a      	str	r2, [r3, #0]
}
 8016d9e:	bf00      	nop
 8016da0:	3714      	adds	r7, #20
 8016da2:	46bd      	mov	sp, r7
 8016da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da8:	4770      	bx	lr
 8016daa:	bf00      	nop
 8016dac:	20001804 	.word	0x20001804
 8016db0:	200018d0 	.word	0x200018d0

08016db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016db4:	b480      	push	{r7}
 8016db6:	b085      	sub	sp, #20
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	4a07      	ldr	r2, [pc, #28]	; (8016de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8016dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	4a06      	ldr	r2, [pc, #24]	; (8016de4 <vApplicationGetTimerTaskMemory+0x30>)
 8016dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016dd2:	601a      	str	r2, [r3, #0]
}
 8016dd4:	bf00      	nop
 8016dd6:	3714      	adds	r7, #20
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr
 8016de0:	20001ad0 	.word	0x20001ad0
 8016de4:	20001b9c 	.word	0x20001b9c

08016de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f103 0208 	add.w	r2, r3, #8
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8016e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	f103 0208 	add.w	r2, r3, #8
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	f103 0208 	add.w	r2, r3, #8
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2200      	movs	r2, #0
 8016e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016e1c:	bf00      	nop
 8016e1e:	370c      	adds	r7, #12
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr

08016e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2200      	movs	r2, #0
 8016e34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016e36:	bf00      	nop
 8016e38:	370c      	adds	r7, #12
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e40:	4770      	bx	lr

08016e42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016e42:	b480      	push	{r7}
 8016e44:	b085      	sub	sp, #20
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	6078      	str	r0, [r7, #4]
 8016e4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	68fa      	ldr	r2, [r7, #12]
 8016e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	689a      	ldr	r2, [r3, #8]
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	689b      	ldr	r3, [r3, #8]
 8016e64:	683a      	ldr	r2, [r7, #0]
 8016e66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	683a      	ldr	r2, [r7, #0]
 8016e6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	1c5a      	adds	r2, r3, #1
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	601a      	str	r2, [r3, #0]
}
 8016e7e:	bf00      	nop
 8016e80:	3714      	adds	r7, #20
 8016e82:	46bd      	mov	sp, r7
 8016e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e88:	4770      	bx	lr

08016e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016e8a:	b480      	push	{r7}
 8016e8c:	b085      	sub	sp, #20
 8016e8e:	af00      	add	r7, sp, #0
 8016e90:	6078      	str	r0, [r7, #4]
 8016e92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016e9a:	68bb      	ldr	r3, [r7, #8]
 8016e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ea0:	d103      	bne.n	8016eaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	691b      	ldr	r3, [r3, #16]
 8016ea6:	60fb      	str	r3, [r7, #12]
 8016ea8:	e00c      	b.n	8016ec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	3308      	adds	r3, #8
 8016eae:	60fb      	str	r3, [r7, #12]
 8016eb0:	e002      	b.n	8016eb8 <vListInsert+0x2e>
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	685b      	ldr	r3, [r3, #4]
 8016eb6:	60fb      	str	r3, [r7, #12]
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	685b      	ldr	r3, [r3, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	68ba      	ldr	r2, [r7, #8]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d2f6      	bcs.n	8016eb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	685a      	ldr	r2, [r3, #4]
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	683a      	ldr	r2, [r7, #0]
 8016ed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	68fa      	ldr	r2, [r7, #12]
 8016ed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	683a      	ldr	r2, [r7, #0]
 8016ede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	1c5a      	adds	r2, r3, #1
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	601a      	str	r2, [r3, #0]
}
 8016ef0:	bf00      	nop
 8016ef2:	3714      	adds	r7, #20
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efa:	4770      	bx	lr

08016efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016efc:	b480      	push	{r7}
 8016efe:	b085      	sub	sp, #20
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	691b      	ldr	r3, [r3, #16]
 8016f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	685b      	ldr	r3, [r3, #4]
 8016f0e:	687a      	ldr	r2, [r7, #4]
 8016f10:	6892      	ldr	r2, [r2, #8]
 8016f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	689b      	ldr	r3, [r3, #8]
 8016f18:	687a      	ldr	r2, [r7, #4]
 8016f1a:	6852      	ldr	r2, [r2, #4]
 8016f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d103      	bne.n	8016f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	689a      	ldr	r2, [r3, #8]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2200      	movs	r2, #0
 8016f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	1e5a      	subs	r2, r3, #1
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	681b      	ldr	r3, [r3, #0]
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3714      	adds	r7, #20
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr

08016f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d10a      	bne.n	8016f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f68:	f383 8811 	msr	BASEPRI, r3
 8016f6c:	f3bf 8f6f 	isb	sy
 8016f70:	f3bf 8f4f 	dsb	sy
 8016f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016f76:	bf00      	nop
 8016f78:	e7fe      	b.n	8016f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016f7a:	f002 fb4b 	bl	8019614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f86:	68f9      	ldr	r1, [r7, #12]
 8016f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016f8a:	fb01 f303 	mul.w	r3, r1, r3
 8016f8e:	441a      	add	r2, r3
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	2200      	movs	r2, #0
 8016f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	681a      	ldr	r2, [r3, #0]
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016faa:	3b01      	subs	r3, #1
 8016fac:	68f9      	ldr	r1, [r7, #12]
 8016fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016fb0:	fb01 f303 	mul.w	r3, r1, r3
 8016fb4:	441a      	add	r2, r3
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	22ff      	movs	r2, #255	; 0xff
 8016fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	22ff      	movs	r2, #255	; 0xff
 8016fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d114      	bne.n	8016ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	691b      	ldr	r3, [r3, #16]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d01a      	beq.n	801700e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	3310      	adds	r3, #16
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f001 fbb5 	bl	801874c <xTaskRemoveFromEventList>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d012      	beq.n	801700e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016fe8:	4b0c      	ldr	r3, [pc, #48]	; (801701c <xQueueGenericReset+0xcc>)
 8016fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fee:	601a      	str	r2, [r3, #0]
 8016ff0:	f3bf 8f4f 	dsb	sy
 8016ff4:	f3bf 8f6f 	isb	sy
 8016ff8:	e009      	b.n	801700e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	3310      	adds	r3, #16
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7ff fef2 	bl	8016de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	3324      	adds	r3, #36	; 0x24
 8017008:	4618      	mov	r0, r3
 801700a:	f7ff feed 	bl	8016de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801700e:	f002 fb31 	bl	8019674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017012:	2301      	movs	r3, #1
}
 8017014:	4618      	mov	r0, r3
 8017016:	3710      	adds	r7, #16
 8017018:	46bd      	mov	sp, r7
 801701a:	bd80      	pop	{r7, pc}
 801701c:	e000ed04 	.word	0xe000ed04

08017020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017020:	b580      	push	{r7, lr}
 8017022:	b08e      	sub	sp, #56	; 0x38
 8017024:	af02      	add	r7, sp, #8
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	60b9      	str	r1, [r7, #8]
 801702a:	607a      	str	r2, [r7, #4]
 801702c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d10a      	bne.n	801704a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017038:	f383 8811 	msr	BASEPRI, r3
 801703c:	f3bf 8f6f 	isb	sy
 8017040:	f3bf 8f4f 	dsb	sy
 8017044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017046:	bf00      	nop
 8017048:	e7fe      	b.n	8017048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d10a      	bne.n	8017066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017054:	f383 8811 	msr	BASEPRI, r3
 8017058:	f3bf 8f6f 	isb	sy
 801705c:	f3bf 8f4f 	dsb	sy
 8017060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017062:	bf00      	nop
 8017064:	e7fe      	b.n	8017064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d002      	beq.n	8017072 <xQueueGenericCreateStatic+0x52>
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d001      	beq.n	8017076 <xQueueGenericCreateStatic+0x56>
 8017072:	2301      	movs	r3, #1
 8017074:	e000      	b.n	8017078 <xQueueGenericCreateStatic+0x58>
 8017076:	2300      	movs	r3, #0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d10a      	bne.n	8017092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017080:	f383 8811 	msr	BASEPRI, r3
 8017084:	f3bf 8f6f 	isb	sy
 8017088:	f3bf 8f4f 	dsb	sy
 801708c:	623b      	str	r3, [r7, #32]
}
 801708e:	bf00      	nop
 8017090:	e7fe      	b.n	8017090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d102      	bne.n	801709e <xQueueGenericCreateStatic+0x7e>
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d101      	bne.n	80170a2 <xQueueGenericCreateStatic+0x82>
 801709e:	2301      	movs	r3, #1
 80170a0:	e000      	b.n	80170a4 <xQueueGenericCreateStatic+0x84>
 80170a2:	2300      	movs	r3, #0
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d10a      	bne.n	80170be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80170a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ac:	f383 8811 	msr	BASEPRI, r3
 80170b0:	f3bf 8f6f 	isb	sy
 80170b4:	f3bf 8f4f 	dsb	sy
 80170b8:	61fb      	str	r3, [r7, #28]
}
 80170ba:	bf00      	nop
 80170bc:	e7fe      	b.n	80170bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80170be:	2350      	movs	r3, #80	; 0x50
 80170c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	2b50      	cmp	r3, #80	; 0x50
 80170c6:	d00a      	beq.n	80170de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80170c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170cc:	f383 8811 	msr	BASEPRI, r3
 80170d0:	f3bf 8f6f 	isb	sy
 80170d4:	f3bf 8f4f 	dsb	sy
 80170d8:	61bb      	str	r3, [r7, #24]
}
 80170da:	bf00      	nop
 80170dc:	e7fe      	b.n	80170dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80170de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80170e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d00d      	beq.n	8017106 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80170ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ec:	2201      	movs	r2, #1
 80170ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80170f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80170f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	4613      	mov	r3, r2
 80170fc:	687a      	ldr	r2, [r7, #4]
 80170fe:	68b9      	ldr	r1, [r7, #8]
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f000 f83f 	bl	8017184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017108:	4618      	mov	r0, r3
 801710a:	3730      	adds	r7, #48	; 0x30
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}

08017110 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017110:	b580      	push	{r7, lr}
 8017112:	b08a      	sub	sp, #40	; 0x28
 8017114:	af02      	add	r7, sp, #8
 8017116:	60f8      	str	r0, [r7, #12]
 8017118:	60b9      	str	r1, [r7, #8]
 801711a:	4613      	mov	r3, r2
 801711c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d10a      	bne.n	801713a <xQueueGenericCreate+0x2a>
	__asm volatile
 8017124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017128:	f383 8811 	msr	BASEPRI, r3
 801712c:	f3bf 8f6f 	isb	sy
 8017130:	f3bf 8f4f 	dsb	sy
 8017134:	613b      	str	r3, [r7, #16]
}
 8017136:	bf00      	nop
 8017138:	e7fe      	b.n	8017138 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	68ba      	ldr	r2, [r7, #8]
 801713e:	fb02 f303 	mul.w	r3, r2, r3
 8017142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017144:	69fb      	ldr	r3, [r7, #28]
 8017146:	3350      	adds	r3, #80	; 0x50
 8017148:	4618      	mov	r0, r3
 801714a:	f002 fb85 	bl	8019858 <pvPortMalloc>
 801714e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017150:	69bb      	ldr	r3, [r7, #24]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d011      	beq.n	801717a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	3350      	adds	r3, #80	; 0x50
 801715e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017160:	69bb      	ldr	r3, [r7, #24]
 8017162:	2200      	movs	r2, #0
 8017164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017168:	79fa      	ldrb	r2, [r7, #7]
 801716a:	69bb      	ldr	r3, [r7, #24]
 801716c:	9300      	str	r3, [sp, #0]
 801716e:	4613      	mov	r3, r2
 8017170:	697a      	ldr	r2, [r7, #20]
 8017172:	68b9      	ldr	r1, [r7, #8]
 8017174:	68f8      	ldr	r0, [r7, #12]
 8017176:	f000 f805 	bl	8017184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801717a:	69bb      	ldr	r3, [r7, #24]
	}
 801717c:	4618      	mov	r0, r3
 801717e:	3720      	adds	r7, #32
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}

08017184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b084      	sub	sp, #16
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	607a      	str	r2, [r7, #4]
 8017190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d103      	bne.n	80171a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017198:	69bb      	ldr	r3, [r7, #24]
 801719a:	69ba      	ldr	r2, [r7, #24]
 801719c:	601a      	str	r2, [r3, #0]
 801719e:	e002      	b.n	80171a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	687a      	ldr	r2, [r7, #4]
 80171a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80171a6:	69bb      	ldr	r3, [r7, #24]
 80171a8:	68fa      	ldr	r2, [r7, #12]
 80171aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80171ac:	69bb      	ldr	r3, [r7, #24]
 80171ae:	68ba      	ldr	r2, [r7, #8]
 80171b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80171b2:	2101      	movs	r1, #1
 80171b4:	69b8      	ldr	r0, [r7, #24]
 80171b6:	f7ff fecb 	bl	8016f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80171ba:	69bb      	ldr	r3, [r7, #24]
 80171bc:	78fa      	ldrb	r2, [r7, #3]
 80171be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80171c2:	78fb      	ldrb	r3, [r7, #3]
 80171c4:	68ba      	ldr	r2, [r7, #8]
 80171c6:	68f9      	ldr	r1, [r7, #12]
 80171c8:	2073      	movs	r0, #115	; 0x73
 80171ca:	f003 facd 	bl	801a768 <SEGGER_SYSVIEW_RecordU32x3>
}
 80171ce:	bf00      	nop
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
	...

080171d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b090      	sub	sp, #64	; 0x40
 80171dc:	af02      	add	r7, sp, #8
 80171de:	60f8      	str	r0, [r7, #12]
 80171e0:	60b9      	str	r1, [r7, #8]
 80171e2:	607a      	str	r2, [r7, #4]
 80171e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80171e6:	2300      	movs	r3, #0
 80171e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80171ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d10a      	bne.n	801720a <xQueueGenericSend+0x32>
	__asm volatile
 80171f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171f8:	f383 8811 	msr	BASEPRI, r3
 80171fc:	f3bf 8f6f 	isb	sy
 8017200:	f3bf 8f4f 	dsb	sy
 8017204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017206:	bf00      	nop
 8017208:	e7fe      	b.n	8017208 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d103      	bne.n	8017218 <xQueueGenericSend+0x40>
 8017210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017214:	2b00      	cmp	r3, #0
 8017216:	d101      	bne.n	801721c <xQueueGenericSend+0x44>
 8017218:	2301      	movs	r3, #1
 801721a:	e000      	b.n	801721e <xQueueGenericSend+0x46>
 801721c:	2300      	movs	r3, #0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d10a      	bne.n	8017238 <xQueueGenericSend+0x60>
	__asm volatile
 8017222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017226:	f383 8811 	msr	BASEPRI, r3
 801722a:	f3bf 8f6f 	isb	sy
 801722e:	f3bf 8f4f 	dsb	sy
 8017232:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017234:	bf00      	nop
 8017236:	e7fe      	b.n	8017236 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	2b02      	cmp	r3, #2
 801723c:	d103      	bne.n	8017246 <xQueueGenericSend+0x6e>
 801723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017242:	2b01      	cmp	r3, #1
 8017244:	d101      	bne.n	801724a <xQueueGenericSend+0x72>
 8017246:	2301      	movs	r3, #1
 8017248:	e000      	b.n	801724c <xQueueGenericSend+0x74>
 801724a:	2300      	movs	r3, #0
 801724c:	2b00      	cmp	r3, #0
 801724e:	d10a      	bne.n	8017266 <xQueueGenericSend+0x8e>
	__asm volatile
 8017250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017254:	f383 8811 	msr	BASEPRI, r3
 8017258:	f3bf 8f6f 	isb	sy
 801725c:	f3bf 8f4f 	dsb	sy
 8017260:	623b      	str	r3, [r7, #32]
}
 8017262:	bf00      	nop
 8017264:	e7fe      	b.n	8017264 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017266:	f001 fc6f 	bl	8018b48 <xTaskGetSchedulerState>
 801726a:	4603      	mov	r3, r0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d102      	bne.n	8017276 <xQueueGenericSend+0x9e>
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d101      	bne.n	801727a <xQueueGenericSend+0xa2>
 8017276:	2301      	movs	r3, #1
 8017278:	e000      	b.n	801727c <xQueueGenericSend+0xa4>
 801727a:	2300      	movs	r3, #0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d10a      	bne.n	8017296 <xQueueGenericSend+0xbe>
	__asm volatile
 8017280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017284:	f383 8811 	msr	BASEPRI, r3
 8017288:	f3bf 8f6f 	isb	sy
 801728c:	f3bf 8f4f 	dsb	sy
 8017290:	61fb      	str	r3, [r7, #28]
}
 8017292:	bf00      	nop
 8017294:	e7fe      	b.n	8017294 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017296:	f002 f9bd 	bl	8019614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801729c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d302      	bcc.n	80172ac <xQueueGenericSend+0xd4>
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	2b02      	cmp	r3, #2
 80172aa:	d136      	bne.n	801731a <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 80172ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ae:	4618      	mov	r0, r3
 80172b0:	f003 ff0c 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 80172b4:	68ba      	ldr	r2, [r7, #8]
 80172b6:	6879      	ldr	r1, [r7, #4]
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	9300      	str	r3, [sp, #0]
 80172bc:	460b      	mov	r3, r1
 80172be:	4601      	mov	r1, r0
 80172c0:	205a      	movs	r0, #90	; 0x5a
 80172c2:	f003 fac7 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172cc:	f000 fb5e 	bl	801798c <prvCopyDataToQueue>
 80172d0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d010      	beq.n	80172fc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172dc:	3324      	adds	r3, #36	; 0x24
 80172de:	4618      	mov	r0, r3
 80172e0:	f001 fa34 	bl	801874c <xTaskRemoveFromEventList>
 80172e4:	4603      	mov	r3, r0
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d013      	beq.n	8017312 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80172ea:	4b4d      	ldr	r3, [pc, #308]	; (8017420 <xQueueGenericSend+0x248>)
 80172ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172f0:	601a      	str	r2, [r3, #0]
 80172f2:	f3bf 8f4f 	dsb	sy
 80172f6:	f3bf 8f6f 	isb	sy
 80172fa:	e00a      	b.n	8017312 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80172fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d007      	beq.n	8017312 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017302:	4b47      	ldr	r3, [pc, #284]	; (8017420 <xQueueGenericSend+0x248>)
 8017304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017308:	601a      	str	r2, [r3, #0]
 801730a:	f3bf 8f4f 	dsb	sy
 801730e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017312:	f002 f9af 	bl	8019674 <vPortExitCritical>
				return pdPASS;
 8017316:	2301      	movs	r3, #1
 8017318:	e07d      	b.n	8017416 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d110      	bne.n	8017342 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017320:	f002 f9a8 	bl	8019674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8017324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017326:	4618      	mov	r0, r3
 8017328:	f003 fed0 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 801732c:	68ba      	ldr	r2, [r7, #8]
 801732e:	6879      	ldr	r1, [r7, #4]
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	9300      	str	r3, [sp, #0]
 8017334:	460b      	mov	r3, r1
 8017336:	4601      	mov	r1, r0
 8017338:	205a      	movs	r0, #90	; 0x5a
 801733a:	f003 fa8b 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 801733e:	2300      	movs	r3, #0
 8017340:	e069      	b.n	8017416 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017344:	2b00      	cmp	r3, #0
 8017346:	d106      	bne.n	8017356 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017348:	f107 0314 	add.w	r3, r7, #20
 801734c:	4618      	mov	r0, r3
 801734e:	f001 fa65 	bl	801881c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017352:	2301      	movs	r3, #1
 8017354:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017356:	f002 f98d 	bl	8019674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801735a:	f000 ff9d 	bl	8018298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801735e:	f002 f959 	bl	8019614 <vPortEnterCritical>
 8017362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017368:	b25b      	sxtb	r3, r3
 801736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801736e:	d103      	bne.n	8017378 <xQueueGenericSend+0x1a0>
 8017370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017372:	2200      	movs	r2, #0
 8017374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801737a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801737e:	b25b      	sxtb	r3, r3
 8017380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017384:	d103      	bne.n	801738e <xQueueGenericSend+0x1b6>
 8017386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017388:	2200      	movs	r2, #0
 801738a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801738e:	f002 f971 	bl	8019674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017392:	1d3a      	adds	r2, r7, #4
 8017394:	f107 0314 	add.w	r3, r7, #20
 8017398:	4611      	mov	r1, r2
 801739a:	4618      	mov	r0, r3
 801739c:	f001 fa54 	bl	8018848 <xTaskCheckForTimeOut>
 80173a0:	4603      	mov	r3, r0
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d124      	bne.n	80173f0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80173a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173a8:	f000 fbe8 	bl	8017b7c <prvIsQueueFull>
 80173ac:	4603      	mov	r3, r0
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d018      	beq.n	80173e4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80173b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b4:	3310      	adds	r3, #16
 80173b6:	687a      	ldr	r2, [r7, #4]
 80173b8:	4611      	mov	r1, r2
 80173ba:	4618      	mov	r0, r3
 80173bc:	f001 f974 	bl	80186a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80173c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173c2:	f000 fb73 	bl	8017aac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80173c6:	f000 ff75 	bl	80182b4 <xTaskResumeAll>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	f47f af62 	bne.w	8017296 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80173d2:	4b13      	ldr	r3, [pc, #76]	; (8017420 <xQueueGenericSend+0x248>)
 80173d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173d8:	601a      	str	r2, [r3, #0]
 80173da:	f3bf 8f4f 	dsb	sy
 80173de:	f3bf 8f6f 	isb	sy
 80173e2:	e758      	b.n	8017296 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80173e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173e6:	f000 fb61 	bl	8017aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80173ea:	f000 ff63 	bl	80182b4 <xTaskResumeAll>
 80173ee:	e752      	b.n	8017296 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80173f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173f2:	f000 fb5b 	bl	8017aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80173f6:	f000 ff5d 	bl	80182b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80173fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fc:	4618      	mov	r0, r3
 80173fe:	f003 fe65 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017402:	68ba      	ldr	r2, [r7, #8]
 8017404:	6879      	ldr	r1, [r7, #4]
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	9300      	str	r3, [sp, #0]
 801740a:	460b      	mov	r3, r1
 801740c:	4601      	mov	r1, r0
 801740e:	205a      	movs	r0, #90	; 0x5a
 8017410:	f003 fa20 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8017414:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017416:	4618      	mov	r0, r3
 8017418:	3738      	adds	r7, #56	; 0x38
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	e000ed04 	.word	0xe000ed04

08017424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b090      	sub	sp, #64	; 0x40
 8017428:	af00      	add	r7, sp, #0
 801742a:	60f8      	str	r0, [r7, #12]
 801742c:	60b9      	str	r1, [r7, #8]
 801742e:	607a      	str	r2, [r7, #4]
 8017430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017438:	2b00      	cmp	r3, #0
 801743a:	d10a      	bne.n	8017452 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017440:	f383 8811 	msr	BASEPRI, r3
 8017444:	f3bf 8f6f 	isb	sy
 8017448:	f3bf 8f4f 	dsb	sy
 801744c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801744e:	bf00      	nop
 8017450:	e7fe      	b.n	8017450 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d103      	bne.n	8017460 <xQueueGenericSendFromISR+0x3c>
 8017458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801745c:	2b00      	cmp	r3, #0
 801745e:	d101      	bne.n	8017464 <xQueueGenericSendFromISR+0x40>
 8017460:	2301      	movs	r3, #1
 8017462:	e000      	b.n	8017466 <xQueueGenericSendFromISR+0x42>
 8017464:	2300      	movs	r3, #0
 8017466:	2b00      	cmp	r3, #0
 8017468:	d10a      	bne.n	8017480 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746e:	f383 8811 	msr	BASEPRI, r3
 8017472:	f3bf 8f6f 	isb	sy
 8017476:	f3bf 8f4f 	dsb	sy
 801747a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801747c:	bf00      	nop
 801747e:	e7fe      	b.n	801747e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	2b02      	cmp	r3, #2
 8017484:	d103      	bne.n	801748e <xQueueGenericSendFromISR+0x6a>
 8017486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801748a:	2b01      	cmp	r3, #1
 801748c:	d101      	bne.n	8017492 <xQueueGenericSendFromISR+0x6e>
 801748e:	2301      	movs	r3, #1
 8017490:	e000      	b.n	8017494 <xQueueGenericSendFromISR+0x70>
 8017492:	2300      	movs	r3, #0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d10a      	bne.n	80174ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801749c:	f383 8811 	msr	BASEPRI, r3
 80174a0:	f3bf 8f6f 	isb	sy
 80174a4:	f3bf 8f4f 	dsb	sy
 80174a8:	623b      	str	r3, [r7, #32]
}
 80174aa:	bf00      	nop
 80174ac:	e7fe      	b.n	80174ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80174ae:	f002 f993 	bl	80197d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80174b2:	f3ef 8211 	mrs	r2, BASEPRI
 80174b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ba:	f383 8811 	msr	BASEPRI, r3
 80174be:	f3bf 8f6f 	isb	sy
 80174c2:	f3bf 8f4f 	dsb	sy
 80174c6:	61fa      	str	r2, [r7, #28]
 80174c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80174ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80174ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80174d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d302      	bcc.n	80174e0 <xQueueGenericSendFromISR+0xbc>
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	2b02      	cmp	r3, #2
 80174de:	d139      	bne.n	8017554 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80174e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80174e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80174ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174ee:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80174f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174f2:	4618      	mov	r0, r3
 80174f4:	f003 fdea 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 80174f8:	4601      	mov	r1, r0
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	461a      	mov	r2, r3
 80174fe:	2060      	movs	r0, #96	; 0x60
 8017500:	f003 f8d8 	bl	801a6b4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017504:	683a      	ldr	r2, [r7, #0]
 8017506:	68b9      	ldr	r1, [r7, #8]
 8017508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801750a:	f000 fa3f 	bl	801798c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801750e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017516:	d112      	bne.n	801753e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801751c:	2b00      	cmp	r3, #0
 801751e:	d016      	beq.n	801754e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017522:	3324      	adds	r3, #36	; 0x24
 8017524:	4618      	mov	r0, r3
 8017526:	f001 f911 	bl	801874c <xTaskRemoveFromEventList>
 801752a:	4603      	mov	r3, r0
 801752c:	2b00      	cmp	r3, #0
 801752e:	d00e      	beq.n	801754e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d00b      	beq.n	801754e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2201      	movs	r2, #1
 801753a:	601a      	str	r2, [r3, #0]
 801753c:	e007      	b.n	801754e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801753e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017542:	3301      	adds	r3, #1
 8017544:	b2db      	uxtb	r3, r3
 8017546:	b25a      	sxtb	r2, r3
 8017548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801754a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801754e:	2301      	movs	r3, #1
 8017550:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017552:	e00b      	b.n	801756c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8017554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017556:	4618      	mov	r0, r3
 8017558:	f003 fdb8 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 801755c:	4601      	mov	r1, r0
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	461a      	mov	r2, r3
 8017562:	2060      	movs	r0, #96	; 0x60
 8017564:	f003 f8a6 	bl	801a6b4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8017568:	2300      	movs	r3, #0
 801756a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801756e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017576:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801757a:	4618      	mov	r0, r3
 801757c:	3740      	adds	r7, #64	; 0x40
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
	...

08017584 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017584:	b590      	push	{r4, r7, lr}
 8017586:	b08f      	sub	sp, #60	; 0x3c
 8017588:	af02      	add	r7, sp, #8
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017590:	2300      	movs	r3, #0
 8017592:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759a:	2b00      	cmp	r3, #0
 801759c:	d10a      	bne.n	80175b4 <xQueueReceive+0x30>
	__asm volatile
 801759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a2:	f383 8811 	msr	BASEPRI, r3
 80175a6:	f3bf 8f6f 	isb	sy
 80175aa:	f3bf 8f4f 	dsb	sy
 80175ae:	623b      	str	r3, [r7, #32]
}
 80175b0:	bf00      	nop
 80175b2:	e7fe      	b.n	80175b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d103      	bne.n	80175c2 <xQueueReceive+0x3e>
 80175ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d101      	bne.n	80175c6 <xQueueReceive+0x42>
 80175c2:	2301      	movs	r3, #1
 80175c4:	e000      	b.n	80175c8 <xQueueReceive+0x44>
 80175c6:	2300      	movs	r3, #0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d10a      	bne.n	80175e2 <xQueueReceive+0x5e>
	__asm volatile
 80175cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175d0:	f383 8811 	msr	BASEPRI, r3
 80175d4:	f3bf 8f6f 	isb	sy
 80175d8:	f3bf 8f4f 	dsb	sy
 80175dc:	61fb      	str	r3, [r7, #28]
}
 80175de:	bf00      	nop
 80175e0:	e7fe      	b.n	80175e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175e2:	f001 fab1 	bl	8018b48 <xTaskGetSchedulerState>
 80175e6:	4603      	mov	r3, r0
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d102      	bne.n	80175f2 <xQueueReceive+0x6e>
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d101      	bne.n	80175f6 <xQueueReceive+0x72>
 80175f2:	2301      	movs	r3, #1
 80175f4:	e000      	b.n	80175f8 <xQueueReceive+0x74>
 80175f6:	2300      	movs	r3, #0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d10a      	bne.n	8017612 <xQueueReceive+0x8e>
	__asm volatile
 80175fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017600:	f383 8811 	msr	BASEPRI, r3
 8017604:	f3bf 8f6f 	isb	sy
 8017608:	f3bf 8f4f 	dsb	sy
 801760c:	61bb      	str	r3, [r7, #24]
}
 801760e:	bf00      	nop
 8017610:	e7fe      	b.n	8017610 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017612:	f001 ffff 	bl	8019614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801761a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761e:	2b00      	cmp	r3, #0
 8017620:	d02f      	beq.n	8017682 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017622:	68b9      	ldr	r1, [r7, #8]
 8017624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017626:	f000 fa1b 	bl	8017a60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 801762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762c:	4618      	mov	r0, r3
 801762e:	f003 fd4d 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017632:	4604      	mov	r4, r0
 8017634:	2000      	movs	r0, #0
 8017636:	f003 fd49 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 801763a:	4602      	mov	r2, r0
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2101      	movs	r1, #1
 8017640:	9100      	str	r1, [sp, #0]
 8017642:	4621      	mov	r1, r4
 8017644:	205c      	movs	r0, #92	; 0x5c
 8017646:	f003 f905 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801764c:	1e5a      	subs	r2, r3, #1
 801764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017654:	691b      	ldr	r3, [r3, #16]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d00f      	beq.n	801767a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765c:	3310      	adds	r3, #16
 801765e:	4618      	mov	r0, r3
 8017660:	f001 f874 	bl	801874c <xTaskRemoveFromEventList>
 8017664:	4603      	mov	r3, r0
 8017666:	2b00      	cmp	r3, #0
 8017668:	d007      	beq.n	801767a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801766a:	4b4d      	ldr	r3, [pc, #308]	; (80177a0 <xQueueReceive+0x21c>)
 801766c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017670:	601a      	str	r2, [r3, #0]
 8017672:	f3bf 8f4f 	dsb	sy
 8017676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801767a:	f001 fffb 	bl	8019674 <vPortExitCritical>
				return pdPASS;
 801767e:	2301      	movs	r3, #1
 8017680:	e08a      	b.n	8017798 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d113      	bne.n	80176b0 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017688:	f001 fff4 	bl	8019674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 801768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768e:	4618      	mov	r0, r3
 8017690:	f003 fd1c 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017694:	4604      	mov	r4, r0
 8017696:	2000      	movs	r0, #0
 8017698:	f003 fd18 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 801769c:	4602      	mov	r2, r0
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2101      	movs	r1, #1
 80176a2:	9100      	str	r1, [sp, #0]
 80176a4:	4621      	mov	r1, r4
 80176a6:	205c      	movs	r0, #92	; 0x5c
 80176a8:	f003 f8d4 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80176ac:	2300      	movs	r3, #0
 80176ae:	e073      	b.n	8017798 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80176b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d106      	bne.n	80176c4 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176b6:	f107 0310 	add.w	r3, r7, #16
 80176ba:	4618      	mov	r0, r3
 80176bc:	f001 f8ae 	bl	801881c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80176c0:	2301      	movs	r3, #1
 80176c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80176c4:	f001 ffd6 	bl	8019674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80176c8:	f000 fde6 	bl	8018298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80176cc:	f001 ffa2 	bl	8019614 <vPortEnterCritical>
 80176d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176d6:	b25b      	sxtb	r3, r3
 80176d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176dc:	d103      	bne.n	80176e6 <xQueueReceive+0x162>
 80176de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e0:	2200      	movs	r2, #0
 80176e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80176e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176ec:	b25b      	sxtb	r3, r3
 80176ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176f2:	d103      	bne.n	80176fc <xQueueReceive+0x178>
 80176f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f6:	2200      	movs	r2, #0
 80176f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80176fc:	f001 ffba 	bl	8019674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017700:	1d3a      	adds	r2, r7, #4
 8017702:	f107 0310 	add.w	r3, r7, #16
 8017706:	4611      	mov	r1, r2
 8017708:	4618      	mov	r0, r3
 801770a:	f001 f89d 	bl	8018848 <xTaskCheckForTimeOut>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d124      	bne.n	801775e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017716:	f000 fa1b 	bl	8017b50 <prvIsQueueEmpty>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d018      	beq.n	8017752 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017722:	3324      	adds	r3, #36	; 0x24
 8017724:	687a      	ldr	r2, [r7, #4]
 8017726:	4611      	mov	r1, r2
 8017728:	4618      	mov	r0, r3
 801772a:	f000 ffbd 	bl	80186a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801772e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017730:	f000 f9bc 	bl	8017aac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017734:	f000 fdbe 	bl	80182b4 <xTaskResumeAll>
 8017738:	4603      	mov	r3, r0
 801773a:	2b00      	cmp	r3, #0
 801773c:	f47f af69 	bne.w	8017612 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017740:	4b17      	ldr	r3, [pc, #92]	; (80177a0 <xQueueReceive+0x21c>)
 8017742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017746:	601a      	str	r2, [r3, #0]
 8017748:	f3bf 8f4f 	dsb	sy
 801774c:	f3bf 8f6f 	isb	sy
 8017750:	e75f      	b.n	8017612 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017754:	f000 f9aa 	bl	8017aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017758:	f000 fdac 	bl	80182b4 <xTaskResumeAll>
 801775c:	e759      	b.n	8017612 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801775e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017760:	f000 f9a4 	bl	8017aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017764:	f000 fda6 	bl	80182b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801776a:	f000 f9f1 	bl	8017b50 <prvIsQueueEmpty>
 801776e:	4603      	mov	r3, r0
 8017770:	2b00      	cmp	r3, #0
 8017772:	f43f af4e 	beq.w	8017612 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8017776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017778:	4618      	mov	r0, r3
 801777a:	f003 fca7 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 801777e:	4604      	mov	r4, r0
 8017780:	2000      	movs	r0, #0
 8017782:	f003 fca3 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017786:	4602      	mov	r2, r0
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2101      	movs	r1, #1
 801778c:	9100      	str	r1, [sp, #0]
 801778e:	4621      	mov	r1, r4
 8017790:	205c      	movs	r0, #92	; 0x5c
 8017792:	f003 f85f 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8017796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017798:	4618      	mov	r0, r3
 801779a:	3734      	adds	r7, #52	; 0x34
 801779c:	46bd      	mov	sp, r7
 801779e:	bd90      	pop	{r4, r7, pc}
 80177a0:	e000ed04 	.word	0xe000ed04

080177a4 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80177a4:	b590      	push	{r4, r7, lr}
 80177a6:	b091      	sub	sp, #68	; 0x44
 80177a8:	af02      	add	r7, sp, #8
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80177b0:	2300      	movs	r3, #0
 80177b2:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80177b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d10a      	bne.n	80177d4 <xQueuePeek+0x30>
	__asm volatile
 80177be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c2:	f383 8811 	msr	BASEPRI, r3
 80177c6:	f3bf 8f6f 	isb	sy
 80177ca:	f3bf 8f4f 	dsb	sy
 80177ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80177d0:	bf00      	nop
 80177d2:	e7fe      	b.n	80177d2 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d103      	bne.n	80177e2 <xQueuePeek+0x3e>
 80177da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d101      	bne.n	80177e6 <xQueuePeek+0x42>
 80177e2:	2301      	movs	r3, #1
 80177e4:	e000      	b.n	80177e8 <xQueuePeek+0x44>
 80177e6:	2300      	movs	r3, #0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d10a      	bne.n	8017802 <xQueuePeek+0x5e>
	__asm volatile
 80177ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f0:	f383 8811 	msr	BASEPRI, r3
 80177f4:	f3bf 8f6f 	isb	sy
 80177f8:	f3bf 8f4f 	dsb	sy
 80177fc:	623b      	str	r3, [r7, #32]
}
 80177fe:	bf00      	nop
 8017800:	e7fe      	b.n	8017800 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017802:	f001 f9a1 	bl	8018b48 <xTaskGetSchedulerState>
 8017806:	4603      	mov	r3, r0
 8017808:	2b00      	cmp	r3, #0
 801780a:	d102      	bne.n	8017812 <xQueuePeek+0x6e>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d101      	bne.n	8017816 <xQueuePeek+0x72>
 8017812:	2301      	movs	r3, #1
 8017814:	e000      	b.n	8017818 <xQueuePeek+0x74>
 8017816:	2300      	movs	r3, #0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d10a      	bne.n	8017832 <xQueuePeek+0x8e>
	__asm volatile
 801781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017820:	f383 8811 	msr	BASEPRI, r3
 8017824:	f3bf 8f6f 	isb	sy
 8017828:	f3bf 8f4f 	dsb	sy
 801782c:	61fb      	str	r3, [r7, #28]
}
 801782e:	bf00      	nop
 8017830:	e7fe      	b.n	8017830 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017832:	f001 feef 	bl	8019614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801783a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801783e:	2b00      	cmp	r3, #0
 8017840:	d032      	beq.n	80178a8 <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8017842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017844:	68db      	ldr	r3, [r3, #12]
 8017846:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017848:	68b9      	ldr	r1, [r7, #8]
 801784a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801784c:	f000 f908 	bl	8017a60 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 8017850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017852:	4618      	mov	r0, r3
 8017854:	f003 fc3a 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017858:	4604      	mov	r4, r0
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	4618      	mov	r0, r3
 801785e:	f003 fc35 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017862:	4602      	mov	r2, r0
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2101      	movs	r1, #1
 8017868:	9100      	str	r1, [sp, #0]
 801786a:	4621      	mov	r1, r4
 801786c:	205c      	movs	r0, #92	; 0x5c
 801786e:	f002 fff1 	bl	801a854 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8017872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017876:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801787c:	2b00      	cmp	r3, #0
 801787e:	d00f      	beq.n	80178a0 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017882:	3324      	adds	r3, #36	; 0x24
 8017884:	4618      	mov	r0, r3
 8017886:	f000 ff61 	bl	801874c <xTaskRemoveFromEventList>
 801788a:	4603      	mov	r3, r0
 801788c:	2b00      	cmp	r3, #0
 801788e:	d007      	beq.n	80178a0 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8017890:	4b3d      	ldr	r3, [pc, #244]	; (8017988 <xQueuePeek+0x1e4>)
 8017892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017896:	601a      	str	r2, [r3, #0]
 8017898:	f3bf 8f4f 	dsb	sy
 801789c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80178a0:	f001 fee8 	bl	8019674 <vPortExitCritical>
				return pdPASS;
 80178a4:	2301      	movs	r3, #1
 80178a6:	e06a      	b.n	801797e <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d103      	bne.n	80178b6 <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80178ae:	f001 fee1 	bl	8019674 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80178b2:	2300      	movs	r3, #0
 80178b4:	e063      	b.n	801797e <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 80178b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d106      	bne.n	80178ca <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80178bc:	f107 0314 	add.w	r3, r7, #20
 80178c0:	4618      	mov	r0, r3
 80178c2:	f000 ffab 	bl	801881c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80178c6:	2301      	movs	r3, #1
 80178c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80178ca:	f001 fed3 	bl	8019674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80178ce:	f000 fce3 	bl	8018298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80178d2:	f001 fe9f 	bl	8019614 <vPortEnterCritical>
 80178d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80178dc:	b25b      	sxtb	r3, r3
 80178de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178e2:	d103      	bne.n	80178ec <xQueuePeek+0x148>
 80178e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e6:	2200      	movs	r2, #0
 80178e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80178ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80178f2:	b25b      	sxtb	r3, r3
 80178f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178f8:	d103      	bne.n	8017902 <xQueuePeek+0x15e>
 80178fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fc:	2200      	movs	r2, #0
 80178fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017902:	f001 feb7 	bl	8019674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017906:	1d3a      	adds	r2, r7, #4
 8017908:	f107 0314 	add.w	r3, r7, #20
 801790c:	4611      	mov	r1, r2
 801790e:	4618      	mov	r0, r3
 8017910:	f000 ff9a 	bl	8018848 <xTaskCheckForTimeOut>
 8017914:	4603      	mov	r3, r0
 8017916:	2b00      	cmp	r3, #0
 8017918:	d124      	bne.n	8017964 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801791a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801791c:	f000 f918 	bl	8017b50 <prvIsQueueEmpty>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	d018      	beq.n	8017958 <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017928:	3324      	adds	r3, #36	; 0x24
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	4611      	mov	r1, r2
 801792e:	4618      	mov	r0, r3
 8017930:	f000 feba 	bl	80186a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017936:	f000 f8b9 	bl	8017aac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801793a:	f000 fcbb 	bl	80182b4 <xTaskResumeAll>
 801793e:	4603      	mov	r3, r0
 8017940:	2b00      	cmp	r3, #0
 8017942:	f47f af76 	bne.w	8017832 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8017946:	4b10      	ldr	r3, [pc, #64]	; (8017988 <xQueuePeek+0x1e4>)
 8017948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801794c:	601a      	str	r2, [r3, #0]
 801794e:	f3bf 8f4f 	dsb	sy
 8017952:	f3bf 8f6f 	isb	sy
 8017956:	e76c      	b.n	8017832 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8017958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801795a:	f000 f8a7 	bl	8017aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801795e:	f000 fca9 	bl	80182b4 <xTaskResumeAll>
 8017962:	e766      	b.n	8017832 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8017964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017966:	f000 f8a1 	bl	8017aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801796a:	f000 fca3 	bl	80182b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801796e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017970:	f000 f8ee 	bl	8017b50 <prvIsQueueEmpty>
 8017974:	4603      	mov	r3, r0
 8017976:	2b00      	cmp	r3, #0
 8017978:	f43f af5b 	beq.w	8017832 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801797c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801797e:	4618      	mov	r0, r3
 8017980:	373c      	adds	r7, #60	; 0x3c
 8017982:	46bd      	mov	sp, r7
 8017984:	bd90      	pop	{r4, r7, pc}
 8017986:	bf00      	nop
 8017988:	e000ed04 	.word	0xe000ed04

0801798c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b086      	sub	sp, #24
 8017990:	af00      	add	r7, sp, #0
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017998:	2300      	movs	r3, #0
 801799a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d10d      	bne.n	80179c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d14d      	bne.n	8017a4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	689b      	ldr	r3, [r3, #8]
 80179b6:	4618      	mov	r0, r3
 80179b8:	f001 f8e4 	bl	8018b84 <xTaskPriorityDisinherit>
 80179bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	2200      	movs	r2, #0
 80179c2:	609a      	str	r2, [r3, #8]
 80179c4:	e043      	b.n	8017a4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d119      	bne.n	8017a00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	6858      	ldr	r0, [r3, #4]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179d4:	461a      	mov	r2, r3
 80179d6:	68b9      	ldr	r1, [r7, #8]
 80179d8:	f003 fd2c 	bl	801b434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	685a      	ldr	r2, [r3, #4]
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179e4:	441a      	add	r2, r3
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	685a      	ldr	r2, [r3, #4]
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	689b      	ldr	r3, [r3, #8]
 80179f2:	429a      	cmp	r2, r3
 80179f4:	d32b      	bcc.n	8017a4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	605a      	str	r2, [r3, #4]
 80179fe:	e026      	b.n	8017a4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	68d8      	ldr	r0, [r3, #12]
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a08:	461a      	mov	r2, r3
 8017a0a:	68b9      	ldr	r1, [r7, #8]
 8017a0c:	f003 fd12 	bl	801b434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	68da      	ldr	r2, [r3, #12]
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a18:	425b      	negs	r3, r3
 8017a1a:	441a      	add	r2, r3
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	68da      	ldr	r2, [r3, #12]
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d207      	bcs.n	8017a3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	689a      	ldr	r2, [r3, #8]
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a34:	425b      	negs	r3, r3
 8017a36:	441a      	add	r2, r3
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2b02      	cmp	r3, #2
 8017a40:	d105      	bne.n	8017a4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a42:	693b      	ldr	r3, [r7, #16]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d002      	beq.n	8017a4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017a48:	693b      	ldr	r3, [r7, #16]
 8017a4a:	3b01      	subs	r3, #1
 8017a4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017a4e:	693b      	ldr	r3, [r7, #16]
 8017a50:	1c5a      	adds	r2, r3, #1
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017a56:	697b      	ldr	r3, [r7, #20]
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3718      	adds	r7, #24
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d018      	beq.n	8017aa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	68da      	ldr	r2, [r3, #12]
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a7a:	441a      	add	r2, r3
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	68da      	ldr	r2, [r3, #12]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	689b      	ldr	r3, [r3, #8]
 8017a88:	429a      	cmp	r2, r3
 8017a8a:	d303      	bcc.n	8017a94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	68d9      	ldr	r1, [r3, #12]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	6838      	ldr	r0, [r7, #0]
 8017aa0:	f003 fcc8 	bl	801b434 <memcpy>
	}
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017ab4:	f001 fdae 	bl	8019614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017abe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017ac0:	e011      	b.n	8017ae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d012      	beq.n	8017af0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	3324      	adds	r3, #36	; 0x24
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f000 fe3c 	bl	801874c <xTaskRemoveFromEventList>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d001      	beq.n	8017ade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017ada:	f000 ff17 	bl	801890c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017ade:	7bfb      	ldrb	r3, [r7, #15]
 8017ae0:	3b01      	subs	r3, #1
 8017ae2:	b2db      	uxtb	r3, r3
 8017ae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	dce9      	bgt.n	8017ac2 <prvUnlockQueue+0x16>
 8017aee:	e000      	b.n	8017af2 <prvUnlockQueue+0x46>
					break;
 8017af0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	22ff      	movs	r2, #255	; 0xff
 8017af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017afa:	f001 fdbb 	bl	8019674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017afe:	f001 fd89 	bl	8019614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b0a:	e011      	b.n	8017b30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	691b      	ldr	r3, [r3, #16]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d012      	beq.n	8017b3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	3310      	adds	r3, #16
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f000 fe17 	bl	801874c <xTaskRemoveFromEventList>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d001      	beq.n	8017b28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017b24:	f000 fef2 	bl	801890c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017b28:	7bbb      	ldrb	r3, [r7, #14]
 8017b2a:	3b01      	subs	r3, #1
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	dce9      	bgt.n	8017b0c <prvUnlockQueue+0x60>
 8017b38:	e000      	b.n	8017b3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017b3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	22ff      	movs	r2, #255	; 0xff
 8017b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017b44:	f001 fd96 	bl	8019674 <vPortExitCritical>
}
 8017b48:	bf00      	nop
 8017b4a:	3710      	adds	r7, #16
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017b58:	f001 fd5c 	bl	8019614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d102      	bne.n	8017b6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017b64:	2301      	movs	r3, #1
 8017b66:	60fb      	str	r3, [r7, #12]
 8017b68:	e001      	b.n	8017b6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017b6e:	f001 fd81 	bl	8019674 <vPortExitCritical>

	return xReturn;
 8017b72:	68fb      	ldr	r3, [r7, #12]
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	3710      	adds	r7, #16
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b084      	sub	sp, #16
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017b84:	f001 fd46 	bl	8019614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d102      	bne.n	8017b9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017b94:	2301      	movs	r3, #1
 8017b96:	60fb      	str	r3, [r7, #12]
 8017b98:	e001      	b.n	8017b9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017b9e:	f001 fd69 	bl	8019674 <vPortExitCritical>

	return xReturn;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3710      	adds	r7, #16
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b084      	sub	sp, #16
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	60fb      	str	r3, [r7, #12]
 8017bba:	e01e      	b.n	8017bfa <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017bbc:	4a13      	ldr	r2, [pc, #76]	; (8017c0c <vQueueAddToRegistry+0x60>)
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d115      	bne.n	8017bf4 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017bc8:	4910      	ldr	r1, [pc, #64]	; (8017c0c <vQueueAddToRegistry+0x60>)
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	683a      	ldr	r2, [r7, #0]
 8017bce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017bd2:	4a0e      	ldr	r2, [pc, #56]	; (8017c0c <vQueueAddToRegistry+0x60>)
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	00db      	lsls	r3, r3, #3
 8017bd8:	4413      	add	r3, r2
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	4618      	mov	r0, r3
 8017be2:	f003 fa73 	bl	801b0cc <SEGGER_SYSVIEW_ShrinkId>
 8017be6:	4601      	mov	r1, r0
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	461a      	mov	r2, r3
 8017bec:	2071      	movs	r0, #113	; 0x71
 8017bee:	f002 fd61 	bl	801a6b4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8017bf2:	e006      	b.n	8017c02 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	3301      	adds	r3, #1
 8017bf8:	60fb      	str	r3, [r7, #12]
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	2b07      	cmp	r3, #7
 8017bfe:	d9dd      	bls.n	8017bbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017c00:	bf00      	nop
 8017c02:	bf00      	nop
 8017c04:	3710      	adds	r7, #16
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	2001ec10 	.word	0x2001ec10

08017c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b086      	sub	sp, #24
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017c20:	f001 fcf8 	bl	8019614 <vPortEnterCritical>
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c2a:	b25b      	sxtb	r3, r3
 8017c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c30:	d103      	bne.n	8017c3a <vQueueWaitForMessageRestricted+0x2a>
 8017c32:	697b      	ldr	r3, [r7, #20]
 8017c34:	2200      	movs	r2, #0
 8017c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017c3a:	697b      	ldr	r3, [r7, #20]
 8017c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c40:	b25b      	sxtb	r3, r3
 8017c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c46:	d103      	bne.n	8017c50 <vQueueWaitForMessageRestricted+0x40>
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017c50:	f001 fd10 	bl	8019674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017c54:	697b      	ldr	r3, [r7, #20]
 8017c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d106      	bne.n	8017c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017c5c:	697b      	ldr	r3, [r7, #20]
 8017c5e:	3324      	adds	r3, #36	; 0x24
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	68b9      	ldr	r1, [r7, #8]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f000 fd43 	bl	80186f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017c6a:	6978      	ldr	r0, [r7, #20]
 8017c6c:	f7ff ff1e 	bl	8017aac <prvUnlockQueue>
	}
 8017c70:	bf00      	nop
 8017c72:	3718      	adds	r7, #24
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b08e      	sub	sp, #56	; 0x38
 8017c7c:	af04      	add	r7, sp, #16
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
 8017c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d10a      	bne.n	8017ca2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c90:	f383 8811 	msr	BASEPRI, r3
 8017c94:	f3bf 8f6f 	isb	sy
 8017c98:	f3bf 8f4f 	dsb	sy
 8017c9c:	623b      	str	r3, [r7, #32]
}
 8017c9e:	bf00      	nop
 8017ca0:	e7fe      	b.n	8017ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d10a      	bne.n	8017cbe <xTaskCreateStatic+0x46>
	__asm volatile
 8017ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	61fb      	str	r3, [r7, #28]
}
 8017cba:	bf00      	nop
 8017cbc:	e7fe      	b.n	8017cbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017cbe:	23cc      	movs	r3, #204	; 0xcc
 8017cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017cc2:	693b      	ldr	r3, [r7, #16]
 8017cc4:	2bcc      	cmp	r3, #204	; 0xcc
 8017cc6:	d00a      	beq.n	8017cde <xTaskCreateStatic+0x66>
	__asm volatile
 8017cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ccc:	f383 8811 	msr	BASEPRI, r3
 8017cd0:	f3bf 8f6f 	isb	sy
 8017cd4:	f3bf 8f4f 	dsb	sy
 8017cd8:	61bb      	str	r3, [r7, #24]
}
 8017cda:	bf00      	nop
 8017cdc:	e7fe      	b.n	8017cdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017cde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d01e      	beq.n	8017d24 <xTaskCreateStatic+0xac>
 8017ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d01b      	beq.n	8017d24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf8:	2202      	movs	r2, #2
 8017cfa:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017cfe:	2300      	movs	r3, #0
 8017d00:	9303      	str	r3, [sp, #12]
 8017d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d04:	9302      	str	r3, [sp, #8]
 8017d06:	f107 0314 	add.w	r3, r7, #20
 8017d0a:	9301      	str	r3, [sp, #4]
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0e:	9300      	str	r3, [sp, #0]
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	687a      	ldr	r2, [r7, #4]
 8017d14:	68b9      	ldr	r1, [r7, #8]
 8017d16:	68f8      	ldr	r0, [r7, #12]
 8017d18:	f000 f850 	bl	8017dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d1e:	f000 f8f3 	bl	8017f08 <prvAddNewTaskToReadyList>
 8017d22:	e001      	b.n	8017d28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017d24:	2300      	movs	r3, #0
 8017d26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017d28:	697b      	ldr	r3, [r7, #20]
	}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3728      	adds	r7, #40	; 0x28
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}

08017d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017d32:	b580      	push	{r7, lr}
 8017d34:	b08c      	sub	sp, #48	; 0x30
 8017d36:	af04      	add	r7, sp, #16
 8017d38:	60f8      	str	r0, [r7, #12]
 8017d3a:	60b9      	str	r1, [r7, #8]
 8017d3c:	603b      	str	r3, [r7, #0]
 8017d3e:	4613      	mov	r3, r2
 8017d40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017d42:	88fb      	ldrh	r3, [r7, #6]
 8017d44:	009b      	lsls	r3, r3, #2
 8017d46:	4618      	mov	r0, r3
 8017d48:	f001 fd86 	bl	8019858 <pvPortMalloc>
 8017d4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017d4e:	697b      	ldr	r3, [r7, #20]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d00e      	beq.n	8017d72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017d54:	20cc      	movs	r0, #204	; 0xcc
 8017d56:	f001 fd7f 	bl	8019858 <pvPortMalloc>
 8017d5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017d5c:	69fb      	ldr	r3, [r7, #28]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d003      	beq.n	8017d6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017d62:	69fb      	ldr	r3, [r7, #28]
 8017d64:	697a      	ldr	r2, [r7, #20]
 8017d66:	631a      	str	r2, [r3, #48]	; 0x30
 8017d68:	e005      	b.n	8017d76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017d6a:	6978      	ldr	r0, [r7, #20]
 8017d6c:	f001 fe40 	bl	80199f0 <vPortFree>
 8017d70:	e001      	b.n	8017d76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017d72:	2300      	movs	r3, #0
 8017d74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017d76:	69fb      	ldr	r3, [r7, #28]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d017      	beq.n	8017dac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017d7c:	69fb      	ldr	r3, [r7, #28]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017d84:	88fa      	ldrh	r2, [r7, #6]
 8017d86:	2300      	movs	r3, #0
 8017d88:	9303      	str	r3, [sp, #12]
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	9302      	str	r3, [sp, #8]
 8017d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d90:	9301      	str	r3, [sp, #4]
 8017d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d94:	9300      	str	r3, [sp, #0]
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	68b9      	ldr	r1, [r7, #8]
 8017d9a:	68f8      	ldr	r0, [r7, #12]
 8017d9c:	f000 f80e 	bl	8017dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017da0:	69f8      	ldr	r0, [r7, #28]
 8017da2:	f000 f8b1 	bl	8017f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017da6:	2301      	movs	r3, #1
 8017da8:	61bb      	str	r3, [r7, #24]
 8017daa:	e002      	b.n	8017db2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017dac:	f04f 33ff 	mov.w	r3, #4294967295
 8017db0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017db2:	69bb      	ldr	r3, [r7, #24]
	}
 8017db4:	4618      	mov	r0, r3
 8017db6:	3720      	adds	r7, #32
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}

08017dbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b088      	sub	sp, #32
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
 8017dc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	461a      	mov	r2, r3
 8017dd4:	21a5      	movs	r1, #165	; 0xa5
 8017dd6:	f003 fb3b 	bl	801b450 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017de4:	3b01      	subs	r3, #1
 8017de6:	009b      	lsls	r3, r3, #2
 8017de8:	4413      	add	r3, r2
 8017dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017dec:	69bb      	ldr	r3, [r7, #24]
 8017dee:	f023 0307 	bic.w	r3, r3, #7
 8017df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017df4:	69bb      	ldr	r3, [r7, #24]
 8017df6:	f003 0307 	and.w	r3, r3, #7
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d00a      	beq.n	8017e14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e02:	f383 8811 	msr	BASEPRI, r3
 8017e06:	f3bf 8f6f 	isb	sy
 8017e0a:	f3bf 8f4f 	dsb	sy
 8017e0e:	617b      	str	r3, [r7, #20]
}
 8017e10:	bf00      	nop
 8017e12:	e7fe      	b.n	8017e12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d01f      	beq.n	8017e5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	61fb      	str	r3, [r7, #28]
 8017e1e:	e012      	b.n	8017e46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017e20:	68ba      	ldr	r2, [r7, #8]
 8017e22:	69fb      	ldr	r3, [r7, #28]
 8017e24:	4413      	add	r3, r2
 8017e26:	7819      	ldrb	r1, [r3, #0]
 8017e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	3334      	adds	r3, #52	; 0x34
 8017e30:	460a      	mov	r2, r1
 8017e32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017e34:	68ba      	ldr	r2, [r7, #8]
 8017e36:	69fb      	ldr	r3, [r7, #28]
 8017e38:	4413      	add	r3, r2
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d006      	beq.n	8017e4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	3301      	adds	r3, #1
 8017e44:	61fb      	str	r3, [r7, #28]
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	2b1f      	cmp	r3, #31
 8017e4a:	d9e9      	bls.n	8017e20 <prvInitialiseNewTask+0x64>
 8017e4c:	e000      	b.n	8017e50 <prvInitialiseNewTask+0x94>
			{
				break;
 8017e4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e52:	2200      	movs	r2, #0
 8017e54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017e58:	e003      	b.n	8017e62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e64:	2b37      	cmp	r3, #55	; 0x37
 8017e66:	d901      	bls.n	8017e6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017e68:	2337      	movs	r3, #55	; 0x37
 8017e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e76:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8017e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e80:	3304      	adds	r3, #4
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fe ffd0 	bl	8016e28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8a:	3318      	adds	r3, #24
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7fe ffcb 	bl	8016e28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ea6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eaa:	2200      	movs	r2, #0
 8017eac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eba:	3364      	adds	r3, #100	; 0x64
 8017ebc:	2260      	movs	r2, #96	; 0x60
 8017ebe:	2100      	movs	r1, #0
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f003 fac5 	bl	801b450 <memset>
 8017ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec8:	4a0c      	ldr	r2, [pc, #48]	; (8017efc <prvInitialiseNewTask+0x140>)
 8017eca:	669a      	str	r2, [r3, #104]	; 0x68
 8017ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ece:	4a0c      	ldr	r2, [pc, #48]	; (8017f00 <prvInitialiseNewTask+0x144>)
 8017ed0:	66da      	str	r2, [r3, #108]	; 0x6c
 8017ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed4:	4a0b      	ldr	r2, [pc, #44]	; (8017f04 <prvInitialiseNewTask+0x148>)
 8017ed6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017ed8:	683a      	ldr	r2, [r7, #0]
 8017eda:	68f9      	ldr	r1, [r7, #12]
 8017edc:	69b8      	ldr	r0, [r7, #24]
 8017ede:	f001 fa69 	bl	80193b4 <pxPortInitialiseStack>
 8017ee2:	4602      	mov	r2, r0
 8017ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d002      	beq.n	8017ef4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ef2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ef4:	bf00      	nop
 8017ef6:	3720      	adds	r7, #32
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	0801c82c 	.word	0x0801c82c
 8017f00:	0801c84c 	.word	0x0801c84c
 8017f04:	0801c80c 	.word	0x0801c80c

08017f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017f08:	b5b0      	push	{r4, r5, r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af02      	add	r7, sp, #8
 8017f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017f10:	f001 fb80 	bl	8019614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017f14:	4b3c      	ldr	r3, [pc, #240]	; (8018008 <prvAddNewTaskToReadyList+0x100>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	3301      	adds	r3, #1
 8017f1a:	4a3b      	ldr	r2, [pc, #236]	; (8018008 <prvAddNewTaskToReadyList+0x100>)
 8017f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017f1e:	4b3b      	ldr	r3, [pc, #236]	; (801800c <prvAddNewTaskToReadyList+0x104>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d109      	bne.n	8017f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017f26:	4a39      	ldr	r2, [pc, #228]	; (801800c <prvAddNewTaskToReadyList+0x104>)
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017f2c:	4b36      	ldr	r3, [pc, #216]	; (8018008 <prvAddNewTaskToReadyList+0x100>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	d110      	bne.n	8017f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017f34:	f000 fd0e 	bl	8018954 <prvInitialiseTaskLists>
 8017f38:	e00d      	b.n	8017f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017f3a:	4b35      	ldr	r3, [pc, #212]	; (8018010 <prvAddNewTaskToReadyList+0x108>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d109      	bne.n	8017f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017f42:	4b32      	ldr	r3, [pc, #200]	; (801800c <prvAddNewTaskToReadyList+0x104>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d802      	bhi.n	8017f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017f50:	4a2e      	ldr	r2, [pc, #184]	; (801800c <prvAddNewTaskToReadyList+0x104>)
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017f56:	4b2f      	ldr	r3, [pc, #188]	; (8018014 <prvAddNewTaskToReadyList+0x10c>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	4a2d      	ldr	r2, [pc, #180]	; (8018014 <prvAddNewTaskToReadyList+0x10c>)
 8017f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017f60:	4b2c      	ldr	r3, [pc, #176]	; (8018014 <prvAddNewTaskToReadyList+0x10c>)
 8017f62:	681a      	ldr	r2, [r3, #0]
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d016      	beq.n	8017f9c <prvAddNewTaskToReadyList+0x94>
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	4618      	mov	r0, r3
 8017f72:	f002 ffe5 	bl	801af40 <SEGGER_SYSVIEW_OnTaskCreate>
 8017f76:	6878      	ldr	r0, [r7, #4]
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f86:	461d      	mov	r5, r3
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	461c      	mov	r4, r3
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f92:	1ae3      	subs	r3, r4, r3
 8017f94:	9300      	str	r3, [sp, #0]
 8017f96:	462b      	mov	r3, r5
 8017f98:	f7ea f828 	bl	8001fec <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f003 f852 	bl	801b048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fa8:	4b1b      	ldr	r3, [pc, #108]	; (8018018 <prvAddNewTaskToReadyList+0x110>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	429a      	cmp	r2, r3
 8017fae:	d903      	bls.n	8017fb8 <prvAddNewTaskToReadyList+0xb0>
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fb4:	4a18      	ldr	r2, [pc, #96]	; (8018018 <prvAddNewTaskToReadyList+0x110>)
 8017fb6:	6013      	str	r3, [r2, #0]
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	009b      	lsls	r3, r3, #2
 8017fc0:	4413      	add	r3, r2
 8017fc2:	009b      	lsls	r3, r3, #2
 8017fc4:	4a15      	ldr	r2, [pc, #84]	; (801801c <prvAddNewTaskToReadyList+0x114>)
 8017fc6:	441a      	add	r2, r3
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	3304      	adds	r3, #4
 8017fcc:	4619      	mov	r1, r3
 8017fce:	4610      	mov	r0, r2
 8017fd0:	f7fe ff37 	bl	8016e42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017fd4:	f001 fb4e 	bl	8019674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017fd8:	4b0d      	ldr	r3, [pc, #52]	; (8018010 <prvAddNewTaskToReadyList+0x108>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d00e      	beq.n	8017ffe <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017fe0:	4b0a      	ldr	r3, [pc, #40]	; (801800c <prvAddNewTaskToReadyList+0x104>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fea:	429a      	cmp	r2, r3
 8017fec:	d207      	bcs.n	8017ffe <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017fee:	4b0c      	ldr	r3, [pc, #48]	; (8018020 <prvAddNewTaskToReadyList+0x118>)
 8017ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ff4:	601a      	str	r2, [r3, #0]
 8017ff6:	f3bf 8f4f 	dsb	sy
 8017ffa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ffe:	bf00      	nop
 8018000:	3708      	adds	r7, #8
 8018002:	46bd      	mov	sp, r7
 8018004:	bdb0      	pop	{r4, r5, r7, pc}
 8018006:	bf00      	nop
 8018008:	20002470 	.word	0x20002470
 801800c:	20001f9c 	.word	0x20001f9c
 8018010:	2000247c 	.word	0x2000247c
 8018014:	2000248c 	.word	0x2000248c
 8018018:	20002478 	.word	0x20002478
 801801c:	20001fa0 	.word	0x20001fa0
 8018020:	e000ed04 	.word	0xe000ed04

08018024 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8018024:	b580      	push	{r7, lr}
 8018026:	b08a      	sub	sp, #40	; 0x28
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
 801802c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801802e:	2300      	movs	r3, #0
 8018030:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d10a      	bne.n	801804e <vTaskDelayUntil+0x2a>
	__asm volatile
 8018038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803c:	f383 8811 	msr	BASEPRI, r3
 8018040:	f3bf 8f6f 	isb	sy
 8018044:	f3bf 8f4f 	dsb	sy
 8018048:	617b      	str	r3, [r7, #20]
}
 801804a:	bf00      	nop
 801804c:	e7fe      	b.n	801804c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d10a      	bne.n	801806a <vTaskDelayUntil+0x46>
	__asm volatile
 8018054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018058:	f383 8811 	msr	BASEPRI, r3
 801805c:	f3bf 8f6f 	isb	sy
 8018060:	f3bf 8f4f 	dsb	sy
 8018064:	613b      	str	r3, [r7, #16]
}
 8018066:	bf00      	nop
 8018068:	e7fe      	b.n	8018068 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801806a:	4b2b      	ldr	r3, [pc, #172]	; (8018118 <vTaskDelayUntil+0xf4>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d00a      	beq.n	8018088 <vTaskDelayUntil+0x64>
	__asm volatile
 8018072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018076:	f383 8811 	msr	BASEPRI, r3
 801807a:	f3bf 8f6f 	isb	sy
 801807e:	f3bf 8f4f 	dsb	sy
 8018082:	60fb      	str	r3, [r7, #12]
}
 8018084:	bf00      	nop
 8018086:	e7fe      	b.n	8018086 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8018088:	f000 f906 	bl	8018298 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801808c:	4b23      	ldr	r3, [pc, #140]	; (801811c <vTaskDelayUntil+0xf8>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	683a      	ldr	r2, [r7, #0]
 8018098:	4413      	add	r3, r2
 801809a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	6a3a      	ldr	r2, [r7, #32]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d20b      	bcs.n	80180be <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	69fa      	ldr	r2, [r7, #28]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d211      	bcs.n	80180d4 <vTaskDelayUntil+0xb0>
 80180b0:	69fa      	ldr	r2, [r7, #28]
 80180b2:	6a3b      	ldr	r3, [r7, #32]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d90d      	bls.n	80180d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80180b8:	2301      	movs	r3, #1
 80180ba:	627b      	str	r3, [r7, #36]	; 0x24
 80180bc:	e00a      	b.n	80180d4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	69fa      	ldr	r2, [r7, #28]
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d303      	bcc.n	80180d0 <vTaskDelayUntil+0xac>
 80180c8:	69fa      	ldr	r2, [r7, #28]
 80180ca:	6a3b      	ldr	r3, [r7, #32]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d901      	bls.n	80180d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80180d0:	2301      	movs	r3, #1
 80180d2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	69fa      	ldr	r2, [r7, #28]
 80180d8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d009      	beq.n	80180f4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80180e0:	2024      	movs	r0, #36	; 0x24
 80180e2:	f002 fa8d 	bl	801a600 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80180e6:	69fa      	ldr	r2, [r7, #28]
 80180e8:	6a3b      	ldr	r3, [r7, #32]
 80180ea:	1ad3      	subs	r3, r2, r3
 80180ec:	2100      	movs	r1, #0
 80180ee:	4618      	mov	r0, r3
 80180f0:	f000 fdbe 	bl	8018c70 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80180f4:	f000 f8de 	bl	80182b4 <xTaskResumeAll>
 80180f8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80180fa:	69bb      	ldr	r3, [r7, #24]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d107      	bne.n	8018110 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8018100:	4b07      	ldr	r3, [pc, #28]	; (8018120 <vTaskDelayUntil+0xfc>)
 8018102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018106:	601a      	str	r2, [r3, #0]
 8018108:	f3bf 8f4f 	dsb	sy
 801810c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018110:	bf00      	nop
 8018112:	3728      	adds	r7, #40	; 0x28
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	20002498 	.word	0x20002498
 801811c:	20002474 	.word	0x20002474
 8018120:	e000ed04 	.word	0xe000ed04

08018124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018124:	b580      	push	{r7, lr}
 8018126:	b084      	sub	sp, #16
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801812c:	2300      	movs	r3, #0
 801812e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d01b      	beq.n	801816e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018136:	4b15      	ldr	r3, [pc, #84]	; (801818c <vTaskDelay+0x68>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d00a      	beq.n	8018154 <vTaskDelay+0x30>
	__asm volatile
 801813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018142:	f383 8811 	msr	BASEPRI, r3
 8018146:	f3bf 8f6f 	isb	sy
 801814a:	f3bf 8f4f 	dsb	sy
 801814e:	60bb      	str	r3, [r7, #8]
}
 8018150:	bf00      	nop
 8018152:	e7fe      	b.n	8018152 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018154:	f000 f8a0 	bl	8018298 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8018158:	6879      	ldr	r1, [r7, #4]
 801815a:	2023      	movs	r0, #35	; 0x23
 801815c:	f002 fa6e 	bl	801a63c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018160:	2100      	movs	r1, #0
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f000 fd84 	bl	8018c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018168:	f000 f8a4 	bl	80182b4 <xTaskResumeAll>
 801816c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d107      	bne.n	8018184 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8018174:	4b06      	ldr	r3, [pc, #24]	; (8018190 <vTaskDelay+0x6c>)
 8018176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801817a:	601a      	str	r2, [r3, #0]
 801817c:	f3bf 8f4f 	dsb	sy
 8018180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018184:	bf00      	nop
 8018186:	3710      	adds	r7, #16
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}
 801818c:	20002498 	.word	0x20002498
 8018190:	e000ed04 	.word	0xe000ed04

08018194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b08a      	sub	sp, #40	; 0x28
 8018198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801819a:	2300      	movs	r3, #0
 801819c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801819e:	2300      	movs	r3, #0
 80181a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80181a2:	463a      	mov	r2, r7
 80181a4:	1d39      	adds	r1, r7, #4
 80181a6:	f107 0308 	add.w	r3, r7, #8
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7fe fde8 	bl	8016d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80181b0:	6839      	ldr	r1, [r7, #0]
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	68ba      	ldr	r2, [r7, #8]
 80181b6:	9202      	str	r2, [sp, #8]
 80181b8:	9301      	str	r3, [sp, #4]
 80181ba:	2300      	movs	r3, #0
 80181bc:	9300      	str	r3, [sp, #0]
 80181be:	2300      	movs	r3, #0
 80181c0:	460a      	mov	r2, r1
 80181c2:	492d      	ldr	r1, [pc, #180]	; (8018278 <vTaskStartScheduler+0xe4>)
 80181c4:	482d      	ldr	r0, [pc, #180]	; (801827c <vTaskStartScheduler+0xe8>)
 80181c6:	f7ff fd57 	bl	8017c78 <xTaskCreateStatic>
 80181ca:	4603      	mov	r3, r0
 80181cc:	4a2c      	ldr	r2, [pc, #176]	; (8018280 <vTaskStartScheduler+0xec>)
 80181ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80181d0:	4b2b      	ldr	r3, [pc, #172]	; (8018280 <vTaskStartScheduler+0xec>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d002      	beq.n	80181de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80181d8:	2301      	movs	r3, #1
 80181da:	617b      	str	r3, [r7, #20]
 80181dc:	e001      	b.n	80181e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80181de:	2300      	movs	r3, #0
 80181e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80181e2:	697b      	ldr	r3, [r7, #20]
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d102      	bne.n	80181ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80181e8:	f000 fd96 	bl	8018d18 <xTimerCreateTimerTask>
 80181ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80181ee:	697b      	ldr	r3, [r7, #20]
 80181f0:	2b01      	cmp	r3, #1
 80181f2:	d12e      	bne.n	8018252 <vTaskStartScheduler+0xbe>
	__asm volatile
 80181f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f8:	f383 8811 	msr	BASEPRI, r3
 80181fc:	f3bf 8f6f 	isb	sy
 8018200:	f3bf 8f4f 	dsb	sy
 8018204:	613b      	str	r3, [r7, #16]
}
 8018206:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018208:	4b1e      	ldr	r3, [pc, #120]	; (8018284 <vTaskStartScheduler+0xf0>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	3364      	adds	r3, #100	; 0x64
 801820e:	4a1e      	ldr	r2, [pc, #120]	; (8018288 <vTaskStartScheduler+0xf4>)
 8018210:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018212:	4b1e      	ldr	r3, [pc, #120]	; (801828c <vTaskStartScheduler+0xf8>)
 8018214:	f04f 32ff 	mov.w	r2, #4294967295
 8018218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801821a:	4b1d      	ldr	r3, [pc, #116]	; (8018290 <vTaskStartScheduler+0xfc>)
 801821c:	2201      	movs	r2, #1
 801821e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018220:	4b1c      	ldr	r3, [pc, #112]	; (8018294 <vTaskStartScheduler+0x100>)
 8018222:	2200      	movs	r2, #0
 8018224:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8018226:	4b17      	ldr	r3, [pc, #92]	; (8018284 <vTaskStartScheduler+0xf0>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	3334      	adds	r3, #52	; 0x34
 801822c:	2205      	movs	r2, #5
 801822e:	4912      	ldr	r1, [pc, #72]	; (8018278 <vTaskStartScheduler+0xe4>)
 8018230:	4618      	mov	r0, r3
 8018232:	f003 f8f1 	bl	801b418 <memcmp>
 8018236:	4603      	mov	r3, r0
 8018238:	2b00      	cmp	r3, #0
 801823a:	d005      	beq.n	8018248 <vTaskStartScheduler+0xb4>
 801823c:	4b11      	ldr	r3, [pc, #68]	; (8018284 <vTaskStartScheduler+0xf0>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4618      	mov	r0, r3
 8018242:	f002 febf 	bl	801afc4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8018246:	e001      	b.n	801824c <vTaskStartScheduler+0xb8>
 8018248:	f002 fe5e 	bl	801af08 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801824c:	f001 f940 	bl	80194d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018250:	e00e      	b.n	8018270 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018258:	d10a      	bne.n	8018270 <vTaskStartScheduler+0xdc>
	__asm volatile
 801825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801825e:	f383 8811 	msr	BASEPRI, r3
 8018262:	f3bf 8f6f 	isb	sy
 8018266:	f3bf 8f4f 	dsb	sy
 801826a:	60fb      	str	r3, [r7, #12]
}
 801826c:	bf00      	nop
 801826e:	e7fe      	b.n	801826e <vTaskStartScheduler+0xda>
}
 8018270:	bf00      	nop
 8018272:	3718      	adds	r7, #24
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	0801c19c 	.word	0x0801c19c
 801827c:	08018925 	.word	0x08018925
 8018280:	20002494 	.word	0x20002494
 8018284:	20001f9c 	.word	0x20001f9c
 8018288:	20001444 	.word	0x20001444
 801828c:	20002490 	.word	0x20002490
 8018290:	2000247c 	.word	0x2000247c
 8018294:	20002474 	.word	0x20002474

08018298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018298:	b480      	push	{r7}
 801829a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801829c:	4b04      	ldr	r3, [pc, #16]	; (80182b0 <vTaskSuspendAll+0x18>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	3301      	adds	r3, #1
 80182a2:	4a03      	ldr	r2, [pc, #12]	; (80182b0 <vTaskSuspendAll+0x18>)
 80182a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80182a6:	bf00      	nop
 80182a8:	46bd      	mov	sp, r7
 80182aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ae:	4770      	bx	lr
 80182b0:	20002498 	.word	0x20002498

080182b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80182ba:	2300      	movs	r3, #0
 80182bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80182be:	2300      	movs	r3, #0
 80182c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80182c2:	4b44      	ldr	r3, [pc, #272]	; (80183d4 <xTaskResumeAll+0x120>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d10a      	bne.n	80182e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80182ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ce:	f383 8811 	msr	BASEPRI, r3
 80182d2:	f3bf 8f6f 	isb	sy
 80182d6:	f3bf 8f4f 	dsb	sy
 80182da:	603b      	str	r3, [r7, #0]
}
 80182dc:	bf00      	nop
 80182de:	e7fe      	b.n	80182de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80182e0:	f001 f998 	bl	8019614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80182e4:	4b3b      	ldr	r3, [pc, #236]	; (80183d4 <xTaskResumeAll+0x120>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	3b01      	subs	r3, #1
 80182ea:	4a3a      	ldr	r2, [pc, #232]	; (80183d4 <xTaskResumeAll+0x120>)
 80182ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182ee:	4b39      	ldr	r3, [pc, #228]	; (80183d4 <xTaskResumeAll+0x120>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d166      	bne.n	80183c4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80182f6:	4b38      	ldr	r3, [pc, #224]	; (80183d8 <xTaskResumeAll+0x124>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d062      	beq.n	80183c4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80182fe:	e033      	b.n	8018368 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018300:	4b36      	ldr	r3, [pc, #216]	; (80183dc <xTaskResumeAll+0x128>)
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	68db      	ldr	r3, [r3, #12]
 8018306:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	3318      	adds	r3, #24
 801830c:	4618      	mov	r0, r3
 801830e:	f7fe fdf5 	bl	8016efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	3304      	adds	r3, #4
 8018316:	4618      	mov	r0, r3
 8018318:	f7fe fdf0 	bl	8016efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	4618      	mov	r0, r3
 8018320:	f002 fe92 	bl	801b048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018328:	4b2d      	ldr	r3, [pc, #180]	; (80183e0 <xTaskResumeAll+0x12c>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	429a      	cmp	r2, r3
 801832e:	d903      	bls.n	8018338 <xTaskResumeAll+0x84>
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018334:	4a2a      	ldr	r2, [pc, #168]	; (80183e0 <xTaskResumeAll+0x12c>)
 8018336:	6013      	str	r3, [r2, #0]
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801833c:	4613      	mov	r3, r2
 801833e:	009b      	lsls	r3, r3, #2
 8018340:	4413      	add	r3, r2
 8018342:	009b      	lsls	r3, r3, #2
 8018344:	4a27      	ldr	r2, [pc, #156]	; (80183e4 <xTaskResumeAll+0x130>)
 8018346:	441a      	add	r2, r3
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	3304      	adds	r3, #4
 801834c:	4619      	mov	r1, r3
 801834e:	4610      	mov	r0, r2
 8018350:	f7fe fd77 	bl	8016e42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018358:	4b23      	ldr	r3, [pc, #140]	; (80183e8 <xTaskResumeAll+0x134>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801835e:	429a      	cmp	r2, r3
 8018360:	d302      	bcc.n	8018368 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8018362:	4b22      	ldr	r3, [pc, #136]	; (80183ec <xTaskResumeAll+0x138>)
 8018364:	2201      	movs	r2, #1
 8018366:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018368:	4b1c      	ldr	r3, [pc, #112]	; (80183dc <xTaskResumeAll+0x128>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d1c7      	bne.n	8018300 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d001      	beq.n	801837a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018376:	f000 fbc7 	bl	8018b08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801837a:	4b1d      	ldr	r3, [pc, #116]	; (80183f0 <xTaskResumeAll+0x13c>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d010      	beq.n	80183a8 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018386:	f000 f859 	bl	801843c <xTaskIncrementTick>
 801838a:	4603      	mov	r3, r0
 801838c:	2b00      	cmp	r3, #0
 801838e:	d002      	beq.n	8018396 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8018390:	4b16      	ldr	r3, [pc, #88]	; (80183ec <xTaskResumeAll+0x138>)
 8018392:	2201      	movs	r2, #1
 8018394:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	3b01      	subs	r3, #1
 801839a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d1f1      	bne.n	8018386 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 80183a2:	4b13      	ldr	r3, [pc, #76]	; (80183f0 <xTaskResumeAll+0x13c>)
 80183a4:	2200      	movs	r2, #0
 80183a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80183a8:	4b10      	ldr	r3, [pc, #64]	; (80183ec <xTaskResumeAll+0x138>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d009      	beq.n	80183c4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80183b0:	2301      	movs	r3, #1
 80183b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80183b4:	4b0f      	ldr	r3, [pc, #60]	; (80183f4 <xTaskResumeAll+0x140>)
 80183b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183ba:	601a      	str	r2, [r3, #0]
 80183bc:	f3bf 8f4f 	dsb	sy
 80183c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80183c4:	f001 f956 	bl	8019674 <vPortExitCritical>

	return xAlreadyYielded;
 80183c8:	68bb      	ldr	r3, [r7, #8]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3710      	adds	r7, #16
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	20002498 	.word	0x20002498
 80183d8:	20002470 	.word	0x20002470
 80183dc:	20002430 	.word	0x20002430
 80183e0:	20002478 	.word	0x20002478
 80183e4:	20001fa0 	.word	0x20001fa0
 80183e8:	20001f9c 	.word	0x20001f9c
 80183ec:	20002484 	.word	0x20002484
 80183f0:	20002480 	.word	0x20002480
 80183f4:	e000ed04 	.word	0xe000ed04

080183f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80183f8:	b480      	push	{r7}
 80183fa:	b083      	sub	sp, #12
 80183fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80183fe:	4b05      	ldr	r3, [pc, #20]	; (8018414 <xTaskGetTickCount+0x1c>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018404:	687b      	ldr	r3, [r7, #4]
}
 8018406:	4618      	mov	r0, r3
 8018408:	370c      	adds	r7, #12
 801840a:	46bd      	mov	sp, r7
 801840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018410:	4770      	bx	lr
 8018412:	bf00      	nop
 8018414:	20002474 	.word	0x20002474

08018418 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801841e:	f001 f9db 	bl	80197d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018422:	2300      	movs	r3, #0
 8018424:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018426:	4b04      	ldr	r3, [pc, #16]	; (8018438 <xTaskGetTickCountFromISR+0x20>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801842c:	683b      	ldr	r3, [r7, #0]
}
 801842e:	4618      	mov	r0, r3
 8018430:	3708      	adds	r7, #8
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	20002474 	.word	0x20002474

0801843c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b086      	sub	sp, #24
 8018440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018442:	2300      	movs	r3, #0
 8018444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018446:	4b51      	ldr	r3, [pc, #324]	; (801858c <xTaskIncrementTick+0x150>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	2b00      	cmp	r3, #0
 801844c:	f040 8093 	bne.w	8018576 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018450:	4b4f      	ldr	r3, [pc, #316]	; (8018590 <xTaskIncrementTick+0x154>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	3301      	adds	r3, #1
 8018456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018458:	4a4d      	ldr	r2, [pc, #308]	; (8018590 <xTaskIncrementTick+0x154>)
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d120      	bne.n	80184a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018464:	4b4b      	ldr	r3, [pc, #300]	; (8018594 <xTaskIncrementTick+0x158>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d00a      	beq.n	8018484 <xTaskIncrementTick+0x48>
	__asm volatile
 801846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018472:	f383 8811 	msr	BASEPRI, r3
 8018476:	f3bf 8f6f 	isb	sy
 801847a:	f3bf 8f4f 	dsb	sy
 801847e:	603b      	str	r3, [r7, #0]
}
 8018480:	bf00      	nop
 8018482:	e7fe      	b.n	8018482 <xTaskIncrementTick+0x46>
 8018484:	4b43      	ldr	r3, [pc, #268]	; (8018594 <xTaskIncrementTick+0x158>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	60fb      	str	r3, [r7, #12]
 801848a:	4b43      	ldr	r3, [pc, #268]	; (8018598 <xTaskIncrementTick+0x15c>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	4a41      	ldr	r2, [pc, #260]	; (8018594 <xTaskIncrementTick+0x158>)
 8018490:	6013      	str	r3, [r2, #0]
 8018492:	4a41      	ldr	r2, [pc, #260]	; (8018598 <xTaskIncrementTick+0x15c>)
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	6013      	str	r3, [r2, #0]
 8018498:	4b40      	ldr	r3, [pc, #256]	; (801859c <xTaskIncrementTick+0x160>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	3301      	adds	r3, #1
 801849e:	4a3f      	ldr	r2, [pc, #252]	; (801859c <xTaskIncrementTick+0x160>)
 80184a0:	6013      	str	r3, [r2, #0]
 80184a2:	f000 fb31 	bl	8018b08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80184a6:	4b3e      	ldr	r3, [pc, #248]	; (80185a0 <xTaskIncrementTick+0x164>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	693a      	ldr	r2, [r7, #16]
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d34d      	bcc.n	801854c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184b0:	4b38      	ldr	r3, [pc, #224]	; (8018594 <xTaskIncrementTick+0x158>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d104      	bne.n	80184c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184ba:	4b39      	ldr	r3, [pc, #228]	; (80185a0 <xTaskIncrementTick+0x164>)
 80184bc:	f04f 32ff 	mov.w	r2, #4294967295
 80184c0:	601a      	str	r2, [r3, #0]
					break;
 80184c2:	e043      	b.n	801854c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184c4:	4b33      	ldr	r3, [pc, #204]	; (8018594 <xTaskIncrementTick+0x158>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	68db      	ldr	r3, [r3, #12]
 80184ca:	68db      	ldr	r3, [r3, #12]
 80184cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80184d4:	693a      	ldr	r2, [r7, #16]
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d203      	bcs.n	80184e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80184dc:	4a30      	ldr	r2, [pc, #192]	; (80185a0 <xTaskIncrementTick+0x164>)
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80184e2:	e033      	b.n	801854c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	3304      	adds	r3, #4
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7fe fd07 	bl	8016efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d004      	beq.n	8018500 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80184f6:	68bb      	ldr	r3, [r7, #8]
 80184f8:	3318      	adds	r3, #24
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7fe fcfe 	bl	8016efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	4618      	mov	r0, r3
 8018504:	f002 fda0 	bl	801b048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801850c:	4b25      	ldr	r3, [pc, #148]	; (80185a4 <xTaskIncrementTick+0x168>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	429a      	cmp	r2, r3
 8018512:	d903      	bls.n	801851c <xTaskIncrementTick+0xe0>
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018518:	4a22      	ldr	r2, [pc, #136]	; (80185a4 <xTaskIncrementTick+0x168>)
 801851a:	6013      	str	r3, [r2, #0]
 801851c:	68bb      	ldr	r3, [r7, #8]
 801851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018520:	4613      	mov	r3, r2
 8018522:	009b      	lsls	r3, r3, #2
 8018524:	4413      	add	r3, r2
 8018526:	009b      	lsls	r3, r3, #2
 8018528:	4a1f      	ldr	r2, [pc, #124]	; (80185a8 <xTaskIncrementTick+0x16c>)
 801852a:	441a      	add	r2, r3
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	3304      	adds	r3, #4
 8018530:	4619      	mov	r1, r3
 8018532:	4610      	mov	r0, r2
 8018534:	f7fe fc85 	bl	8016e42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801853c:	4b1b      	ldr	r3, [pc, #108]	; (80185ac <xTaskIncrementTick+0x170>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018542:	429a      	cmp	r2, r3
 8018544:	d3b4      	bcc.n	80184b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018546:	2301      	movs	r3, #1
 8018548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801854a:	e7b1      	b.n	80184b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801854c:	4b17      	ldr	r3, [pc, #92]	; (80185ac <xTaskIncrementTick+0x170>)
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018552:	4915      	ldr	r1, [pc, #84]	; (80185a8 <xTaskIncrementTick+0x16c>)
 8018554:	4613      	mov	r3, r2
 8018556:	009b      	lsls	r3, r3, #2
 8018558:	4413      	add	r3, r2
 801855a:	009b      	lsls	r3, r3, #2
 801855c:	440b      	add	r3, r1
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2b01      	cmp	r3, #1
 8018562:	d901      	bls.n	8018568 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8018564:	2301      	movs	r3, #1
 8018566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018568:	4b11      	ldr	r3, [pc, #68]	; (80185b0 <xTaskIncrementTick+0x174>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d007      	beq.n	8018580 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8018570:	2301      	movs	r3, #1
 8018572:	617b      	str	r3, [r7, #20]
 8018574:	e004      	b.n	8018580 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018576:	4b0f      	ldr	r3, [pc, #60]	; (80185b4 <xTaskIncrementTick+0x178>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	3301      	adds	r3, #1
 801857c:	4a0d      	ldr	r2, [pc, #52]	; (80185b4 <xTaskIncrementTick+0x178>)
 801857e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018580:	697b      	ldr	r3, [r7, #20]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3718      	adds	r7, #24
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}
 801858a:	bf00      	nop
 801858c:	20002498 	.word	0x20002498
 8018590:	20002474 	.word	0x20002474
 8018594:	20002428 	.word	0x20002428
 8018598:	2000242c 	.word	0x2000242c
 801859c:	20002488 	.word	0x20002488
 80185a0:	20002490 	.word	0x20002490
 80185a4:	20002478 	.word	0x20002478
 80185a8:	20001fa0 	.word	0x20001fa0
 80185ac:	20001f9c 	.word	0x20001f9c
 80185b0:	20002484 	.word	0x20002484
 80185b4:	20002480 	.word	0x20002480

080185b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b084      	sub	sp, #16
 80185bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80185be:	4b33      	ldr	r3, [pc, #204]	; (801868c <vTaskSwitchContext+0xd4>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d003      	beq.n	80185ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80185c6:	4b32      	ldr	r3, [pc, #200]	; (8018690 <vTaskSwitchContext+0xd8>)
 80185c8:	2201      	movs	r2, #1
 80185ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80185cc:	e059      	b.n	8018682 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80185ce:	4b30      	ldr	r3, [pc, #192]	; (8018690 <vTaskSwitchContext+0xd8>)
 80185d0:	2200      	movs	r2, #0
 80185d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185d4:	4b2f      	ldr	r3, [pc, #188]	; (8018694 <vTaskSwitchContext+0xdc>)
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	60fb      	str	r3, [r7, #12]
 80185da:	e010      	b.n	80185fe <vTaskSwitchContext+0x46>
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d10a      	bne.n	80185f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80185e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185e6:	f383 8811 	msr	BASEPRI, r3
 80185ea:	f3bf 8f6f 	isb	sy
 80185ee:	f3bf 8f4f 	dsb	sy
 80185f2:	607b      	str	r3, [r7, #4]
}
 80185f4:	bf00      	nop
 80185f6:	e7fe      	b.n	80185f6 <vTaskSwitchContext+0x3e>
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	3b01      	subs	r3, #1
 80185fc:	60fb      	str	r3, [r7, #12]
 80185fe:	4926      	ldr	r1, [pc, #152]	; (8018698 <vTaskSwitchContext+0xe0>)
 8018600:	68fa      	ldr	r2, [r7, #12]
 8018602:	4613      	mov	r3, r2
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	4413      	add	r3, r2
 8018608:	009b      	lsls	r3, r3, #2
 801860a:	440b      	add	r3, r1
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d0e4      	beq.n	80185dc <vTaskSwitchContext+0x24>
 8018612:	68fa      	ldr	r2, [r7, #12]
 8018614:	4613      	mov	r3, r2
 8018616:	009b      	lsls	r3, r3, #2
 8018618:	4413      	add	r3, r2
 801861a:	009b      	lsls	r3, r3, #2
 801861c:	4a1e      	ldr	r2, [pc, #120]	; (8018698 <vTaskSwitchContext+0xe0>)
 801861e:	4413      	add	r3, r2
 8018620:	60bb      	str	r3, [r7, #8]
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	685a      	ldr	r2, [r3, #4]
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	605a      	str	r2, [r3, #4]
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	685a      	ldr	r2, [r3, #4]
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	3308      	adds	r3, #8
 8018634:	429a      	cmp	r2, r3
 8018636:	d104      	bne.n	8018642 <vTaskSwitchContext+0x8a>
 8018638:	68bb      	ldr	r3, [r7, #8]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	685a      	ldr	r2, [r3, #4]
 801863e:	68bb      	ldr	r3, [r7, #8]
 8018640:	605a      	str	r2, [r3, #4]
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	685b      	ldr	r3, [r3, #4]
 8018646:	68db      	ldr	r3, [r3, #12]
 8018648:	4a14      	ldr	r2, [pc, #80]	; (801869c <vTaskSwitchContext+0xe4>)
 801864a:	6013      	str	r3, [r2, #0]
 801864c:	4a11      	ldr	r2, [pc, #68]	; (8018694 <vTaskSwitchContext+0xdc>)
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8018652:	4b12      	ldr	r3, [pc, #72]	; (801869c <vTaskSwitchContext+0xe4>)
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	3334      	adds	r3, #52	; 0x34
 8018658:	2205      	movs	r2, #5
 801865a:	4911      	ldr	r1, [pc, #68]	; (80186a0 <vTaskSwitchContext+0xe8>)
 801865c:	4618      	mov	r0, r3
 801865e:	f002 fedb 	bl	801b418 <memcmp>
 8018662:	4603      	mov	r3, r0
 8018664:	2b00      	cmp	r3, #0
 8018666:	d005      	beq.n	8018674 <vTaskSwitchContext+0xbc>
 8018668:	4b0c      	ldr	r3, [pc, #48]	; (801869c <vTaskSwitchContext+0xe4>)
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	4618      	mov	r0, r3
 801866e:	f002 fca9 	bl	801afc4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8018672:	e001      	b.n	8018678 <vTaskSwitchContext+0xc0>
 8018674:	f002 fc48 	bl	801af08 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018678:	4b08      	ldr	r3, [pc, #32]	; (801869c <vTaskSwitchContext+0xe4>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	3364      	adds	r3, #100	; 0x64
 801867e:	4a09      	ldr	r2, [pc, #36]	; (80186a4 <vTaskSwitchContext+0xec>)
 8018680:	6013      	str	r3, [r2, #0]
}
 8018682:	bf00      	nop
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop
 801868c:	20002498 	.word	0x20002498
 8018690:	20002484 	.word	0x20002484
 8018694:	20002478 	.word	0x20002478
 8018698:	20001fa0 	.word	0x20001fa0
 801869c:	20001f9c 	.word	0x20001f9c
 80186a0:	0801c19c 	.word	0x0801c19c
 80186a4:	20001444 	.word	0x20001444

080186a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b084      	sub	sp, #16
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
 80186b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d10a      	bne.n	80186ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80186b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186bc:	f383 8811 	msr	BASEPRI, r3
 80186c0:	f3bf 8f6f 	isb	sy
 80186c4:	f3bf 8f4f 	dsb	sy
 80186c8:	60fb      	str	r3, [r7, #12]
}
 80186ca:	bf00      	nop
 80186cc:	e7fe      	b.n	80186cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80186ce:	4b07      	ldr	r3, [pc, #28]	; (80186ec <vTaskPlaceOnEventList+0x44>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	3318      	adds	r3, #24
 80186d4:	4619      	mov	r1, r3
 80186d6:	6878      	ldr	r0, [r7, #4]
 80186d8:	f7fe fbd7 	bl	8016e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80186dc:	2101      	movs	r1, #1
 80186de:	6838      	ldr	r0, [r7, #0]
 80186e0:	f000 fac6 	bl	8018c70 <prvAddCurrentTaskToDelayedList>
}
 80186e4:	bf00      	nop
 80186e6:	3710      	adds	r7, #16
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	20001f9c 	.word	0x20001f9c

080186f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b086      	sub	sp, #24
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	60f8      	str	r0, [r7, #12]
 80186f8:	60b9      	str	r1, [r7, #8]
 80186fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d10a      	bne.n	8018718 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018706:	f383 8811 	msr	BASEPRI, r3
 801870a:	f3bf 8f6f 	isb	sy
 801870e:	f3bf 8f4f 	dsb	sy
 8018712:	617b      	str	r3, [r7, #20]
}
 8018714:	bf00      	nop
 8018716:	e7fe      	b.n	8018716 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018718:	4b0b      	ldr	r3, [pc, #44]	; (8018748 <vTaskPlaceOnEventListRestricted+0x58>)
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	3318      	adds	r3, #24
 801871e:	4619      	mov	r1, r3
 8018720:	68f8      	ldr	r0, [r7, #12]
 8018722:	f7fe fb8e 	bl	8016e42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	2b00      	cmp	r3, #0
 801872a:	d002      	beq.n	8018732 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801872c:	f04f 33ff 	mov.w	r3, #4294967295
 8018730:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8018732:	2024      	movs	r0, #36	; 0x24
 8018734:	f001 ff64 	bl	801a600 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018738:	6879      	ldr	r1, [r7, #4]
 801873a:	68b8      	ldr	r0, [r7, #8]
 801873c:	f000 fa98 	bl	8018c70 <prvAddCurrentTaskToDelayedList>
	}
 8018740:	bf00      	nop
 8018742:	3718      	adds	r7, #24
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}
 8018748:	20001f9c 	.word	0x20001f9c

0801874c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b086      	sub	sp, #24
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	68db      	ldr	r3, [r3, #12]
 8018758:	68db      	ldr	r3, [r3, #12]
 801875a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d10a      	bne.n	8018778 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018766:	f383 8811 	msr	BASEPRI, r3
 801876a:	f3bf 8f6f 	isb	sy
 801876e:	f3bf 8f4f 	dsb	sy
 8018772:	60fb      	str	r3, [r7, #12]
}
 8018774:	bf00      	nop
 8018776:	e7fe      	b.n	8018776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018778:	693b      	ldr	r3, [r7, #16]
 801877a:	3318      	adds	r3, #24
 801877c:	4618      	mov	r0, r3
 801877e:	f7fe fbbd 	bl	8016efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018782:	4b20      	ldr	r3, [pc, #128]	; (8018804 <xTaskRemoveFromEventList+0xb8>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d121      	bne.n	80187ce <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	3304      	adds	r3, #4
 801878e:	4618      	mov	r0, r3
 8018790:	f7fe fbb4 	bl	8016efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018794:	693b      	ldr	r3, [r7, #16]
 8018796:	4618      	mov	r0, r3
 8018798:	f002 fc56 	bl	801b048 <SEGGER_SYSVIEW_OnTaskStartReady>
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187a0:	4b19      	ldr	r3, [pc, #100]	; (8018808 <xTaskRemoveFromEventList+0xbc>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	429a      	cmp	r2, r3
 80187a6:	d903      	bls.n	80187b0 <xTaskRemoveFromEventList+0x64>
 80187a8:	693b      	ldr	r3, [r7, #16]
 80187aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ac:	4a16      	ldr	r2, [pc, #88]	; (8018808 <xTaskRemoveFromEventList+0xbc>)
 80187ae:	6013      	str	r3, [r2, #0]
 80187b0:	693b      	ldr	r3, [r7, #16]
 80187b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187b4:	4613      	mov	r3, r2
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	4413      	add	r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	4a13      	ldr	r2, [pc, #76]	; (801880c <xTaskRemoveFromEventList+0xc0>)
 80187be:	441a      	add	r2, r3
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	3304      	adds	r3, #4
 80187c4:	4619      	mov	r1, r3
 80187c6:	4610      	mov	r0, r2
 80187c8:	f7fe fb3b 	bl	8016e42 <vListInsertEnd>
 80187cc:	e005      	b.n	80187da <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	3318      	adds	r3, #24
 80187d2:	4619      	mov	r1, r3
 80187d4:	480e      	ldr	r0, [pc, #56]	; (8018810 <xTaskRemoveFromEventList+0xc4>)
 80187d6:	f7fe fb34 	bl	8016e42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187de:	4b0d      	ldr	r3, [pc, #52]	; (8018814 <xTaskRemoveFromEventList+0xc8>)
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d905      	bls.n	80187f4 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80187e8:	2301      	movs	r3, #1
 80187ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80187ec:	4b0a      	ldr	r3, [pc, #40]	; (8018818 <xTaskRemoveFromEventList+0xcc>)
 80187ee:	2201      	movs	r2, #1
 80187f0:	601a      	str	r2, [r3, #0]
 80187f2:	e001      	b.n	80187f8 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80187f4:	2300      	movs	r3, #0
 80187f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80187f8:	697b      	ldr	r3, [r7, #20]
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3718      	adds	r7, #24
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	20002498 	.word	0x20002498
 8018808:	20002478 	.word	0x20002478
 801880c:	20001fa0 	.word	0x20001fa0
 8018810:	20002430 	.word	0x20002430
 8018814:	20001f9c 	.word	0x20001f9c
 8018818:	20002484 	.word	0x20002484

0801881c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801881c:	b480      	push	{r7}
 801881e:	b083      	sub	sp, #12
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018824:	4b06      	ldr	r3, [pc, #24]	; (8018840 <vTaskInternalSetTimeOutState+0x24>)
 8018826:	681a      	ldr	r2, [r3, #0]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801882c:	4b05      	ldr	r3, [pc, #20]	; (8018844 <vTaskInternalSetTimeOutState+0x28>)
 801882e:	681a      	ldr	r2, [r3, #0]
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	605a      	str	r2, [r3, #4]
}
 8018834:	bf00      	nop
 8018836:	370c      	adds	r7, #12
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr
 8018840:	20002488 	.word	0x20002488
 8018844:	20002474 	.word	0x20002474

08018848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b088      	sub	sp, #32
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d10a      	bne.n	801886e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801885c:	f383 8811 	msr	BASEPRI, r3
 8018860:	f3bf 8f6f 	isb	sy
 8018864:	f3bf 8f4f 	dsb	sy
 8018868:	613b      	str	r3, [r7, #16]
}
 801886a:	bf00      	nop
 801886c:	e7fe      	b.n	801886c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d10a      	bne.n	801888a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018878:	f383 8811 	msr	BASEPRI, r3
 801887c:	f3bf 8f6f 	isb	sy
 8018880:	f3bf 8f4f 	dsb	sy
 8018884:	60fb      	str	r3, [r7, #12]
}
 8018886:	bf00      	nop
 8018888:	e7fe      	b.n	8018888 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801888a:	f000 fec3 	bl	8019614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801888e:	4b1d      	ldr	r3, [pc, #116]	; (8018904 <xTaskCheckForTimeOut+0xbc>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	685b      	ldr	r3, [r3, #4]
 8018898:	69ba      	ldr	r2, [r7, #24]
 801889a:	1ad3      	subs	r3, r2, r3
 801889c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188a6:	d102      	bne.n	80188ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80188a8:	2300      	movs	r3, #0
 80188aa:	61fb      	str	r3, [r7, #28]
 80188ac:	e023      	b.n	80188f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681a      	ldr	r2, [r3, #0]
 80188b2:	4b15      	ldr	r3, [pc, #84]	; (8018908 <xTaskCheckForTimeOut+0xc0>)
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d007      	beq.n	80188ca <xTaskCheckForTimeOut+0x82>
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	685b      	ldr	r3, [r3, #4]
 80188be:	69ba      	ldr	r2, [r7, #24]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d302      	bcc.n	80188ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80188c4:	2301      	movs	r3, #1
 80188c6:	61fb      	str	r3, [r7, #28]
 80188c8:	e015      	b.n	80188f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	697a      	ldr	r2, [r7, #20]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d20b      	bcs.n	80188ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80188d4:	683b      	ldr	r3, [r7, #0]
 80188d6:	681a      	ldr	r2, [r3, #0]
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	1ad2      	subs	r2, r2, r3
 80188dc:	683b      	ldr	r3, [r7, #0]
 80188de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f7ff ff9b 	bl	801881c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80188e6:	2300      	movs	r3, #0
 80188e8:	61fb      	str	r3, [r7, #28]
 80188ea:	e004      	b.n	80188f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	2200      	movs	r2, #0
 80188f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80188f2:	2301      	movs	r3, #1
 80188f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80188f6:	f000 febd 	bl	8019674 <vPortExitCritical>

	return xReturn;
 80188fa:	69fb      	ldr	r3, [r7, #28]
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	3720      	adds	r7, #32
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}
 8018904:	20002474 	.word	0x20002474
 8018908:	20002488 	.word	0x20002488

0801890c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801890c:	b480      	push	{r7}
 801890e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018910:	4b03      	ldr	r3, [pc, #12]	; (8018920 <vTaskMissedYield+0x14>)
 8018912:	2201      	movs	r2, #1
 8018914:	601a      	str	r2, [r3, #0]
}
 8018916:	bf00      	nop
 8018918:	46bd      	mov	sp, r7
 801891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891e:	4770      	bx	lr
 8018920:	20002484 	.word	0x20002484

08018924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801892c:	f000 f852 	bl	80189d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018930:	4b06      	ldr	r3, [pc, #24]	; (801894c <prvIdleTask+0x28>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b01      	cmp	r3, #1
 8018936:	d9f9      	bls.n	801892c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018938:	4b05      	ldr	r3, [pc, #20]	; (8018950 <prvIdleTask+0x2c>)
 801893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801893e:	601a      	str	r2, [r3, #0]
 8018940:	f3bf 8f4f 	dsb	sy
 8018944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018948:	e7f0      	b.n	801892c <prvIdleTask+0x8>
 801894a:	bf00      	nop
 801894c:	20001fa0 	.word	0x20001fa0
 8018950:	e000ed04 	.word	0xe000ed04

08018954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801895a:	2300      	movs	r3, #0
 801895c:	607b      	str	r3, [r7, #4]
 801895e:	e00c      	b.n	801897a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018960:	687a      	ldr	r2, [r7, #4]
 8018962:	4613      	mov	r3, r2
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	4413      	add	r3, r2
 8018968:	009b      	lsls	r3, r3, #2
 801896a:	4a12      	ldr	r2, [pc, #72]	; (80189b4 <prvInitialiseTaskLists+0x60>)
 801896c:	4413      	add	r3, r2
 801896e:	4618      	mov	r0, r3
 8018970:	f7fe fa3a 	bl	8016de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	3301      	adds	r3, #1
 8018978:	607b      	str	r3, [r7, #4]
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2b37      	cmp	r3, #55	; 0x37
 801897e:	d9ef      	bls.n	8018960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018980:	480d      	ldr	r0, [pc, #52]	; (80189b8 <prvInitialiseTaskLists+0x64>)
 8018982:	f7fe fa31 	bl	8016de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018986:	480d      	ldr	r0, [pc, #52]	; (80189bc <prvInitialiseTaskLists+0x68>)
 8018988:	f7fe fa2e 	bl	8016de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801898c:	480c      	ldr	r0, [pc, #48]	; (80189c0 <prvInitialiseTaskLists+0x6c>)
 801898e:	f7fe fa2b 	bl	8016de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018992:	480c      	ldr	r0, [pc, #48]	; (80189c4 <prvInitialiseTaskLists+0x70>)
 8018994:	f7fe fa28 	bl	8016de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018998:	480b      	ldr	r0, [pc, #44]	; (80189c8 <prvInitialiseTaskLists+0x74>)
 801899a:	f7fe fa25 	bl	8016de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801899e:	4b0b      	ldr	r3, [pc, #44]	; (80189cc <prvInitialiseTaskLists+0x78>)
 80189a0:	4a05      	ldr	r2, [pc, #20]	; (80189b8 <prvInitialiseTaskLists+0x64>)
 80189a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80189a4:	4b0a      	ldr	r3, [pc, #40]	; (80189d0 <prvInitialiseTaskLists+0x7c>)
 80189a6:	4a05      	ldr	r2, [pc, #20]	; (80189bc <prvInitialiseTaskLists+0x68>)
 80189a8:	601a      	str	r2, [r3, #0]
}
 80189aa:	bf00      	nop
 80189ac:	3708      	adds	r7, #8
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	20001fa0 	.word	0x20001fa0
 80189b8:	20002400 	.word	0x20002400
 80189bc:	20002414 	.word	0x20002414
 80189c0:	20002430 	.word	0x20002430
 80189c4:	20002444 	.word	0x20002444
 80189c8:	2000245c 	.word	0x2000245c
 80189cc:	20002428 	.word	0x20002428
 80189d0:	2000242c 	.word	0x2000242c

080189d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80189da:	e019      	b.n	8018a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80189dc:	f000 fe1a 	bl	8019614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189e0:	4b10      	ldr	r3, [pc, #64]	; (8018a24 <prvCheckTasksWaitingTermination+0x50>)
 80189e2:	68db      	ldr	r3, [r3, #12]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	3304      	adds	r3, #4
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7fe fa85 	bl	8016efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80189f2:	4b0d      	ldr	r3, [pc, #52]	; (8018a28 <prvCheckTasksWaitingTermination+0x54>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	3b01      	subs	r3, #1
 80189f8:	4a0b      	ldr	r2, [pc, #44]	; (8018a28 <prvCheckTasksWaitingTermination+0x54>)
 80189fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80189fc:	4b0b      	ldr	r3, [pc, #44]	; (8018a2c <prvCheckTasksWaitingTermination+0x58>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	3b01      	subs	r3, #1
 8018a02:	4a0a      	ldr	r2, [pc, #40]	; (8018a2c <prvCheckTasksWaitingTermination+0x58>)
 8018a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a06:	f000 fe35 	bl	8019674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a0a:	6878      	ldr	r0, [r7, #4]
 8018a0c:	f000 f848 	bl	8018aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a10:	4b06      	ldr	r3, [pc, #24]	; (8018a2c <prvCheckTasksWaitingTermination+0x58>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d1e1      	bne.n	80189dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a18:	bf00      	nop
 8018a1a:	bf00      	nop
 8018a1c:	3708      	adds	r7, #8
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	bd80      	pop	{r7, pc}
 8018a22:	bf00      	nop
 8018a24:	20002444 	.word	0x20002444
 8018a28:	20002470 	.word	0x20002470
 8018a2c:	20002458 	.word	0x20002458

08018a30 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8018a30:	b480      	push	{r7}
 8018a32:	b085      	sub	sp, #20
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8018a38:	2300      	movs	r3, #0
 8018a3a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8018a3c:	e005      	b.n	8018a4a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	3301      	adds	r3, #1
 8018a42:	607b      	str	r3, [r7, #4]
			ulCount++;
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	3301      	adds	r3, #1
 8018a48:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	2ba5      	cmp	r3, #165	; 0xa5
 8018a50:	d0f5      	beq.n	8018a3e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	089b      	lsrs	r3, r3, #2
 8018a56:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	b29b      	uxth	r3, r3
	}
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	3714      	adds	r7, #20
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr

08018a68 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b086      	sub	sp, #24
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d102      	bne.n	8018a7c <uxTaskGetStackHighWaterMark+0x14>
 8018a76:	4b09      	ldr	r3, [pc, #36]	; (8018a9c <uxTaskGetStackHighWaterMark+0x34>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	e000      	b.n	8018a7e <uxTaskGetStackHighWaterMark+0x16>
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8018a80:	697b      	ldr	r3, [r7, #20]
 8018a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a84:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8018a86:	6938      	ldr	r0, [r7, #16]
 8018a88:	f7ff ffd2 	bl	8018a30 <prvTaskCheckFreeStackSpace>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8018a90:	68fb      	ldr	r3, [r7, #12]
	}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3718      	adds	r7, #24
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	20001f9c 	.word	0x20001f9c

08018aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b084      	sub	sp, #16
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	3364      	adds	r3, #100	; 0x64
 8018aac:	4618      	mov	r0, r3
 8018aae:	f002 fce5 	bl	801b47c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d108      	bne.n	8018ace <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f000 ff95 	bl	80199f0 <vPortFree>
				vPortFree( pxTCB );
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f000 ff92 	bl	80199f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018acc:	e018      	b.n	8018b00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8018ad4:	2b01      	cmp	r3, #1
 8018ad6:	d103      	bne.n	8018ae0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018ad8:	6878      	ldr	r0, [r7, #4]
 8018ada:	f000 ff89 	bl	80199f0 <vPortFree>
	}
 8018ade:	e00f      	b.n	8018b00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8018ae6:	2b02      	cmp	r3, #2
 8018ae8:	d00a      	beq.n	8018b00 <prvDeleteTCB+0x60>
	__asm volatile
 8018aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aee:	f383 8811 	msr	BASEPRI, r3
 8018af2:	f3bf 8f6f 	isb	sy
 8018af6:	f3bf 8f4f 	dsb	sy
 8018afa:	60fb      	str	r3, [r7, #12]
}
 8018afc:	bf00      	nop
 8018afe:	e7fe      	b.n	8018afe <prvDeleteTCB+0x5e>
	}
 8018b00:	bf00      	nop
 8018b02:	3710      	adds	r7, #16
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018b0e:	4b0c      	ldr	r3, [pc, #48]	; (8018b40 <prvResetNextTaskUnblockTime+0x38>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d104      	bne.n	8018b22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018b18:	4b0a      	ldr	r3, [pc, #40]	; (8018b44 <prvResetNextTaskUnblockTime+0x3c>)
 8018b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8018b1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018b20:	e008      	b.n	8018b34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b22:	4b07      	ldr	r3, [pc, #28]	; (8018b40 <prvResetNextTaskUnblockTime+0x38>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	68db      	ldr	r3, [r3, #12]
 8018b2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	4a04      	ldr	r2, [pc, #16]	; (8018b44 <prvResetNextTaskUnblockTime+0x3c>)
 8018b32:	6013      	str	r3, [r2, #0]
}
 8018b34:	bf00      	nop
 8018b36:	370c      	adds	r7, #12
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3e:	4770      	bx	lr
 8018b40:	20002428 	.word	0x20002428
 8018b44:	20002490 	.word	0x20002490

08018b48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b48:	b480      	push	{r7}
 8018b4a:	b083      	sub	sp, #12
 8018b4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b4e:	4b0b      	ldr	r3, [pc, #44]	; (8018b7c <xTaskGetSchedulerState+0x34>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d102      	bne.n	8018b5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b56:	2301      	movs	r3, #1
 8018b58:	607b      	str	r3, [r7, #4]
 8018b5a:	e008      	b.n	8018b6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b5c:	4b08      	ldr	r3, [pc, #32]	; (8018b80 <xTaskGetSchedulerState+0x38>)
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d102      	bne.n	8018b6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b64:	2302      	movs	r3, #2
 8018b66:	607b      	str	r3, [r7, #4]
 8018b68:	e001      	b.n	8018b6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b6e:	687b      	ldr	r3, [r7, #4]
	}
 8018b70:	4618      	mov	r0, r3
 8018b72:	370c      	adds	r7, #12
 8018b74:	46bd      	mov	sp, r7
 8018b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7a:	4770      	bx	lr
 8018b7c:	2000247c 	.word	0x2000247c
 8018b80:	20002498 	.word	0x20002498

08018b84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b086      	sub	sp, #24
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b90:	2300      	movs	r3, #0
 8018b92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d05f      	beq.n	8018c5a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b9a:	4b32      	ldr	r3, [pc, #200]	; (8018c64 <xTaskPriorityDisinherit+0xe0>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	693a      	ldr	r2, [r7, #16]
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	d00a      	beq.n	8018bba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba8:	f383 8811 	msr	BASEPRI, r3
 8018bac:	f3bf 8f6f 	isb	sy
 8018bb0:	f3bf 8f4f 	dsb	sy
 8018bb4:	60fb      	str	r3, [r7, #12]
}
 8018bb6:	bf00      	nop
 8018bb8:	e7fe      	b.n	8018bb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d10a      	bne.n	8018bd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc6:	f383 8811 	msr	BASEPRI, r3
 8018bca:	f3bf 8f6f 	isb	sy
 8018bce:	f3bf 8f4f 	dsb	sy
 8018bd2:	60bb      	str	r3, [r7, #8]
}
 8018bd4:	bf00      	nop
 8018bd6:	e7fe      	b.n	8018bd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018bdc:	1e5a      	subs	r2, r3, #1
 8018bde:	693b      	ldr	r3, [r7, #16]
 8018be0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018be2:	693b      	ldr	r3, [r7, #16]
 8018be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d035      	beq.n	8018c5a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d131      	bne.n	8018c5a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bf6:	693b      	ldr	r3, [r7, #16]
 8018bf8:	3304      	adds	r3, #4
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7fe f97e 	bl	8016efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	4619      	mov	r1, r3
 8018c04:	204a      	movs	r0, #74	; 0x4a
 8018c06:	f001 fd19 	bl	801a63c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018c0a:	693b      	ldr	r3, [r7, #16]
 8018c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018c0e:	693b      	ldr	r3, [r7, #16]
 8018c10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c12:	693b      	ldr	r3, [r7, #16]
 8018c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018c1a:	693b      	ldr	r3, [r7, #16]
 8018c1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018c1e:	693b      	ldr	r3, [r7, #16]
 8018c20:	4618      	mov	r0, r3
 8018c22:	f002 fa11 	bl	801b048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c2a:	4b0f      	ldr	r3, [pc, #60]	; (8018c68 <xTaskPriorityDisinherit+0xe4>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d903      	bls.n	8018c3a <xTaskPriorityDisinherit+0xb6>
 8018c32:	693b      	ldr	r3, [r7, #16]
 8018c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c36:	4a0c      	ldr	r2, [pc, #48]	; (8018c68 <xTaskPriorityDisinherit+0xe4>)
 8018c38:	6013      	str	r3, [r2, #0]
 8018c3a:	693b      	ldr	r3, [r7, #16]
 8018c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c3e:	4613      	mov	r3, r2
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	4413      	add	r3, r2
 8018c44:	009b      	lsls	r3, r3, #2
 8018c46:	4a09      	ldr	r2, [pc, #36]	; (8018c6c <xTaskPriorityDisinherit+0xe8>)
 8018c48:	441a      	add	r2, r3
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	4619      	mov	r1, r3
 8018c50:	4610      	mov	r0, r2
 8018c52:	f7fe f8f6 	bl	8016e42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c56:	2301      	movs	r3, #1
 8018c58:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c5a:	697b      	ldr	r3, [r7, #20]
	}
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3718      	adds	r7, #24
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}
 8018c64:	20001f9c 	.word	0x20001f9c
 8018c68:	20002478 	.word	0x20002478
 8018c6c:	20001fa0 	.word	0x20001fa0

08018c70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c7a:	4b21      	ldr	r3, [pc, #132]	; (8018d00 <prvAddCurrentTaskToDelayedList+0x90>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c80:	4b20      	ldr	r3, [pc, #128]	; (8018d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	3304      	adds	r3, #4
 8018c86:	4618      	mov	r0, r3
 8018c88:	f7fe f938 	bl	8016efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c92:	d10a      	bne.n	8018caa <prvAddCurrentTaskToDelayedList+0x3a>
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d007      	beq.n	8018caa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c9a:	4b1a      	ldr	r3, [pc, #104]	; (8018d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	3304      	adds	r3, #4
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	4819      	ldr	r0, [pc, #100]	; (8018d08 <prvAddCurrentTaskToDelayedList+0x98>)
 8018ca4:	f7fe f8cd 	bl	8016e42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018ca8:	e026      	b.n	8018cf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018caa:	68fa      	ldr	r2, [r7, #12]
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	4413      	add	r3, r2
 8018cb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018cb2:	4b14      	ldr	r3, [pc, #80]	; (8018d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	68ba      	ldr	r2, [r7, #8]
 8018cb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018cba:	68ba      	ldr	r2, [r7, #8]
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	429a      	cmp	r2, r3
 8018cc0:	d209      	bcs.n	8018cd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018cc2:	4b12      	ldr	r3, [pc, #72]	; (8018d0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8018cc4:	681a      	ldr	r2, [r3, #0]
 8018cc6:	4b0f      	ldr	r3, [pc, #60]	; (8018d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	3304      	adds	r3, #4
 8018ccc:	4619      	mov	r1, r3
 8018cce:	4610      	mov	r0, r2
 8018cd0:	f7fe f8db 	bl	8016e8a <vListInsert>
}
 8018cd4:	e010      	b.n	8018cf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018cd6:	4b0e      	ldr	r3, [pc, #56]	; (8018d10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018cd8:	681a      	ldr	r2, [r3, #0]
 8018cda:	4b0a      	ldr	r3, [pc, #40]	; (8018d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	3304      	adds	r3, #4
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	4610      	mov	r0, r2
 8018ce4:	f7fe f8d1 	bl	8016e8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018ce8:	4b0a      	ldr	r3, [pc, #40]	; (8018d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	68ba      	ldr	r2, [r7, #8]
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	d202      	bcs.n	8018cf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018cf2:	4a08      	ldr	r2, [pc, #32]	; (8018d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	6013      	str	r3, [r2, #0]
}
 8018cf8:	bf00      	nop
 8018cfa:	3710      	adds	r7, #16
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}
 8018d00:	20002474 	.word	0x20002474
 8018d04:	20001f9c 	.word	0x20001f9c
 8018d08:	2000245c 	.word	0x2000245c
 8018d0c:	2000242c 	.word	0x2000242c
 8018d10:	20002428 	.word	0x20002428
 8018d14:	20002490 	.word	0x20002490

08018d18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b08a      	sub	sp, #40	; 0x28
 8018d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018d22:	f000 fb07 	bl	8019334 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018d26:	4b1c      	ldr	r3, [pc, #112]	; (8018d98 <xTimerCreateTimerTask+0x80>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d021      	beq.n	8018d72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018d2e:	2300      	movs	r3, #0
 8018d30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018d32:	2300      	movs	r3, #0
 8018d34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018d36:	1d3a      	adds	r2, r7, #4
 8018d38:	f107 0108 	add.w	r1, r7, #8
 8018d3c:	f107 030c 	add.w	r3, r7, #12
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7fe f837 	bl	8016db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018d46:	6879      	ldr	r1, [r7, #4]
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	68fa      	ldr	r2, [r7, #12]
 8018d4c:	9202      	str	r2, [sp, #8]
 8018d4e:	9301      	str	r3, [sp, #4]
 8018d50:	2302      	movs	r3, #2
 8018d52:	9300      	str	r3, [sp, #0]
 8018d54:	2300      	movs	r3, #0
 8018d56:	460a      	mov	r2, r1
 8018d58:	4910      	ldr	r1, [pc, #64]	; (8018d9c <xTimerCreateTimerTask+0x84>)
 8018d5a:	4811      	ldr	r0, [pc, #68]	; (8018da0 <xTimerCreateTimerTask+0x88>)
 8018d5c:	f7fe ff8c 	bl	8017c78 <xTaskCreateStatic>
 8018d60:	4603      	mov	r3, r0
 8018d62:	4a10      	ldr	r2, [pc, #64]	; (8018da4 <xTimerCreateTimerTask+0x8c>)
 8018d64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018d66:	4b0f      	ldr	r3, [pc, #60]	; (8018da4 <xTimerCreateTimerTask+0x8c>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d001      	beq.n	8018d72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018d6e:	2301      	movs	r3, #1
 8018d70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018d72:	697b      	ldr	r3, [r7, #20]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d10a      	bne.n	8018d8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d7c:	f383 8811 	msr	BASEPRI, r3
 8018d80:	f3bf 8f6f 	isb	sy
 8018d84:	f3bf 8f4f 	dsb	sy
 8018d88:	613b      	str	r3, [r7, #16]
}
 8018d8a:	bf00      	nop
 8018d8c:	e7fe      	b.n	8018d8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018d8e:	697b      	ldr	r3, [r7, #20]
}
 8018d90:	4618      	mov	r0, r3
 8018d92:	3718      	adds	r7, #24
 8018d94:	46bd      	mov	sp, r7
 8018d96:	bd80      	pop	{r7, pc}
 8018d98:	200024cc 	.word	0x200024cc
 8018d9c:	0801c1a4 	.word	0x0801c1a4
 8018da0:	08018edd 	.word	0x08018edd
 8018da4:	200024d0 	.word	0x200024d0

08018da8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b08a      	sub	sp, #40	; 0x28
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	60f8      	str	r0, [r7, #12]
 8018db0:	60b9      	str	r1, [r7, #8]
 8018db2:	607a      	str	r2, [r7, #4]
 8018db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018db6:	2300      	movs	r3, #0
 8018db8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d10a      	bne.n	8018dd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dc4:	f383 8811 	msr	BASEPRI, r3
 8018dc8:	f3bf 8f6f 	isb	sy
 8018dcc:	f3bf 8f4f 	dsb	sy
 8018dd0:	623b      	str	r3, [r7, #32]
}
 8018dd2:	bf00      	nop
 8018dd4:	e7fe      	b.n	8018dd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018dd6:	4b1a      	ldr	r3, [pc, #104]	; (8018e40 <xTimerGenericCommand+0x98>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d02a      	beq.n	8018e34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018dde:	68bb      	ldr	r3, [r7, #8]
 8018de0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	2b05      	cmp	r3, #5
 8018dee:	dc18      	bgt.n	8018e22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018df0:	f7ff feaa 	bl	8018b48 <xTaskGetSchedulerState>
 8018df4:	4603      	mov	r3, r0
 8018df6:	2b02      	cmp	r3, #2
 8018df8:	d109      	bne.n	8018e0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018dfa:	4b11      	ldr	r3, [pc, #68]	; (8018e40 <xTimerGenericCommand+0x98>)
 8018dfc:	6818      	ldr	r0, [r3, #0]
 8018dfe:	f107 0110 	add.w	r1, r7, #16
 8018e02:	2300      	movs	r3, #0
 8018e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e06:	f7fe f9e7 	bl	80171d8 <xQueueGenericSend>
 8018e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8018e0c:	e012      	b.n	8018e34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018e0e:	4b0c      	ldr	r3, [pc, #48]	; (8018e40 <xTimerGenericCommand+0x98>)
 8018e10:	6818      	ldr	r0, [r3, #0]
 8018e12:	f107 0110 	add.w	r1, r7, #16
 8018e16:	2300      	movs	r3, #0
 8018e18:	2200      	movs	r2, #0
 8018e1a:	f7fe f9dd 	bl	80171d8 <xQueueGenericSend>
 8018e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8018e20:	e008      	b.n	8018e34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018e22:	4b07      	ldr	r3, [pc, #28]	; (8018e40 <xTimerGenericCommand+0x98>)
 8018e24:	6818      	ldr	r0, [r3, #0]
 8018e26:	f107 0110 	add.w	r1, r7, #16
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	683a      	ldr	r2, [r7, #0]
 8018e2e:	f7fe faf9 	bl	8017424 <xQueueGenericSendFromISR>
 8018e32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3728      	adds	r7, #40	; 0x28
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bd80      	pop	{r7, pc}
 8018e3e:	bf00      	nop
 8018e40:	200024cc 	.word	0x200024cc

08018e44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b088      	sub	sp, #32
 8018e48:	af02      	add	r7, sp, #8
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e4e:	4b22      	ldr	r3, [pc, #136]	; (8018ed8 <prvProcessExpiredTimer+0x94>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	68db      	ldr	r3, [r3, #12]
 8018e54:	68db      	ldr	r3, [r3, #12]
 8018e56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	3304      	adds	r3, #4
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7fe f84d 	bl	8016efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018e62:	697b      	ldr	r3, [r7, #20]
 8018e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e68:	f003 0304 	and.w	r3, r3, #4
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d022      	beq.n	8018eb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	699a      	ldr	r2, [r3, #24]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	18d1      	adds	r1, r2, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	683a      	ldr	r2, [r7, #0]
 8018e7c:	6978      	ldr	r0, [r7, #20]
 8018e7e:	f000 f8d1 	bl	8019024 <prvInsertTimerInActiveList>
 8018e82:	4603      	mov	r3, r0
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d01f      	beq.n	8018ec8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e88:	2300      	movs	r3, #0
 8018e8a:	9300      	str	r3, [sp, #0]
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	687a      	ldr	r2, [r7, #4]
 8018e90:	2100      	movs	r1, #0
 8018e92:	6978      	ldr	r0, [r7, #20]
 8018e94:	f7ff ff88 	bl	8018da8 <xTimerGenericCommand>
 8018e98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018e9a:	693b      	ldr	r3, [r7, #16]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d113      	bne.n	8018ec8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea4:	f383 8811 	msr	BASEPRI, r3
 8018ea8:	f3bf 8f6f 	isb	sy
 8018eac:	f3bf 8f4f 	dsb	sy
 8018eb0:	60fb      	str	r3, [r7, #12]
}
 8018eb2:	bf00      	nop
 8018eb4:	e7fe      	b.n	8018eb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018eb6:	697b      	ldr	r3, [r7, #20]
 8018eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ebc:	f023 0301 	bic.w	r3, r3, #1
 8018ec0:	b2da      	uxtb	r2, r3
 8018ec2:	697b      	ldr	r3, [r7, #20]
 8018ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	6a1b      	ldr	r3, [r3, #32]
 8018ecc:	6978      	ldr	r0, [r7, #20]
 8018ece:	4798      	blx	r3
}
 8018ed0:	bf00      	nop
 8018ed2:	3718      	adds	r7, #24
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}
 8018ed8:	200024c4 	.word	0x200024c4

08018edc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b084      	sub	sp, #16
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018ee4:	f107 0308 	add.w	r3, r7, #8
 8018ee8:	4618      	mov	r0, r3
 8018eea:	f000 f857 	bl	8018f9c <prvGetNextExpireTime>
 8018eee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018ef0:	68bb      	ldr	r3, [r7, #8]
 8018ef2:	4619      	mov	r1, r3
 8018ef4:	68f8      	ldr	r0, [r7, #12]
 8018ef6:	f000 f803 	bl	8018f00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018efa:	f000 f8d5 	bl	80190a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018efe:	e7f1      	b.n	8018ee4 <prvTimerTask+0x8>

08018f00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b084      	sub	sp, #16
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
 8018f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018f0a:	f7ff f9c5 	bl	8018298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018f0e:	f107 0308 	add.w	r3, r7, #8
 8018f12:	4618      	mov	r0, r3
 8018f14:	f000 f866 	bl	8018fe4 <prvSampleTimeNow>
 8018f18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d130      	bne.n	8018f82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018f20:	683b      	ldr	r3, [r7, #0]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d10a      	bne.n	8018f3c <prvProcessTimerOrBlockTask+0x3c>
 8018f26:	687a      	ldr	r2, [r7, #4]
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	429a      	cmp	r2, r3
 8018f2c:	d806      	bhi.n	8018f3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018f2e:	f7ff f9c1 	bl	80182b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018f32:	68f9      	ldr	r1, [r7, #12]
 8018f34:	6878      	ldr	r0, [r7, #4]
 8018f36:	f7ff ff85 	bl	8018e44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018f3a:	e024      	b.n	8018f86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018f3c:	683b      	ldr	r3, [r7, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d008      	beq.n	8018f54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018f42:	4b13      	ldr	r3, [pc, #76]	; (8018f90 <prvProcessTimerOrBlockTask+0x90>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d101      	bne.n	8018f50 <prvProcessTimerOrBlockTask+0x50>
 8018f4c:	2301      	movs	r3, #1
 8018f4e:	e000      	b.n	8018f52 <prvProcessTimerOrBlockTask+0x52>
 8018f50:	2300      	movs	r3, #0
 8018f52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018f54:	4b0f      	ldr	r3, [pc, #60]	; (8018f94 <prvProcessTimerOrBlockTask+0x94>)
 8018f56:	6818      	ldr	r0, [r3, #0]
 8018f58:	687a      	ldr	r2, [r7, #4]
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	1ad3      	subs	r3, r2, r3
 8018f5e:	683a      	ldr	r2, [r7, #0]
 8018f60:	4619      	mov	r1, r3
 8018f62:	f7fe fe55 	bl	8017c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018f66:	f7ff f9a5 	bl	80182b4 <xTaskResumeAll>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d10a      	bne.n	8018f86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018f70:	4b09      	ldr	r3, [pc, #36]	; (8018f98 <prvProcessTimerOrBlockTask+0x98>)
 8018f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f76:	601a      	str	r2, [r3, #0]
 8018f78:	f3bf 8f4f 	dsb	sy
 8018f7c:	f3bf 8f6f 	isb	sy
}
 8018f80:	e001      	b.n	8018f86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018f82:	f7ff f997 	bl	80182b4 <xTaskResumeAll>
}
 8018f86:	bf00      	nop
 8018f88:	3710      	adds	r7, #16
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	200024c8 	.word	0x200024c8
 8018f94:	200024cc 	.word	0x200024cc
 8018f98:	e000ed04 	.word	0xe000ed04

08018f9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018f9c:	b480      	push	{r7}
 8018f9e:	b085      	sub	sp, #20
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018fa4:	4b0e      	ldr	r3, [pc, #56]	; (8018fe0 <prvGetNextExpireTime+0x44>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d101      	bne.n	8018fb2 <prvGetNextExpireTime+0x16>
 8018fae:	2201      	movs	r2, #1
 8018fb0:	e000      	b.n	8018fb4 <prvGetNextExpireTime+0x18>
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d105      	bne.n	8018fcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018fc0:	4b07      	ldr	r3, [pc, #28]	; (8018fe0 <prvGetNextExpireTime+0x44>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	68db      	ldr	r3, [r3, #12]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	60fb      	str	r3, [r7, #12]
 8018fca:	e001      	b.n	8018fd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018fd0:	68fb      	ldr	r3, [r7, #12]
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3714      	adds	r7, #20
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fdc:	4770      	bx	lr
 8018fde:	bf00      	nop
 8018fe0:	200024c4 	.word	0x200024c4

08018fe4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b084      	sub	sp, #16
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018fec:	f7ff fa04 	bl	80183f8 <xTaskGetTickCount>
 8018ff0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018ff2:	4b0b      	ldr	r3, [pc, #44]	; (8019020 <prvSampleTimeNow+0x3c>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	68fa      	ldr	r2, [r7, #12]
 8018ff8:	429a      	cmp	r2, r3
 8018ffa:	d205      	bcs.n	8019008 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018ffc:	f000 f936 	bl	801926c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2201      	movs	r2, #1
 8019004:	601a      	str	r2, [r3, #0]
 8019006:	e002      	b.n	801900e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2200      	movs	r2, #0
 801900c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801900e:	4a04      	ldr	r2, [pc, #16]	; (8019020 <prvSampleTimeNow+0x3c>)
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019014:	68fb      	ldr	r3, [r7, #12]
}
 8019016:	4618      	mov	r0, r3
 8019018:	3710      	adds	r7, #16
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	200024d4 	.word	0x200024d4

08019024 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b086      	sub	sp, #24
 8019028:	af00      	add	r7, sp, #0
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	607a      	str	r2, [r7, #4]
 8019030:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019032:	2300      	movs	r3, #0
 8019034:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	68ba      	ldr	r2, [r7, #8]
 801903a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	68fa      	ldr	r2, [r7, #12]
 8019040:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019042:	68ba      	ldr	r2, [r7, #8]
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	429a      	cmp	r2, r3
 8019048:	d812      	bhi.n	8019070 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801904a:	687a      	ldr	r2, [r7, #4]
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	1ad2      	subs	r2, r2, r3
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	699b      	ldr	r3, [r3, #24]
 8019054:	429a      	cmp	r2, r3
 8019056:	d302      	bcc.n	801905e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019058:	2301      	movs	r3, #1
 801905a:	617b      	str	r3, [r7, #20]
 801905c:	e01b      	b.n	8019096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801905e:	4b10      	ldr	r3, [pc, #64]	; (80190a0 <prvInsertTimerInActiveList+0x7c>)
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	3304      	adds	r3, #4
 8019066:	4619      	mov	r1, r3
 8019068:	4610      	mov	r0, r2
 801906a:	f7fd ff0e 	bl	8016e8a <vListInsert>
 801906e:	e012      	b.n	8019096 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019070:	687a      	ldr	r2, [r7, #4]
 8019072:	683b      	ldr	r3, [r7, #0]
 8019074:	429a      	cmp	r2, r3
 8019076:	d206      	bcs.n	8019086 <prvInsertTimerInActiveList+0x62>
 8019078:	68ba      	ldr	r2, [r7, #8]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	429a      	cmp	r2, r3
 801907e:	d302      	bcc.n	8019086 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019080:	2301      	movs	r3, #1
 8019082:	617b      	str	r3, [r7, #20]
 8019084:	e007      	b.n	8019096 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019086:	4b07      	ldr	r3, [pc, #28]	; (80190a4 <prvInsertTimerInActiveList+0x80>)
 8019088:	681a      	ldr	r2, [r3, #0]
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	3304      	adds	r3, #4
 801908e:	4619      	mov	r1, r3
 8019090:	4610      	mov	r0, r2
 8019092:	f7fd fefa 	bl	8016e8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019096:	697b      	ldr	r3, [r7, #20]
}
 8019098:	4618      	mov	r0, r3
 801909a:	3718      	adds	r7, #24
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}
 80190a0:	200024c8 	.word	0x200024c8
 80190a4:	200024c4 	.word	0x200024c4

080190a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b08e      	sub	sp, #56	; 0x38
 80190ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80190ae:	e0ca      	b.n	8019246 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	da18      	bge.n	80190e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80190b6:	1d3b      	adds	r3, r7, #4
 80190b8:	3304      	adds	r3, #4
 80190ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80190bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d10a      	bne.n	80190d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80190c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c6:	f383 8811 	msr	BASEPRI, r3
 80190ca:	f3bf 8f6f 	isb	sy
 80190ce:	f3bf 8f4f 	dsb	sy
 80190d2:	61fb      	str	r3, [r7, #28]
}
 80190d4:	bf00      	nop
 80190d6:	e7fe      	b.n	80190d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80190d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190de:	6850      	ldr	r0, [r2, #4]
 80190e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190e2:	6892      	ldr	r2, [r2, #8]
 80190e4:	4611      	mov	r1, r2
 80190e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	f2c0 80aa 	blt.w	8019244 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80190f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f6:	695b      	ldr	r3, [r3, #20]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d004      	beq.n	8019106 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fe:	3304      	adds	r3, #4
 8019100:	4618      	mov	r0, r3
 8019102:	f7fd fefb 	bl	8016efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019106:	463b      	mov	r3, r7
 8019108:	4618      	mov	r0, r3
 801910a:	f7ff ff6b 	bl	8018fe4 <prvSampleTimeNow>
 801910e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	2b09      	cmp	r3, #9
 8019114:	f200 8097 	bhi.w	8019246 <prvProcessReceivedCommands+0x19e>
 8019118:	a201      	add	r2, pc, #4	; (adr r2, 8019120 <prvProcessReceivedCommands+0x78>)
 801911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801911e:	bf00      	nop
 8019120:	08019149 	.word	0x08019149
 8019124:	08019149 	.word	0x08019149
 8019128:	08019149 	.word	0x08019149
 801912c:	080191bd 	.word	0x080191bd
 8019130:	080191d1 	.word	0x080191d1
 8019134:	0801921b 	.word	0x0801921b
 8019138:	08019149 	.word	0x08019149
 801913c:	08019149 	.word	0x08019149
 8019140:	080191bd 	.word	0x080191bd
 8019144:	080191d1 	.word	0x080191d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801914e:	f043 0301 	orr.w	r3, r3, #1
 8019152:	b2da      	uxtb	r2, r3
 8019154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801915a:	68ba      	ldr	r2, [r7, #8]
 801915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915e:	699b      	ldr	r3, [r3, #24]
 8019160:	18d1      	adds	r1, r2, r3
 8019162:	68bb      	ldr	r3, [r7, #8]
 8019164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019168:	f7ff ff5c 	bl	8019024 <prvInsertTimerInActiveList>
 801916c:	4603      	mov	r3, r0
 801916e:	2b00      	cmp	r3, #0
 8019170:	d069      	beq.n	8019246 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019174:	6a1b      	ldr	r3, [r3, #32]
 8019176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019178:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019180:	f003 0304 	and.w	r3, r3, #4
 8019184:	2b00      	cmp	r3, #0
 8019186:	d05e      	beq.n	8019246 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019188:	68ba      	ldr	r2, [r7, #8]
 801918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801918c:	699b      	ldr	r3, [r3, #24]
 801918e:	441a      	add	r2, r3
 8019190:	2300      	movs	r3, #0
 8019192:	9300      	str	r3, [sp, #0]
 8019194:	2300      	movs	r3, #0
 8019196:	2100      	movs	r1, #0
 8019198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801919a:	f7ff fe05 	bl	8018da8 <xTimerGenericCommand>
 801919e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80191a0:	6a3b      	ldr	r3, [r7, #32]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d14f      	bne.n	8019246 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80191a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191aa:	f383 8811 	msr	BASEPRI, r3
 80191ae:	f3bf 8f6f 	isb	sy
 80191b2:	f3bf 8f4f 	dsb	sy
 80191b6:	61bb      	str	r3, [r7, #24]
}
 80191b8:	bf00      	nop
 80191ba:	e7fe      	b.n	80191ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80191bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191c2:	f023 0301 	bic.w	r3, r3, #1
 80191c6:	b2da      	uxtb	r2, r3
 80191c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80191ce:	e03a      	b.n	8019246 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80191d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191d6:	f043 0301 	orr.w	r3, r3, #1
 80191da:	b2da      	uxtb	r2, r3
 80191dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80191e2:	68ba      	ldr	r2, [r7, #8]
 80191e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80191e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ea:	699b      	ldr	r3, [r3, #24]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d10a      	bne.n	8019206 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80191f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191f4:	f383 8811 	msr	BASEPRI, r3
 80191f8:	f3bf 8f6f 	isb	sy
 80191fc:	f3bf 8f4f 	dsb	sy
 8019200:	617b      	str	r3, [r7, #20]
}
 8019202:	bf00      	nop
 8019204:	e7fe      	b.n	8019204 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019208:	699a      	ldr	r2, [r3, #24]
 801920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801920c:	18d1      	adds	r1, r2, r3
 801920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019214:	f7ff ff06 	bl	8019024 <prvInsertTimerInActiveList>
					break;
 8019218:	e015      	b.n	8019246 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801921c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019220:	f003 0302 	and.w	r3, r3, #2
 8019224:	2b00      	cmp	r3, #0
 8019226:	d103      	bne.n	8019230 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801922a:	f000 fbe1 	bl	80199f0 <vPortFree>
 801922e:	e00a      	b.n	8019246 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019236:	f023 0301 	bic.w	r3, r3, #1
 801923a:	b2da      	uxtb	r2, r3
 801923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019242:	e000      	b.n	8019246 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019244:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019246:	4b08      	ldr	r3, [pc, #32]	; (8019268 <prvProcessReceivedCommands+0x1c0>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	1d39      	adds	r1, r7, #4
 801924c:	2200      	movs	r2, #0
 801924e:	4618      	mov	r0, r3
 8019250:	f7fe f998 	bl	8017584 <xQueueReceive>
 8019254:	4603      	mov	r3, r0
 8019256:	2b00      	cmp	r3, #0
 8019258:	f47f af2a 	bne.w	80190b0 <prvProcessReceivedCommands+0x8>
	}
}
 801925c:	bf00      	nop
 801925e:	bf00      	nop
 8019260:	3730      	adds	r7, #48	; 0x30
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
 8019266:	bf00      	nop
 8019268:	200024cc 	.word	0x200024cc

0801926c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b088      	sub	sp, #32
 8019270:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019272:	e048      	b.n	8019306 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019274:	4b2d      	ldr	r3, [pc, #180]	; (801932c <prvSwitchTimerLists+0xc0>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	68db      	ldr	r3, [r3, #12]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801927e:	4b2b      	ldr	r3, [pc, #172]	; (801932c <prvSwitchTimerLists+0xc0>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	68db      	ldr	r3, [r3, #12]
 8019284:	68db      	ldr	r3, [r3, #12]
 8019286:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	3304      	adds	r3, #4
 801928c:	4618      	mov	r0, r3
 801928e:	f7fd fe35 	bl	8016efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	6a1b      	ldr	r3, [r3, #32]
 8019296:	68f8      	ldr	r0, [r7, #12]
 8019298:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80192a0:	f003 0304 	and.w	r3, r3, #4
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d02e      	beq.n	8019306 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	699b      	ldr	r3, [r3, #24]
 80192ac:	693a      	ldr	r2, [r7, #16]
 80192ae:	4413      	add	r3, r2
 80192b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80192b2:	68ba      	ldr	r2, [r7, #8]
 80192b4:	693b      	ldr	r3, [r7, #16]
 80192b6:	429a      	cmp	r2, r3
 80192b8:	d90e      	bls.n	80192d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	68ba      	ldr	r2, [r7, #8]
 80192be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	68fa      	ldr	r2, [r7, #12]
 80192c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80192c6:	4b19      	ldr	r3, [pc, #100]	; (801932c <prvSwitchTimerLists+0xc0>)
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	3304      	adds	r3, #4
 80192ce:	4619      	mov	r1, r3
 80192d0:	4610      	mov	r0, r2
 80192d2:	f7fd fdda 	bl	8016e8a <vListInsert>
 80192d6:	e016      	b.n	8019306 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80192d8:	2300      	movs	r3, #0
 80192da:	9300      	str	r3, [sp, #0]
 80192dc:	2300      	movs	r3, #0
 80192de:	693a      	ldr	r2, [r7, #16]
 80192e0:	2100      	movs	r1, #0
 80192e2:	68f8      	ldr	r0, [r7, #12]
 80192e4:	f7ff fd60 	bl	8018da8 <xTimerGenericCommand>
 80192e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d10a      	bne.n	8019306 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80192f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192f4:	f383 8811 	msr	BASEPRI, r3
 80192f8:	f3bf 8f6f 	isb	sy
 80192fc:	f3bf 8f4f 	dsb	sy
 8019300:	603b      	str	r3, [r7, #0]
}
 8019302:	bf00      	nop
 8019304:	e7fe      	b.n	8019304 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019306:	4b09      	ldr	r3, [pc, #36]	; (801932c <prvSwitchTimerLists+0xc0>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d1b1      	bne.n	8019274 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019310:	4b06      	ldr	r3, [pc, #24]	; (801932c <prvSwitchTimerLists+0xc0>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019316:	4b06      	ldr	r3, [pc, #24]	; (8019330 <prvSwitchTimerLists+0xc4>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4a04      	ldr	r2, [pc, #16]	; (801932c <prvSwitchTimerLists+0xc0>)
 801931c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801931e:	4a04      	ldr	r2, [pc, #16]	; (8019330 <prvSwitchTimerLists+0xc4>)
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	6013      	str	r3, [r2, #0]
}
 8019324:	bf00      	nop
 8019326:	3718      	adds	r7, #24
 8019328:	46bd      	mov	sp, r7
 801932a:	bd80      	pop	{r7, pc}
 801932c:	200024c4 	.word	0x200024c4
 8019330:	200024c8 	.word	0x200024c8

08019334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b082      	sub	sp, #8
 8019338:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801933a:	f000 f96b 	bl	8019614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801933e:	4b15      	ldr	r3, [pc, #84]	; (8019394 <prvCheckForValidListAndQueue+0x60>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d120      	bne.n	8019388 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019346:	4814      	ldr	r0, [pc, #80]	; (8019398 <prvCheckForValidListAndQueue+0x64>)
 8019348:	f7fd fd4e 	bl	8016de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801934c:	4813      	ldr	r0, [pc, #76]	; (801939c <prvCheckForValidListAndQueue+0x68>)
 801934e:	f7fd fd4b 	bl	8016de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019352:	4b13      	ldr	r3, [pc, #76]	; (80193a0 <prvCheckForValidListAndQueue+0x6c>)
 8019354:	4a10      	ldr	r2, [pc, #64]	; (8019398 <prvCheckForValidListAndQueue+0x64>)
 8019356:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019358:	4b12      	ldr	r3, [pc, #72]	; (80193a4 <prvCheckForValidListAndQueue+0x70>)
 801935a:	4a10      	ldr	r2, [pc, #64]	; (801939c <prvCheckForValidListAndQueue+0x68>)
 801935c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801935e:	2300      	movs	r3, #0
 8019360:	9300      	str	r3, [sp, #0]
 8019362:	4b11      	ldr	r3, [pc, #68]	; (80193a8 <prvCheckForValidListAndQueue+0x74>)
 8019364:	4a11      	ldr	r2, [pc, #68]	; (80193ac <prvCheckForValidListAndQueue+0x78>)
 8019366:	2110      	movs	r1, #16
 8019368:	200a      	movs	r0, #10
 801936a:	f7fd fe59 	bl	8017020 <xQueueGenericCreateStatic>
 801936e:	4603      	mov	r3, r0
 8019370:	4a08      	ldr	r2, [pc, #32]	; (8019394 <prvCheckForValidListAndQueue+0x60>)
 8019372:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019374:	4b07      	ldr	r3, [pc, #28]	; (8019394 <prvCheckForValidListAndQueue+0x60>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d005      	beq.n	8019388 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801937c:	4b05      	ldr	r3, [pc, #20]	; (8019394 <prvCheckForValidListAndQueue+0x60>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	490b      	ldr	r1, [pc, #44]	; (80193b0 <prvCheckForValidListAndQueue+0x7c>)
 8019382:	4618      	mov	r0, r3
 8019384:	f7fe fc12 	bl	8017bac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019388:	f000 f974 	bl	8019674 <vPortExitCritical>
}
 801938c:	bf00      	nop
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}
 8019392:	bf00      	nop
 8019394:	200024cc 	.word	0x200024cc
 8019398:	2000249c 	.word	0x2000249c
 801939c:	200024b0 	.word	0x200024b0
 80193a0:	200024c4 	.word	0x200024c4
 80193a4:	200024c8 	.word	0x200024c8
 80193a8:	20002578 	.word	0x20002578
 80193ac:	200024d8 	.word	0x200024d8
 80193b0:	0801c1ac 	.word	0x0801c1ac

080193b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80193b4:	b480      	push	{r7}
 80193b6:	b085      	sub	sp, #20
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	3b04      	subs	r3, #4
 80193c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80193cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	3b04      	subs	r3, #4
 80193d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80193d4:	68bb      	ldr	r3, [r7, #8]
 80193d6:	f023 0201 	bic.w	r2, r3, #1
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	3b04      	subs	r3, #4
 80193e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80193e4:	4a0c      	ldr	r2, [pc, #48]	; (8019418 <pxPortInitialiseStack+0x64>)
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	3b14      	subs	r3, #20
 80193ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80193f0:	687a      	ldr	r2, [r7, #4]
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	3b04      	subs	r3, #4
 80193fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	f06f 0202 	mvn.w	r2, #2
 8019402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	3b20      	subs	r3, #32
 8019408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801940a:	68fb      	ldr	r3, [r7, #12]
}
 801940c:	4618      	mov	r0, r3
 801940e:	3714      	adds	r7, #20
 8019410:	46bd      	mov	sp, r7
 8019412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019416:	4770      	bx	lr
 8019418:	0801941d 	.word	0x0801941d

0801941c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801941c:	b480      	push	{r7}
 801941e:	b085      	sub	sp, #20
 8019420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019422:	2300      	movs	r3, #0
 8019424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019426:	4b12      	ldr	r3, [pc, #72]	; (8019470 <prvTaskExitError+0x54>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801942e:	d00a      	beq.n	8019446 <prvTaskExitError+0x2a>
	__asm volatile
 8019430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019434:	f383 8811 	msr	BASEPRI, r3
 8019438:	f3bf 8f6f 	isb	sy
 801943c:	f3bf 8f4f 	dsb	sy
 8019440:	60fb      	str	r3, [r7, #12]
}
 8019442:	bf00      	nop
 8019444:	e7fe      	b.n	8019444 <prvTaskExitError+0x28>
	__asm volatile
 8019446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801944a:	f383 8811 	msr	BASEPRI, r3
 801944e:	f3bf 8f6f 	isb	sy
 8019452:	f3bf 8f4f 	dsb	sy
 8019456:	60bb      	str	r3, [r7, #8]
}
 8019458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801945a:	bf00      	nop
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d0fc      	beq.n	801945c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019462:	bf00      	nop
 8019464:	bf00      	nop
 8019466:	3714      	adds	r7, #20
 8019468:	46bd      	mov	sp, r7
 801946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946e:	4770      	bx	lr
 8019470:	20001440 	.word	0x20001440
	...

08019480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019480:	4b07      	ldr	r3, [pc, #28]	; (80194a0 <pxCurrentTCBConst2>)
 8019482:	6819      	ldr	r1, [r3, #0]
 8019484:	6808      	ldr	r0, [r1, #0]
 8019486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801948a:	f380 8809 	msr	PSP, r0
 801948e:	f3bf 8f6f 	isb	sy
 8019492:	f04f 0000 	mov.w	r0, #0
 8019496:	f380 8811 	msr	BASEPRI, r0
 801949a:	4770      	bx	lr
 801949c:	f3af 8000 	nop.w

080194a0 <pxCurrentTCBConst2>:
 80194a0:	20001f9c 	.word	0x20001f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80194a4:	bf00      	nop
 80194a6:	bf00      	nop

080194a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80194a8:	4808      	ldr	r0, [pc, #32]	; (80194cc <prvPortStartFirstTask+0x24>)
 80194aa:	6800      	ldr	r0, [r0, #0]
 80194ac:	6800      	ldr	r0, [r0, #0]
 80194ae:	f380 8808 	msr	MSP, r0
 80194b2:	f04f 0000 	mov.w	r0, #0
 80194b6:	f380 8814 	msr	CONTROL, r0
 80194ba:	b662      	cpsie	i
 80194bc:	b661      	cpsie	f
 80194be:	f3bf 8f4f 	dsb	sy
 80194c2:	f3bf 8f6f 	isb	sy
 80194c6:	df00      	svc	0
 80194c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80194ca:	bf00      	nop
 80194cc:	e000ed08 	.word	0xe000ed08

080194d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b086      	sub	sp, #24
 80194d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80194d6:	4b46      	ldr	r3, [pc, #280]	; (80195f0 <xPortStartScheduler+0x120>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a46      	ldr	r2, [pc, #280]	; (80195f4 <xPortStartScheduler+0x124>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d10a      	bne.n	80194f6 <xPortStartScheduler+0x26>
	__asm volatile
 80194e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194e4:	f383 8811 	msr	BASEPRI, r3
 80194e8:	f3bf 8f6f 	isb	sy
 80194ec:	f3bf 8f4f 	dsb	sy
 80194f0:	613b      	str	r3, [r7, #16]
}
 80194f2:	bf00      	nop
 80194f4:	e7fe      	b.n	80194f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80194f6:	4b3e      	ldr	r3, [pc, #248]	; (80195f0 <xPortStartScheduler+0x120>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4a3f      	ldr	r2, [pc, #252]	; (80195f8 <xPortStartScheduler+0x128>)
 80194fc:	4293      	cmp	r3, r2
 80194fe:	d10a      	bne.n	8019516 <xPortStartScheduler+0x46>
	__asm volatile
 8019500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019504:	f383 8811 	msr	BASEPRI, r3
 8019508:	f3bf 8f6f 	isb	sy
 801950c:	f3bf 8f4f 	dsb	sy
 8019510:	60fb      	str	r3, [r7, #12]
}
 8019512:	bf00      	nop
 8019514:	e7fe      	b.n	8019514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019516:	4b39      	ldr	r3, [pc, #228]	; (80195fc <xPortStartScheduler+0x12c>)
 8019518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	b2db      	uxtb	r3, r3
 8019520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019522:	697b      	ldr	r3, [r7, #20]
 8019524:	22ff      	movs	r2, #255	; 0xff
 8019526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	b2db      	uxtb	r3, r3
 801952e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019530:	78fb      	ldrb	r3, [r7, #3]
 8019532:	b2db      	uxtb	r3, r3
 8019534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019538:	b2da      	uxtb	r2, r3
 801953a:	4b31      	ldr	r3, [pc, #196]	; (8019600 <xPortStartScheduler+0x130>)
 801953c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801953e:	4b31      	ldr	r3, [pc, #196]	; (8019604 <xPortStartScheduler+0x134>)
 8019540:	2207      	movs	r2, #7
 8019542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019544:	e009      	b.n	801955a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019546:	4b2f      	ldr	r3, [pc, #188]	; (8019604 <xPortStartScheduler+0x134>)
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	3b01      	subs	r3, #1
 801954c:	4a2d      	ldr	r2, [pc, #180]	; (8019604 <xPortStartScheduler+0x134>)
 801954e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019550:	78fb      	ldrb	r3, [r7, #3]
 8019552:	b2db      	uxtb	r3, r3
 8019554:	005b      	lsls	r3, r3, #1
 8019556:	b2db      	uxtb	r3, r3
 8019558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801955a:	78fb      	ldrb	r3, [r7, #3]
 801955c:	b2db      	uxtb	r3, r3
 801955e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019562:	2b80      	cmp	r3, #128	; 0x80
 8019564:	d0ef      	beq.n	8019546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019566:	4b27      	ldr	r3, [pc, #156]	; (8019604 <xPortStartScheduler+0x134>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	f1c3 0307 	rsb	r3, r3, #7
 801956e:	2b04      	cmp	r3, #4
 8019570:	d00a      	beq.n	8019588 <xPortStartScheduler+0xb8>
	__asm volatile
 8019572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019576:	f383 8811 	msr	BASEPRI, r3
 801957a:	f3bf 8f6f 	isb	sy
 801957e:	f3bf 8f4f 	dsb	sy
 8019582:	60bb      	str	r3, [r7, #8]
}
 8019584:	bf00      	nop
 8019586:	e7fe      	b.n	8019586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019588:	4b1e      	ldr	r3, [pc, #120]	; (8019604 <xPortStartScheduler+0x134>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	021b      	lsls	r3, r3, #8
 801958e:	4a1d      	ldr	r2, [pc, #116]	; (8019604 <xPortStartScheduler+0x134>)
 8019590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019592:	4b1c      	ldr	r3, [pc, #112]	; (8019604 <xPortStartScheduler+0x134>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801959a:	4a1a      	ldr	r2, [pc, #104]	; (8019604 <xPortStartScheduler+0x134>)
 801959c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	b2da      	uxtb	r2, r3
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80195a6:	4b18      	ldr	r3, [pc, #96]	; (8019608 <xPortStartScheduler+0x138>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	4a17      	ldr	r2, [pc, #92]	; (8019608 <xPortStartScheduler+0x138>)
 80195ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80195b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80195b2:	4b15      	ldr	r3, [pc, #84]	; (8019608 <xPortStartScheduler+0x138>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	4a14      	ldr	r2, [pc, #80]	; (8019608 <xPortStartScheduler+0x138>)
 80195b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80195bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80195be:	f000 f8dd 	bl	801977c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80195c2:	4b12      	ldr	r3, [pc, #72]	; (801960c <xPortStartScheduler+0x13c>)
 80195c4:	2200      	movs	r2, #0
 80195c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80195c8:	f000 f8fc 	bl	80197c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80195cc:	4b10      	ldr	r3, [pc, #64]	; (8019610 <xPortStartScheduler+0x140>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	4a0f      	ldr	r2, [pc, #60]	; (8019610 <xPortStartScheduler+0x140>)
 80195d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80195d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80195d8:	f7ff ff66 	bl	80194a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80195dc:	f7fe ffec 	bl	80185b8 <vTaskSwitchContext>
	prvTaskExitError();
 80195e0:	f7ff ff1c 	bl	801941c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80195e4:	2300      	movs	r3, #0
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	3718      	adds	r7, #24
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	bf00      	nop
 80195f0:	e000ed00 	.word	0xe000ed00
 80195f4:	410fc271 	.word	0x410fc271
 80195f8:	410fc270 	.word	0x410fc270
 80195fc:	e000e400 	.word	0xe000e400
 8019600:	200025c8 	.word	0x200025c8
 8019604:	200025cc 	.word	0x200025cc
 8019608:	e000ed20 	.word	0xe000ed20
 801960c:	20001440 	.word	0x20001440
 8019610:	e000ef34 	.word	0xe000ef34

08019614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019614:	b480      	push	{r7}
 8019616:	b083      	sub	sp, #12
 8019618:	af00      	add	r7, sp, #0
	__asm volatile
 801961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801961e:	f383 8811 	msr	BASEPRI, r3
 8019622:	f3bf 8f6f 	isb	sy
 8019626:	f3bf 8f4f 	dsb	sy
 801962a:	607b      	str	r3, [r7, #4]
}
 801962c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801962e:	4b0f      	ldr	r3, [pc, #60]	; (801966c <vPortEnterCritical+0x58>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	3301      	adds	r3, #1
 8019634:	4a0d      	ldr	r2, [pc, #52]	; (801966c <vPortEnterCritical+0x58>)
 8019636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019638:	4b0c      	ldr	r3, [pc, #48]	; (801966c <vPortEnterCritical+0x58>)
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	2b01      	cmp	r3, #1
 801963e:	d10f      	bne.n	8019660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019640:	4b0b      	ldr	r3, [pc, #44]	; (8019670 <vPortEnterCritical+0x5c>)
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	b2db      	uxtb	r3, r3
 8019646:	2b00      	cmp	r3, #0
 8019648:	d00a      	beq.n	8019660 <vPortEnterCritical+0x4c>
	__asm volatile
 801964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801964e:	f383 8811 	msr	BASEPRI, r3
 8019652:	f3bf 8f6f 	isb	sy
 8019656:	f3bf 8f4f 	dsb	sy
 801965a:	603b      	str	r3, [r7, #0]
}
 801965c:	bf00      	nop
 801965e:	e7fe      	b.n	801965e <vPortEnterCritical+0x4a>
	}
}
 8019660:	bf00      	nop
 8019662:	370c      	adds	r7, #12
 8019664:	46bd      	mov	sp, r7
 8019666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966a:	4770      	bx	lr
 801966c:	20001440 	.word	0x20001440
 8019670:	e000ed04 	.word	0xe000ed04

08019674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019674:	b480      	push	{r7}
 8019676:	b083      	sub	sp, #12
 8019678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801967a:	4b12      	ldr	r3, [pc, #72]	; (80196c4 <vPortExitCritical+0x50>)
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d10a      	bne.n	8019698 <vPortExitCritical+0x24>
	__asm volatile
 8019682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019686:	f383 8811 	msr	BASEPRI, r3
 801968a:	f3bf 8f6f 	isb	sy
 801968e:	f3bf 8f4f 	dsb	sy
 8019692:	607b      	str	r3, [r7, #4]
}
 8019694:	bf00      	nop
 8019696:	e7fe      	b.n	8019696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019698:	4b0a      	ldr	r3, [pc, #40]	; (80196c4 <vPortExitCritical+0x50>)
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	3b01      	subs	r3, #1
 801969e:	4a09      	ldr	r2, [pc, #36]	; (80196c4 <vPortExitCritical+0x50>)
 80196a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80196a2:	4b08      	ldr	r3, [pc, #32]	; (80196c4 <vPortExitCritical+0x50>)
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d105      	bne.n	80196b6 <vPortExitCritical+0x42>
 80196aa:	2300      	movs	r3, #0
 80196ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	f383 8811 	msr	BASEPRI, r3
}
 80196b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80196b6:	bf00      	nop
 80196b8:	370c      	adds	r7, #12
 80196ba:	46bd      	mov	sp, r7
 80196bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c0:	4770      	bx	lr
 80196c2:	bf00      	nop
 80196c4:	20001440 	.word	0x20001440
	...

080196d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80196d0:	f3ef 8009 	mrs	r0, PSP
 80196d4:	f3bf 8f6f 	isb	sy
 80196d8:	4b15      	ldr	r3, [pc, #84]	; (8019730 <pxCurrentTCBConst>)
 80196da:	681a      	ldr	r2, [r3, #0]
 80196dc:	f01e 0f10 	tst.w	lr, #16
 80196e0:	bf08      	it	eq
 80196e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80196e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ea:	6010      	str	r0, [r2, #0]
 80196ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80196f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80196f4:	f380 8811 	msr	BASEPRI, r0
 80196f8:	f3bf 8f4f 	dsb	sy
 80196fc:	f3bf 8f6f 	isb	sy
 8019700:	f7fe ff5a 	bl	80185b8 <vTaskSwitchContext>
 8019704:	f04f 0000 	mov.w	r0, #0
 8019708:	f380 8811 	msr	BASEPRI, r0
 801970c:	bc09      	pop	{r0, r3}
 801970e:	6819      	ldr	r1, [r3, #0]
 8019710:	6808      	ldr	r0, [r1, #0]
 8019712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019716:	f01e 0f10 	tst.w	lr, #16
 801971a:	bf08      	it	eq
 801971c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019720:	f380 8809 	msr	PSP, r0
 8019724:	f3bf 8f6f 	isb	sy
 8019728:	4770      	bx	lr
 801972a:	bf00      	nop
 801972c:	f3af 8000 	nop.w

08019730 <pxCurrentTCBConst>:
 8019730:	20001f9c 	.word	0x20001f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019734:	bf00      	nop
 8019736:	bf00      	nop

08019738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b082      	sub	sp, #8
 801973c:	af00      	add	r7, sp, #0
	__asm volatile
 801973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019742:	f383 8811 	msr	BASEPRI, r3
 8019746:	f3bf 8f6f 	isb	sy
 801974a:	f3bf 8f4f 	dsb	sy
 801974e:	607b      	str	r3, [r7, #4]
}
 8019750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019752:	f7fe fe73 	bl	801843c <xTaskIncrementTick>
 8019756:	4603      	mov	r3, r0
 8019758:	2b00      	cmp	r3, #0
 801975a:	d003      	beq.n	8019764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801975c:	4b06      	ldr	r3, [pc, #24]	; (8019778 <xPortSysTickHandler+0x40>)
 801975e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019762:	601a      	str	r2, [r3, #0]
 8019764:	2300      	movs	r3, #0
 8019766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	f383 8811 	msr	BASEPRI, r3
}
 801976e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019770:	bf00      	nop
 8019772:	3708      	adds	r7, #8
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}
 8019778:	e000ed04 	.word	0xe000ed04

0801977c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801977c:	b480      	push	{r7}
 801977e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019780:	4b0b      	ldr	r3, [pc, #44]	; (80197b0 <vPortSetupTimerInterrupt+0x34>)
 8019782:	2200      	movs	r2, #0
 8019784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019786:	4b0b      	ldr	r3, [pc, #44]	; (80197b4 <vPortSetupTimerInterrupt+0x38>)
 8019788:	2200      	movs	r2, #0
 801978a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801978c:	4b0a      	ldr	r3, [pc, #40]	; (80197b8 <vPortSetupTimerInterrupt+0x3c>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a0a      	ldr	r2, [pc, #40]	; (80197bc <vPortSetupTimerInterrupt+0x40>)
 8019792:	fba2 2303 	umull	r2, r3, r2, r3
 8019796:	099b      	lsrs	r3, r3, #6
 8019798:	4a09      	ldr	r2, [pc, #36]	; (80197c0 <vPortSetupTimerInterrupt+0x44>)
 801979a:	3b01      	subs	r3, #1
 801979c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801979e:	4b04      	ldr	r3, [pc, #16]	; (80197b0 <vPortSetupTimerInterrupt+0x34>)
 80197a0:	2207      	movs	r2, #7
 80197a2:	601a      	str	r2, [r3, #0]
}
 80197a4:	bf00      	nop
 80197a6:	46bd      	mov	sp, r7
 80197a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ac:	4770      	bx	lr
 80197ae:	bf00      	nop
 80197b0:	e000e010 	.word	0xe000e010
 80197b4:	e000e018 	.word	0xe000e018
 80197b8:	20000084 	.word	0x20000084
 80197bc:	10624dd3 	.word	0x10624dd3
 80197c0:	e000e014 	.word	0xe000e014

080197c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80197c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80197d4 <vPortEnableVFP+0x10>
 80197c8:	6801      	ldr	r1, [r0, #0]
 80197ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80197ce:	6001      	str	r1, [r0, #0]
 80197d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80197d2:	bf00      	nop
 80197d4:	e000ed88 	.word	0xe000ed88

080197d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80197d8:	b480      	push	{r7}
 80197da:	b085      	sub	sp, #20
 80197dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80197de:	f3ef 8305 	mrs	r3, IPSR
 80197e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	2b0f      	cmp	r3, #15
 80197e8:	d914      	bls.n	8019814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80197ea:	4a17      	ldr	r2, [pc, #92]	; (8019848 <vPortValidateInterruptPriority+0x70>)
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	4413      	add	r3, r2
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80197f4:	4b15      	ldr	r3, [pc, #84]	; (801984c <vPortValidateInterruptPriority+0x74>)
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	7afa      	ldrb	r2, [r7, #11]
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d20a      	bcs.n	8019814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80197fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019802:	f383 8811 	msr	BASEPRI, r3
 8019806:	f3bf 8f6f 	isb	sy
 801980a:	f3bf 8f4f 	dsb	sy
 801980e:	607b      	str	r3, [r7, #4]
}
 8019810:	bf00      	nop
 8019812:	e7fe      	b.n	8019812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019814:	4b0e      	ldr	r3, [pc, #56]	; (8019850 <vPortValidateInterruptPriority+0x78>)
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801981c:	4b0d      	ldr	r3, [pc, #52]	; (8019854 <vPortValidateInterruptPriority+0x7c>)
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	429a      	cmp	r2, r3
 8019822:	d90a      	bls.n	801983a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019828:	f383 8811 	msr	BASEPRI, r3
 801982c:	f3bf 8f6f 	isb	sy
 8019830:	f3bf 8f4f 	dsb	sy
 8019834:	603b      	str	r3, [r7, #0]
}
 8019836:	bf00      	nop
 8019838:	e7fe      	b.n	8019838 <vPortValidateInterruptPriority+0x60>
	}
 801983a:	bf00      	nop
 801983c:	3714      	adds	r7, #20
 801983e:	46bd      	mov	sp, r7
 8019840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019844:	4770      	bx	lr
 8019846:	bf00      	nop
 8019848:	e000e3f0 	.word	0xe000e3f0
 801984c:	200025c8 	.word	0x200025c8
 8019850:	e000ed0c 	.word	0xe000ed0c
 8019854:	200025cc 	.word	0x200025cc

08019858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b08a      	sub	sp, #40	; 0x28
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019860:	2300      	movs	r3, #0
 8019862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019864:	f7fe fd18 	bl	8018298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019868:	4b5b      	ldr	r3, [pc, #364]	; (80199d8 <pvPortMalloc+0x180>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d101      	bne.n	8019874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019870:	f000 f920 	bl	8019ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019874:	4b59      	ldr	r3, [pc, #356]	; (80199dc <pvPortMalloc+0x184>)
 8019876:	681a      	ldr	r2, [r3, #0]
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	4013      	ands	r3, r2
 801987c:	2b00      	cmp	r3, #0
 801987e:	f040 8093 	bne.w	80199a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d01d      	beq.n	80198c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019888:	2208      	movs	r2, #8
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	4413      	add	r3, r2
 801988e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	f003 0307 	and.w	r3, r3, #7
 8019896:	2b00      	cmp	r3, #0
 8019898:	d014      	beq.n	80198c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	f023 0307 	bic.w	r3, r3, #7
 80198a0:	3308      	adds	r3, #8
 80198a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	f003 0307 	and.w	r3, r3, #7
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d00a      	beq.n	80198c4 <pvPortMalloc+0x6c>
	__asm volatile
 80198ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198b2:	f383 8811 	msr	BASEPRI, r3
 80198b6:	f3bf 8f6f 	isb	sy
 80198ba:	f3bf 8f4f 	dsb	sy
 80198be:	617b      	str	r3, [r7, #20]
}
 80198c0:	bf00      	nop
 80198c2:	e7fe      	b.n	80198c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d06e      	beq.n	80199a8 <pvPortMalloc+0x150>
 80198ca:	4b45      	ldr	r3, [pc, #276]	; (80199e0 <pvPortMalloc+0x188>)
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	687a      	ldr	r2, [r7, #4]
 80198d0:	429a      	cmp	r2, r3
 80198d2:	d869      	bhi.n	80199a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80198d4:	4b43      	ldr	r3, [pc, #268]	; (80199e4 <pvPortMalloc+0x18c>)
 80198d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80198d8:	4b42      	ldr	r3, [pc, #264]	; (80199e4 <pvPortMalloc+0x18c>)
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80198de:	e004      	b.n	80198ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80198e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80198e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80198ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d903      	bls.n	80198fc <pvPortMalloc+0xa4>
 80198f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d1f1      	bne.n	80198e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80198fc:	4b36      	ldr	r3, [pc, #216]	; (80199d8 <pvPortMalloc+0x180>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019902:	429a      	cmp	r2, r3
 8019904:	d050      	beq.n	80199a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019906:	6a3b      	ldr	r3, [r7, #32]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	2208      	movs	r2, #8
 801990c:	4413      	add	r3, r2
 801990e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019912:	681a      	ldr	r2, [r3, #0]
 8019914:	6a3b      	ldr	r3, [r7, #32]
 8019916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991a:	685a      	ldr	r2, [r3, #4]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	1ad2      	subs	r2, r2, r3
 8019920:	2308      	movs	r3, #8
 8019922:	005b      	lsls	r3, r3, #1
 8019924:	429a      	cmp	r2, r3
 8019926:	d91f      	bls.n	8019968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	4413      	add	r3, r2
 801992e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019930:	69bb      	ldr	r3, [r7, #24]
 8019932:	f003 0307 	and.w	r3, r3, #7
 8019936:	2b00      	cmp	r3, #0
 8019938:	d00a      	beq.n	8019950 <pvPortMalloc+0xf8>
	__asm volatile
 801993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801993e:	f383 8811 	msr	BASEPRI, r3
 8019942:	f3bf 8f6f 	isb	sy
 8019946:	f3bf 8f4f 	dsb	sy
 801994a:	613b      	str	r3, [r7, #16]
}
 801994c:	bf00      	nop
 801994e:	e7fe      	b.n	801994e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019952:	685a      	ldr	r2, [r3, #4]
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	1ad2      	subs	r2, r2, r3
 8019958:	69bb      	ldr	r3, [r7, #24]
 801995a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995e:	687a      	ldr	r2, [r7, #4]
 8019960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019962:	69b8      	ldr	r0, [r7, #24]
 8019964:	f000 f90a 	bl	8019b7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019968:	4b1d      	ldr	r3, [pc, #116]	; (80199e0 <pvPortMalloc+0x188>)
 801996a:	681a      	ldr	r2, [r3, #0]
 801996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996e:	685b      	ldr	r3, [r3, #4]
 8019970:	1ad3      	subs	r3, r2, r3
 8019972:	4a1b      	ldr	r2, [pc, #108]	; (80199e0 <pvPortMalloc+0x188>)
 8019974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019976:	4b1a      	ldr	r3, [pc, #104]	; (80199e0 <pvPortMalloc+0x188>)
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	4b1b      	ldr	r3, [pc, #108]	; (80199e8 <pvPortMalloc+0x190>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	429a      	cmp	r2, r3
 8019980:	d203      	bcs.n	801998a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019982:	4b17      	ldr	r3, [pc, #92]	; (80199e0 <pvPortMalloc+0x188>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	4a18      	ldr	r2, [pc, #96]	; (80199e8 <pvPortMalloc+0x190>)
 8019988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801998c:	685a      	ldr	r2, [r3, #4]
 801998e:	4b13      	ldr	r3, [pc, #76]	; (80199dc <pvPortMalloc+0x184>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	431a      	orrs	r2, r3
 8019994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999a:	2200      	movs	r2, #0
 801999c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801999e:	4b13      	ldr	r3, [pc, #76]	; (80199ec <pvPortMalloc+0x194>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	3301      	adds	r3, #1
 80199a4:	4a11      	ldr	r2, [pc, #68]	; (80199ec <pvPortMalloc+0x194>)
 80199a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80199a8:	f7fe fc84 	bl	80182b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80199ac:	69fb      	ldr	r3, [r7, #28]
 80199ae:	f003 0307 	and.w	r3, r3, #7
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d00a      	beq.n	80199cc <pvPortMalloc+0x174>
	__asm volatile
 80199b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199ba:	f383 8811 	msr	BASEPRI, r3
 80199be:	f3bf 8f6f 	isb	sy
 80199c2:	f3bf 8f4f 	dsb	sy
 80199c6:	60fb      	str	r3, [r7, #12]
}
 80199c8:	bf00      	nop
 80199ca:	e7fe      	b.n	80199ca <pvPortMalloc+0x172>
	return pvReturn;
 80199cc:	69fb      	ldr	r3, [r7, #28]
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	3728      	adds	r7, #40	; 0x28
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}
 80199d6:	bf00      	nop
 80199d8:	2001ac78 	.word	0x2001ac78
 80199dc:	2001ac8c 	.word	0x2001ac8c
 80199e0:	2001ac7c 	.word	0x2001ac7c
 80199e4:	2001ac70 	.word	0x2001ac70
 80199e8:	2001ac80 	.word	0x2001ac80
 80199ec:	2001ac84 	.word	0x2001ac84

080199f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b086      	sub	sp, #24
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d04d      	beq.n	8019a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019a02:	2308      	movs	r3, #8
 8019a04:	425b      	negs	r3, r3
 8019a06:	697a      	ldr	r2, [r7, #20]
 8019a08:	4413      	add	r3, r2
 8019a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	685a      	ldr	r2, [r3, #4]
 8019a14:	4b24      	ldr	r3, [pc, #144]	; (8019aa8 <vPortFree+0xb8>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	4013      	ands	r3, r2
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d10a      	bne.n	8019a34 <vPortFree+0x44>
	__asm volatile
 8019a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a22:	f383 8811 	msr	BASEPRI, r3
 8019a26:	f3bf 8f6f 	isb	sy
 8019a2a:	f3bf 8f4f 	dsb	sy
 8019a2e:	60fb      	str	r3, [r7, #12]
}
 8019a30:	bf00      	nop
 8019a32:	e7fe      	b.n	8019a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d00a      	beq.n	8019a52 <vPortFree+0x62>
	__asm volatile
 8019a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a40:	f383 8811 	msr	BASEPRI, r3
 8019a44:	f3bf 8f6f 	isb	sy
 8019a48:	f3bf 8f4f 	dsb	sy
 8019a4c:	60bb      	str	r3, [r7, #8]
}
 8019a4e:	bf00      	nop
 8019a50:	e7fe      	b.n	8019a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	685a      	ldr	r2, [r3, #4]
 8019a56:	4b14      	ldr	r3, [pc, #80]	; (8019aa8 <vPortFree+0xb8>)
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	4013      	ands	r3, r2
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d01e      	beq.n	8019a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019a60:	693b      	ldr	r3, [r7, #16]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d11a      	bne.n	8019a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	685a      	ldr	r2, [r3, #4]
 8019a6c:	4b0e      	ldr	r3, [pc, #56]	; (8019aa8 <vPortFree+0xb8>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	43db      	mvns	r3, r3
 8019a72:	401a      	ands	r2, r3
 8019a74:	693b      	ldr	r3, [r7, #16]
 8019a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019a78:	f7fe fc0e 	bl	8018298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019a7c:	693b      	ldr	r3, [r7, #16]
 8019a7e:	685a      	ldr	r2, [r3, #4]
 8019a80:	4b0a      	ldr	r3, [pc, #40]	; (8019aac <vPortFree+0xbc>)
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	4413      	add	r3, r2
 8019a86:	4a09      	ldr	r2, [pc, #36]	; (8019aac <vPortFree+0xbc>)
 8019a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019a8a:	6938      	ldr	r0, [r7, #16]
 8019a8c:	f000 f876 	bl	8019b7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019a90:	4b07      	ldr	r3, [pc, #28]	; (8019ab0 <vPortFree+0xc0>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	3301      	adds	r3, #1
 8019a96:	4a06      	ldr	r2, [pc, #24]	; (8019ab0 <vPortFree+0xc0>)
 8019a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019a9a:	f7fe fc0b 	bl	80182b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019a9e:	bf00      	nop
 8019aa0:	3718      	adds	r7, #24
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	2001ac8c 	.word	0x2001ac8c
 8019aac:	2001ac7c 	.word	0x2001ac7c
 8019ab0:	2001ac88 	.word	0x2001ac88

08019ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019ab4:	b480      	push	{r7}
 8019ab6:	b085      	sub	sp, #20
 8019ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019aba:	4b29      	ldr	r3, [pc, #164]	; (8019b60 <prvHeapInit+0xac>)
 8019abc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019abe:	4b29      	ldr	r3, [pc, #164]	; (8019b64 <prvHeapInit+0xb0>)
 8019ac0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	f003 0307 	and.w	r3, r3, #7
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d00c      	beq.n	8019ae6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	3307      	adds	r3, #7
 8019ad0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	f023 0307 	bic.w	r3, r3, #7
 8019ad8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019ada:	68ba      	ldr	r2, [r7, #8]
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	1ad3      	subs	r3, r2, r3
 8019ae0:	4a20      	ldr	r2, [pc, #128]	; (8019b64 <prvHeapInit+0xb0>)
 8019ae2:	4413      	add	r3, r2
 8019ae4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019aea:	4a1f      	ldr	r2, [pc, #124]	; (8019b68 <prvHeapInit+0xb4>)
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019af0:	4b1d      	ldr	r3, [pc, #116]	; (8019b68 <prvHeapInit+0xb4>)
 8019af2:	2200      	movs	r2, #0
 8019af4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	68ba      	ldr	r2, [r7, #8]
 8019afa:	4413      	add	r3, r2
 8019afc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019afe:	2208      	movs	r2, #8
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	1a9b      	subs	r3, r3, r2
 8019b04:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	f023 0307 	bic.w	r3, r3, #7
 8019b0c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	4a16      	ldr	r2, [pc, #88]	; (8019b6c <prvHeapInit+0xb8>)
 8019b12:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019b14:	4b15      	ldr	r3, [pc, #84]	; (8019b6c <prvHeapInit+0xb8>)
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	2200      	movs	r2, #0
 8019b1a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019b1c:	4b13      	ldr	r3, [pc, #76]	; (8019b6c <prvHeapInit+0xb8>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	2200      	movs	r2, #0
 8019b22:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019b28:	683b      	ldr	r3, [r7, #0]
 8019b2a:	68fa      	ldr	r2, [r7, #12]
 8019b2c:	1ad2      	subs	r2, r2, r3
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019b32:	4b0e      	ldr	r3, [pc, #56]	; (8019b6c <prvHeapInit+0xb8>)
 8019b34:	681a      	ldr	r2, [r3, #0]
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	685b      	ldr	r3, [r3, #4]
 8019b3e:	4a0c      	ldr	r2, [pc, #48]	; (8019b70 <prvHeapInit+0xbc>)
 8019b40:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	685b      	ldr	r3, [r3, #4]
 8019b46:	4a0b      	ldr	r2, [pc, #44]	; (8019b74 <prvHeapInit+0xc0>)
 8019b48:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019b4a:	4b0b      	ldr	r3, [pc, #44]	; (8019b78 <prvHeapInit+0xc4>)
 8019b4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019b50:	601a      	str	r2, [r3, #0]
}
 8019b52:	bf00      	nop
 8019b54:	3714      	adds	r7, #20
 8019b56:	46bd      	mov	sp, r7
 8019b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop
 8019b60:	000186a0 	.word	0x000186a0
 8019b64:	200025d0 	.word	0x200025d0
 8019b68:	2001ac70 	.word	0x2001ac70
 8019b6c:	2001ac78 	.word	0x2001ac78
 8019b70:	2001ac80 	.word	0x2001ac80
 8019b74:	2001ac7c 	.word	0x2001ac7c
 8019b78:	2001ac8c 	.word	0x2001ac8c

08019b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	b085      	sub	sp, #20
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019b84:	4b28      	ldr	r3, [pc, #160]	; (8019c28 <prvInsertBlockIntoFreeList+0xac>)
 8019b86:	60fb      	str	r3, [r7, #12]
 8019b88:	e002      	b.n	8019b90 <prvInsertBlockIntoFreeList+0x14>
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	60fb      	str	r3, [r7, #12]
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	687a      	ldr	r2, [r7, #4]
 8019b96:	429a      	cmp	r2, r3
 8019b98:	d8f7      	bhi.n	8019b8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	685b      	ldr	r3, [r3, #4]
 8019ba2:	68ba      	ldr	r2, [r7, #8]
 8019ba4:	4413      	add	r3, r2
 8019ba6:	687a      	ldr	r2, [r7, #4]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d108      	bne.n	8019bbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	685a      	ldr	r2, [r3, #4]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	441a      	add	r2, r3
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	685b      	ldr	r3, [r3, #4]
 8019bc6:	68ba      	ldr	r2, [r7, #8]
 8019bc8:	441a      	add	r2, r3
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d118      	bne.n	8019c04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	681a      	ldr	r2, [r3, #0]
 8019bd6:	4b15      	ldr	r3, [pc, #84]	; (8019c2c <prvInsertBlockIntoFreeList+0xb0>)
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	429a      	cmp	r2, r3
 8019bdc:	d00d      	beq.n	8019bfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	685a      	ldr	r2, [r3, #4]
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	685b      	ldr	r3, [r3, #4]
 8019be8:	441a      	add	r2, r3
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	601a      	str	r2, [r3, #0]
 8019bf8:	e008      	b.n	8019c0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019bfa:	4b0c      	ldr	r3, [pc, #48]	; (8019c2c <prvInsertBlockIntoFreeList+0xb0>)
 8019bfc:	681a      	ldr	r2, [r3, #0]
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	601a      	str	r2, [r3, #0]
 8019c02:	e003      	b.n	8019c0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	681a      	ldr	r2, [r3, #0]
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019c0c:	68fa      	ldr	r2, [r7, #12]
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d002      	beq.n	8019c1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	687a      	ldr	r2, [r7, #4]
 8019c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019c1a:	bf00      	nop
 8019c1c:	3714      	adds	r7, #20
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c24:	4770      	bx	lr
 8019c26:	bf00      	nop
 8019c28:	2001ac70 	.word	0x2001ac70
 8019c2c:	2001ac78 	.word	0x2001ac78

08019c30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8019c30:	b480      	push	{r7}
 8019c32:	b083      	sub	sp, #12
 8019c34:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8019c36:	4b24      	ldr	r3, [pc, #144]	; (8019cc8 <_DoInit+0x98>)
 8019c38:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	2203      	movs	r2, #3
 8019c3e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2203      	movs	r2, #3
 8019c44:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	4a20      	ldr	r2, [pc, #128]	; (8019ccc <_DoInit+0x9c>)
 8019c4a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	4a20      	ldr	r2, [pc, #128]	; (8019cd0 <_DoInit+0xa0>)
 8019c50:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019c58:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	2200      	movs	r2, #0
 8019c64:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	2200      	movs	r2, #0
 8019c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	4a17      	ldr	r2, [pc, #92]	; (8019ccc <_DoInit+0x9c>)
 8019c70:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	4a17      	ldr	r2, [pc, #92]	; (8019cd4 <_DoInit+0xa4>)
 8019c76:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2210      	movs	r2, #16
 8019c7c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	2200      	movs	r2, #0
 8019c82:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2200      	movs	r2, #0
 8019c88:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	3307      	adds	r3, #7
 8019c94:	4a10      	ldr	r2, [pc, #64]	; (8019cd8 <_DoInit+0xa8>)
 8019c96:	6810      	ldr	r0, [r2, #0]
 8019c98:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8019c9a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	4a0e      	ldr	r2, [pc, #56]	; (8019cdc <_DoInit+0xac>)
 8019ca2:	6810      	ldr	r0, [r2, #0]
 8019ca4:	6018      	str	r0, [r3, #0]
 8019ca6:	8891      	ldrh	r1, [r2, #4]
 8019ca8:	7992      	ldrb	r2, [r2, #6]
 8019caa:	8099      	strh	r1, [r3, #4]
 8019cac:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8019cae:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	2220      	movs	r2, #32
 8019cb6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8019cb8:	f3bf 8f5f 	dmb	sy
}
 8019cbc:	bf00      	nop
 8019cbe:	370c      	adds	r7, #12
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc6:	4770      	bx	lr
 8019cc8:	2001ec50 	.word	0x2001ec50
 8019ccc:	0801c1b4 	.word	0x0801c1b4
 8019cd0:	2001ac90 	.word	0x2001ac90
 8019cd4:	2001b090 	.word	0x2001b090
 8019cd8:	0801c1c0 	.word	0x0801c1c0
 8019cdc:	0801c1c4 	.word	0x0801c1c4

08019ce0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b08c      	sub	sp, #48	; 0x30
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8019cec:	4b3e      	ldr	r3, [pc, #248]	; (8019de8 <SEGGER_RTT_ReadNoLock+0x108>)
 8019cee:	623b      	str	r3, [r7, #32]
 8019cf0:	6a3b      	ldr	r3, [r7, #32]
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	b2db      	uxtb	r3, r3
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d101      	bne.n	8019cfe <SEGGER_RTT_ReadNoLock+0x1e>
 8019cfa:	f7ff ff99 	bl	8019c30 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8019cfe:	68fa      	ldr	r2, [r7, #12]
 8019d00:	4613      	mov	r3, r2
 8019d02:	005b      	lsls	r3, r3, #1
 8019d04:	4413      	add	r3, r2
 8019d06:	00db      	lsls	r3, r3, #3
 8019d08:	3360      	adds	r3, #96	; 0x60
 8019d0a:	4a37      	ldr	r2, [pc, #220]	; (8019de8 <SEGGER_RTT_ReadNoLock+0x108>)
 8019d0c:	4413      	add	r3, r2
 8019d0e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8019d10:	68bb      	ldr	r3, [r7, #8]
 8019d12:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8019d14:	69fb      	ldr	r3, [r7, #28]
 8019d16:	691b      	ldr	r3, [r3, #16]
 8019d18:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8019d1a:	69fb      	ldr	r3, [r7, #28]
 8019d1c:	68db      	ldr	r3, [r3, #12]
 8019d1e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8019d20:	2300      	movs	r3, #0
 8019d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8019d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d26:	69bb      	ldr	r3, [r7, #24]
 8019d28:	429a      	cmp	r2, r3
 8019d2a:	d92b      	bls.n	8019d84 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8019d2c:	69fb      	ldr	r3, [r7, #28]
 8019d2e:	689a      	ldr	r2, [r3, #8]
 8019d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d32:	1ad3      	subs	r3, r2, r3
 8019d34:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8019d36:	697a      	ldr	r2, [r7, #20]
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	4293      	cmp	r3, r2
 8019d3c:	bf28      	it	cs
 8019d3e:	4613      	movcs	r3, r2
 8019d40:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8019d42:	69fb      	ldr	r3, [r7, #28]
 8019d44:	685a      	ldr	r2, [r3, #4]
 8019d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d48:	4413      	add	r3, r2
 8019d4a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8019d4c:	697a      	ldr	r2, [r7, #20]
 8019d4e:	6939      	ldr	r1, [r7, #16]
 8019d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d52:	f001 fb6f 	bl	801b434 <memcpy>
    NumBytesRead += NumBytesRem;
 8019d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d58:	697b      	ldr	r3, [r7, #20]
 8019d5a:	4413      	add	r3, r2
 8019d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8019d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d60:	697b      	ldr	r3, [r7, #20]
 8019d62:	4413      	add	r3, r2
 8019d64:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8019d66:	687a      	ldr	r2, [r7, #4]
 8019d68:	697b      	ldr	r3, [r7, #20]
 8019d6a:	1ad3      	subs	r3, r2, r3
 8019d6c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8019d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	4413      	add	r3, r2
 8019d74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8019d76:	69fb      	ldr	r3, [r7, #28]
 8019d78:	689b      	ldr	r3, [r3, #8]
 8019d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	d101      	bne.n	8019d84 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8019d80:	2300      	movs	r3, #0
 8019d82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8019d84:	69ba      	ldr	r2, [r7, #24]
 8019d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d88:	1ad3      	subs	r3, r2, r3
 8019d8a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8019d8c:	697a      	ldr	r2, [r7, #20]
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	4293      	cmp	r3, r2
 8019d92:	bf28      	it	cs
 8019d94:	4613      	movcs	r3, r2
 8019d96:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8019d98:	697b      	ldr	r3, [r7, #20]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d019      	beq.n	8019dd2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8019d9e:	69fb      	ldr	r3, [r7, #28]
 8019da0:	685a      	ldr	r2, [r3, #4]
 8019da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019da4:	4413      	add	r3, r2
 8019da6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8019da8:	697a      	ldr	r2, [r7, #20]
 8019daa:	6939      	ldr	r1, [r7, #16]
 8019dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dae:	f001 fb41 	bl	801b434 <memcpy>
    NumBytesRead += NumBytesRem;
 8019db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	4413      	add	r3, r2
 8019db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8019dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	4413      	add	r3, r2
 8019dc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8019dc2:	687a      	ldr	r2, [r7, #4]
 8019dc4:	697b      	ldr	r3, [r7, #20]
 8019dc6:	1ad3      	subs	r3, r2, r3
 8019dc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8019dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	4413      	add	r3, r2
 8019dd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8019dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d002      	beq.n	8019dde <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ddc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8019dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	3730      	adds	r7, #48	; 0x30
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}
 8019de8:	2001ec50 	.word	0x2001ec50

08019dec <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b088      	sub	sp, #32
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	60f8      	str	r0, [r7, #12]
 8019df4:	60b9      	str	r1, [r7, #8]
 8019df6:	607a      	str	r2, [r7, #4]
 8019df8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8019dfa:	4b3d      	ldr	r3, [pc, #244]	; (8019ef0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8019dfc:	61bb      	str	r3, [r7, #24]
 8019dfe:	69bb      	ldr	r3, [r7, #24]
 8019e00:	781b      	ldrb	r3, [r3, #0]
 8019e02:	b2db      	uxtb	r3, r3
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d101      	bne.n	8019e0c <SEGGER_RTT_AllocUpBuffer+0x20>
 8019e08:	f7ff ff12 	bl	8019c30 <_DoInit>
  SEGGER_RTT_LOCK();
 8019e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8019e10:	f04f 0120 	mov.w	r1, #32
 8019e14:	f381 8811 	msr	BASEPRI, r1
 8019e18:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8019e1a:	4b35      	ldr	r3, [pc, #212]	; (8019ef0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8019e1c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8019e1e:	2300      	movs	r3, #0
 8019e20:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8019e22:	6939      	ldr	r1, [r7, #16]
 8019e24:	69fb      	ldr	r3, [r7, #28]
 8019e26:	1c5a      	adds	r2, r3, #1
 8019e28:	4613      	mov	r3, r2
 8019e2a:	005b      	lsls	r3, r3, #1
 8019e2c:	4413      	add	r3, r2
 8019e2e:	00db      	lsls	r3, r3, #3
 8019e30:	440b      	add	r3, r1
 8019e32:	3304      	adds	r3, #4
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d008      	beq.n	8019e4c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8019e3a:	69fb      	ldr	r3, [r7, #28]
 8019e3c:	3301      	adds	r3, #1
 8019e3e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8019e40:	693b      	ldr	r3, [r7, #16]
 8019e42:	691b      	ldr	r3, [r3, #16]
 8019e44:	69fa      	ldr	r2, [r7, #28]
 8019e46:	429a      	cmp	r2, r3
 8019e48:	dbeb      	blt.n	8019e22 <SEGGER_RTT_AllocUpBuffer+0x36>
 8019e4a:	e000      	b.n	8019e4e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8019e4c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8019e4e:	693b      	ldr	r3, [r7, #16]
 8019e50:	691b      	ldr	r3, [r3, #16]
 8019e52:	69fa      	ldr	r2, [r7, #28]
 8019e54:	429a      	cmp	r2, r3
 8019e56:	da3f      	bge.n	8019ed8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8019e58:	6939      	ldr	r1, [r7, #16]
 8019e5a:	69fb      	ldr	r3, [r7, #28]
 8019e5c:	1c5a      	adds	r2, r3, #1
 8019e5e:	4613      	mov	r3, r2
 8019e60:	005b      	lsls	r3, r3, #1
 8019e62:	4413      	add	r3, r2
 8019e64:	00db      	lsls	r3, r3, #3
 8019e66:	440b      	add	r3, r1
 8019e68:	68fa      	ldr	r2, [r7, #12]
 8019e6a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8019e6c:	6939      	ldr	r1, [r7, #16]
 8019e6e:	69fb      	ldr	r3, [r7, #28]
 8019e70:	1c5a      	adds	r2, r3, #1
 8019e72:	4613      	mov	r3, r2
 8019e74:	005b      	lsls	r3, r3, #1
 8019e76:	4413      	add	r3, r2
 8019e78:	00db      	lsls	r3, r3, #3
 8019e7a:	440b      	add	r3, r1
 8019e7c:	3304      	adds	r3, #4
 8019e7e:	68ba      	ldr	r2, [r7, #8]
 8019e80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8019e82:	6939      	ldr	r1, [r7, #16]
 8019e84:	69fa      	ldr	r2, [r7, #28]
 8019e86:	4613      	mov	r3, r2
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	4413      	add	r3, r2
 8019e8c:	00db      	lsls	r3, r3, #3
 8019e8e:	440b      	add	r3, r1
 8019e90:	3320      	adds	r3, #32
 8019e92:	687a      	ldr	r2, [r7, #4]
 8019e94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8019e96:	6939      	ldr	r1, [r7, #16]
 8019e98:	69fa      	ldr	r2, [r7, #28]
 8019e9a:	4613      	mov	r3, r2
 8019e9c:	005b      	lsls	r3, r3, #1
 8019e9e:	4413      	add	r3, r2
 8019ea0:	00db      	lsls	r3, r3, #3
 8019ea2:	440b      	add	r3, r1
 8019ea4:	3328      	adds	r3, #40	; 0x28
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8019eaa:	6939      	ldr	r1, [r7, #16]
 8019eac:	69fa      	ldr	r2, [r7, #28]
 8019eae:	4613      	mov	r3, r2
 8019eb0:	005b      	lsls	r3, r3, #1
 8019eb2:	4413      	add	r3, r2
 8019eb4:	00db      	lsls	r3, r3, #3
 8019eb6:	440b      	add	r3, r1
 8019eb8:	3324      	adds	r3, #36	; 0x24
 8019eba:	2200      	movs	r2, #0
 8019ebc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8019ebe:	6939      	ldr	r1, [r7, #16]
 8019ec0:	69fa      	ldr	r2, [r7, #28]
 8019ec2:	4613      	mov	r3, r2
 8019ec4:	005b      	lsls	r3, r3, #1
 8019ec6:	4413      	add	r3, r2
 8019ec8:	00db      	lsls	r3, r3, #3
 8019eca:	440b      	add	r3, r1
 8019ecc:	332c      	adds	r3, #44	; 0x2c
 8019ece:	683a      	ldr	r2, [r7, #0]
 8019ed0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8019ed2:	f3bf 8f5f 	dmb	sy
 8019ed6:	e002      	b.n	8019ede <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8019ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8019edc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8019ee4:	69fb      	ldr	r3, [r7, #28]
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3720      	adds	r7, #32
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	2001ec50 	.word	0x2001ec50

08019ef4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b08a      	sub	sp, #40	; 0x28
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	60f8      	str	r0, [r7, #12]
 8019efc:	60b9      	str	r1, [r7, #8]
 8019efe:	607a      	str	r2, [r7, #4]
 8019f00:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8019f02:	4b21      	ldr	r3, [pc, #132]	; (8019f88 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8019f04:	623b      	str	r3, [r7, #32]
 8019f06:	6a3b      	ldr	r3, [r7, #32]
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	b2db      	uxtb	r3, r3
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d101      	bne.n	8019f14 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8019f10:	f7ff fe8e 	bl	8019c30 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8019f14:	4b1c      	ldr	r3, [pc, #112]	; (8019f88 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8019f16:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	2b02      	cmp	r3, #2
 8019f1c:	d82c      	bhi.n	8019f78 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8019f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8019f22:	f04f 0120 	mov.w	r1, #32
 8019f26:	f381 8811 	msr	BASEPRI, r1
 8019f2a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8019f2c:	68fa      	ldr	r2, [r7, #12]
 8019f2e:	4613      	mov	r3, r2
 8019f30:	005b      	lsls	r3, r3, #1
 8019f32:	4413      	add	r3, r2
 8019f34:	00db      	lsls	r3, r3, #3
 8019f36:	3360      	adds	r3, #96	; 0x60
 8019f38:	69fa      	ldr	r2, [r7, #28]
 8019f3a:	4413      	add	r3, r2
 8019f3c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d00e      	beq.n	8019f62 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	68ba      	ldr	r2, [r7, #8]
 8019f48:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8019f4a:	697b      	ldr	r3, [r7, #20]
 8019f4c:	687a      	ldr	r2, [r7, #4]
 8019f4e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	683a      	ldr	r2, [r7, #0]
 8019f54:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8019f56:	697b      	ldr	r3, [r7, #20]
 8019f58:	2200      	movs	r2, #0
 8019f5a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8019f5c:	697b      	ldr	r3, [r7, #20]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f66:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8019f68:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8019f6c:	69bb      	ldr	r3, [r7, #24]
 8019f6e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8019f72:	2300      	movs	r3, #0
 8019f74:	627b      	str	r3, [r7, #36]	; 0x24
 8019f76:	e002      	b.n	8019f7e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8019f78:	f04f 33ff 	mov.w	r3, #4294967295
 8019f7c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8019f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3728      	adds	r7, #40	; 0x28
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}
 8019f88:	2001ec50 	.word	0x2001ec50

08019f8c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8019f8c:	b480      	push	{r7}
 8019f8e:	b087      	sub	sp, #28
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	60b9      	str	r1, [r7, #8]
 8019f96:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d00f      	beq.n	8019fc2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8019fa2:	e002      	b.n	8019faa <_EncodeStr+0x1e>
      Len++;
 8019fa4:	693b      	ldr	r3, [r7, #16]
 8019fa6:	3301      	adds	r3, #1
 8019fa8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8019faa:	68ba      	ldr	r2, [r7, #8]
 8019fac:	693b      	ldr	r3, [r7, #16]
 8019fae:	4413      	add	r3, r2
 8019fb0:	781b      	ldrb	r3, [r3, #0]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d1f6      	bne.n	8019fa4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8019fb6:	693a      	ldr	r2, [r7, #16]
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	d901      	bls.n	8019fc2 <_EncodeStr+0x36>
      Len = Limit;
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8019fc2:	693b      	ldr	r3, [r7, #16]
 8019fc4:	2bfe      	cmp	r3, #254	; 0xfe
 8019fc6:	d806      	bhi.n	8019fd6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	1c5a      	adds	r2, r3, #1
 8019fcc:	60fa      	str	r2, [r7, #12]
 8019fce:	693a      	ldr	r2, [r7, #16]
 8019fd0:	b2d2      	uxtb	r2, r2
 8019fd2:	701a      	strb	r2, [r3, #0]
 8019fd4:	e011      	b.n	8019ffa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	1c5a      	adds	r2, r3, #1
 8019fda:	60fa      	str	r2, [r7, #12]
 8019fdc:	22ff      	movs	r2, #255	; 0xff
 8019fde:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	1c5a      	adds	r2, r3, #1
 8019fe4:	60fa      	str	r2, [r7, #12]
 8019fe6:	693a      	ldr	r2, [r7, #16]
 8019fe8:	b2d2      	uxtb	r2, r2
 8019fea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8019fec:	693b      	ldr	r3, [r7, #16]
 8019fee:	0a19      	lsrs	r1, r3, #8
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	1c5a      	adds	r2, r3, #1
 8019ff4:	60fa      	str	r2, [r7, #12]
 8019ff6:	b2ca      	uxtb	r2, r1
 8019ff8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8019ffe:	e00a      	b.n	801a016 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 801a000:	68ba      	ldr	r2, [r7, #8]
 801a002:	1c53      	adds	r3, r2, #1
 801a004:	60bb      	str	r3, [r7, #8]
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	1c59      	adds	r1, r3, #1
 801a00a:	60f9      	str	r1, [r7, #12]
 801a00c:	7812      	ldrb	r2, [r2, #0]
 801a00e:	701a      	strb	r2, [r3, #0]
    n++;
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	3301      	adds	r3, #1
 801a014:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 801a016:	697a      	ldr	r2, [r7, #20]
 801a018:	693b      	ldr	r3, [r7, #16]
 801a01a:	429a      	cmp	r2, r3
 801a01c:	d3f0      	bcc.n	801a000 <_EncodeStr+0x74>
  }
  return pPayload;
 801a01e:	68fb      	ldr	r3, [r7, #12]
}
 801a020:	4618      	mov	r0, r3
 801a022:	371c      	adds	r7, #28
 801a024:	46bd      	mov	sp, r7
 801a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02a:	4770      	bx	lr

0801a02c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 801a02c:	b480      	push	{r7}
 801a02e:	b083      	sub	sp, #12
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	3304      	adds	r3, #4
}
 801a038:	4618      	mov	r0, r3
 801a03a:	370c      	adds	r7, #12
 801a03c:	46bd      	mov	sp, r7
 801a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a042:	4770      	bx	lr

0801a044 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 801a044:	b580      	push	{r7, lr}
 801a046:	b082      	sub	sp, #8
 801a048:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801a04a:	4b36      	ldr	r3, [pc, #216]	; (801a124 <_HandleIncomingPacket+0xe0>)
 801a04c:	7e1b      	ldrb	r3, [r3, #24]
 801a04e:	4618      	mov	r0, r3
 801a050:	1cfb      	adds	r3, r7, #3
 801a052:	2201      	movs	r2, #1
 801a054:	4619      	mov	r1, r3
 801a056:	f7ff fe43 	bl	8019ce0 <SEGGER_RTT_ReadNoLock>
 801a05a:	4603      	mov	r3, r0
 801a05c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2b00      	cmp	r3, #0
 801a062:	dd54      	ble.n	801a10e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 801a064:	78fb      	ldrb	r3, [r7, #3]
 801a066:	2b80      	cmp	r3, #128	; 0x80
 801a068:	d032      	beq.n	801a0d0 <_HandleIncomingPacket+0x8c>
 801a06a:	2b80      	cmp	r3, #128	; 0x80
 801a06c:	dc42      	bgt.n	801a0f4 <_HandleIncomingPacket+0xb0>
 801a06e:	2b07      	cmp	r3, #7
 801a070:	dc16      	bgt.n	801a0a0 <_HandleIncomingPacket+0x5c>
 801a072:	2b00      	cmp	r3, #0
 801a074:	dd3e      	ble.n	801a0f4 <_HandleIncomingPacket+0xb0>
 801a076:	3b01      	subs	r3, #1
 801a078:	2b06      	cmp	r3, #6
 801a07a:	d83b      	bhi.n	801a0f4 <_HandleIncomingPacket+0xb0>
 801a07c:	a201      	add	r2, pc, #4	; (adr r2, 801a084 <_HandleIncomingPacket+0x40>)
 801a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a082:	bf00      	nop
 801a084:	0801a0a7 	.word	0x0801a0a7
 801a088:	0801a0ad 	.word	0x0801a0ad
 801a08c:	0801a0b3 	.word	0x0801a0b3
 801a090:	0801a0b9 	.word	0x0801a0b9
 801a094:	0801a0bf 	.word	0x0801a0bf
 801a098:	0801a0c5 	.word	0x0801a0c5
 801a09c:	0801a0cb 	.word	0x0801a0cb
 801a0a0:	2b7f      	cmp	r3, #127	; 0x7f
 801a0a2:	d036      	beq.n	801a112 <_HandleIncomingPacket+0xce>
 801a0a4:	e026      	b.n	801a0f4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 801a0a6:	f000 fc67 	bl	801a978 <SEGGER_SYSVIEW_Start>
      break;
 801a0aa:	e037      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 801a0ac:	f000 fd1e 	bl	801aaec <SEGGER_SYSVIEW_Stop>
      break;
 801a0b0:	e034      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 801a0b2:	f000 fef7 	bl	801aea4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 801a0b6:	e031      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 801a0b8:	f000 febc 	bl	801ae34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 801a0bc:	e02e      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801a0be:	f000 fd3b 	bl	801ab38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 801a0c2:	e02b      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 801a0c4:	f001 f8b0 	bl	801b228 <SEGGER_SYSVIEW_SendNumModules>
      break;
 801a0c8:	e028      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 801a0ca:	f001 f88f 	bl	801b1ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801a0ce:	e025      	b.n	801a11c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801a0d0:	4b14      	ldr	r3, [pc, #80]	; (801a124 <_HandleIncomingPacket+0xe0>)
 801a0d2:	7e1b      	ldrb	r3, [r3, #24]
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	1cfb      	adds	r3, r7, #3
 801a0d8:	2201      	movs	r2, #1
 801a0da:	4619      	mov	r1, r3
 801a0dc:	f7ff fe00 	bl	8019ce0 <SEGGER_RTT_ReadNoLock>
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	dd15      	ble.n	801a116 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 801a0ea:	78fb      	ldrb	r3, [r7, #3]
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f000 fffd 	bl	801b0ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 801a0f2:	e010      	b.n	801a116 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 801a0f4:	78fb      	ldrb	r3, [r7, #3]
 801a0f6:	b25b      	sxtb	r3, r3
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	da0e      	bge.n	801a11a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801a0fc:	4b09      	ldr	r3, [pc, #36]	; (801a124 <_HandleIncomingPacket+0xe0>)
 801a0fe:	7e1b      	ldrb	r3, [r3, #24]
 801a100:	4618      	mov	r0, r3
 801a102:	1cfb      	adds	r3, r7, #3
 801a104:	2201      	movs	r2, #1
 801a106:	4619      	mov	r1, r3
 801a108:	f7ff fdea 	bl	8019ce0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 801a10c:	e005      	b.n	801a11a <_HandleIncomingPacket+0xd6>
    }
  }
 801a10e:	bf00      	nop
 801a110:	e004      	b.n	801a11c <_HandleIncomingPacket+0xd8>
      break;
 801a112:	bf00      	nop
 801a114:	e002      	b.n	801a11c <_HandleIncomingPacket+0xd8>
      break;
 801a116:	bf00      	nop
 801a118:	e000      	b.n	801a11c <_HandleIncomingPacket+0xd8>
      break;
 801a11a:	bf00      	nop
}
 801a11c:	bf00      	nop
 801a11e:	3708      	adds	r7, #8
 801a120:	46bd      	mov	sp, r7
 801a122:	bd80      	pop	{r7, pc}
 801a124:	2001b4a8 	.word	0x2001b4a8

0801a128 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 801a128:	b580      	push	{r7, lr}
 801a12a:	b08c      	sub	sp, #48	; 0x30
 801a12c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 801a12e:	2301      	movs	r3, #1
 801a130:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 801a132:	1d3b      	adds	r3, r7, #4
 801a134:	3301      	adds	r3, #1
 801a136:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 801a138:	69fb      	ldr	r3, [r7, #28]
 801a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a13c:	4b31      	ldr	r3, [pc, #196]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a13e:	695b      	ldr	r3, [r3, #20]
 801a140:	62bb      	str	r3, [r7, #40]	; 0x28
 801a142:	e00b      	b.n	801a15c <_TrySendOverflowPacket+0x34>
 801a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a146:	b2da      	uxtb	r2, r3
 801a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a14a:	1c59      	adds	r1, r3, #1
 801a14c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a14e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a152:	b2d2      	uxtb	r2, r2
 801a154:	701a      	strb	r2, [r3, #0]
 801a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a158:	09db      	lsrs	r3, r3, #7
 801a15a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a15e:	2b7f      	cmp	r3, #127	; 0x7f
 801a160:	d8f0      	bhi.n	801a144 <_TrySendOverflowPacket+0x1c>
 801a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a164:	1c5a      	adds	r2, r3, #1
 801a166:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a16a:	b2d2      	uxtb	r2, r2
 801a16c:	701a      	strb	r2, [r3, #0]
 801a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a170:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801a172:	4b25      	ldr	r3, [pc, #148]	; (801a208 <_TrySendOverflowPacket+0xe0>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 801a178:	4b22      	ldr	r3, [pc, #136]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a17a:	68db      	ldr	r3, [r3, #12]
 801a17c:	69ba      	ldr	r2, [r7, #24]
 801a17e:	1ad3      	subs	r3, r2, r3
 801a180:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 801a182:	69fb      	ldr	r3, [r7, #28]
 801a184:	627b      	str	r3, [r7, #36]	; 0x24
 801a186:	697b      	ldr	r3, [r7, #20]
 801a188:	623b      	str	r3, [r7, #32]
 801a18a:	e00b      	b.n	801a1a4 <_TrySendOverflowPacket+0x7c>
 801a18c:	6a3b      	ldr	r3, [r7, #32]
 801a18e:	b2da      	uxtb	r2, r3
 801a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a192:	1c59      	adds	r1, r3, #1
 801a194:	6279      	str	r1, [r7, #36]	; 0x24
 801a196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a19a:	b2d2      	uxtb	r2, r2
 801a19c:	701a      	strb	r2, [r3, #0]
 801a19e:	6a3b      	ldr	r3, [r7, #32]
 801a1a0:	09db      	lsrs	r3, r3, #7
 801a1a2:	623b      	str	r3, [r7, #32]
 801a1a4:	6a3b      	ldr	r3, [r7, #32]
 801a1a6:	2b7f      	cmp	r3, #127	; 0x7f
 801a1a8:	d8f0      	bhi.n	801a18c <_TrySendOverflowPacket+0x64>
 801a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ac:	1c5a      	adds	r2, r3, #1
 801a1ae:	627a      	str	r2, [r7, #36]	; 0x24
 801a1b0:	6a3a      	ldr	r2, [r7, #32]
 801a1b2:	b2d2      	uxtb	r2, r2
 801a1b4:	701a      	strb	r2, [r3, #0]
 801a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 801a1ba:	4b12      	ldr	r3, [pc, #72]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a1bc:	785b      	ldrb	r3, [r3, #1]
 801a1be:	4618      	mov	r0, r3
 801a1c0:	1d3b      	adds	r3, r7, #4
 801a1c2:	69fa      	ldr	r2, [r7, #28]
 801a1c4:	1ad3      	subs	r3, r2, r3
 801a1c6:	461a      	mov	r2, r3
 801a1c8:	1d3b      	adds	r3, r7, #4
 801a1ca:	4619      	mov	r1, r3
 801a1cc:	f7e6 f800 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d009      	beq.n	801a1ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 801a1da:	4a0a      	ldr	r2, [pc, #40]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a1dc:	69bb      	ldr	r3, [r7, #24]
 801a1de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 801a1e0:	4b08      	ldr	r3, [pc, #32]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a1e2:	781b      	ldrb	r3, [r3, #0]
 801a1e4:	3b01      	subs	r3, #1
 801a1e6:	b2da      	uxtb	r2, r3
 801a1e8:	4b06      	ldr	r3, [pc, #24]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a1ea:	701a      	strb	r2, [r3, #0]
 801a1ec:	e004      	b.n	801a1f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 801a1ee:	4b05      	ldr	r3, [pc, #20]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a1f0:	695b      	ldr	r3, [r3, #20]
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	4a03      	ldr	r2, [pc, #12]	; (801a204 <_TrySendOverflowPacket+0xdc>)
 801a1f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 801a1f8:	693b      	ldr	r3, [r7, #16]
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3730      	adds	r7, #48	; 0x30
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
 801a202:	bf00      	nop
 801a204:	2001b4a8 	.word	0x2001b4a8
 801a208:	e0001004 	.word	0xe0001004

0801a20c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b08a      	sub	sp, #40	; 0x28
 801a210:	af00      	add	r7, sp, #0
 801a212:	60f8      	str	r0, [r7, #12]
 801a214:	60b9      	str	r1, [r7, #8]
 801a216:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 801a218:	4b6c      	ldr	r3, [pc, #432]	; (801a3cc <_SendPacket+0x1c0>)
 801a21a:	781b      	ldrb	r3, [r3, #0]
 801a21c:	2b01      	cmp	r3, #1
 801a21e:	d010      	beq.n	801a242 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 801a220:	4b6a      	ldr	r3, [pc, #424]	; (801a3cc <_SendPacket+0x1c0>)
 801a222:	781b      	ldrb	r3, [r3, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	f000 80a3 	beq.w	801a370 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 801a22a:	4b68      	ldr	r3, [pc, #416]	; (801a3cc <_SendPacket+0x1c0>)
 801a22c:	781b      	ldrb	r3, [r3, #0]
 801a22e:	2b02      	cmp	r3, #2
 801a230:	d109      	bne.n	801a246 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 801a232:	f7ff ff79 	bl	801a128 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 801a236:	4b65      	ldr	r3, [pc, #404]	; (801a3cc <_SendPacket+0x1c0>)
 801a238:	781b      	ldrb	r3, [r3, #0]
 801a23a:	2b01      	cmp	r3, #1
 801a23c:	f040 809a 	bne.w	801a374 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 801a240:	e001      	b.n	801a246 <_SendPacket+0x3a>
    goto Send;
 801a242:	bf00      	nop
 801a244:	e000      	b.n	801a248 <_SendPacket+0x3c>
Send:
 801a246:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	2b1f      	cmp	r3, #31
 801a24c:	d809      	bhi.n	801a262 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 801a24e:	4b5f      	ldr	r3, [pc, #380]	; (801a3cc <_SendPacket+0x1c0>)
 801a250:	69da      	ldr	r2, [r3, #28]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	fa22 f303 	lsr.w	r3, r2, r3
 801a258:	f003 0301 	and.w	r3, r3, #1
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	f040 808b 	bne.w	801a378 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2b17      	cmp	r3, #23
 801a266:	d807      	bhi.n	801a278 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	3b01      	subs	r3, #1
 801a26c:	60fb      	str	r3, [r7, #12]
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	b2da      	uxtb	r2, r3
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	701a      	strb	r2, [r3, #0]
 801a276:	e03d      	b.n	801a2f4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 801a278:	68ba      	ldr	r2, [r7, #8]
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	1ad3      	subs	r3, r2, r3
 801a27e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 801a280:	69fb      	ldr	r3, [r7, #28]
 801a282:	2b7f      	cmp	r3, #127	; 0x7f
 801a284:	d912      	bls.n	801a2ac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 801a286:	69fb      	ldr	r3, [r7, #28]
 801a288:	09da      	lsrs	r2, r3, #7
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	3b01      	subs	r3, #1
 801a28e:	60fb      	str	r3, [r7, #12]
 801a290:	b2d2      	uxtb	r2, r2
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 801a296:	69fb      	ldr	r3, [r7, #28]
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	68fa      	ldr	r2, [r7, #12]
 801a29c:	3a01      	subs	r2, #1
 801a29e:	60fa      	str	r2, [r7, #12]
 801a2a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a2a4:	b2da      	uxtb	r2, r3
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	701a      	strb	r2, [r3, #0]
 801a2aa:	e006      	b.n	801a2ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	3b01      	subs	r3, #1
 801a2b0:	60fb      	str	r3, [r7, #12]
 801a2b2:	69fb      	ldr	r3, [r7, #28]
 801a2b4:	b2da      	uxtb	r2, r3
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	2b7f      	cmp	r3, #127	; 0x7f
 801a2be:	d912      	bls.n	801a2e6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	09da      	lsrs	r2, r3, #7
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	3b01      	subs	r3, #1
 801a2c8:	60fb      	str	r3, [r7, #12]
 801a2ca:	b2d2      	uxtb	r2, r2
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	68fa      	ldr	r2, [r7, #12]
 801a2d6:	3a01      	subs	r2, #1
 801a2d8:	60fa      	str	r2, [r7, #12]
 801a2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a2de:	b2da      	uxtb	r2, r3
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	701a      	strb	r2, [r3, #0]
 801a2e4:	e006      	b.n	801a2f4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	3b01      	subs	r3, #1
 801a2ea:	60fb      	str	r3, [r7, #12]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	b2da      	uxtb	r2, r3
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801a2f4:	4b36      	ldr	r3, [pc, #216]	; (801a3d0 <_SendPacket+0x1c4>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 801a2fa:	4b34      	ldr	r3, [pc, #208]	; (801a3cc <_SendPacket+0x1c0>)
 801a2fc:	68db      	ldr	r3, [r3, #12]
 801a2fe:	69ba      	ldr	r2, [r7, #24]
 801a300:	1ad3      	subs	r3, r2, r3
 801a302:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 801a304:	68bb      	ldr	r3, [r7, #8]
 801a306:	627b      	str	r3, [r7, #36]	; 0x24
 801a308:	697b      	ldr	r3, [r7, #20]
 801a30a:	623b      	str	r3, [r7, #32]
 801a30c:	e00b      	b.n	801a326 <_SendPacket+0x11a>
 801a30e:	6a3b      	ldr	r3, [r7, #32]
 801a310:	b2da      	uxtb	r2, r3
 801a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a314:	1c59      	adds	r1, r3, #1
 801a316:	6279      	str	r1, [r7, #36]	; 0x24
 801a318:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a31c:	b2d2      	uxtb	r2, r2
 801a31e:	701a      	strb	r2, [r3, #0]
 801a320:	6a3b      	ldr	r3, [r7, #32]
 801a322:	09db      	lsrs	r3, r3, #7
 801a324:	623b      	str	r3, [r7, #32]
 801a326:	6a3b      	ldr	r3, [r7, #32]
 801a328:	2b7f      	cmp	r3, #127	; 0x7f
 801a32a:	d8f0      	bhi.n	801a30e <_SendPacket+0x102>
 801a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a32e:	1c5a      	adds	r2, r3, #1
 801a330:	627a      	str	r2, [r7, #36]	; 0x24
 801a332:	6a3a      	ldr	r2, [r7, #32]
 801a334:	b2d2      	uxtb	r2, r2
 801a336:	701a      	strb	r2, [r3, #0]
 801a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a33a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 801a33c:	4b23      	ldr	r3, [pc, #140]	; (801a3cc <_SendPacket+0x1c0>)
 801a33e:	785b      	ldrb	r3, [r3, #1]
 801a340:	4618      	mov	r0, r3
 801a342:	68ba      	ldr	r2, [r7, #8]
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	1ad3      	subs	r3, r2, r3
 801a348:	461a      	mov	r2, r3
 801a34a:	68f9      	ldr	r1, [r7, #12]
 801a34c:	f7e5 ff40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 801a350:	4603      	mov	r3, r0
 801a352:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 801a354:	693b      	ldr	r3, [r7, #16]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d003      	beq.n	801a362 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 801a35a:	4a1c      	ldr	r2, [pc, #112]	; (801a3cc <_SendPacket+0x1c0>)
 801a35c:	69bb      	ldr	r3, [r7, #24]
 801a35e:	60d3      	str	r3, [r2, #12]
 801a360:	e00b      	b.n	801a37a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 801a362:	4b1a      	ldr	r3, [pc, #104]	; (801a3cc <_SendPacket+0x1c0>)
 801a364:	781b      	ldrb	r3, [r3, #0]
 801a366:	3301      	adds	r3, #1
 801a368:	b2da      	uxtb	r2, r3
 801a36a:	4b18      	ldr	r3, [pc, #96]	; (801a3cc <_SendPacket+0x1c0>)
 801a36c:	701a      	strb	r2, [r3, #0]
 801a36e:	e004      	b.n	801a37a <_SendPacket+0x16e>
    goto SendDone;
 801a370:	bf00      	nop
 801a372:	e002      	b.n	801a37a <_SendPacket+0x16e>
      goto SendDone;
 801a374:	bf00      	nop
 801a376:	e000      	b.n	801a37a <_SendPacket+0x16e>
      goto SendDone;
 801a378:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 801a37a:	4b14      	ldr	r3, [pc, #80]	; (801a3cc <_SendPacket+0x1c0>)
 801a37c:	7e1b      	ldrb	r3, [r3, #24]
 801a37e:	4619      	mov	r1, r3
 801a380:	4a14      	ldr	r2, [pc, #80]	; (801a3d4 <_SendPacket+0x1c8>)
 801a382:	460b      	mov	r3, r1
 801a384:	005b      	lsls	r3, r3, #1
 801a386:	440b      	add	r3, r1
 801a388:	00db      	lsls	r3, r3, #3
 801a38a:	4413      	add	r3, r2
 801a38c:	336c      	adds	r3, #108	; 0x6c
 801a38e:	681a      	ldr	r2, [r3, #0]
 801a390:	4b0e      	ldr	r3, [pc, #56]	; (801a3cc <_SendPacket+0x1c0>)
 801a392:	7e1b      	ldrb	r3, [r3, #24]
 801a394:	4618      	mov	r0, r3
 801a396:	490f      	ldr	r1, [pc, #60]	; (801a3d4 <_SendPacket+0x1c8>)
 801a398:	4603      	mov	r3, r0
 801a39a:	005b      	lsls	r3, r3, #1
 801a39c:	4403      	add	r3, r0
 801a39e:	00db      	lsls	r3, r3, #3
 801a3a0:	440b      	add	r3, r1
 801a3a2:	3370      	adds	r3, #112	; 0x70
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	429a      	cmp	r2, r3
 801a3a8:	d00b      	beq.n	801a3c2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 801a3aa:	4b08      	ldr	r3, [pc, #32]	; (801a3cc <_SendPacket+0x1c0>)
 801a3ac:	789b      	ldrb	r3, [r3, #2]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d107      	bne.n	801a3c2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 801a3b2:	4b06      	ldr	r3, [pc, #24]	; (801a3cc <_SendPacket+0x1c0>)
 801a3b4:	2201      	movs	r2, #1
 801a3b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 801a3b8:	f7ff fe44 	bl	801a044 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 801a3bc:	4b03      	ldr	r3, [pc, #12]	; (801a3cc <_SendPacket+0x1c0>)
 801a3be:	2200      	movs	r2, #0
 801a3c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 801a3c2:	bf00      	nop
 801a3c4:	3728      	adds	r7, #40	; 0x28
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}
 801a3ca:	bf00      	nop
 801a3cc:	2001b4a8 	.word	0x2001b4a8
 801a3d0:	e0001004 	.word	0xe0001004
 801a3d4:	2001ec50 	.word	0x2001ec50

0801a3d8 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b0a2      	sub	sp, #136	; 0x88
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	607a      	str	r2, [r7, #4]
#endif  
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 801a3ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a3f0:	1c5a      	adds	r2, r3, #1
 801a3f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 801a3f4:	781b      	ldrb	r3, [r3, #0]
 801a3f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 801a3fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d01e      	beq.n	801a440 <_VPrintHost+0x68>
      break;
    }
    if (c == '%') {
 801a402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a406:	2b25      	cmp	r3, #37	; 0x25
 801a408:	d1f1      	bne.n	801a3ee <_VPrintHost+0x16>
      c = *p;
 801a40a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a40c:	781b      	ldrb	r3, [r3, #0]
 801a40e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = va_arg(*pParamList, int);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	1d19      	adds	r1, r3, #4
 801a418:	687a      	ldr	r2, [r7, #4]
 801a41a:	6011      	str	r1, [r2, #0]
 801a41c:	6819      	ldr	r1, [r3, #0]
 801a41e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a422:	1c5a      	adds	r2, r3, #1
 801a424:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801a428:	460a      	mov	r2, r1
 801a42a:	009b      	lsls	r3, r3, #2
 801a42c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a430:	440b      	add	r3, r1
 801a432:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 801a436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a43a:	2b10      	cmp	r3, #16
 801a43c:	d002      	beq.n	801a444 <_VPrintHost+0x6c>
    c = *p++;
 801a43e:	e7d6      	b.n	801a3ee <_VPrintHost+0x16>
      break;
 801a440:	bf00      	nop
 801a442:	e000      	b.n	801a446 <_VPrintHost+0x6e>
        break;
 801a444:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 801a446:	f3ef 8311 	mrs	r3, BASEPRI
 801a44a:	f04f 0120 	mov.w	r1, #32
 801a44e:	f381 8811 	msr	BASEPRI, r1
 801a452:	65bb      	str	r3, [r7, #88]	; 0x58
 801a454:	483f      	ldr	r0, [pc, #252]	; (801a554 <_VPrintHost+0x17c>)
 801a456:	f7ff fde9 	bl	801a02c <_PreparePacket>
 801a45a:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a45c:	2280      	movs	r2, #128	; 0x80
 801a45e:	68f9      	ldr	r1, [r7, #12]
 801a460:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a462:	f7ff fd93 	bl	8019f8c <_EncodeStr>
 801a466:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 801a468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a46a:	677b      	str	r3, [r7, #116]	; 0x74
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	673b      	str	r3, [r7, #112]	; 0x70
 801a470:	e00b      	b.n	801a48a <_VPrintHost+0xb2>
 801a472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a474:	b2da      	uxtb	r2, r3
 801a476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a478:	1c59      	adds	r1, r3, #1
 801a47a:	6779      	str	r1, [r7, #116]	; 0x74
 801a47c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a480:	b2d2      	uxtb	r2, r2
 801a482:	701a      	strb	r2, [r3, #0]
 801a484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a486:	09db      	lsrs	r3, r3, #7
 801a488:	673b      	str	r3, [r7, #112]	; 0x70
 801a48a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a48c:	2b7f      	cmp	r3, #127	; 0x7f
 801a48e:	d8f0      	bhi.n	801a472 <_VPrintHost+0x9a>
 801a490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a492:	1c5a      	adds	r2, r3, #1
 801a494:	677a      	str	r2, [r7, #116]	; 0x74
 801a496:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a498:	b2d2      	uxtb	r2, r2
 801a49a:	701a      	strb	r2, [r3, #0]
 801a49c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a49e:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 801a4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a4a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a4a8:	66bb      	str	r3, [r7, #104]	; 0x68
 801a4aa:	e00b      	b.n	801a4c4 <_VPrintHost+0xec>
 801a4ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a4ae:	b2da      	uxtb	r2, r3
 801a4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a4b2:	1c59      	adds	r1, r3, #1
 801a4b4:	66f9      	str	r1, [r7, #108]	; 0x6c
 801a4b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a4ba:	b2d2      	uxtb	r2, r2
 801a4bc:	701a      	strb	r2, [r3, #0]
 801a4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a4c0:	09db      	lsrs	r3, r3, #7
 801a4c2:	66bb      	str	r3, [r7, #104]	; 0x68
 801a4c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a4c6:	2b7f      	cmp	r3, #127	; 0x7f
 801a4c8:	d8f0      	bhi.n	801a4ac <_VPrintHost+0xd4>
 801a4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a4cc:	1c5a      	adds	r2, r3, #1
 801a4ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a4d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a4d2:	b2d2      	uxtb	r2, r2
 801a4d4:	701a      	strb	r2, [r3, #0]
 801a4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a4d8:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 801a4da:	f107 0314 	add.w	r3, r7, #20
 801a4de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 801a4e2:	e022      	b.n	801a52a <_VPrintHost+0x152>
      ENCODE_U32(pPayload, (*pParas));
 801a4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4e6:	667b      	str	r3, [r7, #100]	; 0x64
 801a4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	663b      	str	r3, [r7, #96]	; 0x60
 801a4f0:	e00b      	b.n	801a50a <_VPrintHost+0x132>
 801a4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a4f4:	b2da      	uxtb	r2, r3
 801a4f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4f8:	1c59      	adds	r1, r3, #1
 801a4fa:	6679      	str	r1, [r7, #100]	; 0x64
 801a4fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a500:	b2d2      	uxtb	r2, r2
 801a502:	701a      	strb	r2, [r3, #0]
 801a504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a506:	09db      	lsrs	r3, r3, #7
 801a508:	663b      	str	r3, [r7, #96]	; 0x60
 801a50a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a50c:	2b7f      	cmp	r3, #127	; 0x7f
 801a50e:	d8f0      	bhi.n	801a4f2 <_VPrintHost+0x11a>
 801a510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a512:	1c5a      	adds	r2, r3, #1
 801a514:	667a      	str	r2, [r7, #100]	; 0x64
 801a516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a518:	b2d2      	uxtb	r2, r2
 801a51a:	701a      	strb	r2, [r3, #0]
 801a51c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a51e:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 801a520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a524:	3304      	adds	r3, #4
 801a526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 801a52a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a52e:	1e5a      	subs	r2, r3, #1
 801a530:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801a534:	2b00      	cmp	r3, #0
 801a536:	d1d5      	bne.n	801a4e4 <_VPrintHost+0x10c>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801a538:	221a      	movs	r2, #26
 801a53a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a53c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a53e:	f7ff fe65 	bl	801a20c <_SendPacket>
    RECORD_END();
 801a542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a544:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 801a548:	2300      	movs	r3, #0
}
 801a54a:	4618      	mov	r0, r3
 801a54c:	3788      	adds	r7, #136	; 0x88
 801a54e:	46bd      	mov	sp, r7
 801a550:	bd80      	pop	{r7, pc}
 801a552:	bf00      	nop
 801a554:	2001b4d8 	.word	0x2001b4d8

0801a558 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 801a558:	b580      	push	{r7, lr}
 801a55a:	b086      	sub	sp, #24
 801a55c:	af02      	add	r7, sp, #8
 801a55e:	60f8      	str	r0, [r7, #12]
 801a560:	60b9      	str	r1, [r7, #8]
 801a562:	607a      	str	r2, [r7, #4]
 801a564:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 801a566:	2300      	movs	r3, #0
 801a568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a56c:	4917      	ldr	r1, [pc, #92]	; (801a5cc <SEGGER_SYSVIEW_Init+0x74>)
 801a56e:	4818      	ldr	r0, [pc, #96]	; (801a5d0 <SEGGER_SYSVIEW_Init+0x78>)
 801a570:	f7ff fc3c 	bl	8019dec <SEGGER_RTT_AllocUpBuffer>
 801a574:	4603      	mov	r3, r0
 801a576:	b2da      	uxtb	r2, r3
 801a578:	4b16      	ldr	r3, [pc, #88]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a57a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 801a57c:	4b15      	ldr	r3, [pc, #84]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a57e:	785a      	ldrb	r2, [r3, #1]
 801a580:	4b14      	ldr	r3, [pc, #80]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a582:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 801a584:	4b13      	ldr	r3, [pc, #76]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a586:	7e1b      	ldrb	r3, [r3, #24]
 801a588:	4618      	mov	r0, r3
 801a58a:	2300      	movs	r3, #0
 801a58c:	9300      	str	r3, [sp, #0]
 801a58e:	2308      	movs	r3, #8
 801a590:	4a11      	ldr	r2, [pc, #68]	; (801a5d8 <SEGGER_SYSVIEW_Init+0x80>)
 801a592:	490f      	ldr	r1, [pc, #60]	; (801a5d0 <SEGGER_SYSVIEW_Init+0x78>)
 801a594:	f7ff fcae 	bl	8019ef4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 801a598:	4b0e      	ldr	r3, [pc, #56]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a59a:	2200      	movs	r2, #0
 801a59c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801a59e:	4b0f      	ldr	r3, [pc, #60]	; (801a5dc <SEGGER_SYSVIEW_Init+0x84>)
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	4a0c      	ldr	r2, [pc, #48]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a5a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 801a5a6:	4a0b      	ldr	r2, [pc, #44]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 801a5ac:	4a09      	ldr	r2, [pc, #36]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 801a5b2:	4a08      	ldr	r2, [pc, #32]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 801a5b8:	4a06      	ldr	r2, [pc, #24]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 801a5be:	4b05      	ldr	r3, [pc, #20]	; (801a5d4 <SEGGER_SYSVIEW_Init+0x7c>)
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 801a5c4:	bf00      	nop
 801a5c6:	3710      	adds	r7, #16
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}
 801a5cc:	2001b0a0 	.word	0x2001b0a0
 801a5d0:	0801c1cc 	.word	0x0801c1cc
 801a5d4:	2001b4a8 	.word	0x2001b4a8
 801a5d8:	2001b4a0 	.word	0x2001b4a0
 801a5dc:	e0001004 	.word	0xe0001004

0801a5e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 801a5e0:	b480      	push	{r7}
 801a5e2:	b083      	sub	sp, #12
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 801a5e8:	4a04      	ldr	r2, [pc, #16]	; (801a5fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6113      	str	r3, [r2, #16]
}
 801a5ee:	bf00      	nop
 801a5f0:	370c      	adds	r7, #12
 801a5f2:	46bd      	mov	sp, r7
 801a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f8:	4770      	bx	lr
 801a5fa:	bf00      	nop
 801a5fc:	2001b4a8 	.word	0x2001b4a8

0801a600 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801a608:	f3ef 8311 	mrs	r3, BASEPRI
 801a60c:	f04f 0120 	mov.w	r1, #32
 801a610:	f381 8811 	msr	BASEPRI, r1
 801a614:	60fb      	str	r3, [r7, #12]
 801a616:	4808      	ldr	r0, [pc, #32]	; (801a638 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 801a618:	f7ff fd08 	bl	801a02c <_PreparePacket>
 801a61c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 801a61e:	687a      	ldr	r2, [r7, #4]
 801a620:	68b9      	ldr	r1, [r7, #8]
 801a622:	68b8      	ldr	r0, [r7, #8]
 801a624:	f7ff fdf2 	bl	801a20c <_SendPacket>
  RECORD_END();
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	f383 8811 	msr	BASEPRI, r3
}
 801a62e:	bf00      	nop
 801a630:	3710      	adds	r7, #16
 801a632:	46bd      	mov	sp, r7
 801a634:	bd80      	pop	{r7, pc}
 801a636:	bf00      	nop
 801a638:	2001b4d8 	.word	0x2001b4d8

0801a63c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b088      	sub	sp, #32
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801a646:	f3ef 8311 	mrs	r3, BASEPRI
 801a64a:	f04f 0120 	mov.w	r1, #32
 801a64e:	f381 8811 	msr	BASEPRI, r1
 801a652:	617b      	str	r3, [r7, #20]
 801a654:	4816      	ldr	r0, [pc, #88]	; (801a6b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 801a656:	f7ff fce9 	bl	801a02c <_PreparePacket>
 801a65a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801a65c:	693b      	ldr	r3, [r7, #16]
 801a65e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	61fb      	str	r3, [r7, #28]
 801a664:	683b      	ldr	r3, [r7, #0]
 801a666:	61bb      	str	r3, [r7, #24]
 801a668:	e00b      	b.n	801a682 <SEGGER_SYSVIEW_RecordU32+0x46>
 801a66a:	69bb      	ldr	r3, [r7, #24]
 801a66c:	b2da      	uxtb	r2, r3
 801a66e:	69fb      	ldr	r3, [r7, #28]
 801a670:	1c59      	adds	r1, r3, #1
 801a672:	61f9      	str	r1, [r7, #28]
 801a674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a678:	b2d2      	uxtb	r2, r2
 801a67a:	701a      	strb	r2, [r3, #0]
 801a67c:	69bb      	ldr	r3, [r7, #24]
 801a67e:	09db      	lsrs	r3, r3, #7
 801a680:	61bb      	str	r3, [r7, #24]
 801a682:	69bb      	ldr	r3, [r7, #24]
 801a684:	2b7f      	cmp	r3, #127	; 0x7f
 801a686:	d8f0      	bhi.n	801a66a <SEGGER_SYSVIEW_RecordU32+0x2e>
 801a688:	69fb      	ldr	r3, [r7, #28]
 801a68a:	1c5a      	adds	r2, r3, #1
 801a68c:	61fa      	str	r2, [r7, #28]
 801a68e:	69ba      	ldr	r2, [r7, #24]
 801a690:	b2d2      	uxtb	r2, r2
 801a692:	701a      	strb	r2, [r3, #0]
 801a694:	69fb      	ldr	r3, [r7, #28]
 801a696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a698:	687a      	ldr	r2, [r7, #4]
 801a69a:	68f9      	ldr	r1, [r7, #12]
 801a69c:	6938      	ldr	r0, [r7, #16]
 801a69e:	f7ff fdb5 	bl	801a20c <_SendPacket>
  RECORD_END();
 801a6a2:	697b      	ldr	r3, [r7, #20]
 801a6a4:	f383 8811 	msr	BASEPRI, r3
}
 801a6a8:	bf00      	nop
 801a6aa:	3720      	adds	r7, #32
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	2001b4d8 	.word	0x2001b4d8

0801a6b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b08c      	sub	sp, #48	; 0x30
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	60f8      	str	r0, [r7, #12]
 801a6bc:	60b9      	str	r1, [r7, #8]
 801a6be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 801a6c0:	f3ef 8311 	mrs	r3, BASEPRI
 801a6c4:	f04f 0120 	mov.w	r1, #32
 801a6c8:	f381 8811 	msr	BASEPRI, r1
 801a6cc:	61fb      	str	r3, [r7, #28]
 801a6ce:	4825      	ldr	r0, [pc, #148]	; (801a764 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 801a6d0:	f7ff fcac 	bl	801a02c <_PreparePacket>
 801a6d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801a6d6:	69bb      	ldr	r3, [r7, #24]
 801a6d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801a6da:	697b      	ldr	r3, [r7, #20]
 801a6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a6de:	68bb      	ldr	r3, [r7, #8]
 801a6e0:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6e2:	e00b      	b.n	801a6fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 801a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6e6:	b2da      	uxtb	r2, r3
 801a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ea:	1c59      	adds	r1, r3, #1
 801a6ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a6ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a6f2:	b2d2      	uxtb	r2, r2
 801a6f4:	701a      	strb	r2, [r3, #0]
 801a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f8:	09db      	lsrs	r3, r3, #7
 801a6fa:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6fe:	2b7f      	cmp	r3, #127	; 0x7f
 801a700:	d8f0      	bhi.n	801a6e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 801a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a704:	1c5a      	adds	r2, r3, #1
 801a706:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a70a:	b2d2      	uxtb	r2, r2
 801a70c:	701a      	strb	r2, [r3, #0]
 801a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a710:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	627b      	str	r3, [r7, #36]	; 0x24
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	623b      	str	r3, [r7, #32]
 801a71a:	e00b      	b.n	801a734 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 801a71c:	6a3b      	ldr	r3, [r7, #32]
 801a71e:	b2da      	uxtb	r2, r3
 801a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a722:	1c59      	adds	r1, r3, #1
 801a724:	6279      	str	r1, [r7, #36]	; 0x24
 801a726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a72a:	b2d2      	uxtb	r2, r2
 801a72c:	701a      	strb	r2, [r3, #0]
 801a72e:	6a3b      	ldr	r3, [r7, #32]
 801a730:	09db      	lsrs	r3, r3, #7
 801a732:	623b      	str	r3, [r7, #32]
 801a734:	6a3b      	ldr	r3, [r7, #32]
 801a736:	2b7f      	cmp	r3, #127	; 0x7f
 801a738:	d8f0      	bhi.n	801a71c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 801a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a73c:	1c5a      	adds	r2, r3, #1
 801a73e:	627a      	str	r2, [r7, #36]	; 0x24
 801a740:	6a3a      	ldr	r2, [r7, #32]
 801a742:	b2d2      	uxtb	r2, r2
 801a744:	701a      	strb	r2, [r3, #0]
 801a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a748:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a74a:	68fa      	ldr	r2, [r7, #12]
 801a74c:	6979      	ldr	r1, [r7, #20]
 801a74e:	69b8      	ldr	r0, [r7, #24]
 801a750:	f7ff fd5c 	bl	801a20c <_SendPacket>
  RECORD_END();
 801a754:	69fb      	ldr	r3, [r7, #28]
 801a756:	f383 8811 	msr	BASEPRI, r3
}
 801a75a:	bf00      	nop
 801a75c:	3730      	adds	r7, #48	; 0x30
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}
 801a762:	bf00      	nop
 801a764:	2001b4d8 	.word	0x2001b4d8

0801a768 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 801a768:	b580      	push	{r7, lr}
 801a76a:	b08e      	sub	sp, #56	; 0x38
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	60f8      	str	r0, [r7, #12]
 801a770:	60b9      	str	r1, [r7, #8]
 801a772:	607a      	str	r2, [r7, #4]
 801a774:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 801a776:	f3ef 8311 	mrs	r3, BASEPRI
 801a77a:	f04f 0120 	mov.w	r1, #32
 801a77e:	f381 8811 	msr	BASEPRI, r1
 801a782:	61fb      	str	r3, [r7, #28]
 801a784:	4832      	ldr	r0, [pc, #200]	; (801a850 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 801a786:	f7ff fc51 	bl	801a02c <_PreparePacket>
 801a78a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801a78c:	69bb      	ldr	r3, [r7, #24]
 801a78e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801a790:	697b      	ldr	r3, [r7, #20]
 801a792:	637b      	str	r3, [r7, #52]	; 0x34
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	633b      	str	r3, [r7, #48]	; 0x30
 801a798:	e00b      	b.n	801a7b2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 801a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a79c:	b2da      	uxtb	r2, r3
 801a79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a0:	1c59      	adds	r1, r3, #1
 801a7a2:	6379      	str	r1, [r7, #52]	; 0x34
 801a7a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a7a8:	b2d2      	uxtb	r2, r2
 801a7aa:	701a      	strb	r2, [r3, #0]
 801a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ae:	09db      	lsrs	r3, r3, #7
 801a7b0:	633b      	str	r3, [r7, #48]	; 0x30
 801a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b4:	2b7f      	cmp	r3, #127	; 0x7f
 801a7b6:	d8f0      	bhi.n	801a79a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 801a7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7ba:	1c5a      	adds	r2, r3, #1
 801a7bc:	637a      	str	r2, [r7, #52]	; 0x34
 801a7be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7c0:	b2d2      	uxtb	r2, r2
 801a7c2:	701a      	strb	r2, [r3, #0]
 801a7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801a7c8:	697b      	ldr	r3, [r7, #20]
 801a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7d0:	e00b      	b.n	801a7ea <SEGGER_SYSVIEW_RecordU32x3+0x82>
 801a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d4:	b2da      	uxtb	r2, r3
 801a7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7d8:	1c59      	adds	r1, r3, #1
 801a7da:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a7dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a7e0:	b2d2      	uxtb	r2, r2
 801a7e2:	701a      	strb	r2, [r3, #0]
 801a7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7e6:	09db      	lsrs	r3, r3, #7
 801a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7ec:	2b7f      	cmp	r3, #127	; 0x7f
 801a7ee:	d8f0      	bhi.n	801a7d2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 801a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f2:	1c5a      	adds	r2, r3, #1
 801a7f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7f8:	b2d2      	uxtb	r2, r2
 801a7fa:	701a      	strb	r2, [r3, #0]
 801a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801a800:	697b      	ldr	r3, [r7, #20]
 801a802:	627b      	str	r3, [r7, #36]	; 0x24
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	623b      	str	r3, [r7, #32]
 801a808:	e00b      	b.n	801a822 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 801a80a:	6a3b      	ldr	r3, [r7, #32]
 801a80c:	b2da      	uxtb	r2, r3
 801a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a810:	1c59      	adds	r1, r3, #1
 801a812:	6279      	str	r1, [r7, #36]	; 0x24
 801a814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a818:	b2d2      	uxtb	r2, r2
 801a81a:	701a      	strb	r2, [r3, #0]
 801a81c:	6a3b      	ldr	r3, [r7, #32]
 801a81e:	09db      	lsrs	r3, r3, #7
 801a820:	623b      	str	r3, [r7, #32]
 801a822:	6a3b      	ldr	r3, [r7, #32]
 801a824:	2b7f      	cmp	r3, #127	; 0x7f
 801a826:	d8f0      	bhi.n	801a80a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 801a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a82a:	1c5a      	adds	r2, r3, #1
 801a82c:	627a      	str	r2, [r7, #36]	; 0x24
 801a82e:	6a3a      	ldr	r2, [r7, #32]
 801a830:	b2d2      	uxtb	r2, r2
 801a832:	701a      	strb	r2, [r3, #0]
 801a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a836:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a838:	68fa      	ldr	r2, [r7, #12]
 801a83a:	6979      	ldr	r1, [r7, #20]
 801a83c:	69b8      	ldr	r0, [r7, #24]
 801a83e:	f7ff fce5 	bl	801a20c <_SendPacket>
  RECORD_END();
 801a842:	69fb      	ldr	r3, [r7, #28]
 801a844:	f383 8811 	msr	BASEPRI, r3
}
 801a848:	bf00      	nop
 801a84a:	3738      	adds	r7, #56	; 0x38
 801a84c:	46bd      	mov	sp, r7
 801a84e:	bd80      	pop	{r7, pc}
 801a850:	2001b4d8 	.word	0x2001b4d8

0801a854 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 801a854:	b580      	push	{r7, lr}
 801a856:	b090      	sub	sp, #64	; 0x40
 801a858:	af00      	add	r7, sp, #0
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	607a      	str	r2, [r7, #4]
 801a860:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801a862:	f3ef 8311 	mrs	r3, BASEPRI
 801a866:	f04f 0120 	mov.w	r1, #32
 801a86a:	f381 8811 	msr	BASEPRI, r1
 801a86e:	61fb      	str	r3, [r7, #28]
 801a870:	4840      	ldr	r0, [pc, #256]	; (801a974 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 801a872:	f7ff fbdb 	bl	801a02c <_PreparePacket>
 801a876:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801a878:	69bb      	ldr	r3, [r7, #24]
 801a87a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801a87c:	697b      	ldr	r3, [r7, #20]
 801a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	63bb      	str	r3, [r7, #56]	; 0x38
 801a884:	e00b      	b.n	801a89e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 801a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a888:	b2da      	uxtb	r2, r3
 801a88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a88c:	1c59      	adds	r1, r3, #1
 801a88e:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a894:	b2d2      	uxtb	r2, r2
 801a896:	701a      	strb	r2, [r3, #0]
 801a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a89a:	09db      	lsrs	r3, r3, #7
 801a89c:	63bb      	str	r3, [r7, #56]	; 0x38
 801a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8a0:	2b7f      	cmp	r3, #127	; 0x7f
 801a8a2:	d8f0      	bhi.n	801a886 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 801a8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8a6:	1c5a      	adds	r2, r3, #1
 801a8a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a8aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a8ac:	b2d2      	uxtb	r2, r2
 801a8ae:	701a      	strb	r2, [r3, #0]
 801a8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801a8b4:	697b      	ldr	r3, [r7, #20]
 801a8b6:	637b      	str	r3, [r7, #52]	; 0x34
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	633b      	str	r3, [r7, #48]	; 0x30
 801a8bc:	e00b      	b.n	801a8d6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 801a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c0:	b2da      	uxtb	r2, r3
 801a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8c4:	1c59      	adds	r1, r3, #1
 801a8c6:	6379      	str	r1, [r7, #52]	; 0x34
 801a8c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a8cc:	b2d2      	uxtb	r2, r2
 801a8ce:	701a      	strb	r2, [r3, #0]
 801a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d2:	09db      	lsrs	r3, r3, #7
 801a8d4:	633b      	str	r3, [r7, #48]	; 0x30
 801a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d8:	2b7f      	cmp	r3, #127	; 0x7f
 801a8da:	d8f0      	bhi.n	801a8be <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8de:	1c5a      	adds	r2, r3, #1
 801a8e0:	637a      	str	r2, [r7, #52]	; 0x34
 801a8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a8e4:	b2d2      	uxtb	r2, r2
 801a8e6:	701a      	strb	r2, [r3, #0]
 801a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a8f0:	683b      	ldr	r3, [r7, #0]
 801a8f2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a8f4:	e00b      	b.n	801a90e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 801a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f8:	b2da      	uxtb	r2, r3
 801a8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8fc:	1c59      	adds	r1, r3, #1
 801a8fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a904:	b2d2      	uxtb	r2, r2
 801a906:	701a      	strb	r2, [r3, #0]
 801a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a90a:	09db      	lsrs	r3, r3, #7
 801a90c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a910:	2b7f      	cmp	r3, #127	; 0x7f
 801a912:	d8f0      	bhi.n	801a8f6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 801a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a916:	1c5a      	adds	r2, r3, #1
 801a918:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a91c:	b2d2      	uxtb	r2, r2
 801a91e:	701a      	strb	r2, [r3, #0]
 801a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a922:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 801a924:	697b      	ldr	r3, [r7, #20]
 801a926:	627b      	str	r3, [r7, #36]	; 0x24
 801a928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a92a:	623b      	str	r3, [r7, #32]
 801a92c:	e00b      	b.n	801a946 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801a92e:	6a3b      	ldr	r3, [r7, #32]
 801a930:	b2da      	uxtb	r2, r3
 801a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a934:	1c59      	adds	r1, r3, #1
 801a936:	6279      	str	r1, [r7, #36]	; 0x24
 801a938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a93c:	b2d2      	uxtb	r2, r2
 801a93e:	701a      	strb	r2, [r3, #0]
 801a940:	6a3b      	ldr	r3, [r7, #32]
 801a942:	09db      	lsrs	r3, r3, #7
 801a944:	623b      	str	r3, [r7, #32]
 801a946:	6a3b      	ldr	r3, [r7, #32]
 801a948:	2b7f      	cmp	r3, #127	; 0x7f
 801a94a:	d8f0      	bhi.n	801a92e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a94e:	1c5a      	adds	r2, r3, #1
 801a950:	627a      	str	r2, [r7, #36]	; 0x24
 801a952:	6a3a      	ldr	r2, [r7, #32]
 801a954:	b2d2      	uxtb	r2, r2
 801a956:	701a      	strb	r2, [r3, #0]
 801a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a95a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801a95c:	68fa      	ldr	r2, [r7, #12]
 801a95e:	6979      	ldr	r1, [r7, #20]
 801a960:	69b8      	ldr	r0, [r7, #24]
 801a962:	f7ff fc53 	bl	801a20c <_SendPacket>
  RECORD_END();
 801a966:	69fb      	ldr	r3, [r7, #28]
 801a968:	f383 8811 	msr	BASEPRI, r3
}
 801a96c:	bf00      	nop
 801a96e:	3740      	adds	r7, #64	; 0x40
 801a970:	46bd      	mov	sp, r7
 801a972:	bd80      	pop	{r7, pc}
 801a974:	2001b4d8 	.word	0x2001b4d8

0801a978 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 801a978:	b580      	push	{r7, lr}
 801a97a:	b08c      	sub	sp, #48	; 0x30
 801a97c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801a97e:	4b58      	ldr	r3, [pc, #352]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801a980:	2201      	movs	r2, #1
 801a982:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 801a984:	f3ef 8311 	mrs	r3, BASEPRI
 801a988:	f04f 0120 	mov.w	r1, #32
 801a98c:	f381 8811 	msr	BASEPRI, r1
 801a990:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 801a992:	4b53      	ldr	r3, [pc, #332]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801a994:	785b      	ldrb	r3, [r3, #1]
 801a996:	220a      	movs	r2, #10
 801a998:	4952      	ldr	r1, [pc, #328]	; (801aae4 <SEGGER_SYSVIEW_Start+0x16c>)
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7e5 fc18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 801a9a6:	200a      	movs	r0, #10
 801a9a8:	f7ff fe2a 	bl	801a600 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801a9ac:	f3ef 8311 	mrs	r3, BASEPRI
 801a9b0:	f04f 0120 	mov.w	r1, #32
 801a9b4:	f381 8811 	msr	BASEPRI, r1
 801a9b8:	60bb      	str	r3, [r7, #8]
 801a9ba:	484b      	ldr	r0, [pc, #300]	; (801aae8 <SEGGER_SYSVIEW_Start+0x170>)
 801a9bc:	f7ff fb36 	bl	801a02c <_PreparePacket>
 801a9c0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 801a9c6:	683b      	ldr	r3, [r7, #0]
 801a9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a9ca:	4b45      	ldr	r3, [pc, #276]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801a9cc:	685b      	ldr	r3, [r3, #4]
 801a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9d0:	e00b      	b.n	801a9ea <SEGGER_SYSVIEW_Start+0x72>
 801a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d4:	b2da      	uxtb	r2, r3
 801a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9d8:	1c59      	adds	r1, r3, #1
 801a9da:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a9dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a9e0:	b2d2      	uxtb	r2, r2
 801a9e2:	701a      	strb	r2, [r3, #0]
 801a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9e6:	09db      	lsrs	r3, r3, #7
 801a9e8:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9ec:	2b7f      	cmp	r3, #127	; 0x7f
 801a9ee:	d8f0      	bhi.n	801a9d2 <SEGGER_SYSVIEW_Start+0x5a>
 801a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f2:	1c5a      	adds	r2, r3, #1
 801a9f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a9f8:	b2d2      	uxtb	r2, r2
 801a9fa:	701a      	strb	r2, [r3, #0]
 801a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	627b      	str	r3, [r7, #36]	; 0x24
 801aa04:	4b36      	ldr	r3, [pc, #216]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801aa06:	689b      	ldr	r3, [r3, #8]
 801aa08:	623b      	str	r3, [r7, #32]
 801aa0a:	e00b      	b.n	801aa24 <SEGGER_SYSVIEW_Start+0xac>
 801aa0c:	6a3b      	ldr	r3, [r7, #32]
 801aa0e:	b2da      	uxtb	r2, r3
 801aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa12:	1c59      	adds	r1, r3, #1
 801aa14:	6279      	str	r1, [r7, #36]	; 0x24
 801aa16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801aa1a:	b2d2      	uxtb	r2, r2
 801aa1c:	701a      	strb	r2, [r3, #0]
 801aa1e:	6a3b      	ldr	r3, [r7, #32]
 801aa20:	09db      	lsrs	r3, r3, #7
 801aa22:	623b      	str	r3, [r7, #32]
 801aa24:	6a3b      	ldr	r3, [r7, #32]
 801aa26:	2b7f      	cmp	r3, #127	; 0x7f
 801aa28:	d8f0      	bhi.n	801aa0c <SEGGER_SYSVIEW_Start+0x94>
 801aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa2c:	1c5a      	adds	r2, r3, #1
 801aa2e:	627a      	str	r2, [r7, #36]	; 0x24
 801aa30:	6a3a      	ldr	r2, [r7, #32]
 801aa32:	b2d2      	uxtb	r2, r2
 801aa34:	701a      	strb	r2, [r3, #0]
 801aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801aa3a:	683b      	ldr	r3, [r7, #0]
 801aa3c:	61fb      	str	r3, [r7, #28]
 801aa3e:	4b28      	ldr	r3, [pc, #160]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801aa40:	691b      	ldr	r3, [r3, #16]
 801aa42:	61bb      	str	r3, [r7, #24]
 801aa44:	e00b      	b.n	801aa5e <SEGGER_SYSVIEW_Start+0xe6>
 801aa46:	69bb      	ldr	r3, [r7, #24]
 801aa48:	b2da      	uxtb	r2, r3
 801aa4a:	69fb      	ldr	r3, [r7, #28]
 801aa4c:	1c59      	adds	r1, r3, #1
 801aa4e:	61f9      	str	r1, [r7, #28]
 801aa50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801aa54:	b2d2      	uxtb	r2, r2
 801aa56:	701a      	strb	r2, [r3, #0]
 801aa58:	69bb      	ldr	r3, [r7, #24]
 801aa5a:	09db      	lsrs	r3, r3, #7
 801aa5c:	61bb      	str	r3, [r7, #24]
 801aa5e:	69bb      	ldr	r3, [r7, #24]
 801aa60:	2b7f      	cmp	r3, #127	; 0x7f
 801aa62:	d8f0      	bhi.n	801aa46 <SEGGER_SYSVIEW_Start+0xce>
 801aa64:	69fb      	ldr	r3, [r7, #28]
 801aa66:	1c5a      	adds	r2, r3, #1
 801aa68:	61fa      	str	r2, [r7, #28]
 801aa6a:	69ba      	ldr	r2, [r7, #24]
 801aa6c:	b2d2      	uxtb	r2, r2
 801aa6e:	701a      	strb	r2, [r3, #0]
 801aa70:	69fb      	ldr	r3, [r7, #28]
 801aa72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801aa74:	683b      	ldr	r3, [r7, #0]
 801aa76:	617b      	str	r3, [r7, #20]
 801aa78:	2300      	movs	r3, #0
 801aa7a:	613b      	str	r3, [r7, #16]
 801aa7c:	e00b      	b.n	801aa96 <SEGGER_SYSVIEW_Start+0x11e>
 801aa7e:	693b      	ldr	r3, [r7, #16]
 801aa80:	b2da      	uxtb	r2, r3
 801aa82:	697b      	ldr	r3, [r7, #20]
 801aa84:	1c59      	adds	r1, r3, #1
 801aa86:	6179      	str	r1, [r7, #20]
 801aa88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801aa8c:	b2d2      	uxtb	r2, r2
 801aa8e:	701a      	strb	r2, [r3, #0]
 801aa90:	693b      	ldr	r3, [r7, #16]
 801aa92:	09db      	lsrs	r3, r3, #7
 801aa94:	613b      	str	r3, [r7, #16]
 801aa96:	693b      	ldr	r3, [r7, #16]
 801aa98:	2b7f      	cmp	r3, #127	; 0x7f
 801aa9a:	d8f0      	bhi.n	801aa7e <SEGGER_SYSVIEW_Start+0x106>
 801aa9c:	697b      	ldr	r3, [r7, #20]
 801aa9e:	1c5a      	adds	r2, r3, #1
 801aaa0:	617a      	str	r2, [r7, #20]
 801aaa2:	693a      	ldr	r2, [r7, #16]
 801aaa4:	b2d2      	uxtb	r2, r2
 801aaa6:	701a      	strb	r2, [r3, #0]
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801aaac:	2218      	movs	r2, #24
 801aaae:	6839      	ldr	r1, [r7, #0]
 801aab0:	6878      	ldr	r0, [r7, #4]
 801aab2:	f7ff fbab 	bl	801a20c <_SendPacket>
      RECORD_END();
 801aab6:	68bb      	ldr	r3, [r7, #8]
 801aab8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 801aabc:	4b08      	ldr	r3, [pc, #32]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d002      	beq.n	801aaca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 801aac4:	4b06      	ldr	r3, [pc, #24]	; (801aae0 <SEGGER_SYSVIEW_Start+0x168>)
 801aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aac8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 801aaca:	f000 f9eb 	bl	801aea4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801aace:	f000 f9b1 	bl	801ae34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 801aad2:	f000 fba9 	bl	801b228 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 801aad6:	bf00      	nop
 801aad8:	3730      	adds	r7, #48	; 0x30
 801aada:	46bd      	mov	sp, r7
 801aadc:	bd80      	pop	{r7, pc}
 801aade:	bf00      	nop
 801aae0:	2001b4a8 	.word	0x2001b4a8
 801aae4:	0801c800 	.word	0x0801c800
 801aae8:	2001b4d8 	.word	0x2001b4d8

0801aaec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b082      	sub	sp, #8
 801aaf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801aaf2:	f3ef 8311 	mrs	r3, BASEPRI
 801aaf6:	f04f 0120 	mov.w	r1, #32
 801aafa:	f381 8811 	msr	BASEPRI, r1
 801aafe:	607b      	str	r3, [r7, #4]
 801ab00:	480b      	ldr	r0, [pc, #44]	; (801ab30 <SEGGER_SYSVIEW_Stop+0x44>)
 801ab02:	f7ff fa93 	bl	801a02c <_PreparePacket>
 801ab06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 801ab08:	4b0a      	ldr	r3, [pc, #40]	; (801ab34 <SEGGER_SYSVIEW_Stop+0x48>)
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d007      	beq.n	801ab20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 801ab10:	220b      	movs	r2, #11
 801ab12:	6839      	ldr	r1, [r7, #0]
 801ab14:	6838      	ldr	r0, [r7, #0]
 801ab16:	f7ff fb79 	bl	801a20c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801ab1a:	4b06      	ldr	r3, [pc, #24]	; (801ab34 <SEGGER_SYSVIEW_Stop+0x48>)
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	f383 8811 	msr	BASEPRI, r3
}
 801ab26:	bf00      	nop
 801ab28:	3708      	adds	r7, #8
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	bd80      	pop	{r7, pc}
 801ab2e:	bf00      	nop
 801ab30:	2001b4d8 	.word	0x2001b4d8
 801ab34:	2001b4a8 	.word	0x2001b4a8

0801ab38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b08c      	sub	sp, #48	; 0x30
 801ab3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801ab3e:	f3ef 8311 	mrs	r3, BASEPRI
 801ab42:	f04f 0120 	mov.w	r1, #32
 801ab46:	f381 8811 	msr	BASEPRI, r1
 801ab4a:	60fb      	str	r3, [r7, #12]
 801ab4c:	4845      	ldr	r0, [pc, #276]	; (801ac64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801ab4e:	f7ff fa6d 	bl	801a02c <_PreparePacket>
 801ab52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab5c:	4b42      	ldr	r3, [pc, #264]	; (801ac68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801ab5e:	685b      	ldr	r3, [r3, #4]
 801ab60:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab62:	e00b      	b.n	801ab7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 801ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab66:	b2da      	uxtb	r2, r3
 801ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab6a:	1c59      	adds	r1, r3, #1
 801ab6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ab6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801ab72:	b2d2      	uxtb	r2, r2
 801ab74:	701a      	strb	r2, [r3, #0]
 801ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab78:	09db      	lsrs	r3, r3, #7
 801ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab7e:	2b7f      	cmp	r3, #127	; 0x7f
 801ab80:	d8f0      	bhi.n	801ab64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 801ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab84:	1c5a      	adds	r2, r3, #1
 801ab86:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ab88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ab8a:	b2d2      	uxtb	r2, r2
 801ab8c:	701a      	strb	r2, [r3, #0]
 801ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	627b      	str	r3, [r7, #36]	; 0x24
 801ab96:	4b34      	ldr	r3, [pc, #208]	; (801ac68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801ab98:	689b      	ldr	r3, [r3, #8]
 801ab9a:	623b      	str	r3, [r7, #32]
 801ab9c:	e00b      	b.n	801abb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 801ab9e:	6a3b      	ldr	r3, [r7, #32]
 801aba0:	b2da      	uxtb	r2, r3
 801aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aba4:	1c59      	adds	r1, r3, #1
 801aba6:	6279      	str	r1, [r7, #36]	; 0x24
 801aba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801abac:	b2d2      	uxtb	r2, r2
 801abae:	701a      	strb	r2, [r3, #0]
 801abb0:	6a3b      	ldr	r3, [r7, #32]
 801abb2:	09db      	lsrs	r3, r3, #7
 801abb4:	623b      	str	r3, [r7, #32]
 801abb6:	6a3b      	ldr	r3, [r7, #32]
 801abb8:	2b7f      	cmp	r3, #127	; 0x7f
 801abba:	d8f0      	bhi.n	801ab9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 801abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abbe:	1c5a      	adds	r2, r3, #1
 801abc0:	627a      	str	r2, [r7, #36]	; 0x24
 801abc2:	6a3a      	ldr	r2, [r7, #32]
 801abc4:	b2d2      	uxtb	r2, r2
 801abc6:	701a      	strb	r2, [r3, #0]
 801abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	61fb      	str	r3, [r7, #28]
 801abd0:	4b25      	ldr	r3, [pc, #148]	; (801ac68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801abd2:	691b      	ldr	r3, [r3, #16]
 801abd4:	61bb      	str	r3, [r7, #24]
 801abd6:	e00b      	b.n	801abf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 801abd8:	69bb      	ldr	r3, [r7, #24]
 801abda:	b2da      	uxtb	r2, r3
 801abdc:	69fb      	ldr	r3, [r7, #28]
 801abde:	1c59      	adds	r1, r3, #1
 801abe0:	61f9      	str	r1, [r7, #28]
 801abe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801abe6:	b2d2      	uxtb	r2, r2
 801abe8:	701a      	strb	r2, [r3, #0]
 801abea:	69bb      	ldr	r3, [r7, #24]
 801abec:	09db      	lsrs	r3, r3, #7
 801abee:	61bb      	str	r3, [r7, #24]
 801abf0:	69bb      	ldr	r3, [r7, #24]
 801abf2:	2b7f      	cmp	r3, #127	; 0x7f
 801abf4:	d8f0      	bhi.n	801abd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 801abf6:	69fb      	ldr	r3, [r7, #28]
 801abf8:	1c5a      	adds	r2, r3, #1
 801abfa:	61fa      	str	r2, [r7, #28]
 801abfc:	69ba      	ldr	r2, [r7, #24]
 801abfe:	b2d2      	uxtb	r2, r2
 801ac00:	701a      	strb	r2, [r3, #0]
 801ac02:	69fb      	ldr	r3, [r7, #28]
 801ac04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	617b      	str	r3, [r7, #20]
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	613b      	str	r3, [r7, #16]
 801ac0e:	e00b      	b.n	801ac28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 801ac10:	693b      	ldr	r3, [r7, #16]
 801ac12:	b2da      	uxtb	r2, r3
 801ac14:	697b      	ldr	r3, [r7, #20]
 801ac16:	1c59      	adds	r1, r3, #1
 801ac18:	6179      	str	r1, [r7, #20]
 801ac1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801ac1e:	b2d2      	uxtb	r2, r2
 801ac20:	701a      	strb	r2, [r3, #0]
 801ac22:	693b      	ldr	r3, [r7, #16]
 801ac24:	09db      	lsrs	r3, r3, #7
 801ac26:	613b      	str	r3, [r7, #16]
 801ac28:	693b      	ldr	r3, [r7, #16]
 801ac2a:	2b7f      	cmp	r3, #127	; 0x7f
 801ac2c:	d8f0      	bhi.n	801ac10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801ac2e:	697b      	ldr	r3, [r7, #20]
 801ac30:	1c5a      	adds	r2, r3, #1
 801ac32:	617a      	str	r2, [r7, #20]
 801ac34:	693a      	ldr	r2, [r7, #16]
 801ac36:	b2d2      	uxtb	r2, r2
 801ac38:	701a      	strb	r2, [r3, #0]
 801ac3a:	697b      	ldr	r3, [r7, #20]
 801ac3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801ac3e:	2218      	movs	r2, #24
 801ac40:	6879      	ldr	r1, [r7, #4]
 801ac42:	68b8      	ldr	r0, [r7, #8]
 801ac44:	f7ff fae2 	bl	801a20c <_SendPacket>
  RECORD_END();
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801ac4e:	4b06      	ldr	r3, [pc, #24]	; (801ac68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d002      	beq.n	801ac5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 801ac56:	4b04      	ldr	r3, [pc, #16]	; (801ac68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac5a:	4798      	blx	r3
  }
}
 801ac5c:	bf00      	nop
 801ac5e:	3730      	adds	r7, #48	; 0x30
 801ac60:	46bd      	mov	sp, r7
 801ac62:	bd80      	pop	{r7, pc}
 801ac64:	2001b4d8 	.word	0x2001b4d8
 801ac68:	2001b4a8 	.word	0x2001b4a8

0801ac6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b092      	sub	sp, #72	; 0x48
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 801ac74:	f3ef 8311 	mrs	r3, BASEPRI
 801ac78:	f04f 0120 	mov.w	r1, #32
 801ac7c:	f381 8811 	msr	BASEPRI, r1
 801ac80:	617b      	str	r3, [r7, #20]
 801ac82:	486a      	ldr	r0, [pc, #424]	; (801ae2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 801ac84:	f7ff f9d2 	bl	801a02c <_PreparePacket>
 801ac88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801ac8a:	693b      	ldr	r3, [r7, #16]
 801ac8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	647b      	str	r3, [r7, #68]	; 0x44
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681a      	ldr	r2, [r3, #0]
 801ac96:	4b66      	ldr	r3, [pc, #408]	; (801ae30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 801ac98:	691b      	ldr	r3, [r3, #16]
 801ac9a:	1ad3      	subs	r3, r2, r3
 801ac9c:	643b      	str	r3, [r7, #64]	; 0x40
 801ac9e:	e00b      	b.n	801acb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 801aca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aca2:	b2da      	uxtb	r2, r3
 801aca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aca6:	1c59      	adds	r1, r3, #1
 801aca8:	6479      	str	r1, [r7, #68]	; 0x44
 801acaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801acae:	b2d2      	uxtb	r2, r2
 801acb0:	701a      	strb	r2, [r3, #0]
 801acb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801acb4:	09db      	lsrs	r3, r3, #7
 801acb6:	643b      	str	r3, [r7, #64]	; 0x40
 801acb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801acba:	2b7f      	cmp	r3, #127	; 0x7f
 801acbc:	d8f0      	bhi.n	801aca0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 801acbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801acc0:	1c5a      	adds	r2, r3, #1
 801acc2:	647a      	str	r2, [r7, #68]	; 0x44
 801acc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801acc6:	b2d2      	uxtb	r2, r2
 801acc8:	701a      	strb	r2, [r3, #0]
 801acca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801accc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	689b      	ldr	r3, [r3, #8]
 801acd6:	63bb      	str	r3, [r7, #56]	; 0x38
 801acd8:	e00b      	b.n	801acf2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 801acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acdc:	b2da      	uxtb	r2, r3
 801acde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ace0:	1c59      	adds	r1, r3, #1
 801ace2:	63f9      	str	r1, [r7, #60]	; 0x3c
 801ace4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801ace8:	b2d2      	uxtb	r2, r2
 801acea:	701a      	strb	r2, [r3, #0]
 801acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acee:	09db      	lsrs	r3, r3, #7
 801acf0:	63bb      	str	r3, [r7, #56]	; 0x38
 801acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acf4:	2b7f      	cmp	r3, #127	; 0x7f
 801acf6:	d8f0      	bhi.n	801acda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 801acf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801acfa:	1c5a      	adds	r2, r3, #1
 801acfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 801acfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ad00:	b2d2      	uxtb	r2, r2
 801ad02:	701a      	strb	r2, [r3, #0]
 801ad04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	2220      	movs	r2, #32
 801ad0e:	4619      	mov	r1, r3
 801ad10:	68f8      	ldr	r0, [r7, #12]
 801ad12:	f7ff f93b 	bl	8019f8c <_EncodeStr>
 801ad16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 801ad18:	2209      	movs	r2, #9
 801ad1a:	68f9      	ldr	r1, [r7, #12]
 801ad1c:	6938      	ldr	r0, [r7, #16]
 801ad1e:	f7ff fa75 	bl	801a20c <_SendPacket>
  //
  pPayload = pPayloadStart;
 801ad22:	693b      	ldr	r3, [r7, #16]
 801ad24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	637b      	str	r3, [r7, #52]	; 0x34
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681a      	ldr	r2, [r3, #0]
 801ad2e:	4b40      	ldr	r3, [pc, #256]	; (801ae30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 801ad30:	691b      	ldr	r3, [r3, #16]
 801ad32:	1ad3      	subs	r3, r2, r3
 801ad34:	633b      	str	r3, [r7, #48]	; 0x30
 801ad36:	e00b      	b.n	801ad50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 801ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad3a:	b2da      	uxtb	r2, r3
 801ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad3e:	1c59      	adds	r1, r3, #1
 801ad40:	6379      	str	r1, [r7, #52]	; 0x34
 801ad42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801ad46:	b2d2      	uxtb	r2, r2
 801ad48:	701a      	strb	r2, [r3, #0]
 801ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad4c:	09db      	lsrs	r3, r3, #7
 801ad4e:	633b      	str	r3, [r7, #48]	; 0x30
 801ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad52:	2b7f      	cmp	r3, #127	; 0x7f
 801ad54:	d8f0      	bhi.n	801ad38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 801ad56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad58:	1c5a      	adds	r2, r3, #1
 801ad5a:	637a      	str	r2, [r7, #52]	; 0x34
 801ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad5e:	b2d2      	uxtb	r2, r2
 801ad60:	701a      	strb	r2, [r3, #0]
 801ad62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	68db      	ldr	r3, [r3, #12]
 801ad6e:	62bb      	str	r3, [r7, #40]	; 0x28
 801ad70:	e00b      	b.n	801ad8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 801ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad74:	b2da      	uxtb	r2, r3
 801ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad78:	1c59      	adds	r1, r3, #1
 801ad7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ad7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801ad80:	b2d2      	uxtb	r2, r2
 801ad82:	701a      	strb	r2, [r3, #0]
 801ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad86:	09db      	lsrs	r3, r3, #7
 801ad88:	62bb      	str	r3, [r7, #40]	; 0x28
 801ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad8c:	2b7f      	cmp	r3, #127	; 0x7f
 801ad8e:	d8f0      	bhi.n	801ad72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 801ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad92:	1c5a      	adds	r2, r3, #1
 801ad94:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ad96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ad98:	b2d2      	uxtb	r2, r2
 801ad9a:	701a      	strb	r2, [r3, #0]
 801ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	627b      	str	r3, [r7, #36]	; 0x24
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	691b      	ldr	r3, [r3, #16]
 801ada8:	623b      	str	r3, [r7, #32]
 801adaa:	e00b      	b.n	801adc4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 801adac:	6a3b      	ldr	r3, [r7, #32]
 801adae:	b2da      	uxtb	r2, r3
 801adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb2:	1c59      	adds	r1, r3, #1
 801adb4:	6279      	str	r1, [r7, #36]	; 0x24
 801adb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801adba:	b2d2      	uxtb	r2, r2
 801adbc:	701a      	strb	r2, [r3, #0]
 801adbe:	6a3b      	ldr	r3, [r7, #32]
 801adc0:	09db      	lsrs	r3, r3, #7
 801adc2:	623b      	str	r3, [r7, #32]
 801adc4:	6a3b      	ldr	r3, [r7, #32]
 801adc6:	2b7f      	cmp	r3, #127	; 0x7f
 801adc8:	d8f0      	bhi.n	801adac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 801adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adcc:	1c5a      	adds	r2, r3, #1
 801adce:	627a      	str	r2, [r7, #36]	; 0x24
 801add0:	6a3a      	ldr	r2, [r7, #32]
 801add2:	b2d2      	uxtb	r2, r2
 801add4:	701a      	strb	r2, [r3, #0]
 801add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	61fb      	str	r3, [r7, #28]
 801adde:	2300      	movs	r3, #0
 801ade0:	61bb      	str	r3, [r7, #24]
 801ade2:	e00b      	b.n	801adfc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 801ade4:	69bb      	ldr	r3, [r7, #24]
 801ade6:	b2da      	uxtb	r2, r3
 801ade8:	69fb      	ldr	r3, [r7, #28]
 801adea:	1c59      	adds	r1, r3, #1
 801adec:	61f9      	str	r1, [r7, #28]
 801adee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801adf2:	b2d2      	uxtb	r2, r2
 801adf4:	701a      	strb	r2, [r3, #0]
 801adf6:	69bb      	ldr	r3, [r7, #24]
 801adf8:	09db      	lsrs	r3, r3, #7
 801adfa:	61bb      	str	r3, [r7, #24]
 801adfc:	69bb      	ldr	r3, [r7, #24]
 801adfe:	2b7f      	cmp	r3, #127	; 0x7f
 801ae00:	d8f0      	bhi.n	801ade4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 801ae02:	69fb      	ldr	r3, [r7, #28]
 801ae04:	1c5a      	adds	r2, r3, #1
 801ae06:	61fa      	str	r2, [r7, #28]
 801ae08:	69ba      	ldr	r2, [r7, #24]
 801ae0a:	b2d2      	uxtb	r2, r2
 801ae0c:	701a      	strb	r2, [r3, #0]
 801ae0e:	69fb      	ldr	r3, [r7, #28]
 801ae10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 801ae12:	2215      	movs	r2, #21
 801ae14:	68f9      	ldr	r1, [r7, #12]
 801ae16:	6938      	ldr	r0, [r7, #16]
 801ae18:	f7ff f9f8 	bl	801a20c <_SendPacket>
  RECORD_END();
 801ae1c:	697b      	ldr	r3, [r7, #20]
 801ae1e:	f383 8811 	msr	BASEPRI, r3
}
 801ae22:	bf00      	nop
 801ae24:	3748      	adds	r7, #72	; 0x48
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}
 801ae2a:	bf00      	nop
 801ae2c:	2001b4d8 	.word	0x2001b4d8
 801ae30:	2001b4a8 	.word	0x2001b4a8

0801ae34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 801ae34:	b580      	push	{r7, lr}
 801ae36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 801ae38:	4b07      	ldr	r3, [pc, #28]	; (801ae58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801ae3a:	6a1b      	ldr	r3, [r3, #32]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d008      	beq.n	801ae52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 801ae40:	4b05      	ldr	r3, [pc, #20]	; (801ae58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801ae42:	6a1b      	ldr	r3, [r3, #32]
 801ae44:	685b      	ldr	r3, [r3, #4]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d003      	beq.n	801ae52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 801ae4a:	4b03      	ldr	r3, [pc, #12]	; (801ae58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801ae4c:	6a1b      	ldr	r3, [r3, #32]
 801ae4e:	685b      	ldr	r3, [r3, #4]
 801ae50:	4798      	blx	r3
  }
}
 801ae52:	bf00      	nop
 801ae54:	bd80      	pop	{r7, pc}
 801ae56:	bf00      	nop
 801ae58:	2001b4a8 	.word	0x2001b4a8

0801ae5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b086      	sub	sp, #24
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801ae64:	f3ef 8311 	mrs	r3, BASEPRI
 801ae68:	f04f 0120 	mov.w	r1, #32
 801ae6c:	f381 8811 	msr	BASEPRI, r1
 801ae70:	617b      	str	r3, [r7, #20]
 801ae72:	480b      	ldr	r0, [pc, #44]	; (801aea0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 801ae74:	f7ff f8da 	bl	801a02c <_PreparePacket>
 801ae78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801ae7a:	2280      	movs	r2, #128	; 0x80
 801ae7c:	6879      	ldr	r1, [r7, #4]
 801ae7e:	6938      	ldr	r0, [r7, #16]
 801ae80:	f7ff f884 	bl	8019f8c <_EncodeStr>
 801ae84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 801ae86:	220e      	movs	r2, #14
 801ae88:	68f9      	ldr	r1, [r7, #12]
 801ae8a:	6938      	ldr	r0, [r7, #16]
 801ae8c:	f7ff f9be 	bl	801a20c <_SendPacket>
  RECORD_END();
 801ae90:	697b      	ldr	r3, [r7, #20]
 801ae92:	f383 8811 	msr	BASEPRI, r3
}
 801ae96:	bf00      	nop
 801ae98:	3718      	adds	r7, #24
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd80      	pop	{r7, pc}
 801ae9e:	bf00      	nop
 801aea0:	2001b4d8 	.word	0x2001b4d8

0801aea4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 801aea4:	b590      	push	{r4, r7, lr}
 801aea6:	b083      	sub	sp, #12
 801aea8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 801aeaa:	4b15      	ldr	r3, [pc, #84]	; (801af00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801aeac:	6a1b      	ldr	r3, [r3, #32]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d01a      	beq.n	801aee8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 801aeb2:	4b13      	ldr	r3, [pc, #76]	; (801af00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801aeb4:	6a1b      	ldr	r3, [r3, #32]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d015      	beq.n	801aee8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 801aebc:	4b10      	ldr	r3, [pc, #64]	; (801af00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 801aebe:	6a1b      	ldr	r3, [r3, #32]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	4798      	blx	r3
 801aec4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801aec8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 801aeca:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aece:	f04f 0200 	mov.w	r2, #0
 801aed2:	f04f 0300 	mov.w	r3, #0
 801aed6:	000a      	movs	r2, r1
 801aed8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801aeda:	4613      	mov	r3, r2
 801aedc:	461a      	mov	r2, r3
 801aede:	4621      	mov	r1, r4
 801aee0:	200d      	movs	r0, #13
 801aee2:	f7ff fbe7 	bl	801a6b4 <SEGGER_SYSVIEW_RecordU32x2>
 801aee6:	e006      	b.n	801aef6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 801aee8:	4b06      	ldr	r3, [pc, #24]	; (801af04 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	4619      	mov	r1, r3
 801aeee:	200c      	movs	r0, #12
 801aef0:	f7ff fba4 	bl	801a63c <SEGGER_SYSVIEW_RecordU32>
  }
}
 801aef4:	bf00      	nop
 801aef6:	bf00      	nop
 801aef8:	370c      	adds	r7, #12
 801aefa:	46bd      	mov	sp, r7
 801aefc:	bd90      	pop	{r4, r7, pc}
 801aefe:	bf00      	nop
 801af00:	2001b4a8 	.word	0x2001b4a8
 801af04:	e0001004 	.word	0xe0001004

0801af08 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 801af08:	b580      	push	{r7, lr}
 801af0a:	b082      	sub	sp, #8
 801af0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801af0e:	f3ef 8311 	mrs	r3, BASEPRI
 801af12:	f04f 0120 	mov.w	r1, #32
 801af16:	f381 8811 	msr	BASEPRI, r1
 801af1a:	607b      	str	r3, [r7, #4]
 801af1c:	4807      	ldr	r0, [pc, #28]	; (801af3c <SEGGER_SYSVIEW_OnIdle+0x34>)
 801af1e:	f7ff f885 	bl	801a02c <_PreparePacket>
 801af22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 801af24:	2211      	movs	r2, #17
 801af26:	6839      	ldr	r1, [r7, #0]
 801af28:	6838      	ldr	r0, [r7, #0]
 801af2a:	f7ff f96f 	bl	801a20c <_SendPacket>
  RECORD_END();
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	f383 8811 	msr	BASEPRI, r3
}
 801af34:	bf00      	nop
 801af36:	3708      	adds	r7, #8
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	2001b4d8 	.word	0x2001b4d8

0801af40 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 801af40:	b580      	push	{r7, lr}
 801af42:	b088      	sub	sp, #32
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801af48:	f3ef 8311 	mrs	r3, BASEPRI
 801af4c:	f04f 0120 	mov.w	r1, #32
 801af50:	f381 8811 	msr	BASEPRI, r1
 801af54:	617b      	str	r3, [r7, #20]
 801af56:	4819      	ldr	r0, [pc, #100]	; (801afbc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 801af58:	f7ff f868 	bl	801a02c <_PreparePacket>
 801af5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801af5e:	693b      	ldr	r3, [r7, #16]
 801af60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801af62:	4b17      	ldr	r3, [pc, #92]	; (801afc0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 801af64:	691b      	ldr	r3, [r3, #16]
 801af66:	687a      	ldr	r2, [r7, #4]
 801af68:	1ad3      	subs	r3, r2, r3
 801af6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	61fb      	str	r3, [r7, #28]
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	61bb      	str	r3, [r7, #24]
 801af74:	e00b      	b.n	801af8e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 801af76:	69bb      	ldr	r3, [r7, #24]
 801af78:	b2da      	uxtb	r2, r3
 801af7a:	69fb      	ldr	r3, [r7, #28]
 801af7c:	1c59      	adds	r1, r3, #1
 801af7e:	61f9      	str	r1, [r7, #28]
 801af80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801af84:	b2d2      	uxtb	r2, r2
 801af86:	701a      	strb	r2, [r3, #0]
 801af88:	69bb      	ldr	r3, [r7, #24]
 801af8a:	09db      	lsrs	r3, r3, #7
 801af8c:	61bb      	str	r3, [r7, #24]
 801af8e:	69bb      	ldr	r3, [r7, #24]
 801af90:	2b7f      	cmp	r3, #127	; 0x7f
 801af92:	d8f0      	bhi.n	801af76 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 801af94:	69fb      	ldr	r3, [r7, #28]
 801af96:	1c5a      	adds	r2, r3, #1
 801af98:	61fa      	str	r2, [r7, #28]
 801af9a:	69ba      	ldr	r2, [r7, #24]
 801af9c:	b2d2      	uxtb	r2, r2
 801af9e:	701a      	strb	r2, [r3, #0]
 801afa0:	69fb      	ldr	r3, [r7, #28]
 801afa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 801afa4:	2208      	movs	r2, #8
 801afa6:	68f9      	ldr	r1, [r7, #12]
 801afa8:	6938      	ldr	r0, [r7, #16]
 801afaa:	f7ff f92f 	bl	801a20c <_SendPacket>
  RECORD_END();
 801afae:	697b      	ldr	r3, [r7, #20]
 801afb0:	f383 8811 	msr	BASEPRI, r3
}
 801afb4:	bf00      	nop
 801afb6:	3720      	adds	r7, #32
 801afb8:	46bd      	mov	sp, r7
 801afba:	bd80      	pop	{r7, pc}
 801afbc:	2001b4d8 	.word	0x2001b4d8
 801afc0:	2001b4a8 	.word	0x2001b4a8

0801afc4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b088      	sub	sp, #32
 801afc8:	af00      	add	r7, sp, #0
 801afca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801afcc:	f3ef 8311 	mrs	r3, BASEPRI
 801afd0:	f04f 0120 	mov.w	r1, #32
 801afd4:	f381 8811 	msr	BASEPRI, r1
 801afd8:	617b      	str	r3, [r7, #20]
 801afda:	4819      	ldr	r0, [pc, #100]	; (801b040 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 801afdc:	f7ff f826 	bl	801a02c <_PreparePacket>
 801afe0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801afe2:	693b      	ldr	r3, [r7, #16]
 801afe4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801afe6:	4b17      	ldr	r3, [pc, #92]	; (801b044 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 801afe8:	691b      	ldr	r3, [r3, #16]
 801afea:	687a      	ldr	r2, [r7, #4]
 801afec:	1ad3      	subs	r3, r2, r3
 801afee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	61fb      	str	r3, [r7, #28]
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	61bb      	str	r3, [r7, #24]
 801aff8:	e00b      	b.n	801b012 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801affa:	69bb      	ldr	r3, [r7, #24]
 801affc:	b2da      	uxtb	r2, r3
 801affe:	69fb      	ldr	r3, [r7, #28]
 801b000:	1c59      	adds	r1, r3, #1
 801b002:	61f9      	str	r1, [r7, #28]
 801b004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b008:	b2d2      	uxtb	r2, r2
 801b00a:	701a      	strb	r2, [r3, #0]
 801b00c:	69bb      	ldr	r3, [r7, #24]
 801b00e:	09db      	lsrs	r3, r3, #7
 801b010:	61bb      	str	r3, [r7, #24]
 801b012:	69bb      	ldr	r3, [r7, #24]
 801b014:	2b7f      	cmp	r3, #127	; 0x7f
 801b016:	d8f0      	bhi.n	801affa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 801b018:	69fb      	ldr	r3, [r7, #28]
 801b01a:	1c5a      	adds	r2, r3, #1
 801b01c:	61fa      	str	r2, [r7, #28]
 801b01e:	69ba      	ldr	r2, [r7, #24]
 801b020:	b2d2      	uxtb	r2, r2
 801b022:	701a      	strb	r2, [r3, #0]
 801b024:	69fb      	ldr	r3, [r7, #28]
 801b026:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 801b028:	2204      	movs	r2, #4
 801b02a:	68f9      	ldr	r1, [r7, #12]
 801b02c:	6938      	ldr	r0, [r7, #16]
 801b02e:	f7ff f8ed 	bl	801a20c <_SendPacket>
  RECORD_END();
 801b032:	697b      	ldr	r3, [r7, #20]
 801b034:	f383 8811 	msr	BASEPRI, r3
}
 801b038:	bf00      	nop
 801b03a:	3720      	adds	r7, #32
 801b03c:	46bd      	mov	sp, r7
 801b03e:	bd80      	pop	{r7, pc}
 801b040:	2001b4d8 	.word	0x2001b4d8
 801b044:	2001b4a8 	.word	0x2001b4a8

0801b048 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 801b048:	b580      	push	{r7, lr}
 801b04a:	b088      	sub	sp, #32
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801b050:	f3ef 8311 	mrs	r3, BASEPRI
 801b054:	f04f 0120 	mov.w	r1, #32
 801b058:	f381 8811 	msr	BASEPRI, r1
 801b05c:	617b      	str	r3, [r7, #20]
 801b05e:	4819      	ldr	r0, [pc, #100]	; (801b0c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 801b060:	f7fe ffe4 	bl	801a02c <_PreparePacket>
 801b064:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801b066:	693b      	ldr	r3, [r7, #16]
 801b068:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801b06a:	4b17      	ldr	r3, [pc, #92]	; (801b0c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 801b06c:	691b      	ldr	r3, [r3, #16]
 801b06e:	687a      	ldr	r2, [r7, #4]
 801b070:	1ad3      	subs	r3, r2, r3
 801b072:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	61fb      	str	r3, [r7, #28]
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	61bb      	str	r3, [r7, #24]
 801b07c:	e00b      	b.n	801b096 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 801b07e:	69bb      	ldr	r3, [r7, #24]
 801b080:	b2da      	uxtb	r2, r3
 801b082:	69fb      	ldr	r3, [r7, #28]
 801b084:	1c59      	adds	r1, r3, #1
 801b086:	61f9      	str	r1, [r7, #28]
 801b088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b08c:	b2d2      	uxtb	r2, r2
 801b08e:	701a      	strb	r2, [r3, #0]
 801b090:	69bb      	ldr	r3, [r7, #24]
 801b092:	09db      	lsrs	r3, r3, #7
 801b094:	61bb      	str	r3, [r7, #24]
 801b096:	69bb      	ldr	r3, [r7, #24]
 801b098:	2b7f      	cmp	r3, #127	; 0x7f
 801b09a:	d8f0      	bhi.n	801b07e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 801b09c:	69fb      	ldr	r3, [r7, #28]
 801b09e:	1c5a      	adds	r2, r3, #1
 801b0a0:	61fa      	str	r2, [r7, #28]
 801b0a2:	69ba      	ldr	r2, [r7, #24]
 801b0a4:	b2d2      	uxtb	r2, r2
 801b0a6:	701a      	strb	r2, [r3, #0]
 801b0a8:	69fb      	ldr	r3, [r7, #28]
 801b0aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 801b0ac:	2206      	movs	r2, #6
 801b0ae:	68f9      	ldr	r1, [r7, #12]
 801b0b0:	6938      	ldr	r0, [r7, #16]
 801b0b2:	f7ff f8ab 	bl	801a20c <_SendPacket>
  RECORD_END();
 801b0b6:	697b      	ldr	r3, [r7, #20]
 801b0b8:	f383 8811 	msr	BASEPRI, r3
}
 801b0bc:	bf00      	nop
 801b0be:	3720      	adds	r7, #32
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	bd80      	pop	{r7, pc}
 801b0c4:	2001b4d8 	.word	0x2001b4d8
 801b0c8:	2001b4a8 	.word	0x2001b4a8

0801b0cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 801b0cc:	b480      	push	{r7}
 801b0ce:	b083      	sub	sp, #12
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 801b0d4:	4b04      	ldr	r3, [pc, #16]	; (801b0e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 801b0d6:	691b      	ldr	r3, [r3, #16]
 801b0d8:	687a      	ldr	r2, [r7, #4]
 801b0da:	1ad3      	subs	r3, r2, r3
}
 801b0dc:	4618      	mov	r0, r3
 801b0de:	370c      	adds	r7, #12
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e6:	4770      	bx	lr
 801b0e8:	2001b4a8 	.word	0x2001b4a8

0801b0ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b08c      	sub	sp, #48	; 0x30
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 801b0f6:	4b3b      	ldr	r3, [pc, #236]	; (801b1e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d06d      	beq.n	801b1da <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801b0fe:	4b39      	ldr	r3, [pc, #228]	; (801b1e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 801b104:	2300      	movs	r3, #0
 801b106:	62bb      	str	r3, [r7, #40]	; 0x28
 801b108:	e008      	b.n	801b11c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b10c:	691b      	ldr	r3, [r3, #16]
 801b10e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 801b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b112:	2b00      	cmp	r3, #0
 801b114:	d007      	beq.n	801b126 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 801b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b118:	3301      	adds	r3, #1
 801b11a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b11c:	79fb      	ldrb	r3, [r7, #7]
 801b11e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b120:	429a      	cmp	r2, r3
 801b122:	d3f2      	bcc.n	801b10a <SEGGER_SYSVIEW_SendModule+0x1e>
 801b124:	e000      	b.n	801b128 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 801b126:	bf00      	nop
      }
    }
    if (pModule != 0) {
 801b128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d055      	beq.n	801b1da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801b12e:	f3ef 8311 	mrs	r3, BASEPRI
 801b132:	f04f 0120 	mov.w	r1, #32
 801b136:	f381 8811 	msr	BASEPRI, r1
 801b13a:	617b      	str	r3, [r7, #20]
 801b13c:	482a      	ldr	r0, [pc, #168]	; (801b1e8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801b13e:	f7fe ff75 	bl	801a02c <_PreparePacket>
 801b142:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 801b144:	693b      	ldr	r3, [r7, #16]
 801b146:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	627b      	str	r3, [r7, #36]	; 0x24
 801b14c:	79fb      	ldrb	r3, [r7, #7]
 801b14e:	623b      	str	r3, [r7, #32]
 801b150:	e00b      	b.n	801b16a <SEGGER_SYSVIEW_SendModule+0x7e>
 801b152:	6a3b      	ldr	r3, [r7, #32]
 801b154:	b2da      	uxtb	r2, r3
 801b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b158:	1c59      	adds	r1, r3, #1
 801b15a:	6279      	str	r1, [r7, #36]	; 0x24
 801b15c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b160:	b2d2      	uxtb	r2, r2
 801b162:	701a      	strb	r2, [r3, #0]
 801b164:	6a3b      	ldr	r3, [r7, #32]
 801b166:	09db      	lsrs	r3, r3, #7
 801b168:	623b      	str	r3, [r7, #32]
 801b16a:	6a3b      	ldr	r3, [r7, #32]
 801b16c:	2b7f      	cmp	r3, #127	; 0x7f
 801b16e:	d8f0      	bhi.n	801b152 <SEGGER_SYSVIEW_SendModule+0x66>
 801b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b172:	1c5a      	adds	r2, r3, #1
 801b174:	627a      	str	r2, [r7, #36]	; 0x24
 801b176:	6a3a      	ldr	r2, [r7, #32]
 801b178:	b2d2      	uxtb	r2, r2
 801b17a:	701a      	strb	r2, [r3, #0]
 801b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b17e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801b180:	68fb      	ldr	r3, [r7, #12]
 801b182:	61fb      	str	r3, [r7, #28]
 801b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b186:	689b      	ldr	r3, [r3, #8]
 801b188:	61bb      	str	r3, [r7, #24]
 801b18a:	e00b      	b.n	801b1a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 801b18c:	69bb      	ldr	r3, [r7, #24]
 801b18e:	b2da      	uxtb	r2, r3
 801b190:	69fb      	ldr	r3, [r7, #28]
 801b192:	1c59      	adds	r1, r3, #1
 801b194:	61f9      	str	r1, [r7, #28]
 801b196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b19a:	b2d2      	uxtb	r2, r2
 801b19c:	701a      	strb	r2, [r3, #0]
 801b19e:	69bb      	ldr	r3, [r7, #24]
 801b1a0:	09db      	lsrs	r3, r3, #7
 801b1a2:	61bb      	str	r3, [r7, #24]
 801b1a4:	69bb      	ldr	r3, [r7, #24]
 801b1a6:	2b7f      	cmp	r3, #127	; 0x7f
 801b1a8:	d8f0      	bhi.n	801b18c <SEGGER_SYSVIEW_SendModule+0xa0>
 801b1aa:	69fb      	ldr	r3, [r7, #28]
 801b1ac:	1c5a      	adds	r2, r3, #1
 801b1ae:	61fa      	str	r2, [r7, #28]
 801b1b0:	69ba      	ldr	r2, [r7, #24]
 801b1b2:	b2d2      	uxtb	r2, r2
 801b1b4:	701a      	strb	r2, [r3, #0]
 801b1b6:	69fb      	ldr	r3, [r7, #28]
 801b1b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	2280      	movs	r2, #128	; 0x80
 801b1c0:	4619      	mov	r1, r3
 801b1c2:	68f8      	ldr	r0, [r7, #12]
 801b1c4:	f7fe fee2 	bl	8019f8c <_EncodeStr>
 801b1c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801b1ca:	2216      	movs	r2, #22
 801b1cc:	68f9      	ldr	r1, [r7, #12]
 801b1ce:	6938      	ldr	r0, [r7, #16]
 801b1d0:	f7ff f81c 	bl	801a20c <_SendPacket>
      RECORD_END();
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 801b1da:	bf00      	nop
 801b1dc:	3730      	adds	r7, #48	; 0x30
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	bd80      	pop	{r7, pc}
 801b1e2:	bf00      	nop
 801b1e4:	2001b4d0 	.word	0x2001b4d0
 801b1e8:	2001b4d8 	.word	0x2001b4d8

0801b1ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801b1f2:	4b0c      	ldr	r3, [pc, #48]	; (801b224 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d00f      	beq.n	801b21a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801b1fa:	4b0a      	ldr	r3, [pc, #40]	; (801b224 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	68db      	ldr	r3, [r3, #12]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d002      	beq.n	801b20e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	68db      	ldr	r3, [r3, #12]
 801b20c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	691b      	ldr	r3, [r3, #16]
 801b212:	607b      	str	r3, [r7, #4]
    } while (pModule);
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d1f2      	bne.n	801b200 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801b21a:	bf00      	nop
 801b21c:	3708      	adds	r7, #8
 801b21e:	46bd      	mov	sp, r7
 801b220:	bd80      	pop	{r7, pc}
 801b222:	bf00      	nop
 801b224:	2001b4d0 	.word	0x2001b4d0

0801b228 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 801b228:	b580      	push	{r7, lr}
 801b22a:	b086      	sub	sp, #24
 801b22c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801b22e:	f3ef 8311 	mrs	r3, BASEPRI
 801b232:	f04f 0120 	mov.w	r1, #32
 801b236:	f381 8811 	msr	BASEPRI, r1
 801b23a:	60fb      	str	r3, [r7, #12]
 801b23c:	4817      	ldr	r0, [pc, #92]	; (801b29c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801b23e:	f7fe fef5 	bl	801a02c <_PreparePacket>
 801b242:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	617b      	str	r3, [r7, #20]
 801b24c:	4b14      	ldr	r3, [pc, #80]	; (801b2a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801b24e:	781b      	ldrb	r3, [r3, #0]
 801b250:	613b      	str	r3, [r7, #16]
 801b252:	e00b      	b.n	801b26c <SEGGER_SYSVIEW_SendNumModules+0x44>
 801b254:	693b      	ldr	r3, [r7, #16]
 801b256:	b2da      	uxtb	r2, r3
 801b258:	697b      	ldr	r3, [r7, #20]
 801b25a:	1c59      	adds	r1, r3, #1
 801b25c:	6179      	str	r1, [r7, #20]
 801b25e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b262:	b2d2      	uxtb	r2, r2
 801b264:	701a      	strb	r2, [r3, #0]
 801b266:	693b      	ldr	r3, [r7, #16]
 801b268:	09db      	lsrs	r3, r3, #7
 801b26a:	613b      	str	r3, [r7, #16]
 801b26c:	693b      	ldr	r3, [r7, #16]
 801b26e:	2b7f      	cmp	r3, #127	; 0x7f
 801b270:	d8f0      	bhi.n	801b254 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801b272:	697b      	ldr	r3, [r7, #20]
 801b274:	1c5a      	adds	r2, r3, #1
 801b276:	617a      	str	r2, [r7, #20]
 801b278:	693a      	ldr	r2, [r7, #16]
 801b27a:	b2d2      	uxtb	r2, r2
 801b27c:	701a      	strb	r2, [r3, #0]
 801b27e:	697b      	ldr	r3, [r7, #20]
 801b280:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801b282:	221b      	movs	r2, #27
 801b284:	6879      	ldr	r1, [r7, #4]
 801b286:	68b8      	ldr	r0, [r7, #8]
 801b288:	f7fe ffc0 	bl	801a20c <_SendPacket>
  RECORD_END();
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	f383 8811 	msr	BASEPRI, r3
}
 801b292:	bf00      	nop
 801b294:	3718      	adds	r7, #24
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	bf00      	nop
 801b29c:	2001b4d8 	.word	0x2001b4d8
 801b2a0:	2001b4d4 	.word	0x2001b4d4

0801b2a4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 801b2a4:	b40f      	push	{r0, r1, r2, r3}
 801b2a6:	b580      	push	{r7, lr}
 801b2a8:	b082      	sub	sp, #8
 801b2aa:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 801b2ac:	f107 0314 	add.w	r3, r7, #20
 801b2b0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 801b2b2:	1d3b      	adds	r3, r7, #4
 801b2b4:	461a      	mov	r2, r3
 801b2b6:	2100      	movs	r1, #0
 801b2b8:	6938      	ldr	r0, [r7, #16]
 801b2ba:	f7ff f88d 	bl	801a3d8 <_VPrintHost>
  va_end(ParamList);
#endif
}
 801b2be:	bf00      	nop
 801b2c0:	3708      	adds	r7, #8
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b2c8:	b004      	add	sp, #16
 801b2ca:	4770      	bx	lr

0801b2cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 801b2cc:	b580      	push	{r7, lr}
 801b2ce:	b08a      	sub	sp, #40	; 0x28
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801b2d4:	f3ef 8311 	mrs	r3, BASEPRI
 801b2d8:	f04f 0120 	mov.w	r1, #32
 801b2dc:	f381 8811 	msr	BASEPRI, r1
 801b2e0:	617b      	str	r3, [r7, #20]
 801b2e2:	4827      	ldr	r0, [pc, #156]	; (801b380 <SEGGER_SYSVIEW_Warn+0xb4>)
 801b2e4:	f7fe fea2 	bl	801a02c <_PreparePacket>
 801b2e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801b2ea:	2280      	movs	r2, #128	; 0x80
 801b2ec:	6879      	ldr	r1, [r7, #4]
 801b2ee:	6938      	ldr	r0, [r7, #16]
 801b2f0:	f7fe fe4c 	bl	8019f8c <_EncodeStr>
 801b2f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	627b      	str	r3, [r7, #36]	; 0x24
 801b2fa:	2301      	movs	r3, #1
 801b2fc:	623b      	str	r3, [r7, #32]
 801b2fe:	e00b      	b.n	801b318 <SEGGER_SYSVIEW_Warn+0x4c>
 801b300:	6a3b      	ldr	r3, [r7, #32]
 801b302:	b2da      	uxtb	r2, r3
 801b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b306:	1c59      	adds	r1, r3, #1
 801b308:	6279      	str	r1, [r7, #36]	; 0x24
 801b30a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b30e:	b2d2      	uxtb	r2, r2
 801b310:	701a      	strb	r2, [r3, #0]
 801b312:	6a3b      	ldr	r3, [r7, #32]
 801b314:	09db      	lsrs	r3, r3, #7
 801b316:	623b      	str	r3, [r7, #32]
 801b318:	6a3b      	ldr	r3, [r7, #32]
 801b31a:	2b7f      	cmp	r3, #127	; 0x7f
 801b31c:	d8f0      	bhi.n	801b300 <SEGGER_SYSVIEW_Warn+0x34>
 801b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b320:	1c5a      	adds	r2, r3, #1
 801b322:	627a      	str	r2, [r7, #36]	; 0x24
 801b324:	6a3a      	ldr	r2, [r7, #32]
 801b326:	b2d2      	uxtb	r2, r2
 801b328:	701a      	strb	r2, [r3, #0]
 801b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b32c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	61fb      	str	r3, [r7, #28]
 801b332:	2300      	movs	r3, #0
 801b334:	61bb      	str	r3, [r7, #24]
 801b336:	e00b      	b.n	801b350 <SEGGER_SYSVIEW_Warn+0x84>
 801b338:	69bb      	ldr	r3, [r7, #24]
 801b33a:	b2da      	uxtb	r2, r3
 801b33c:	69fb      	ldr	r3, [r7, #28]
 801b33e:	1c59      	adds	r1, r3, #1
 801b340:	61f9      	str	r1, [r7, #28]
 801b342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b346:	b2d2      	uxtb	r2, r2
 801b348:	701a      	strb	r2, [r3, #0]
 801b34a:	69bb      	ldr	r3, [r7, #24]
 801b34c:	09db      	lsrs	r3, r3, #7
 801b34e:	61bb      	str	r3, [r7, #24]
 801b350:	69bb      	ldr	r3, [r7, #24]
 801b352:	2b7f      	cmp	r3, #127	; 0x7f
 801b354:	d8f0      	bhi.n	801b338 <SEGGER_SYSVIEW_Warn+0x6c>
 801b356:	69fb      	ldr	r3, [r7, #28]
 801b358:	1c5a      	adds	r2, r3, #1
 801b35a:	61fa      	str	r2, [r7, #28]
 801b35c:	69ba      	ldr	r2, [r7, #24]
 801b35e:	b2d2      	uxtb	r2, r2
 801b360:	701a      	strb	r2, [r3, #0]
 801b362:	69fb      	ldr	r3, [r7, #28]
 801b364:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801b366:	221a      	movs	r2, #26
 801b368:	68f9      	ldr	r1, [r7, #12]
 801b36a:	6938      	ldr	r0, [r7, #16]
 801b36c:	f7fe ff4e 	bl	801a20c <_SendPacket>
  RECORD_END();
 801b370:	697b      	ldr	r3, [r7, #20]
 801b372:	f383 8811 	msr	BASEPRI, r3
}
 801b376:	bf00      	nop
 801b378:	3728      	adds	r7, #40	; 0x28
 801b37a:	46bd      	mov	sp, r7
 801b37c:	bd80      	pop	{r7, pc}
 801b37e:	bf00      	nop
 801b380:	2001b4d8 	.word	0x2001b4d8

0801b384 <arm_pid_init_f32>:
 801b384:	edd0 6a08 	vldr	s13, [r0, #32]
 801b388:	edd0 7a06 	vldr	s15, [r0, #24]
 801b38c:	ed90 7a07 	vldr	s14, [r0, #28]
 801b390:	edc0 6a02 	vstr	s13, [r0, #8]
 801b394:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b398:	ee36 6aa6 	vadd.f32	s12, s13, s13
 801b39c:	eef1 7a67 	vneg.f32	s15, s15
 801b3a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b3a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b3a8:	ed80 7a00 	vstr	s14, [r0]
 801b3ac:	edc0 7a01 	vstr	s15, [r0, #4]
 801b3b0:	b901      	cbnz	r1, 801b3b4 <arm_pid_init_f32+0x30>
 801b3b2:	4770      	bx	lr
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	60c3      	str	r3, [r0, #12]
 801b3b8:	6103      	str	r3, [r0, #16]
 801b3ba:	6143      	str	r3, [r0, #20]
 801b3bc:	4770      	bx	lr
 801b3be:	bf00      	nop

0801b3c0 <__errno>:
 801b3c0:	4b01      	ldr	r3, [pc, #4]	; (801b3c8 <__errno+0x8>)
 801b3c2:	6818      	ldr	r0, [r3, #0]
 801b3c4:	4770      	bx	lr
 801b3c6:	bf00      	nop
 801b3c8:	20001444 	.word	0x20001444

0801b3cc <__libc_init_array>:
 801b3cc:	b570      	push	{r4, r5, r6, lr}
 801b3ce:	4d0d      	ldr	r5, [pc, #52]	; (801b404 <__libc_init_array+0x38>)
 801b3d0:	4c0d      	ldr	r4, [pc, #52]	; (801b408 <__libc_init_array+0x3c>)
 801b3d2:	1b64      	subs	r4, r4, r5
 801b3d4:	10a4      	asrs	r4, r4, #2
 801b3d6:	2600      	movs	r6, #0
 801b3d8:	42a6      	cmp	r6, r4
 801b3da:	d109      	bne.n	801b3f0 <__libc_init_array+0x24>
 801b3dc:	4d0b      	ldr	r5, [pc, #44]	; (801b40c <__libc_init_array+0x40>)
 801b3de:	4c0c      	ldr	r4, [pc, #48]	; (801b410 <__libc_init_array+0x44>)
 801b3e0:	f000 fe22 	bl	801c028 <_init>
 801b3e4:	1b64      	subs	r4, r4, r5
 801b3e6:	10a4      	asrs	r4, r4, #2
 801b3e8:	2600      	movs	r6, #0
 801b3ea:	42a6      	cmp	r6, r4
 801b3ec:	d105      	bne.n	801b3fa <__libc_init_array+0x2e>
 801b3ee:	bd70      	pop	{r4, r5, r6, pc}
 801b3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3f4:	4798      	blx	r3
 801b3f6:	3601      	adds	r6, #1
 801b3f8:	e7ee      	b.n	801b3d8 <__libc_init_array+0xc>
 801b3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3fe:	4798      	blx	r3
 801b400:	3601      	adds	r6, #1
 801b402:	e7f2      	b.n	801b3ea <__libc_init_array+0x1e>
 801b404:	0801c8a8 	.word	0x0801c8a8
 801b408:	0801c8a8 	.word	0x0801c8a8
 801b40c:	0801c8a8 	.word	0x0801c8a8
 801b410:	0801c8ac 	.word	0x0801c8ac

0801b414 <__retarget_lock_acquire_recursive>:
 801b414:	4770      	bx	lr

0801b416 <__retarget_lock_release_recursive>:
 801b416:	4770      	bx	lr

0801b418 <memcmp>:
 801b418:	b530      	push	{r4, r5, lr}
 801b41a:	3901      	subs	r1, #1
 801b41c:	2400      	movs	r4, #0
 801b41e:	42a2      	cmp	r2, r4
 801b420:	d101      	bne.n	801b426 <memcmp+0xe>
 801b422:	2000      	movs	r0, #0
 801b424:	e005      	b.n	801b432 <memcmp+0x1a>
 801b426:	5d03      	ldrb	r3, [r0, r4]
 801b428:	3401      	adds	r4, #1
 801b42a:	5d0d      	ldrb	r5, [r1, r4]
 801b42c:	42ab      	cmp	r3, r5
 801b42e:	d0f6      	beq.n	801b41e <memcmp+0x6>
 801b430:	1b58      	subs	r0, r3, r5
 801b432:	bd30      	pop	{r4, r5, pc}

0801b434 <memcpy>:
 801b434:	440a      	add	r2, r1
 801b436:	4291      	cmp	r1, r2
 801b438:	f100 33ff 	add.w	r3, r0, #4294967295
 801b43c:	d100      	bne.n	801b440 <memcpy+0xc>
 801b43e:	4770      	bx	lr
 801b440:	b510      	push	{r4, lr}
 801b442:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b446:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b44a:	4291      	cmp	r1, r2
 801b44c:	d1f9      	bne.n	801b442 <memcpy+0xe>
 801b44e:	bd10      	pop	{r4, pc}

0801b450 <memset>:
 801b450:	4402      	add	r2, r0
 801b452:	4603      	mov	r3, r0
 801b454:	4293      	cmp	r3, r2
 801b456:	d100      	bne.n	801b45a <memset+0xa>
 801b458:	4770      	bx	lr
 801b45a:	f803 1b01 	strb.w	r1, [r3], #1
 801b45e:	e7f9      	b.n	801b454 <memset+0x4>

0801b460 <cleanup_glue>:
 801b460:	b538      	push	{r3, r4, r5, lr}
 801b462:	460c      	mov	r4, r1
 801b464:	6809      	ldr	r1, [r1, #0]
 801b466:	4605      	mov	r5, r0
 801b468:	b109      	cbz	r1, 801b46e <cleanup_glue+0xe>
 801b46a:	f7ff fff9 	bl	801b460 <cleanup_glue>
 801b46e:	4621      	mov	r1, r4
 801b470:	4628      	mov	r0, r5
 801b472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b476:	f000 b869 	b.w	801b54c <_free_r>
	...

0801b47c <_reclaim_reent>:
 801b47c:	4b2c      	ldr	r3, [pc, #176]	; (801b530 <_reclaim_reent+0xb4>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	4283      	cmp	r3, r0
 801b482:	b570      	push	{r4, r5, r6, lr}
 801b484:	4604      	mov	r4, r0
 801b486:	d051      	beq.n	801b52c <_reclaim_reent+0xb0>
 801b488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b48a:	b143      	cbz	r3, 801b49e <_reclaim_reent+0x22>
 801b48c:	68db      	ldr	r3, [r3, #12]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d14a      	bne.n	801b528 <_reclaim_reent+0xac>
 801b492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b494:	6819      	ldr	r1, [r3, #0]
 801b496:	b111      	cbz	r1, 801b49e <_reclaim_reent+0x22>
 801b498:	4620      	mov	r0, r4
 801b49a:	f000 f857 	bl	801b54c <_free_r>
 801b49e:	6961      	ldr	r1, [r4, #20]
 801b4a0:	b111      	cbz	r1, 801b4a8 <_reclaim_reent+0x2c>
 801b4a2:	4620      	mov	r0, r4
 801b4a4:	f000 f852 	bl	801b54c <_free_r>
 801b4a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b4aa:	b111      	cbz	r1, 801b4b2 <_reclaim_reent+0x36>
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	f000 f84d 	bl	801b54c <_free_r>
 801b4b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b4b4:	b111      	cbz	r1, 801b4bc <_reclaim_reent+0x40>
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f000 f848 	bl	801b54c <_free_r>
 801b4bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b4be:	b111      	cbz	r1, 801b4c6 <_reclaim_reent+0x4a>
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	f000 f843 	bl	801b54c <_free_r>
 801b4c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b4c8:	b111      	cbz	r1, 801b4d0 <_reclaim_reent+0x54>
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f000 f83e 	bl	801b54c <_free_r>
 801b4d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b4d2:	b111      	cbz	r1, 801b4da <_reclaim_reent+0x5e>
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f000 f839 	bl	801b54c <_free_r>
 801b4da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b4dc:	b111      	cbz	r1, 801b4e4 <_reclaim_reent+0x68>
 801b4de:	4620      	mov	r0, r4
 801b4e0:	f000 f834 	bl	801b54c <_free_r>
 801b4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4e6:	b111      	cbz	r1, 801b4ee <_reclaim_reent+0x72>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	f000 f82f 	bl	801b54c <_free_r>
 801b4ee:	69a3      	ldr	r3, [r4, #24]
 801b4f0:	b1e3      	cbz	r3, 801b52c <_reclaim_reent+0xb0>
 801b4f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	4798      	blx	r3
 801b4f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b4fa:	b1b9      	cbz	r1, 801b52c <_reclaim_reent+0xb0>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b502:	f7ff bfad 	b.w	801b460 <cleanup_glue>
 801b506:	5949      	ldr	r1, [r1, r5]
 801b508:	b941      	cbnz	r1, 801b51c <_reclaim_reent+0xa0>
 801b50a:	3504      	adds	r5, #4
 801b50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b50e:	2d80      	cmp	r5, #128	; 0x80
 801b510:	68d9      	ldr	r1, [r3, #12]
 801b512:	d1f8      	bne.n	801b506 <_reclaim_reent+0x8a>
 801b514:	4620      	mov	r0, r4
 801b516:	f000 f819 	bl	801b54c <_free_r>
 801b51a:	e7ba      	b.n	801b492 <_reclaim_reent+0x16>
 801b51c:	680e      	ldr	r6, [r1, #0]
 801b51e:	4620      	mov	r0, r4
 801b520:	f000 f814 	bl	801b54c <_free_r>
 801b524:	4631      	mov	r1, r6
 801b526:	e7ef      	b.n	801b508 <_reclaim_reent+0x8c>
 801b528:	2500      	movs	r5, #0
 801b52a:	e7ef      	b.n	801b50c <_reclaim_reent+0x90>
 801b52c:	bd70      	pop	{r4, r5, r6, pc}
 801b52e:	bf00      	nop
 801b530:	20001444 	.word	0x20001444

0801b534 <__malloc_lock>:
 801b534:	4801      	ldr	r0, [pc, #4]	; (801b53c <__malloc_lock+0x8>)
 801b536:	f7ff bf6d 	b.w	801b414 <__retarget_lock_acquire_recursive>
 801b53a:	bf00      	nop
 801b53c:	2001ecfc 	.word	0x2001ecfc

0801b540 <__malloc_unlock>:
 801b540:	4801      	ldr	r0, [pc, #4]	; (801b548 <__malloc_unlock+0x8>)
 801b542:	f7ff bf68 	b.w	801b416 <__retarget_lock_release_recursive>
 801b546:	bf00      	nop
 801b548:	2001ecfc 	.word	0x2001ecfc

0801b54c <_free_r>:
 801b54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b54e:	2900      	cmp	r1, #0
 801b550:	d048      	beq.n	801b5e4 <_free_r+0x98>
 801b552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b556:	9001      	str	r0, [sp, #4]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	f1a1 0404 	sub.w	r4, r1, #4
 801b55e:	bfb8      	it	lt
 801b560:	18e4      	addlt	r4, r4, r3
 801b562:	f7ff ffe7 	bl	801b534 <__malloc_lock>
 801b566:	4a20      	ldr	r2, [pc, #128]	; (801b5e8 <_free_r+0x9c>)
 801b568:	9801      	ldr	r0, [sp, #4]
 801b56a:	6813      	ldr	r3, [r2, #0]
 801b56c:	4615      	mov	r5, r2
 801b56e:	b933      	cbnz	r3, 801b57e <_free_r+0x32>
 801b570:	6063      	str	r3, [r4, #4]
 801b572:	6014      	str	r4, [r2, #0]
 801b574:	b003      	add	sp, #12
 801b576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b57a:	f7ff bfe1 	b.w	801b540 <__malloc_unlock>
 801b57e:	42a3      	cmp	r3, r4
 801b580:	d90b      	bls.n	801b59a <_free_r+0x4e>
 801b582:	6821      	ldr	r1, [r4, #0]
 801b584:	1862      	adds	r2, r4, r1
 801b586:	4293      	cmp	r3, r2
 801b588:	bf04      	itt	eq
 801b58a:	681a      	ldreq	r2, [r3, #0]
 801b58c:	685b      	ldreq	r3, [r3, #4]
 801b58e:	6063      	str	r3, [r4, #4]
 801b590:	bf04      	itt	eq
 801b592:	1852      	addeq	r2, r2, r1
 801b594:	6022      	streq	r2, [r4, #0]
 801b596:	602c      	str	r4, [r5, #0]
 801b598:	e7ec      	b.n	801b574 <_free_r+0x28>
 801b59a:	461a      	mov	r2, r3
 801b59c:	685b      	ldr	r3, [r3, #4]
 801b59e:	b10b      	cbz	r3, 801b5a4 <_free_r+0x58>
 801b5a0:	42a3      	cmp	r3, r4
 801b5a2:	d9fa      	bls.n	801b59a <_free_r+0x4e>
 801b5a4:	6811      	ldr	r1, [r2, #0]
 801b5a6:	1855      	adds	r5, r2, r1
 801b5a8:	42a5      	cmp	r5, r4
 801b5aa:	d10b      	bne.n	801b5c4 <_free_r+0x78>
 801b5ac:	6824      	ldr	r4, [r4, #0]
 801b5ae:	4421      	add	r1, r4
 801b5b0:	1854      	adds	r4, r2, r1
 801b5b2:	42a3      	cmp	r3, r4
 801b5b4:	6011      	str	r1, [r2, #0]
 801b5b6:	d1dd      	bne.n	801b574 <_free_r+0x28>
 801b5b8:	681c      	ldr	r4, [r3, #0]
 801b5ba:	685b      	ldr	r3, [r3, #4]
 801b5bc:	6053      	str	r3, [r2, #4]
 801b5be:	4421      	add	r1, r4
 801b5c0:	6011      	str	r1, [r2, #0]
 801b5c2:	e7d7      	b.n	801b574 <_free_r+0x28>
 801b5c4:	d902      	bls.n	801b5cc <_free_r+0x80>
 801b5c6:	230c      	movs	r3, #12
 801b5c8:	6003      	str	r3, [r0, #0]
 801b5ca:	e7d3      	b.n	801b574 <_free_r+0x28>
 801b5cc:	6825      	ldr	r5, [r4, #0]
 801b5ce:	1961      	adds	r1, r4, r5
 801b5d0:	428b      	cmp	r3, r1
 801b5d2:	bf04      	itt	eq
 801b5d4:	6819      	ldreq	r1, [r3, #0]
 801b5d6:	685b      	ldreq	r3, [r3, #4]
 801b5d8:	6063      	str	r3, [r4, #4]
 801b5da:	bf04      	itt	eq
 801b5dc:	1949      	addeq	r1, r1, r5
 801b5de:	6021      	streq	r1, [r4, #0]
 801b5e0:	6054      	str	r4, [r2, #4]
 801b5e2:	e7c7      	b.n	801b574 <_free_r+0x28>
 801b5e4:	b003      	add	sp, #12
 801b5e6:	bd30      	pop	{r4, r5, pc}
 801b5e8:	2001b5bc 	.word	0x2001b5bc

0801b5ec <fmax>:
 801b5ec:	b508      	push	{r3, lr}
 801b5ee:	ed2d 8b04 	vpush	{d8-d9}
 801b5f2:	eeb0 8a40 	vmov.f32	s16, s0
 801b5f6:	eef0 8a60 	vmov.f32	s17, s1
 801b5fa:	eeb0 9a41 	vmov.f32	s18, s2
 801b5fe:	eef0 9a61 	vmov.f32	s19, s3
 801b602:	f000 f81b 	bl	801b63c <__fpclassifyd>
 801b606:	b168      	cbz	r0, 801b624 <fmax+0x38>
 801b608:	eeb0 0a49 	vmov.f32	s0, s18
 801b60c:	eef0 0a69 	vmov.f32	s1, s19
 801b610:	f000 f814 	bl	801b63c <__fpclassifyd>
 801b614:	b150      	cbz	r0, 801b62c <fmax+0x40>
 801b616:	ec53 2b19 	vmov	r2, r3, d9
 801b61a:	ec51 0b18 	vmov	r0, r1, d8
 801b61e:	f7e5 fa6d 	bl	8000afc <__aeabi_dcmpgt>
 801b622:	b918      	cbnz	r0, 801b62c <fmax+0x40>
 801b624:	eeb0 8a49 	vmov.f32	s16, s18
 801b628:	eef0 8a69 	vmov.f32	s17, s19
 801b62c:	eeb0 0a48 	vmov.f32	s0, s16
 801b630:	eef0 0a68 	vmov.f32	s1, s17
 801b634:	ecbd 8b04 	vpop	{d8-d9}
 801b638:	bd08      	pop	{r3, pc}
	...

0801b63c <__fpclassifyd>:
 801b63c:	ec51 0b10 	vmov	r0, r1, d0
 801b640:	b510      	push	{r4, lr}
 801b642:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801b646:	460b      	mov	r3, r1
 801b648:	d019      	beq.n	801b67e <__fpclassifyd+0x42>
 801b64a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801b64e:	490e      	ldr	r1, [pc, #56]	; (801b688 <__fpclassifyd+0x4c>)
 801b650:	428a      	cmp	r2, r1
 801b652:	d90e      	bls.n	801b672 <__fpclassifyd+0x36>
 801b654:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801b658:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801b65c:	428a      	cmp	r2, r1
 801b65e:	d908      	bls.n	801b672 <__fpclassifyd+0x36>
 801b660:	4a0a      	ldr	r2, [pc, #40]	; (801b68c <__fpclassifyd+0x50>)
 801b662:	4213      	tst	r3, r2
 801b664:	d007      	beq.n	801b676 <__fpclassifyd+0x3a>
 801b666:	4294      	cmp	r4, r2
 801b668:	d107      	bne.n	801b67a <__fpclassifyd+0x3e>
 801b66a:	fab0 f080 	clz	r0, r0
 801b66e:	0940      	lsrs	r0, r0, #5
 801b670:	bd10      	pop	{r4, pc}
 801b672:	2004      	movs	r0, #4
 801b674:	e7fc      	b.n	801b670 <__fpclassifyd+0x34>
 801b676:	2003      	movs	r0, #3
 801b678:	e7fa      	b.n	801b670 <__fpclassifyd+0x34>
 801b67a:	2000      	movs	r0, #0
 801b67c:	e7f8      	b.n	801b670 <__fpclassifyd+0x34>
 801b67e:	2800      	cmp	r0, #0
 801b680:	d1ee      	bne.n	801b660 <__fpclassifyd+0x24>
 801b682:	2002      	movs	r0, #2
 801b684:	e7f4      	b.n	801b670 <__fpclassifyd+0x34>
 801b686:	bf00      	nop
 801b688:	7fdfffff 	.word	0x7fdfffff
 801b68c:	7ff00000 	.word	0x7ff00000

0801b690 <exp>:
 801b690:	b538      	push	{r3, r4, r5, lr}
 801b692:	ed2d 8b02 	vpush	{d8}
 801b696:	ec55 4b10 	vmov	r4, r5, d0
 801b69a:	f000 f8c5 	bl	801b828 <__ieee754_exp>
 801b69e:	4b22      	ldr	r3, [pc, #136]	; (801b728 <exp+0x98>)
 801b6a0:	eeb0 8a40 	vmov.f32	s16, s0
 801b6a4:	eef0 8a60 	vmov.f32	s17, s1
 801b6a8:	f993 3000 	ldrsb.w	r3, [r3]
 801b6ac:	3301      	adds	r3, #1
 801b6ae:	d012      	beq.n	801b6d6 <exp+0x46>
 801b6b0:	ec45 4b10 	vmov	d0, r4, r5
 801b6b4:	f000 fca2 	bl	801bffc <finite>
 801b6b8:	b168      	cbz	r0, 801b6d6 <exp+0x46>
 801b6ba:	a313      	add	r3, pc, #76	; (adr r3, 801b708 <exp+0x78>)
 801b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c0:	4620      	mov	r0, r4
 801b6c2:	4629      	mov	r1, r5
 801b6c4:	f7e5 fa1a 	bl	8000afc <__aeabi_dcmpgt>
 801b6c8:	b160      	cbz	r0, 801b6e4 <exp+0x54>
 801b6ca:	f7ff fe79 	bl	801b3c0 <__errno>
 801b6ce:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801b710 <exp+0x80>
 801b6d2:	2322      	movs	r3, #34	; 0x22
 801b6d4:	6003      	str	r3, [r0, #0]
 801b6d6:	eeb0 0a48 	vmov.f32	s0, s16
 801b6da:	eef0 0a68 	vmov.f32	s1, s17
 801b6de:	ecbd 8b02 	vpop	{d8}
 801b6e2:	bd38      	pop	{r3, r4, r5, pc}
 801b6e4:	a30c      	add	r3, pc, #48	; (adr r3, 801b718 <exp+0x88>)
 801b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	4629      	mov	r1, r5
 801b6ee:	f7e5 f9e7 	bl	8000ac0 <__aeabi_dcmplt>
 801b6f2:	2800      	cmp	r0, #0
 801b6f4:	d0ef      	beq.n	801b6d6 <exp+0x46>
 801b6f6:	f7ff fe63 	bl	801b3c0 <__errno>
 801b6fa:	2322      	movs	r3, #34	; 0x22
 801b6fc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801b720 <exp+0x90>
 801b700:	6003      	str	r3, [r0, #0]
 801b702:	e7e8      	b.n	801b6d6 <exp+0x46>
 801b704:	f3af 8000 	nop.w
 801b708:	fefa39ef 	.word	0xfefa39ef
 801b70c:	40862e42 	.word	0x40862e42
 801b710:	00000000 	.word	0x00000000
 801b714:	7ff00000 	.word	0x7ff00000
 801b718:	d52d3051 	.word	0xd52d3051
 801b71c:	c0874910 	.word	0xc0874910
	...
 801b728:	200014a8 	.word	0x200014a8
 801b72c:	00000000 	.word	0x00000000

0801b730 <log>:
 801b730:	b538      	push	{r3, r4, r5, lr}
 801b732:	ed2d 8b02 	vpush	{d8}
 801b736:	ec55 4b10 	vmov	r4, r5, d0
 801b73a:	f000 f9f1 	bl	801bb20 <__ieee754_log>
 801b73e:	4b1e      	ldr	r3, [pc, #120]	; (801b7b8 <log+0x88>)
 801b740:	eeb0 8a40 	vmov.f32	s16, s0
 801b744:	eef0 8a60 	vmov.f32	s17, s1
 801b748:	f993 3000 	ldrsb.w	r3, [r3]
 801b74c:	3301      	adds	r3, #1
 801b74e:	d01a      	beq.n	801b786 <log+0x56>
 801b750:	4622      	mov	r2, r4
 801b752:	462b      	mov	r3, r5
 801b754:	4620      	mov	r0, r4
 801b756:	4629      	mov	r1, r5
 801b758:	f7e5 f9da 	bl	8000b10 <__aeabi_dcmpun>
 801b75c:	b998      	cbnz	r0, 801b786 <log+0x56>
 801b75e:	2200      	movs	r2, #0
 801b760:	2300      	movs	r3, #0
 801b762:	4620      	mov	r0, r4
 801b764:	4629      	mov	r1, r5
 801b766:	f7e5 f9c9 	bl	8000afc <__aeabi_dcmpgt>
 801b76a:	b960      	cbnz	r0, 801b786 <log+0x56>
 801b76c:	2200      	movs	r2, #0
 801b76e:	2300      	movs	r3, #0
 801b770:	4620      	mov	r0, r4
 801b772:	4629      	mov	r1, r5
 801b774:	f7e5 f99a 	bl	8000aac <__aeabi_dcmpeq>
 801b778:	b160      	cbz	r0, 801b794 <log+0x64>
 801b77a:	f7ff fe21 	bl	801b3c0 <__errno>
 801b77e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801b7b0 <log+0x80>
 801b782:	2322      	movs	r3, #34	; 0x22
 801b784:	6003      	str	r3, [r0, #0]
 801b786:	eeb0 0a48 	vmov.f32	s0, s16
 801b78a:	eef0 0a68 	vmov.f32	s1, s17
 801b78e:	ecbd 8b02 	vpop	{d8}
 801b792:	bd38      	pop	{r3, r4, r5, pc}
 801b794:	f7ff fe14 	bl	801b3c0 <__errno>
 801b798:	ecbd 8b02 	vpop	{d8}
 801b79c:	2321      	movs	r3, #33	; 0x21
 801b79e:	6003      	str	r3, [r0, #0]
 801b7a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7a4:	4805      	ldr	r0, [pc, #20]	; (801b7bc <log+0x8c>)
 801b7a6:	f000 bc37 	b.w	801c018 <nan>
 801b7aa:	bf00      	nop
 801b7ac:	f3af 8000 	nop.w
 801b7b0:	00000000 	.word	0x00000000
 801b7b4:	fff00000 	.word	0xfff00000
 801b7b8:	200014a8 	.word	0x200014a8
 801b7bc:	0801c86c 	.word	0x0801c86c

0801b7c0 <sqrt>:
 801b7c0:	b538      	push	{r3, r4, r5, lr}
 801b7c2:	ed2d 8b02 	vpush	{d8}
 801b7c6:	ec55 4b10 	vmov	r4, r5, d0
 801b7ca:	f000 fb63 	bl	801be94 <__ieee754_sqrt>
 801b7ce:	4b15      	ldr	r3, [pc, #84]	; (801b824 <sqrt+0x64>)
 801b7d0:	eeb0 8a40 	vmov.f32	s16, s0
 801b7d4:	eef0 8a60 	vmov.f32	s17, s1
 801b7d8:	f993 3000 	ldrsb.w	r3, [r3]
 801b7dc:	3301      	adds	r3, #1
 801b7de:	d019      	beq.n	801b814 <sqrt+0x54>
 801b7e0:	4622      	mov	r2, r4
 801b7e2:	462b      	mov	r3, r5
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	4629      	mov	r1, r5
 801b7e8:	f7e5 f992 	bl	8000b10 <__aeabi_dcmpun>
 801b7ec:	b990      	cbnz	r0, 801b814 <sqrt+0x54>
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	4629      	mov	r1, r5
 801b7f6:	f7e5 f963 	bl	8000ac0 <__aeabi_dcmplt>
 801b7fa:	b158      	cbz	r0, 801b814 <sqrt+0x54>
 801b7fc:	f7ff fde0 	bl	801b3c0 <__errno>
 801b800:	2321      	movs	r3, #33	; 0x21
 801b802:	6003      	str	r3, [r0, #0]
 801b804:	2200      	movs	r2, #0
 801b806:	2300      	movs	r3, #0
 801b808:	4610      	mov	r0, r2
 801b80a:	4619      	mov	r1, r3
 801b80c:	f7e5 f810 	bl	8000830 <__aeabi_ddiv>
 801b810:	ec41 0b18 	vmov	d8, r0, r1
 801b814:	eeb0 0a48 	vmov.f32	s0, s16
 801b818:	eef0 0a68 	vmov.f32	s1, s17
 801b81c:	ecbd 8b02 	vpop	{d8}
 801b820:	bd38      	pop	{r3, r4, r5, pc}
 801b822:	bf00      	nop
 801b824:	200014a8 	.word	0x200014a8

0801b828 <__ieee754_exp>:
 801b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b82c:	ec55 4b10 	vmov	r4, r5, d0
 801b830:	49b1      	ldr	r1, [pc, #708]	; (801baf8 <__ieee754_exp+0x2d0>)
 801b832:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b836:	428b      	cmp	r3, r1
 801b838:	ed2d 8b04 	vpush	{d8-d9}
 801b83c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801b840:	d937      	bls.n	801b8b2 <__ieee754_exp+0x8a>
 801b842:	49ae      	ldr	r1, [pc, #696]	; (801bafc <__ieee754_exp+0x2d4>)
 801b844:	428b      	cmp	r3, r1
 801b846:	d916      	bls.n	801b876 <__ieee754_exp+0x4e>
 801b848:	ee10 3a10 	vmov	r3, s0
 801b84c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801b850:	4313      	orrs	r3, r2
 801b852:	d009      	beq.n	801b868 <__ieee754_exp+0x40>
 801b854:	ee10 2a10 	vmov	r2, s0
 801b858:	462b      	mov	r3, r5
 801b85a:	4620      	mov	r0, r4
 801b85c:	4629      	mov	r1, r5
 801b85e:	f7e4 fd07 	bl	8000270 <__adddf3>
 801b862:	4604      	mov	r4, r0
 801b864:	460d      	mov	r5, r1
 801b866:	e000      	b.n	801b86a <__ieee754_exp+0x42>
 801b868:	bb06      	cbnz	r6, 801b8ac <__ieee754_exp+0x84>
 801b86a:	ecbd 8b04 	vpop	{d8-d9}
 801b86e:	ec45 4b10 	vmov	d0, r4, r5
 801b872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b876:	a38a      	add	r3, pc, #552	; (adr r3, 801baa0 <__ieee754_exp+0x278>)
 801b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b87c:	ee10 0a10 	vmov	r0, s0
 801b880:	4629      	mov	r1, r5
 801b882:	f7e5 f93b 	bl	8000afc <__aeabi_dcmpgt>
 801b886:	b138      	cbz	r0, 801b898 <__ieee754_exp+0x70>
 801b888:	a387      	add	r3, pc, #540	; (adr r3, 801baa8 <__ieee754_exp+0x280>)
 801b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b88e:	4610      	mov	r0, r2
 801b890:	4619      	mov	r1, r3
 801b892:	f7e4 fea3 	bl	80005dc <__aeabi_dmul>
 801b896:	e7e4      	b.n	801b862 <__ieee754_exp+0x3a>
 801b898:	a385      	add	r3, pc, #532	; (adr r3, 801bab0 <__ieee754_exp+0x288>)
 801b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b89e:	4620      	mov	r0, r4
 801b8a0:	4629      	mov	r1, r5
 801b8a2:	f7e5 f90d 	bl	8000ac0 <__aeabi_dcmplt>
 801b8a6:	2800      	cmp	r0, #0
 801b8a8:	f000 8087 	beq.w	801b9ba <__ieee754_exp+0x192>
 801b8ac:	2400      	movs	r4, #0
 801b8ae:	2500      	movs	r5, #0
 801b8b0:	e7db      	b.n	801b86a <__ieee754_exp+0x42>
 801b8b2:	4a93      	ldr	r2, [pc, #588]	; (801bb00 <__ieee754_exp+0x2d8>)
 801b8b4:	4293      	cmp	r3, r2
 801b8b6:	f240 80ac 	bls.w	801ba12 <__ieee754_exp+0x1ea>
 801b8ba:	4a92      	ldr	r2, [pc, #584]	; (801bb04 <__ieee754_exp+0x2dc>)
 801b8bc:	4293      	cmp	r3, r2
 801b8be:	d87c      	bhi.n	801b9ba <__ieee754_exp+0x192>
 801b8c0:	4b91      	ldr	r3, [pc, #580]	; (801bb08 <__ieee754_exp+0x2e0>)
 801b8c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ca:	ee10 0a10 	vmov	r0, s0
 801b8ce:	4629      	mov	r1, r5
 801b8d0:	f7e4 fccc 	bl	800026c <__aeabi_dsub>
 801b8d4:	4b8d      	ldr	r3, [pc, #564]	; (801bb0c <__ieee754_exp+0x2e4>)
 801b8d6:	00f7      	lsls	r7, r6, #3
 801b8d8:	443b      	add	r3, r7
 801b8da:	ed93 7b00 	vldr	d7, [r3]
 801b8de:	f1c6 0a01 	rsb	sl, r6, #1
 801b8e2:	4680      	mov	r8, r0
 801b8e4:	4689      	mov	r9, r1
 801b8e6:	ebaa 0a06 	sub.w	sl, sl, r6
 801b8ea:	eeb0 8a47 	vmov.f32	s16, s14
 801b8ee:	eef0 8a67 	vmov.f32	s17, s15
 801b8f2:	ec53 2b18 	vmov	r2, r3, d8
 801b8f6:	4640      	mov	r0, r8
 801b8f8:	4649      	mov	r1, r9
 801b8fa:	f7e4 fcb7 	bl	800026c <__aeabi_dsub>
 801b8fe:	4604      	mov	r4, r0
 801b900:	460d      	mov	r5, r1
 801b902:	4622      	mov	r2, r4
 801b904:	462b      	mov	r3, r5
 801b906:	4620      	mov	r0, r4
 801b908:	4629      	mov	r1, r5
 801b90a:	f7e4 fe67 	bl	80005dc <__aeabi_dmul>
 801b90e:	a36a      	add	r3, pc, #424	; (adr r3, 801bab8 <__ieee754_exp+0x290>)
 801b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b914:	4606      	mov	r6, r0
 801b916:	460f      	mov	r7, r1
 801b918:	f7e4 fe60 	bl	80005dc <__aeabi_dmul>
 801b91c:	a368      	add	r3, pc, #416	; (adr r3, 801bac0 <__ieee754_exp+0x298>)
 801b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b922:	f7e4 fca3 	bl	800026c <__aeabi_dsub>
 801b926:	4632      	mov	r2, r6
 801b928:	463b      	mov	r3, r7
 801b92a:	f7e4 fe57 	bl	80005dc <__aeabi_dmul>
 801b92e:	a366      	add	r3, pc, #408	; (adr r3, 801bac8 <__ieee754_exp+0x2a0>)
 801b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b934:	f7e4 fc9c 	bl	8000270 <__adddf3>
 801b938:	4632      	mov	r2, r6
 801b93a:	463b      	mov	r3, r7
 801b93c:	f7e4 fe4e 	bl	80005dc <__aeabi_dmul>
 801b940:	a363      	add	r3, pc, #396	; (adr r3, 801bad0 <__ieee754_exp+0x2a8>)
 801b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b946:	f7e4 fc91 	bl	800026c <__aeabi_dsub>
 801b94a:	4632      	mov	r2, r6
 801b94c:	463b      	mov	r3, r7
 801b94e:	f7e4 fe45 	bl	80005dc <__aeabi_dmul>
 801b952:	a361      	add	r3, pc, #388	; (adr r3, 801bad8 <__ieee754_exp+0x2b0>)
 801b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b958:	f7e4 fc8a 	bl	8000270 <__adddf3>
 801b95c:	4632      	mov	r2, r6
 801b95e:	463b      	mov	r3, r7
 801b960:	f7e4 fe3c 	bl	80005dc <__aeabi_dmul>
 801b964:	4602      	mov	r2, r0
 801b966:	460b      	mov	r3, r1
 801b968:	4620      	mov	r0, r4
 801b96a:	4629      	mov	r1, r5
 801b96c:	f7e4 fc7e 	bl	800026c <__aeabi_dsub>
 801b970:	4602      	mov	r2, r0
 801b972:	460b      	mov	r3, r1
 801b974:	4606      	mov	r6, r0
 801b976:	460f      	mov	r7, r1
 801b978:	4620      	mov	r0, r4
 801b97a:	4629      	mov	r1, r5
 801b97c:	f7e4 fe2e 	bl	80005dc <__aeabi_dmul>
 801b980:	ec41 0b19 	vmov	d9, r0, r1
 801b984:	f1ba 0f00 	cmp.w	sl, #0
 801b988:	d15d      	bne.n	801ba46 <__ieee754_exp+0x21e>
 801b98a:	2200      	movs	r2, #0
 801b98c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b990:	4630      	mov	r0, r6
 801b992:	4639      	mov	r1, r7
 801b994:	f7e4 fc6a 	bl	800026c <__aeabi_dsub>
 801b998:	4602      	mov	r2, r0
 801b99a:	460b      	mov	r3, r1
 801b99c:	ec51 0b19 	vmov	r0, r1, d9
 801b9a0:	f7e4 ff46 	bl	8000830 <__aeabi_ddiv>
 801b9a4:	4622      	mov	r2, r4
 801b9a6:	462b      	mov	r3, r5
 801b9a8:	f7e4 fc60 	bl	800026c <__aeabi_dsub>
 801b9ac:	4602      	mov	r2, r0
 801b9ae:	460b      	mov	r3, r1
 801b9b0:	2000      	movs	r0, #0
 801b9b2:	4957      	ldr	r1, [pc, #348]	; (801bb10 <__ieee754_exp+0x2e8>)
 801b9b4:	f7e4 fc5a 	bl	800026c <__aeabi_dsub>
 801b9b8:	e753      	b.n	801b862 <__ieee754_exp+0x3a>
 801b9ba:	4856      	ldr	r0, [pc, #344]	; (801bb14 <__ieee754_exp+0x2ec>)
 801b9bc:	a348      	add	r3, pc, #288	; (adr r3, 801bae0 <__ieee754_exp+0x2b8>)
 801b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801b9c6:	4629      	mov	r1, r5
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	f7e4 fe07 	bl	80005dc <__aeabi_dmul>
 801b9ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b9d2:	f7e4 fc4d 	bl	8000270 <__adddf3>
 801b9d6:	f7e5 f8b1 	bl	8000b3c <__aeabi_d2iz>
 801b9da:	4682      	mov	sl, r0
 801b9dc:	f7e4 fd94 	bl	8000508 <__aeabi_i2d>
 801b9e0:	a341      	add	r3, pc, #260	; (adr r3, 801bae8 <__ieee754_exp+0x2c0>)
 801b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e6:	4606      	mov	r6, r0
 801b9e8:	460f      	mov	r7, r1
 801b9ea:	f7e4 fdf7 	bl	80005dc <__aeabi_dmul>
 801b9ee:	4602      	mov	r2, r0
 801b9f0:	460b      	mov	r3, r1
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	4629      	mov	r1, r5
 801b9f6:	f7e4 fc39 	bl	800026c <__aeabi_dsub>
 801b9fa:	a33d      	add	r3, pc, #244	; (adr r3, 801baf0 <__ieee754_exp+0x2c8>)
 801b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba00:	4680      	mov	r8, r0
 801ba02:	4689      	mov	r9, r1
 801ba04:	4630      	mov	r0, r6
 801ba06:	4639      	mov	r1, r7
 801ba08:	f7e4 fde8 	bl	80005dc <__aeabi_dmul>
 801ba0c:	ec41 0b18 	vmov	d8, r0, r1
 801ba10:	e76f      	b.n	801b8f2 <__ieee754_exp+0xca>
 801ba12:	4a41      	ldr	r2, [pc, #260]	; (801bb18 <__ieee754_exp+0x2f0>)
 801ba14:	4293      	cmp	r3, r2
 801ba16:	d811      	bhi.n	801ba3c <__ieee754_exp+0x214>
 801ba18:	a323      	add	r3, pc, #140	; (adr r3, 801baa8 <__ieee754_exp+0x280>)
 801ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1e:	ee10 0a10 	vmov	r0, s0
 801ba22:	4629      	mov	r1, r5
 801ba24:	f7e4 fc24 	bl	8000270 <__adddf3>
 801ba28:	4b39      	ldr	r3, [pc, #228]	; (801bb10 <__ieee754_exp+0x2e8>)
 801ba2a:	2200      	movs	r2, #0
 801ba2c:	f7e5 f866 	bl	8000afc <__aeabi_dcmpgt>
 801ba30:	b138      	cbz	r0, 801ba42 <__ieee754_exp+0x21a>
 801ba32:	4b37      	ldr	r3, [pc, #220]	; (801bb10 <__ieee754_exp+0x2e8>)
 801ba34:	2200      	movs	r2, #0
 801ba36:	4620      	mov	r0, r4
 801ba38:	4629      	mov	r1, r5
 801ba3a:	e710      	b.n	801b85e <__ieee754_exp+0x36>
 801ba3c:	f04f 0a00 	mov.w	sl, #0
 801ba40:	e75f      	b.n	801b902 <__ieee754_exp+0xda>
 801ba42:	4682      	mov	sl, r0
 801ba44:	e75d      	b.n	801b902 <__ieee754_exp+0xda>
 801ba46:	4632      	mov	r2, r6
 801ba48:	463b      	mov	r3, r7
 801ba4a:	2000      	movs	r0, #0
 801ba4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801ba50:	f7e4 fc0c 	bl	800026c <__aeabi_dsub>
 801ba54:	4602      	mov	r2, r0
 801ba56:	460b      	mov	r3, r1
 801ba58:	ec51 0b19 	vmov	r0, r1, d9
 801ba5c:	f7e4 fee8 	bl	8000830 <__aeabi_ddiv>
 801ba60:	4602      	mov	r2, r0
 801ba62:	460b      	mov	r3, r1
 801ba64:	ec51 0b18 	vmov	r0, r1, d8
 801ba68:	f7e4 fc00 	bl	800026c <__aeabi_dsub>
 801ba6c:	4642      	mov	r2, r8
 801ba6e:	464b      	mov	r3, r9
 801ba70:	f7e4 fbfc 	bl	800026c <__aeabi_dsub>
 801ba74:	4602      	mov	r2, r0
 801ba76:	460b      	mov	r3, r1
 801ba78:	2000      	movs	r0, #0
 801ba7a:	4925      	ldr	r1, [pc, #148]	; (801bb10 <__ieee754_exp+0x2e8>)
 801ba7c:	f7e4 fbf6 	bl	800026c <__aeabi_dsub>
 801ba80:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801ba84:	4592      	cmp	sl, r2
 801ba86:	db02      	blt.n	801ba8e <__ieee754_exp+0x266>
 801ba88:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801ba8c:	e6e9      	b.n	801b862 <__ieee754_exp+0x3a>
 801ba8e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801ba92:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801ba96:	2200      	movs	r2, #0
 801ba98:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801ba9c:	e6f9      	b.n	801b892 <__ieee754_exp+0x6a>
 801ba9e:	bf00      	nop
 801baa0:	fefa39ef 	.word	0xfefa39ef
 801baa4:	40862e42 	.word	0x40862e42
 801baa8:	8800759c 	.word	0x8800759c
 801baac:	7e37e43c 	.word	0x7e37e43c
 801bab0:	d52d3051 	.word	0xd52d3051
 801bab4:	c0874910 	.word	0xc0874910
 801bab8:	72bea4d0 	.word	0x72bea4d0
 801babc:	3e663769 	.word	0x3e663769
 801bac0:	c5d26bf1 	.word	0xc5d26bf1
 801bac4:	3ebbbd41 	.word	0x3ebbbd41
 801bac8:	af25de2c 	.word	0xaf25de2c
 801bacc:	3f11566a 	.word	0x3f11566a
 801bad0:	16bebd93 	.word	0x16bebd93
 801bad4:	3f66c16c 	.word	0x3f66c16c
 801bad8:	5555553e 	.word	0x5555553e
 801badc:	3fc55555 	.word	0x3fc55555
 801bae0:	652b82fe 	.word	0x652b82fe
 801bae4:	3ff71547 	.word	0x3ff71547
 801bae8:	fee00000 	.word	0xfee00000
 801baec:	3fe62e42 	.word	0x3fe62e42
 801baf0:	35793c76 	.word	0x35793c76
 801baf4:	3dea39ef 	.word	0x3dea39ef
 801baf8:	40862e41 	.word	0x40862e41
 801bafc:	7fefffff 	.word	0x7fefffff
 801bb00:	3fd62e42 	.word	0x3fd62e42
 801bb04:	3ff0a2b1 	.word	0x3ff0a2b1
 801bb08:	0801c880 	.word	0x0801c880
 801bb0c:	0801c890 	.word	0x0801c890
 801bb10:	3ff00000 	.word	0x3ff00000
 801bb14:	0801c870 	.word	0x0801c870
 801bb18:	3e2fffff 	.word	0x3e2fffff
 801bb1c:	00000000 	.word	0x00000000

0801bb20 <__ieee754_log>:
 801bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb24:	ec51 0b10 	vmov	r0, r1, d0
 801bb28:	ed2d 8b04 	vpush	{d8-d9}
 801bb2c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801bb30:	b083      	sub	sp, #12
 801bb32:	460d      	mov	r5, r1
 801bb34:	da29      	bge.n	801bb8a <__ieee754_log+0x6a>
 801bb36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bb3a:	4303      	orrs	r3, r0
 801bb3c:	ee10 2a10 	vmov	r2, s0
 801bb40:	d10c      	bne.n	801bb5c <__ieee754_log+0x3c>
 801bb42:	49cf      	ldr	r1, [pc, #828]	; (801be80 <__ieee754_log+0x360>)
 801bb44:	2200      	movs	r2, #0
 801bb46:	2300      	movs	r3, #0
 801bb48:	2000      	movs	r0, #0
 801bb4a:	f7e4 fe71 	bl	8000830 <__aeabi_ddiv>
 801bb4e:	ec41 0b10 	vmov	d0, r0, r1
 801bb52:	b003      	add	sp, #12
 801bb54:	ecbd 8b04 	vpop	{d8-d9}
 801bb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb5c:	2900      	cmp	r1, #0
 801bb5e:	da05      	bge.n	801bb6c <__ieee754_log+0x4c>
 801bb60:	460b      	mov	r3, r1
 801bb62:	f7e4 fb83 	bl	800026c <__aeabi_dsub>
 801bb66:	2200      	movs	r2, #0
 801bb68:	2300      	movs	r3, #0
 801bb6a:	e7ee      	b.n	801bb4a <__ieee754_log+0x2a>
 801bb6c:	4bc5      	ldr	r3, [pc, #788]	; (801be84 <__ieee754_log+0x364>)
 801bb6e:	2200      	movs	r2, #0
 801bb70:	f7e4 fd34 	bl	80005dc <__aeabi_dmul>
 801bb74:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801bb78:	460d      	mov	r5, r1
 801bb7a:	4ac3      	ldr	r2, [pc, #780]	; (801be88 <__ieee754_log+0x368>)
 801bb7c:	4295      	cmp	r5, r2
 801bb7e:	dd06      	ble.n	801bb8e <__ieee754_log+0x6e>
 801bb80:	4602      	mov	r2, r0
 801bb82:	460b      	mov	r3, r1
 801bb84:	f7e4 fb74 	bl	8000270 <__adddf3>
 801bb88:	e7e1      	b.n	801bb4e <__ieee754_log+0x2e>
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	e7f5      	b.n	801bb7a <__ieee754_log+0x5a>
 801bb8e:	152c      	asrs	r4, r5, #20
 801bb90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801bb94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801bb98:	441c      	add	r4, r3
 801bb9a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801bb9e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801bba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bba6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801bbaa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801bbae:	ea42 0105 	orr.w	r1, r2, r5
 801bbb2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	4bb4      	ldr	r3, [pc, #720]	; (801be8c <__ieee754_log+0x36c>)
 801bbba:	f7e4 fb57 	bl	800026c <__aeabi_dsub>
 801bbbe:	1cab      	adds	r3, r5, #2
 801bbc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bbc4:	2b02      	cmp	r3, #2
 801bbc6:	4682      	mov	sl, r0
 801bbc8:	468b      	mov	fp, r1
 801bbca:	f04f 0200 	mov.w	r2, #0
 801bbce:	dc53      	bgt.n	801bc78 <__ieee754_log+0x158>
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	f7e4 ff6b 	bl	8000aac <__aeabi_dcmpeq>
 801bbd6:	b1d0      	cbz	r0, 801bc0e <__ieee754_log+0xee>
 801bbd8:	2c00      	cmp	r4, #0
 801bbda:	f000 8122 	beq.w	801be22 <__ieee754_log+0x302>
 801bbde:	4620      	mov	r0, r4
 801bbe0:	f7e4 fc92 	bl	8000508 <__aeabi_i2d>
 801bbe4:	a390      	add	r3, pc, #576	; (adr r3, 801be28 <__ieee754_log+0x308>)
 801bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbea:	4606      	mov	r6, r0
 801bbec:	460f      	mov	r7, r1
 801bbee:	f7e4 fcf5 	bl	80005dc <__aeabi_dmul>
 801bbf2:	a38f      	add	r3, pc, #572	; (adr r3, 801be30 <__ieee754_log+0x310>)
 801bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbf8:	4604      	mov	r4, r0
 801bbfa:	460d      	mov	r5, r1
 801bbfc:	4630      	mov	r0, r6
 801bbfe:	4639      	mov	r1, r7
 801bc00:	f7e4 fcec 	bl	80005dc <__aeabi_dmul>
 801bc04:	4602      	mov	r2, r0
 801bc06:	460b      	mov	r3, r1
 801bc08:	4620      	mov	r0, r4
 801bc0a:	4629      	mov	r1, r5
 801bc0c:	e7ba      	b.n	801bb84 <__ieee754_log+0x64>
 801bc0e:	a38a      	add	r3, pc, #552	; (adr r3, 801be38 <__ieee754_log+0x318>)
 801bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc14:	4650      	mov	r0, sl
 801bc16:	4659      	mov	r1, fp
 801bc18:	f7e4 fce0 	bl	80005dc <__aeabi_dmul>
 801bc1c:	4602      	mov	r2, r0
 801bc1e:	460b      	mov	r3, r1
 801bc20:	2000      	movs	r0, #0
 801bc22:	499b      	ldr	r1, [pc, #620]	; (801be90 <__ieee754_log+0x370>)
 801bc24:	f7e4 fb22 	bl	800026c <__aeabi_dsub>
 801bc28:	4652      	mov	r2, sl
 801bc2a:	4606      	mov	r6, r0
 801bc2c:	460f      	mov	r7, r1
 801bc2e:	465b      	mov	r3, fp
 801bc30:	4650      	mov	r0, sl
 801bc32:	4659      	mov	r1, fp
 801bc34:	f7e4 fcd2 	bl	80005dc <__aeabi_dmul>
 801bc38:	4602      	mov	r2, r0
 801bc3a:	460b      	mov	r3, r1
 801bc3c:	4630      	mov	r0, r6
 801bc3e:	4639      	mov	r1, r7
 801bc40:	f7e4 fccc 	bl	80005dc <__aeabi_dmul>
 801bc44:	4606      	mov	r6, r0
 801bc46:	460f      	mov	r7, r1
 801bc48:	b914      	cbnz	r4, 801bc50 <__ieee754_log+0x130>
 801bc4a:	4632      	mov	r2, r6
 801bc4c:	463b      	mov	r3, r7
 801bc4e:	e0a2      	b.n	801bd96 <__ieee754_log+0x276>
 801bc50:	4620      	mov	r0, r4
 801bc52:	f7e4 fc59 	bl	8000508 <__aeabi_i2d>
 801bc56:	a374      	add	r3, pc, #464	; (adr r3, 801be28 <__ieee754_log+0x308>)
 801bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc5c:	4680      	mov	r8, r0
 801bc5e:	4689      	mov	r9, r1
 801bc60:	f7e4 fcbc 	bl	80005dc <__aeabi_dmul>
 801bc64:	a372      	add	r3, pc, #456	; (adr r3, 801be30 <__ieee754_log+0x310>)
 801bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6a:	4604      	mov	r4, r0
 801bc6c:	460d      	mov	r5, r1
 801bc6e:	4640      	mov	r0, r8
 801bc70:	4649      	mov	r1, r9
 801bc72:	f7e4 fcb3 	bl	80005dc <__aeabi_dmul>
 801bc76:	e0a7      	b.n	801bdc8 <__ieee754_log+0x2a8>
 801bc78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bc7c:	f7e4 faf8 	bl	8000270 <__adddf3>
 801bc80:	4602      	mov	r2, r0
 801bc82:	460b      	mov	r3, r1
 801bc84:	4650      	mov	r0, sl
 801bc86:	4659      	mov	r1, fp
 801bc88:	f7e4 fdd2 	bl	8000830 <__aeabi_ddiv>
 801bc8c:	ec41 0b18 	vmov	d8, r0, r1
 801bc90:	4620      	mov	r0, r4
 801bc92:	f7e4 fc39 	bl	8000508 <__aeabi_i2d>
 801bc96:	ec53 2b18 	vmov	r2, r3, d8
 801bc9a:	ec41 0b19 	vmov	d9, r0, r1
 801bc9e:	ec51 0b18 	vmov	r0, r1, d8
 801bca2:	f7e4 fc9b 	bl	80005dc <__aeabi_dmul>
 801bca6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801bcaa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801bcae:	9301      	str	r3, [sp, #4]
 801bcb0:	4602      	mov	r2, r0
 801bcb2:	460b      	mov	r3, r1
 801bcb4:	4680      	mov	r8, r0
 801bcb6:	4689      	mov	r9, r1
 801bcb8:	f7e4 fc90 	bl	80005dc <__aeabi_dmul>
 801bcbc:	a360      	add	r3, pc, #384	; (adr r3, 801be40 <__ieee754_log+0x320>)
 801bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc2:	4606      	mov	r6, r0
 801bcc4:	460f      	mov	r7, r1
 801bcc6:	f7e4 fc89 	bl	80005dc <__aeabi_dmul>
 801bcca:	a35f      	add	r3, pc, #380	; (adr r3, 801be48 <__ieee754_log+0x328>)
 801bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd0:	f7e4 face 	bl	8000270 <__adddf3>
 801bcd4:	4632      	mov	r2, r6
 801bcd6:	463b      	mov	r3, r7
 801bcd8:	f7e4 fc80 	bl	80005dc <__aeabi_dmul>
 801bcdc:	a35c      	add	r3, pc, #368	; (adr r3, 801be50 <__ieee754_log+0x330>)
 801bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce2:	f7e4 fac5 	bl	8000270 <__adddf3>
 801bce6:	4632      	mov	r2, r6
 801bce8:	463b      	mov	r3, r7
 801bcea:	f7e4 fc77 	bl	80005dc <__aeabi_dmul>
 801bcee:	a35a      	add	r3, pc, #360	; (adr r3, 801be58 <__ieee754_log+0x338>)
 801bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf4:	f7e4 fabc 	bl	8000270 <__adddf3>
 801bcf8:	4642      	mov	r2, r8
 801bcfa:	464b      	mov	r3, r9
 801bcfc:	f7e4 fc6e 	bl	80005dc <__aeabi_dmul>
 801bd00:	a357      	add	r3, pc, #348	; (adr r3, 801be60 <__ieee754_log+0x340>)
 801bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd06:	4680      	mov	r8, r0
 801bd08:	4689      	mov	r9, r1
 801bd0a:	4630      	mov	r0, r6
 801bd0c:	4639      	mov	r1, r7
 801bd0e:	f7e4 fc65 	bl	80005dc <__aeabi_dmul>
 801bd12:	a355      	add	r3, pc, #340	; (adr r3, 801be68 <__ieee754_log+0x348>)
 801bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd18:	f7e4 faaa 	bl	8000270 <__adddf3>
 801bd1c:	4632      	mov	r2, r6
 801bd1e:	463b      	mov	r3, r7
 801bd20:	f7e4 fc5c 	bl	80005dc <__aeabi_dmul>
 801bd24:	a352      	add	r3, pc, #328	; (adr r3, 801be70 <__ieee754_log+0x350>)
 801bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd2a:	f7e4 faa1 	bl	8000270 <__adddf3>
 801bd2e:	4632      	mov	r2, r6
 801bd30:	463b      	mov	r3, r7
 801bd32:	f7e4 fc53 	bl	80005dc <__aeabi_dmul>
 801bd36:	460b      	mov	r3, r1
 801bd38:	4602      	mov	r2, r0
 801bd3a:	4649      	mov	r1, r9
 801bd3c:	4640      	mov	r0, r8
 801bd3e:	f7e4 fa97 	bl	8000270 <__adddf3>
 801bd42:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801bd46:	9b01      	ldr	r3, [sp, #4]
 801bd48:	3551      	adds	r5, #81	; 0x51
 801bd4a:	431d      	orrs	r5, r3
 801bd4c:	2d00      	cmp	r5, #0
 801bd4e:	4680      	mov	r8, r0
 801bd50:	4689      	mov	r9, r1
 801bd52:	dd48      	ble.n	801bde6 <__ieee754_log+0x2c6>
 801bd54:	4b4e      	ldr	r3, [pc, #312]	; (801be90 <__ieee754_log+0x370>)
 801bd56:	2200      	movs	r2, #0
 801bd58:	4650      	mov	r0, sl
 801bd5a:	4659      	mov	r1, fp
 801bd5c:	f7e4 fc3e 	bl	80005dc <__aeabi_dmul>
 801bd60:	4652      	mov	r2, sl
 801bd62:	465b      	mov	r3, fp
 801bd64:	f7e4 fc3a 	bl	80005dc <__aeabi_dmul>
 801bd68:	4602      	mov	r2, r0
 801bd6a:	460b      	mov	r3, r1
 801bd6c:	4606      	mov	r6, r0
 801bd6e:	460f      	mov	r7, r1
 801bd70:	4640      	mov	r0, r8
 801bd72:	4649      	mov	r1, r9
 801bd74:	f7e4 fa7c 	bl	8000270 <__adddf3>
 801bd78:	ec53 2b18 	vmov	r2, r3, d8
 801bd7c:	f7e4 fc2e 	bl	80005dc <__aeabi_dmul>
 801bd80:	4680      	mov	r8, r0
 801bd82:	4689      	mov	r9, r1
 801bd84:	b964      	cbnz	r4, 801bda0 <__ieee754_log+0x280>
 801bd86:	4602      	mov	r2, r0
 801bd88:	460b      	mov	r3, r1
 801bd8a:	4630      	mov	r0, r6
 801bd8c:	4639      	mov	r1, r7
 801bd8e:	f7e4 fa6d 	bl	800026c <__aeabi_dsub>
 801bd92:	4602      	mov	r2, r0
 801bd94:	460b      	mov	r3, r1
 801bd96:	4650      	mov	r0, sl
 801bd98:	4659      	mov	r1, fp
 801bd9a:	f7e4 fa67 	bl	800026c <__aeabi_dsub>
 801bd9e:	e6d6      	b.n	801bb4e <__ieee754_log+0x2e>
 801bda0:	a321      	add	r3, pc, #132	; (adr r3, 801be28 <__ieee754_log+0x308>)
 801bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda6:	ec51 0b19 	vmov	r0, r1, d9
 801bdaa:	f7e4 fc17 	bl	80005dc <__aeabi_dmul>
 801bdae:	a320      	add	r3, pc, #128	; (adr r3, 801be30 <__ieee754_log+0x310>)
 801bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb4:	4604      	mov	r4, r0
 801bdb6:	460d      	mov	r5, r1
 801bdb8:	ec51 0b19 	vmov	r0, r1, d9
 801bdbc:	f7e4 fc0e 	bl	80005dc <__aeabi_dmul>
 801bdc0:	4642      	mov	r2, r8
 801bdc2:	464b      	mov	r3, r9
 801bdc4:	f7e4 fa54 	bl	8000270 <__adddf3>
 801bdc8:	4602      	mov	r2, r0
 801bdca:	460b      	mov	r3, r1
 801bdcc:	4630      	mov	r0, r6
 801bdce:	4639      	mov	r1, r7
 801bdd0:	f7e4 fa4c 	bl	800026c <__aeabi_dsub>
 801bdd4:	4652      	mov	r2, sl
 801bdd6:	465b      	mov	r3, fp
 801bdd8:	f7e4 fa48 	bl	800026c <__aeabi_dsub>
 801bddc:	4602      	mov	r2, r0
 801bdde:	460b      	mov	r3, r1
 801bde0:	4620      	mov	r0, r4
 801bde2:	4629      	mov	r1, r5
 801bde4:	e7d9      	b.n	801bd9a <__ieee754_log+0x27a>
 801bde6:	4602      	mov	r2, r0
 801bde8:	460b      	mov	r3, r1
 801bdea:	4650      	mov	r0, sl
 801bdec:	4659      	mov	r1, fp
 801bdee:	f7e4 fa3d 	bl	800026c <__aeabi_dsub>
 801bdf2:	ec53 2b18 	vmov	r2, r3, d8
 801bdf6:	f7e4 fbf1 	bl	80005dc <__aeabi_dmul>
 801bdfa:	4606      	mov	r6, r0
 801bdfc:	460f      	mov	r7, r1
 801bdfe:	2c00      	cmp	r4, #0
 801be00:	f43f af23 	beq.w	801bc4a <__ieee754_log+0x12a>
 801be04:	a308      	add	r3, pc, #32	; (adr r3, 801be28 <__ieee754_log+0x308>)
 801be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be0a:	ec51 0b19 	vmov	r0, r1, d9
 801be0e:	f7e4 fbe5 	bl	80005dc <__aeabi_dmul>
 801be12:	a307      	add	r3, pc, #28	; (adr r3, 801be30 <__ieee754_log+0x310>)
 801be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be18:	4604      	mov	r4, r0
 801be1a:	460d      	mov	r5, r1
 801be1c:	ec51 0b19 	vmov	r0, r1, d9
 801be20:	e727      	b.n	801bc72 <__ieee754_log+0x152>
 801be22:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801be78 <__ieee754_log+0x358>
 801be26:	e694      	b.n	801bb52 <__ieee754_log+0x32>
 801be28:	fee00000 	.word	0xfee00000
 801be2c:	3fe62e42 	.word	0x3fe62e42
 801be30:	35793c76 	.word	0x35793c76
 801be34:	3dea39ef 	.word	0x3dea39ef
 801be38:	55555555 	.word	0x55555555
 801be3c:	3fd55555 	.word	0x3fd55555
 801be40:	df3e5244 	.word	0xdf3e5244
 801be44:	3fc2f112 	.word	0x3fc2f112
 801be48:	96cb03de 	.word	0x96cb03de
 801be4c:	3fc74664 	.word	0x3fc74664
 801be50:	94229359 	.word	0x94229359
 801be54:	3fd24924 	.word	0x3fd24924
 801be58:	55555593 	.word	0x55555593
 801be5c:	3fe55555 	.word	0x3fe55555
 801be60:	d078c69f 	.word	0xd078c69f
 801be64:	3fc39a09 	.word	0x3fc39a09
 801be68:	1d8e78af 	.word	0x1d8e78af
 801be6c:	3fcc71c5 	.word	0x3fcc71c5
 801be70:	9997fa04 	.word	0x9997fa04
 801be74:	3fd99999 	.word	0x3fd99999
	...
 801be80:	c3500000 	.word	0xc3500000
 801be84:	43500000 	.word	0x43500000
 801be88:	7fefffff 	.word	0x7fefffff
 801be8c:	3ff00000 	.word	0x3ff00000
 801be90:	3fe00000 	.word	0x3fe00000

0801be94 <__ieee754_sqrt>:
 801be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be98:	ec55 4b10 	vmov	r4, r5, d0
 801be9c:	4e56      	ldr	r6, [pc, #344]	; (801bff8 <__ieee754_sqrt+0x164>)
 801be9e:	43ae      	bics	r6, r5
 801bea0:	ee10 0a10 	vmov	r0, s0
 801bea4:	ee10 3a10 	vmov	r3, s0
 801bea8:	4629      	mov	r1, r5
 801beaa:	462a      	mov	r2, r5
 801beac:	d110      	bne.n	801bed0 <__ieee754_sqrt+0x3c>
 801beae:	ee10 2a10 	vmov	r2, s0
 801beb2:	462b      	mov	r3, r5
 801beb4:	f7e4 fb92 	bl	80005dc <__aeabi_dmul>
 801beb8:	4602      	mov	r2, r0
 801beba:	460b      	mov	r3, r1
 801bebc:	4620      	mov	r0, r4
 801bebe:	4629      	mov	r1, r5
 801bec0:	f7e4 f9d6 	bl	8000270 <__adddf3>
 801bec4:	4604      	mov	r4, r0
 801bec6:	460d      	mov	r5, r1
 801bec8:	ec45 4b10 	vmov	d0, r4, r5
 801becc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bed0:	2d00      	cmp	r5, #0
 801bed2:	dc10      	bgt.n	801bef6 <__ieee754_sqrt+0x62>
 801bed4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bed8:	4330      	orrs	r0, r6
 801beda:	d0f5      	beq.n	801bec8 <__ieee754_sqrt+0x34>
 801bedc:	b15d      	cbz	r5, 801bef6 <__ieee754_sqrt+0x62>
 801bede:	ee10 2a10 	vmov	r2, s0
 801bee2:	462b      	mov	r3, r5
 801bee4:	ee10 0a10 	vmov	r0, s0
 801bee8:	f7e4 f9c0 	bl	800026c <__aeabi_dsub>
 801beec:	4602      	mov	r2, r0
 801beee:	460b      	mov	r3, r1
 801bef0:	f7e4 fc9e 	bl	8000830 <__aeabi_ddiv>
 801bef4:	e7e6      	b.n	801bec4 <__ieee754_sqrt+0x30>
 801bef6:	1509      	asrs	r1, r1, #20
 801bef8:	d076      	beq.n	801bfe8 <__ieee754_sqrt+0x154>
 801befa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801befe:	07ce      	lsls	r6, r1, #31
 801bf00:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801bf04:	bf5e      	ittt	pl
 801bf06:	0fda      	lsrpl	r2, r3, #31
 801bf08:	005b      	lslpl	r3, r3, #1
 801bf0a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801bf0e:	0fda      	lsrs	r2, r3, #31
 801bf10:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801bf14:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801bf18:	2000      	movs	r0, #0
 801bf1a:	106d      	asrs	r5, r5, #1
 801bf1c:	005b      	lsls	r3, r3, #1
 801bf1e:	f04f 0e16 	mov.w	lr, #22
 801bf22:	4684      	mov	ip, r0
 801bf24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bf28:	eb0c 0401 	add.w	r4, ip, r1
 801bf2c:	4294      	cmp	r4, r2
 801bf2e:	bfde      	ittt	le
 801bf30:	1b12      	suble	r2, r2, r4
 801bf32:	eb04 0c01 	addle.w	ip, r4, r1
 801bf36:	1840      	addle	r0, r0, r1
 801bf38:	0052      	lsls	r2, r2, #1
 801bf3a:	f1be 0e01 	subs.w	lr, lr, #1
 801bf3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bf42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801bf46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bf4a:	d1ed      	bne.n	801bf28 <__ieee754_sqrt+0x94>
 801bf4c:	4671      	mov	r1, lr
 801bf4e:	2720      	movs	r7, #32
 801bf50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801bf54:	4562      	cmp	r2, ip
 801bf56:	eb04 060e 	add.w	r6, r4, lr
 801bf5a:	dc02      	bgt.n	801bf62 <__ieee754_sqrt+0xce>
 801bf5c:	d113      	bne.n	801bf86 <__ieee754_sqrt+0xf2>
 801bf5e:	429e      	cmp	r6, r3
 801bf60:	d811      	bhi.n	801bf86 <__ieee754_sqrt+0xf2>
 801bf62:	2e00      	cmp	r6, #0
 801bf64:	eb06 0e04 	add.w	lr, r6, r4
 801bf68:	da43      	bge.n	801bff2 <__ieee754_sqrt+0x15e>
 801bf6a:	f1be 0f00 	cmp.w	lr, #0
 801bf6e:	db40      	blt.n	801bff2 <__ieee754_sqrt+0x15e>
 801bf70:	f10c 0801 	add.w	r8, ip, #1
 801bf74:	eba2 020c 	sub.w	r2, r2, ip
 801bf78:	429e      	cmp	r6, r3
 801bf7a:	bf88      	it	hi
 801bf7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801bf80:	1b9b      	subs	r3, r3, r6
 801bf82:	4421      	add	r1, r4
 801bf84:	46c4      	mov	ip, r8
 801bf86:	0052      	lsls	r2, r2, #1
 801bf88:	3f01      	subs	r7, #1
 801bf8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bf8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bf92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bf96:	d1dd      	bne.n	801bf54 <__ieee754_sqrt+0xc0>
 801bf98:	4313      	orrs	r3, r2
 801bf9a:	d006      	beq.n	801bfaa <__ieee754_sqrt+0x116>
 801bf9c:	1c4c      	adds	r4, r1, #1
 801bf9e:	bf13      	iteet	ne
 801bfa0:	3101      	addne	r1, #1
 801bfa2:	3001      	addeq	r0, #1
 801bfa4:	4639      	moveq	r1, r7
 801bfa6:	f021 0101 	bicne.w	r1, r1, #1
 801bfaa:	1043      	asrs	r3, r0, #1
 801bfac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801bfb0:	0849      	lsrs	r1, r1, #1
 801bfb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801bfb6:	07c2      	lsls	r2, r0, #31
 801bfb8:	bf48      	it	mi
 801bfba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801bfbe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801bfc2:	460c      	mov	r4, r1
 801bfc4:	463d      	mov	r5, r7
 801bfc6:	e77f      	b.n	801bec8 <__ieee754_sqrt+0x34>
 801bfc8:	0ada      	lsrs	r2, r3, #11
 801bfca:	3815      	subs	r0, #21
 801bfcc:	055b      	lsls	r3, r3, #21
 801bfce:	2a00      	cmp	r2, #0
 801bfd0:	d0fa      	beq.n	801bfc8 <__ieee754_sqrt+0x134>
 801bfd2:	02d7      	lsls	r7, r2, #11
 801bfd4:	d50a      	bpl.n	801bfec <__ieee754_sqrt+0x158>
 801bfd6:	f1c1 0420 	rsb	r4, r1, #32
 801bfda:	fa23 f404 	lsr.w	r4, r3, r4
 801bfde:	1e4d      	subs	r5, r1, #1
 801bfe0:	408b      	lsls	r3, r1
 801bfe2:	4322      	orrs	r2, r4
 801bfe4:	1b41      	subs	r1, r0, r5
 801bfe6:	e788      	b.n	801befa <__ieee754_sqrt+0x66>
 801bfe8:	4608      	mov	r0, r1
 801bfea:	e7f0      	b.n	801bfce <__ieee754_sqrt+0x13a>
 801bfec:	0052      	lsls	r2, r2, #1
 801bfee:	3101      	adds	r1, #1
 801bff0:	e7ef      	b.n	801bfd2 <__ieee754_sqrt+0x13e>
 801bff2:	46e0      	mov	r8, ip
 801bff4:	e7be      	b.n	801bf74 <__ieee754_sqrt+0xe0>
 801bff6:	bf00      	nop
 801bff8:	7ff00000 	.word	0x7ff00000

0801bffc <finite>:
 801bffc:	b082      	sub	sp, #8
 801bffe:	ed8d 0b00 	vstr	d0, [sp]
 801c002:	9801      	ldr	r0, [sp, #4]
 801c004:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c008:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c00c:	0fc0      	lsrs	r0, r0, #31
 801c00e:	b002      	add	sp, #8
 801c010:	4770      	bx	lr
 801c012:	0000      	movs	r0, r0
 801c014:	0000      	movs	r0, r0
	...

0801c018 <nan>:
 801c018:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c020 <nan+0x8>
 801c01c:	4770      	bx	lr
 801c01e:	bf00      	nop
 801c020:	00000000 	.word	0x00000000
 801c024:	7ff80000 	.word	0x7ff80000

0801c028 <_init>:
 801c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c02a:	bf00      	nop
 801c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c02e:	bc08      	pop	{r3}
 801c030:	469e      	mov	lr, r3
 801c032:	4770      	bx	lr

0801c034 <_fini>:
 801c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c036:	bf00      	nop
 801c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c03a:	bc08      	pop	{r3}
 801c03c:	469e      	mov	lr, r3
 801c03e:	4770      	bx	lr
