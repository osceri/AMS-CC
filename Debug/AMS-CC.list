
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0801a758  0801a758  0002a758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afa8  0801afa8  000314ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801afa8  0801afa8  0002afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afb0  0801afb0  000314ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afb0  0801afb0  0002afb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afb4  0801afb4  0002afb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014ac  20000000  0801afb8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000314ac  2**0
                  CONTENTS
 10 .bss          0001d4fc  200014b0  200014b0  000314b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001e9ac  2001e9ac  000314b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000314ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056169  00000000  00000000  000314dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000097b6  00000000  00000000  00087645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005158  00000000  00000000  00090e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004c00  00000000  00000000  00095f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bcb9  00000000  00000000  0009ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fb5f  00000000  00000000  000c6811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001001aa  00000000  00000000  00106370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  0020651a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00016374  00000000  00000000  002065e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014b0 	.word	0x200014b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a740 	.word	0x0801a740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014b4 	.word	0x200014b4
 80001cc:	0801a740 	.word	0x0801a740

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001e8f8 	.word	0x2001e8f8

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	797b      	ldrb	r3, [r7, #5]
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71bb      	strb	r3, [r7, #6]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	fa42 f303 	asr.w	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <can1_dbu_status_1_unpack>:

int can1_dbu_status_1_unpack(
    struct can1_dbu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
    uint16_t dbu_temperature;

    if (size < 8u) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d802      	bhi.n	800100c <can1_dbu_status_1_unpack+0x18>
        return (-EINVAL);
 8001006:	f06f 0315 	mvn.w	r3, #21
 800100a:	e03b      	b.n	8001084 <can1_dbu_status_1_unpack+0x90>
    }

    dst_p->activate_ts_button = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffbd 	bl	8000f94 <unpack_right_shift_u8>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	701a      	strb	r2, [r3, #0]
    dst_p->ready_to_drive_button = unpack_right_shift_u8(src_p[0], 1u, 0x02u);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffb2 	bl	8000f94 <unpack_right_shift_u8>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	705a      	strb	r2, [r3, #1]
    dbu_temperature = unpack_right_shift_u16(src_p[0], 4u, 0xf0u);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	22f0      	movs	r2, #240	; 0xf0
 800103e:	2104      	movs	r1, #4
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffbf 	bl	8000fc4 <unpack_right_shift_u16>
 8001046:	4603      	mov	r3, r0
 8001048:	82fb      	strh	r3, [r7, #22]
    dbu_temperature |= unpack_left_shift_u16(src_p[1], 4u, 0xffu);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff85 	bl	8000f64 <unpack_left_shift_u16>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4313      	orrs	r3, r2
 8001062:	82fb      	strh	r3, [r7, #22]

    if ((dbu_temperature & (1u << 11)) != 0u) {
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <can1_dbu_status_1_unpack+0x86>
        dbu_temperature |= 0xf000u;
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001074:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001078:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->dbu_temperature = (int16_t)dbu_temperature;
 800107a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	805a      	strh	r2, [r3, #2]

    return (0);
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <unpack_left_shift_u64>:

static inline uint64_t unpack_left_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010bc:	b4f0      	push	{r4, r5, r6, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	460b      	mov	r3, r1
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	4613      	mov	r3, r2
 80010cc:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) << shift);
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	4013      	ands	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	79b9      	ldrb	r1, [r7, #6]
 80010de:	f1a1 0620 	sub.w	r6, r1, #32
 80010e2:	f1c1 0020 	rsb	r0, r1, #32
 80010e6:	fa03 f501 	lsl.w	r5, r3, r1
 80010ea:	fa02 f606 	lsl.w	r6, r2, r6
 80010ee:	4335      	orrs	r5, r6
 80010f0:	fa22 f000 	lsr.w	r0, r2, r0
 80010f4:	4305      	orrs	r5, r0
 80010f6:	fa02 f401 	lsl.w	r4, r2, r1
 80010fa:	4622      	mov	r2, r4
 80010fc:	462b      	mov	r3, r5
}
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bcf0      	pop	{r4, r5, r6, r7}
 8001108:	4770      	bx	lr

0800110a <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	460b      	mov	r3, r1
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	4013      	ands	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	fa42 f303 	asr.w	r3, r2, r3
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	460b      	mov	r3, r1
 8001146:	71bb      	strb	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	4013      	ands	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	fa42 f303 	asr.w	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <unpack_right_shift_u64>:

static inline uint64_t unpack_right_shift_u64(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800116a:	b4f0      	push	{r4, r5, r6, r7}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	460b      	mov	r3, r1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
    return (uint64_t)((uint64_t)(value & mask) >> shift);
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b2da      	uxtb	r2, r3
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	79b9      	ldrb	r1, [r7, #6]
 800118c:	f1c1 0620 	rsb	r6, r1, #32
 8001190:	f1a1 0020 	sub.w	r0, r1, #32
 8001194:	fa22 f401 	lsr.w	r4, r2, r1
 8001198:	fa03 f606 	lsl.w	r6, r3, r6
 800119c:	4334      	orrs	r4, r6
 800119e:	fa23 f000 	lsr.w	r0, r3, r0
 80011a2:	4304      	orrs	r4, r0
 80011a4:	fa23 f501 	lsr.w	r5, r3, r1
 80011a8:	4622      	mov	r2, r4
 80011aa:	462b      	mov	r3, r5
}
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bcf0      	pop	{r4, r5, r6, r7}
 80011b6:	4770      	bx	lr

080011b8 <can2_amk1_setpoints_1_unpack>:

int can2_amk1_setpoints_1_unpack(
    struct can2_amk1_setpoints_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
    uint16_t amk1_target_velocity;
    uint16_t amk1_torque_limit_negativ;
    uint16_t amk1_torque_limit_positiv;

    if (size < 8u) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d802      	bhi.n	80011d0 <can2_amk1_setpoints_1_unpack+0x18>
        return (-EINVAL);
 80011ca:	f06f 0315 	mvn.w	r3, #21
 80011ce:	e081      	b.n	80012d4 <can2_amk1_setpoints_1_unpack+0x11c>
    }

    dst_p->amk1_control_inverter_on = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff95 	bl	800110a <unpack_right_shift_u8>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	701a      	strb	r2, [r3, #0]
    dst_p->amk1_control_dc_on = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff89 	bl	800110a <unpack_right_shift_u8>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	705a      	strb	r2, [r3, #1]
    dst_p->amk1_control_enable = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff7d 	bl	800110a <unpack_right_shift_u8>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	709a      	strb	r2, [r3, #2]
    dst_p->amk1_control_error_reset = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3301      	adds	r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2208      	movs	r2, #8
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff71 	bl	800110a <unpack_right_shift_u8>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	70da      	strb	r2, [r3, #3]
    amk1_target_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3302      	adds	r3, #2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff7d 	bl	800113a <unpack_right_shift_u16>
 8001240:	4603      	mov	r3, r0
 8001242:	82fb      	strh	r3, [r7, #22]
    amk1_target_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3303      	adds	r3, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2108      	movs	r1, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff1c 	bl	800108c <unpack_left_shift_u16>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4313      	orrs	r3, r2
 800125c:	82fb      	strh	r3, [r7, #22]
    dst_p->amk1_target_velocity = (int16_t)amk1_target_velocity;
 800125e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	809a      	strh	r2, [r3, #4]
    amk1_torque_limit_positiv = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3304      	adds	r3, #4
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff62 	bl	800113a <unpack_right_shift_u16>
 8001276:	4603      	mov	r3, r0
 8001278:	82bb      	strh	r3, [r7, #20]
    amk1_torque_limit_positiv |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3305      	adds	r3, #5
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	2108      	movs	r1, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff01 	bl	800108c <unpack_left_shift_u16>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8abb      	ldrh	r3, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	82bb      	strh	r3, [r7, #20]
    dst_p->amk1_torque_limit_positiv = (int16_t)amk1_torque_limit_positiv;
 8001294:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	80da      	strh	r2, [r3, #6]
    amk1_torque_limit_negativ = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3306      	adds	r3, #6
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff47 	bl	800113a <unpack_right_shift_u16>
 80012ac:	4603      	mov	r3, r0
 80012ae:	827b      	strh	r3, [r7, #18]
    amk1_torque_limit_negativ |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3307      	adds	r3, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	2108      	movs	r1, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fee6 	bl	800108c <unpack_left_shift_u16>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	827b      	strh	r3, [r7, #18]
    dst_p->amk1_torque_limit_negativ = (int16_t)amk1_torque_limit_negativ;
 80012ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	811a      	strh	r2, [r3, #8]

    return (0);
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <can2_ivt_msg_result_i_unpack>:

int can2_ivt_msg_result_i_unpack(
    struct can2_ivt_msg_result_i_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80012dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e0:	b08e      	sub	sp, #56	; 0x38
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80012e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80012e8:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t i_ts;

    if (size < 6u) {
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d802      	bhi.n	80012f6 <can2_ivt_msg_result_i_unpack+0x1a>
        return (-EINVAL);
 80012f0:	f06f 0315 	mvn.w	r3, #21
 80012f4:	e081      	b.n	80013fa <can2_ivt_msg_result_i_unpack+0x11e>
    }

    i_ts = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	2128      	movs	r1, #40	; 0x28
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fedc 	bl	80010bc <unpack_left_shift_u64>
 8001304:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	2120      	movs	r1, #32
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fed2 	bl	80010bc <unpack_left_shift_u64>
 8001318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800131c:	ea42 0400 	orr.w	r4, r2, r0
 8001320:	ea43 0501 	orr.w	r5, r3, r1
 8001324:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	3302      	adds	r3, #2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	2118      	movs	r1, #24
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec2 	bl	80010bc <unpack_left_shift_u64>
 8001338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800133c:	ea42 0800 	orr.w	r8, r2, r0
 8001340:	ea43 0901 	orr.w	r9, r3, r1
 8001344:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	3303      	adds	r3, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	2110      	movs	r1, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feb2 	bl	80010bc <unpack_left_shift_u64>
 8001358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800135c:	ea42 0400 	orr.w	r4, r2, r0
 8001360:	613c      	str	r4, [r7, #16]
 8001362:	430b      	orrs	r3, r1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800136a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	2108      	movs	r1, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe9f 	bl	80010bc <unpack_left_shift_u64>
 800137e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001382:	ea42 0400 	orr.w	r4, r2, r0
 8001386:	60bc      	str	r4, [r7, #8]
 8001388:	430b      	orrs	r3, r1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001390:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    i_ts |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fee3 	bl	800116a <unpack_right_shift_u64>
 80013a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013a8:	ea42 0400 	orr.w	r4, r2, r0
 80013ac:	603c      	str	r4, [r7, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((i_ts & (1ull << 47)) != 0ull) {
 80013ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c6:	ea02 0400 	and.w	r4, r2, r0
 80013ca:	61bc      	str	r4, [r7, #24]
 80013cc:	400b      	ands	r3, r1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013d4:	4323      	orrs	r3, r4
 80013d6:	d00a      	beq.n	80013ee <can2_ivt_msg_result_i_unpack+0x112>
        i_ts |= 0xffff000000000000ull;
 80013d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013dc:	f04f 0000 	mov.w	r0, #0
 80013e0:	4908      	ldr	r1, [pc, #32]	; (8001404 <can2_ivt_msg_result_i_unpack+0x128>)
 80013e2:	ea42 0a00 	orr.w	sl, r2, r0
 80013e6:	ea43 0b01 	orr.w	fp, r3, r1
 80013ea:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->i_ts = (int64_t)i_ts;
 80013ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001404:	ffff0000 	.word	0xffff0000

08001408 <can2_ivt_msg_result_u1_unpack>:

int can2_ivt_msg_result_u1_unpack(
    struct can2_ivt_msg_result_u1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b08e      	sub	sp, #56	; 0x38
 800140e:	af00      	add	r7, sp, #0
 8001410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001412:	62b9      	str	r1, [r7, #40]	; 0x28
 8001414:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_cells;

    if (size < 6u) {
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2b05      	cmp	r3, #5
 800141a:	d802      	bhi.n	8001422 <can2_ivt_msg_result_u1_unpack+0x1a>
        return (-EINVAL);
 800141c:	f06f 0315 	mvn.w	r3, #21
 8001420:	e081      	b.n	8001526 <can2_ivt_msg_result_u1_unpack+0x11e>
    }

    u_cells = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	2128      	movs	r1, #40	; 0x28
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe46 	bl	80010bc <unpack_left_shift_u64>
 8001430:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	2120      	movs	r1, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe3c 	bl	80010bc <unpack_left_shift_u64>
 8001444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001448:	ea42 0400 	orr.w	r4, r2, r0
 800144c:	ea43 0501 	orr.w	r5, r3, r1
 8001450:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	3302      	adds	r3, #2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	2118      	movs	r1, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2c 	bl	80010bc <unpack_left_shift_u64>
 8001464:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001468:	ea42 0800 	orr.w	r8, r2, r0
 800146c:	ea43 0901 	orr.w	r9, r3, r1
 8001470:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	2110      	movs	r1, #16
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe1c 	bl	80010bc <unpack_left_shift_u64>
 8001484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001488:	ea42 0400 	orr.w	r4, r2, r0
 800148c:	613c      	str	r4, [r7, #16]
 800148e:	430b      	orrs	r3, r1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001496:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	3304      	adds	r3, #4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	2108      	movs	r1, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe09 	bl	80010bc <unpack_left_shift_u64>
 80014aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ae:	ea42 0400 	orr.w	r4, r2, r0
 80014b2:	60bc      	str	r4, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_cells |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	3305      	adds	r3, #5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe4d 	bl	800116a <unpack_right_shift_u64>
 80014d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d4:	ea42 0400 	orr.w	r4, r2, r0
 80014d8:	603c      	str	r4, [r7, #0]
 80014da:	430b      	orrs	r3, r1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014e2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_cells & (1ull << 47)) != 0ull) {
 80014e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	ea02 0400 	and.w	r4, r2, r0
 80014f6:	61bc      	str	r4, [r7, #24]
 80014f8:	400b      	ands	r3, r1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001500:	4323      	orrs	r3, r4
 8001502:	d00a      	beq.n	800151a <can2_ivt_msg_result_u1_unpack+0x112>
        u_cells |= 0xffff000000000000ull;
 8001504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <can2_ivt_msg_result_u1_unpack+0x128>)
 800150e:	ea42 0a00 	orr.w	sl, r2, r0
 8001512:	ea43 0b01 	orr.w	fp, r3, r1
 8001516:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_cells = (int64_t)u_cells;
 800151a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800151e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001520:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3738      	adds	r7, #56	; 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001530:	ffff0000 	.word	0xffff0000

08001534 <can2_ivt_msg_result_u3_unpack>:

int can2_ivt_msg_result_u3_unpack(
    struct can2_ivt_msg_result_u3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b08e      	sub	sp, #56	; 0x38
 800153a:	af00      	add	r7, sp, #0
 800153c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800153e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001540:	627a      	str	r2, [r7, #36]	; 0x24
    uint64_t u_vehicle;

    if (size < 6u) {
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2b05      	cmp	r3, #5
 8001546:	d802      	bhi.n	800154e <can2_ivt_msg_result_u3_unpack+0x1a>
        return (-EINVAL);
 8001548:	f06f 0315 	mvn.w	r3, #21
 800154c:	e081      	b.n	8001652 <can2_ivt_msg_result_u3_unpack+0x11e>
    }

    u_vehicle = unpack_left_shift_u64(src_p[0], 40u, 0xffu);
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	2128      	movs	r1, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdb0 	bl	80010bc <unpack_left_shift_u64>
 800155c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[1], 32u, 0xffu);
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2120      	movs	r1, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fda6 	bl	80010bc <unpack_left_shift_u64>
 8001570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001574:	ea42 0400 	orr.w	r4, r2, r0
 8001578:	ea43 0501 	orr.w	r5, r3, r1
 800157c:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[2], 24u, 0xffu);
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	22ff      	movs	r2, #255	; 0xff
 8001588:	2118      	movs	r1, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd96 	bl	80010bc <unpack_left_shift_u64>
 8001590:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001594:	ea42 0800 	orr.w	r8, r2, r0
 8001598:	ea43 0901 	orr.w	r9, r3, r1
 800159c:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[3], 16u, 0xffu);
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	3303      	adds	r3, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2110      	movs	r1, #16
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd86 	bl	80010bc <unpack_left_shift_u64>
 80015b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015b4:	ea42 0400 	orr.w	r4, r2, r0
 80015b8:	613c      	str	r4, [r7, #16]
 80015ba:	430b      	orrs	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_left_shift_u64(src_p[4], 8u, 0xffu);
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	3304      	adds	r3, #4
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	2108      	movs	r1, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd73 	bl	80010bc <unpack_left_shift_u64>
 80015d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015da:	ea42 0400 	orr.w	r4, r2, r0
 80015de:	60bc      	str	r4, [r7, #8]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    u_vehicle |= unpack_right_shift_u64(src_p[5], 0u, 0xffu);
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	3305      	adds	r3, #5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb7 	bl	800116a <unpack_right_shift_u64>
 80015fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001600:	ea42 0400 	orr.w	r4, r2, r0
 8001604:	603c      	str	r4, [r7, #0]
 8001606:	430b      	orrs	r3, r1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800160e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    if ((u_vehicle & (1ull << 47)) != 0ull) {
 8001612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161e:	ea02 0400 	and.w	r4, r2, r0
 8001622:	61bc      	str	r4, [r7, #24]
 8001624:	400b      	ands	r3, r1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800162c:	4323      	orrs	r3, r4
 800162e:	d00a      	beq.n	8001646 <can2_ivt_msg_result_u3_unpack+0x112>
        u_vehicle |= 0xffff000000000000ull;
 8001630:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <can2_ivt_msg_result_u3_unpack+0x128>)
 800163a:	ea42 0a00 	orr.w	sl, r2, r0
 800163e:	ea43 0b01 	orr.w	fp, r3, r1
 8001642:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    }

    dst_p->u_vehicle = (int64_t)u_vehicle;
 8001646:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800164a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800164c:	e9c1 2300 	strd	r2, r3, [r1]

    return (0);
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3738      	adds	r7, #56	; 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165c:	ffff0000 	.word	0xffff0000

08001660 <can2_cc_status_unpack>:

int can2_cc_status_unpack(
    struct can2_cc_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <can2_cc_status_unpack+0x18>
        return (-EINVAL);
 8001672:	f06f 0315 	mvn.w	r3, #21
 8001676:	e00b      	b.n	8001690 <can2_cc_status_unpack+0x30>
    }

    dst_p->enable_ams_charging = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd42 	bl	800110a <unpack_right_shift_u8>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	701a      	strb	r2, [r3, #0]

    return (0);
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <can1_dbu_status_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can1_dbu_status_1_decode() {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
   can1_dbu_status_1_unpack(&can1_dbu_status_1, rx_data, 8);
 800169c:	2208      	movs	r2, #8
 800169e:	4904      	ldr	r1, [pc, #16]	; (80016b0 <can1_dbu_status_1_decode+0x18>)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <can1_dbu_status_1_decode+0x1c>)
 80016a2:	f7ff fca7 	bl	8000ff4 <can1_dbu_status_1_unpack>
   can1_dbu_status_1_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <can1_dbu_status_1_decode+0x20>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200014cc 	.word	0x200014cc
 80016b4:	200014d4 	.word	0x200014d4
 80016b8:	20001501 	.word	0x20001501

080016bc <can2_amk1_setpoints_1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_amk1_setpoints_1_decode() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
   can2_amk1_setpoints_1_unpack(&can2_amk1_setpoints_1, rx_data, 8);
 80016c0:	2208      	movs	r2, #8
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <can2_amk1_setpoints_1_decode+0x18>)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <can2_amk1_setpoints_1_decode+0x1c>)
 80016c6:	f7ff fd77 	bl	80011b8 <can2_amk1_setpoints_1_unpack>
   can2_amk1_setpoints_1_flag = 1;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <can2_amk1_setpoints_1_decode+0x20>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200014cc 	.word	0x200014cc
 80016d8:	200014d8 	.word	0x200014d8
 80016dc:	20001502 	.word	0x20001502

080016e0 <can2_ivt_msg_result_i_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_i_decode() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_i_unpack(&can2_ivt_msg_result_i, rx_data, 6);
 80016e4:	2206      	movs	r2, #6
 80016e6:	4904      	ldr	r1, [pc, #16]	; (80016f8 <can2_ivt_msg_result_i_decode+0x18>)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <can2_ivt_msg_result_i_decode+0x1c>)
 80016ea:	f7ff fdf7 	bl	80012dc <can2_ivt_msg_result_i_unpack>
   can2_ivt_msg_result_i_flag = 1;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <can2_ivt_msg_result_i_decode+0x20>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200014cc 	.word	0x200014cc
 80016fc:	200014e8 	.word	0x200014e8
 8001700:	20001503 	.word	0x20001503

08001704 <can2_ivt_msg_result_u1_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u1_decode() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u1_unpack(&can2_ivt_msg_result_u1, rx_data, 6);
 8001708:	2206      	movs	r2, #6
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <can2_ivt_msg_result_u1_decode+0x18>)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <can2_ivt_msg_result_u1_decode+0x1c>)
 800170e:	f7ff fe7b 	bl	8001408 <can2_ivt_msg_result_u1_unpack>
   can2_ivt_msg_result_u1_flag = 1;
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <can2_ivt_msg_result_u1_decode+0x20>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200014cc 	.word	0x200014cc
 8001720:	200014f0 	.word	0x200014f0
 8001724:	20001504 	.word	0x20001504

08001728 <can2_ivt_msg_result_u3_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_ivt_msg_result_u3_decode() {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
   can2_ivt_msg_result_u3_unpack(&can2_ivt_msg_result_u3, rx_data, 6);
 800172c:	2206      	movs	r2, #6
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <can2_ivt_msg_result_u3_decode+0x18>)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <can2_ivt_msg_result_u3_decode+0x1c>)
 8001732:	f7ff feff 	bl	8001534 <can2_ivt_msg_result_u3_unpack>
   can2_ivt_msg_result_u3_flag = 1;
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <can2_ivt_msg_result_u3_decode+0x20>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200014cc 	.word	0x200014cc
 8001744:	200014f8 	.word	0x200014f8
 8001748:	20001505 	.word	0x20001505

0800174c <can2_cc_status_decode>:

/*
 * @Brief  
 * @Retval None
 */
void can2_cc_status_decode() {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
   can2_cc_status_unpack(&can2_cc_status, rx_data, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4904      	ldr	r1, [pc, #16]	; (8001764 <can2_cc_status_decode+0x18>)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <can2_cc_status_decode+0x1c>)
 8001756:	f7ff ff83 	bl	8001660 <can2_cc_status_unpack>
   can2_cc_status_flag = 1;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <can2_cc_status_decode+0x20>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200014cc 	.word	0x200014cc
 8001768:	20001500 	.word	0x20001500
 800176c:	20001506 	.word	0x20001506

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
       can2_cc_status_rx_callback(&cc_status);
       can2_cc_status_flag = 0;
   }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data)) {
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f00f fc5c 	bl	801103e <HAL_CAN_GetRxMessage>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d136      	bne.n	80017fa <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f240 5224 	movw	r2, #1316	; 0x524
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8001796:	f240 5224 	movw	r2, #1316	; 0x524
 800179a:	4293      	cmp	r3, r2
 800179c:	d82e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800179e:	f240 5222 	movw	r2, #1314	; 0x522
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d020      	beq.n	80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80017a6:	f240 5222 	movw	r2, #1314	; 0x522
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d826      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ae:	f240 5221 	movw	r2, #1313	; 0x521
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d015      	beq.n	80017e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 80017b6:	f240 5221 	movw	r2, #1313	; 0x521
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d81e      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 80017c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80017c8:	d818      	bhi.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d003      	beq.n	80017d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 80017ce:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 80017d4:	e012      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 80017d6:	f7ff ff5f 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 80017da:	e00f      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 80017dc:	f7ff ff6e 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 80017e0:	e00c      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 80017e2:	f7ff ff7d 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 80017e6:	e009      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 80017e8:	f7ff ff8c 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 80017ec:	e006      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 80017ee:	f7ff ff9b 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 80017f2:	e003      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 80017f4:	f7ff ffaa 	bl	800174c <can2_cc_status_decode>
               break;
 80017f8:	e000      	b.n	80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
    }
 80017fa:	bf00      	nop
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20001508 	.word	0x20001508

08001808 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef rx_header;
   static uint8_t rx_data[8];

   if (HAL_OK == HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rx_header, rx_data)) {
 8001810:	f107 020c 	add.w	r2, r7, #12
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8001816:	2101      	movs	r1, #1
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f00f fc10 	bl	801103e <HAL_CAN_GetRxMessage>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d136      	bne.n	8001892 <HAL_CAN_RxFifo1MsgPendingCallback+0x8a>
       switch(rx_header.StdId) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f240 5224 	movw	r2, #1316	; 0x524
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 800182e:	f240 5224 	movw	r2, #1316	; 0x524
 8001832:	4293      	cmp	r3, r2
 8001834:	d82e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001836:	f240 5222 	movw	r2, #1314	; 0x522
 800183a:	4293      	cmp	r3, r2
 800183c:	d020      	beq.n	8001880 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
 800183e:	f240 5222 	movw	r2, #1314	; 0x522
 8001842:	4293      	cmp	r3, r2
 8001844:	d826      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001846:	f240 5221 	movw	r2, #1313	; 0x521
 800184a:	4293      	cmp	r3, r2
 800184c:	d015      	beq.n	800187a <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 800184e:	f240 5221 	movw	r2, #1313	; 0x521
 8001852:	4293      	cmp	r3, r2
 8001854:	d81e      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001856:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800185a:	d017      	beq.n	800188c <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
 800185c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8001860:	d818      	bhi.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d003      	beq.n	800186e <HAL_CAN_RxFifo1MsgPendingCallback+0x66>
 8001866:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 800186a:	d003      	beq.n	8001874 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>
           case 592:
               can2_cc_status_decode();
               break;
        }
    }
}
 800186c:	e012      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can1_dbu_status_1_decode();
 800186e:	f7ff ff13 	bl	8001698 <can1_dbu_status_1_decode>
               break;
 8001872:	e00f      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_amk1_setpoints_1_decode();
 8001874:	f7ff ff22 	bl	80016bc <can2_amk1_setpoints_1_decode>
               break;
 8001878:	e00c      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_i_decode();
 800187a:	f7ff ff31 	bl	80016e0 <can2_ivt_msg_result_i_decode>
               break;
 800187e:	e009      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u1_decode();
 8001880:	f7ff ff40 	bl	8001704 <can2_ivt_msg_result_u1_decode>
               break;
 8001884:	e006      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_ivt_msg_result_u3_decode();
 8001886:	f7ff ff4f 	bl	8001728 <can2_ivt_msg_result_u3_decode>
               break;
 800188a:	e003      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
               can2_cc_status_decode();
 800188c:	f7ff ff5e 	bl	800174c <can2_cc_status_decode>
               break;
 8001890:	e000      	b.n	8001894 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
    }
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20001510 	.word	0x20001510

080018a0 <inc_res>:
 * @Brief	Increments if true, resets (to zero) otherwise
 * @Param	A conditional statement which evaluates to true or false
 * @Param	A pointer to an integer which may be incremented or reset
 * @Retval	Void
 */
static void inc_res(uint8_t cnd, uint8_t *ptr) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
	if (cnd) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <inc_res+0x20>
		ptr[0]++;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	701a      	strb	r2, [r3, #0]
	} else {
		ptr[0] = 0;
	}
}
 80018be:	e002      	b.n	80018c6 <inc_res+0x26>
		ptr[0] = 0;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <COM_voltages_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_voltages_ok_d(double *voltages, uint8_t valid,
		uint16_t sample_constraint) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
 80018e0:	4613      	mov	r3, r2
 80018e2:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 4.19;
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <COM_voltages_ok_d+0xd4>)
 80018e6:	613b      	str	r3, [r7, #16]
	const float lower_boundary = 2.81;
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <COM_voltages_ok_d+0xd8>)
 80018ea:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 126; p++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e052      	b.n	8001998 <COM_voltages_ok_d+0xc4>
		inc_res(valid && (voltages[p] > upper_boundary), &over_voltages[p]);
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <COM_voltages_ok_d+0x4c>
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001904:	6938      	ldr	r0, [r7, #16]
 8001906:	f7fe fe11 	bl	800052c <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7ff f8f3 	bl	8000afc <__aeabi_dcmpgt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <COM_voltages_ok_d+0x4c>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <COM_voltages_ok_d+0x4e>
 8001920:	2300      	movs	r3, #0
 8001922:	b2da      	uxtb	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <COM_voltages_ok_d+0xdc>)
 8001928:	440b      	add	r3, r1
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff ffb7 	bl	80018a0 <inc_res>
		inc_res(valid && (lower_boundary > voltages[p]), &under_voltages[p]);
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00f      	beq.n	8001958 <COM_voltages_ok_d+0x84>
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7fe fdf7 	bl	800052c <__aeabi_f2d>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7ff f8d7 	bl	8000afc <__aeabi_dcmpgt>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <COM_voltages_ok_d+0x84>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <COM_voltages_ok_d+0x86>
 8001958:	2300      	movs	r3, #0
 800195a:	b2da      	uxtb	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4915      	ldr	r1, [pc, #84]	; (80019b4 <COM_voltages_ok_d+0xe0>)
 8001960:	440b      	add	r3, r1
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f7ff ff9b 	bl	80018a0 <inc_res>

		if (over_voltages[p] > sample_constraint) {
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <COM_voltages_ok_d+0xdc>)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	883a      	ldrh	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d201      	bcs.n	800197e <COM_voltages_ok_d+0xaa>
			return 0;
 800197a:	2300      	movs	r3, #0
 800197c:	e010      	b.n	80019a0 <COM_voltages_ok_d+0xcc>
		}
		if (under_voltages[p] > sample_constraint) {
 800197e:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <COM_voltages_ok_d+0xe0>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	883a      	ldrh	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d201      	bcs.n	8001992 <COM_voltages_ok_d+0xbe>
			return 0;
 800198e:	2300      	movs	r3, #0
 8001990:	e006      	b.n	80019a0 <COM_voltages_ok_d+0xcc>
	for (int p = 0; p < 126; p++) {
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b7d      	cmp	r3, #125	; 0x7d
 800199c:	dda9      	ble.n	80018f2 <COM_voltages_ok_d+0x1e>
		}
	}

	return 1;
 800199e:	2301      	movs	r3, #1

}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	4086147b 	.word	0x4086147b
 80019ac:	4033d70a 	.word	0x4033d70a
 80019b0:	20001518 	.word	0x20001518
 80019b4:	20001598 	.word	0x20001598

080019b8 <COM_temperatures_ok_d>:
 * @Param	A flag which says whether the values are valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_temperatures_ok_d(double *temperatures, uint8_t valid,
		uint16_t sample_constraint) {
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
 80019c4:	4613      	mov	r3, r2
 80019c6:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 60;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <COM_temperatures_ok_d+0xd4>)
 80019ca:	613b      	str	r3, [r7, #16]
	const float lower_boundary = -20;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <COM_temperatures_ok_d+0xd8>)
 80019ce:	60fb      	str	r3, [r7, #12]

	for (int p = 0; p < 60; p++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e052      	b.n	8001a7c <COM_temperatures_ok_d+0xc4>
		inc_res(valid && (temperatures[p] > upper_boundary),
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <COM_temperatures_ok_d+0x4c>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019e8:	6938      	ldr	r0, [r7, #16]
 80019ea:	f7fe fd9f 	bl	800052c <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7ff f881 	bl	8000afc <__aeabi_dcmpgt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <COM_temperatures_ok_d+0x4c>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <COM_temperatures_ok_d+0x4e>
 8001a04:	2300      	movs	r3, #0
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4922      	ldr	r1, [pc, #136]	; (8001a94 <COM_temperatures_ok_d+0xdc>)
 8001a0c:	440b      	add	r3, r1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7ff ff45 	bl	80018a0 <inc_res>
				&over_temperatures[p]);
		inc_res(valid && (lower_boundary > temperatures[p]),
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00f      	beq.n	8001a3c <COM_temperatures_ok_d+0x84>
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7fe fd85 	bl	800052c <__aeabi_f2d>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7ff f865 	bl	8000afc <__aeabi_dcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <COM_temperatures_ok_d+0x84>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <COM_temperatures_ok_d+0x86>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4915      	ldr	r1, [pc, #84]	; (8001a98 <COM_temperatures_ok_d+0xe0>)
 8001a44:	440b      	add	r3, r1
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff ff29 	bl	80018a0 <inc_res>
				&under_temperatures[p]);

		if (over_temperatures[p] > sample_constraint) {
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <COM_temperatures_ok_d+0xdc>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	883a      	ldrh	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d201      	bcs.n	8001a62 <COM_temperatures_ok_d+0xaa>
			return 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e010      	b.n	8001a84 <COM_temperatures_ok_d+0xcc>
		}
		if (under_temperatures[p] > sample_constraint) {
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <COM_temperatures_ok_d+0xe0>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d201      	bcs.n	8001a76 <COM_temperatures_ok_d+0xbe>
			return 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e006      	b.n	8001a84 <COM_temperatures_ok_d+0xcc>
	for (int p = 0; p < 60; p++) {
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b3b      	cmp	r3, #59	; 0x3b
 8001a80:	dda9      	ble.n	80019d6 <COM_temperatures_ok_d+0x1e>
		}
	}

	return 1;
 8001a82:	2301      	movs	r3, #1

}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	42700000 	.word	0x42700000
 8001a90:	c1a00000 	.word	0xc1a00000
 8001a94:	20001618 	.word	0x20001618
 8001a98:	20001654 	.word	0x20001654

08001a9c <COM_current_ok_d>:
 * @Param	A flag which says whether the value is valid or not (due to corruption, etc.)
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_current_ok_d(double *current, uint8_t valid,
		uint16_t sample_constraint) {
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	803b      	strh	r3, [r7, #0]
	const float upper_boundary = 40;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <COM_current_ok_d+0xa4>)
 8001aae:	60fb      	str	r3, [r7, #12]
	const float lower_boundary = -100;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <COM_current_ok_d+0xa8>)
 8001ab2:	60bb      	str	r3, [r7, #8]

	inc_res(valid && (current[0] > upper_boundary), &over_current);
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <COM_current_ok_d+0x40>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7fe fd33 	bl	800052c <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7ff f815 	bl	8000afc <__aeabi_dcmpgt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <COM_current_ok_d+0x40>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <COM_current_ok_d+0x42>
 8001adc:	2300      	movs	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <COM_current_ok_d+0xac>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fedc 	bl	80018a0 <inc_res>
	inc_res(valid && (lower_boundary > current[0]), &under_current);
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <COM_current_ok_d+0x6c>
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f7fe fd1c 	bl	800052c <__aeabi_f2d>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe ffff 	bl	8000afc <__aeabi_dcmpgt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <COM_current_ok_d+0x6c>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <COM_current_ok_d+0x6e>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	490f      	ldr	r1, [pc, #60]	; (8001b4c <COM_current_ok_d+0xb0>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fec6 	bl	80018a0 <inc_res>

	if (over_current > sample_constraint) {
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <COM_current_ok_d+0xac>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	883a      	ldrh	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d201      	bcs.n	8001b24 <COM_current_ok_d+0x88>
		return 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e008      	b.n	8001b36 <COM_current_ok_d+0x9a>
	}
	if (under_current > sample_constraint) {
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <COM_current_ok_d+0xb0>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	883a      	ldrh	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d201      	bcs.n	8001b34 <COM_current_ok_d+0x98>
		return 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <COM_current_ok_d+0x9a>
	}

	return 1;
 8001b34:	2301      	movs	r3, #1

}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	42200000 	.word	0x42200000
 8001b44:	c2c80000 	.word	0xc2c80000
 8001b48:	20001690 	.word	0x20001690
 8001b4c:	20001691 	.word	0x20001691

08001b50 <COM_data_valid_ok>:
 * @Param	A single current to check
 * @Param	The sample constraint. How many consecutive samples may be wrong before an error is triggered
 * @retval	1 if there is no error
 */
uint8_t COM_data_valid_ok(uint8_t valid,
		uint16_t sample_constraint) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80bb      	strh	r3, [r7, #4]
	inc_res(valid, &invalid);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <COM_data_valid_ok+0x34>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe9b 	bl	80018a0 <inc_res>

	if (invalid > sample_constraint) {
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <COM_data_valid_ok+0x34>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	88ba      	ldrh	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d201      	bcs.n	8001b7a <COM_data_valid_ok+0x2a>
		return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <COM_data_valid_ok+0x2c>
	}

	return 1;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20001692 	.word	0x20001692

08001b88 <FAN_initialize>:
#include "main.h"
#include "programme_data.h"

#include "FAN.h"

void FAN_initialize(TIM_HandleTypeDef *htim) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	const float frequency = 1000;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <FAN_initialize+0x4c>)
 8001b92:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = 65535 / frequency;
 8001b94:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001bd8 <FAN_initialize+0x50>
 8001b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba8:	ee17 2a90 	vmov	r2, s15
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
	htim->Instance->CCR3 = htim->Instance->ARR / 2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0852      	lsrs	r2, r2, #1
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f011 ff18 	bl	80139fc <HAL_TIM_PWM_Start>

}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	447a0000 	.word	0x447a0000
 8001bd8:	477fff00 	.word	0x477fff00

08001bdc <FAN_duty_cycle>:

void FAN_duty_cycle(TIM_HandleTypeDef *htim, float duty_cycle) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	ed87 0a00 	vstr	s0, [r7]
	if (duty_cycle < 0) {
 8001be8:	edd7 7a00 	vldr	s15, [r7]
 8001bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d502      	bpl.n	8001bfc <FAN_duty_cycle+0x20>
		duty_cycle = 0;
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
	}
	if (100 < duty_cycle) {
 8001bfc:	edd7 7a00 	vldr	s15, [r7]
 8001c00:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c54 <FAN_duty_cycle+0x78>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	dd01      	ble.n	8001c12 <FAN_duty_cycle+0x36>
		duty_cycle = 100;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <FAN_duty_cycle+0x7c>)
 8001c10:	603b      	str	r3, [r7, #0]
	}

	htim->Instance->CCR3 = (duty_cycle / 100) * htim->Instance->ARR;
 8001c12:	edd7 7a00 	vldr	s15, [r7]
 8001c16:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001c54 <FAN_duty_cycle+0x78>
 8001c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c38:	ee17 2a90 	vmov	r2, s15
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim->Instance->CNT = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	42c80000 	.word	0x42c80000
 8001c58:	42c80000 	.word	0x42c80000

08001c5c <HAL_TIM_IC_CaptureCallback>:
#include "programme_data.h"
#include "programme_queues.h"

static IMD_t IMD;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	float ante = 0;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
	float conq = 0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

	if (htim->Instance == TIM2) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d13c      	bne.n	8001cf8 <HAL_TIM_IC_CaptureCallback+0x9c>
		ante = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c7e:	2104      	movs	r1, #4
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f012 fd51 	bl	8014728 <HAL_TIM_ReadCapturedValue>
 8001c86:	ee07 0a90 	vmov	s15, r0
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	edc7 7a05 	vstr	s15, [r7, #20]
		conq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f012 fd47 	bl	8014728 <HAL_TIM_ReadCapturedValue>
 8001c9a:	ee07 0a90 	vmov	s15, r0
 8001c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca2:	edc7 7a04 	vstr	s15, [r7, #16]

		IMD.duty_cycle = ante / conq;
 8001ca6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
		IMD.frequency = 100000000 / (conq + 1);
 8001cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cc4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001d04 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001cce:	edc3 7a01 	vstr	s15, [r3, #4]

		xQueueOverwriteFromISR(IMD_queue, &IMD, &xHigherPriorityTaskWoken);
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f107 020c 	add.w	r2, r7, #12
 8001cda:	2302      	movs	r3, #2
 8001cdc:	4908      	ldr	r1, [pc, #32]	; (8001d00 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001cde:	f014 f803 	bl	8015ce8 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_TIM_IC_CaptureCallback+0x9c>
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	f3bf 8f6f 	isb	sy
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20001694 	.word	0x20001694
 8001d04:	4cbebc20 	.word	0x4cbebc20
 8001d08:	2001b5d0 	.word	0x2001b5d0
 8001d0c:	e000ed04 	.word	0xe000ed04

08001d10 <initialize_IMD>:

void initialize_IMD(TIM_HandleTypeDef *htim) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 42000000;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <initialize_IMD+0x3c>)
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1) != HAL_OK) {
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f012 f868 	bl	8013df8 <HAL_TIM_IC_Start_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <initialize_IMD+0x22>
		Error_Handler();
 8001d2e:	f002 fa77 	bl	8004220 <Error_Handler>
	}

	if (HAL_TIM_IC_Start(htim, TIM_CHANNEL_2) != HAL_OK) {
 8001d32:	2104      	movs	r1, #4
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f011 ff83 	bl	8013c40 <HAL_TIM_IC_Start>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <initialize_IMD+0x34>
		Error_Handler();
 8001d40:	f002 fa6e 	bl	8004220 <Error_Handler>
	}
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0280de80 	.word	0x0280de80

08001d50 <PID_progress>:
/*
 * @brief	Progress the PID
 * @param	Input at current timestep
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_progress(PID_t *ctrl, float input) {
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	ed87 0a00 	vstr	s0, [r7]
	ctrl->input = input;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	605a      	str	r2, [r3, #4]
	ctrl->error = ctrl->input - ctrl->reference;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	edc3 7a00 	vstr	s15, [r3]

	ctrl->output = arm_pid_f32(&(ctrl->controller), ctrl->error);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f103 0218 	add.w	r2, r3, #24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617a      	str	r2, [r7, #20]
 8001d84:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d90:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001da4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

	if (ctrl->output < ctrl->output_lower_bound) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d503      	bpl.n	8001e02 <PID_progress+0xb2>
		ctrl->output = ctrl->output_lower_bound;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]
	}

	if (ctrl->output_upper_bound < ctrl->output) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d503      	bpl.n	8001e20 <PID_progress+0xd0>
		ctrl->output = ctrl->output_upper_bound;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
	}

	return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <PID_initialize>:
 * @param	output upper bound, ex 100 for PWM
 * @retval	1 if it went through, 0 else
 */
uint8_t PID_initialize(PID_t *ctrl, float reference,
		float proportional, float integral, float derivative,
		float output_lower_bound, float output_upper_bound) {
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b088      	sub	sp, #32
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	61f8      	str	r0, [r7, #28]
 8001e36:	ed87 0a06 	vstr	s0, [r7, #24]
 8001e3a:	edc7 0a05 	vstr	s1, [r7, #20]
 8001e3e:	ed87 1a04 	vstr	s2, [r7, #16]
 8001e42:	edc7 1a03 	vstr	s3, [r7, #12]
 8001e46:	ed87 2a02 	vstr	s4, [r7, #8]
 8001e4a:	edc7 2a01 	vstr	s5, [r7, #4]
	if (output_upper_bound < output_lower_bound) {
 8001e4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	d501      	bpl.n	8001e64 <PID_initialize+0x36>
		return 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e024      	b.n	8001eae <PID_initialize+0x80>
	}

	ctrl->error = 0.;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
	ctrl->input = 0.;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
	ctrl->output = 0.;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
	ctrl->reference = reference;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	60da      	str	r2, [r3, #12]

	ctrl->output_upper_bound = output_upper_bound;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
	ctrl->output_lower_bound = output_lower_bound;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	615a      	str	r2, [r3, #20]

	ctrl->controller.Kp = proportional;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
	ctrl->controller.Ki = integral;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
	ctrl->controller.Kd = derivative;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38

	arm_pid_init_f32(&(ctrl->controller), 1);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f017 fdf8 	bl	8019a9c <arm_pid_init_f32>

	return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <_cbSendSystemDesc+0x14>)
 8001ebe:	f017 fb6d 	bl	801959c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <_cbSendSystemDesc+0x18>)
 8001ec4:	f017 fb6a 	bl	801959c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0801a758 	.word	0x0801a758
 8001ed0:	0801a784 	.word	0x0801a784

08001ed4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <SEGGER_SYSVIEW_Conf+0x28>)
 8001ee4:	f016 fed8 	bl	8018c98 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ee8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001eec:	f016 ff18 	bl	8018d20 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000080 	.word	0x20000080
 8001ef8:	08001eb9 	.word	0x08001eb9
 8001efc:	0801a8ac 	.word	0x0801a8ac

08001f00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	e048      	b.n	8001f9e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001f0c:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f015 fa05 	bl	801732c <uxTaskGetStackHighWaterMark>
 8001f22:	4601      	mov	r1, r0
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4403      	add	r3, r0
 8001f32:	3310      	adds	r3, #16
 8001f34:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001f36:	491f      	ldr	r1, [pc, #124]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	4c16      	ldr	r4, [pc, #88]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4423      	add	r3, r4
 8001f66:	3308      	adds	r3, #8
 8001f68:	681c      	ldr	r4, [r3, #0]
 8001f6a:	4d12      	ldr	r5, [pc, #72]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	442b      	add	r3, r5
 8001f78:	330c      	adds	r3, #12
 8001f7a:	681d      	ldr	r5, [r3, #0]
 8001f7c:	4e0d      	ldr	r6, [pc, #52]	; (8001fb4 <_cbSendTaskList+0xb4>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4433      	add	r3, r6
 8001f8a:	3310      	adds	r3, #16
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	462b      	mov	r3, r5
 8001f92:	4622      	mov	r2, r4
 8001f94:	f000 f8b6 	bl	8002104 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <_cbSendTaskList+0xb8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3b1      	bcc.n	8001f0c <_cbSendTaskList+0xc>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000169c 	.word	0x2000169c
 8001fb8:	200017dc 	.word	0x200017dc

08001fbc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001fc2:	f014 fe8b 	bl	8016cdc <xTaskGetTickCountFromISR>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	f04f 0400 	mov.w	r4, #0
 8001fde:	f04f 0500 	mov.w	r5, #0
 8001fe2:	015d      	lsls	r5, r3, #5
 8001fe4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fe8:	0154      	lsls	r4, r2, #5
 8001fea:	4622      	mov	r2, r4
 8001fec:	462b      	mov	r3, r5
 8001fee:	1a12      	subs	r2, r2, r0
 8001ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	f04f 0500 	mov.w	r5, #0
 8001ffc:	009d      	lsls	r5, r3, #2
 8001ffe:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002002:	0094      	lsls	r4, r2, #2
 8002004:	4622      	mov	r2, r4
 8002006:	462b      	mov	r3, r5
 8002008:	1812      	adds	r2, r2, r0
 800200a:	eb41 0303 	adc.w	r3, r1, r3
 800200e:	f04f 0000 	mov.w	r0, #0
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800201c:	00d0      	lsls	r0, r2, #3
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8002026:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bdb0      	pop	{r4, r5, r7, pc}

08002034 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002042:	2205      	movs	r2, #5
 8002044:	492b      	ldr	r1, [pc, #172]	; (80020f4 <SYSVIEW_AddTask+0xc0>)
 8002046:	68b8      	ldr	r0, [r7, #8]
 8002048:	f017 fd72 	bl	8019b30 <memcmp>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04b      	beq.n	80020ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d903      	bls.n	8002062 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <SYSVIEW_AddTask+0xc8>)
 800205c:	f017 fcc2 	bl	80199e4 <SEGGER_SYSVIEW_Warn>
    return;
 8002060:	e044      	b.n	80020ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4926      	ldr	r1, [pc, #152]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4921      	ldr	r1, [pc, #132]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3304      	adds	r3, #4
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	491b      	ldr	r1, [pc, #108]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3308      	adds	r3, #8
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4916      	ldr	r1, [pc, #88]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	330c      	adds	r3, #12
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4910      	ldr	r1, [pc, #64]	; (8002100 <SYSVIEW_AddTask+0xcc>)
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3310      	adds	r3, #16
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <SYSVIEW_AddTask+0xc4>)
 80020d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f80e 	bl	8002104 <SYSVIEW_SendTaskInfo>
 80020e8:	e000      	b.n	80020ec <SYSVIEW_AddTask+0xb8>
    return;
 80020ea:	bf00      	nop

}
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	0801a794 	.word	0x0801a794
 80020f8:	200017dc 	.word	0x200017dc
 80020fc:	0801a79c 	.word	0x0801a79c
 8002100:	2000169c 	.word	0x2000169c

08002104 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	2214      	movs	r2, #20
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f017 fd24 	bl	8019b68 <memset>
  TaskInfo.TaskID     = TaskID;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4618      	mov	r0, r3
 800213a:	f017 f937 	bl	80193ac <SEGGER_SYSVIEW_SendTaskInfo>
}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <state_machine_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
void state_machine_step(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	switch (state) {
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <state_machine_step+0xc8>)
 800214e:	f993 3000 	ldrsb.w	r3, [r3]
 8002152:	3301      	adds	r3, #1
 8002154:	2b08      	cmp	r3, #8
 8002156:	d851      	bhi.n	80021fc <state_machine_step+0xb4>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <state_machine_step+0x18>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	0800218d 	.word	0x0800218d
 8002164:	08002185 	.word	0x08002185
 8002168:	0800219b 	.word	0x0800219b
 800216c:	080021a9 	.word	0x080021a9
 8002170:	080021b7 	.word	0x080021b7
 8002174:	080021c5 	.word	0x080021c5
 8002178:	080021d3 	.word	0x080021d3
 800217c:	080021e1 	.word	0x080021e1
 8002180:	080021ef 	.word	0x080021ef
	case STATE_NONE:
		state = STATE_ENTRY;
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <state_machine_step+0xc8>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
		break;
 800218a:	e037      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_ERROR:
		state = state_error_step();
 800218c:	f000 f844 	bl	8002218 <state_error_step>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <state_machine_step+0xc8>)
 8002196:	701a      	strb	r2, [r3, #0]
		break;
 8002198:	e030      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_ENTRY:
		state = state_entry_step();
 800219a:	f000 f842 	bl	8002222 <state_entry_step>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <state_machine_step+0xc8>)
 80021a4:	701a      	strb	r2, [r3, #0]
		break;
 80021a6:	e029      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_IDLE:
		state = state_idle_step();
 80021a8:	f000 f844 	bl	8002234 <state_idle_step>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <state_machine_step+0xc8>)
 80021b2:	701a      	strb	r2, [r3, #0]
		break;
 80021b4:	e022      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_PRECHARGE_DRIVE:
		state = state_precharge_drive_step();
 80021b6:	f000 f8a3 	bl	8002300 <state_precharge_drive_step>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <state_machine_step+0xc8>)
 80021c0:	701a      	strb	r2, [r3, #0]
		break;
 80021c2:	e01b      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_DRIVE:
		state = state_drive_step();
 80021c4:	f000 f988 	bl	80024d8 <state_drive_step>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <state_machine_step+0xc8>)
 80021ce:	701a      	strb	r2, [r3, #0]
		break;
 80021d0:	e014      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_PRECHARGE_CHARGE:
		state = state_precharge_charge_step();
 80021d2:	f000 f98d 	bl	80024f0 <state_precharge_charge_step>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <state_machine_step+0xc8>)
 80021dc:	701a      	strb	r2, [r3, #0]
		break;
 80021de:	e00d      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_CHARGE:
		state = state_charge_step();
 80021e0:	f000 fb92 	bl	8002908 <state_charge_step>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <state_machine_step+0xc8>)
 80021ea:	701a      	strb	r2, [r3, #0]
		break;
 80021ec:	e006      	b.n	80021fc <state_machine_step+0xb4>
	case STATE_BALANCE:
		state = state_balance_step();
 80021ee:	f000 fabf 	bl	8002770 <state_balance_step>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <state_machine_step+0xc8>)
 80021f8:	701a      	strb	r2, [r3, #0]
		break;
 80021fa:	bf00      	nop
	}

	xQueueOverwrite(state_queue, &state);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <state_machine_step+0xcc>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	2302      	movs	r3, #2
 8002202:	2200      	movs	r2, #0
 8002204:	4902      	ldr	r1, [pc, #8]	; (8002210 <state_machine_step+0xc8>)
 8002206:	f013 fc49 	bl	8015a9c <xQueueGenericSend>

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200017e0 	.word	0x200017e0
 8002214:	2001b5c8 	.word	0x2001b5c8

08002218 <state_error_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_error_step(void) {
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
	/* WAIT FOR WATCHDOG TO KILL PROGRAMME */
	__disable_irq();
	for (;;)
 8002220:	e7fe      	b.n	8002220 <state_error_step+0x8>

08002222 <state_entry_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_entry_step(void) {
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

	/* ALL PERIPHERALS SHOULD BE INITIALIZED AT THIS POINT. */
	/* .. IT WOULD BE A GOOD IDEA TO xQueueReceive() EVERY QUEUE/DATA PORT TO MAKE SURE THAT THEY ARE RUNNING*/

	return STATE_IDLE;
 8002226:	2302      	movs	r3, #2
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <state_idle_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_idle_step(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	set_precharge_ext(0);
 800223a:	2000      	movs	r0, #0
 800223c:	f002 f83e 	bl	80042bc <set_precharge_ext>
	set_air_plus_ext(0);
 8002240:	2000      	movs	r0, #0
 8002242:	f001 fff3 	bl	800422c <set_air_plus_ext>
	set_air_minus_ext(0);
 8002246:	2000      	movs	r0, #0
 8002248:	f002 f814 	bl	8004274 <set_air_minus_ext>
	set_enable_charge_ext(0);
 800224c:	2000      	movs	r0, #0
 800224e:	f002 f8bb 	bl	80043c8 <set_enable_charge_ext>

	for (int i = 0; i < 126; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	e009      	b.n	800226c <state_idle_step+0x38>
		set_balance_ext(0, i, NULL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	2000      	movs	r0, #0
 8002262:	f002 f8c5 	bl	80043f0 <set_balance_ext>
	for (int i = 0; i < 126; i++) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3301      	adds	r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b7d      	cmp	r3, #125	; 0x7d
 8002270:	ddf2      	ble.n	8002258 <state_idle_step+0x24>
	uint8_t SC;
	uint8_t start_drive;
	uint8_t start_charge;
	uint8_t start_balance;

	SC = get_sc_probe_ext();
 8002272:	f002 f85f 	bl	8004334 <get_sc_probe_ext>
 8002276:	4603      	mov	r3, r0
 8002278:	70fb      	strb	r3, [r7, #3]

	if (xQueueReceive(start_drive_queue, &start_drive, 0)) {
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <state_idle_step+0xbc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1cb9      	adds	r1, r7, #2
 8002280:	2200      	movs	r2, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f013 fde0 	bl	8015e48 <xQueueReceive>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <state_idle_step+0x6a>
		if (SC && start_drive) {
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <state_idle_step+0x6a>
 8002294:	78bb      	ldrb	r3, [r7, #2]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <state_idle_step+0x6a>
			return STATE_PRECHARGE_DRIVE;
 800229a:	2303      	movs	r3, #3
 800229c:	e024      	b.n	80022e8 <state_idle_step+0xb4>
		}
	}
	if (xQueueReceive(start_charge_queue, &start_charge, 0)) {
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <state_idle_step+0xc0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1c79      	adds	r1, r7, #1
 80022a4:	2200      	movs	r2, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f013 fdce 	bl	8015e48 <xQueueReceive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <state_idle_step+0x8e>
		if (SC && start_charge) {
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <state_idle_step+0x8e>
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <state_idle_step+0x8e>
			return STATE_PRECHARGE_CHARGE;
 80022be:	2305      	movs	r3, #5
 80022c0:	e012      	b.n	80022e8 <state_idle_step+0xb4>
		}
	}
	if (xQueueReceive(start_balance_queue, &start_balance, 0)) {
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <state_idle_step+0xc4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4639      	mov	r1, r7
 80022c8:	2200      	movs	r2, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f013 fdbc 	bl	8015e48 <xQueueReceive>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <state_idle_step+0xb2>
		if (!SC && start_balance) {
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <state_idle_step+0xb2>
 80022dc:	783b      	ldrb	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <state_idle_step+0xb2>
			return STATE_BALANCE;
 80022e2:	2307      	movs	r3, #7
 80022e4:	e000      	b.n	80022e8 <state_idle_step+0xb4>
		}
	}


	return STATE_IDLE;
 80022e6:	2302      	movs	r3, #2
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2001b5c4 	.word	0x2001b5c4
 80022f4:	2001b5d4 	.word	0x2001b5d4
 80022f8:	2001b5e8 	.word	0x2001b5e8
 80022fc:	00000000 	.word	0x00000000

08002300 <state_precharge_drive_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_precharge_drive_step(void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
	float DELAY = 4.0;
 8002306:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800230a:	61fb      	str	r3, [r7, #28]
	double accumulator_voltage;
	double vehicle_voltage;

	uint16_t precharge_timed_out = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* First we close the negative AIR */
	set_air_minus_ext(1);
 8002310:	2001      	movs	r0, #1
 8002312:	f001 ffaf 	bl	8004274 <set_air_minus_ext>
	osDelay(TICK2HZ * DELAY);
 8002316:	69f8      	ldr	r0, [r7, #28]
 8002318:	f7fe f908 	bl	800052c <__aeabi_f2d>
 800231c:	a36a      	add	r3, pc, #424	; (adr r3, 80024c8 <state_precharge_drive_step+0x1c8>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f95b 	bl	80005dc <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc2d 	bl	8000b8c <__aeabi_d2uiz>
 8002332:	4603      	mov	r3, r0
 8002334:	4618      	mov	r0, r3
 8002336:	f013 f93c 	bl	80155b2 <osDelay>
	if (get_air_minus_ext() == 0) {
 800233a:	f001 ffaf 	bl	800429c <get_air_minus_ext>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <state_precharge_drive_step+0x48>

		return STATE_IDLE;
 8002344:	2302      	movs	r3, #2
 8002346:	e0b6      	b.n	80024b6 <state_precharge_drive_step+0x1b6>
	}

	/* Then we close the precharge resistor relay */
	set_precharge_ext(1);
 8002348:	2001      	movs	r0, #1
 800234a:	f001 ffb7 	bl	80042bc <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 800234e:	69f8      	ldr	r0, [r7, #28]
 8002350:	f7fe f8ec 	bl	800052c <__aeabi_f2d>
 8002354:	a35c      	add	r3, pc, #368	; (adr r3, 80024c8 <state_precharge_drive_step+0x1c8>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe f93f 	bl	80005dc <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fc11 	bl	8000b8c <__aeabi_d2uiz>
 800236a:	4603      	mov	r3, r0
 800236c:	4618      	mov	r0, r3
 800236e:	f013 f920 	bl	80155b2 <osDelay>
	if (get_precharge_ext() == 0) {
 8002372:	f001 ffb7 	bl	80042e4 <get_precharge_ext>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <state_precharge_drive_step+0x80>

		return STATE_IDLE;
 800237c:	2302      	movs	r3, #2
 800237e:	e09a      	b.n	80024b6 <state_precharge_drive_step+0x1b6>

	/*
	 * Now we wait a minimum of 0.5s and a maximum of 15s for the inverter (vehicle) voltage to
	 * reach 95% of the accumulator (cell) voltage.
	 */
	uint32_t initial_tick = osKernelGetTickCount();
 8002380:	f013 f870 	bl	8015464 <osKernelGetTickCount>
 8002384:	61b8      	str	r0, [r7, #24]
	uint32_t current_tick = osKernelGetTickCount();
 8002386:	f013 f86d 	bl	8015464 <osKernelGetTickCount>
 800238a:	6238      	str	r0, [r7, #32]
	uint32_t min_tick = TICK2HZ * 0.5; // Wait at least 0.5 seconds
 800238c:	235f      	movs	r3, #95	; 0x5f
 800238e:	617b      	str	r3, [r7, #20]
	uint32_t max_tick = TICK2HZ * 25; // Wait at most 15 seconds
 8002390:	f241 2399 	movw	r3, #4761	; 0x1299
 8002394:	613b      	str	r3, [r7, #16]

	/* We want the data to be up-to-date. Clear whatever is currently gathered */
	xQueueReceive(accumulator_voltage_queue, &accumulator_voltage, 0);
 8002396:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <state_precharge_drive_step+0x1d0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f107 0108 	add.w	r1, r7, #8
 800239e:	2200      	movs	r2, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f013 fd51 	bl	8015e48 <xQueueReceive>
	xQueueReceive(vehicle_voltage_queue, &vehicle_voltage, 0);
 80023a6:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <state_precharge_drive_step+0x1d4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4639      	mov	r1, r7
 80023ac:	2200      	movs	r2, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f013 fd4a 	bl	8015e48 <xQueueReceive>

	for (;; current_tick = osKernelGetTickCount()) {
		osDelay(TICK2HZ * 0.100);
 80023b4:	2013      	movs	r0, #19
 80023b6:	f013 f8fc 	bl	80155b2 <osDelay>

		/* Skip the first few loops */
		if (min_tick > (current_tick - initial_tick)) {
 80023ba:	6a3a      	ldr	r2, [r7, #32]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d832      	bhi.n	800242c <state_precharge_drive_step+0x12c>
			continue;
		}

		/* If 15s have gone by and we haven't left this loop, then we should exit */
		if ((current_tick - initial_tick) > max_tick) {
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d202      	bcs.n	80023d8 <state_precharge_drive_step+0xd8>
			precharge_timed_out = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 80023d6:	e030      	b.n	800243a <state_precharge_drive_step+0x13a>
		}

		/* If no new voltage data is retrieved we shouldn't go on */
		if (!(xQueueReceive(accumulator_voltage_queue, &accumulator_voltage, 0)
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <state_precharge_drive_step+0x1d0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f107 0108 	add.w	r1, r7, #8
 80023e0:	2200      	movs	r2, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f013 fd30 	bl	8015e48 <xQueueReceive>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <state_precharge_drive_step+0x130>
				&& xQueueReceive(vehicle_voltage_queue, &vehicle_voltage, 0))) {
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <state_precharge_drive_step+0x1d4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4639      	mov	r1, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f013 fd26 	bl	8015e48 <xQueueReceive>
 80023fc:	4603      	mov	r3, r0
		if (!(xQueueReceive(accumulator_voltage_queue, &accumulator_voltage, 0)
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <state_precharge_drive_step+0x130>
			continue;
		}

		/* If we are within time constraints and the data is up-to-date and satisfactory, then go on! */
		if (0.95 * accumulator_voltage < vehicle_voltage) {
 8002402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002406:	a32e      	add	r3, pc, #184	; (adr r3, 80024c0 <state_precharge_drive_step+0x1c0>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fe f8e6 	bl	80005dc <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800241c:	f7fe fb50 	bl	8000ac0 <__aeabi_dcmplt>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <state_precharge_drive_step+0x132>
			precharge_timed_out = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 800242a:	e006      	b.n	800243a <state_precharge_drive_step+0x13a>
			continue;
 800242c:	bf00      	nop
 800242e:	e000      	b.n	8002432 <state_precharge_drive_step+0x132>
			continue;
 8002430:	bf00      	nop
	for (;; current_tick = osKernelGetTickCount()) {
 8002432:	f013 f817 	bl	8015464 <osKernelGetTickCount>
 8002436:	6238      	str	r0, [r7, #32]
		osDelay(TICK2HZ * 0.100);
 8002438:	e7bc      	b.n	80023b4 <state_precharge_drive_step+0xb4>
		}

	}
	if (precharge_timed_out == 1) {
 800243a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <state_precharge_drive_step+0x144>

		return STATE_IDLE;
 8002440:	2302      	movs	r3, #2
 8002442:	e038      	b.n	80024b6 <state_precharge_drive_step+0x1b6>
	}

	/* Now we close the positive AIR */
	set_air_plus_ext(1);
 8002444:	2001      	movs	r0, #1
 8002446:	f001 fef1 	bl	800422c <set_air_plus_ext>
	osDelay(TICK2HZ * DELAY);
 800244a:	69f8      	ldr	r0, [r7, #28]
 800244c:	f7fe f86e 	bl	800052c <__aeabi_f2d>
 8002450:	a31d      	add	r3, pc, #116	; (adr r3, 80024c8 <state_precharge_drive_step+0x1c8>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe f8c1 	bl	80005dc <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fb93 	bl	8000b8c <__aeabi_d2uiz>
 8002466:	4603      	mov	r3, r0
 8002468:	4618      	mov	r0, r3
 800246a:	f013 f8a2 	bl	80155b2 <osDelay>
	if (get_air_plus_ext() == 0) {
 800246e:	f001 fef1 	bl	8004254 <get_air_plus_ext>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <state_precharge_drive_step+0x17c>

		return STATE_IDLE;
 8002478:	2302      	movs	r3, #2
 800247a:	e01c      	b.n	80024b6 <state_precharge_drive_step+0x1b6>
	}

	/* At last we open the precharge resistor relay, so we don't burn it if the positive AIR opens unexpectedly */
	set_precharge_ext(0);
 800247c:	2000      	movs	r0, #0
 800247e:	f001 ff1d 	bl	80042bc <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 8002482:	69f8      	ldr	r0, [r7, #28]
 8002484:	f7fe f852 	bl	800052c <__aeabi_f2d>
 8002488:	a30f      	add	r3, pc, #60	; (adr r3, 80024c8 <state_precharge_drive_step+0x1c8>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f8a5 	bl	80005dc <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb77 	bl	8000b8c <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f013 f886 	bl	80155b2 <osDelay>
	if (get_precharge_ext() == 1) {
 80024a6:	f001 ff1d 	bl	80042e4 <get_precharge_ext>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <state_precharge_drive_step+0x1b4>

		return STATE_IDLE;
 80024b0:	2302      	movs	r3, #2
 80024b2:	e000      	b.n	80024b6 <state_precharge_drive_step+0x1b6>
	}

	return STATE_DRIVE;
 80024b4:	2304      	movs	r3, #4
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	66666666 	.word	0x66666666
 80024c4:	3fee6666 	.word	0x3fee6666
 80024c8:	f3cf3cf4 	.word	0xf3cf3cf4
 80024cc:	4067cf3c 	.word	0x4067cf3c
 80024d0:	2001b5e4 	.word	0x2001b5e4
 80024d4:	2001b5dc 	.word	0x2001b5dc

080024d8 <state_drive_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_drive_step(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	if (!get_sc_probe_ext()) {
 80024dc:	f001 ff2a 	bl	8004334 <get_sc_probe_ext>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <state_drive_step+0x12>
		return STATE_IDLE;
 80024e6:	2302      	movs	r3, #2
 80024e8:	e000      	b.n	80024ec <state_drive_step+0x14>
	}
	return STATE_DRIVE;
 80024ea:	2304      	movs	r3, #4
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <state_precharge_charge_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_precharge_charge_step(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
	float DELAY = 4.0;
 80024f6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80024fa:	61fb      	str	r3, [r7, #28]
	double accumulator_voltage;
	double vehicle_voltage;

	set_charger_voltage_limit_ext(4.15 * 126);
 80024fc:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80026d0 <state_precharge_charge_step+0x1e0>
 8002500:	f001 ff3a 	bl	8004378 <set_charger_voltage_limit_ext>
	set_charger_current_limit_ext(2 * 6.6);
 8002504:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80026d4 <state_precharge_charge_step+0x1e4>
 8002508:	f001 ff4a 	bl	80043a0 <set_charger_current_limit_ext>

	uint16_t precharge_timed_out = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* First we close the negative AIR */
	set_air_minus_ext(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f001 feaf 	bl	8004274 <set_air_minus_ext>
	osDelay(TICK2HZ * DELAY);
 8002516:	69f8      	ldr	r0, [r7, #28]
 8002518:	f7fe f808 	bl	800052c <__aeabi_f2d>
 800251c:	a368      	add	r3, pc, #416	; (adr r3, 80026c0 <state_precharge_charge_step+0x1d0>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fe f85b 	bl	80005dc <__aeabi_dmul>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fb2d 	bl	8000b8c <__aeabi_d2uiz>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	f013 f83c 	bl	80155b2 <osDelay>
	if (get_air_minus_ext() == 0) {
 800253a:	f001 feaf 	bl	800429c <get_air_minus_ext>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <state_precharge_charge_step+0x58>

		return STATE_IDLE;
 8002544:	2302      	movs	r3, #2
 8002546:	e0b6      	b.n	80026b6 <state_precharge_charge_step+0x1c6>
	}

	/* Then we close the precharge resistor relay */
	set_precharge_ext(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f001 feb7 	bl	80042bc <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 800254e:	69f8      	ldr	r0, [r7, #28]
 8002550:	f7fd ffec 	bl	800052c <__aeabi_f2d>
 8002554:	a35a      	add	r3, pc, #360	; (adr r3, 80026c0 <state_precharge_charge_step+0x1d0>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fe f83f 	bl	80005dc <__aeabi_dmul>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7fe fb11 	bl	8000b8c <__aeabi_d2uiz>
 800256a:	4603      	mov	r3, r0
 800256c:	4618      	mov	r0, r3
 800256e:	f013 f820 	bl	80155b2 <osDelay>
	if (get_precharge_ext() == 0) {
 8002572:	f001 feb7 	bl	80042e4 <get_precharge_ext>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <state_precharge_charge_step+0x90>

		return STATE_IDLE;
 800257c:	2302      	movs	r3, #2
 800257e:	e09a      	b.n	80026b6 <state_precharge_charge_step+0x1c6>

	/*
	 * Now we wait a minimum of 0.5s and a maximum of 15s for the inverter (vehicle) voltage to
	 * reach 95% of the accumulator (cell) voltage.
	 */
	uint32_t initial_tick = osKernelGetTickCount();
 8002580:	f012 ff70 	bl	8015464 <osKernelGetTickCount>
 8002584:	61b8      	str	r0, [r7, #24]
	uint32_t current_tick = osKernelGetTickCount();
 8002586:	f012 ff6d 	bl	8015464 <osKernelGetTickCount>
 800258a:	6238      	str	r0, [r7, #32]
	uint32_t min_tick = TICK2HZ * 0.5; // Wait at least 0.5 seconds
 800258c:	235f      	movs	r3, #95	; 0x5f
 800258e:	617b      	str	r3, [r7, #20]
	uint32_t max_tick = TICK2HZ * 25; // Wait at most 15 seconds
 8002590:	f241 2399 	movw	r3, #4761	; 0x1299
 8002594:	613b      	str	r3, [r7, #16]

	/* We want the data to be up-to-date. Clear whatever is currently gathered */
	xQueueReceive(accumulator_voltage_queue, &accumulator_voltage, 0);
 8002596:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <state_precharge_charge_step+0x1e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f107 0108 	add.w	r1, r7, #8
 800259e:	2200      	movs	r2, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f013 fc51 	bl	8015e48 <xQueueReceive>
	xQueueReceive(vehicle_voltage_queue, &vehicle_voltage, 0);
 80025a6:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <state_precharge_charge_step+0x1ec>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4639      	mov	r1, r7
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f013 fc4a 	bl	8015e48 <xQueueReceive>

	for (;; current_tick = osKernelGetTickCount()) {
		osDelay(TICK2HZ * 0.100);
 80025b4:	2013      	movs	r0, #19
 80025b6:	f012 fffc 	bl	80155b2 <osDelay>

		/* Skip the first few loops */
		if (min_tick > (current_tick - initial_tick)) {
 80025ba:	6a3a      	ldr	r2, [r7, #32]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d832      	bhi.n	800262c <state_precharge_charge_step+0x13c>
			continue;
		}

		/* If 15s have gone by and we haven't left this loop, then we should exit */
		if ((current_tick - initial_tick) > max_tick) {
 80025c6:	6a3a      	ldr	r2, [r7, #32]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d202      	bcs.n	80025d8 <state_precharge_charge_step+0xe8>
			precharge_timed_out = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 80025d6:	e030      	b.n	800263a <state_precharge_charge_step+0x14a>
		}

		/* If no new voltage data is retrieved we shouldn't go on */
		if (!(xQueueReceive(accumulator_voltage_queue, &accumulator_voltage, 0)
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <state_precharge_charge_step+0x1e8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f107 0108 	add.w	r1, r7, #8
 80025e0:	2200      	movs	r2, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f013 fc30 	bl	8015e48 <xQueueReceive>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d020      	beq.n	8002630 <state_precharge_charge_step+0x140>
				&& xQueueReceive(vehicle_voltage_queue, &vehicle_voltage, 0))) {
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <state_precharge_charge_step+0x1ec>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4639      	mov	r1, r7
 80025f4:	2200      	movs	r2, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f013 fc26 	bl	8015e48 <xQueueReceive>
 80025fc:	4603      	mov	r3, r0
		if (!(xQueueReceive(accumulator_voltage_queue, &accumulator_voltage, 0)
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <state_precharge_charge_step+0x140>
			continue;
		}

		/* If we are within time constraints and the data is up-to-date and satisfactory, then go on! */
		if (0.95 * accumulator_voltage < vehicle_voltage) {
 8002602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002606:	a330      	add	r3, pc, #192	; (adr r3, 80026c8 <state_precharge_charge_step+0x1d8>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fd ffe6 	bl	80005dc <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800261c:	f7fe fa50 	bl	8000ac0 <__aeabi_dcmplt>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <state_precharge_charge_step+0x142>
			precharge_timed_out = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 800262a:	e006      	b.n	800263a <state_precharge_charge_step+0x14a>
			continue;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <state_precharge_charge_step+0x142>
			continue;
 8002630:	bf00      	nop
	for (;; current_tick = osKernelGetTickCount()) {
 8002632:	f012 ff17 	bl	8015464 <osKernelGetTickCount>
 8002636:	6238      	str	r0, [r7, #32]
		osDelay(TICK2HZ * 0.100);
 8002638:	e7bc      	b.n	80025b4 <state_precharge_charge_step+0xc4>
		}

	}
	if (precharge_timed_out == 1) {
 800263a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <state_precharge_charge_step+0x154>

		return STATE_IDLE;
 8002640:	2302      	movs	r3, #2
 8002642:	e038      	b.n	80026b6 <state_precharge_charge_step+0x1c6>
	}

	/* Now we close the positive AIR */
	set_air_plus_ext(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f001 fdf1 	bl	800422c <set_air_plus_ext>
	osDelay(TICK2HZ * DELAY);
 800264a:	69f8      	ldr	r0, [r7, #28]
 800264c:	f7fd ff6e 	bl	800052c <__aeabi_f2d>
 8002650:	a31b      	add	r3, pc, #108	; (adr r3, 80026c0 <state_precharge_charge_step+0x1d0>)
 8002652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002656:	f7fd ffc1 	bl	80005dc <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fa93 	bl	8000b8c <__aeabi_d2uiz>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f012 ffa2 	bl	80155b2 <osDelay>
	if (get_air_plus_ext() == 0) {
 800266e:	f001 fdf1 	bl	8004254 <get_air_plus_ext>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <state_precharge_charge_step+0x18c>

		return STATE_IDLE;
 8002678:	2302      	movs	r3, #2
 800267a:	e01c      	b.n	80026b6 <state_precharge_charge_step+0x1c6>
	}

	/* At last we open the precharge resistor relay, so we don't burn it if the positive AIR opens unexpectedly */
	set_precharge_ext(0);
 800267c:	2000      	movs	r0, #0
 800267e:	f001 fe1d 	bl	80042bc <set_precharge_ext>
	osDelay(TICK2HZ * DELAY);
 8002682:	69f8      	ldr	r0, [r7, #28]
 8002684:	f7fd ff52 	bl	800052c <__aeabi_f2d>
 8002688:	a30d      	add	r3, pc, #52	; (adr r3, 80026c0 <state_precharge_charge_step+0x1d0>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd ffa5 	bl	80005dc <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fa77 	bl	8000b8c <__aeabi_d2uiz>
 800269e:	4603      	mov	r3, r0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f012 ff86 	bl	80155b2 <osDelay>
	if (get_precharge_ext() == 1) {
 80026a6:	f001 fe1d 	bl	80042e4 <get_precharge_ext>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <state_precharge_charge_step+0x1c4>

		return STATE_IDLE;
 80026b0:	2302      	movs	r3, #2
 80026b2:	e000      	b.n	80026b6 <state_precharge_charge_step+0x1c6>
	}

	return STATE_CHARGE;
 80026b4:	2306      	movs	r3, #6
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3728      	adds	r7, #40	; 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	f3cf3cf4 	.word	0xf3cf3cf4
 80026c4:	4067cf3c 	.word	0x4067cf3c
 80026c8:	66666666 	.word	0x66666666
 80026cc:	3fee6666 	.word	0x3fee6666
 80026d0:	4402b99a 	.word	0x4402b99a
 80026d4:	41533333 	.word	0x41533333
 80026d8:	2001b5e4 	.word	0x2001b5e4
 80026dc:	2001b5dc 	.word	0x2001b5dc

080026e0 <gnome_sort>:

static double *cell_voltages;
static double mean;
static double var;

void gnome_sort() {
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
	uint8_t pos = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	while (pos < 126) {
 80026ea:	e035      	b.n	8002758 <gnome_sort+0x78>
		if (pos == 0) {
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <gnome_sort+0x1a>
			pos++;
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	3301      	adds	r3, #1
 80026f6:	71fb      	strb	r3, [r7, #7]
 80026f8:	e02e      	b.n	8002758 <gnome_sort+0x78>
		} else if (cell_voltages[I[pos]] <= cell_voltages[I[pos - 1]]) {
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <gnome_sort+0x88>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	491a      	ldr	r1, [pc, #104]	; (800276c <gnome_sort+0x8c>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <gnome_sort+0x88>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	3b01      	subs	r3, #1
 8002714:	4c15      	ldr	r4, [pc, #84]	; (800276c <gnome_sort+0x8c>)
 8002716:	5ce3      	ldrb	r3, [r4, r3]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fe f9d8 	bl	8000ad4 <__aeabi_dcmple>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <gnome_sort+0x52>
			pos++;
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	3301      	adds	r3, #1
 800272e:	71fb      	strb	r3, [r7, #7]
 8002730:	e012      	b.n	8002758 <gnome_sort+0x78>
		} else {
			tmp = I[pos];
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <gnome_sort+0x8c>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	71bb      	strb	r3, [r7, #6]
			I[pos] = I[pos - 1];
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	490a      	ldr	r1, [pc, #40]	; (800276c <gnome_sort+0x8c>)
 8002742:	5c89      	ldrb	r1, [r1, r2]
 8002744:	4a09      	ldr	r2, [pc, #36]	; (800276c <gnome_sort+0x8c>)
 8002746:	54d1      	strb	r1, [r2, r3]
			I[pos - 1] = tmp;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	3b01      	subs	r3, #1
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <gnome_sort+0x8c>)
 800274e:	79ba      	ldrb	r2, [r7, #6]
 8002750:	54ca      	strb	r2, [r1, r3]
			pos--;
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	3b01      	subs	r3, #1
 8002756:	71fb      	strb	r3, [r7, #7]
	while (pos < 126) {
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b7d      	cmp	r3, #125	; 0x7d
 800275c:	d9c6      	bls.n	80026ec <gnome_sort+0xc>
		}

	}
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	200017e4 	.word	0x200017e4
 800276c:	20000000 	.word	0x20000000

08002770 <state_balance_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_balance_step(void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
	static int k = 0;

	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <state_balance_step+0x178>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	495b      	ldr	r1, [pc, #364]	; (80028ec <state_balance_step+0x17c>)
 800277e:	4618      	mov	r0, r3
 8002780:	f013 fc72 	bl	8016068 <xQueuePeek>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80a4 	beq.w	80028d4 <state_balance_step+0x164>
		mean = 0;
 800278c:	4958      	ldr	r1, [pc, #352]	; (80028f0 <state_balance_step+0x180>)
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9c1 2300 	strd	r2, r3, [r1]
		var = 0;
 800279a:	4956      	ldr	r1, [pc, #344]	; (80028f4 <state_balance_step+0x184>)
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9c1 2300 	strd	r2, r3, [r1]
		double svar = 0;
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9c7 2300 	strd	r2, r3, [r7]

		for (int i = 0; i < 126; i++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e013      	b.n	80027e2 <state_balance_step+0x72>
			mean += cell_voltages[i];
 80027ba:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <state_balance_step+0x17c>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c8:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <state_balance_step+0x180>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd4f 	bl	8000270 <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4946      	ldr	r1, [pc, #280]	; (80028f0 <state_balance_step+0x180>)
 80027d8:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 126; i++) {
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b7d      	cmp	r3, #125	; 0x7d
 80027e6:	dde8      	ble.n	80027ba <state_balance_step+0x4a>
		}
		mean /= 126;
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <state_balance_step+0x180>)
 80027ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <state_balance_step+0x188>)
 80027f4:	f7fe f81c 	bl	8000830 <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	493c      	ldr	r1, [pc, #240]	; (80028f0 <state_balance_step+0x180>)
 80027fe:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 126; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e01d      	b.n	8002844 <state_balance_step+0xd4>
			svar = cell_voltages[i] - mean;
 8002808:	4b38      	ldr	r3, [pc, #224]	; (80028ec <state_balance_step+0x17c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <state_balance_step+0x180>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fd26 	bl	800026c <__aeabi_dsub>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9c7 2300 	strd	r2, r3, [r7]
			var = svar * svar;
 8002828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800282c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002830:	f7fd fed4 	bl	80005dc <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	492e      	ldr	r1, [pc, #184]	; (80028f4 <state_balance_step+0x184>)
 800283a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 126; i++) {
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	3301      	adds	r3, #1
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b7d      	cmp	r3, #125	; 0x7d
 8002848:	ddde      	ble.n	8002808 <state_balance_step+0x98>
		}

		if (var < 0.000001) {
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <state_balance_step+0x184>)
 800284c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002850:	a323      	add	r3, pc, #140	; (adr r3, 80028e0 <state_balance_step+0x170>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fe f933 	bl	8000ac0 <__aeabi_dcmplt>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <state_balance_step+0xf4>
			return STATE_ENTRY;
 8002860:	2301      	movs	r3, #1
 8002862:	e038      	b.n	80028d6 <state_balance_step+0x166>
		}

		gnome_sort();
 8002864:	f7ff ff3c 	bl	80026e0 <gnome_sort>

		if (k == 0) {
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <state_balance_step+0x18c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d121      	bne.n	80028b4 <state_balance_step+0x144>
			for (int i = 0; i < 126; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e009      	b.n	800288a <state_balance_step+0x11a>
				set_balance_ext(0, i, NULL);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	2000      	movs	r0, #0
 8002880:	f001 fdb6 	bl	80043f0 <set_balance_ext>
			for (int i = 0; i < 126; i++) {
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b7d      	cmp	r3, #125	; 0x7d
 800288e:	ddf2      	ble.n	8002876 <state_balance_step+0x106>
			}
			for (int i = 0; i < 42; i++) {
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	e00b      	b.n	80028ae <state_balance_step+0x13e>
				set_balance_ext(1, I[i], NULL);
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <state_balance_step+0x190>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	4619      	mov	r1, r3
 80028a2:	2001      	movs	r0, #1
 80028a4:	f001 fda4 	bl	80043f0 <set_balance_ext>
			for (int i = 0; i < 42; i++) {
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b29      	cmp	r3, #41	; 0x29
 80028b2:	ddf0      	ble.n	8002896 <state_balance_step+0x126>
			}

		}

		k = (k + 1) % 300;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <state_balance_step+0x18c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <state_balance_step+0x194>)
 80028bc:	fb83 1302 	smull	r1, r3, r3, r2
 80028c0:	1159      	asrs	r1, r3, #5
 80028c2:	17d3      	asrs	r3, r2, #31
 80028c4:	1acb      	subs	r3, r1, r3
 80028c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <state_balance_step+0x18c>)
 80028d2:	6013      	str	r3, [r2, #0]

	}

	return STATE_BALANCE;
 80028d4:	2307      	movs	r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80028e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80028e8:	2001b5c0 	.word	0x2001b5c0
 80028ec:	200017e4 	.word	0x200017e4
 80028f0:	200017e8 	.word	0x200017e8
 80028f4:	200017f0 	.word	0x200017f0
 80028f8:	405f8000 	.word	0x405f8000
 80028fc:	200017f8 	.word	0x200017f8
 8002900:	20000000 	.word	0x20000000
 8002904:	1b4e81b5 	.word	0x1b4e81b5

08002908 <state_charge_step>:
/*
 * @Brief	X
 * @Param	Y
 * @Retval	Z
 */
state_t state_charge_step(void) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
	float *cell_voltages;

	set_enable_charge_ext(1);
 800290e:	2001      	movs	r0, #1
 8002910:	f001 fd5a 	bl	80043c8 <set_enable_charge_ext>
	set_charger_voltage_limit_ext(4.15 * 126);
 8002914:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80029a8 <state_charge_step+0xa0>
 8002918:	f001 fd2e 	bl	8004378 <set_charger_voltage_limit_ext>
	set_charger_current_limit_ext(2 * 6.6);
 800291c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80029ac <state_charge_step+0xa4>
 8002920:	f001 fd3e 	bl	80043a0 <set_charger_current_limit_ext>

	if (xQueuePeek(cell_voltages_queue, &cell_voltages, 0)) {
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <state_charge_step+0xa8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1d39      	adds	r1, r7, #4
 800292a:	2200      	movs	r2, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f013 fb9b 	bl	8016068 <xQueuePeek>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02b      	beq.n	8002990 <state_charge_step+0x88>
		float max = 0;
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 126; i++) {
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	e015      	b.n	8002970 <state_charge_step+0x68>
			if (cell_voltages[i] > max) {
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ed97 7a03 	vldr	s14, [r7, #12]
 8002954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	d505      	bpl.n	800296a <state_charge_step+0x62>
				max = cell_voltages[i];
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 126; i++) {
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3301      	adds	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b7d      	cmp	r3, #125	; 0x7d
 8002974:	dde6      	ble.n	8002944 <state_charge_step+0x3c>
			}
		}
		if (max > 4.15) {
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7fd fdd8 	bl	800052c <__aeabi_f2d>
 800297c:	a308      	add	r3, pc, #32	; (adr r3, 80029a0 <state_charge_step+0x98>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fe f8bb 	bl	8000afc <__aeabi_dcmpgt>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <state_charge_step+0x88>
			return STATE_ENTRY;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <state_charge_step+0x8a>
		}
	}

	return STATE_CHARGE;
 8002990:	2306      	movs	r3, #6
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w
 80029a0:	9999999a 	.word	0x9999999a
 80029a4:	40109999 	.word	0x40109999
 80029a8:	4402b99a 	.word	0x4402b99a
 80029ac:	41533333 	.word	0x41533333
 80029b0:	2001b5c0 	.word	0x2001b5c0

080029b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ba:	463b      	mov	r3, r7
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029c8:	4a37      	ldr	r2, [pc, #220]	; (8002aa8 <MX_ADC1_Init+0xf4>)
 80029ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029dc:	2201      	movs	r2, #1
 80029de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 80029f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a06:	2204      	movs	r2, #4
 8002a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a18:	4822      	ldr	r0, [pc, #136]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a1a:	f00d fcb9 	bl	8010390 <HAL_ADC_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002a24:	f001 fbfc 	bl	8004220 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002a30:	2302      	movs	r3, #2
 8002a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a34:	463b      	mov	r3, r7
 8002a36:	4619      	mov	r1, r3
 8002a38:	481a      	ldr	r0, [pc, #104]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a3a:	f00d ff5b 	bl	80108f4 <HAL_ADC_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002a44:	f001 fbec 	bl	8004220 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a50:	463b      	mov	r3, r7
 8002a52:	4619      	mov	r1, r3
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a56:	f00d ff4d 	bl	80108f4 <HAL_ADC_ConfigChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002a60:	f001 fbde 	bl	8004220 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a64:	2303      	movs	r3, #3
 8002a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a72:	f00d ff3f 	bl	80108f4 <HAL_ADC_ConfigChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002a7c:	f001 fbd0 	bl	8004220 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002a80:	2304      	movs	r3, #4
 8002a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002a84:	2304      	movs	r3, #4
 8002a86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a88:	463b      	mov	r3, r7
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_ADC1_Init+0xf0>)
 8002a8e:	f00d ff31 	bl	80108f4 <HAL_ADC_ConfigChannel>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002a98:	f001 fbc2 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2001b5f0 	.word	0x2001b5f0
 8002aa8:	40012000 	.word	0x40012000

08002aac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <HAL_ADC_MspInit+0xec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d15f      	bne.n	8002b8e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_ADC_MspInit+0xf0>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_ADC_MspInit+0xf0>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_ADC_MspInit+0xf0>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_ADC_MspInit+0xf0>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <HAL_ADC_MspInit+0xf0>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_ADC_MspInit+0xf0>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 8002b06:	231e      	movs	r3, #30
 8002b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4821      	ldr	r0, [pc, #132]	; (8002ba0 <HAL_ADC_MspInit+0xf4>)
 8002b1a:	f00f fa19 	bl	8011f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_ADC_MspInit+0xfc>)
 8002b22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b62:	4810      	ldr	r0, [pc, #64]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b64:	f00e fe84 	bl	8011870 <HAL_DMA_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002b6e:	f001 fb57 	bl	8004220 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_ADC_MspInit+0xf8>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2105      	movs	r1, #5
 8002b82:	2012      	movs	r0, #18
 8002b84:	f00e fe4a 	bl	801181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b88:	2012      	movs	r0, #18
 8002b8a:	f00e fe63 	bl	8011854 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3728      	adds	r7, #40	; 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40012000 	.word	0x40012000
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	2001b638 	.word	0x2001b638
 8002ba8:	40026410 	.word	0x40026410
 8002bac:	00000000 	.word	0x00000000

08002bb0 <interpret_ADC_buffer>:
/* USER CODE BEGIN 1 */

uint16_t ADC_FLAG = 1;

void interpret_ADC_buffer(temperatures_t *temperatures,
		uint16_t *adcBuffer, uint8_t L) {
 8002bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bb4:	b08e      	sub	sp, #56	; 0x38
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	float adcAverageBuffer[4];

	float beta = 3500;
 8002bc0:	4bdb      	ldr	r3, [pc, #876]	; (8002f30 <interpret_ADC_buffer+0x380>)
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
	float temp = 25 + 273.15;
 8002bc4:	4bdb      	ldr	r3, [pc, #876]	; (8002f34 <interpret_ADC_buffer+0x384>)
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float R0 = 10000 * exp(-beta / temp);
 8002bc8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8002bd0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bd4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bd8:	ee16 0a90 	vmov	r0, s13
 8002bdc:	f7fd fca6 	bl	800052c <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b10 	vmov	d0, r2, r3
 8002be8:	f017 f8de 	bl	8019da8 <exp>
 8002bec:	ec51 0b10 	vmov	r0, r1, d0
 8002bf0:	a3cb      	add	r3, pc, #812	; (adr r3, 8002f20 <interpret_ADC_buffer+0x370>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fcf1 	bl	80005dc <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f7fd ffe3 	bl	8000bcc <__aeabi_d2f>
 8002c06:	4603      	mov	r3, r0
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 10000;
 8002c0a:	4bcb      	ldr	r3, [pc, #812]	; (8002f38 <interpret_ADC_buffer+0x388>)
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
	float resolution = pow(2, 12) - 1;
 8002c0e:	4bcb      	ldr	r3, [pc, #812]	; (8002f3c <interpret_ADC_buffer+0x38c>)
 8002c10:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
 8002c12:	2300      	movs	r3, #0
 8002c14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002c16:	e063      	b.n	8002ce0 <interpret_ADC_buffer+0x130>
		adcAverageBuffer[i] = 0;
 8002c18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c20:	4413      	add	r3, r2
 8002c22:	3b28      	subs	r3, #40	; 0x28
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
		for (j = 0; j < L; j++) {
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002c2e:	e020      	b.n	8002c72 <interpret_ADC_buffer+0xc2>
			adcAverageBuffer[i] += adcBuffer[4 * j + i];
 8002c30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b28      	subs	r3, #40	; 0x28
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c46:	4413      	add	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c64:	4413      	add	r3, r2
 8002c66:	3b28      	subs	r3, #40	; 0x28
 8002c68:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < L; j++) {
 8002c6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002c6e:	3301      	adds	r3, #1
 8002c70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3d9      	bcc.n	8002c30 <interpret_ADC_buffer+0x80>
		}
		adcAverageBuffer[i] /= L;
 8002c7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c84:	4413      	add	r3, r2
 8002c86:	3b28      	subs	r3, #40	; 0x28
 8002c88:	edd3 6a00 	vldr	s13, [r3]
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b28      	subs	r3, #40	; 0x28
 8002ca6:	edc3 7a00 	vstr	s15, [r3]

		/* The adc value shouldn't be negative, nor should it be 0 */
		if (adcAverageBuffer[i] < 0.25) {
 8002caa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b28      	subs	r3, #40	; 0x28
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	d508      	bpl.n	8002cda <interpret_ADC_buffer+0x12a>
			adcAverageBuffer[i] = 1;
 8002cc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b28      	subs	r3, #40	; 0x28
 8002cd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8002cda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cdc:	3301      	adds	r3, #1
 8002cde:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d998      	bls.n	8002c18 <interpret_ADC_buffer+0x68>
	}
	/* temperature = beta / (log(R0 * ( resolution / adcAverageBuffer[i] - 1) ) - log(R)); */
	/* v/vt = ((2^n - 1)*v/vref)/((2^n - 1)*vt/vref) = ((2^n - 1)*v/vref)/adcAverageBuffer[i] */
	/* Assume v = vref, n = 12 */
	temperatures->precharge_resistor = beta
			/ (log(R0 * (resolution / adcAverageBuffer[0] - 1)) - log(R))
 8002ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce8:	f7fd fc20 	bl	800052c <__aeabi_f2d>
 8002cec:	4604      	mov	r4, r0
 8002cee:	460d      	mov	r5, r1
 8002cf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cf4:	edd7 6a08 	vldr	s13, [r7, #32]
 8002cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	ee17 0a90 	vmov	r0, s15
 8002d10:	f7fd fc0c 	bl	800052c <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	ec43 2b10 	vmov	d0, r2, r3
 8002d1c:	f017 f894 	bl	8019e48 <log>
 8002d20:	ec59 8b10 	vmov	r8, r9, d0
 8002d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d26:	f7fd fc01 	bl	800052c <__aeabi_f2d>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	ec43 2b10 	vmov	d0, r2, r3
 8002d32:	f017 f889 	bl	8019e48 <log>
 8002d36:	ec53 2b10 	vmov	r2, r3, d0
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	f7fd fa95 	bl	800026c <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fd71 	bl	8000830 <__aeabi_ddiv>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
			- 273.15;
 8002d56:	a374      	add	r3, pc, #464	; (adr r3, 8002f28 <interpret_ADC_buffer+0x378>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fa86 	bl	800026c <__aeabi_dsub>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff30 	bl	8000bcc <__aeabi_d2f>
 8002d6c:	4602      	mov	r2, r0
	temperatures->precharge_resistor = beta
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]
	temperatures->fuse = beta
			/ (log(R0 * (resolution / adcAverageBuffer[1] - 1)) - log(R))
 8002d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d74:	f7fd fbda 	bl	800052c <__aeabi_f2d>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460d      	mov	r5, r1
 8002d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d80:	edd7 6a08 	vldr	s13, [r7, #32]
 8002d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d98:	ee17 0a90 	vmov	r0, s15
 8002d9c:	f7fd fbc6 	bl	800052c <__aeabi_f2d>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	ec43 2b10 	vmov	d0, r2, r3
 8002da8:	f017 f84e 	bl	8019e48 <log>
 8002dac:	ec59 8b10 	vmov	r8, r9, d0
 8002db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002db2:	f7fd fbbb 	bl	800052c <__aeabi_f2d>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	ec43 2b10 	vmov	d0, r2, r3
 8002dbe:	f017 f843 	bl	8019e48 <log>
 8002dc2:	ec53 2b10 	vmov	r2, r3, d0
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	4649      	mov	r1, r9
 8002dca:	f7fd fa4f 	bl	800026c <__aeabi_dsub>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	f7fd fd2b 	bl	8000830 <__aeabi_ddiv>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
			- 273.15;
 8002de2:	a351      	add	r3, pc, #324	; (adr r3, 8002f28 <interpret_ADC_buffer+0x378>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f7fd fa40 	bl	800026c <__aeabi_dsub>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7fd feea 	bl	8000bcc <__aeabi_d2f>
 8002df8:	4602      	mov	r2, r0
	temperatures->fuse = beta
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
	temperatures->aux_1 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[2] - 1)) - log(R))
 8002dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e00:	f7fd fb94 	bl	800052c <__aeabi_f2d>
 8002e04:	4604      	mov	r4, r0
 8002e06:	460d      	mov	r5, r1
 8002e08:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e0c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002e1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	ee17 0a90 	vmov	r0, s15
 8002e28:	f7fd fb80 	bl	800052c <__aeabi_f2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	ec43 2b10 	vmov	d0, r2, r3
 8002e34:	f017 f808 	bl	8019e48 <log>
 8002e38:	ec59 8b10 	vmov	r8, r9, d0
 8002e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e3e:	f7fd fb75 	bl	800052c <__aeabi_f2d>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	ec43 2b10 	vmov	d0, r2, r3
 8002e4a:	f016 fffd 	bl	8019e48 <log>
 8002e4e:	ec53 2b10 	vmov	r2, r3, d0
 8002e52:	4640      	mov	r0, r8
 8002e54:	4649      	mov	r1, r9
 8002e56:	f7fd fa09 	bl	800026c <__aeabi_dsub>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd fce5 	bl	8000830 <__aeabi_ddiv>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
			- 273.15;
 8002e6e:	a32e      	add	r3, pc, #184	; (adr r3, 8002f28 <interpret_ADC_buffer+0x378>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd f9fa 	bl	800026c <__aeabi_dsub>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f7fd fea4 	bl	8000bcc <__aeabi_d2f>
 8002e84:	4602      	mov	r2, r0
	temperatures->aux_1 = beta
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	609a      	str	r2, [r3, #8]
	temperatures->aux_2 = beta
			/ (log(R0 * (resolution / adcAverageBuffer[3] - 1)) - log(R))
 8002e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8c:	f7fd fb4e 	bl	800052c <__aeabi_f2d>
 8002e90:	4604      	mov	r4, r0
 8002e92:	460d      	mov	r5, r1
 8002e94:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e98:	edd7 6a08 	vldr	s13, [r7, #32]
 8002e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ea4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ea8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	ee17 0a90 	vmov	r0, s15
 8002eb4:	f7fd fb3a 	bl	800052c <__aeabi_f2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	ec43 2b10 	vmov	d0, r2, r3
 8002ec0:	f016 ffc2 	bl	8019e48 <log>
 8002ec4:	ec59 8b10 	vmov	r8, r9, d0
 8002ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eca:	f7fd fb2f 	bl	800052c <__aeabi_f2d>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	ec43 2b10 	vmov	d0, r2, r3
 8002ed6:	f016 ffb7 	bl	8019e48 <log>
 8002eda:	ec53 2b10 	vmov	r2, r3, d0
 8002ede:	4640      	mov	r0, r8
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	f7fd f9c3 	bl	800026c <__aeabi_dsub>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4620      	mov	r0, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7fd fc9f 	bl	8000830 <__aeabi_ddiv>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
			- 273.15;
 8002efa:	a30b      	add	r3, pc, #44	; (adr r3, 8002f28 <interpret_ADC_buffer+0x378>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd f9b4 	bl	800026c <__aeabi_dsub>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7fd fe5e 	bl	8000bcc <__aeabi_d2f>
 8002f10:	4602      	mov	r2, r0
	temperatures->aux_2 = beta
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	60da      	str	r2, [r3, #12]

}
 8002f16:	bf00      	nop
 8002f18:	3738      	adds	r7, #56	; 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40c38800 	.word	0x40c38800
 8002f28:	66666666 	.word	0x66666666
 8002f2c:	40711266 	.word	0x40711266
 8002f30:	455ac000 	.word	0x455ac000
 8002f34:	43951333 	.word	0x43951333
 8002f38:	461c4000 	.word	0x461c4000
 8002f3c:	457ff000 	.word	0x457ff000

08002f40 <ADC_initialize>:

void ADC_initialize(TIM_HandleTypeDef* htim) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	htim->Instance->ARR = 65535 / 1000; // 100 Hz sample rate
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2241      	movs	r2, #65	; 0x41
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f010 fc21 	bl	8013798 <HAL_TIM_Base_Start>
	ADC_FLAG = 1;
 8002f56:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <ADC_initialize+0x24>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	801a      	strh	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2000007e 	.word	0x2000007e

08002f68 <ADC_step>:

void ADC_step(uint32_t *buf, uint16_t len) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
	if (ADC_FLAG == 1) {
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <ADC_step+0x30>)
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d108      	bne.n	8002f8e <ADC_step+0x26>
		ADC_FLAG = 0;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <ADC_step+0x30>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, buf, len);
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	461a      	mov	r2, r3
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <ADC_step+0x34>)
 8002f8a:	f00d fb85 	bl	8010698 <HAL_ADC_Start_DMA>
	}
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	2000007e 	.word	0x2000007e
 8002f9c:	2001b5f0 	.word	0x2001b5f0

08002fa0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	ADC_FLAG = 1;
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_ADC_ConvCpltCallback+0x1c>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	801a      	strh	r2, [r3, #0]

}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000007e 	.word	0x2000007e

08002fc0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <MX_CAN1_Init+0x68>)
 8002fc6:	4a19      	ldr	r2, [pc, #100]	; (800302c <MX_CAN1_Init+0x6c>)
 8002fc8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002fca:	4b17      	ldr	r3, [pc, #92]	; (8003028 <MX_CAN1_Init+0x68>)
 8002fcc:	2203      	movs	r2, #3
 8002fce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <MX_CAN1_Init+0x68>)
 8002fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <MX_CAN1_Init+0x68>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <MX_CAN1_Init+0x68>)
 8002fe0:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8002fe4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <MX_CAN1_Init+0x68>)
 8002fe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <MX_CAN1_Init+0x68>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <MX_CAN1_Init+0x68>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <MX_CAN1_Init+0x68>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <MX_CAN1_Init+0x68>)
 8003002:	2200      	movs	r2, #0
 8003004:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <MX_CAN1_Init+0x68>)
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <MX_CAN1_Init+0x68>)
 800300e:	2200      	movs	r2, #0
 8003010:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003012:	4805      	ldr	r0, [pc, #20]	; (8003028 <MX_CAN1_Init+0x68>)
 8003014:	f00d ff18 	bl	8010e48 <HAL_CAN_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800301e:	f001 f8ff 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2001b6c0 	.word	0x2001b6c0
 800302c:	40006400 	.word	0x40006400

08003030 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003034:	4b17      	ldr	r3, [pc, #92]	; (8003094 <MX_CAN2_Init+0x64>)
 8003036:	4a18      	ldr	r2, [pc, #96]	; (8003098 <MX_CAN2_Init+0x68>)
 8003038:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <MX_CAN2_Init+0x64>)
 800303c:	2206      	movs	r2, #6
 800303e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <MX_CAN2_Init+0x64>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <MX_CAN2_Init+0x64>)
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <MX_CAN2_Init+0x64>)
 800304e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003052:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_CAN2_Init+0x64>)
 8003056:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800305a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <MX_CAN2_Init+0x64>)
 800305e:	2200      	movs	r2, #0
 8003060:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_CAN2_Init+0x64>)
 8003064:	2200      	movs	r2, #0
 8003066:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <MX_CAN2_Init+0x64>)
 800306a:	2200      	movs	r2, #0
 800306c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_CAN2_Init+0x64>)
 8003070:	2200      	movs	r2, #0
 8003072:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <MX_CAN2_Init+0x64>)
 8003076:	2200      	movs	r2, #0
 8003078:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <MX_CAN2_Init+0x64>)
 800307c:	2200      	movs	r2, #0
 800307e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <MX_CAN2_Init+0x64>)
 8003082:	f00d fee1 	bl	8010e48 <HAL_CAN_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800308c:	f001 f8c8 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2001b698 	.word	0x2001b698
 8003098:	40006800 	.word	0x40006800

0800309c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08c      	sub	sp, #48	; 0x30
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4f      	ldr	r2, [pc, #316]	; (80031f8 <HAL_CAN_MspInit+0x15c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d14e      	bne.n	800315c <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80030be:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_CAN_MspInit+0x160>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a4d      	ldr	r2, [pc, #308]	; (80031fc <HAL_CAN_MspInit+0x160>)
 80030c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_CAN_MspInit+0x160>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10d      	bne.n	80030ec <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	4a49      	ldr	r2, [pc, #292]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80030da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030de:	6413      	str	r3, [r2, #64]	; 0x40
 80030e0:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a42      	ldr	r2, [pc, #264]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
 80030fc:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003108:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800310c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800311a:	2309      	movs	r3, #9
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	4619      	mov	r1, r3
 8003124:	4837      	ldr	r0, [pc, #220]	; (8003204 <HAL_CAN_MspInit+0x168>)
 8003126:	f00e ff13 	bl	8011f50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2105      	movs	r1, #5
 800312e:	2013      	movs	r0, #19
 8003130:	f00e fb74 	bl	801181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003134:	2013      	movs	r0, #19
 8003136:	f00e fb8d 	bl	8011854 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2105      	movs	r1, #5
 800313e:	2014      	movs	r0, #20
 8003140:	f00e fb6c 	bl	801181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003144:	2014      	movs	r0, #20
 8003146:	f00e fb85 	bl	8011854 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2105      	movs	r1, #5
 800314e:	2015      	movs	r0, #21
 8003150:	f00e fb64 	bl	801181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003154:	2015      	movs	r0, #21
 8003156:	f00e fb7d 	bl	8011854 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800315a:	e048      	b.n	80031ee <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_CAN_MspInit+0x16c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d143      	bne.n	80031ee <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_CAN_MspInit+0x164>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a24      	ldr	r2, [pc, #144]	; (8003200 <HAL_CAN_MspInit+0x164>)
 8003170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b22      	ldr	r3, [pc, #136]	; (8003200 <HAL_CAN_MspInit+0x164>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_CAN_MspInit+0x160>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_CAN_MspInit+0x160>)
 800318a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_CAN_MspInit+0x160>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10d      	bne.n	80031b0 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_CAN_MspInit+0x164>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_CAN_MspInit+0x164>)
 800319e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031a2:	6413      	str	r3, [r2, #64]	; 0x40
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	6313      	str	r3, [r2, #48]	; 0x30
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_CAN_MspInit+0x164>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80031cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031da:	2303      	movs	r3, #3
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80031de:	2309      	movs	r3, #9
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	4619      	mov	r1, r3
 80031e8:	4808      	ldr	r0, [pc, #32]	; (800320c <HAL_CAN_MspInit+0x170>)
 80031ea:	f00e feb1 	bl	8011f50 <HAL_GPIO_Init>
}
 80031ee:	bf00      	nop
 80031f0:	3730      	adds	r7, #48	; 0x30
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40006400 	.word	0x40006400
 80031fc:	200017fc 	.word	0x200017fc
 8003200:	40023800 	.word	0x40023800
 8003204:	40020000 	.word	0x40020000
 8003208:	40006800 	.word	0x40006800
 800320c:	40020400 	.word	0x40020400

08003210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <MX_DMA_Init+0x3c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <MX_DMA_Init+0x3c>)
 8003220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <MX_DMA_Init+0x3c>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2105      	movs	r1, #5
 8003236:	2038      	movs	r0, #56	; 0x38
 8003238:	f00e faf0 	bl	801181c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800323c:	2038      	movs	r0, #56	; 0x38
 800323e:	f00e fb09 	bl	8011854 <HAL_NVIC_EnableIRQ>

}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <MX_GPIO_Init+0x150>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <MX_GPIO_Init+0x150>)
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <MX_GPIO_Init+0x150>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <MX_GPIO_Init+0x150>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <MX_GPIO_Init+0x150>)
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <MX_GPIO_Init+0x150>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <MX_GPIO_Init+0x150>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a3e      	ldr	r2, [pc, #248]	; (80033a0 <MX_GPIO_Init+0x150>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <MX_GPIO_Init+0x150>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <MX_GPIO_Init+0x150>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <MX_GPIO_Init+0x150>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <MX_GPIO_Init+0x150>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 80032d6:	2200      	movs	r2, #0
 80032d8:	210e      	movs	r1, #14
 80032da:	4832      	ldr	r0, [pc, #200]	; (80033a4 <MX_GPIO_Init+0x154>)
 80032dc:	f00e ffd4 	bl	8012288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	21e0      	movs	r1, #224	; 0xe0
 80032e4:	4830      	ldr	r0, [pc, #192]	; (80033a8 <MX_GPIO_Init+0x158>)
 80032e6:	f00e ffcf 	bl	8012288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80032f0:	482e      	ldr	r0, [pc, #184]	; (80033ac <MX_GPIO_Init+0x15c>)
 80032f2:	f00e ffc9 	bl	8012288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 80032f6:	230e      	movs	r3, #14
 80032f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	4825      	ldr	r0, [pc, #148]	; (80033a4 <MX_GPIO_Init+0x154>)
 800330e:	f00e fe1f 	bl	8011f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8003312:	2370      	movs	r3, #112	; 0x70
 8003314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800331a:	2302      	movs	r3, #2
 800331c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	481f      	ldr	r0, [pc, #124]	; (80033a4 <MX_GPIO_Init+0x154>)
 8003326:	f00e fe13 	bl	8011f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 800332a:	23e0      	movs	r3, #224	; 0xe0
 800332c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4819      	ldr	r0, [pc, #100]	; (80033a8 <MX_GPIO_Init+0x158>)
 8003342:	f00e fe05 	bl	8011f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8003346:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 800334a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334c:	2301      	movs	r3, #1
 800334e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4813      	ldr	r0, [pc, #76]	; (80033ac <MX_GPIO_Init+0x15c>)
 8003360:	f00e fdf6 	bl	8011f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8003364:	2306      	movs	r3, #6
 8003366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	480e      	ldr	r0, [pc, #56]	; (80033b0 <MX_GPIO_Init+0x160>)
 8003378:	f00e fdea 	bl	8011f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 800337c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4806      	ldr	r0, [pc, #24]	; (80033ac <MX_GPIO_Init+0x15c>)
 8003392:	f00e fddd 	bl	8011f50 <HAL_GPIO_Init>

}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020800 	.word	0x40020800
 80033b0:	40020400 	.word	0x40020400
 80033b4:	00000000 	.word	0x00000000

080033b8 <main>:
		sizeof(uint8_t), };

const queue_info start_balance_queue_info = { .element_count = 1,
		.element_size = sizeof(uint8_t), };

int main() {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	/* INSTRUMENTATE */
	SEGGER_SYSVIEW_Conf();
 80033bc:	f7fe fd8a 	bl	8001ed4 <SEGGER_SYSVIEW_Conf>

	/* RESET PERIPHERALS, ETC. */
	HAL_Init();
 80033c0:	f00c ff80 	bl	80102c4 <HAL_Init>

	/* CONFIGURE SYSTEM CLOCK */
	SystemClock_Config();
 80033c4:	f000 f962 	bl	800368c <SystemClock_Config>

	/* INITIALZE PERIPHERALS */
	MX_GPIO_Init();
 80033c8:	f7ff ff42 	bl	8003250 <MX_GPIO_Init>
	MX_SPI2_Init();
 80033cc:	f001 fb2a 	bl	8004a24 <MX_SPI2_Init>
	MX_CAN1_Init();
 80033d0:	f7ff fdf6 	bl	8002fc0 <MX_CAN1_Init>
	MX_CAN2_Init();
 80033d4:	f7ff fe2c 	bl	8003030 <MX_CAN2_Init>
	MX_TIM1_Init();
 80033d8:	f001 fcc0 	bl	8004d5c <MX_TIM1_Init>
	MX_DMA_Init();
 80033dc:	f7ff ff18 	bl	8003210 <MX_DMA_Init>
	MX_TIM3_Init();
 80033e0:	f001 fdf8 	bl	8004fd4 <MX_TIM3_Init>
	MX_TIM2_Init();
 80033e4:	f001 fd5a 	bl	8004e9c <MX_TIM2_Init>
	MX_ADC1_Init();
 80033e8:	f7ff fae4 	bl	80029b4 <MX_ADC1_Init>

	//initialize_CAN(&hcan1, &hcan2);
	initialize_LTC(&hspi2);
 80033ec:	4878      	ldr	r0, [pc, #480]	; (80035d0 <main+0x218>)
 80033ee:	f001 f84f 	bl	8004490 <initialize_LTC>

	/* Initialize kernel */
	osKernelInitialize();
 80033f2:	f011 ffed 	bl	80153d0 <osKernelInitialize>

	/* INITIALIZE QUEUES */

	state_queue = xQueueCreate(state_queue_info.element_count,
 80033f6:	2301      	movs	r3, #1
 80033f8:	2201      	movs	r2, #1
 80033fa:	4611      	mov	r1, r2
 80033fc:	2200      	movs	r2, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f012 fae8 	bl	80159d4 <xQueueGenericCreate>
 8003404:	4603      	mov	r3, r0
 8003406:	4a73      	ldr	r2, [pc, #460]	; (80035d4 <main+0x21c>)
 8003408:	6013      	str	r3, [r2, #0]
			state_queue_info.element_size);

	GPIO_queue = xQueueCreate(GPIO_queue_info.element_count,
 800340a:	2301      	movs	r3, #1
 800340c:	2207      	movs	r2, #7
 800340e:	4611      	mov	r1, r2
 8003410:	2200      	movs	r2, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f012 fade 	bl	80159d4 <xQueueGenericCreate>
 8003418:	4603      	mov	r3, r0
 800341a:	4a6f      	ldr	r2, [pc, #444]	; (80035d8 <main+0x220>)
 800341c:	6013      	str	r3, [r2, #0]
			GPIO_queue_info.element_size);

	IMD_queue = xQueueCreate(IMD_queue_info.element_count,
 800341e:	2301      	movs	r3, #1
 8003420:	2208      	movs	r2, #8
 8003422:	4611      	mov	r1, r2
 8003424:	2200      	movs	r2, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f012 fad4 	bl	80159d4 <xQueueGenericCreate>
 800342c:	4603      	mov	r3, r0
 800342e:	4a6b      	ldr	r2, [pc, #428]	; (80035dc <main+0x224>)
 8003430:	6013      	str	r3, [r2, #0]
			IMD_queue_info.element_size);

	temperatures_queue = xQueueCreate(temperatures_queue_info.element_count,
 8003432:	2301      	movs	r3, #1
 8003434:	2210      	movs	r2, #16
 8003436:	4611      	mov	r1, r2
 8003438:	2200      	movs	r2, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f012 faca 	bl	80159d4 <xQueueGenericCreate>
 8003440:	4603      	mov	r3, r0
 8003442:	4a67      	ldr	r2, [pc, #412]	; (80035e0 <main+0x228>)
 8003444:	6013      	str	r3, [r2, #0]
			temperatures_queue_info.element_size);

	accumulator_voltage_queue = xQueueCreate(
 8003446:	2301      	movs	r3, #1
 8003448:	2204      	movs	r2, #4
 800344a:	4611      	mov	r1, r2
 800344c:	2200      	movs	r2, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f012 fac0 	bl	80159d4 <xQueueGenericCreate>
 8003454:	4603      	mov	r3, r0
 8003456:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <main+0x22c>)
 8003458:	6013      	str	r3, [r2, #0]
			accumulator_voltage_queue_info.element_count,
			accumulator_voltage_queue_info.element_size);

	vehicle_voltage_queue = xQueueCreate(
 800345a:	2301      	movs	r3, #1
 800345c:	2204      	movs	r2, #4
 800345e:	4611      	mov	r1, r2
 8003460:	2200      	movs	r2, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f012 fab6 	bl	80159d4 <xQueueGenericCreate>
 8003468:	4603      	mov	r3, r0
 800346a:	4a5f      	ldr	r2, [pc, #380]	; (80035e8 <main+0x230>)
 800346c:	6013      	str	r3, [r2, #0]
			vehicle_voltage_queue_info.element_count,
			vehicle_voltage_queue_info.element_size);

	accumulator_current_queue = xQueueCreate(
 800346e:	2301      	movs	r3, #1
 8003470:	2204      	movs	r2, #4
 8003472:	4611      	mov	r1, r2
 8003474:	2200      	movs	r2, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f012 faac 	bl	80159d4 <xQueueGenericCreate>
 800347c:	4603      	mov	r3, r0
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <main+0x234>)
 8003480:	6013      	str	r3, [r2, #0]
			accumulator_current_queue_info.element_count,
			accumulator_current_queue_info.element_size);

	cell_voltages_queue = xQueueCreate(cell_voltages_queue_info.element_count,
 8003482:	2301      	movs	r3, #1
 8003484:	2204      	movs	r2, #4
 8003486:	4611      	mov	r1, r2
 8003488:	2200      	movs	r2, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f012 faa2 	bl	80159d4 <xQueueGenericCreate>
 8003490:	4603      	mov	r3, r0
 8003492:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <main+0x238>)
 8003494:	6013      	str	r3, [r2, #0]
			cell_voltages_queue_info.element_size);

	cell_temperatures_queue = xQueueCreate(
 8003496:	2301      	movs	r3, #1
 8003498:	2204      	movs	r2, #4
 800349a:	4611      	mov	r1, r2
 800349c:	2200      	movs	r2, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f012 fa98 	bl	80159d4 <xQueueGenericCreate>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4a53      	ldr	r2, [pc, #332]	; (80035f4 <main+0x23c>)
 80034a8:	6013      	str	r3, [r2, #0]
			cell_temperatures_queue_info.element_count,
			cell_temperatures_queue_info.element_size);

	start_drive_queue = xQueueCreate(start_drive_queue_info.element_count,
 80034aa:	2301      	movs	r3, #1
 80034ac:	2201      	movs	r2, #1
 80034ae:	4611      	mov	r1, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f012 fa8e 	bl	80159d4 <xQueueGenericCreate>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <main+0x240>)
 80034bc:	6013      	str	r3, [r2, #0]
			start_drive_queue_info.element_size);

	start_charge_queue = xQueueCreate(start_charge_queue_info.element_count,
 80034be:	2301      	movs	r3, #1
 80034c0:	2201      	movs	r2, #1
 80034c2:	4611      	mov	r1, r2
 80034c4:	2200      	movs	r2, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f012 fa84 	bl	80159d4 <xQueueGenericCreate>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <main+0x244>)
 80034d0:	6013      	str	r3, [r2, #0]
			start_charge_queue_info.element_size);

	start_balance_queue = xQueueCreate(start_balance_queue_info.element_count,
 80034d2:	2301      	movs	r3, #1
 80034d4:	2201      	movs	r2, #1
 80034d6:	4611      	mov	r1, r2
 80034d8:	2200      	movs	r2, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f012 fa7a 	bl	80159d4 <xQueueGenericCreate>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4a47      	ldr	r2, [pc, #284]	; (8003600 <main+0x248>)
 80034e4:	6013      	str	r3, [r2, #0]
			start_balance_queue_info.element_size);

	/* INITIALIZE TASKS */

	first_tick = 0.25 * TICK2HZ + osKernelGetTickCount(); // Wait for segger, etc
 80034e6:	f011 ffbd 	bl	8015464 <osKernelGetTickCount>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fc fffb 	bl	80004e8 <__aeabi_ui2d>
 80034f2:	a335      	add	r3, pc, #212	; (adr r3, 80035c8 <main+0x210>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fc feba 	bl	8000270 <__adddf3>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f7fd fb42 	bl	8000b8c <__aeabi_d2uiz>
 8003508:	4603      	mov	r3, r0
 800350a:	4a3e      	ldr	r2, [pc, #248]	; (8003604 <main+0x24c>)
 800350c:	6013      	str	r3, [r2, #0]

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_info.attributes);
 800350e:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <main+0x250>)
 8003510:	2100      	movs	r1, #0
 8003512:	483e      	ldr	r0, [pc, #248]	; (800360c <main+0x254>)
 8003514:	f011 ffbb 	bl	801548e <osThreadNew>
 8003518:	4603      	mov	r3, r0
 800351a:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <main+0x258>)
 800351c:	6013      	str	r3, [r2, #0]

	SIM_task_handle = osThreadNew(start_SIM_task, NULL,
 800351e:	4a3d      	ldr	r2, [pc, #244]	; (8003614 <main+0x25c>)
 8003520:	2100      	movs	r1, #0
 8003522:	483d      	ldr	r0, [pc, #244]	; (8003618 <main+0x260>)
 8003524:	f011 ffb3 	bl	801548e <osThreadNew>
 8003528:	4603      	mov	r3, r0
 800352a:	4a3c      	ldr	r2, [pc, #240]	; (800361c <main+0x264>)
 800352c:	6013      	str	r3, [r2, #0]
			&SIM_task_info.attributes);

	CSE_task_handle = osThreadNew(start_CSE_task, NULL,
 800352e:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <main+0x268>)
 8003530:	2100      	movs	r1, #0
 8003532:	483c      	ldr	r0, [pc, #240]	; (8003624 <main+0x26c>)
 8003534:	f011 ffab 	bl	801548e <osThreadNew>
 8003538:	4603      	mov	r3, r0
 800353a:	4a3b      	ldr	r2, [pc, #236]	; (8003628 <main+0x270>)
 800353c:	6013      	str	r3, [r2, #0]
			&CSE_task_info.attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL,
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <main+0x274>)
 8003540:	2100      	movs	r1, #0
 8003542:	483b      	ldr	r0, [pc, #236]	; (8003630 <main+0x278>)
 8003544:	f011 ffa3 	bl	801548e <osThreadNew>
 8003548:	4603      	mov	r3, r0
 800354a:	4a3a      	ldr	r2, [pc, #232]	; (8003634 <main+0x27c>)
 800354c:	6013      	str	r3, [r2, #0]
			&IMD_task_info.attributes);

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 800354e:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <main+0x280>)
 8003550:	2100      	movs	r1, #0
 8003552:	483a      	ldr	r0, [pc, #232]	; (800363c <main+0x284>)
 8003554:	f011 ff9b 	bl	801548e <osThreadNew>
 8003558:	4603      	mov	r3, r0
 800355a:	4a39      	ldr	r2, [pc, #228]	; (8003640 <main+0x288>)
 800355c:	6013      	str	r3, [r2, #0]
			&GPIO_task_info.attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL,
 800355e:	4a39      	ldr	r2, [pc, #228]	; (8003644 <main+0x28c>)
 8003560:	2100      	movs	r1, #0
 8003562:	4839      	ldr	r0, [pc, #228]	; (8003648 <main+0x290>)
 8003564:	f011 ff93 	bl	801548e <osThreadNew>
 8003568:	4603      	mov	r3, r0
 800356a:	4a38      	ldr	r2, [pc, #224]	; (800364c <main+0x294>)
 800356c:	6013      	str	r3, [r2, #0]
			&ADC_task_info.attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 800356e:	4a38      	ldr	r2, [pc, #224]	; (8003650 <main+0x298>)
 8003570:	2100      	movs	r1, #0
 8003572:	4838      	ldr	r0, [pc, #224]	; (8003654 <main+0x29c>)
 8003574:	f011 ff8b 	bl	801548e <osThreadNew>
 8003578:	4603      	mov	r3, r0
 800357a:	4a37      	ldr	r2, [pc, #220]	; (8003658 <main+0x2a0>)
 800357c:	6013      	str	r3, [r2, #0]
			&COOL_task_info.attributes);

	CAN_task_handle = osThreadNew(start_CAN_task, NULL,
 800357e:	4a37      	ldr	r2, [pc, #220]	; (800365c <main+0x2a4>)
 8003580:	2100      	movs	r1, #0
 8003582:	4837      	ldr	r0, [pc, #220]	; (8003660 <main+0x2a8>)
 8003584:	f011 ff83 	bl	801548e <osThreadNew>
 8003588:	4603      	mov	r3, r0
 800358a:	4a36      	ldr	r2, [pc, #216]	; (8003664 <main+0x2ac>)
 800358c:	6013      	str	r3, [r2, #0]
			&CAN_task_info.attributes);

	COM_task_handle = osThreadNew(start_COM_task, NULL,
 800358e:	4a36      	ldr	r2, [pc, #216]	; (8003668 <main+0x2b0>)
 8003590:	2100      	movs	r1, #0
 8003592:	4836      	ldr	r0, [pc, #216]	; (800366c <main+0x2b4>)
 8003594:	f011 ff7b 	bl	801548e <osThreadNew>
 8003598:	4603      	mov	r3, r0
 800359a:	4a35      	ldr	r2, [pc, #212]	; (8003670 <main+0x2b8>)
 800359c:	6013      	str	r3, [r2, #0]
			&COM_task_info.attributes);

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 800359e:	4a35      	ldr	r2, [pc, #212]	; (8003674 <main+0x2bc>)
 80035a0:	2100      	movs	r1, #0
 80035a2:	4835      	ldr	r0, [pc, #212]	; (8003678 <main+0x2c0>)
 80035a4:	f011 ff73 	bl	801548e <osThreadNew>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <main+0x2c4>)
 80035ac:	6013      	str	r3, [r2, #0]
			&IWDG_task_info.attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 80035ae:	4a34      	ldr	r2, [pc, #208]	; (8003680 <main+0x2c8>)
 80035b0:	2100      	movs	r1, #0
 80035b2:	4834      	ldr	r0, [pc, #208]	; (8003684 <main+0x2cc>)
 80035b4:	f011 ff6b 	bl	801548e <osThreadNew>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4a33      	ldr	r2, [pc, #204]	; (8003688 <main+0x2d0>)
 80035bc:	6013      	str	r3, [r2, #0]
			&event_handler_task_info.attributes);

	/* Launch RTOS ! */
	osKernelStart();
 80035be:	f011 ff2b 	bl	8015418 <osKernelStart>

	for (;;)
 80035c2:	e7fe      	b.n	80035c2 <main+0x20a>
 80035c4:	f3af 8000 	nop.w
 80035c8:	f3cf3cf4 	.word	0xf3cf3cf4
 80035cc:	4047cf3c 	.word	0x4047cf3c
 80035d0:	2001bbe0 	.word	0x2001bbe0
 80035d4:	2001b5c8 	.word	0x2001b5c8
 80035d8:	2001b5e0 	.word	0x2001b5e0
 80035dc:	2001b5d0 	.word	0x2001b5d0
 80035e0:	2001b5cc 	.word	0x2001b5cc
 80035e4:	2001b5e4 	.word	0x2001b5e4
 80035e8:	2001b5dc 	.word	0x2001b5dc
 80035ec:	2001b5ec 	.word	0x2001b5ec
 80035f0:	2001b5c0 	.word	0x2001b5c0
 80035f4:	2001b5d8 	.word	0x2001b5d8
 80035f8:	2001b5c4 	.word	0x2001b5c4
 80035fc:	2001b5d4 	.word	0x2001b5d4
 8003600:	2001b5e8 	.word	0x2001b5e8
 8003604:	2001b718 	.word	0x2001b718
 8003608:	0801a8b4 	.word	0x0801a8b4
 800360c:	08003761 	.word	0x08003761
 8003610:	2001b700 	.word	0x2001b700
 8003614:	0801a8e4 	.word	0x0801a8e4
 8003618:	08004009 	.word	0x08004009
 800361c:	2001b704 	.word	0x2001b704
 8003620:	0801a944 	.word	0x0801a944
 8003624:	08003e39 	.word	0x08003e39
 8003628:	2001b70c 	.word	0x2001b70c
 800362c:	0801aa34 	.word	0x0801aa34
 8003630:	08003929 	.word	0x08003929
 8003634:	2001b720 	.word	0x2001b720
 8003638:	0801aa04 	.word	0x0801aa04
 800363c:	080039f9 	.word	0x080039f9
 8003640:	2001b6fc 	.word	0x2001b6fc
 8003644:	0801a9d4 	.word	0x0801a9d4
 8003648:	08003ad9 	.word	0x08003ad9
 800364c:	2001b710 	.word	0x2001b710
 8003650:	0801a914 	.word	0x0801a914
 8003654:	08003ef1 	.word	0x08003ef1
 8003658:	2001b708 	.word	0x2001b708
 800365c:	0801a974 	.word	0x0801a974
 8003660:	08003da9 	.word	0x08003da9
 8003664:	2001b714 	.word	0x2001b714
 8003668:	0801a9a4 	.word	0x0801a9a4
 800366c:	08003bb9 	.word	0x08003bb9
 8003670:	2001b6f8 	.word	0x2001b6f8
 8003674:	0801aa94 	.word	0x0801aa94
 8003678:	080037f9 	.word	0x080037f9
 800367c:	2001b71c 	.word	0x2001b71c
 8003680:	0801aa64 	.word	0x0801aa64
 8003684:	08003899 	.word	0x08003899
 8003688:	2001b6f4 	.word	0x2001b6f4

0800368c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b094      	sub	sp, #80	; 0x50
 8003690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003692:	f107 0320 	add.w	r3, r7, #32
 8003696:	2230      	movs	r2, #48	; 0x30
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f016 fa64 	bl	8019b68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <SystemClock_Config+0xcc>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4a27      	ldr	r2, [pc, #156]	; (8003758 <SystemClock_Config+0xcc>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	6413      	str	r3, [r2, #64]	; 0x40
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <SystemClock_Config+0xcc>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036cc:	2300      	movs	r3, #0
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <SystemClock_Config+0xd0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a21      	ldr	r2, [pc, #132]	; (800375c <SystemClock_Config+0xd0>)
 80036d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <SystemClock_Config+0xd0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80036e8:	230a      	movs	r3, #10
 80036ea:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ec:	2301      	movs	r3, #1
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036f0:	2310      	movs	r3, #16
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036f4:	2301      	movs	r3, #1
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036f8:	2302      	movs	r3, #2
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036fc:	2300      	movs	r3, #0
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003700:	2308      	movs	r3, #8
 8003702:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8003704:	2354      	movs	r3, #84	; 0x54
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003708:	2302      	movs	r3, #2
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800370c:	2304      	movs	r3, #4
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003710:	f107 0320 	add.w	r3, r7, #32
 8003714:	4618      	mov	r0, r3
 8003716:	f00e fde1 	bl	80122dc <HAL_RCC_OscConfig>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <SystemClock_Config+0x98>
		Error_Handler();
 8003720:	f000 fd7e 	bl	8004220 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003724:	230f      	movs	r3, #15
 8003726:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003728:	2302      	movs	r3, #2
 800372a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003734:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f00f f843 	bl	80127cc <HAL_RCC_ClockConfig>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <SystemClock_Config+0xc4>
		Error_Handler();
 800374c:	f000 fd68 	bl	8004220 <Error_Handler>
	}
}
 8003750:	bf00      	nop
 8003752:	3750      	adds	r7, #80	; 0x50
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	40007000 	.word	0x40007000

08003760 <start_SM_task>:

/* USER CODE BEGIN 4 */

/* ENTER TASKS */
void start_SM_task(void *argument) {
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	SEGGER_SYSVIEW_Start();
 8003768:	f015 fca6 	bl	80190b8 <SEGGER_SYSVIEW_Start>

	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <start_SM_task+0x90>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * SM_task_info.periodicity;
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <start_SM_task+0x94>)
 8003774:	4618      	mov	r0, r3
 8003776:	f7fc fed9 	bl	800052c <__aeabi_f2d>
 800377a:	a31b      	add	r3, pc, #108	; (adr r3, 80037e8 <start_SM_task+0x88>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f7fc ff2c 	bl	80005dc <__aeabi_dmul>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f7fd f9fe 	bl	8000b8c <__aeabi_d2uiz>
 8003790:	4603      	mov	r3, r0
 8003792:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * SM_task_info.offset;
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7fc fea7 	bl	80004e8 <__aeabi_ui2d>
 800379a:	4604      	mov	r4, r0
 800379c:	460d      	mov	r5, r1
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fec2 	bl	800052c <__aeabi_f2d>
 80037a8:	a30f      	add	r3, pc, #60	; (adr r3, 80037e8 <start_SM_task+0x88>)
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f7fc ff15 	bl	80005dc <__aeabi_dmul>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4620      	mov	r0, r4
 80037b8:	4629      	mov	r1, r5
 80037ba:	f7fc fd59 	bl	8000270 <__adddf3>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fd f9e1 	bl	8000b8c <__aeabi_d2uiz>
 80037ca:	4603      	mov	r3, r0
 80037cc:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f011 ff0a 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		state_machine_step();
 80037d4:	f7fe fcb8 	bl	8002148 <state_machine_step>

		/* Wait until next period */
		next_tick += tick_increment;
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f011 ff01 	bl	80155e8 <osDelayUntil>
		state_machine_step();
 80037e6:	e7f5      	b.n	80037d4 <start_SM_task+0x74>
 80037e8:	f3cf3cf4 	.word	0xf3cf3cf4
 80037ec:	4067cf3c 	.word	0x4067cf3c
 80037f0:	2001b718 	.word	0x2001b718
 80037f4:	3f4ccccd 	.word	0x3f4ccccd

080037f8 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003800:	4b21      	ldr	r3, [pc, #132]	; (8003888 <start_IWDG_task+0x90>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * IWDG_task_info.periodicity;
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <start_IWDG_task+0x94>)
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fe8f 	bl	800052c <__aeabi_f2d>
 800380e:	a31c      	add	r3, pc, #112	; (adr r3, 8003880 <start_IWDG_task+0x88>)
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f7fc fee2 	bl	80005dc <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f7fd f9b4 	bl	8000b8c <__aeabi_d2uiz>
 8003824:	4603      	mov	r3, r0
 8003826:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * IWDG_task_info.offset;
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7fc fe5d 	bl	80004e8 <__aeabi_ui2d>
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fe78 	bl	800052c <__aeabi_f2d>
 800383c:	a310      	add	r3, pc, #64	; (adr r3, 8003880 <start_IWDG_task+0x88>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fc fecb 	bl	80005dc <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4620      	mov	r0, r4
 800384c:	4629      	mov	r1, r5
 800384e:	f7fc fd0f 	bl	8000270 <__adddf3>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f7fd f997 	bl	8000b8c <__aeabi_d2uiz>
 800385e:	4603      	mov	r3, r0
 8003860:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f011 fec0 	bl	80155e8 <osDelayUntil>

	//initialize_IWDG(&hiwdg, IWDG_task_info.periodicity);

	for (;;) {
		/* Enter periodic behaviour */
		HAL_IWDG_Refresh(&hiwdg);
 8003868:	4809      	ldr	r0, [pc, #36]	; (8003890 <start_IWDG_task+0x98>)
 800386a:	f00e fd26 	bl	80122ba <HAL_IWDG_Refresh>

		/* Wait until next period */
		next_tick += tick_increment;
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4413      	add	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f011 feb6 	bl	80155e8 <osDelayUntil>
		HAL_IWDG_Refresh(&hiwdg);
 800387c:	e7f4      	b.n	8003868 <start_IWDG_task+0x70>
 800387e:	bf00      	nop
 8003880:	f3cf3cf4 	.word	0xf3cf3cf4
 8003884:	4067cf3c 	.word	0x4067cf3c
 8003888:	2001b718 	.word	0x2001b718
 800388c:	3f4ccccd 	.word	0x3f4ccccd
 8003890:	2001b6e8 	.word	0x2001b6e8
 8003894:	00000000 	.word	0x00000000

08003898 <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <start_event_handler_task+0x88>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * event_handler_task_info.periodicity;
 80038a6:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <start_event_handler_task+0x8c>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fe3f 	bl	800052c <__aeabi_f2d>
 80038ae:	a31a      	add	r3, pc, #104	; (adr r3, 8003918 <start_event_handler_task+0x80>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc fe92 	bl	80005dc <__aeabi_dmul>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f7fd f964 	bl	8000b8c <__aeabi_d2uiz>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * event_handler_task_info.offset;
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7fc fe0d 	bl	80004e8 <__aeabi_ui2d>
 80038ce:	4604      	mov	r4, r0
 80038d0:	460d      	mov	r5, r1
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fe28 	bl	800052c <__aeabi_f2d>
 80038dc:	a30e      	add	r3, pc, #56	; (adr r3, 8003918 <start_event_handler_task+0x80>)
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f7fc fe7b 	bl	80005dc <__aeabi_dmul>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4620      	mov	r0, r4
 80038ec:	4629      	mov	r1, r5
 80038ee:	f7fc fcbf 	bl	8000270 <__adddf3>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	f7fd f947 	bl	8000b8c <__aeabi_d2uiz>
 80038fe:	4603      	mov	r3, r0
 8003900:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f011 fe70 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4413      	add	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f011 fe69 	bl	80155e8 <osDelayUntil>
		next_tick += tick_increment;
 8003916:	e7f7      	b.n	8003908 <start_event_handler_task+0x70>
 8003918:	f3cf3cf4 	.word	0xf3cf3cf4
 800391c:	4067cf3c 	.word	0x4067cf3c
 8003920:	2001b718 	.word	0x2001b718
 8003924:	3f4ccccd 	.word	0x3f4ccccd

08003928 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8003928:	b5b0      	push	{r4, r5, r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <start_IMD_task+0xc0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61fb      	str	r3, [r7, #28]
	uint32_t tick_increment = TICK2HZ * IMD_task_info.periodicity;
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <start_IMD_task+0xc4>)
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fdf7 	bl	800052c <__aeabi_f2d>
 800393e:	a328      	add	r3, pc, #160	; (adr r3, 80039e0 <start_IMD_task+0xb8>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f7fc fe4a 	bl	80005dc <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	f7fd f91c 	bl	8000b8c <__aeabi_d2uiz>
 8003954:	4603      	mov	r3, r0
 8003956:	61bb      	str	r3, [r7, #24]

	/* Make task-specific structures */
	IMD_t IMD;
	initialize_IMD(&htim2);
 8003958:	4825      	ldr	r0, [pc, #148]	; (80039f0 <start_IMD_task+0xc8>)
 800395a:	f7fe f9d9 	bl	8001d10 <initialize_IMD>

	/* Wait until offset */
	next_tick += TICK2HZ * IMD_task_info.offset;
 800395e:	69f8      	ldr	r0, [r7, #28]
 8003960:	f7fc fdc2 	bl	80004e8 <__aeabi_ui2d>
 8003964:	4604      	mov	r4, r0
 8003966:	460d      	mov	r5, r1
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fddd 	bl	800052c <__aeabi_f2d>
 8003972:	a31b      	add	r3, pc, #108	; (adr r3, 80039e0 <start_IMD_task+0xb8>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fe30 	bl	80005dc <__aeabi_dmul>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4620      	mov	r0, r4
 8003982:	4629      	mov	r1, r5
 8003984:	f7fc fc74 	bl	8000270 <__adddf3>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	f7fd f8fc 	bl	8000b8c <__aeabi_d2uiz>
 8003994:	4603      	mov	r3, r0
 8003996:	61fb      	str	r3, [r7, #28]
	osDelayUntil(next_tick);
 8003998:	69f8      	ldr	r0, [r7, #28]
 800399a:	f011 fe25 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <start_IMD_task+0xcc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f107 010c 	add.w	r1, r7, #12
 80039a6:	2200      	movs	r2, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f012 fa4d 	bl	8015e48 <xQueueReceive>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <start_IMD_task+0xa4>
			uint8_t frequency_range = (uint8_t) (IMD.frequency / 10);
 80039b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80039b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80039bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c4:	edc7 7a00 	vstr	s15, [r7]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	75fb      	strb	r3, [r7, #23]

		}

		/* Wait until next period */
		next_tick += tick_increment;
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4413      	add	r3, r2
 80039d2:	61fb      	str	r3, [r7, #28]
		osDelayUntil(next_tick);
 80039d4:	69f8      	ldr	r0, [r7, #28]
 80039d6:	f011 fe07 	bl	80155e8 <osDelayUntil>
		if (xQueueReceive(IMD_queue, &IMD, 0)) {
 80039da:	e7e0      	b.n	800399e <start_IMD_task+0x76>
 80039dc:	f3af 8000 	nop.w
 80039e0:	f3cf3cf4 	.word	0xf3cf3cf4
 80039e4:	4067cf3c 	.word	0x4067cf3c
 80039e8:	2001b718 	.word	0x2001b718
 80039ec:	3f4ccccd 	.word	0x3f4ccccd
 80039f0:	2001bd10 	.word	0x2001bd10
 80039f4:	2001b5d0 	.word	0x2001b5d0

080039f8 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003a00:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <start_GPIO_task+0xd0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * GPIO_task_info.periodicity;
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <start_GPIO_task+0xd4>)
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd8f 	bl	800052c <__aeabi_f2d>
 8003a0e:	a32c      	add	r3, pc, #176	; (adr r3, 8003ac0 <start_GPIO_task+0xc8>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f7fc fde2 	bl	80005dc <__aeabi_dmul>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7fd f8b4 	bl	8000b8c <__aeabi_d2uiz>
 8003a24:	4603      	mov	r3, r0
 8003a26:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	GPIO_t GPIO;

	/* Wait until offset */
	next_tick += TICK2HZ * GPIO_task_info.offset;
 8003a28:	6978      	ldr	r0, [r7, #20]
 8003a2a:	f7fc fd5d 	bl	80004e8 <__aeabi_ui2d>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fd78 	bl	800052c <__aeabi_f2d>
 8003a3c:	a320      	add	r3, pc, #128	; (adr r3, 8003ac0 <start_GPIO_task+0xc8>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fdcb 	bl	80005dc <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f7fc fc0f 	bl	8000270 <__adddf3>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fd f897 	bl	8000b8c <__aeabi_d2uiz>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8003a62:	6978      	ldr	r0, [r7, #20]
 8003a64:	f011 fdc0 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8003a68:	f000 fc4c 	bl	8004304 <get_ams_error_latched_ext>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	723b      	strb	r3, [r7, #8]
		GPIO.IMD_error_latched = get_imd_error_latched_ext();
 8003a70:	f000 fc54 	bl	800431c <get_imd_error_latched_ext>
 8003a74:	4603      	mov	r3, r0
 8003a76:	727b      	strb	r3, [r7, #9]
		GPIO.SC_probe = get_sc_probe_ext();
 8003a78:	f000 fc5c 	bl	8004334 <get_sc_probe_ext>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	72bb      	strb	r3, [r7, #10]
		GPIO.IMD_ok = get_imd_ok_ext();
 8003a80:	f000 fc68 	bl	8004354 <get_imd_ok_ext>
 8003a84:	4603      	mov	r3, r0
 8003a86:	72fb      	strb	r3, [r7, #11]
		GPIO.AIR_plus_closed = get_air_plus_ext();
 8003a88:	f000 fbe4 	bl	8004254 <get_air_plus_ext>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	733b      	strb	r3, [r7, #12]
		GPIO.AIR_minus_closed = get_air_minus_ext();
 8003a90:	f000 fc04 	bl	800429c <get_air_minus_ext>
 8003a94:	4603      	mov	r3, r0
 8003a96:	737b      	strb	r3, [r7, #13]
		GPIO.precharge_closed = get_precharge_ext();
 8003a98:	f000 fc24 	bl	80042e4 <get_precharge_ext>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	73bb      	strb	r3, [r7, #14]

		xQueueOverwrite(GPIO_queue, &GPIO);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <start_GPIO_task+0xd8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	f107 0108 	add.w	r1, r7, #8
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f011 fff6 	bl	8015a9c <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 8003ab8:	6978      	ldr	r0, [r7, #20]
 8003aba:	f011 fd95 	bl	80155e8 <osDelayUntil>
		GPIO.AMS_error_latched = get_ams_error_latched_ext();
 8003abe:	e7d3      	b.n	8003a68 <start_GPIO_task+0x70>
 8003ac0:	f3cf3cf4 	.word	0xf3cf3cf4
 8003ac4:	4067cf3c 	.word	0x4067cf3c
 8003ac8:	2001b718 	.word	0x2001b718
 8003acc:	3f4ccccd 	.word	0x3f4ccccd
 8003ad0:	2001b5e0 	.word	0x2001b5e0
 8003ad4:	00000000 	.word	0x00000000

08003ad8 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b0a8      	sub	sp, #160	; 0xa0
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <start_ADC_task+0xd0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t tick_increment = TICK2HZ * ADC_task_info.periodicity;
 8003ae8:	4b30      	ldr	r3, [pc, #192]	; (8003bac <start_ADC_task+0xd4>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fd1e 	bl	800052c <__aeabi_f2d>
 8003af0:	a32b      	add	r3, pc, #172	; (adr r3, 8003ba0 <start_ADC_task+0xc8>)
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f7fc fd71 	bl	80005dc <__aeabi_dmul>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7fd f843 	bl	8000b8c <__aeabi_d2uiz>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	/* Make task-specific structures */
	uint16_t adc_readings[4 * 16];
	ADC_initialize(&htim3);
 8003b0c:	4828      	ldr	r0, [pc, #160]	; (8003bb0 <start_ADC_task+0xd8>)
 8003b0e:	f7ff fa17 	bl	8002f40 <ADC_initialize>
	temperatures_t temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * ADC_task_info.offset;
 8003b12:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003b16:	f7fc fce7 	bl	80004e8 <__aeabi_ui2d>
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc fd02 	bl	800052c <__aeabi_f2d>
 8003b28:	a31d      	add	r3, pc, #116	; (adr r3, 8003ba0 <start_ADC_task+0xc8>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fd55 	bl	80005dc <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f7fc fb99 	bl	8000270 <__adddf3>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f7fd f821 	bl	8000b8c <__aeabi_d2uiz>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	osDelayUntil(next_tick);
 8003b50:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003b54:	f011 fd48 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003b58:	f107 0318 	add.w	r3, r7, #24
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fa02 	bl	8002f68 <ADC_step>
		interpret_ADC_buffer(&temperatures, adc_readings, 16);
 8003b64:	f107 0118 	add.w	r1, r7, #24
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f81e 	bl	8002bb0 <interpret_ADC_buffer>

		xQueueOverwrite(temperatures_queue, &temperatures);
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <start_ADC_task+0xdc>)
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	f107 0108 	add.w	r1, r7, #8
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f011 ff8c 	bl	8015a9c <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8003b84:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelayUntil(next_tick);
 8003b92:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003b96:	f011 fd27 	bl	80155e8 <osDelayUntil>
		ADC_step((uint32_t*) &adc_readings, sizeof((uint32_t*) adc_readings));
 8003b9a:	e7dd      	b.n	8003b58 <start_ADC_task+0x80>
 8003b9c:	f3af 8000 	nop.w
 8003ba0:	f3cf3cf4 	.word	0xf3cf3cf4
 8003ba4:	4067cf3c 	.word	0x4067cf3c
 8003ba8:	2001b718 	.word	0x2001b718
 8003bac:	3f4ccccd 	.word	0x3f4ccccd
 8003bb0:	2001bc80 	.word	0x2001bc80
 8003bb4:	2001b5cc 	.word	0x2001b5cc

08003bb8 <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 8003bb8:	b5b0      	push	{r4, r5, r7, lr}
 8003bba:	b090      	sub	sp, #64	; 0x40
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003bc0:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <start_COM_task+0x1c8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t tick_increment = TICK2HZ * COM_task_info.periodicity;
 8003bc6:	4b6f      	ldr	r3, [pc, #444]	; (8003d84 <start_COM_task+0x1cc>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fcaf 	bl	800052c <__aeabi_f2d>
 8003bce:	a36a      	add	r3, pc, #424	; (adr r3, 8003d78 <start_COM_task+0x1c0>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fd02 	bl	80005dc <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fc ffd4 	bl	8000b8c <__aeabi_d2uiz>
 8003be4:	4603      	mov	r3, r0
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30

	/* Make task-specific structures */
	const float voltage_time_constraint = 0.5;
 8003be8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float temperature_time_constraint = 1.0;
 8003bee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	const float current_time_constraint = 0.5;
 8003bf4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
	const float valid_data_time_constraint = 5.0;
 8003bfa:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <start_COM_task+0x1d0>)
 8003bfc:	623b      	str	r3, [r7, #32]

	uint16_t voltage_sample_constraint = (voltage_time_constraint
			/ COM_task_info.periodicity);
 8003bfe:	eddf 6a63 	vldr	s13, [pc, #396]	; 8003d8c <start_COM_task+0x1d4>
 8003c02:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t voltage_sample_constraint = (voltage_time_constraint
 8003c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0e:	ee17 3a90 	vmov	r3, s15
 8003c12:	877b      	strh	r3, [r7, #58]	; 0x3a
	if (voltage_sample_constraint < 1) {
 8003c14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <start_COM_task+0x66>
		voltage_sample_constraint = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	uint16_t temperature_sample_constraint = (temperature_time_constraint
			/ COM_task_info.periodicity);
 8003c1e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003d8c <start_COM_task+0x1d4>
 8003c22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t temperature_sample_constraint = (temperature_time_constraint
 8003c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2e:	ee17 3a90 	vmov	r3, s15
 8003c32:	873b      	strh	r3, [r7, #56]	; 0x38
	if (temperature_sample_constraint < 1) {
 8003c34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <start_COM_task+0x86>
		temperature_sample_constraint = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	uint16_t current_sample_constraint = (current_time_constraint
			/ COM_task_info.periodicity);
 8003c3e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003d8c <start_COM_task+0x1d4>
 8003c42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t current_sample_constraint = (current_time_constraint
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 3a90 	vmov	r3, s15
 8003c52:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (current_sample_constraint < 1) {
 8003c54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <start_COM_task+0xa6>
		current_sample_constraint = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	uint16_t valid_data_sample_constraint = (valid_data_time_constraint
			/ COM_task_info.periodicity);
 8003c5e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8003d8c <start_COM_task+0x1d4>
 8003c62:	ed97 7a08 	vldr	s14, [r7, #32]
 8003c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
	uint16_t valid_data_sample_constraint = (valid_data_time_constraint
 8003c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6e:	ee17 3a90 	vmov	r3, s15
 8003c72:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (valid_data_sample_constraint < 1) {
 8003c74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <start_COM_task+0xc6>
		valid_data_sample_constraint = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t cell_temperatures_valid;
	double current;
	uint16_t current_valid;

	/* Wait until offset */
	next_tick += TICK2HZ * COM_task_info.offset;
 8003c7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c80:	f7fc fc32 	bl	80004e8 <__aeabi_ui2d>
 8003c84:	4604      	mov	r4, r0
 8003c86:	460d      	mov	r5, r1
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fc fc4d 	bl	800052c <__aeabi_f2d>
 8003c92:	a339      	add	r3, pc, #228	; (adr r3, 8003d78 <start_COM_task+0x1c0>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fca0 	bl	80005dc <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	f7fc fae4 	bl	8000270 <__adddf3>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7fc ff6c 	bl	8000b8c <__aeabi_d2uiz>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(next_tick);
 8003cb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cba:	f011 fc95 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		LTC_acquire_data(1);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f000 fce2 	bl	8004688 <LTC_acquire_data>

		cell_voltages = &SIM0_Y.cell_voltages;
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <start_COM_task+0x1d8>)
 8003cc6:	617b      	str	r3, [r7, #20]
		cell_temperatures = &SIM0_Y.cell_temperatures;
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <start_COM_task+0x1dc>)
 8003cca:	613b      	str	r3, [r7, #16]
		cell_voltages_valid = 0x3FFF;
 8003ccc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003cd0:	83fb      	strh	r3, [r7, #30]
		cell_temperatures_valid = 0x3FFF;
 8003cd2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003cd6:	83bb      	strh	r3, [r7, #28]

		current_valid = xQueueReceive(accumulator_current_queue, &current, 0);
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <start_COM_task+0x1e0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f107 0108 	add.w	r1, r7, #8
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f012 f8b0 	bl	8015e48 <xQueueReceive>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	837b      	strh	r3, [r7, #26]

		//cell_voltages = LTC_voltages;
		//cell_temperatures = LTC_temperatures;
		if (!COM_data_valid_ok(
				(cell_voltages_valid == 0x03FF)
						&& (cell_temperatures_valid == 0x03FF) && current_valid,
 8003cec:	8bfb      	ldrh	r3, [r7, #30]
 8003cee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d109      	bne.n	8003d0a <start_COM_task+0x152>
 8003cf6:	8bbb      	ldrh	r3, [r7, #28]
 8003cf8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d104      	bne.n	8003d0a <start_COM_task+0x152>
 8003d00:	8b7b      	ldrh	r3, [r7, #26]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <start_COM_task+0x152>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <start_COM_task+0x154>
 8003d0a:	2300      	movs	r3, #0
		if (!COM_data_valid_ok(
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd ff1c 	bl	8001b50 <COM_data_valid_ok>
				valid_data_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_voltages_ok_d(cell_voltages, cell_voltages_valid,
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	8bfa      	ldrh	r2, [r7, #30]
 8003d1c:	b2d1      	uxtb	r1, r2
 8003d1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fdd7 	bl	80018d4 <COM_voltages_ok_d>
				voltage_sample_constraint)) {

			//Error_Handler();
		}

		if (!COM_temperatures_ok_d(cell_temperatures, cell_temperatures_valid,
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	8bba      	ldrh	r2, [r7, #28]
 8003d2a:	b2d1      	uxtb	r1, r2
 8003d2c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fe42 	bl	80019b8 <COM_temperatures_ok_d>
				temperature_sample_constraint)) {
			//Error_Handler();
		}

		if (!COM_current_ok_d(&current, current_valid,
 8003d34:	8b7b      	ldrh	r3, [r7, #26]
 8003d36:	b2d9      	uxtb	r1, r3
 8003d38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd feac 	bl	8001a9c <COM_current_ok_d>
				current_sample_constraint)) {
			//Error_Handler();

		}

		xQueueOverwrite(cell_voltages_queue, &cell_voltages);
 8003d44:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <start_COM_task+0x1e4>)
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f107 0114 	add.w	r1, r7, #20
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f011 fea4 	bl	8015a9c <xQueueGenericSend>
		xQueueOverwrite(cell_temperatures_queue, &cell_temperatures);
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <start_COM_task+0x1e8>)
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	f107 0110 	add.w	r1, r7, #16
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f011 fe9c 	bl	8015a9c <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 8003d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	4413      	add	r3, r2
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
		osDelayUntil(next_tick);
 8003d6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d6e:	f011 fc3b 	bl	80155e8 <osDelayUntil>
		LTC_acquire_data(1);
 8003d72:	e7a4      	b.n	8003cbe <start_COM_task+0x106>
 8003d74:	f3af 8000 	nop.w
 8003d78:	f3cf3cf4 	.word	0xf3cf3cf4
 8003d7c:	4067cf3c 	.word	0x4067cf3c
 8003d80:	2001b718 	.word	0x2001b718
 8003d84:	3f4ccccd 	.word	0x3f4ccccd
 8003d88:	40a00000 	.word	0x40a00000
 8003d8c:	3f4ccccd 	.word	0x3f4ccccd
 8003d90:	2001d678 	.word	0x2001d678
 8003d94:	2001e248 	.word	0x2001e248
 8003d98:	2001b5ec 	.word	0x2001b5ec
 8003d9c:	2001b5c0 	.word	0x2001b5c0
 8003da0:	2001b5d8 	.word	0x2001b5d8
 8003da4:	00000000 	.word	0x00000000

08003da8 <start_CAN_task>:
	}
}

void start_CAN_task(void *argument) {
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <start_CAN_task+0x88>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CAN_task_info.periodicity;
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <start_CAN_task+0x8c>)
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fbb7 	bl	800052c <__aeabi_f2d>
 8003dbe:	a31a      	add	r3, pc, #104	; (adr r3, 8003e28 <start_CAN_task+0x80>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f7fc fc0a 	bl	80005dc <__aeabi_dmul>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7fc fedc 	bl	8000b8c <__aeabi_d2uiz>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += TICK2HZ * CAN_task_info.offset;
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7fc fb85 	bl	80004e8 <__aeabi_ui2d>
 8003dde:	4604      	mov	r4, r0
 8003de0:	460d      	mov	r5, r1
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc fba0 	bl	800052c <__aeabi_f2d>
 8003dec:	a30e      	add	r3, pc, #56	; (adr r3, 8003e28 <start_CAN_task+0x80>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc fbf3 	bl	80005dc <__aeabi_dmul>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	f7fc fa37 	bl	8000270 <__adddf3>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f7fc febf 	bl	8000b8c <__aeabi_d2uiz>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f011 fbe8 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		/* Wait until next period */
		next_tick += tick_increment;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f011 fbe1 	bl	80155e8 <osDelayUntil>
		next_tick += tick_increment;
 8003e26:	e7f7      	b.n	8003e18 <start_CAN_task+0x70>
 8003e28:	f3cf3cf4 	.word	0xf3cf3cf4
 8003e2c:	4067cf3c 	.word	0x4067cf3c
 8003e30:	2001b718 	.word	0x2001b718
 8003e34:	3f4ccccd 	.word	0x3f4ccccd

08003e38 <start_CSE_task>:
	}
}

void start_CSE_task(void *argument) {
 8003e38:	b5b0      	push	{r4, r5, r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <start_CSE_task+0xa8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
	uint32_t tick_increment = TICK2HZ * CSE_task_info.periodicity;
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <start_CSE_task+0xac>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fb6f 	bl	800052c <__aeabi_f2d>
 8003e4e:	a322      	add	r3, pc, #136	; (adr r3, 8003ed8 <start_CSE_task+0xa0>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc fbc2 	bl	80005dc <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7fc fe94 	bl	8000b8c <__aeabi_d2uiz>
 8003e64:	4603      	mov	r3, r0
 8003e66:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */
	CSE_initialize();
 8003e68:	f003 f93a 	bl	80070e0 <CSE_initialize>

	/* Wait until offset */
	next_tick += TICK2HZ * CSE_task_info.offset;
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fc fb3b 	bl	80004e8 <__aeabi_ui2d>
 8003e72:	4604      	mov	r4, r0
 8003e74:	460d      	mov	r5, r1
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fb56 	bl	800052c <__aeabi_f2d>
 8003e80:	a315      	add	r3, pc, #84	; (adr r3, 8003ed8 <start_CSE_task+0xa0>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fba9 	bl	80005dc <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc f9ed 	bl	8000270 <__adddf3>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fc fe75 	bl	8000b8c <__aeabi_d2uiz>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f011 fb9e 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		CSE_U.current = SIM0_Y.current;
 8003eac:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <start_CSE_task+0xb0>)
 8003eae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003eb2:	490e      	ldr	r1, [pc, #56]	; (8003eec <start_CSE_task+0xb4>)
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
		CSE_U.y = SIM0_Y.cell_voltages[0];
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <start_CSE_task+0xb0>)
 8003eba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003ebe:	490b      	ldr	r1, [pc, #44]	; (8003eec <start_CSE_task+0xb4>)
 8003ec0:	e9c1 2302 	strd	r2, r3, [r1, #8]

		CSE_step();
 8003ec4:	f001 fe08 	bl	8005ad8 <CSE_step>

		/* Wait until next period */
		next_tick += tick_increment;
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f011 fb89 	bl	80155e8 <osDelayUntil>
		CSE_U.current = SIM0_Y.current;
 8003ed6:	e7e9      	b.n	8003eac <start_CSE_task+0x74>
 8003ed8:	f3cf3cf4 	.word	0xf3cf3cf4
 8003edc:	4067cf3c 	.word	0x4067cf3c
 8003ee0:	2001b718 	.word	0x2001b718
 8003ee4:	3f4ccccd 	.word	0x3f4ccccd
 8003ee8:	2001d638 	.word	0x2001d638
 8003eec:	2001bd68 	.word	0x2001bd68

08003ef0 <start_COOL_task>:
	}
}

void start_COOL_task(void *argument) {
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b096      	sub	sp, #88	; 0x58
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <start_COOL_task+0xf8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t tick_increment = TICK2HZ * COOL_task_info.periodicity;
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <start_COOL_task+0xfc>)
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fb13 	bl	800052c <__aeabi_f2d>
 8003f06:	a336      	add	r3, pc, #216	; (adr r3, 8003fe0 <start_COOL_task+0xf0>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fb66 	bl	80005dc <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fe38 	bl	8000b8c <__aeabi_d2uiz>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Make task-specific structures */
	PID_t PID;
	float temperature = 20;
 8003f20:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <start_COOL_task+0x100>)
 8003f22:	653b      	str	r3, [r7, #80]	; 0x50

	PID_initialize(&PID, // *ptr
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	eddf 2a32 	vldr	s5, [pc, #200]	; 8003ff4 <start_COOL_task+0x104>
 8003f2c:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8003f30:	eddf 1a31 	vldr	s3, [pc, #196]	; 8003ff8 <start_COOL_task+0x108>
 8003f34:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8003ff8 <start_COOL_task+0x108>
 8003f38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f3c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fd ff74 	bl	8001e2e <PID_initialize>
			0,	// Proportionate gain
			0,	// Proportionate gain
			20,	// Lower PID output bound
			100	// Upper PID output bound
			);
	FAN_initialize(&htim1);
 8003f46:	482d      	ldr	r0, [pc, #180]	; (8003ffc <start_COOL_task+0x10c>)
 8003f48:	f7fd fe1e 	bl	8001b88 <FAN_initialize>

	double *temperatures;

	/* Wait until offset */
	next_tick += TICK2HZ * COOL_task_info.offset;
 8003f4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003f4e:	f7fc facb 	bl	80004e8 <__aeabi_ui2d>
 8003f52:	4604      	mov	r4, r0
 8003f54:	460d      	mov	r5, r1
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc fae6 	bl	800052c <__aeabi_f2d>
 8003f60:	a31f      	add	r3, pc, #124	; (adr r3, 8003fe0 <start_COOL_task+0xf0>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f7fc fb39 	bl	80005dc <__aeabi_dmul>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4620      	mov	r0, r4
 8003f70:	4629      	mov	r1, r5
 8003f72:	f7fc f97d 	bl	8000270 <__adddf3>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fc fe05 	bl	8000b8c <__aeabi_d2uiz>
 8003f82:	4603      	mov	r3, r0
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
	osDelayUntil(next_tick);
 8003f86:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003f88:	f011 fb2e 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */

		if (xQueuePeek(cell_temperatures_queue, &temperatures, 0)) {
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <start_COOL_task+0x110>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f107 010c 	add.w	r1, r7, #12
 8003f94:	2200      	movs	r2, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f012 f866 	bl	8016068 <xQueuePeek>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <start_COOL_task+0xc4>
			temperature = temperatures[0];
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	f7fc fe0e 	bl	8000bcc <__aeabi_d2f>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	653b      	str	r3, [r7, #80]	; 0x50
		}

		PID_progress(&PID, temperature);
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fd fec7 	bl	8001d50 <PID_progress>
		FAN_duty_cycle(&htim1, PID.output);
 8003fc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fca:	480c      	ldr	r0, [pc, #48]	; (8003ffc <start_COOL_task+0x10c>)
 8003fcc:	f7fd fe06 	bl	8001bdc <FAN_duty_cycle>

		/* Wait until next period */
		next_tick += tick_increment;
 8003fd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd4:	4413      	add	r3, r2
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
		osDelayUntil(next_tick);
 8003fd8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003fda:	f011 fb05 	bl	80155e8 <osDelayUntil>
		if (xQueuePeek(cell_temperatures_queue, &temperatures, 0)) {
 8003fde:	e7d5      	b.n	8003f8c <start_COOL_task+0x9c>
 8003fe0:	f3cf3cf4 	.word	0xf3cf3cf4
 8003fe4:	4067cf3c 	.word	0x4067cf3c
 8003fe8:	2001b718 	.word	0x2001b718
 8003fec:	3f4ccccd 	.word	0x3f4ccccd
 8003ff0:	41a00000 	.word	0x41a00000
 8003ff4:	42c80000 	.word	0x42c80000
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	2001bcc8 	.word	0x2001bcc8
 8004000:	2001b5d8 	.word	0x2001b5d8
 8004004:	00000000 	.word	0x00000000

08004008 <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = first_tick;
 8004010:	4b69      	ldr	r3, [pc, #420]	; (80041b8 <start_SIM_task+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	617b      	str	r3, [r7, #20]
	uint32_t tick_increment = TICK2HZ * SIM_task_info.periodicity;
 8004016:	4b69      	ldr	r3, [pc, #420]	; (80041bc <start_SIM_task+0x1b4>)
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa87 	bl	800052c <__aeabi_f2d>
 800401e:	a364      	add	r3, pc, #400	; (adr r3, 80041b0 <start_SIM_task+0x1a8>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc fada 	bl	80005dc <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7fc fdac 	bl	8000b8c <__aeabi_d2uiz>
 8004034:	4603      	mov	r3, r0
 8004036:	613b      	str	r3, [r7, #16]

	/* Make task-specific structures */
	SIM0_initialize();
 8004038:	f004 f9ae 	bl	8008398 <SIM0_initialize>

	SIM0_P.Ts = SIM_task_info.periodicity;
 800403c:	4b5f      	ldr	r3, [pc, #380]	; (80041bc <start_SIM_task+0x1b4>)
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fa74 	bl	800052c <__aeabi_f2d>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	495d      	ldr	r1, [pc, #372]	; (80041c0 <start_SIM_task+0x1b8>)
 800404a:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	SIM0_U.SC = 1;
 800404e:	495d      	ldr	r1, [pc, #372]	; (80041c4 <start_SIM_task+0x1bc>)
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	4b5c      	ldr	r3, [pc, #368]	; (80041c8 <start_SIM_task+0x1c0>)
 8004056:	e9c1 2308 	strd	r2, r3, [r1, #32]
	SIM0_U.drive = 1;
 800405a:	495a      	ldr	r1, [pc, #360]	; (80041c4 <start_SIM_task+0x1bc>)
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <start_SIM_task+0x1c0>)
 8004062:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	SIM0_U.charge = 0;
 8004066:	4957      	ldr	r1, [pc, #348]	; (80041c4 <start_SIM_task+0x1bc>)
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	SIM0_U.drive_current = -100;
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <start_SIM_task+0x1bc>)
 8004076:	f503 618b 	add.w	r1, r3, #1112	; 0x458
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	4b53      	ldr	r3, [pc, #332]	; (80041cc <start_SIM_task+0x1c4>)
 8004080:	e9c1 2300 	strd	r2, r3, [r1]
	{
		uint8_t start_drive = SIM0_U.drive > 0.5;
 8004084:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <start_SIM_task+0x1bc>)
 8004086:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800408a:	2301      	movs	r3, #1
 800408c:	461c      	mov	r4, r3
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <start_SIM_task+0x1c8>)
 8004094:	f7fc fd32 	bl	8000afc <__aeabi_dcmpgt>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <start_SIM_task+0x9a>
 800409e:	2300      	movs	r3, #0
 80040a0:	461c      	mov	r4, r3
 80040a2:	b2e3      	uxtb	r3, r4
 80040a4:	73fb      	strb	r3, [r7, #15]
		xQueueOverwrite(start_drive_queue, &start_drive);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <start_SIM_task+0x1cc>)
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	f107 010f 	add.w	r1, r7, #15
 80040ae:	2302      	movs	r3, #2
 80040b0:	2200      	movs	r2, #0
 80040b2:	f011 fcf3 	bl	8015a9c <xQueueGenericSend>
	}
	{
		uint8_t start_charge = SIM0_U.charge > 0.5;
 80040b6:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <start_SIM_task+0x1bc>)
 80040b8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80040bc:	2301      	movs	r3, #1
 80040be:	461c      	mov	r4, r3
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <start_SIM_task+0x1c8>)
 80040c6:	f7fc fd19 	bl	8000afc <__aeabi_dcmpgt>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <start_SIM_task+0xcc>
 80040d0:	2300      	movs	r3, #0
 80040d2:	461c      	mov	r4, r3
 80040d4:	b2e3      	uxtb	r3, r4
 80040d6:	73bb      	strb	r3, [r7, #14]
		xQueueOverwrite(start_charge_queue, &start_charge);
 80040d8:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <start_SIM_task+0x1d0>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f107 010e 	add.w	r1, r7, #14
 80040e0:	2302      	movs	r3, #2
 80040e2:	2200      	movs	r2, #0
 80040e4:	f011 fcda 	bl	8015a9c <xQueueGenericSend>
	}
	{
		uint8_t start_balance = SIM0_U.drive + SIM0_U.charge > 1.5;
 80040e8:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <start_SIM_task+0x1bc>)
 80040ea:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80040ee:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <start_SIM_task+0x1bc>)
 80040f0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80040f4:	f7fc f8bc 	bl	8000270 <__adddf3>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	2301      	movs	r3, #1
 8004102:	461c      	mov	r4, r3
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	4b34      	ldr	r3, [pc, #208]	; (80041dc <start_SIM_task+0x1d4>)
 800410a:	f7fc fcf7 	bl	8000afc <__aeabi_dcmpgt>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <start_SIM_task+0x110>
 8004114:	2300      	movs	r3, #0
 8004116:	461c      	mov	r4, r3
 8004118:	b2e3      	uxtb	r3, r4
 800411a:	737b      	strb	r3, [r7, #13]
		xQueueOverwrite(start_balance_queue, &start_balance);
 800411c:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <start_SIM_task+0x1d8>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	f107 010d 	add.w	r1, r7, #13
 8004124:	2302      	movs	r3, #2
 8004126:	2200      	movs	r2, #0
 8004128:	f011 fcb8 	bl	8015a9c <xQueueGenericSend>
	}

	/* Wait until offset */
	next_tick += TICK2HZ * SIM_task_info.offset;
 800412c:	6978      	ldr	r0, [r7, #20]
 800412e:	f7fc f9db 	bl	80004e8 <__aeabi_ui2d>
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc f9f6 	bl	800052c <__aeabi_f2d>
 8004140:	a31b      	add	r3, pc, #108	; (adr r3, 80041b0 <start_SIM_task+0x1a8>)
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f7fc fa49 	bl	80005dc <__aeabi_dmul>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4620      	mov	r0, r4
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc f88d 	bl	8000270 <__adddf3>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	f7fc fd15 	bl	8000b8c <__aeabi_d2uiz>
 8004162:	4603      	mov	r3, r0
 8004164:	617b      	str	r3, [r7, #20]
	osDelayUntil(next_tick);
 8004166:	6978      	ldr	r0, [r7, #20]
 8004168:	f011 fa3e 	bl	80155e8 <osDelayUntil>

	for (;;) {
		/* Enter periodic behaviour */
		SIM0_step();
 800416c:	f002 ffdc 	bl	8007128 <SIM0_step>

		xQueueOverwrite(accumulator_voltage_queue, &SIM0_Y.accumulator_voltage);
 8004170:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <start_SIM_task+0x1dc>)
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	2302      	movs	r3, #2
 8004176:	2200      	movs	r2, #0
 8004178:	491b      	ldr	r1, [pc, #108]	; (80041e8 <start_SIM_task+0x1e0>)
 800417a:	f011 fc8f 	bl	8015a9c <xQueueGenericSend>
		xQueueOverwrite(vehicle_voltage_queue, &SIM0_Y.vehicle_voltage);
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <start_SIM_task+0x1e4>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	2302      	movs	r3, #2
 8004184:	2200      	movs	r2, #0
 8004186:	491a      	ldr	r1, [pc, #104]	; (80041f0 <start_SIM_task+0x1e8>)
 8004188:	f011 fc88 	bl	8015a9c <xQueueGenericSend>
		xQueueOverwrite(accumulator_current_queue, &SIM0_Y.current);
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <start_SIM_task+0x1ec>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	2302      	movs	r3, #2
 8004192:	2200      	movs	r2, #0
 8004194:	4918      	ldr	r1, [pc, #96]	; (80041f8 <start_SIM_task+0x1f0>)
 8004196:	f011 fc81 	bl	8015a9c <xQueueGenericSend>

		/* Wait until next period */
		next_tick += tick_increment;
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
		osDelayUntil(next_tick);
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f011 fa20 	bl	80155e8 <osDelayUntil>
		SIM0_step();
 80041a8:	e7e0      	b.n	800416c <start_SIM_task+0x164>
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w
 80041b0:	f3cf3cf4 	.word	0xf3cf3cf4
 80041b4:	4067cf3c 	.word	0x4067cf3c
 80041b8:	2001b718 	.word	0x2001b718
 80041bc:	3f4ccccd 	.word	0x3f4ccccd
 80041c0:	20000360 	.word	0x20000360
 80041c4:	2001e430 	.word	0x2001e430
 80041c8:	3ff00000 	.word	0x3ff00000
 80041cc:	c0590000 	.word	0xc0590000
 80041d0:	3fe00000 	.word	0x3fe00000
 80041d4:	2001b5c4 	.word	0x2001b5c4
 80041d8:	2001b5d4 	.word	0x2001b5d4
 80041dc:	3ff80000 	.word	0x3ff80000
 80041e0:	2001b5e8 	.word	0x2001b5e8
 80041e4:	2001b5e4 	.word	0x2001b5e4
 80041e8:	2001d670 	.word	0x2001d670
 80041ec:	2001b5dc 	.word	0x2001b5dc
 80041f0:	2001d660 	.word	0x2001d660
 80041f4:	2001b5ec 	.word	0x2001b5ec
 80041f8:	2001d668 	.word	0x2001d668

080041fc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800420e:	f00c f87b 	bl	8010308 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40000c00 	.word	0x40000c00

08004220 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004224:	b672      	cpsid	i
}
 8004226:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004228:	e7fe      	b.n	8004228 <Error_Handler+0x8>
	...

0800422c <set_air_plus_ext>:
#include "main.h"

#include "canlib_callbacks.h"
#include "SIM0.h"

void set_air_plus_ext(uint8_t closed){
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirPlus = closed;
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc f955 	bl	80004e8 <__aeabi_ui2d>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4903      	ldr	r1, [pc, #12]	; (8004250 <set_air_plus_ext+0x24>)
 8004244:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	2001e430 	.word	0x2001e430

08004254 <get_air_plus_ext>:

uint8_t get_air_plus_ext(){
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_plus_closed;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <get_air_plus_ext+0x1c>)
 800425a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	f7fc fc93 	bl	8000b8c <__aeabi_d2uiz>
 8004266:	4603      	mov	r3, r0
 8004268:	b2db      	uxtb	r3, r3
}
 800426a:	4618      	mov	r0, r3
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2001d638 	.word	0x2001d638

08004274 <set_air_minus_ext>:

void set_air_minus_ext(uint8_t closed){
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableAirMinus = closed;
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc f931 	bl	80004e8 <__aeabi_ui2d>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4903      	ldr	r1, [pc, #12]	; (8004298 <set_air_minus_ext+0x24>)
 800428c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	2001e430 	.word	0x2001e430

0800429c <get_air_minus_ext>:

uint8_t get_air_minus_ext(){
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
	return SIM0_Y.AIR_minus_closed;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <get_air_minus_ext+0x1c>)
 80042a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	f7fc fc6f 	bl	8000b8c <__aeabi_d2uiz>
 80042ae:	4603      	mov	r3, r0
 80042b0:	b2db      	uxtb	r3, r3
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2001d638 	.word	0x2001d638

080042bc <set_precharge_ext>:

void set_precharge_ext(uint8_t closed){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnablePrecharge = closed;
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fc f90d 	bl	80004e8 <__aeabi_ui2d>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4903      	ldr	r1, [pc, #12]	; (80042e0 <set_precharge_ext+0x24>)
 80042d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	2001e430 	.word	0x2001e430

080042e4 <get_precharge_ext>:

uint8_t get_precharge_ext(){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
	return SIM0_Y.precharge_closed;
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <get_precharge_ext+0x1c>)
 80042ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f7fc fc4b 	bl	8000b8c <__aeabi_d2uiz>
 80042f6:	4603      	mov	r3, r0
 80042f8:	b2db      	uxtb	r3, r3

}
 80042fa:	4618      	mov	r0, r3
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	2001d638 	.word	0x2001d638

08004304 <get_ams_error_latched_ext>:

void set_ams_error_ext(uint8_t raise_error){
	SIM0_U.AMS_error = raise_error;
}

uint8_t get_ams_error_latched_ext(){
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
	return SIM0_Y.AMS_error_latched;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <get_ams_error_latched_ext+0x14>)
 800430a:	781b      	ldrb	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	2001d638 	.word	0x2001d638

0800431c <get_imd_error_latched_ext>:

void set_imd_error_ext(uint8_t raise_error){
	SIM0_U.IMD_error = raise_error;
}

uint8_t get_imd_error_latched_ext(){
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_error_latched;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <get_imd_error_latched_ext+0x14>)
 8004322:	785b      	ldrb	r3, [r3, #1]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	2001d638 	.word	0x2001d638

08004334 <get_sc_probe_ext>:

uint8_t get_sc_probe_ext(){
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
	return SIM0_Y.SC_probe;
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <get_sc_probe_ext+0x1c>)
 800433a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f7fc fc23 	bl	8000b8c <__aeabi_d2uiz>
 8004346:	4603      	mov	r3, r0
 8004348:	b2db      	uxtb	r3, r3
}
 800434a:	4618      	mov	r0, r3
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	2001d638 	.word	0x2001d638

08004354 <get_imd_ok_ext>:

uint8_t get_imd_ok_ext(){
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
	return SIM0_Y.IMD_ok;
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <get_imd_ok_ext+0x20>)
 800435a:	f503 635f 	add.w	r3, r3, #3568	; 0xdf0
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	f7fc fc11 	bl	8000b8c <__aeabi_d2uiz>
 800436a:	4603      	mov	r3, r0
 800436c:	b2db      	uxtb	r3, r3
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2001d638 	.word	0x2001d638

08004378 <set_charger_voltage_limit_ext>:

void set_charger_voltage_limit_ext(float level){
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	ed87 0a01 	vstr	s0, [r7, #4]
	SIM0_U.VoltageLimit = level;
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc f8d2 	bl	800052c <__aeabi_f2d>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4903      	ldr	r1, [pc, #12]	; (800439c <set_charger_voltage_limit_ext+0x24>)
 800438e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2001e430 	.word	0x2001e430

080043a0 <set_charger_current_limit_ext>:

void set_charger_current_limit_ext(float level){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	ed87 0a01 	vstr	s0, [r7, #4]
	SIM0_U.CurrentLimit = level;
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fc f8be 	bl	800052c <__aeabi_f2d>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4903      	ldr	r1, [pc, #12]	; (80043c4 <set_charger_current_limit_ext+0x24>)
 80043b6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2001e430 	.word	0x2001e430

080043c8 <set_enable_charge_ext>:

void set_enable_charge_ext(uint8_t enable){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
	SIM0_U.EnableCharge = enable;
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc f887 	bl	80004e8 <__aeabi_ui2d>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4903      	ldr	r1, [pc, #12]	; (80043ec <set_enable_charge_ext+0x24>)
 80043e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	2001e430 	.word	0x2001e430

080043f0 <set_balance_ext>:

void set_balance_ext(uint8_t closed, uint8_t index, void* settings){
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	603a      	str	r2, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
 80043fc:	460b      	mov	r3, r1
 80043fe:	71bb      	strb	r3, [r7, #6]
	SIM0_U.BalanceOut[index] = closed;
 8004400:	79bc      	ldrb	r4, [r7, #6]
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc f86f 	bl	80004e8 <__aeabi_ui2d>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4805      	ldr	r0, [pc, #20]	; (8004424 <set_balance_ext+0x34>)
 8004410:	f104 010d 	add.w	r1, r4, #13
 8004414:	00c9      	lsls	r1, r1, #3
 8004416:	4401      	add	r1, r0
 8004418:	e9c1 2300 	strd	r2, r3, [r1]

}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bd90      	pop	{r4, r7, pc}
 8004424:	2001e430 	.word	0x2001e430

08004428 <pec15_calc>:
 * @param	The data used to calculate the PEC
 * @retval	The 16-bit PEC code
 */
uint16_t pec15_calc(uint8_t len, // Number of bytes that will be used to calculate a PEC
		uint8_t *data  // Array of data that will be used to calculate  a PEC
		) {
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	6039      	str	r1, [r7, #0]
 8004432:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;                    // initialize the PEC
 8004434:	2310      	movs	r3, #16
 8004436:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 8004438:	2300      	movs	r3, #0
 800443a:	737b      	strb	r3, [r7, #13]
 800443c:	e018      	b.n	8004470 <pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	09db      	lsrs	r3, r3, #7
 8004442:	b29a      	uxth	r2, r3
 8004444:	7b7b      	ldrb	r3, [r7, #13]
 8004446:	6839      	ldr	r1, [r7, #0]
 8004448:	440b      	add	r3, r1
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	4053      	eors	r3, r2
 8004450:	b29b      	uxth	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	b29a      	uxth	r2, r3
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	490b      	ldr	r1, [pc, #44]	; (800448c <pec15_calc+0x64>)
 8004460:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004464:	b29b      	uxth	r3, r3
 8004466:	4053      	eors	r3, r2
 8004468:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++)  // loops for each byte in data array
 800446a:	7b7b      	ldrb	r3, [r7, #13]
 800446c:	3301      	adds	r3, #1
 800446e:	737b      	strb	r3, [r7, #13]
 8004470:	7b7a      	ldrb	r2, [r7, #13]
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d3e2      	bcc.n	800443e <pec15_calc+0x16>
	}
	return (remainder * 2);  // The CRC15 has a 0 in the LSB so the remainder
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	b29b      	uxth	r3, r3
							 // must be multiplied by 2
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	0801aac4 	.word	0x0801aac4

08004490 <initialize_LTC>:
/*
 * @brief	Set the hspi which LTC uses
 * @param	The hspi to be used
 * @retval	None
 */
void initialize_LTC(SPI_HandleTypeDef *hspi) {
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	hltc = hspi;
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <initialize_LTC+0x1c>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2001b734 	.word	0x2001b734

080044b0 <LTC_CS_select>:

/*
 * @brief	Selects CS
 * @retval	None
 */
void LTC_CS_select(void) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 0);
 80044b4:	2200      	movs	r2, #0
 80044b6:	2110      	movs	r1, #16
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <LTC_CS_select+0x14>)
 80044ba:	f00d fee5 	bl	8012288 <HAL_GPIO_WritePin>
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40020800 	.word	0x40020800

080044c8 <LTC_CS_deselect>:

/*
 * @brief	Deselects CS
 * @retval	None
 */
void LTC_CS_deselect(void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_CS_GPIO_Port, LTC_CS_Pin, 1);
 80044cc:	2201      	movs	r2, #1
 80044ce:	2110      	movs	r1, #16
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <LTC_CS_deselect+0x14>)
 80044d2:	f00d fed9 	bl	8012288 <HAL_GPIO_WritePin>
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40020800 	.word	0x40020800

080044e0 <LTC_wake>:

/*
 * @brief	A helper function which interfaces with SPI. wakes the isoSPI port from sleep
 * @retval	LTC Status
 */
uint8_t LTC_wake() {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
	uint16_t pec;

	// This is the ADSTAT command. Chosen for no specific reason
	uint16_t command = 0b0000010101101000;
 80044e6:	f44f 63ad 	mov.w	r3, #1384	; 0x568
 80044ea:	80fb      	strh	r3, [r7, #6]

	// This is how one would pack the command, calculate the PEC, and the pack the contents.
	LTC_command_buffer[0] = command >> 8;
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <LTC_wake+0x60>)
 80044f6:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <LTC_wake+0x60>)
 80044fe:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004500:	490f      	ldr	r1, [pc, #60]	; (8004540 <LTC_wake+0x60>)
 8004502:	2002      	movs	r0, #2
 8004504:	f7ff ff90 	bl	8004428 <pec15_calc>
 8004508:	4603      	mov	r3, r0
 800450a:	80bb      	strh	r3, [r7, #4]
	LTC_command_buffer[2] = pec >> 8;
 800450c:	88bb      	ldrh	r3, [r7, #4]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <LTC_wake+0x60>)
 8004516:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8004518:	88bb      	ldrh	r3, [r7, #4]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <LTC_wake+0x60>)
 800451e:	70da      	strb	r2, [r3, #3]

	// Simply lock the CS before transmitting and/or receiving
	LTC_CS_select();
 8004520:	f7ff ffc6 	bl	80044b0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <LTC_wake+0x64>)
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	2300      	movs	r3, #0
 800452a:	2204      	movs	r2, #4
 800452c:	4904      	ldr	r1, [pc, #16]	; (8004540 <LTC_wake+0x60>)
 800452e:	f00e fbc4 	bl	8012cba <HAL_SPI_Transmit>
	LTC_CS_deselect();
 8004532:	f7ff ffc9 	bl	80044c8 <LTC_CS_deselect>

	return 1;
 8004536:	2301      	movs	r3, #1
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	2001b744 	.word	0x2001b744
 8004544:	2001b734 	.word	0x2001b734

08004548 <LTC_command>:
 * @brief	A helper function which interfaces with SPI.
 * @param	Wether or not to wake the isoSPI port first
 * @param	Which command to be sent
 * @retval	LTC Status
 */
uint8_t LTC_command(uint8_t wake, uint16_t command) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	460a      	mov	r2, r1
 8004552:	71fb      	strb	r3, [r7, #7]
 8004554:	4613      	mov	r3, r2
 8004556:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <LTC_command+0x24>
		if (!LTC_wake()) {
 800455e:	f7ff ffbf 	bl	80044e0 <LTC_wake>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <LTC_command+0x24>
			return 0;
 8004568:	2300      	movs	r3, #0
 800456a:	e025      	b.n	80045b8 <LTC_command+0x70>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 800456c:	88bb      	ldrh	r3, [r7, #4]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b2da      	uxtb	r2, r3
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <LTC_command+0x78>)
 8004576:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 8004578:	88bb      	ldrh	r3, [r7, #4]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <LTC_command+0x78>)
 800457e:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004580:	490f      	ldr	r1, [pc, #60]	; (80045c0 <LTC_command+0x78>)
 8004582:	2002      	movs	r0, #2
 8004584:	f7ff ff50 	bl	8004428 <pec15_calc>
 8004588:	4603      	mov	r3, r0
 800458a:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	b29b      	uxth	r3, r3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <LTC_command+0x78>)
 8004596:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <LTC_command+0x78>)
 800459e:	70da      	strb	r2, [r3, #3]

	LTC_CS_select();
 80045a0:	f7ff ff86 	bl	80044b0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <LTC_command+0x7c>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	2204      	movs	r2, #4
 80045ac:	4904      	ldr	r1, [pc, #16]	; (80045c0 <LTC_command+0x78>)
 80045ae:	f00e fb84 	bl	8012cba <HAL_SPI_Transmit>
	LTC_CS_deselect();
 80045b2:	f7ff ff89 	bl	80044c8 <LTC_CS_deselect>

	return 1;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2001b744 	.word	0x2001b744
 80045c4:	2001b734 	.word	0x2001b734

080045c8 <LTC_read_command>:
 * @brief	A helper function which interfaces with SPI. Puts received data in LTC_read_buffer
 * @param	Whether or not to wake the isoSPI port first
 * @param	Which command the received data corresponds to
 * @retval	LTC Status
 */
uint8_t LTC_read_command(uint8_t wake, uint16_t command) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	460a      	mov	r2, r1
 80045d2:	71fb      	strb	r3, [r7, #7]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80bb      	strh	r3, [r7, #4]
	uint16_t pec;

	if (wake) {
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <LTC_read_command+0x24>
		if (!LTC_wake()) {
 80045de:	f7ff ff7f 	bl	80044e0 <LTC_wake>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <LTC_read_command+0x24>
			return 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e042      	b.n	8004672 <LTC_read_command+0xaa>
		}
	}

	LTC_command_buffer[0] = command >> 8;
 80045ec:	88bb      	ldrh	r3, [r7, #4]
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <LTC_read_command+0xb4>)
 80045f6:	701a      	strb	r2, [r3, #0]
	LTC_command_buffer[1] = command;
 80045f8:	88bb      	ldrh	r3, [r7, #4]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b1f      	ldr	r3, [pc, #124]	; (800467c <LTC_read_command+0xb4>)
 80045fe:	705a      	strb	r2, [r3, #1]
	pec = pec15_calc(2, LTC_command_buffer);
 8004600:	491e      	ldr	r1, [pc, #120]	; (800467c <LTC_read_command+0xb4>)
 8004602:	2002      	movs	r0, #2
 8004604:	f7ff ff10 	bl	8004428 <pec15_calc>
 8004608:	4603      	mov	r3, r0
 800460a:	81fb      	strh	r3, [r7, #14]
	LTC_command_buffer[2] = pec >> 8;
 800460c:	89fb      	ldrh	r3, [r7, #14]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b29b      	uxth	r3, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <LTC_read_command+0xb4>)
 8004616:	709a      	strb	r2, [r3, #2]
	LTC_command_buffer[3] = pec;
 8004618:	89fb      	ldrh	r3, [r7, #14]
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <LTC_read_command+0xb4>)
 800461e:	70da      	strb	r2, [r3, #3]

	// We receive at the same instance
	LTC_CS_select();
 8004620:	f7ff ff46 	bl	80044b0 <LTC_CS_select>
	HAL_SPI_Transmit(hltc, LTC_command_buffer, 4, LTC_COM_TIMEOUT);
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <LTC_read_command+0xb8>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	2204      	movs	r2, #4
 800462c:	4913      	ldr	r1, [pc, #76]	; (800467c <LTC_read_command+0xb4>)
 800462e:	f00e fb44 	bl	8012cba <HAL_SPI_Transmit>
	HAL_SPI_Receive(hltc, LTC_read_buffer, 10, LTC_COM_TIMEOUT);
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <LTC_read_command+0xb8>)
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	220a      	movs	r2, #10
 800463a:	4912      	ldr	r1, [pc, #72]	; (8004684 <LTC_read_command+0xbc>)
 800463c:	f00e fc79 	bl	8012f32 <HAL_SPI_Receive>
	LTC_CS_deselect();
 8004640:	f7ff ff42 	bl	80044c8 <LTC_CS_deselect>

	// We should make sure that the data is correct
	pec = pec15_calc(8, LTC_read_buffer);
 8004644:	490f      	ldr	r1, [pc, #60]	; (8004684 <LTC_read_command+0xbc>)
 8004646:	2008      	movs	r0, #8
 8004648:	f7ff feee 	bl	8004428 <pec15_calc>
 800464c:	4603      	mov	r3, r0
 800464e:	81fb      	strh	r3, [r7, #14]

	// If there is a discrepancy we return an error code
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8004650:	89fb      	ldrh	r3, [r7, #14]
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	b29b      	uxth	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <LTC_read_command+0xbc>)
 800465a:	7a12      	ldrb	r2, [r2, #8]
 800465c:	4293      	cmp	r3, r2
 800465e:	d005      	beq.n	800466c <LTC_read_command+0xa4>
			&& (((pec >> 0) & 0xff) != LTC_read_buffer[9]))) {
 8004660:	89fb      	ldrh	r3, [r7, #14]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4a07      	ldr	r2, [pc, #28]	; (8004684 <LTC_read_command+0xbc>)
 8004666:	7a52      	ldrb	r2, [r2, #9]
	if (!((((pec >> 8) & 0xff) != LTC_read_buffer[8])
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <LTC_read_command+0xa8>
		return 0;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <LTC_read_command+0xaa>
	}

	return 1;
 8004670:	2301      	movs	r3, #1
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2001b744 	.word	0x2001b744
 8004680:	2001b734 	.word	0x2001b734
 8004684:	2001b738 	.word	0x2001b738

08004688 <LTC_acquire_data>:
 * @brief	The function which acquires all of the cell temperatures and voltages, and places them in cell_voltages and cell_temperatures
 * @param	Whether or not to wake the isoSPI port beforehand
 * @param	LTC_ccv[n] is high if the n:th slave has given valid data
 * @retval	LTC Status
 */
uint8_t LTC_acquire_data(uint8_t wake) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
	uint16_t all_read; /* LTC_ccv[n] might only be high if slave n was read (PEC correct, among other things) */
	uint16_t all_zeros; /* LTC_ccv[n] might only be high if the bits are not all zero, as this would constitute a zero voltage reference (or zeroed/floating cell voltages) */
	uint16_t all_ones; /* LTC_ccv[n] might only be high if the bits are not all ones, as this is indicative of the message being corrupted */
	uint16_t all_good; /* LTC_ccv[n] is high if this is high for slave n */

	LTC_ccv = 0;
 8004692:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <LTC_acquire_data+0x150>)
 8004694:	2200      	movs	r2, #0
 8004696:	801a      	strh	r2, [r3, #0]

	/* ADCV, MD = 10, PUP = 1, DCP = 0, CH = 000 */
	command = 0b0000001101110000;
 8004698:	f44f 735c 	mov.w	r3, #880	; 0x370
 800469c:	60fb      	str	r3, [r7, #12]

	LTC_command(wake, command);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff4e 	bl	8004548 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80046ac:	2002      	movs	r0, #2
 80046ae:	f00b fe4b 	bl	8010348 <HAL_Delay>

	/* ADAX : MD = 10, PUP = 1, CH = 000 */
	command = 0b0000010101100000;
 80046b2:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80046b6:	60fb      	str	r3, [r7, #12]

	LTC_command(0, command);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	2000      	movs	r0, #0
 80046c0:	f7ff ff42 	bl	8004548 <LTC_command>

	//osDelay(configTICK_RATE_HZ * 0.02); // ~2 ms
	HAL_Delay(2);
 80046c4:	2002      	movs	r0, #2
 80046c6:	f00b fe3f 	bl	8010348 <HAL_Delay>

	// First we fill the cell_voltage buffer with the integer values
	p = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24

	for (k = 0; k < 12; k++) { // 12 segments
 80046ce:	2300      	movs	r3, #0
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	e074      	b.n	80047be <LTC_acquire_data+0x136>
		all_read = 1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	82fb      	strh	r3, [r7, #22]
		all_zeros = 1;
 80046d8:	2301      	movs	r3, #1
 80046da:	82bb      	strh	r3, [r7, #20]
		all_read = 1;
 80046dc:	2301      	movs	r3, #1
 80046de:	82fb      	strh	r3, [r7, #22]
		all_good = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	817b      	strh	r3, [r7, #10]

		for (i = 0; i < 6; i++) {
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e049      	b.n	800477e <LTC_acquire_data+0xf6>
			// We use the RDCVA command and increment it every pass to get RDCVB, RDCVC .. RDAUXB
			command = 0b1000000000000100 | (cellstack_address_map(k) << 11);
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	02db      	lsls	r3, r3, #11
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
			command += 2 * i;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

			all_read &= LTC_read_command(0, command);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	b29b      	uxth	r3, r3
 8004706:	4619      	mov	r1, r3
 8004708:	2000      	movs	r0, #0
 800470a:	f7ff ff5d 	bl	80045c8 <LTC_read_command>
 800470e:	4603      	mov	r3, r0
 8004710:	b29a      	uxth	r2, r3
 8004712:	8afb      	ldrh	r3, [r7, #22]
 8004714:	4013      	ands	r3, r2
 8004716:	82fb      	strh	r3, [r7, #22]

			for (j = 0; j < 3; j++) {
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e029      	b.n	8004772 <LTC_acquire_data+0xea>
				LTC_data[p] = LTC_read_buffer[2 * j]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4a2e      	ldr	r2, [pc, #184]	; (80047dc <LTC_acquire_data+0x154>)
 8004724:	5cd3      	ldrb	r3, [r2, r3]
 8004726:	b21a      	sxth	r2, r3
						| (LTC_read_buffer[2 * j + 1] << 8);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	3301      	adds	r3, #1
 800472e:	492b      	ldr	r1, [pc, #172]	; (80047dc <LTC_acquire_data+0x154>)
 8004730:	5ccb      	ldrb	r3, [r1, r3]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	b21b      	sxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b21b      	sxth	r3, r3
 800473a:	b299      	uxth	r1, r3
				LTC_data[p] = LTC_read_buffer[2 * j]
 800473c:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <LTC_acquire_data+0x158>)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				all_zeros &= (LTC_data[p] == 0);
 8004744:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <LTC_acquire_data+0x158>)
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	b21a      	sxth	r2, r3
 8004758:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800475c:	4013      	ands	r3, r2
 800475e:	b21b      	sxth	r3, r3
 8004760:	82bb      	strh	r3, [r7, #20]
				all_ones &= (LTC_data[p] == -1);
 8004762:	2300      	movs	r3, #0
 8004764:	827b      	strh	r3, [r7, #18]

				p++;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	3301      	adds	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
			for (j = 0; j < 3; j++) {
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3301      	adds	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b02      	cmp	r3, #2
 8004776:	ddd2      	ble.n	800471e <LTC_acquire_data+0x96>
		for (i = 0; i < 6; i++) {
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b05      	cmp	r3, #5
 8004782:	ddb2      	ble.n	80046ea <LTC_acquire_data+0x62>
			}
		}

		all_good = (all_read && !all_zeros && !all_ones);
 8004784:	8afb      	ldrh	r3, [r7, #22]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <LTC_acquire_data+0x112>
 800478a:	8abb      	ldrh	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <LTC_acquire_data+0x112>
 8004790:	8a7b      	ldrh	r3, [r7, #18]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <LTC_acquire_data+0x112>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <LTC_acquire_data+0x114>
 800479a:	2300      	movs	r3, #0
 800479c:	817b      	strh	r3, [r7, #10]
		LTC_ccv |= (all_good << k);
 800479e:	897a      	ldrh	r2, [r7, #10]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	b21a      	sxth	r2, r3
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <LTC_acquire_data+0x150>)
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b21b      	sxth	r3, r3
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <LTC_acquire_data+0x150>)
 80047b6:	801a      	strh	r2, [r3, #0]
	for (k = 0; k < 12; k++) { // 12 segments
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3301      	adds	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b0b      	cmp	r3, #11
 80047c2:	dd87      	ble.n	80046d4 <LTC_acquire_data+0x4c>
	}

	LTC_make_voltages();
 80047c4:	f000 f810 	bl	80047e8 <LTC_make_voltages>
	LTC_make_temperatures();
 80047c8:	f000 f85a 	bl	8004880 <LTC_make_temperatures>

	return 1;
 80047cc:	2301      	movs	r3, #1
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	; 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	2001b724 	.word	0x2001b724
 80047dc:	2001b738 	.word	0x2001b738
 80047e0:	2001b940 	.word	0x2001b940
 80047e4:	00000000 	.word	0x00000000

080047e8 <LTC_make_voltages>:
#define cellstack_voltage_count(cellstack) (11 - (cellstack % 2))
/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_voltages
 * @retval	1 if successful
 */
uint8_t LTC_make_voltages(void) {
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	p = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80047f2:	2300      	movs	r3, #0
 80047f4:	80fb      	strh	r3, [r7, #6]
 80047f6:	e032      	b.n	800485e <LTC_make_voltages+0x76>
		K = cellstack_voltage_count(cellstack);
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f1c3 030b 	rsb	r3, r3, #11
 8004804:	803b      	strh	r3, [r7, #0]
		for (k = 0; k < K; k++) {
 8004806:	2300      	movs	r3, #0
 8004808:	80bb      	strh	r3, [r7, #4]
 800480a:	e021      	b.n	8004850 <LTC_make_voltages+0x68>
			LTC_voltages[p] = 0.0001 * LTC_data[18 * cellstack + k];
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	461a      	mov	r2, r3
 8004818:	88bb      	ldrh	r3, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <LTC_make_voltages+0x90>)
 800481e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fb fe70 	bl	8000508 <__aeabi_i2d>
 8004828:	a311      	add	r3, pc, #68	; (adr r3, 8004870 <LTC_make_voltages+0x88>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f7fb fed5 	bl	80005dc <__aeabi_dmul>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	887c      	ldrh	r4, [r7, #2]
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	f7fc f9c6 	bl	8000bcc <__aeabi_d2f>
 8004840:	4602      	mov	r2, r0
 8004842:	490e      	ldr	r1, [pc, #56]	; (800487c <LTC_make_voltages+0x94>)
 8004844:	00a3      	lsls	r3, r4, #2
 8004846:	440b      	add	r3, r1
 8004848:	601a      	str	r2, [r3, #0]
		for (k = 0; k < K; k++) {
 800484a:	88bb      	ldrh	r3, [r7, #4]
 800484c:	3301      	adds	r3, #1
 800484e:	80bb      	strh	r3, [r7, #4]
 8004850:	88ba      	ldrh	r2, [r7, #4]
 8004852:	883b      	ldrh	r3, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d3d9      	bcc.n	800480c <LTC_make_voltages+0x24>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	3301      	adds	r3, #1
 800485c:	80fb      	strh	r3, [r7, #6]
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2b0b      	cmp	r3, #11
 8004862:	d9c9      	bls.n	80047f8 <LTC_make_voltages+0x10>
		}
	}

	return 1;
 8004864:	2301      	movs	r3, #1
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop
 8004870:	eb1c432d 	.word	0xeb1c432d
 8004874:	3f1a36e2 	.word	0x3f1a36e2
 8004878:	2001b940 	.word	0x2001b940
 800487c:	2001b748 	.word	0x2001b748

08004880 <LTC_make_temperatures>:

/*
 * @brief	A function which takes data from LTC_data and translates it into LTC_temperatures
 * @retval	1 if successful
 */
uint8_t LTC_make_temperatures(void) {
 8004880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
	uint16_t cellstack, K, k, p;

	float beta = 3500;
 8004888:	4b61      	ldr	r3, [pc, #388]	; (8004a10 <LTC_make_temperatures+0x190>)
 800488a:	613b      	str	r3, [r7, #16]
	float temp = 25 + 273.15;
 800488c:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <LTC_make_temperatures+0x194>)
 800488e:	60fb      	str	r3, [r7, #12]
	float R0 = 10000 * exp(-beta / temp);
 8004890:	edd7 7a04 	vldr	s15, [r7, #16]
 8004894:	eeb1 7a67 	vneg.f32	s14, s15
 8004898:	edd7 7a03 	vldr	s15, [r7, #12]
 800489c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048a0:	ee16 0a90 	vmov	r0, s13
 80048a4:	f7fb fe42 	bl	800052c <__aeabi_f2d>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	ec43 2b10 	vmov	d0, r2, r3
 80048b0:	f015 fa7a 	bl	8019da8 <exp>
 80048b4:	ec51 0b10 	vmov	r0, r1, d0
 80048b8:	a351      	add	r3, pc, #324	; (adr r3, 8004a00 <LTC_make_temperatures+0x180>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fe8d 	bl	80005dc <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	f7fc f97f 	bl	8000bcc <__aeabi_d2f>
 80048ce:	4603      	mov	r3, r0
 80048d0:	60bb      	str	r3, [r7, #8]
	float R = 10000;
 80048d2:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <LTC_make_temperatures+0x198>)
 80048d4:	607b      	str	r3, [r7, #4]

	p = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	807b      	strh	r3, [r7, #2]

	for (cellstack = 0; cellstack < 12; cellstack++) {
 80048da:	2300      	movs	r3, #0
 80048dc:	82fb      	strh	r3, [r7, #22]
 80048de:	e082      	b.n	80049e6 <LTC_make_temperatures+0x166>
		K = 5;
 80048e0:	2305      	movs	r3, #5
 80048e2:	803b      	strh	r3, [r7, #0]

		for (k = 0; k < K; k++) {
 80048e4:	2300      	movs	r3, #0
 80048e6:	82bb      	strh	r3, [r7, #20]
 80048e8:	e076      	b.n	80049d8 <LTC_make_temperatures+0x158>
			LTC_temperatures[p] = beta
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80048ea:	6938      	ldr	r0, [r7, #16]
 80048ec:	f7fb fe1e 	bl	800052c <__aeabi_f2d>
 80048f0:	4604      	mov	r4, r0
 80048f2:	460d      	mov	r5, r1
 80048f4:	8afa      	ldrh	r2, [r7, #22]
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	f103 020c 	add.w	r2, r3, #12
 8004902:	8abb      	ldrh	r3, [r7, #20]
 8004904:	4413      	add	r3, r2
 8004906:	4a45      	ldr	r2, [pc, #276]	; (8004a1c <LTC_make_temperatures+0x19c>)
 8004908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004914:	edd7 7a01 	vldr	s15, [r7, #4]
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	ee17 0a90 	vmov	r0, s15
 8004920:	f7fb fe04 	bl	800052c <__aeabi_f2d>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	ec43 2b10 	vmov	d0, r2, r3
 800492c:	f015 fa8c 	bl	8019e48 <log>
 8004930:	ec59 8b10 	vmov	r8, r9, d0
							- log(
									-R0
 8004934:	edd7 7a02 	vldr	s15, [r7, #8]
 8004938:	eeb1 7a67 	vneg.f32	s14, s15
											* (LTC_data[18 * cellstack + 12 + k]
 800493c:	8afa      	ldrh	r2, [r7, #22]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	f103 020c 	add.w	r2, r3, #12
 800494a:	8abb      	ldrh	r3, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	4a33      	ldr	r2, [pc, #204]	; (8004a1c <LTC_make_temperatures+0x19c>)
 8004950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004954:	4619      	mov	r1, r3
													- LTC_data[18 * cellstack
 8004956:	8afa      	ldrh	r2, [r7, #22]
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
															+ 12 + K])))
 8004960:	f103 020c 	add.w	r2, r3, #12
 8004964:	883b      	ldrh	r3, [r7, #0]
 8004966:	4413      	add	r3, r2
													- LTC_data[18 * cellstack
 8004968:	4a2c      	ldr	r2, [pc, #176]	; (8004a1c <LTC_make_temperatures+0x19c>)
 800496a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496e:	1acb      	subs	r3, r1, r3
											* (LTC_data[18 * cellstack + 12 + k]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004978:	ee67 7a27 	vmul.f32	s15, s14, s15
							- log(
 800497c:	ee17 0a90 	vmov	r0, s15
 8004980:	f7fb fdd4 	bl	800052c <__aeabi_f2d>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	ec43 2b10 	vmov	d0, r2, r3
 800498c:	f015 fa5c 	bl	8019e48 <log>
 8004990:	ec53 2b10 	vmov	r2, r3, d0
 8004994:	4640      	mov	r0, r8
 8004996:	4649      	mov	r1, r9
 8004998:	f7fb fc68 	bl	800026c <__aeabi_dsub>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
					/ (log(R * LTC_data[18 * cellstack + 12 + k])
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fb ff44 	bl	8000830 <__aeabi_ddiv>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
					- 273.15;
 80049b0:	a315      	add	r3, pc, #84	; (adr r3, 8004a08 <LTC_make_temperatures+0x188>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fc59 	bl	800026c <__aeabi_dsub>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
			LTC_temperatures[p] = beta
 80049be:	887c      	ldrh	r4, [r7, #2]
					- 273.15;
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	f7fc f902 	bl	8000bcc <__aeabi_d2f>
 80049c8:	4602      	mov	r2, r0
			LTC_temperatures[p] = beta
 80049ca:	4915      	ldr	r1, [pc, #84]	; (8004a20 <LTC_make_temperatures+0x1a0>)
 80049cc:	00a3      	lsls	r3, r4, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	601a      	str	r2, [r3, #0]
		for (k = 0; k < K; k++) {
 80049d2:	8abb      	ldrh	r3, [r7, #20]
 80049d4:	3301      	adds	r3, #1
 80049d6:	82bb      	strh	r3, [r7, #20]
 80049d8:	8aba      	ldrh	r2, [r7, #20]
 80049da:	883b      	ldrh	r3, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d384      	bcc.n	80048ea <LTC_make_temperatures+0x6a>
	for (cellstack = 0; cellstack < 12; cellstack++) {
 80049e0:	8afb      	ldrh	r3, [r7, #22]
 80049e2:	3301      	adds	r3, #1
 80049e4:	82fb      	strh	r3, [r7, #22]
 80049e6:	8afb      	ldrh	r3, [r7, #22]
 80049e8:	2b0b      	cmp	r3, #11
 80049ea:	f67f af79 	bls.w	80048e0 <LTC_make_temperatures+0x60>

		}
	}

	return 1;
 80049ee:	2301      	movs	r3, #1
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049fa:	bf00      	nop
 80049fc:	f3af 8000 	nop.w
 8004a00:	00000000 	.word	0x00000000
 8004a04:	40c38800 	.word	0x40c38800
 8004a08:	66666666 	.word	0x66666666
 8004a0c:	40711266 	.word	0x40711266
 8004a10:	455ac000 	.word	0x455ac000
 8004a14:	43951333 	.word	0x43951333
 8004a18:	461c4000 	.word	0x461c4000
 8004a1c:	2001b940 	.word	0x2001b940
 8004a20:	2001baf0 	.word	0x2001baf0

08004a24 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <MX_SPI2_Init+0x68>)
 8004a2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a58:	2220      	movs	r2, #32
 8004a5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a70:	220a      	movs	r2, #10
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a74:	4804      	ldr	r0, [pc, #16]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a76:	f00e f897 	bl	8012ba8 <HAL_SPI_Init>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004a80:	f7ff fbce 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	2001bbe0 	.word	0x2001bbe0
 8004a8c:	40003800 	.word	0x40003800

08004a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <HAL_SPI_MspInit+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d14a      	bne.n	8004b48 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a26      	ldr	r2, [pc, #152]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <HAL_SPI_MspInit+0xc4>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b06:	230c      	movs	r3, #12
 8004b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b12:	2303      	movs	r3, #3
 8004b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b16:	2305      	movs	r3, #5
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	4619      	mov	r1, r3
 8004b20:	480d      	ldr	r0, [pc, #52]	; (8004b58 <HAL_SPI_MspInit+0xc8>)
 8004b22:	f00d fa15 	bl	8011f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b34:	2303      	movs	r3, #3
 8004b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b38:	2305      	movs	r3, #5
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	4619      	mov	r1, r3
 8004b42:	4806      	ldr	r0, [pc, #24]	; (8004b5c <HAL_SPI_MspInit+0xcc>)
 8004b44:	f00d fa04 	bl	8011f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40020800 	.word	0x40020800
 8004b5c:	40020400 	.word	0x40020400

08004b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_MspInit+0x54>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <HAL_MspInit+0x54>)
 8004b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b74:	6453      	str	r3, [r2, #68]	; 0x44
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_MspInit+0x54>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_MspInit+0x54>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <HAL_MspInit+0x54>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_MspInit+0x54>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	210f      	movs	r1, #15
 8004ba2:	f06f 0001 	mvn.w	r0, #1
 8004ba6:	f00c fe39 	bl	801181c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	; 0x30
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	2032      	movs	r0, #50	; 0x32
 8004bce:	f00c fe25 	bl	801181c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004bd2:	2032      	movs	r0, #50	; 0x32
 8004bd4:	f00c fe3e 	bl	8011854 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <HAL_InitTick+0xa4>)
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_InitTick+0xa4>)
 8004be2:	f043 0308 	orr.w	r3, r3, #8
 8004be6:	6413      	str	r3, [r2, #64]	; 0x40
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <HAL_InitTick+0xa4>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bf4:	f107 0210 	add.w	r2, r7, #16
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f00d ffa0 	bl	8012b44 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004c04:	f00d ff8a 	bl	8012b1c <HAL_RCC_GetPCLK1Freq>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <HAL_InitTick+0xa8>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0c9b      	lsrs	r3, r3, #18
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_InitTick+0xac>)
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <HAL_InitTick+0xb0>)
 8004c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <HAL_InitTick+0xac>)
 8004c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c28:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <HAL_InitTick+0xac>)
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_InitTick+0xac>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_InitTick+0xac>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8004c3c:	4809      	ldr	r0, [pc, #36]	; (8004c64 <HAL_InitTick+0xac>)
 8004c3e:	f00e fd5b 	bl	80136f8 <HAL_TIM_Base_Init>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8004c48:	4806      	ldr	r0, [pc, #24]	; (8004c64 <HAL_InitTick+0xac>)
 8004c4a:	f00e fe0d 	bl	8013868 <HAL_TIM_Base_Start_IT>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	e000      	b.n	8004c54 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3730      	adds	r7, #48	; 0x30
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	431bde83 	.word	0x431bde83
 8004c64:	2001bc38 	.word	0x2001bc38
 8004c68:	40000c00 	.word	0x40000c00

08004c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c70:	e7fe      	b.n	8004c70 <NMI_Handler+0x4>

08004c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c76:	e7fe      	b.n	8004c76 <HardFault_Handler+0x4>

08004c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c7c:	e7fe      	b.n	8004c7c <MemManage_Handler+0x4>

08004c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c82:	e7fe      	b.n	8004c82 <BusFault_Handler+0x4>

08004c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c88:	e7fe      	b.n	8004c88 <UsageFault_Handler+0x4>

08004c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <ADC_IRQHandler+0x10>)
 8004c9e:	f00b fbba 	bl	8010416 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2001b5f0 	.word	0x2001b5f0

08004cac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004cb0:	4802      	ldr	r0, [pc, #8]	; (8004cbc <CAN1_TX_IRQHandler+0x10>)
 8004cb2:	f00c fad6 	bl	8011262 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	2001b6c0 	.word	0x2001b6c0

08004cc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <CAN1_RX0_IRQHandler+0x10>)
 8004cc6:	f00c facc 	bl	8011262 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	2001b6c0 	.word	0x2001b6c0

08004cd4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004cd8:	4802      	ldr	r0, [pc, #8]	; (8004ce4 <CAN1_RX1_IRQHandler+0x10>)
 8004cda:	f00c fac2 	bl	8011262 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2001b6c0 	.word	0x2001b6c0

08004ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004cec:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <TIM2_IRQHandler+0x10>)
 8004cee:	f00f f9ab 	bl	8014048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2001bd10 	.word	0x2001bd10

08004cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d00:	4802      	ldr	r0, [pc, #8]	; (8004d0c <TIM3_IRQHandler+0x10>)
 8004d02:	f00f f9a1 	bl	8014048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	2001bc80 	.word	0x2001bc80

08004d10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004d14:	4802      	ldr	r0, [pc, #8]	; (8004d20 <TIM5_IRQHandler+0x10>)
 8004d16:	f00f f997 	bl	8014048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2001bc38 	.word	0x2001bc38

08004d24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d28:	4802      	ldr	r0, [pc, #8]	; (8004d34 <DMA2_Stream0_IRQHandler+0x10>)
 8004d2a:	f00c fea7 	bl	8011a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	2001b638 	.word	0x2001b638

08004d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <SystemInit+0x20>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <SystemInit+0x20>)
 8004d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b096      	sub	sp, #88	; 0x58
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
 8004d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	611a      	str	r2, [r3, #16]
 8004d8a:	615a      	str	r2, [r3, #20]
 8004d8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	2220      	movs	r2, #32
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f014 fee7 	bl	8019b68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d9a:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004d9c:	4a3e      	ldr	r2, [pc, #248]	; (8004e98 <MX_TIM1_Init+0x13c>)
 8004d9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004da0:	4b3c      	ldr	r3, [pc, #240]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da6:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004db4:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dc0:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004dc6:	4833      	ldr	r0, [pc, #204]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004dc8:	f00e fc96 	bl	80136f8 <HAL_TIM_Base_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004dd2:	f7ff fa25 	bl	8004220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ddc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004de0:	4619      	mov	r1, r3
 8004de2:	482c      	ldr	r0, [pc, #176]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004de4:	f00f fb96 	bl	8014514 <HAL_TIM_ConfigClockSource>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004dee:	f7ff fa17 	bl	8004220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004df2:	4828      	ldr	r0, [pc, #160]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004df4:	f00e fda8 	bl	8013948 <HAL_TIM_PWM_Init>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004dfe:	f7ff fa0f 	bl	8004220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4820      	ldr	r0, [pc, #128]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004e12:	f010 f9b7 	bl	8015184 <HAL_TIMEx_MasterConfigSynchronization>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004e1c:	f7ff fa00 	bl	8004220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e20:	2360      	movs	r3, #96	; 0x60
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e34:	2300      	movs	r3, #0
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e40:	2208      	movs	r2, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	4813      	ldr	r0, [pc, #76]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004e46:	f00f faa3 	bl	8014390 <HAL_TIM_PWM_ConfigChannel>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004e50:	f7ff f9e6 	bl	8004220 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e72:	1d3b      	adds	r3, r7, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4807      	ldr	r0, [pc, #28]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004e78:	f010 fa00 	bl	801527c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004e82:	f7ff f9cd 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e86:	4803      	ldr	r0, [pc, #12]	; (8004e94 <MX_TIM1_Init+0x138>)
 8004e88:	f000 f974 	bl	8005174 <HAL_TIM_MspPostInit>

}
 8004e8c:	bf00      	nop
 8004e8e:	3758      	adds	r7, #88	; 0x58
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	2001bcc8 	.word	0x2001bcc8
 8004e98:	40010000 	.word	0x40010000

08004e9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b090      	sub	sp, #64	; 0x40
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004eb0:	f107 031c 	add.w	r3, r7, #28
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ec0:	f107 030c 	add.w	r3, r7, #12
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004ede:	4b3c      	ldr	r3, [pc, #240]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ee4:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004eea:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ef2:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ef8:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004efe:	4834      	ldr	r0, [pc, #208]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004f00:	f00e fbfa 	bl	80136f8 <HAL_TIM_Base_Init>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004f0a:	f7ff f989 	bl	8004220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f18:	4619      	mov	r1, r3
 8004f1a:	482d      	ldr	r0, [pc, #180]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004f1c:	f00f fafa 	bl	8014514 <HAL_TIM_ConfigClockSource>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004f26:	f7ff f97b 	bl	8004220 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004f2a:	4829      	ldr	r0, [pc, #164]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004f2c:	f00e fe2e 	bl	8013b8c <HAL_TIM_IC_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004f36:	f7ff f973 	bl	8004220 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004f3e:	2350      	movs	r3, #80	; 0x50
 8004f40:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004f46:	2300      	movs	r3, #0
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004f4e:	f107 031c 	add.w	r3, r7, #28
 8004f52:	4619      	mov	r1, r3
 8004f54:	481e      	ldr	r0, [pc, #120]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004f56:	f00f fba4 	bl	80146a2 <HAL_TIM_SlaveConfigSynchro>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8004f60:	f7ff f95e 	bl	8004220 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4814      	ldr	r0, [pc, #80]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004f7e:	f00f f96b 	bl	8014258 <HAL_TIM_IC_ConfigChannel>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004f88:	f7ff f94a 	bl	8004220 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004f90:	2302      	movs	r3, #2
 8004f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	2204      	movs	r2, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	480c      	ldr	r0, [pc, #48]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004f9e:	f00f f95b 	bl	8014258 <HAL_TIM_IC_ConfigChannel>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8004fa8:	f7ff f93a 	bl	8004220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fac:	2300      	movs	r3, #0
 8004fae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4805      	ldr	r0, [pc, #20]	; (8004fd0 <MX_TIM2_Init+0x134>)
 8004fba:	f010 f8e3 	bl	8015184 <HAL_TIMEx_MasterConfigSynchronization>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8004fc4:	f7ff f92c 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004fc8:	bf00      	nop
 8004fca:	3740      	adds	r7, #64	; 0x40
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	2001bd10 	.word	0x2001bd10

08004fd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe8:	463b      	mov	r3, r7
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <MX_TIM3_Init+0x94>)
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <MX_TIM3_Init+0x98>)
 8004ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ff6:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <MX_TIM3_Init+0x94>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <MX_TIM3_Init+0x94>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005002:	4b19      	ldr	r3, [pc, #100]	; (8005068 <MX_TIM3_Init+0x94>)
 8005004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800500a:	4b17      	ldr	r3, [pc, #92]	; (8005068 <MX_TIM3_Init+0x94>)
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005010:	4b15      	ldr	r3, [pc, #84]	; (8005068 <MX_TIM3_Init+0x94>)
 8005012:	2200      	movs	r2, #0
 8005014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005016:	4814      	ldr	r0, [pc, #80]	; (8005068 <MX_TIM3_Init+0x94>)
 8005018:	f00e fb6e 	bl	80136f8 <HAL_TIM_Base_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005022:	f7ff f8fd 	bl	8004220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800502a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800502c:	f107 0308 	add.w	r3, r7, #8
 8005030:	4619      	mov	r1, r3
 8005032:	480d      	ldr	r0, [pc, #52]	; (8005068 <MX_TIM3_Init+0x94>)
 8005034:	f00f fa6e 	bl	8014514 <HAL_TIM_ConfigClockSource>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800503e:	f7ff f8ef 	bl	8004220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005042:	2320      	movs	r3, #32
 8005044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800504a:	463b      	mov	r3, r7
 800504c:	4619      	mov	r1, r3
 800504e:	4806      	ldr	r0, [pc, #24]	; (8005068 <MX_TIM3_Init+0x94>)
 8005050:	f010 f898 	bl	8015184 <HAL_TIMEx_MasterConfigSynchronization>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800505a:	f7ff f8e1 	bl	8004220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	2001bc80 	.word	0x2001bc80
 800506c:	40000400 	.word	0x40000400

08005070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08c      	sub	sp, #48	; 0x30
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	f107 031c 	add.w	r3, r7, #28
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a35      	ldr	r2, [pc, #212]	; (8005164 <HAL_TIM_Base_MspInit+0xf4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	4b34      	ldr	r3, [pc, #208]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a33      	ldr	r2, [pc, #204]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b31      	ldr	r3, [pc, #196]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80050ae:	e055      	b.n	800515c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d135      	bne.n	8005126 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	4a29      	ldr	r2, [pc, #164]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ca:	4b27      	ldr	r3, [pc, #156]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	4a22      	ldr	r2, [pc, #136]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	6313      	str	r3, [r2, #48]	; 0x30
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f8:	2302      	movs	r3, #2
 80050fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005100:	2300      	movs	r3, #0
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005104:	2301      	movs	r3, #1
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 8005108:	f107 031c 	add.w	r3, r7, #28
 800510c:	4619      	mov	r1, r3
 800510e:	4817      	ldr	r0, [pc, #92]	; (800516c <HAL_TIM_Base_MspInit+0xfc>)
 8005110:	f00c ff1e 	bl	8011f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005114:	2200      	movs	r2, #0
 8005116:	2105      	movs	r1, #5
 8005118:	201c      	movs	r0, #28
 800511a:	f00c fb7f 	bl	801181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800511e:	201c      	movs	r0, #28
 8005120:	f00c fb98 	bl	8011854 <HAL_NVIC_EnableIRQ>
}
 8005124:	e01a      	b.n	800515c <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a11      	ldr	r2, [pc, #68]	; (8005170 <HAL_TIM_Base_MspInit+0x100>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d115      	bne.n	800515c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	6413      	str	r3, [r2, #64]	; 0x40
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_TIM_Base_MspInit+0xf8>)
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2105      	movs	r1, #5
 8005150:	201d      	movs	r0, #29
 8005152:	f00c fb63 	bl	801181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005156:	201d      	movs	r0, #29
 8005158:	f00c fb7c 	bl	8011854 <HAL_NVIC_EnableIRQ>
}
 800515c:	bf00      	nop
 800515e:	3730      	adds	r7, #48	; 0x30
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40010000 	.word	0x40010000
 8005168:	40023800 	.word	0x40023800
 800516c:	40020000 	.word	0x40020000
 8005170:	40000400 	.word	0x40000400

08005174 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800517c:	f107 030c 	add.w	r3, r7, #12
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_TIM_MspPostInit+0x68>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d11e      	bne.n	80051d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <HAL_TIM_MspPostInit+0x6c>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	4a10      	ldr	r2, [pc, #64]	; (80051e0 <HAL_TIM_MspPostInit+0x6c>)
 80051a0:	f043 0310 	orr.w	r3, r3, #16
 80051a4:	6313      	str	r3, [r2, #48]	; 0x30
 80051a6:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <HAL_TIM_MspPostInit+0x6c>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 80051b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051c4:	2301      	movs	r3, #1
 80051c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 80051c8:	f107 030c 	add.w	r3, r7, #12
 80051cc:	4619      	mov	r1, r3
 80051ce:	4805      	ldr	r0, [pc, #20]	; (80051e4 <HAL_TIM_MspPostInit+0x70>)
 80051d0:	f00c febe 	bl	8011f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80051d4:	bf00      	nop
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40021000 	.word	0x40021000

080051e8 <CSE_S_x>:
RT_MODEL_CSE_T *const CSE_M = &CSE_M_;
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);
void CSE_S_x(const real_T rtu_x[3], real_T rty_x_next[3])
{
 80051e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  real_T tmp;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3308      	adds	r3, #8
 80051f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3310      	adds	r3, #16
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb fb14 	bl	8000830 <__aeabi_ddiv>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  tmp = exp(-CSE_P.Ts / look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.tau, 12U));
 8005210:	4b3e      	ldr	r3, [pc, #248]	; (800530c <CSE_S_x+0x124>)
 8005212:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8005216:	4614      	mov	r4, r2
 8005218:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800521c:	220c      	movs	r2, #12
 800521e:	493c      	ldr	r1, [pc, #240]	; (8005310 <CSE_S_x+0x128>)
 8005220:	483c      	ldr	r0, [pc, #240]	; (8005314 <CSE_S_x+0x12c>)
 8005222:	ed97 0b04 	vldr	d0, [r7, #16]
 8005226:	f005 fb73 	bl	800a910 <look1_binlxpw>
 800522a:	ec53 2b10 	vmov	r2, r3, d0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fafd 	bl	8000830 <__aeabi_ddiv>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	ec43 2b17 	vmov	d7, r2, r3
 800523e:	eeb0 0a47 	vmov.f32	s0, s14
 8005242:	eef0 0a67 	vmov.f32	s1, s15
 8005246:	f014 fdaf 	bl	8019da8 <exp>
 800524a:	ed87 0b02 	vstr	d0, [r7, #8]
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 800524e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	4930      	ldr	r1, [pc, #192]	; (8005318 <CSE_S_x+0x130>)
 8005258:	f7fb f808 	bl	800026c <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	4b2d      	ldr	r3, [pc, #180]	; (800531c <CSE_S_x+0x134>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb f9b7 	bl	80005dc <__aeabi_dmul>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4614      	mov	r4, r2
 8005274:	461d      	mov	r5, r3
 8005276:	220c      	movs	r2, #12
 8005278:	4924      	ldr	r1, [pc, #144]	; (800530c <CSE_S_x+0x124>)
 800527a:	4826      	ldr	r0, [pc, #152]	; (8005314 <CSE_S_x+0x12c>)
 800527c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005280:	f005 fb46 	bl	800a910 <look1_binlxpw>
 8005284:	ec53 2b10 	vmov	r2, r3, d0
 8005288:	4620      	mov	r0, r4
 800528a:	4629      	mov	r1, r5
 800528c:	f7fb f9a6 	bl	80005dc <__aeabi_dmul>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
    CSE_P.soc, CSE_P.Rp, 12U) + tmp * rtu_x[0];
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800529e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052a2:	f7fb f99b 	bl	80005dc <__aeabi_dmul>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fa ffdf 	bl	8000270 <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
  rty_x_next[0] = (1.0 - tmp) * CSE_U.current * look1_binlxpw(rtb_Divide,
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	e9c1 2300 	strd	r2, r3, [r1]
  rty_x_next[1] = CSE_U.current * CSE_P.Ts + rtu_x[1];
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <CSE_S_x+0x134>)
 80052be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <CSE_S_x+0x124>)
 80052c4:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80052c8:	f7fb f988 	bl	80005dc <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4690      	mov	r8, r2
 80052d2:	4699      	mov	r9, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3308      	adds	r3, #8
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	f101 0408 	add.w	r4, r1, #8
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fa ffc3 	bl	8000270 <__adddf3>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	e9c4 2300 	strd	r2, r3, [r4]
  rty_x_next[2] = rtu_x[2];
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	f103 0110 	add.w	r1, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80052fe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005302:	bf00      	nop
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800530c:	20000088 	.word	0x20000088
 8005310:	20000230 	.word	0x20000230
 8005314:	200001c8 	.word	0x200001c8
 8005318:	3ff00000 	.word	0x3ff00000
 800531c:	2001bd68 	.word	0x2001bd68

08005320 <CSE_M_x>:

void CSE_M_x(const real_T rtu_x[3], real_T *rty_y)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  real_T rtb_Divide;
  rtb_Divide = rtu_x[1] / rtu_x[2];
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3308      	adds	r3, #8
 800532e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3310      	adds	r3, #16
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fb fa79 	bl	8000830 <__aeabi_ddiv>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	e9c7 2302 	strd	r2, r3, [r7, #8]
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 8005346:	4b19      	ldr	r3, [pc, #100]	; (80053ac <CSE_M_x+0x8c>)
 8005348:	e9d3 4500 	ldrd	r4, r5, [r3]
 800534c:	220c      	movs	r2, #12
 800534e:	4918      	ldr	r1, [pc, #96]	; (80053b0 <CSE_M_x+0x90>)
 8005350:	4818      	ldr	r0, [pc, #96]	; (80053b4 <CSE_M_x+0x94>)
 8005352:	ed97 0b02 	vldr	d0, [r7, #8]
 8005356:	f005 fadb 	bl	800a910 <look1_binlxpw>
 800535a:	ec53 2b10 	vmov	r2, r3, d0
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb f93b 	bl	80005dc <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4614      	mov	r4, r2
 800536c:	461d      	mov	r5, r3
            + look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.ocv, 12U)) + rtu_x[0];
 800536e:	220c      	movs	r2, #12
 8005370:	4911      	ldr	r1, [pc, #68]	; (80053b8 <CSE_M_x+0x98>)
 8005372:	4810      	ldr	r0, [pc, #64]	; (80053b4 <CSE_M_x+0x94>)
 8005374:	ed97 0b02 	vldr	d0, [r7, #8]
 8005378:	f005 faca 	bl	800a910 <look1_binlxpw>
 800537c:	ec53 2b10 	vmov	r2, r3, d0
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fa ff74 	bl	8000270 <__adddf3>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005396:	f7fa ff6b 	bl	8000270 <__adddf3>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
  *rty_y = (CSE_U.current * look1_binlxpw(rtb_Divide, CSE_P.soc, CSE_P.Rs, 12U)
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bdb0      	pop	{r4, r5, r7, pc}
 80053ac:	2001bd68 	.word	0x2001bd68
 80053b0:	200000f0 	.word	0x200000f0
 80053b4:	200001c8 	.word	0x200001c8
 80053b8:	20000160 	.word	0x20000160

080053bc <UKFCorrectorAdditive_getPredict>:

static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	ed2d 8b02 	vpush	{d8}
 80053c4:	b0e1      	sub	sp, #388	; 0x184
 80053c6:	af04      	add	r7, sp, #16
 80053c8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80053cc:	ed84 0b00 	vstr	d0, [r4]
 80053d0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80053d4:	6020      	str	r0, [r4, #0]
 80053d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80053da:	6001      	str	r1, [r0, #0]
 80053dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80053e0:	ed81 1b00 	vstr	d1, [r1]
 80053e4:	f107 0120 	add.w	r1, r7, #32
 80053e8:	ed81 2b00 	vstr	d2, [r1]
 80053ec:	f107 0118 	add.w	r1, r7, #24
 80053f0:	ed81 3b00 	vstr	d3, [r1]
 80053f4:	f107 0114 	add.w	r1, r7, #20
 80053f8:	600a      	str	r2, [r1, #0]
 80053fa:	f107 0210 	add.w	r2, r7, #16
 80053fe:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T tempY;
  real_T tempY_tmp;
  int32_T knt;
  int32_T knt_0;
  tempY_tmp = alpha * alpha;
 8005400:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005404:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800540c:	f7fb f8e6 	bl	80005dc <__aeabi_dmul>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005418:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = (kappa + 3.0) * tempY_tmp;
 800541c:	f107 0118 	add.w	r1, r7, #24
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	4b96      	ldr	r3, [pc, #600]	; (8005680 <UKFCorrectorAdditive_getPredict+0x2c4>)
 8005426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800542a:	f7fa ff21 	bl	8000270 <__adddf3>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fb f8cd 	bl	80005dc <__aeabi_dmul>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800544a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / tempY;
 800544e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f04f 0000 	mov.w	r0, #0
 800545a:	4989      	ldr	r1, [pc, #548]	; (8005680 <UKFCorrectorAdditive_getPredict+0x2c4>)
 800545c:	f7fb f9e8 	bl	8000830 <__aeabi_ddiv>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	f04f 0000 	mov.w	r0, #0
 8005468:	4986      	ldr	r1, [pc, #536]	; (8005684 <UKFCorrectorAdditive_getPredict+0x2c8>)
 800546a:	f7fa feff 	bl	800026c <__aeabi_dsub>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005476:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * tempY);
 800547a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800547e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	f7fa fef3 	bl	8000270 <__adddf3>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	f04f 0000 	mov.w	r0, #0
 8005492:	497c      	ldr	r1, [pc, #496]	; (8005684 <UKFCorrectorAdditive_getPredict+0x2c8>)
 8005494:	f7fb f9cc 	bl	8000830 <__aeabi_ddiv>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80054a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - tempY_tmp) + beta) + Wmean[0];
 80054a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f04f 0000 	mov.w	r0, #0
 80054b0:	4974      	ldr	r1, [pc, #464]	; (8005684 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80054b2:	f7fa fedb 	bl	800026c <__aeabi_dsub>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4610      	mov	r0, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	f107 0320 	add.w	r3, r7, #32
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fa fed3 	bl	8000270 <__adddf3>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f7fa fec9 	bl	8000270 <__adddf3>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80054e6:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 80054ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80054f2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80054f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 80054fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f7fb facf 	bl	8000aac <__aeabi_dcmpeq>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d154      	bne.n	80055be <UKFCorrectorAdditive_getPredict+0x202>
    real_T Wcov_0;
    *Sy = Wmean[0];
 8005514:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005520:	e9c1 2300 	strd	r2, r3, [r1]
    tempY_tmp = Wmean[0];
 8005524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005530:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8005534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005538:	e9d3 0100 	ldrd	r0, r1, [r3]
 800553c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f7fb f974 	bl	8000830 <__aeabi_ddiv>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005550:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= *Sy;
 8005554:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800555c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f7fb f964 	bl	8000830 <__aeabi_ddiv>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005570:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8005574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005578:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800557c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= tempY_tmp;
 8005580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005584:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fb f94e 	bl	8000830 <__aeabi_ddiv>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800559c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / *Sy;
 80055a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80055ac:	f7fb f940 	bl	8000830 <__aeabi_ddiv>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80055b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80055bc:	e006      	b.n	80055cc <UKFCorrectorAdditive_getPredict+0x210>
  } else {
    *Sy = 1.0;
 80055be:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <UKFCorrectorAdditive_getPredict+0x2c8>)
 80055c8:	e9c1 2300 	strd	r2, r3, [r1]
  }

  tempY = sqrt(tempY);
 80055cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055d0:	ed93 7b00 	vldr	d7, [r3]
 80055d4:	eeb0 0a47 	vmov.f32	s0, s14
 80055d8:	eef0 0a67 	vmov.f32	s1, s15
 80055dc:	f014 fc7c 	bl	8019ed8 <sqrt>
 80055e0:	eeb0 7a40 	vmov.f32	s14, s0
 80055e4:	eef0 7a60 	vmov.f32	s15, s1
 80055e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055ec:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80055f6:	e037      	b.n	8005668 <UKFCorrectorAdditive_getPredict+0x2ac>
    tempY_tmp = tempY * S[knt];
 80055f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	4413      	add	r3, r2
 8005606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800560a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f7fa ffe3 	bl	80005dc <__aeabi_dmul>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800561e:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = tempY_tmp;
 8005622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800562e:	00c9      	lsls	r1, r1, #3
 8005630:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005634:	4401      	add	r1, r0
 8005636:	39a0      	subs	r1, #160	; 0xa0
 8005638:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -tempY_tmp;
 800563c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005648:	3109      	adds	r1, #9
 800564a:	4690      	mov	r8, r2
 800564c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005650:	00cb      	lsls	r3, r1, #3
 8005652:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005656:	4413      	add	r3, r2
 8005658:	3ba0      	subs	r3, #160	; 0xa0
 800565a:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 800565e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005662:	3301      	adds	r3, #1
 8005664:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005668:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800566c:	2b08      	cmp	r3, #8
 800566e:	ddc3      	ble.n	80055f8 <UKFCorrectorAdditive_getPredict+0x23c>
  }

  knt_0 = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800567c:	e065      	b.n	800574a <UKFCorrectorAdditive_getPredict+0x38e>
 800567e:	bf00      	nop
 8005680:	40080000 	.word	0x40080000
 8005684:	3ff00000 	.word	0x3ff00000
    X2[knt_0] += X1[0];
 8005688:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005692:	4413      	add	r3, r2
 8005694:	3ba0      	subs	r3, #160	; 0xa0
 8005696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800569a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fde4 	bl	8000270 <__adddf3>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80056b0:	00c9      	lsls	r1, r1, #3
 80056b2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80056b6:	4401      	add	r1, r0
 80056b8:	39a0      	subs	r1, #160	; 0xa0
 80056ba:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 1] += X1[1];
 80056be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80056c2:	3301      	adds	r3, #1
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80056ca:	4413      	add	r3, r2
 80056cc:	3ba0      	subs	r3, #160	; 0xa0
 80056ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3308      	adds	r3, #8
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 80056e2:	3401      	adds	r4, #1
 80056e4:	f7fa fdc4 	bl	8000270 <__adddf3>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	00e1      	lsls	r1, r4, #3
 80056ee:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80056f2:	4401      	add	r1, r0
 80056f4:	39a0      	subs	r1, #160	; 0xa0
 80056f6:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt_0 + 2] += X1[2];
 80056fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80056fe:	3302      	adds	r3, #2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8005706:	4413      	add	r3, r2
 8005708:	3ba0      	subs	r3, #160	; 0xa0
 800570a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800570e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3310      	adds	r3, #16
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f8d7 4168 	ldr.w	r4, [r7, #360]	; 0x168
 800571e:	3402      	adds	r4, #2
 8005720:	f7fa fda6 	bl	8000270 <__adddf3>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	00e1      	lsls	r1, r4, #3
 800572a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800572e:	4401      	add	r1, r0
 8005730:	39a0      	subs	r1, #160	; 0xa0
 8005732:	e9c1 2300 	strd	r2, r3, [r1]
    knt_0 += 3;
 8005736:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800573a:	3303      	adds	r3, #3
 800573c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005740:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005744:	3301      	adds	r3, #1
 8005746:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800574a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800574e:	2b05      	cmp	r3, #5
 8005750:	dd9a      	ble.n	8005688 <UKFCorrectorAdditive_getPredict+0x2cc>
  }

  knt_0 = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800575e:	e018      	b.n	8005792 <UKFCorrectorAdditive_getPredict+0x3d6>
    CSE_M_x(&X2[knt_0], &Y2[knt]);
 8005760:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005764:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	18d0      	adds	r0, r2, r3
 800576c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005770:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	4413      	add	r3, r2
 8005778:	4619      	mov	r1, r3
 800577a:	f7ff fdd1 	bl	8005320 <CSE_M_x>
    knt_0 += 3;
 800577e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005782:	3303      	adds	r3, #3
 8005784:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  for (knt = 0; knt < 6; knt++) {
 8005788:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800578c:	3301      	adds	r3, #1
 800578e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005792:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005796:	2b05      	cmp	r3, #5
 8005798:	dde2      	ble.n	8005760 <UKFCorrectorAdditive_getPredict+0x3a4>
  }

  CSE_M_x(X1, &tempY);
 800579a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800579e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057a2:	4611      	mov	r1, r2
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f7ff fdbb 	bl	8005320 <CSE_M_x>
  for (knt = 0; knt < 6; knt++) {
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80057b0:	e027      	b.n	8005802 <UKFCorrectorAdditive_getPredict+0x446>
    Y2_0[knt] = (Y2[knt] - tempY) + tempY;
 80057b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80057bc:	4413      	add	r3, r2
 80057be:	3bd0      	subs	r3, #208	; 0xd0
 80057c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa fd4e 	bl	800026c <__aeabi_dsub>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa fd46 	bl	8000270 <__adddf3>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80057ec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80057f0:	00c9      	lsls	r1, r1, #3
 80057f2:	4401      	add	r1, r0
 80057f4:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80057f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005802:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005806:	2b05      	cmp	r3, #5
 8005808:	ddd3      	ble.n	80057b2 <UKFCorrectorAdditive_getPredict+0x3f6>
  }

  UTMeanCovSqrt_C6QfB9Td(Wmean, Wcov, *Sy, tempY, Y2_0, X1, X2, Ymean,
 800580a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800580e:	ed93 7b00 	vldr	d7, [r3]
 8005812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005816:	ed93 6b00 	vldr	d6, [r3]
 800581a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800581e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8005822:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005826:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800582a:	f107 0210 	add.w	r2, r7, #16
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	9203      	str	r2, [sp, #12]
 8005832:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005836:	9202      	str	r2, [sp, #8]
 8005838:	f107 0214 	add.w	r2, r7, #20
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	9201      	str	r2, [sp, #4]
 8005840:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005844:	9200      	str	r2, [sp, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4622      	mov	r2, r4
 800584a:	eeb0 1a46 	vmov.f32	s2, s12
 800584e:	eef0 1a66 	vmov.f32	s3, s13
 8005852:	eeb0 0a47 	vmov.f32	s0, s14
 8005856:	eef0 0a67 	vmov.f32	s1, s15
 800585a:	f004 fbff 	bl	800a05c <UTMeanCovSqrt_C6QfB9Td>
    &tempY_tmp, Pxy);
  Wmean[0] = tempY_tmp;
 800585e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800586a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 800586e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = tempY_tmp;
 800587e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800588a:	e9c1 2300 	strd	r2, r3, [r1]
  tempY = xnrm2_Mnmxg9YT(1, Wmean, 2);
 800588e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005892:	2202      	movs	r2, #2
 8005894:	4619      	mov	r1, r3
 8005896:	2001      	movs	r0, #1
 8005898:	f009 ff10 	bl	800f6bc <xnrm2_Mnmxg9YT>
 800589c:	eeb0 7a40 	vmov.f32	s14, s0
 80058a0:	eef0 7a60 	vmov.f32	s15, s1
 80058a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058a8:	ed83 7b00 	vstr	d7, [r3]
  if (tempY != 0.0) {
 80058ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	f7fb f8f6 	bl	8000aac <__aeabi_dcmpeq>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d000      	beq.n	80058c8 <UKFCorrectorAdditive_getPredict+0x50c>
      *Sy = tempY;
    } else {
      *Sy = tempY;
    }
  }
}
 80058c6:	e0fa      	b.n	8005abe <UKFCorrectorAdditive_getPredict+0x702>
    tempY = rt_hypotd_snf(tempY_tmp, tempY);
 80058c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058cc:	ed93 7b00 	vldr	d7, [r3]
 80058d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058d4:	ed93 6b00 	vldr	d6, [r3]
 80058d8:	eeb0 1a46 	vmov.f32	s2, s12
 80058dc:	eef0 1a66 	vmov.f32	s3, s13
 80058e0:	eeb0 0a47 	vmov.f32	s0, s14
 80058e4:	eef0 0a67 	vmov.f32	s1, s15
 80058e8:	f007 fb5e 	bl	800cfa8 <rt_hypotd_snf>
 80058ec:	eeb0 7a40 	vmov.f32	s14, s0
 80058f0:	eef0 7a60 	vmov.f32	s15, s1
 80058f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058f8:	ed83 7b00 	vstr	d7, [r3]
    if (tempY_tmp >= 0.0) {
 80058fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f7fb f8ec 	bl	8000ae8 <__aeabi_dcmpge>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UKFCorrectorAdditive_getPredict+0x570>
      tempY = -tempY;
 8005916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	4615      	mov	r5, r2
 8005920:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005928:	e9c3 5600 	strd	r5, r6, [r3]
    if (fabs(tempY) < 1.0020841800044864E-292) {
 800592c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	60ba      	str	r2, [r7, #8]
 8005936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005948:	f7fb f8ba 	bl	8000ac0 <__aeabi_dcmplt>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80ad 	beq.w	8005aae <UKFCorrectorAdditive_getPredict+0x6f2>
      knt = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        knt++;
 800595a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800595e:	3301      	adds	r3, #1
 8005960:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        Wmean[1] *= 9.9792015476736E+291;
 8005964:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005968:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	4b57      	ldr	r3, [pc, #348]	; (8005ad0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005972:	f7fa fe33 	bl	80005dc <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800597e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        tempY *= 9.9792015476736E+291;
 8005982:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <UKFCorrectorAdditive_getPredict+0x714>)
 8005990:	f7fa fe24 	bl	80005dc <__aeabi_dmul>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800599c:	e9c1 2300 	strd	r2, r3, [r1]
        *Sy *= 9.9792015476736E+291;
 80059a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80059a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	4b48      	ldr	r3, [pc, #288]	; (8005ad0 <UKFCorrectorAdditive_getPredict+0x714>)
 80059ae:	f7fa fe15 	bl	80005dc <__aeabi_dmul>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80059ba:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(tempY) < 1.0020841800044864E-292) && (knt < 20));
 80059be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	603a      	str	r2, [r7, #0]
 80059c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	607b      	str	r3, [r7, #4]
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80059d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059da:	f7fb f871 	bl	8000ac0 <__aeabi_dcmplt>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <UKFCorrectorAdditive_getPredict+0x630>
 80059e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80059e8:	2b13      	cmp	r3, #19
 80059ea:	ddb6      	ble.n	800595a <UKFCorrectorAdditive_getPredict+0x59e>
      tempY = rt_hypotd_snf(*Sy, xnrm2_Mnmxg9YT(1, Wmean, 2));
 80059ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80059f0:	ed93 8b00 	vldr	d8, [r3]
 80059f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059f8:	2202      	movs	r2, #2
 80059fa:	4619      	mov	r1, r3
 80059fc:	2001      	movs	r0, #1
 80059fe:	f009 fe5d 	bl	800f6bc <xnrm2_Mnmxg9YT>
 8005a02:	eeb0 7a40 	vmov.f32	s14, s0
 8005a06:	eef0 7a60 	vmov.f32	s15, s1
 8005a0a:	eeb0 1a47 	vmov.f32	s2, s14
 8005a0e:	eef0 1a67 	vmov.f32	s3, s15
 8005a12:	eeb0 0a48 	vmov.f32	s0, s16
 8005a16:	eef0 0a68 	vmov.f32	s1, s17
 8005a1a:	f007 fac5 	bl	800cfa8 <rt_hypotd_snf>
 8005a1e:	eeb0 7a40 	vmov.f32	s14, s0
 8005a22:	eef0 7a60 	vmov.f32	s15, s1
 8005a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a2a:	ed83 7b00 	vstr	d7, [r3]
      if (*Sy >= 0.0) {
 8005a2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	f7fb f853 	bl	8000ae8 <__aeabi_dcmpge>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UKFCorrectorAdditive_getPredict+0x6a2>
        tempY = -tempY;
 8005a48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	4692      	mov	sl, r2
 8005a52:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a5a:	e9c3 ab00 	strd	sl, fp, [r3]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005a64:	e014      	b.n	8005a90 <UKFCorrectorAdditive_getPredict+0x6d4>
        tempY *= 1.0020841800044864E-292;
 8005a66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8005a76:	f7fa fdb1 	bl	80005dc <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005a82:	e9c1 2300 	strd	r2, r3, [r1]
      for (knt_0 = 0; knt_0 < knt; knt_0++) {
 8005a86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005a90:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8005a94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	dbe4      	blt.n	8005a66 <UKFCorrectorAdditive_getPredict+0x6aa>
      *Sy = tempY;
 8005a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005aa8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005aac:	e007      	b.n	8005abe <UKFCorrectorAdditive_getPredict+0x702>
      *Sy = tempY;
 8005aae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005aba:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005abe:	bf00      	nop
 8005ac0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	ecbd 8b02 	vpop	{d8}
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ace:	bf00      	nop
 8005ad0:	7c900000 	.word	0x7c900000
 8005ad4:	00000000 	.word	0x00000000

08005ad8 <CSE_step>:

void CSE_step(void)
{
 8005ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005adc:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8005ae0:	af06      	add	r7, sp, #24
  int32_T iAcol_0;
  static const real_T Wmean[2] = { 1.0, -0.1666668333335 };

  static const real_T Wcov[2] = { 0.999996999998, -0.1666668333335 };

  if (CSE_P.Enable1_Value) {
 8005ae2:	4bb3      	ldr	r3, [pc, #716]	; (8005db0 <CSE_step+0x2d8>)
 8005ae4:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f001 803e 	beq.w	8006b6a <CSE_step+0x1092>
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    CSE_M_x(CSE_DW.x, &s_0);
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	4619      	mov	r1, r3
 8005afa:	48ae      	ldr	r0, [pc, #696]	; (8005db4 <CSE_step+0x2dc>)
 8005afc:	f7ff fc10 	bl	8005320 <CSE_M_x>
    UKFCorrectorAdditive_getPredict(CSE_P.R1_Value, CSE_DW.x, CSE_DW.P, 0.001,
 8005b00:	4bab      	ldr	r3, [pc, #684]	; (8005db0 <CSE_step+0x2d8>)
 8005b02:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8005b06:	f107 0110 	add.w	r1, r7, #16
 8005b0a:	f107 0208 	add.w	r2, r7, #8
 8005b0e:	463b      	mov	r3, r7
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	460b      	mov	r3, r1
 8005b14:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 8005d98 <CSE_step+0x2c0>
 8005b18:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8005da0 <CSE_step+0x2c8>
 8005b1c:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8005da8 <CSE_step+0x2d0>
 8005b20:	49a5      	ldr	r1, [pc, #660]	; (8005db8 <CSE_step+0x2e0>)
 8005b22:	48a4      	ldr	r0, [pc, #656]	; (8005db4 <CSE_step+0x2dc>)
 8005b24:	eeb0 0a47 	vmov.f32	s0, s14
 8005b28:	eef0 0a67 	vmov.f32	s1, s15
 8005b2c:	f7ff fc46 	bl	80053bc <UKFCorrectorAdditive_getPredict>
      2.0, 0.0, &s_0, tempY, &temp);
    s_0 = CSE_U.y - s_0;
 8005b30:	4ba2      	ldr	r3, [pc, #648]	; (8005dbc <CSE_step+0x2e4>)
 8005b32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fb95 	bl	800026c <__aeabi_dsub>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	f107 0108 	add.w	r1, r7, #8
 8005b4a:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005b5a:	e04a      	b.n	8005bf2 <CSE_step+0x11a>
      R[iAcol_0] = CSE_DW.P[iAcol];
 8005b5c:	4a96      	ldr	r2, [pc, #600]	; (8005db8 <CSE_step+0x2e0>)
 8005b5e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005b6e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8005b72:	00c9      	lsls	r1, r1, #3
 8005b74:	4401      	add	r1, r0
 8005b76:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 1] = CSE_DW.P[iAcol + 3];
 8005b7a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005b7e:	3303      	adds	r3, #3
 8005b80:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005b84:	1c51      	adds	r1, r2, #1
 8005b86:	4a8c      	ldr	r2, [pc, #560]	; (8005db8 <CSE_step+0x2e0>)
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005b94:	00c9      	lsls	r1, r1, #3
 8005b96:	4401      	add	r1, r0
 8005b98:	e9c1 2300 	strd	r2, r3, [r1]
      R[iAcol_0 + 2] = CSE_DW.P[iAcol + 6];
 8005b9c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ba0:	3306      	adds	r3, #6
 8005ba2:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8005ba6:	1c91      	adds	r1, r2, #2
 8005ba8:	4a83      	ldr	r2, [pc, #524]	; (8005db8 <CSE_step+0x2e0>)
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005bb6:	00c9      	lsls	r1, r1, #3
 8005bb8:	4401      	add	r1, r0
 8005bba:	e9c1 2300 	strd	r2, r3, [r1]
      C[iAcol] = tempY[iAcol];
 8005bbe:	f107 0210 	add.w	r2, r7, #16
 8005bc2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8005bd2:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8005bd6:	00c9      	lsls	r1, r1, #3
 8005bd8:	4401      	add	r1, r0
 8005bda:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8005bde:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005be2:	3303      	adds	r3, #3
 8005be4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8005be8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005bf2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	ddb0      	ble.n	8005b5c <CSE_step+0x84>
    }

    trisolve_BC1XmAGq(temp, C);
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	ed93 7b00 	vldr	d7, [r3]
 8005c00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c04:	4618      	mov	r0, r3
 8005c06:	eeb0 0a47 	vmov.f32	s0, s14
 8005c0a:	eef0 0a67 	vmov.f32	s1, s15
 8005c0e:	f009 f8ef 	bl	800edf0 <trisolve_BC1XmAGq>
    K[0] = C[0];
 8005c12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005c1e:	e9c1 2300 	strd	r2, r3, [r1]
    K[1] = C[1];
 8005c22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c2a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005c2e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    K[2] = C[2];
 8005c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c3a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005c3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    trisolve_BC1XmAGq(temp, K);
 8005c42:	463b      	mov	r3, r7
 8005c44:	ed93 7b00 	vldr	d7, [r3]
 8005c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c52:	eef0 0a67 	vmov.f32	s1, s15
 8005c56:	f009 f8cb 	bl	800edf0 <trisolve_BC1XmAGq>
    tempY[0] = K[0] * temp;
 8005c5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c62:	463b      	mov	r3, r7
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fcb8 	bl	80005dc <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	f107 0110 	add.w	r1, r7, #16
 8005c74:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005c7e:	e011      	b.n	8005ca4 <CSE_step+0x1cc>
      R[iAcol + 1] = 0.0;
 8005c80:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c84:	3301      	adds	r3, #1
 8005c86:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	18d1      	adds	r1, r2, r3
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8005c9a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8005ca4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	dde9      	ble.n	8005c80 <CSE_step+0x1a8>
    }

    tempY[1] = K[1] * temp;
 8005cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fc8f 	bl	80005dc <__aeabi_dmul>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	f107 0110 	add.w	r1, r7, #16
 8005cc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    R[5] = 0.0;
 8005cca:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tempY[2] = K[2] * temp;
 8005cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f7fa fc78 	bl	80005dc <__aeabi_dmul>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	f107 0110 	add.w	r1, r7, #16
 8005cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    errorCondition = (R[0] == 0.0);
 8005cf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d00:	2301      	movs	r3, #1
 8005d02:	461e      	mov	r6, r3
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	f7fa fece 	bl	8000aac <__aeabi_dcmpeq>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <CSE_step+0x242>
 8005d16:	2300      	movs	r3, #0
 8005d18:	461e      	mov	r6, r3
 8005d1a:	b2f3      	uxtb	r3, r6
 8005d1c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    if (!errorCondition) {
 8005d20:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d113      	bne.n	8005d50 <CSE_step+0x278>
      errorCondition = (R[4] == 0.0);
 8005d28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d2c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005d30:	2301      	movs	r3, #1
 8005d32:	461e      	mov	r6, r3
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	f7fa feb6 	bl	8000aac <__aeabi_dcmpeq>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <CSE_step+0x272>
 8005d46:	2300      	movs	r3, #0
 8005d48:	461e      	mov	r6, r3
 8005d4a:	b2f3      	uxtb	r3, r6
 8005d4c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    if (!errorCondition) {
 8005d50:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d113      	bne.n	8005d80 <CSE_step+0x2a8>
      errorCondition = (R[8] == 0.0);
 8005d58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d5c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005d60:	2301      	movs	r3, #1
 8005d62:	461e      	mov	r6, r3
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	f7fa fe9e 	bl	8000aac <__aeabi_dcmpeq>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <CSE_step+0x2a2>
 8005d76:	2300      	movs	r3, #0
 8005d78:	461e      	mov	r6, r3
 8005d7a:	b2f3      	uxtb	r3, r6
 8005d7c:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    }

    guard1 = false;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
    if (errorCondition) {
 8005d86:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <CSE_step+0x2e8>
      guard1 = true;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8005d94:	e395      	b.n	80064c2 <CSE_step+0x9ea>
 8005d96:	bf00      	nop
	...
 8005da4:	40000000 	.word	0x40000000
 8005da8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dac:	3f50624d 	.word	0x3f50624d
 8005db0:	20000088 	.word	0x20000088
 8005db4:	2001bdc0 	.word	0x2001bdc0
 8005db8:	2001bd78 	.word	0x2001bd78
 8005dbc:	2001bd68 	.word	0x2001bd68
    } else {
      real_T absxk;
      real_T scale;
      real_T t;
      C[2] = tempY[2];
 8005dc0:	f107 0310 	add.w	r3, r7, #16
 8005dc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005dc8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005dcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      C[0] = tempY[0] / R[0];
 8005dd0:	f107 0310 	add.w	r3, r7, #16
 8005dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fd26 	bl	8000830 <__aeabi_ddiv>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005dec:	e9c1 2300 	strd	r2, r3, [r1]
      C[1] = (tempY[1] - C[0] * R[3]) / R[4];
 8005df0:	f107 0310 	add.w	r3, r7, #16
 8005df4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8005df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005e08:	f7fa fbe8 	bl	80005dc <__aeabi_dmul>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa fa2a 	bl	800026c <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e28:	f7fa fd02 	bl	8000830 <__aeabi_ddiv>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005e34:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = tempY[2];
 8005e38:	f107 0310 	add.w	r3, r7, #16
 8005e3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e40:	4639      	mov	r1, r7
 8005e42:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005e4c:	e025      	b.n	8005e9a <CSE_step+0x3c2>
        temp -= R[iAcol_0 + 6] * C[iAcol_0];
 8005e4e:	463b      	mov	r3, r7
 8005e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e54:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e58:	3306      	adds	r3, #6
 8005e5a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4413      	add	r3, r2
 8005e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e66:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005e6a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa fbb1 	bl	80005dc <__aeabi_dmul>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa f9f3 	bl	800026c <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol_0 = 0; iAcol_0 < 2; iAcol_0++) {
 8005e90:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005e9a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	ddd5      	ble.n	8005e4e <CSE_step+0x376>
      }

      C[2] = temp / R[8];
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005eb0:	f7fa fcbe 	bl	8000830 <__aeabi_ddiv>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ebc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005ec8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
      absxk = fabs(C[0]);
 8005ecc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005eda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ede:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > 3.3121686421112381E-170) {
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005eea:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005eee:	f7fa fe05 	bl	8000afc <__aeabi_dcmpgt>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <CSE_step+0x436>
        temp = 1.0;
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	4bbf      	ldr	r3, [pc, #764]	; (80061fc <CSE_step+0x724>)
 8005f00:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005f04:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005f08:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005f0c:	e016      	b.n	8005f3c <CSE_step+0x464>
      } else {
        t = absxk / 3.3121686421112381E-170;
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005f16:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005f1a:	f7fa fc89 	bl	8000830 <__aeabi_ddiv>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = t * t;
 8005f26:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005f2a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005f2e:	f7fa fb55 	bl	80005dc <__aeabi_dmul>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4639      	mov	r1, r7
 8005f38:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[1]);
 8005f3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005f44:	4611      	mov	r1, r2
 8005f46:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8005f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f4e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 8005f52:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005f56:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005f5a:	f7fa fdcf 	bl	8000afc <__aeabi_dcmpgt>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02b      	beq.n	8005fbc <CSE_step+0x4e4>
        t = scale / absxk;
 8005f64:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005f68:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8005f6c:	f7fa fc60 	bl	8000830 <__aeabi_ddiv>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8005f78:	463b      	mov	r3, r7
 8005f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f7e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005f82:	f7fa fb2b 	bl	80005dc <__aeabi_dmul>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005f92:	f7fa fb23 	bl	80005dc <__aeabi_dmul>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	4b96      	ldr	r3, [pc, #600]	; (80061fc <CSE_step+0x724>)
 8005fa4:	f7fa f964 	bl	8000270 <__adddf3>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4639      	mov	r1, r7
 8005fae:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8005fb2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005fb6:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8005fba:	e01d      	b.n	8005ff8 <CSE_step+0x520>
      } else {
        t = absxk / scale;
 8005fbc:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005fc0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8005fc4:	f7fa fc34 	bl	8000830 <__aeabi_ddiv>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 8005fd0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005fd4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8005fd8:	f7fa fb00 	bl	80005dc <__aeabi_dmul>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f7fa f941 	bl	8000270 <__adddf3>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(C[2]);
 8005ff8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ffc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006000:	4611      	mov	r1, r2
 8006002:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8006006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800600a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
      if (absxk > scale) {
 800600e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006012:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8006016:	f7fa fd71 	bl	8000afc <__aeabi_dcmpgt>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d02b      	beq.n	8006078 <CSE_step+0x5a0>
        t = scale / absxk;
 8006020:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006024:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8006028:	f7fa fc02 	bl	8000830 <__aeabi_ddiv>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp = temp * t * t + 1.0;
 8006034:	463b      	mov	r3, r7
 8006036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800603a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800603e:	f7fa facd 	bl	80005dc <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800604e:	f7fa fac5 	bl	80005dc <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	4b67      	ldr	r3, [pc, #412]	; (80061fc <CSE_step+0x724>)
 8006060:	f7fa f906 	bl	8000270 <__adddf3>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4639      	mov	r1, r7
 800606a:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800606e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006072:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 8006076:	e01d      	b.n	80060b4 <CSE_step+0x5dc>
      } else {
        t = absxk / scale;
 8006078:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800607c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8006080:	f7fa fbd6 	bl	8000830 <__aeabi_ddiv>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        temp += t * t;
 800608c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006090:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8006094:	f7fa faa2 	bl	80005dc <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	463b      	mov	r3, r7
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa f8e3 	bl	8000270 <__adddf3>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4639      	mov	r1, r7
 80060b0:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 80060b4:	463b      	mov	r3, r7
 80060b6:	ed93 7b00 	vldr	d7, [r3]
 80060ba:	eeb0 0a47 	vmov.f32	s0, s14
 80060be:	eef0 0a67 	vmov.f32	s1, s15
 80060c2:	f013 ff09 	bl	8019ed8 <sqrt>
 80060c6:	ec51 0b10 	vmov	r0, r1, d0
 80060ca:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80060ce:	f7fa fa85 	bl	80005dc <__aeabi_dmul>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4639      	mov	r1, r7
 80060d8:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 80060dc:	463b      	mov	r3, r7
 80060de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	4b45      	ldr	r3, [pc, #276]	; (80061fc <CSE_step+0x724>)
 80060e8:	f7fa fcfe 	bl	8000ae8 <__aeabi_dcmpge>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <CSE_step+0x622>
        guard1 = true;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 80060f8:	e1e3      	b.n	80064c2 <CSE_step+0x9ea>
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), C[2], &tempY[2], &s[2], &temp);
 80060fa:	463b      	mov	r3, r7
 80060fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006100:	463b      	mov	r3, r7
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa69 	bl	80005dc <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	f04f 0000 	mov.w	r0, #0
 8006112:	493a      	ldr	r1, [pc, #232]	; (80061fc <CSE_step+0x724>)
 8006114:	f7fa f8aa 	bl	800026c <__aeabi_dsub>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	ec43 2b17 	vmov	d7, r2, r3
 8006120:	eeb0 0a47 	vmov.f32	s0, s14
 8006124:	eef0 0a67 	vmov.f32	s1, s15
 8006128:	f013 fed6 	bl	8019ed8 <sqrt>
 800612c:	eeb0 6a40 	vmov.f32	s12, s0
 8006130:	eef0 6a60 	vmov.f32	s13, s1
 8006134:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006138:	ed93 7b04 	vldr	d7, [r3, #16]
 800613c:	463a      	mov	r2, r7
 800613e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006142:	f103 0110 	add.w	r1, r3, #16
 8006146:	f107 0310 	add.w	r3, r7, #16
 800614a:	3310      	adds	r3, #16
 800614c:	4618      	mov	r0, r3
 800614e:	eeb0 1a47 	vmov.f32	s2, s14
 8006152:	eef0 1a67 	vmov.f32	s3, s15
 8006156:	eeb0 0a46 	vmov.f32	s0, s12
 800615a:	eef0 0a66 	vmov.f32	s1, s13
 800615e:	f006 fd99 	bl	800cc94 <rotate_LZ7ctbe0>
        C[2] = 0.0;
 8006162:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, C[1], &tempY[1], &s[1], &temp);
 8006172:	463b      	mov	r3, r7
 8006174:	ed93 7b00 	vldr	d7, [r3]
 8006178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800617c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006180:	463a      	mov	r2, r7
 8006182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006186:	f103 0108 	add.w	r1, r3, #8
 800618a:	f107 0310 	add.w	r3, r7, #16
 800618e:	3308      	adds	r3, #8
 8006190:	4618      	mov	r0, r3
 8006192:	eeb0 1a46 	vmov.f32	s2, s12
 8006196:	eef0 1a66 	vmov.f32	s3, s13
 800619a:	eeb0 0a47 	vmov.f32	s0, s14
 800619e:	eef0 0a67 	vmov.f32	s1, s15
 80061a2:	f006 fd77 	bl	800cc94 <rotate_LZ7ctbe0>
        C[1] = 0.0;
 80061a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, C[0], &tempY[0], &s[0], &temp);
 80061b6:	463b      	mov	r3, r7
 80061b8:	ed93 7b00 	vldr	d7, [r3]
 80061bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061c0:	ed93 6b00 	vldr	d6, [r3]
 80061c4:	463a      	mov	r2, r7
 80061c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80061ca:	f107 0310 	add.w	r3, r7, #16
 80061ce:	4618      	mov	r0, r3
 80061d0:	eeb0 1a46 	vmov.f32	s2, s12
 80061d4:	eef0 1a66 	vmov.f32	s3, s13
 80061d8:	eeb0 0a47 	vmov.f32	s0, s14
 80061dc:	eef0 0a67 	vmov.f32	s1, s15
 80061e0:	f006 fd58 	bl	800cc94 <rotate_LZ7ctbe0>
        C[0] = 0.0;
 80061e4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80061fa:	e06e      	b.n	80062da <CSE_step+0x802>
 80061fc:	3ff00000 	.word	0x3ff00000
          temp = s[iAcol_0] * R[iAcol_0];
 8006200:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006204:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	4413      	add	r3, r2
 800620c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006210:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006214:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa f9dc 	bl	80005dc <__aeabi_dmul>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4639      	mov	r1, r7
 800622a:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0] = tempY[iAcol_0] * R[iAcol_0] - s[iAcol_0] * C[0];
 800622e:	f107 0210 	add.w	r2, r7, #16
 8006232:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800623e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006242:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa f9c5 	bl	80005dc <__aeabi_dmul>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4690      	mov	r8, r2
 8006258:	4699      	mov	r9, r3
 800625a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800625e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4413      	add	r3, r2
 8006266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800626a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f7fa f9b3 	bl	80005dc <__aeabi_dmul>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7f9 fff5 	bl	800026c <__aeabi_dsub>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800628a:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800628e:	00c9      	lsls	r1, r1, #3
 8006290:	4401      	add	r1, r0
 8006292:	e9c1 2300 	strd	r2, r3, [r1]
          C[0] = tempY[iAcol_0] * C[0] + temp;
 8006296:	f107 0210 	add.w	r2, r7, #16
 800629a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4413      	add	r3, r2
 80062a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f995 	bl	80005dc <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4610      	mov	r0, r2
 80062b8:	4619      	mov	r1, r3
 80062ba:	463b      	mov	r3, r7
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f7f9 ffd6 	bl	8000270 <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80062cc:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 + 1 > 0; iAcol_0--) {
 80062d0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062d4:	3b01      	subs	r3, #1
 80062d6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80062da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da8e      	bge.n	8006200 <CSE_step+0x728>
        }

        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80062e2:	2301      	movs	r3, #1
 80062e4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80062e8:	e06f      	b.n	80063ca <CSE_step+0x8f2>
          temp = R[iAcol_0 + 3];
 80062ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80062ee:	3303      	adds	r3, #3
 80062f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	4639      	mov	r1, r7
 80062fe:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 3] = temp * tempY[iAcol_0] - s[iAcol_0] * C[1];
 8006302:	f107 0210 	add.w	r2, r7, #16
 8006306:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4413      	add	r3, r2
 800630e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006312:	463b      	mov	r3, r7
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa f960 	bl	80005dc <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4690      	mov	r8, r2
 8006322:	4699      	mov	r9, r3
 8006324:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006328:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006334:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006338:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800633c:	f7fa f94e 	bl	80005dc <__aeabi_dmul>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4610      	mov	r0, r2
 8006346:	4619      	mov	r1, r3
 8006348:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800634c:	1cde      	adds	r6, r3, #3
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7f9 ff89 	bl	800026c <__aeabi_dsub>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006362:	00f1      	lsls	r1, r6, #3
 8006364:	4401      	add	r1, r0
 8006366:	e9c1 2300 	strd	r2, r3, [r1]
          C[1] = tempY[iAcol_0] * C[1] + temp * s[iAcol_0];
 800636a:	f107 0210 	add.w	r2, r7, #16
 800636e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4413      	add	r3, r2
 8006376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800637a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800637e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006382:	f7fa f92b 	bl	80005dc <__aeabi_dmul>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4690      	mov	r8, r2
 800638c:	4699      	mov	r9, r3
 800638e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006392:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4413      	add	r3, r2
 800639a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800639e:	463b      	mov	r3, r7
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7fa f91a 	bl	80005dc <__aeabi_dmul>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7f9 ff5e 	bl	8000270 <__adddf3>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol_0 = 1; iAcol_0 + 1 > 0; iAcol_0--) {
 80063c0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063c4:	3b01      	subs	r3, #1
 80063c6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80063ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da8b      	bge.n	80062ea <CSE_step+0x812>
        }

        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80063d2:	2302      	movs	r3, #2
 80063d4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80063d8:	e06f      	b.n	80064ba <CSE_step+0x9e2>
          temp = R[iAcol_0 + 6];
 80063da:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063de:	3306      	adds	r3, #6
 80063e0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4413      	add	r3, r2
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	4639      	mov	r1, r7
 80063ee:	e9c1 2300 	strd	r2, r3, [r1]
          R[iAcol_0 + 6] = temp * tempY[iAcol_0] - s[iAcol_0] * C[2];
 80063f2:	f107 0210 	add.w	r2, r7, #16
 80063f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006402:	463b      	mov	r3, r7
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f8e8 	bl	80005dc <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4690      	mov	r8, r2
 8006412:	4699      	mov	r9, r3
 8006414:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006418:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4413      	add	r3, r2
 8006420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006424:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006428:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800642c:	f7fa f8d6 	bl	80005dc <__aeabi_dmul>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800643c:	1d9e      	adds	r6, r3, #6
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4640      	mov	r0, r8
 8006444:	4649      	mov	r1, r9
 8006446:	f7f9 ff11 	bl	800026c <__aeabi_dsub>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006452:	00f1      	lsls	r1, r6, #3
 8006454:	4401      	add	r1, r0
 8006456:	e9c1 2300 	strd	r2, r3, [r1]
          C[2] = tempY[iAcol_0] * C[2] + temp * s[iAcol_0];
 800645a:	f107 0210 	add.w	r2, r7, #16
 800645e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800646a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800646e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006472:	f7fa f8b3 	bl	80005dc <__aeabi_dmul>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4690      	mov	r8, r2
 800647c:	4699      	mov	r9, r3
 800647e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006482:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800648e:	463b      	mov	r3, r7
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fa f8a2 	bl	80005dc <__aeabi_dmul>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4640      	mov	r0, r8
 800649e:	4649      	mov	r1, r9
 80064a0:	f7f9 fee6 	bl	8000270 <__adddf3>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80064ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 2; iAcol_0 + 1 > 0; iAcol_0--) {
 80064b0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064b4:	3b01      	subs	r3, #1
 80064b6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80064ba:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da8b      	bge.n	80063da <CSE_step+0x902>
        }
      }
    }

    if (guard1) {
 80064c2:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 82e1 	beq.w	8006a8e <CSE_step+0xfb6>
      int32_T R_tmp;
      boolean_T exitg2;
      iAcol_0 = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80064d2:	2300      	movs	r3, #0
 80064d4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80064d8:	e0d6      	b.n	8006688 <CSE_step+0xbb0>
        coffset = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 80064e0:	2300      	movs	r3, #0
 80064e2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80064e6:	e0c0      	b.n	800666a <CSE_step+0xb92>
          R_tmp = coffset + iAcol;
 80064e8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80064ec:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80064f0:	4413      	add	r3, r2
 80064f2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R_0[R_tmp] = 0.0;
 80064f6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80064fa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	18d1      	adds	r1, r2, r3
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0] * R[coffset];
 800650e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006512:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4413      	add	r3, r2
 800651a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800651e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006522:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4413      	add	r3, r2
 800652a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800652e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006532:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f7fa f84d 	bl	80005dc <__aeabi_dmul>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7f9 fe91 	bl	8000270 <__adddf3>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006556:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800655a:	00c9      	lsls	r1, r1, #3
 800655c:	4401      	add	r1, r0
 800655e:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 1] * R[coffset + 1];
 8006562:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006566:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006572:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006576:	3301      	adds	r3, #1
 8006578:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006584:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006588:	3301      	adds	r3, #1
 800658a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7fa f821 	bl	80005dc <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4640      	mov	r0, r8
 80065a0:	4649      	mov	r1, r9
 80065a2:	f7f9 fe65 	bl	8000270 <__adddf3>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80065ae:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80065b2:	00c9      	lsls	r1, r1, #3
 80065b4:	4401      	add	r1, r0
 80065b6:	e9c1 2300 	strd	r2, r3, [r1]
          R_0[R_tmp] += R[iAcol_0 + 2] * R[coffset + 2];
 80065ba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80065be:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4413      	add	r3, r2
 80065c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80065ce:	3302      	adds	r3, #2
 80065d0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065dc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80065e0:	3302      	adds	r3, #2
 80065e2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	4413      	add	r3, r2
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7f9 fff5 	bl	80005dc <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7f9 fe39 	bl	8000270 <__adddf3>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006606:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800660a:	00c9      	lsls	r1, r1, #3
 800660c:	4401      	add	r1, r0
 800660e:	e9c1 2300 	strd	r2, r3, [r1]
          tempY_0[aoffset + iAcol_0] = tempY[aoffset] * tempY[iAcol];
 8006612:	f107 0210 	add.w	r2, r7, #16
 8006616:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006622:	f107 0210 	add.w	r2, r7, #16
 8006626:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006632:	f8d7 62ec 	ldr.w	r6, [r7, #748]	; 0x2ec
 8006636:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800663a:	4433      	add	r3, r6
 800663c:	461e      	mov	r6, r3
 800663e:	4642      	mov	r2, r8
 8006640:	464b      	mov	r3, r9
 8006642:	f7f9 ffcb 	bl	80005dc <__aeabi_dmul>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800664e:	00f1      	lsls	r1, r6, #3
 8006650:	4401      	add	r1, r0
 8006652:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 8006656:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800665a:	3303      	adds	r3, #3
 800665c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006660:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006664:	3301      	adds	r3, #1
 8006666:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800666a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800666e:	2b02      	cmp	r3, #2
 8006670:	f77f af3a 	ble.w	80064e8 <CSE_step+0xa10>
        }

        iAcol_0 += 3;
 8006674:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006678:	3303      	adds	r3, #3
 800667a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800667e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006682:	3301      	adds	r3, #1
 8006684:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006688:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800668c:	2b02      	cmp	r3, #2
 800668e:	f77f af24 	ble.w	80064da <CSE_step+0xa02>
      }

      errorCondition = true;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800669e:	e045      	b.n	800672c <CSE_step+0xc54>
        temp = R_0[iAcol] - tempY_0[iAcol];
 80066a0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80066a4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4413      	add	r3, r2
 80066ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80066b4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 fdd4 	bl	800026c <__aeabi_dsub>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4639      	mov	r1, r7
 80066ca:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 80066ce:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01a      	beq.n	800670c <CSE_step+0xc34>
 80066d6:	463b      	mov	r3, r7
 80066d8:	ed93 7b00 	vldr	d7, [r3]
 80066dc:	eeb0 0a47 	vmov.f32	s0, s14
 80066e0:	eef0 0a67 	vmov.f32	s1, s15
 80066e4:	f006 fd4a 	bl	800d17c <rtIsInf>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <CSE_step+0xc2e>
 80066ee:	463b      	mov	r3, r7
 80066f0:	ed93 7b00 	vldr	d7, [r3]
 80066f4:	eeb0 0a47 	vmov.f32	s0, s14
 80066f8:	eef0 0a67 	vmov.f32	s1, s15
 80066fc:	f006 fd62 	bl	800d1c4 <rtIsNaN>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <CSE_step+0xc34>
          errorCondition = false;
 8006706:	2300      	movs	r3, #0
 8006708:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
        }

        Ss[iAcol] = temp;
 800670c:	463b      	mov	r3, r7
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006716:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 800671a:	00c9      	lsls	r1, r1, #3
 800671c:	4401      	add	r1, r0
 800671e:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8006722:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006726:	3301      	adds	r3, #1
 8006728:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800672c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006730:	2b08      	cmp	r3, #8
 8006732:	ddb5      	ble.n	80066a0 <CSE_step+0xbc8>
      }

      if (errorCondition) {
 8006734:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <CSE_step+0xc7a>
        svd_u3DvUgOe(Ss, tempY_0, s, R_0);
 800673c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006740:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006744:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006748:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800674c:	f006 fd8c 	bl	800d268 <svd_u3DvUgOe>
 8006750:	e02c      	b.n	80067ac <CSE_step+0xcd4>
      } else {
        s[0] = (rtNaN);
 8006752:	4bd2      	ldr	r3, [pc, #840]	; (8006a9c <CSE_step+0xfc4>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800675c:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8006760:	4bce      	ldr	r3, [pc, #824]	; (8006a9c <CSE_step+0xfc4>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800676a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 800676e:	4bcb      	ldr	r3, [pc, #812]	; (8006a9c <CSE_step+0xfc4>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006778:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800677c:	2300      	movs	r3, #0
 800677e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006782:	e00f      	b.n	80067a4 <CSE_step+0xccc>
          R_0[iAcol_0] = (rtNaN);
 8006784:	4bc5      	ldr	r3, [pc, #788]	; (8006a9c <CSE_step+0xfc4>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800678e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006792:	00c9      	lsls	r1, r1, #3
 8006794:	4401      	add	r1, r0
 8006796:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 800679a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800679e:	3301      	adds	r3, #1
 80067a0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80067a4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	ddeb      	ble.n	8006784 <CSE_step+0xcac>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 80067ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80067b0:	2248      	movs	r2, #72	; 0x48
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f013 f9d7 	bl	8019b68 <memset>
      Ss[0] = s[0];
 80067ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80067c6:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 80067ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80067d2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80067d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 80067da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80067e2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80067e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 80067ea:	2300      	movs	r3, #0
 80067ec:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80067f0:	e01e      	b.n	8006830 <CSE_step+0xd58>
        Ss[iAcol_0] = sqrt(Ss[iAcol_0]);
 80067f2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80067f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	4413      	add	r3, r2
 80067fe:	ed93 7b00 	vldr	d7, [r3]
 8006802:	eeb0 0a47 	vmov.f32	s0, s14
 8006806:	eef0 0a67 	vmov.f32	s1, s15
 800680a:	f013 fb65 	bl	8019ed8 <sqrt>
 800680e:	eeb0 7a40 	vmov.f32	s14, s0
 8006812:	eef0 7a60 	vmov.f32	s15, s1
 8006816:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800681a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4413      	add	r3, r2
 8006822:	ed83 7b00 	vstr	d7, [r3]
      for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006826:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800682a:	3301      	adds	r3, #1
 800682c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006830:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006834:	2b08      	cmp	r3, #8
 8006836:	dddc      	ble.n	80067f2 <CSE_step+0xd1a>
      }

      iAcol_0 = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 800683e:	2300      	movs	r3, #0
 8006840:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006844:	e0b4      	b.n	80069b0 <CSE_step+0xed8>
        coffset = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006852:	e09e      	b.n	8006992 <CSE_step+0xeba>
          R_tmp = coffset + iAcol;
 8006854:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006858:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800685c:	4413      	add	r3, r2
 800685e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
          R[R_tmp] = 0.0;
 8006862:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006866:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	18d1      	adds	r1, r2, r3
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0] * R_0[aoffset];
 800687a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800687e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	e9d3 8900 	ldrd	r8, r9, [r3]
 800688a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800688e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800689a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800689e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4413      	add	r3, r2
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f7f9 fe97 	bl	80005dc <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4640      	mov	r0, r8
 80068b4:	4649      	mov	r1, r9
 80068b6:	f7f9 fcdb 	bl	8000270 <__adddf3>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80068c2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80068c6:	00c9      	lsls	r1, r1, #3
 80068c8:	4401      	add	r1, r0
 80068ca:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 1] * R_0[aoffset + 3];
 80068ce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80068d2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80068e2:	3301      	adds	r3, #1
 80068e4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068f0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80068f4:	3303      	adds	r3, #3
 80068f6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4413      	add	r3, r2
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fe6b 	bl	80005dc <__aeabi_dmul>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4640      	mov	r0, r8
 800690c:	4649      	mov	r1, r9
 800690e:	f7f9 fcaf 	bl	8000270 <__adddf3>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800691a:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800691e:	00c9      	lsls	r1, r1, #3
 8006920:	4401      	add	r1, r0
 8006922:	e9c1 2300 	strd	r2, r3, [r1]
          R[R_tmp] += Ss[iAcol_0 + 2] * R_0[aoffset + 6];
 8006926:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800692a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4413      	add	r3, r2
 8006932:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006936:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800693a:	3302      	adds	r3, #2
 800693c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	4413      	add	r3, r2
 8006944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006948:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800694c:	3306      	adds	r3, #6
 800694e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fe3f 	bl	80005dc <__aeabi_dmul>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	f7f9 fc83 	bl	8000270 <__adddf3>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8006972:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8006976:	00c9      	lsls	r1, r1, #3
 8006978:	4401      	add	r1, r0
 800697a:	e9c1 2300 	strd	r2, r3, [r1]
          coffset += 3;
 800697e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006982:	3303      	adds	r3, #3
 8006984:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
        for (aoffset = 0; aoffset < 3; aoffset++) {
 8006988:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800698c:	3301      	adds	r3, #1
 800698e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006992:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006996:	2b02      	cmp	r3, #2
 8006998:	f77f af5c 	ble.w	8006854 <CSE_step+0xd7c>
        }

        iAcol_0 += 3;
 800699c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80069a0:	3303      	adds	r3, #3
 80069a2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80069a6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80069aa:	3301      	adds	r3, #1
 80069ac:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80069b0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	f77f af46 	ble.w	8006846 <CSE_step+0xd6e>
      }

      errorCondition = true;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
      iAcol = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      exitg2 = false;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 80069cc:	e042      	b.n	8006a54 <CSE_step+0xf7c>
        int32_T exitg1;
        iAcol_0 = iAcol + 1;
 80069ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80069d2:	3301      	adds	r3, #1
 80069d4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        do {
          exitg1 = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          if (iAcol_0 + 1 < 4) {
 80069de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	dc23      	bgt.n	8006a2e <CSE_step+0xf56>
            if (!(R[3 * iAcol + iAcol_0] == 0.0)) {
 80069e6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80069ea:	4613      	mov	r3, r2
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	441a      	add	r2, r3
 80069f0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80069f4:	4413      	add	r3, r2
 80069f6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	f7fa f84f 	bl	8000aac <__aeabi_dcmpeq>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d106      	bne.n	8006a22 <CSE_step+0xf4a>
              errorCondition = false;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
              exitg1 = 1;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8006a20:	e00d      	b.n	8006a3e <CSE_step+0xf66>
            } else {
              iAcol_0++;
 8006a22:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006a26:	3301      	adds	r3, #1
 8006a28:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006a2c:	e007      	b.n	8006a3e <CSE_step+0xf66>
            }
          } else {
            iAcol++;
 8006a2e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a32:	3301      	adds	r3, #1
 8006a34:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
            exitg1 = 2;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
          }
        } while (exitg1 == 0);
 8006a3e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c8      	beq.n	80069d8 <CSE_step+0xf00>

        if (exitg1 == 1) {
 8006a46:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d102      	bne.n	8006a54 <CSE_step+0xf7c>
          exitg2 = true;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
      while ((!exitg2) && (iAcol < 3)) {
 8006a54:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <CSE_step+0xf8c>
 8006a5c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	ddb4      	ble.n	80069ce <CSE_step+0xef6>
        }
      }

      if (!errorCondition) {
 8006a64:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d110      	bne.n	8006a8e <CSE_step+0xfb6>
        memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8006a6c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006a70:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006a74:	2248      	movs	r2, #72	; 0x48
 8006a76:	4618      	mov	r0, r3
 8006a78:	f013 f868 	bl	8019b4c <memcpy>
        qr_5a2P8Gh6(R_0, tempY_0, R);
 8006a7c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006a80:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006a84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f004 f82b 	bl	800aae4 <qr_5a2P8Gh6>
      }
    }

    iAcol_0 = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006a9a:	e062      	b.n	8006b62 <CSE_step+0x108a>
 8006a9c:	2001e8a0 	.word	0x2001e8a0
      CSE_DW.P[iAcol_0] = R[iAcol];
 8006aa0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006aa4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	4413      	add	r3, r2
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	48a5      	ldr	r0, [pc, #660]	; (8006d48 <CSE_step+0x1270>)
 8006ab2:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006ab6:	00c9      	lsls	r1, r1, #3
 8006ab8:	4401      	add	r1, r0
 8006aba:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 8006abe:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ac2:	3303      	adds	r3, #3
 8006ac4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006ac8:	1c51      	adds	r1, r2, #1
 8006aca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	489c      	ldr	r0, [pc, #624]	; (8006d48 <CSE_step+0x1270>)
 8006ad8:	00c9      	lsls	r1, r1, #3
 8006ada:	4401      	add	r1, r0
 8006adc:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8006ae0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ae4:	3306      	adds	r3, #6
 8006ae6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006aea:	1c91      	adds	r1, r2, #2
 8006aec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	4893      	ldr	r0, [pc, #588]	; (8006d48 <CSE_step+0x1270>)
 8006afa:	00c9      	lsls	r1, r1, #3
 8006afc:	4401      	add	r1, r0
 8006afe:	e9c1 2300 	strd	r2, r3, [r1]
      CSE_DW.x[iAcol] += K[iAcol] * s_0;
 8006b02:	4a91      	ldr	r2, [pc, #580]	; (8006d48 <CSE_step+0x1270>)
 8006b04:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b08:	3309      	adds	r3, #9
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b12:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b16:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f7f9 fd57 	bl	80005dc <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fb9b 	bl	8000270 <__adddf3>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4882      	ldr	r0, [pc, #520]	; (8006d48 <CSE_step+0x1270>)
 8006b40:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8006b44:	3109      	adds	r1, #9
 8006b46:	00c9      	lsls	r1, r1, #3
 8006b48:	4401      	add	r1, r0
 8006b4a:	e9c1 2300 	strd	r2, r3, [r1]
      iAcol_0 += 3;
 8006b4e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006b52:	3303      	adds	r3, #3
 8006b54:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006b58:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006b62:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	dd9a      	ble.n	8006aa0 <CSE_step+0xfc8>
    }
  }

  CSE_Y.soc = CSE_DW.x[1] / CSE_DW.x[2];
 8006b6a:	4b77      	ldr	r3, [pc, #476]	; (8006d48 <CSE_step+0x1270>)
 8006b6c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006b70:	4b75      	ldr	r3, [pc, #468]	; (8006d48 <CSE_step+0x1270>)
 8006b72:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006b76:	f7f9 fe5b 	bl	8000830 <__aeabi_ddiv>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4973      	ldr	r1, [pc, #460]	; (8006d4c <CSE_step+0x1274>)
 8006b80:	e9c1 2300 	strd	r2, r3, [r1]
  CSE_Y.capacity = CSE_DW.x[2];
 8006b84:	4b70      	ldr	r3, [pc, #448]	; (8006d48 <CSE_step+0x1270>)
 8006b86:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006b8a:	4970      	ldr	r1, [pc, #448]	; (8006d4c <CSE_step+0x1274>)
 8006b8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CSE_S_x(CSE_DW.x, tempY);
 8006b90:	f107 0310 	add.w	r3, r7, #16
 8006b94:	4619      	mov	r1, r3
 8006b96:	486e      	ldr	r0, [pc, #440]	; (8006d50 <CSE_step+0x1278>)
 8006b98:	f7fe fb26 	bl	80051e8 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006ba2:	e034      	b.n	8006c0e <CSE_step+0x1136>
    s_0 = 0.0017320508075688774 * CSE_DW.P[iAcol_0];
 8006ba4:	4a68      	ldr	r2, [pc, #416]	; (8006d48 <CSE_step+0x1270>)
 8006ba6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4413      	add	r3, r2
 8006bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bb2:	a363      	add	r3, pc, #396	; (adr r3, 8006d40 <CSE_step+0x1268>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f7f9 fd10 	bl	80005dc <__aeabi_dmul>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	f107 0108 	add.w	r1, r7, #8
 8006bc4:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0] = s_0;
 8006bc8:	f107 0308 	add.w	r3, r7, #8
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006bd4:	00c9      	lsls	r1, r1, #3
 8006bd6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006bda:	4401      	add	r1, r0
 8006bdc:	39d0      	subs	r1, #208	; 0xd0
 8006bde:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 9] = -s_0;
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006bee:	3109      	adds	r1, #9
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3bd0      	subs	r3, #208	; 0xd0
 8006c00:	e9c3 4500 	strd	r4, r5, [r3]
  for (iAcol_0 = 0; iAcol_0 < 9; iAcol_0++) {
 8006c04:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006c0e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	ddc6      	ble.n	8006ba4 <CSE_step+0x10cc>
  }

  iAcol_0 = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006c22:	e058      	b.n	8006cd6 <CSE_step+0x11fe>
    X2state[iAcol_0] += CSE_DW.x[0];
 8006c24:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006c2e:	4413      	add	r3, r2
 8006c30:	3bd0      	subs	r3, #208	; 0xd0
 8006c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c36:	4b44      	ldr	r3, [pc, #272]	; (8006d48 <CSE_step+0x1270>)
 8006c38:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006c3c:	f7f9 fb18 	bl	8000270 <__adddf3>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006c48:	00c9      	lsls	r1, r1, #3
 8006c4a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006c4e:	4401      	add	r1, r0
 8006c50:	39d0      	subs	r1, #208	; 0xd0
 8006c52:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 1] += CSE_DW.x[1];
 8006c56:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006c62:	4413      	add	r3, r2
 8006c64:	3bd0      	subs	r3, #208	; 0xd0
 8006c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c6a:	4b37      	ldr	r3, [pc, #220]	; (8006d48 <CSE_step+0x1270>)
 8006c6c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006c70:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006c74:	3401      	adds	r4, #1
 8006c76:	f7f9 fafb 	bl	8000270 <__adddf3>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	00e1      	lsls	r1, r4, #3
 8006c80:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006c84:	4401      	add	r1, r0
 8006c86:	39d0      	subs	r1, #208	; 0xd0
 8006c88:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[iAcol_0 + 2] += CSE_DW.x[2];
 8006c8c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006c90:	3302      	adds	r3, #2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006c98:	4413      	add	r3, r2
 8006c9a:	3bd0      	subs	r3, #208	; 0xd0
 8006c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <CSE_step+0x1270>)
 8006ca2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006ca6:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8006caa:	3402      	adds	r4, #2
 8006cac:	f7f9 fae0 	bl	8000270 <__adddf3>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	00e1      	lsls	r1, r4, #3
 8006cb6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8006cba:	4401      	add	r1, r0
 8006cbc:	39d0      	subs	r1, #208	; 0xd0
 8006cbe:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 8006cc2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006cc6:	3303      	adds	r3, #3
 8006cc8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006ccc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006cd6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	dda2      	ble.n	8006c24 <CSE_step+0x114c>
  }

  iAcol_0 = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006cea:	e018      	b.n	8006d1e <CSE_step+0x1246>
    CSE_S_x(&X2state[iAcol_0], &Y2[iAcol_0]);
 8006cec:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8006cf0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	18d0      	adds	r0, r2, r3
 8006cf8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8006cfc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4413      	add	r3, r2
 8006d04:	4619      	mov	r1, r3
 8006d06:	f7fe fa6f 	bl	80051e8 <CSE_S_x>
    iAcol_0 += 3;
 8006d0a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d0e:	3303      	adds	r3, #3
 8006d10:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 6; iAcol++) {
 8006d14:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006d1e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	dde2      	ble.n	8006cec <CSE_step+0x1214>
  }

  CSE_S_x(CSE_DW.x, tempY);
 8006d26:	f107 0310 	add.w	r3, r7, #16
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4808      	ldr	r0, [pc, #32]	; (8006d50 <CSE_step+0x1278>)
 8006d2e:	f7fe fa5b 	bl	80051e8 <CSE_S_x>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006d38:	e021      	b.n	8006d7e <CSE_step+0x12a6>
 8006d3a:	bf00      	nop
 8006d3c:	f3af 8000 	nop.w
 8006d40:	64b487da 	.word	0x64b487da
 8006d44:	3f5c60bf 	.word	0x3f5c60bf
 8006d48:	2001bd78 	.word	0x2001bd78
 8006d4c:	2001bd58 	.word	0x2001bd58
 8006d50:	2001bdc0 	.word	0x2001bdc0
    C[iAcol_0] = CSE_DW.x[iAcol_0];
 8006d54:	4ab8      	ldr	r2, [pc, #736]	; (8007038 <CSE_step+0x1560>)
 8006d56:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d5a:	3309      	adds	r3, #9
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006d68:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006d6c:	00c9      	lsls	r1, r1, #3
 8006d6e:	4401      	add	r1, r0
 8006d70:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006d74:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d78:	3301      	adds	r3, #1
 8006d7a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006d7e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	dde6      	ble.n	8006d54 <CSE_step+0x127c>
  }

  UTMeanCovSqrt_C2vgLQ4W(Wmean, Wcov, -999999.0, tempY, Y2, C, X2state, CSE_DW.x,
 8006d86:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8006d8a:	f107 0210 	add.w	r2, r7, #16
 8006d8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d92:	9304      	str	r3, [sp, #16]
 8006d94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	4ba8      	ldr	r3, [pc, #672]	; (800703c <CSE_step+0x1564>)
 8006d9c:	9302      	str	r3, [sp, #8]
 8006d9e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	460b      	mov	r3, r1
 8006dac:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8007030 <CSE_step+0x1558>
 8006db0:	49a3      	ldr	r1, [pc, #652]	; (8007040 <CSE_step+0x1568>)
 8006db2:	48a4      	ldr	r0, [pc, #656]	; (8007044 <CSE_step+0x156c>)
 8006db4:	f001 fc66 	bl	8008684 <UTMeanCovSqrt_C2vgLQ4W>
    Ss, R);
  memset(&R[0], 0, 9U * sizeof(real_T));
 8006db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dbc:	2248      	movs	r2, #72	; 0x48
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f012 fed1 	bl	8019b68 <memset>
  R[0] = 1.0;
 8006dc6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	4b9e      	ldr	r3, [pc, #632]	; (8007048 <CSE_step+0x1570>)
 8006dd0:	e9c1 2300 	strd	r2, r3, [r1]
  R[4] = 1.0;
 8006dd4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	4b9a      	ldr	r3, [pc, #616]	; (8007048 <CSE_step+0x1570>)
 8006dde:	e9c1 2308 	strd	r2, r3, [r1, #32]
  R[8] = 1.0;
 8006de2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	4b97      	ldr	r3, [pc, #604]	; (8007048 <CSE_step+0x1570>)
 8006dec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006df6:	e07e      	b.n	8006ef6 <CSE_step+0x141e>
    coffset = iAcol_0 * 3;
 8006df8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	4413      	add	r3, r2
 8006e02:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006e06:	2300      	movs	r3, #0
 8006e08:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006e0c:	e06a      	b.n	8006ee4 <CSE_step+0x140c>
      aoffset = iAcol * 3;
 8006e0e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006e12:	4613      	mov	r3, r2
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006e1c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006e20:	3301      	adds	r3, #1
 8006e22:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4413      	add	r3, r2
 8006e2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e2e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e32:	3303      	adds	r3, #3
 8006e34:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fbcc 	bl	80005dc <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006e50:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4413      	add	r3, r2
 8006e58:	e9d3 0100 	ldrd	r0, r1, [r3]
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006e5c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006e60:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006e6c:	f7f9 fbb6 	bl	80005dc <__aeabi_dmul>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 f9fa 	bl	8000270 <__adddf3>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4690      	mov	r8, r2
 8006e82:	4699      	mov	r9, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006e84:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006e88:	3302      	adds	r3, #2
 8006e8a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4413      	add	r3, r2
 8006e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e96:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006e9a:	3306      	adds	r3, #6
 8006e9c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	4413      	add	r3, r2
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 fb98 	bl	80005dc <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006eb4:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006eb8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ebc:	18d4      	adds	r4, r2, r3
        R[iAcol_0]) + Ss[aoffset + 2] * R[iAcol_0 + 6];
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 f9d3 	bl	8000270 <__adddf3>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
      R_0[coffset + iAcol] = (Ss[aoffset + 1] * R[iAcol_0 + 3] + Ss[aoffset] *
 8006ece:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8006ed2:	00e1      	lsls	r1, r4, #3
 8006ed4:	4401      	add	r1, r0
 8006ed6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8006eda:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8006ee4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	dd90      	ble.n	8006e0e <CSE_step+0x1336>
  for (iAcol_0 = 0; iAcol_0 < 3; iAcol_0++) {
 8006eec:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8006ef6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	f77f af7c 	ble.w	8006df8 <CSE_step+0x1320>
    }
  }

  iAcol_0 = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  iAcol = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006f12:	e077      	b.n	8007004 <CSE_step+0x152c>
    Y2[iAcol_0] = R_0[iAcol];
 8006f14:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006f18:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	4413      	add	r3, r2
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006f28:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8006f2c:	00c9      	lsls	r1, r1, #3
 8006f2e:	4401      	add	r1, r0
 8006f30:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 3] = CSE_P.Q_Value[coffset];
 8006f34:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f38:	1cd9      	adds	r1, r3, #3
 8006f3a:	4a44      	ldr	r2, [pc, #272]	; (800704c <CSE_step+0x1574>)
 8006f3c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f40:	3344      	adds	r3, #68	; 0x44
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006f4e:	00c9      	lsls	r1, r1, #3
 8006f50:	4401      	add	r1, r0
 8006f52:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 1] = R_0[iAcol + 1];
 8006f56:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006f60:	1c51      	adds	r1, r2, #1
 8006f62:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006f72:	00c9      	lsls	r1, r1, #3
 8006f74:	4401      	add	r1, r0
 8006f76:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 4] = CSE_P.Q_Value[coffset + 3];
 8006f7a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f7e:	3303      	adds	r3, #3
 8006f80:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006f84:	1d11      	adds	r1, r2, #4
 8006f86:	4a31      	ldr	r2, [pc, #196]	; (800704c <CSE_step+0x1574>)
 8006f88:	3344      	adds	r3, #68	; 0x44
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006f96:	00c9      	lsls	r1, r1, #3
 8006f98:	4401      	add	r1, r0
 8006f9a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 2] = R_0[iAcol + 2];
 8006f9e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006fa8:	1c91      	adds	r1, r2, #2
 8006faa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006fba:	00c9      	lsls	r1, r1, #3
 8006fbc:	4401      	add	r1, r0
 8006fbe:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[iAcol_0 + 5] = CSE_P.Q_Value[coffset + 6];
 8006fc2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006fc6:	3306      	adds	r3, #6
 8006fc8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8006fcc:	1d51      	adds	r1, r2, #5
 8006fce:	4a1f      	ldr	r2, [pc, #124]	; (800704c <CSE_step+0x1574>)
 8006fd0:	3344      	adds	r3, #68	; 0x44
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006fde:	00c9      	lsls	r1, r1, #3
 8006fe0:	4401      	add	r1, r0
 8006fe2:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 6;
 8006fe6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006fea:	3306      	adds	r3, #6
 8006fec:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
    iAcol += 3;
 8006ff0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006ff4:	3303      	adds	r3, #3
 8006ff6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  for (coffset = 0; coffset < 3; coffset++) {
 8006ffa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006ffe:	3301      	adds	r3, #1
 8007000:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8007004:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8007008:	2b02      	cmp	r3, #2
 800700a:	dd83      	ble.n	8006f14 <CSE_step+0x143c>
  }

  qr_DvOBrgQi(Y2, X2state, R);
 800700c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007010:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8007014:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007018:	4618      	mov	r0, r3
 800701a:	f004 fceb 	bl	800b9f4 <qr_DvOBrgQi>
  iAcol_0 = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8007024:	2300      	movs	r3, #0
 8007026:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800702a:	e04c      	b.n	80070c6 <CSE_step+0x15ee>
 800702c:	f3af 8000 	nop.w
 8007030:	00000000 	.word	0x00000000
 8007034:	c12e847e 	.word	0xc12e847e
 8007038:	2001bd78 	.word	0x2001bd78
 800703c:	2001bdc0 	.word	0x2001bdc0
 8007040:	0801aef0 	.word	0x0801aef0
 8007044:	0801aee0 	.word	0x0801aee0
 8007048:	3ff00000 	.word	0x3ff00000
 800704c:	20000088 	.word	0x20000088
    CSE_DW.P[iAcol_0] = R[iAcol];
 8007050:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8007054:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4413      	add	r3, r2
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	481e      	ldr	r0, [pc, #120]	; (80070dc <CSE_step+0x1604>)
 8007062:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8007066:	00c9      	lsls	r1, r1, #3
 8007068:	4401      	add	r1, r0
 800706a:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 1] = R[iAcol + 3];
 800706e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007072:	3303      	adds	r3, #3
 8007074:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8007078:	1c51      	adds	r1, r2, #1
 800707a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	4815      	ldr	r0, [pc, #84]	; (80070dc <CSE_step+0x1604>)
 8007088:	00c9      	lsls	r1, r1, #3
 800708a:	4401      	add	r1, r0
 800708c:	e9c1 2300 	strd	r2, r3, [r1]
    CSE_DW.P[iAcol_0 + 2] = R[iAcol + 6];
 8007090:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007094:	3306      	adds	r3, #6
 8007096:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800709a:	1c91      	adds	r1, r2, #2
 800709c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	4413      	add	r3, r2
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	480c      	ldr	r0, [pc, #48]	; (80070dc <CSE_step+0x1604>)
 80070aa:	00c9      	lsls	r1, r1, #3
 80070ac:	4401      	add	r1, r0
 80070ae:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol_0 += 3;
 80070b2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80070b6:	3303      	adds	r3, #3
 80070b8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  for (iAcol = 0; iAcol < 3; iAcol++) {
 80070bc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80070c0:	3301      	adds	r3, #1
 80070c2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80070c6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	ddc0      	ble.n	8007050 <CSE_step+0x1578>
  }
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80070d6:	46bd      	mov	sp, r7
 80070d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070dc:	2001bd78 	.word	0x2001bd78

080070e0 <CSE_initialize>:

void CSE_initialize(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN(sizeof(real_T));
 80070e4:	2008      	movs	r0, #8
 80070e6:	f006 f805 	bl	800d0f4 <rt_InitInfAndNaN>
  memcpy(&CSE_DW.P[0], &CSE_P.DataStoreMemoryP_InitialValue[0], 9U * sizeof
 80070ea:	2248      	movs	r2, #72	; 0x48
 80070ec:	490b      	ldr	r1, [pc, #44]	; (800711c <CSE_initialize+0x3c>)
 80070ee:	480c      	ldr	r0, [pc, #48]	; (8007120 <CSE_initialize+0x40>)
 80070f0:	f012 fd2c 	bl	8019b4c <memcpy>
         (real_T));
  CSE_DW.x[0] = CSE_P.DataStoreMemoryx_InitialValue[0];
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <CSE_initialize+0x44>)
 80070f6:	e9d3 23ae 	ldrd	r2, r3, [r3, #696]	; 0x2b8
 80070fa:	4909      	ldr	r1, [pc, #36]	; (8007120 <CSE_initialize+0x40>)
 80070fc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  CSE_DW.x[1] = CSE_P.DataStoreMemoryx_InitialValue[1];
 8007100:	4b08      	ldr	r3, [pc, #32]	; (8007124 <CSE_initialize+0x44>)
 8007102:	e9d3 23b0 	ldrd	r2, r3, [r3, #704]	; 0x2c0
 8007106:	4906      	ldr	r1, [pc, #24]	; (8007120 <CSE_initialize+0x40>)
 8007108:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  CSE_DW.x[2] = CSE_P.DataStoreMemoryx_InitialValue[2];
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <CSE_initialize+0x44>)
 800710e:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8007112:	4903      	ldr	r1, [pc, #12]	; (8007120 <CSE_initialize+0x40>)
 8007114:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8007118:	bf00      	nop
 800711a:	bd80      	pop	{r7, pc}
 800711c:	200002f8 	.word	0x200002f8
 8007120:	2001bd78 	.word	0x2001bd78
 8007124:	20000088 	.word	0x20000088

08007128 <SIM0_step>:
ExtU_SIM0_T SIM0_U;
ExtY_SIM0_T SIM0_Y;
static RT_MODEL_SIM0_T SIM0_M_;
RT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;
void SIM0_step(void)
{
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
  int32_T i;
  int32_T iU;
  int32_T rtb_is_charge;
  boolean_T rtb_Logic_idx_0;
  boolean_T rtb_Logic_p_idx_0;
  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;
 8007134:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <SIM0_step+0x90>)
 8007136:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007142:	f101 0118 	add.w	r1, r1, #24
 8007146:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <SIM0_step+0x94>)
 800714c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8007150:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <SIM0_step+0x94>)
 8007152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007156:	a316      	add	r3, pc, #88	; (adr r3, 80071b0 <SIM0_step+0x88>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 fa3e 	bl	80005dc <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4650      	mov	r0, sl
 8007166:	4659      	mov	r1, fp
 8007168:	f7f9 fb62 	bl	8000830 <__aeabi_ddiv>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
                SIM0_DW.Memory9_PreviousInput);
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <SIM0_step+0x90>)
 8007176:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *
 800717e:	f7f9 fa2d 	bl	80005dc <__aeabi_dmul>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	ec43 2b17 	vmov	d7, r2, r3
 800718a:	eeb0 0a47 	vmov.f32	s0, s14
 800718e:	eef0 0a67 	vmov.f32	s1, s15
 8007192:	f012 fe09 	bl	8019da8 <exp>
 8007196:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800719a:	f103 0308 	add.w	r3, r3, #8
 800719e:	ed83 0b00 	vstr	d0, [r3]
  for (i = 0; i < 126; i++) {
 80071a2:	2300      	movs	r3, #0
 80071a4:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80071a8:	f102 020c 	add.w	r2, r2, #12
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	e1df      	b.n	8007570 <SIM0_step+0x448>
 80071b0:	00000000 	.word	0x00000000
 80071b4:	40ac2000 	.word	0x40ac2000
 80071b8:	2001bdd8 	.word	0x2001bdd8
 80071bc:	20000360 	.word	0x20000360
    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];
 80071c0:	4aca      	ldr	r2, [pc, #808]	; (80074ec <SIM0_step+0x3c4>)
 80071c2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80071c6:	f103 030c 	add.w	r3, r3, #12
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3305      	adds	r3, #5
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	4413      	add	r3, r2
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f607 70c8 	addw	r0, r7, #4040	; 0xfc8
 80071da:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80071de:	f101 010c 	add.w	r1, r1, #12
 80071e2:	6809      	ldr	r1, [r1, #0]
 80071e4:	00c9      	lsls	r1, r1, #3
 80071e6:	4401      	add	r1, r0
 80071e8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 80071ec:	4abf      	ldr	r2, [pc, #764]	; (80074ec <SIM0_step+0x3c4>)
 80071ee:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80071f2:	f103 030c 	add.w	r3, r3, #12
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	e9d3 0100 	ldrd	r0, r1, [r3]
      SIM0_DW.Memory10_PreviousInput[i];
 8007204:	4ab9      	ldr	r2, [pc, #740]	; (80074ec <SIM0_step+0x3c4>)
 8007206:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800720a:	f103 030c 	add.w	r3, r3, #12
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f203 1381 	addw	r3, r3, #385	; 0x181
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	4413      	add	r3, r2
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /
 800721c:	f7f9 fb08 	bl	8000830 <__aeabi_ddiv>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007228:	f101 0108 	add.w	r1, r1, #8
 800722c:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);
 8007230:	220c      	movs	r2, #12
 8007232:	49af      	ldr	r1, [pc, #700]	; (80074f0 <SIM0_step+0x3c8>)
 8007234:	48af      	ldr	r0, [pc, #700]	; (80074f4 <SIM0_step+0x3cc>)
 8007236:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800723a:	f103 0308 	add.w	r3, r3, #8
 800723e:	ed93 0b00 	vldr	d0, [r3]
 8007242:	f003 fb65 	bl	800a910 <look1_binlxpw>
 8007246:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800724a:	ed83 0b00 	vstr	d0, [r3]
    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);
 800724e:	220c      	movs	r2, #12
 8007250:	49a9      	ldr	r1, [pc, #676]	; (80074f8 <SIM0_step+0x3d0>)
 8007252:	48a8      	ldr	r0, [pc, #672]	; (80074f4 <SIM0_step+0x3cc>)
 8007254:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007258:	f103 0308 	add.w	r3, r3, #8
 800725c:	ed93 0b00 	vldr	d0, [r3]
 8007260:	f003 fb56 	bl	800a910 <look1_binlxpw>
 8007264:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007268:	f103 0318 	add.w	r3, r3, #24
 800726c:	ed83 0b00 	vstr	d0, [r3]
    rtb_Product9 = rtb_Product1_n * rtb_is_drive;
 8007270:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007274:	f103 0318 	add.w	r3, r3, #24
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007284:	f7f9 f9aa 	bl	80005dc <__aeabi_dmul>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007290:	f101 0118 	add.w	r1, r1, #24
 8007294:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 8007298:	220c      	movs	r2, #12
 800729a:	4998      	ldr	r1, [pc, #608]	; (80074fc <SIM0_step+0x3d4>)
 800729c:	4895      	ldr	r0, [pc, #596]	; (80074f4 <SIM0_step+0x3cc>)
 800729e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80072a2:	f103 0308 	add.w	r3, r3, #8
 80072a6:	ed93 0b00 	vldr	d0, [r3]
 80072aa:	f003 fb31 	bl	800a910 <look1_binlxpw>
 80072ae:	ec51 0b10 	vmov	r0, r1, d0
 80072b2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ffd9 	bl	8000270 <__adddf3>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4610      	mov	r0, r2
 80072c4:	4619      	mov	r1, r3
      SIM0_P.Rp, 12U)) * SIM0_P.Ts;
 80072c6:	4b8e      	ldr	r3, [pc, #568]	; (8007500 <SIM0_step+0x3d8>)
 80072c8:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 80072cc:	f7f9 f986 	bl	80005dc <__aeabi_dmul>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80072d8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 80072dc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80072e0:	f103 0318 	add.w	r3, r3, #24
 80072e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	f7f8 ffc0 	bl	8000270 <__adddf3>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4610      	mov	r0, r2
 80072f6:	4619      	mov	r1, r3
 80072f8:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f7f8 ffb6 	bl	8000270 <__adddf3>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007310:	f103 0318 	add.w	r3, r3, #24
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f7f9 f960 	bl	80005dc <__aeabi_dmul>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4692      	mov	sl, r2
 8007322:	469b      	mov	fp, r3
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 8007324:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8007328:	f103 0318 	add.w	r3, r3, #24
 800732c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	f7f8 ff9c 	bl	8000270 <__adddf3>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007344:	f7f8 ff92 	bl	800026c <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4610      	mov	r0, r2
 800734e:	4619      	mov	r1, r3
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <SIM0_step+0x3c4>)
 8007352:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (rtb_Product1_n - 2.0 * rtb_Product9) *
 800735a:	f7f9 f93f 	bl	80005dc <__aeabi_dmul>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 8007362:	4650      	mov	r0, sl
 8007364:	4659      	mov	r1, fp
 8007366:	f7f8 ff83 	bl	8000270 <__adddf3>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	e9c7 2300 	strd	r2, r3, [r7]
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 8007372:	4b63      	ldr	r3, [pc, #396]	; (8007500 <SIM0_step+0x3d8>)
 8007374:	e9d3 ab3c 	ldrd	sl, fp, [r3, #240]	; 0xf0
 8007378:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800737c:	f103 0318 	add.w	r3, r3, #24
 8007380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	f7f8 ff72 	bl	8000270 <__adddf3>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4650      	mov	r0, sl
 8007392:	4659      	mov	r1, fp
 8007394:	f7f8 ff6a 	bl	800026c <__aeabi_dsub>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80073a0:	4a52      	ldr	r2, [pc, #328]	; (80074ec <SIM0_step+0x3c4>)
 80073a2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80073a6:	f103 030c 	add.w	r3, r3, #12
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3383      	adds	r3, #131	; 0x83
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f9 f911 	bl	80005dc <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *
 80073be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c2:	f7f8 ff53 	bl	800026c <__aeabi_dsub>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4692      	mov	sl, r2
 80073cc:	469b      	mov	fp, r3
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80073ce:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80073d2:	f103 0318 	add.w	r3, r3, #24
 80073d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	f7f8 ff47 	bl	8000270 <__adddf3>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4610      	mov	r0, r2
 80073e8:	4619      	mov	r1, r3
      SIM0_P.Ts);
 80073ea:	4b45      	ldr	r3, [pc, #276]	; (8007500 <SIM0_step+0x3d8>)
 80073ec:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +
 80073f0:	f7f8 ff3e 	bl	8000270 <__adddf3>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +
 80073f8:	4650      	mov	r0, sl
 80073fa:	4659      	mov	r1, fp
 80073fc:	f7f9 fa18 	bl	8000830 <__aeabi_ddiv>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007408:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,
 800740c:	220c      	movs	r2, #12
 800740e:	493d      	ldr	r1, [pc, #244]	; (8007504 <SIM0_step+0x3dc>)
 8007410:	4838      	ldr	r0, [pc, #224]	; (80074f4 <SIM0_step+0x3cc>)
 8007412:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007416:	f103 0308 	add.w	r3, r3, #8
 800741a:	ed93 0b00 	vldr	d0, [r3]
 800741e:	f003 fa77 	bl	800a910 <look1_binlxpw>
 8007422:	ec53 2b10 	vmov	r2, r3, d0
 8007426:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800742a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742e:	f7f8 ff1f 	bl	8000270 <__adddf3>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800743a:	f101 0118 	add.w	r1, r1, #24
 800743e:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_P.ocv, 12U);
    SIM0_Y.cell_voltages[i] = rtb_is_drive;
 8007442:	4a31      	ldr	r2, [pc, #196]	; (8007508 <SIM0_step+0x3e0>)
 8007444:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007448:	f103 030c 	add.w	r3, r3, #12
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	18d1      	adds	r1, r2, r3
 8007454:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007458:	f103 0318 	add.w	r3, r3, #24
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_socs[i] = rtb_Memory22;
 8007464:	4a28      	ldr	r2, [pc, #160]	; (8007508 <SIM0_step+0x3e0>)
 8007466:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800746a:	f103 030c 	add.w	r3, r3, #12
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3386      	adds	r3, #134	; 0x86
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	18d1      	adds	r1, r2, r3
 8007476:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800747a:	f103 0308 	add.w	r3, r3, #8
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];
 8007486:	4a19      	ldr	r2, [pc, #100]	; (80074ec <SIM0_step+0x3c4>)
 8007488:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800748c:	f103 030c 	add.w	r3, r3, #12
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f203 1381 	addw	r3, r3, #385	; 0x181
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	481a      	ldr	r0, [pc, #104]	; (8007508 <SIM0_step+0x3e0>)
 80074a0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80074a4:	f101 010c 	add.w	r1, r1, #12
 80074a8:	6809      	ldr	r1, [r1, #0]
 80074aa:	f501 7182 	add.w	r1, r1, #260	; 0x104
 80074ae:	00c9      	lsls	r1, r1, #3
 80074b0:	4401      	add	r1, r0
 80074b2:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;
 80074b6:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <SIM0_step+0x3c4>)
 80074b8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80074bc:	f103 030c 	add.w	r3, r3, #12
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f203 1381 	addw	r3, r3, #385	; 0x181
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4413      	add	r3, r2
 80074ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074ce:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 80074d2:	f103 0308 	add.w	r3, r3, #8
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f9 f87f 	bl	80005dc <__aeabi_dmul>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	f607 30d8 	addw	r0, r7, #3032	; 0xbd8
 80074e6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80074ea:	e00f      	b.n	800750c <SIM0_step+0x3e4>
 80074ec:	2001bdd8 	.word	0x2001bdd8
 80074f0:	200003e8 	.word	0x200003e8
 80074f4:	20000e80 	.word	0x20000e80
 80074f8:	20000ee8 	.word	0x20000ee8
 80074fc:	20000380 	.word	0x20000380
 8007500:	20000360 	.word	0x20000360
 8007504:	20000e18 	.word	0x20000e18
 8007508:	2001d638 	.word	0x2001d638
 800750c:	f101 010c 	add.w	r1, r1, #12
 8007510:	6809      	ldr	r1, [r1, #0]
 8007512:	00c9      	lsls	r1, r1, #3
 8007514:	4401      	add	r1, r0
 8007516:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rsz[i] = rtb_Product1_n;
 800751a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800751e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007522:	f103 030c 	add.w	r3, r3, #12
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	18d1      	adds	r1, r2, r3
 800752c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Rpz[i] = rtb_is_drive;
 8007538:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800753c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007540:	f103 030c 	add.w	r3, r3, #12
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	18d1      	adds	r1, r2, r3
 800754a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800754e:	f103 0318 	add.w	r3, r3, #24
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 800755a:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800755e:	f103 030c 	add.w	r3, r3, #12
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800756a:	f102 020c 	add.w	r2, r2, #12
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007574:	f103 030c 	add.w	r3, r3, #12
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b7d      	cmp	r3, #125	; 0x7d
 800757c:	f77f ae20 	ble.w	80071c0 <SIM0_step+0x98>
  }

  rtb_Exp = SIM0_P.Ts * rtb_Memory20;
 8007580:	4ba2      	ldr	r3, [pc, #648]	; (800780c <SIM0_step+0x6e4>)
 8007582:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 8007586:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800758a:	f101 0118 	add.w	r1, r1, #24
 800758e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007592:	f7f9 f823 	bl	80005dc <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800759e:	f101 0108 	add.w	r1, r1, #8
 80075a2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80075a6:	2300      	movs	r3, #0
 80075a8:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80075ac:	f102 020c 	add.w	r2, r2, #12
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e067      	b.n	8007684 <SIM0_step+0x55c>
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 80075b4:	4a96      	ldr	r2, [pc, #600]	; (8007810 <SIM0_step+0x6e8>)
 80075b6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80075ba:	f103 030c 	add.w	r3, r3, #12
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4413      	add	r3, r2
 80075c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075cc:	4b8f      	ldr	r3, [pc, #572]	; (800780c <SIM0_step+0x6e4>)
 80075ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80075d2:	f7f9 f92d 	bl	8000830 <__aeabi_ddiv>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4610      	mov	r0, r2
 80075dc:	4619      	mov	r1, r3
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 80075de:	4a8c      	ldr	r2, [pc, #560]	; (8007810 <SIM0_step+0x6e8>)
 80075e0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80075e4:	f103 030c 	add.w	r3, r3, #12
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4413      	add	r3, r2
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 fff1 	bl	80005dc <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4610      	mov	r0, r2
 8007600:	4619      	mov	r1, r3
 8007602:	4b82      	ldr	r3, [pc, #520]	; (800780c <SIM0_step+0x6e4>)
 8007604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007608:	3318      	adds	r3, #24
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 ffe5 	bl	80005dc <__aeabi_dmul>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4692      	mov	sl, r2
 8007618:	469b      	mov	fp, r3
      SIM0_DW.Memory_PreviousInput[i]);
 800761a:	4a7d      	ldr	r2, [pc, #500]	; (8007810 <SIM0_step+0x6e8>)
 800761c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007620:	f103 030c 	add.w	r3, r3, #12
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f203 1303 	addw	r3, r3, #259	; 0x103
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	4413      	add	r3, r2
 800762e:	e9d3 0100 	ldrd	r0, r1, [r3]
      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +
 8007632:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007636:	f103 0308 	add.w	r3, r3, #8
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f7f8 fe17 	bl	8000270 <__adddf3>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4650      	mov	r0, sl
 8007648:	4659      	mov	r1, fp
 800764a:	f7f8 fe11 	bl	8000270 <__adddf3>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4610      	mov	r0, r2
 8007654:	4619      	mov	r1, r3
    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short
 8007656:	f107 0318 	add.w	r3, r7, #24
 800765a:	3b10      	subs	r3, #16
 800765c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007660:	f102 020c 	add.w	r2, r2, #12
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	00d2      	lsls	r2, r2, #3
 8007668:	4413      	add	r3, r2
 800766a:	e9c3 0100 	strd	r0, r1, [r3]
  for (i = 0; i < 126; i++) {
 800766e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007672:	f103 030c 	add.w	r3, r3, #12
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800767e:	f102 020c 	add.w	r2, r2, #12
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007688:	f103 030c 	add.w	r3, r3, #12
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b7d      	cmp	r3, #125	; 0x7d
 8007690:	dd90      	ble.n	80075b4 <SIM0_step+0x48c>
  }

  boolean_T rtb_Logic_idx_1;
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 8007692:	4b5f      	ldr	r3, [pc, #380]	; (8007810 <SIM0_step+0x6e8>)
 8007694:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	f7f9 fa02 	bl	8000aac <__aeabi_dcmpeq>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <SIM0_step+0x58a>
 80076ae:	2602      	movs	r6, #2
 80076b0:	e000      	b.n	80076b4 <SIM0_step+0x58c>
 80076b2:	2600      	movs	r6, #0
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80076b4:	4b56      	ldr	r3, [pc, #344]	; (8007810 <SIM0_step+0x6e8>)
 80076b6:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80076ba:	3308      	adds	r3, #8
 80076bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076c0:	2301      	movs	r3, #1
 80076c2:	469a      	mov	sl, r3
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	f7f9 f9ee 	bl	8000aac <__aeabi_dcmpeq>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <SIM0_step+0x5b2>
 80076d6:	2300      	movs	r3, #0
 80076d8:	469a      	mov	sl, r3
 80076da:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80076de:	4433      	add	r3, r6
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80076e0:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_m);
 80076e2:	4b4b      	ldr	r3, [pc, #300]	; (8007810 <SIM0_step+0x6e8>)
 80076e4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80076e8:	3318      	adds	r3, #24
 80076ea:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +
 80076ec:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +
 80076ee:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80076f2:	f102 020c 	add.w	r2, r2, #12
 80076f6:	6013      	str	r3, [r2, #0]
  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];
 80076f8:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80076fc:	f103 030c 	add.w	r3, r3, #12
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a42      	ldr	r2, [pc, #264]	; (800780c <SIM0_step+0x6e4>)
 8007704:	4413      	add	r3, r2
 8007706:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800770a:	3318      	adds	r3, #24
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007712:	f102 0217 	add.w	r2, r2, #23
 8007716:	7013      	strb	r3, [r2, #0]
  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];
 8007718:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800771c:	f103 030c 	add.w	r3, r3, #12
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	4a39      	ldr	r2, [pc, #228]	; (800780c <SIM0_step+0x6e4>)
 8007726:	4413      	add	r3, r2
 8007728:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800772c:	3318      	adds	r3, #24
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007734:	f102 0216 	add.w	r2, r2, #22
 8007738:	7013      	strb	r3, [r2, #0]
  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;
 800773a:	4a36      	ldr	r2, [pc, #216]	; (8007814 <SIM0_step+0x6ec>)
 800773c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007740:	f103 0317 	add.w	r3, r3, #23
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	7013      	strb	r3, [r2, #0]
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8007748:	4b31      	ldr	r3, [pc, #196]	; (8007810 <SIM0_step+0x6e8>)
 800774a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800774e:	3310      	adds	r3, #16
 8007750:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	f7f9 f9a6 	bl	8000aac <__aeabi_dcmpeq>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <SIM0_step+0x642>
 8007766:	2602      	movs	r6, #2
 8007768:	e000      	b.n	800776c <SIM0_step+0x644>
 800776a:	2600      	movs	r6, #0
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 800776c:	4b28      	ldr	r3, [pc, #160]	; (8007810 <SIM0_step+0x6e8>)
 800776e:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8007772:	3318      	adds	r3, #24
 8007774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007778:	2301      	movs	r3, #1
 800777a:	469a      	mov	sl, r3
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	f7f9 f992 	bl	8000aac <__aeabi_dcmpeq>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <SIM0_step+0x66a>
 800778e:	2300      	movs	r3, #0
 8007790:	469a      	mov	sl, r3
 8007792:	fa5f f38a 	uxtb.w	r3, sl
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 8007796:	4433      	add	r3, r6
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 8007798:	005a      	lsls	r2, r3, #1
                SIM0_DW.Memory_PreviousInput_c);
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <SIM0_step+0x6e8>)
 800779c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80077a0:	3319      	adds	r3, #25
 80077a2:	781b      	ldrb	r3, [r3, #0]
                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +
 80077a4:	4413      	add	r3, r2
  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +
 80077a6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80077aa:	f102 020c 	add.w	r2, r2, #12
 80077ae:	6013      	str	r3, [r2, #0]
  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];
 80077b0:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077b4:	f103 030c 	add.w	r3, r3, #12
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a14      	ldr	r2, [pc, #80]	; (800780c <SIM0_step+0x6e4>)
 80077bc:	4413      	add	r3, r2
 80077be:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80077c2:	3308      	adds	r3, #8
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 80077ca:	f102 0215 	add.w	r2, r2, #21
 80077ce:	7013      	strb	r3, [r2, #0]
  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;
 80077d0:	4a10      	ldr	r2, [pc, #64]	; (8007814 <SIM0_step+0x6ec>)
 80077d2:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80077d6:	f103 0315 	add.w	r3, r3, #21
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	7053      	strb	r3, [r2, #1]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 80077de:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80077e2:	f103 0316 	add.w	r3, r3, #22
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d015      	beq.n	8007818 <SIM0_step+0x6f0>
 80077ec:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80077f0:	f103 030c 	add.w	r3, r3, #12
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	4a04      	ldr	r2, [pc, #16]	; (800780c <SIM0_step+0x6e4>)
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8007800:	3308      	adds	r3, #8
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7f8 fe6f 	bl	80004e8 <__aeabi_ui2d>
 800780a:	e009      	b.n	8007820 <SIM0_step+0x6f8>
 800780c:	20000360 	.word	0x20000360
 8007810:	2001bdd8 	.word	0x2001bdd8
 8007814:	2001d638 	.word	0x2001d638
 8007818:	f04f 0000 	mov.w	r0, #0
 800781c:	f04f 0100 	mov.w	r1, #0
    SIM0_DW.Memory5_PreviousInput;
 8007820:	4bba      	ldr	r3, [pc, #744]	; (8007b0c <SIM0_step+0x9e4>)
 8007822:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *
 800782a:	f7f8 fed7 	bl	80005dc <__aeabi_dmul>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007836:	f101 0108 	add.w	r1, r1, #8
 800783a:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.SC_probe = rtb_Memory22;
 800783e:	49b4      	ldr	r1, [pc, #720]	; (8007b10 <SIM0_step+0x9e8>)
 8007840:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007844:	f103 0308 	add.w	r3, r3, #8
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;
 8007850:	4bae      	ldr	r3, [pc, #696]	; (8007b0c <SIM0_step+0x9e4>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800785a:	f101 0108 	add.w	r1, r1, #8
 800785e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007862:	f7f8 febb 	bl	80005dc <__aeabi_dmul>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800786e:	f101 0108 	add.w	r1, r1, #8
 8007872:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_Y.precharge_closed = rtb_Exp;
 8007876:	49a6      	ldr	r1, [pc, #664]	; (8007b10 <SIM0_step+0x9e8>)
 8007878:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800787c:	f103 0308 	add.w	r3, r3, #8
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];
 8007888:	4ba0      	ldr	r3, [pc, #640]	; (8007b0c <SIM0_step+0x9e4>)
 800788a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800788e:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007892:	f101 0108 	add.w	r1, r1, #8
 8007896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800789a:	f7f8 fe9f 	bl	80005dc <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80078a6:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];
 80078aa:	4b98      	ldr	r3, [pc, #608]	; (8007b0c <SIM0_step+0x9e4>)
 80078ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80078b0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80078b4:	f101 0108 	add.w	r1, r1, #8
 80078b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078bc:	f7f8 fe8e 	bl	80005dc <__aeabi_dmul>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80078c8:	f101 0108 	add.w	r1, r1, #8
 80078cc:	e9c1 2300 	strd	r2, r3, [r1]
  i = 1;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80078d6:	f102 020c 	add.w	r2, r2, #12
 80078da:	6013      	str	r3, [r2, #0]
  rtb_is_charge = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80078e2:	f102 0204 	add.w	r2, r2, #4
 80078e6:	6013      	str	r3, [r2, #0]
  rtb_is_drive = 0.0;
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80078f4:	f101 0118 	add.w	r1, r1, #24
 80078f8:	e9c1 2300 	strd	r2, r3, [r1]
  if (SIM0_DW.Memory6_PreviousInput != 0.0) {
 80078fc:	4b83      	ldr	r3, [pc, #524]	; (8007b0c <SIM0_step+0x9e4>)
 80078fe:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007902:	3308      	adds	r3, #8
 8007904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	f7f9 f8cc 	bl	8000aac <__aeabi_dcmpeq>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <SIM0_step+0x80c>
    i = 2;
 800791a:	2302      	movs	r3, #2
 800791c:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007920:	f102 020c 	add.w	r2, r2, #12
 8007924:	6013      	str	r3, [r2, #0]
    rtb_is_charge = 1;
 8007926:	2301      	movs	r3, #1
 8007928:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 800792c:	f102 0204 	add.w	r2, r2, #4
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e01d      	b.n	8007970 <SIM0_step+0x848>
  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {
 8007934:	4b75      	ldr	r3, [pc, #468]	; (8007b0c <SIM0_step+0x9e4>)
 8007936:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800793a:	3310      	adds	r3, #16
 800793c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	f7f9 f8b0 	bl	8000aac <__aeabi_dcmpeq>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10e      	bne.n	8007970 <SIM0_step+0x848>
    i = 3;
 8007952:	2303      	movs	r3, #3
 8007954:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007958:	f102 020c 	add.w	r2, r2, #12
 800795c:	6013      	str	r3, [r2, #0]
    rtb_is_drive = 1.0;
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	4b6c      	ldr	r3, [pc, #432]	; (8007b14 <SIM0_step+0x9ec>)
 8007964:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007968:	f101 0118 	add.w	r1, r1, #24
 800796c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;
 8007970:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800797c:	f101 0108 	add.w	r1, r1, #8
 8007980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007984:	f7f8 fe2a 	bl	80005dc <__aeabi_dmul>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007990:	f101 0118 	add.w	r1, r1, #24
 8007994:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;
 8007998:	4b5c      	ldr	r3, [pc, #368]	; (8007b0c <SIM0_step+0x9e4>)
 800799a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800799e:	3318      	adds	r3, #24
 80079a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079a4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80079a8:	f103 0318 	add.w	r3, r3, #24
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fe14 	bl	80005dc <__aeabi_dmul>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80079bc:	f101 0118 	add.w	r1, r1, #24
 80079c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c4:	f7f8 fe0a 	bl	80005dc <__aeabi_dmul>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80079d0:	f101 0118 	add.w	r1, r1, #24
 80079d4:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_y = rtb_Memory15[0];
 80079d8:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80079e4:	f101 0110 	add.w	r1, r1, #16
 80079e8:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 80079ec:	2300      	movs	r3, #0
 80079ee:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80079f2:	f102 0208 	add.w	r2, r2, #8
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	e026      	b.n	8007a48 <SIM0_step+0x920>
    rtb_y += rtb_Memory15[iU + 1];
 80079fa:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80079fe:	f103 0308 	add.w	r3, r3, #8
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007a16:	f101 0110 	add.w	r1, r1, #16
 8007a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a1e:	f7f8 fc27 	bl	8000270 <__adddf3>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007a2a:	f101 0110 	add.w	r1, r1, #16
 8007a2e:	e9c1 2300 	strd	r2, r3, [r1]
  for (iU = 0; iU < 125; iU++) {
 8007a32:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007a36:	f103 0308 	add.w	r3, r3, #8
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007a42:	f102 0208 	add.w	r2, r2, #8
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007a4c:	f103 0308 	add.w	r3, r3, #8
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b7c      	cmp	r3, #124	; 0x7c
 8007a54:	ddd1      	ble.n	80079fa <SIM0_step+0x8d2>
  }

  if (SIM0_DW.Memory16_PreviousInput != 0.0) {
 8007a56:	4b2d      	ldr	r3, [pc, #180]	; (8007b0c <SIM0_step+0x9e4>)
 8007a58:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	f7f9 f81f 	bl	8000aac <__aeabi_dcmpeq>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d151      	bne.n	8007b18 <SIM0_step+0x9f0>
    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;
 8007a74:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <SIM0_step+0x9e4>)
 8007a76:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a7e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007a82:	f103 0310 	add.w	r3, r3, #16
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f7f8 fbef 	bl	800026c <__aeabi_dsub>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007a96:	f101 0110 	add.w	r1, r1, #16
 8007a9a:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Current < 0.0) {
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007aaa:	f101 0110 	add.w	r1, r1, #16
 8007aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab2:	f7f9 f805 	bl	8000ac0 <__aeabi_dcmplt>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d009      	beq.n	8007ad0 <SIM0_step+0x9a8>
      rtb_Current = 0.0;
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007ac8:	f101 0110 	add.w	r1, r1, #16
 8007acc:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {
 8007ad0:	4b0e      	ldr	r3, [pc, #56]	; (8007b0c <SIM0_step+0x9e4>)
 8007ad2:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007ad6:	3310      	adds	r3, #16
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007ae0:	f101 0110 	add.w	r1, r1, #16
 8007ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae8:	f7f9 f808 	bl	8000afc <__aeabi_dcmpgt>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01c      	beq.n	8007b2c <SIM0_step+0xa04>
      rtb_Current = SIM0_DW.Memory18_PreviousInput;
 8007af2:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <SIM0_step+0x9e4>)
 8007af4:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007af8:	3310      	adds	r3, #16
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b02:	f101 0110 	add.w	r1, r1, #16
 8007b06:	e9c1 2300 	strd	r2, r3, [r1]
 8007b0a:	e00f      	b.n	8007b2c <SIM0_step+0xa04>
 8007b0c:	2001bdd8 	.word	0x2001bdd8
 8007b10:	2001d638 	.word	0x2001d638
 8007b14:	3ff00000 	.word	0x3ff00000
    }
  } else {
    rtb_Current = 0.0;
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b24:	f101 0110 	add.w	r1, r1, #16
 8007b28:	e9c1 2300 	strd	r2, r3, [r1]
  }

  rtb_current = 0.0;
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b38:	e9c1 2300 	strd	r2, r3, [r1]
  if (i == 1) {
 8007b3c:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007b40:	f103 030c 	add.w	r3, r3, #12
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d109      	bne.n	8007b5e <SIM0_step+0xa36>
    rtb_Exp = -1.0;
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	4bc0      	ldr	r3, [pc, #768]	; (8007e50 <SIM0_step+0xd28>)
 8007b50:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007b54:	f101 0108 	add.w	r1, r1, #8
 8007b58:	e9c1 2300 	strd	r2, r3, [r1]
 8007b5c:	e1d3      	b.n	8007f06 <SIM0_step+0xdde>
  } else if (i == 2) {
 8007b5e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007b62:	f103 030c 	add.w	r3, r3, #12
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f040 8099 	bne.w	8007ca0 <SIM0_step+0xb78>
    if (rtb_Memory22 != 0.0) {
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007b7a:	f101 0108 	add.w	r1, r1, #8
 8007b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b82:	f7f8 ff93 	bl	8000aac <__aeabi_dcmpeq>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d17f      	bne.n	8007c8c <SIM0_step+0xb64>
      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b9c:	f7f8 ff86 	bl	8000aac <__aeabi_dcmpeq>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <SIM0_step+0xa9c>
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007bb2:	f101 0108 	add.w	r1, r1, #8
 8007bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bba:	f7f8 ff77 	bl	8000aac <__aeabi_dcmpeq>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d141      	bne.n	8007c48 <SIM0_step+0xb20>
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007bc4:	4ba3      	ldr	r3, [pc, #652]	; (8007e54 <SIM0_step+0xd2c>)
 8007bc6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007bca:	3318      	adds	r3, #24
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007bd4:	f101 0110 	add.w	r1, r1, #16
 8007bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bdc:	f7f8 fb46 	bl	800026c <__aeabi_dsub>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4610      	mov	r0, r2
 8007be6:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007be8:	4b9a      	ldr	r3, [pc, #616]	; (8007e54 <SIM0_step+0xd2c>)
 8007bea:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007bee:	3318      	adds	r3, #24
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +
 8007bf4:	f7f8 fb3c 	bl	8000270 <__adddf3>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c00:	f101 0108 	add.w	r1, r1, #8
 8007c04:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;
 8007c08:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007c0c:	f103 0304 	add.w	r3, r3, #4
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	f7f8 fc79 	bl	8000508 <__aeabi_i2d>
 8007c16:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007c1a:	f103 0310 	add.w	r3, r3, #16
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fcdb 	bl	80005dc <__aeabi_dmul>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 8007c2e:	f101 0118 	add.w	r1, r1, #24
 8007c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c36:	f7f8 fcd1 	bl	80005dc <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c42:	e9c1 2300 	strd	r2, r3, [r1]
 8007c46:	e15e      	b.n	8007f06 <SIM0_step+0xdde>
      } else {
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007c48:	4b82      	ldr	r3, [pc, #520]	; (8007e54 <SIM0_step+0xd2c>)
 8007c4a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
                   SIM0_DW.Memory_PreviousInput_a) +
 8007c52:	4b80      	ldr	r3, [pc, #512]	; (8007e54 <SIM0_step+0xd2c>)
 8007c54:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c58:	3318      	adds	r3, #24
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007c5e:	f7f8 fb05 	bl	800026c <__aeabi_dsub>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
          SIM0_DW.Memory_PreviousInput_a;
 8007c6a:	4b7a      	ldr	r3, [pc, #488]	; (8007e54 <SIM0_step+0xd2c>)
 8007c6c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007c70:	3318      	adds	r3, #24
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -
 8007c76:	f7f8 fafb 	bl	8000270 <__adddf3>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c82:	f101 0108 	add.w	r1, r1, #8
 8007c86:	e9c1 2300 	strd	r2, r3, [r1]
 8007c8a:	e13c      	b.n	8007f06 <SIM0_step+0xdde>
      }
    } else {
      rtb_Exp = -1.0;
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	4b6f      	ldr	r3, [pc, #444]	; (8007e50 <SIM0_step+0xd28>)
 8007c92:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007c96:	f101 0108 	add.w	r1, r1, #8
 8007c9a:	e9c1 2300 	strd	r2, r3, [r1]
 8007c9e:	e132      	b.n	8007f06 <SIM0_step+0xdde>
    }
  } else if (rtb_Memory22 != 0.0) {
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007cac:	f101 0108 	add.w	r1, r1, #8
 8007cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb4:	f7f8 fefa 	bl	8000aac <__aeabi_dcmpeq>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 811a 	bne.w	8007ef4 <SIM0_step+0xdcc>
    if (rtb_Product1_n != 0.0) {
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd0:	f7f8 feec 	bl	8000aac <__aeabi_dcmpeq>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d152      	bne.n	8007d80 <SIM0_step+0xc58>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8007cda:	4b5e      	ldr	r3, [pc, #376]	; (8007e54 <SIM0_step+0xd2c>)
 8007cdc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007ce0:	3318      	adds	r3, #24
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007cea:	f101 0110 	add.w	r1, r1, #16
 8007cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf2:	f7f8 fabb 	bl	800026c <__aeabi_dsub>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	a352      	add	r3, pc, #328	; (adr r3, 8007e48 <SIM0_step+0xd20>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fc6a 	bl	80005dc <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007d10:	4b50      	ldr	r3, [pc, #320]	; (8007e54 <SIM0_step+0xd2c>)
 8007d12:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007d16:	3318      	adds	r3, #24
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +
 8007d1c:	f7f8 faa8 	bl	8000270 <__adddf3>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d28:	f101 0108 	add.w	r1, r1, #8
 8007d2c:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;
 8007d30:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007d34:	f103 0308 	add.w	r3, r3, #8
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007d40:	f101 0110 	add.w	r1, r1, #16
 8007d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d48:	f7f8 fa90 	bl	800026c <__aeabi_dsub>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <SIM0_step+0xd30>)
 8007d5a:	f7f8 fd69 	bl	8000830 <__aeabi_ddiv>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007d66:	f101 0118 	add.w	r1, r1, #24
 8007d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d6e:	f7f8 fa7d 	bl	800026c <__aeabi_dsub>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d7a:	e9c1 2300 	strd	r2, r3, [r1]
 8007d7e:	e0c2      	b.n	8007f06 <SIM0_step+0xdde>
    } else if (rtb_Exp != 0.0) {
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007d8c:	f101 0108 	add.w	r1, r1, #8
 8007d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d94:	f7f8 fe8a 	bl	8000aac <__aeabi_dcmpeq>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d162      	bne.n	8007e64 <SIM0_step+0xd3c>
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007d9e:	4b2d      	ldr	r3, [pc, #180]	; (8007e54 <SIM0_step+0xd2c>)
 8007da0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007da4:	3318      	adds	r3, #24
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007dae:	f101 0110 	add.w	r1, r1, #16
 8007db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db6:	f7f8 fa59 	bl	800026c <__aeabi_dsub>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	4b25      	ldr	r3, [pc, #148]	; (8007e5c <SIM0_step+0xd34>)
 8007dc8:	f7f8 fd32 	bl	8000830 <__aeabi_ddiv>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007dd4:	4b1f      	ldr	r3, [pc, #124]	; (8007e54 <SIM0_step+0xd2c>)
 8007dd6:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007dda:	3318      	adds	r3, #24
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +
 8007de0:	f7f8 fa46 	bl	8000270 <__adddf3>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007dec:	f101 0108 	add.w	r1, r1, #8
 8007df0:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;
 8007df4:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007df8:	f103 0308 	add.w	r3, r3, #8
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007e04:	f101 0110 	add.w	r1, r1, #16
 8007e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e0c:	f7f8 fa2e 	bl	800026c <__aeabi_dsub>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4610      	mov	r0, r2
 8007e16:	4619      	mov	r1, r3
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <SIM0_step+0xd38>)
 8007e1e:	f7f8 fd07 	bl	8000830 <__aeabi_ddiv>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8007e2a:	f101 0118 	add.w	r1, r1, #24
 8007e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e32:	f7f8 fa1b 	bl	800026c <__aeabi_dsub>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007e3e:	e9c1 2300 	strd	r2, r3, [r1]
 8007e42:	e060      	b.n	8007f06 <SIM0_step+0xdde>
 8007e44:	f3af 8000 	nop.w
 8007e48:	9999999a 	.word	0x9999999a
 8007e4c:	3fe99999 	.word	0x3fe99999
 8007e50:	bff00000 	.word	0xbff00000
 8007e54:	2001bdd8 	.word	0x2001bdd8
 8007e58:	3fe00000 	.word	0x3fe00000
 8007e5c:	40490000 	.word	0x40490000
 8007e60:	40590000 	.word	0x40590000
    } else {
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007e64:	4bad      	ldr	r3, [pc, #692]	; (800811c <SIM0_step+0xff4>)
 8007e66:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f04f 0000 	mov.w	r0, #0
 8007e74:	f04f 0100 	mov.w	r1, #0
 8007e78:	f7f8 f9f8 	bl	800026c <__aeabi_dsub>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	4ba5      	ldr	r3, [pc, #660]	; (8008120 <SIM0_step+0xff8>)
 8007e8a:	f7f8 fcd1 	bl	8000830 <__aeabi_ddiv>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
        SIM0_DW.Memory_PreviousInput_a;
 8007e96:	4ba1      	ldr	r3, [pc, #644]	; (800811c <SIM0_step+0xff4>)
 8007e98:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +
 8007ea2:	f7f8 f9e5 	bl	8000270 <__adddf3>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007eae:	f101 0108 	add.w	r1, r1, #8
 8007eb2:	e9c1 2300 	strd	r2, r3, [r1]
      rtb_current = -(0.0 - rtb_Exp) / 10.0;
 8007eb6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007eba:	f103 0308 	add.w	r3, r3, #8
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f04f 0100 	mov.w	r1, #0
 8007eca:	f7f8 f9cf 	bl	800026c <__aeabi_dsub>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4690      	mov	r8, r2
 8007ed4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	4b91      	ldr	r3, [pc, #580]	; (8008124 <SIM0_step+0xffc>)
 8007ede:	4640      	mov	r0, r8
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	f7f8 fca5 	bl	8000830 <__aeabi_ddiv>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007eee:	e9c1 2300 	strd	r2, r3, [r1]
 8007ef2:	e008      	b.n	8007f06 <SIM0_step+0xdde>
    }
  } else {
    rtb_Exp = -1.0;
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	4b8b      	ldr	r3, [pc, #556]	; (8008128 <SIM0_step+0x1000>)
 8007efa:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8007efe:	f101 0108 	add.w	r1, r1, #8
 8007f02:	e9c1 2300 	strd	r2, r3, [r1]
  }

  SIM0_Y.vehicle_voltage = rtb_Exp;
 8007f06:	4989      	ldr	r1, [pc, #548]	; (800812c <SIM0_step+0x1004>)
 8007f08:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007f0c:	f103 0308 	add.w	r3, r3, #8
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  SIM0_Y.current = rtb_current;
 8007f18:	4984      	ldr	r1, [pc, #528]	; (800812c <SIM0_step+0x1004>)
 8007f1a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  SIM0_Y.accumulator_voltage = rtb_y;
 8007f26:	4981      	ldr	r1, [pc, #516]	; (800812c <SIM0_step+0x1004>)
 8007f28:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007f2c:	f103 0310 	add.w	r3, r3, #16
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  SIM0_Y.AIR_minus_closed = rtb_Memory22;
 8007f38:	497c      	ldr	r1, [pc, #496]	; (800812c <SIM0_step+0x1004>)
 8007f3a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007f3e:	f103 0308 	add.w	r3, r3, #8
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_Y.AIR_plus_closed = rtb_Product1_n;
 8007f4a:	4978      	ldr	r1, [pc, #480]	; (800812c <SIM0_step+0x1004>)
 8007f4c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	e9c1 2306 	strd	r2, r3, [r1, #24]
  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));
 8007f58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007f5c:	4974      	ldr	r1, [pc, #464]	; (8008130 <SIM0_step+0x1008>)
 8007f5e:	4875      	ldr	r0, [pc, #468]	; (8008134 <SIM0_step+0x100c>)
 8007f60:	f011 fdf4 	bl	8019b4c <memcpy>
  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;
 8007f64:	4b74      	ldr	r3, [pc, #464]	; (8008138 <SIM0_step+0x1010>)
 8007f66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007f6a:	4970      	ldr	r1, [pc, #448]	; (800812c <SIM0_step+0x1004>)
 8007f6c:	f501 615f 	add.w	r1, r1, #3568	; 0xdf0
 8007f70:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory20_PreviousInput = rtb_current;
 8007f74:	4b69      	ldr	r3, [pc, #420]	; (800811c <SIM0_step+0xff4>)
 8007f76:	f603 0108 	addw	r1, r3, #2056	; 0x808
 8007f7a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;
 8007f86:	4b65      	ldr	r3, [pc, #404]	; (800811c <SIM0_step+0xff4>)
 8007f88:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 8007f8c:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007f90:	f103 0318 	add.w	r3, r3, #24
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
    SIM0_DW.Memory9_PreviousInput);
 8007f9c:	4b5f      	ldr	r3, [pc, #380]	; (800811c <SIM0_step+0xff4>)
 8007f9e:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +
 8007fa6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8007faa:	f103 0318 	add.w	r3, r3, #24
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 f95d 	bl	8000270 <__adddf3>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4614      	mov	r4, r2
 8007fbc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007fc0:	4b56      	ldr	r3, [pc, #344]	; (800811c <SIM0_step+0xff4>)
 8007fc2:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8007fc6:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 126; i++) {
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8007fd0:	f102 020c 	add.w	r2, r2, #12
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e109      	b.n	80081ec <SIM0_step+0x10c4>
    rtb_Memory22 = rtb_Memory21[i];
 8007fd8:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007fdc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8007fe0:	f103 030c 	add.w	r3, r3, #12
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	4413      	add	r3, r2
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8007ff2:	f101 0108 	add.w	r1, r1, #8
 8007ff6:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Memory20 = rtb_Switch[i];
 8007ffa:	f107 0318 	add.w	r3, r7, #24
 8007ffe:	3b10      	subs	r3, #16
 8008000:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8008004:	f102 020c 	add.w	r2, r2, #12
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	00d2      	lsls	r2, r2, #3
 800800c:	4413      	add	r3, r2
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 8008016:	f101 0118 	add.w	r1, r1, #24
 800801a:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_is_drive = rtb_Rpz[i];
 800801e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 8008022:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008026:	f103 030c 	add.w	r3, r3, #12
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4413      	add	r3, r2
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8008038:	f101 0118 	add.w	r1, r1, #24
 800803c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;
 8008040:	4a36      	ldr	r2, [pc, #216]	; (800811c <SIM0_step+0xff4>)
 8008042:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008046:	f103 030c 	add.w	r3, r3, #12
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3305      	adds	r3, #5
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	18d1      	adds	r1, r2, r3
 8008052:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008056:	f103 0318 	add.w	r3, r3, #24
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];
 8008062:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8008066:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800806a:	f103 030c 	add.w	r3, r3, #12
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	4413      	add	r3, r2
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	4828      	ldr	r0, [pc, #160]	; (800811c <SIM0_step+0xff4>)
 800807a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800807e:	f101 010c 	add.w	r1, r1, #12
 8008082:	6809      	ldr	r1, [r1, #0]
 8008084:	3183      	adds	r1, #131	; 0x83
 8008086:	00c9      	lsls	r1, r1, #3
 8008088:	4401      	add	r1, r0
 800808a:	e9c1 2300 	strd	r2, r3, [r1]
    if (rtb_Memory20 > rtb_Memory22) {
 800808e:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008092:	f103 0308 	add.w	r3, r3, #8
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 800809e:	f101 0118 	add.w	r1, r1, #24
 80080a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a6:	f7f8 fd29 	bl	8000afc <__aeabi_dcmpgt>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d012      	beq.n	80080d6 <SIM0_step+0xfae>
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;
 80080b0:	4a1a      	ldr	r2, [pc, #104]	; (800811c <SIM0_step+0xff4>)
 80080b2:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80080b6:	f103 030c 	add.w	r3, r3, #12
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f203 1303 	addw	r3, r3, #259	; 0x103
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	18d1      	adds	r1, r2, r3
 80080c4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80080c8:	f103 0308 	add.w	r3, r3, #8
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	e9c1 2300 	strd	r2, r3, [r1]
 80080d4:	e044      	b.n	8008160 <SIM0_step+0x1038>
    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {
 80080d6:	4b18      	ldr	r3, [pc, #96]	; (8008138 <SIM0_step+0x1010>)
 80080d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f507 519e 	add.w	r1, r7, #5056	; 0x13c0
 80080e4:	f101 0118 	add.w	r1, r1, #24
 80080e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ec:	f7f8 fce8 	bl	8000ac0 <__aeabi_dcmplt>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d022      	beq.n	800813c <SIM0_step+0x1014>
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <SIM0_step+0x1010>)
 80080f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	4806      	ldr	r0, [pc, #24]	; (800811c <SIM0_step+0xff4>)
 8008102:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8008106:	f101 010c 	add.w	r1, r1, #12
 800810a:	6809      	ldr	r1, [r1, #0]
 800810c:	f201 1103 	addw	r1, r1, #259	; 0x103
 8008110:	00c9      	lsls	r1, r1, #3
 8008112:	4401      	add	r1, r0
 8008114:	e9c1 2300 	strd	r2, r3, [r1]
 8008118:	e022      	b.n	8008160 <SIM0_step+0x1038>
 800811a:	bf00      	nop
 800811c:	2001bdd8 	.word	0x2001bdd8
 8008120:	40140000 	.word	0x40140000
 8008124:	40240000 	.word	0x40240000
 8008128:	bff00000 	.word	0xbff00000
 800812c:	2001d638 	.word	0x2001d638
 8008130:	20000c38 	.word	0x20000c38
 8008134:	2001e248 	.word	0x2001e248
 8008138:	20000360 	.word	0x20000360
    } else {
      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;
 800813c:	4a94      	ldr	r2, [pc, #592]	; (8008390 <SIM0_step+0x1268>)
 800813e:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008142:	f103 030c 	add.w	r3, r3, #12
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f203 1303 	addw	r3, r3, #259	; 0x103
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	18d1      	adds	r1, r2, r3
 8008150:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008154:	f103 0318 	add.w	r3, r3, #24
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	e9c1 2300 	strd	r2, r3, [r1]
    }

    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;
 8008160:	4a8b      	ldr	r2, [pc, #556]	; (8008390 <SIM0_step+0x1268>)
 8008162:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8008166:	f103 030c 	add.w	r3, r3, #12
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f203 1381 	addw	r3, r3, #385	; 0x181
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	18d1      	adds	r1, r2, r3
 8008174:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8008178:	f103 0308 	add.w	r3, r3, #8
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];
 8008184:	4a83      	ldr	r2, [pc, #524]	; (8008394 <SIM0_step+0x126c>)
 8008186:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800818a:	f103 030c 	add.w	r3, r3, #12
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	330d      	adds	r3, #13
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	4413      	add	r3, r2
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	487d      	ldr	r0, [pc, #500]	; (8008390 <SIM0_step+0x1268>)
 800819c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80081a0:	f101 010c 	add.w	r1, r1, #12
 80081a4:	6809      	ldr	r1, [r1, #0]
 80081a6:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80081aa:	00c9      	lsls	r1, r1, #3
 80081ac:	4401      	add	r1, r0
 80081ae:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;
 80081b2:	4a77      	ldr	r2, [pc, #476]	; (8008390 <SIM0_step+0x1268>)
 80081b4:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80081b8:	f103 030c 	add.w	r3, r3, #12
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	18d1      	adds	r1, r2, r3
 80081c6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80081ca:	f103 0318 	add.w	r3, r3, #24
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 126; i++) {
 80081d6:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80081da:	f103 030c 	add.w	r3, r3, #12
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3301      	adds	r3, #1
 80081e2:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 80081e6:	f102 020c 	add.w	r2, r2, #12
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80081f0:	f103 030c 	add.w	r3, r3, #12
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b7d      	cmp	r3, #125	; 0x7d
 80081f8:	f77f aeee 	ble.w	8007fd8 <SIM0_step+0xeb0>
  }

  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;
 80081fc:	4b65      	ldr	r3, [pc, #404]	; (8008394 <SIM0_step+0x126c>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	4963      	ldr	r1, [pc, #396]	; (8008390 <SIM0_step+0x1268>)
 8008204:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 8008208:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;
 800820c:	4b61      	ldr	r3, [pc, #388]	; (8008394 <SIM0_step+0x126c>)
 800820e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008212:	4b5f      	ldr	r3, [pc, #380]	; (8008390 <SIM0_step+0x1268>)
 8008214:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008218:	3308      	adds	r3, #8
 800821a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;
 800821e:	4b5c      	ldr	r3, [pc, #368]	; (8008390 <SIM0_step+0x1268>)
 8008220:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008224:	3318      	adds	r3, #24
 8008226:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 800822a:	f102 0217 	add.w	r2, r2, #23
 800822e:	7812      	ldrb	r2, [r2, #0]
 8008230:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;
 8008232:	4b58      	ldr	r3, [pc, #352]	; (8008394 <SIM0_step+0x126c>)
 8008234:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008238:	4b55      	ldr	r3, [pc, #340]	; (8008390 <SIM0_step+0x1268>)
 800823a:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 800823e:	3310      	adds	r3, #16
 8008240:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;
 8008244:	4b53      	ldr	r3, [pc, #332]	; (8008394 <SIM0_step+0x126c>)
 8008246:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800824a:	4b51      	ldr	r3, [pc, #324]	; (8008390 <SIM0_step+0x1268>)
 800824c:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008250:	3318      	adds	r3, #24
 8008252:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;
 8008256:	4b4e      	ldr	r3, [pc, #312]	; (8008390 <SIM0_step+0x1268>)
 8008258:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800825c:	3319      	adds	r3, #25
 800825e:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8008262:	f102 0215 	add.w	r2, r2, #21
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	701a      	strb	r2, [r3, #0]
  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;
 800826a:	4b4a      	ldr	r3, [pc, #296]	; (8008394 <SIM0_step+0x126c>)
 800826c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008270:	4947      	ldr	r1, [pc, #284]	; (8008390 <SIM0_step+0x1268>)
 8008272:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8008276:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;
 800827a:	4b45      	ldr	r3, [pc, #276]	; (8008390 <SIM0_step+0x1268>)
 800827c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008280:	3308      	adds	r3, #8
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	4942      	ldr	r1, [pc, #264]	; (8008390 <SIM0_step+0x1268>)
 8008288:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];
 800828c:	4b40      	ldr	r3, [pc, #256]	; (8008390 <SIM0_step+0x1268>)
 800828e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008292:	493f      	ldr	r1, [pc, #252]	; (8008390 <SIM0_step+0x1268>)
 8008294:	e9c1 2302 	strd	r2, r3, [r1, #8]
  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;
 8008298:	4b3d      	ldr	r3, [pc, #244]	; (8008390 <SIM0_step+0x1268>)
 800829a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800829e:	3310      	adds	r3, #16
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	493a      	ldr	r1, [pc, #232]	; (8008390 <SIM0_step+0x1268>)
 80082a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];
 80082aa:	4b39      	ldr	r3, [pc, #228]	; (8008390 <SIM0_step+0x1268>)
 80082ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082b0:	4937      	ldr	r1, [pc, #220]	; (8008390 <SIM0_step+0x1268>)
 80082b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;
 80082b6:	4b36      	ldr	r3, [pc, #216]	; (8008390 <SIM0_step+0x1268>)
 80082b8:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80082bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c0:	4933      	ldr	r1, [pc, #204]	; (8008390 <SIM0_step+0x1268>)
 80082c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;
 80082c6:	4b33      	ldr	r3, [pc, #204]	; (8008394 <SIM0_step+0x126c>)
 80082c8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80082cc:	4b30      	ldr	r3, [pc, #192]	; (8008390 <SIM0_step+0x1268>)
 80082ce:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80082d2:	3308      	adds	r3, #8
 80082d4:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;
 80082d8:	4b2e      	ldr	r3, [pc, #184]	; (8008394 <SIM0_step+0x126c>)
 80082da:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80082de:	4b2c      	ldr	r3, [pc, #176]	; (8008390 <SIM0_step+0x1268>)
 80082e0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80082e4:	3310      	adds	r3, #16
 80082e6:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;
 80082ea:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <SIM0_step+0x126c>)
 80082ec:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 80082f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082f4:	4b26      	ldr	r3, [pc, #152]	; (8008390 <SIM0_step+0x1268>)
 80082f6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80082fa:	3318      	adds	r3, #24
 80082fc:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;
 8008300:	4b24      	ldr	r3, [pc, #144]	; (8008394 <SIM0_step+0x126c>)
 8008302:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008306:	4922      	ldr	r1, [pc, #136]	; (8008390 <SIM0_step+0x1268>)
 8008308:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 800830c:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;
 8008310:	4b20      	ldr	r3, [pc, #128]	; (8008394 <SIM0_step+0x126c>)
 8008312:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008316:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <SIM0_step+0x1268>)
 8008318:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800831c:	3308      	adds	r3, #8
 800831e:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <SIM0_step+0x126c>)
 8008324:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008328:	4b19      	ldr	r3, [pc, #100]	; (8008390 <SIM0_step+0x1268>)
 800832a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800832e:	3310      	adds	r3, #16
 8008330:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;
 8008334:	4b16      	ldr	r3, [pc, #88]	; (8008390 <SIM0_step+0x1268>)
 8008336:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800833a:	3318      	adds	r3, #24
 800833c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8008340:	f102 0208 	add.w	r2, r2, #8
 8008344:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008348:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <SIM0_step+0x126c>)
 800834e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008352:	490f      	ldr	r1, [pc, #60]	; (8008390 <SIM0_step+0x1268>)
 8008354:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 8008358:	e9c1 2300 	strd	r2, r3, [r1]
  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;
 800835c:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <SIM0_step+0x126c>)
 800835e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008362:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <SIM0_step+0x1268>)
 8008364:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008368:	3308      	adds	r3, #8
 800836a:	e9c3 0100 	strd	r0, r1, [r3]
  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <SIM0_step+0x126c>)
 8008370:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <SIM0_step+0x1268>)
 8008376:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800837a:	3310      	adds	r3, #16
 800837c:	e9c3 0100 	strd	r0, r1, [r3]
}
 8008380:	bf00      	nop
 8008382:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	bf00      	nop
 8008390:	2001bdd8 	.word	0x2001bdd8
 8008394:	2001e430 	.word	0x2001e430

08008398 <SIM0_initialize>:

void SIM0_initialize(void)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
  {
    int32_T i;
    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <SIM0_initialize+0x48>)
 80083a0:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	490e      	ldr	r1, [pc, #56]	; (80083e4 <SIM0_initialize+0x4c>)
 80083aa:	f601 0108 	addw	r1, r1, #2056	; 0x808
 80083ae:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <SIM0_initialize+0x48>)
 80083b4:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	4909      	ldr	r1, [pc, #36]	; (80083e4 <SIM0_initialize+0x4c>)
 80083be:	f501 6101 	add.w	r1, r1, #2064	; 0x810
 80083c2:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <SIM0_initialize+0x48>)
 80083c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	4904      	ldr	r1, [pc, #16]	; (80083e4 <SIM0_initialize+0x4c>)
 80083d2:	f601 71f8 	addw	r1, r1, #4088	; 0xff8
 80083d6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 80083da:	2300      	movs	r3, #0
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	e05b      	b.n	8008498 <SIM0_initialize+0x100>
 80083e0:	20000360 	.word	0x20000360
 80083e4:	2001bdd8 	.word	0x2001bdd8
      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;
 80083e8:	4ba4      	ldr	r3, [pc, #656]	; (800867c <SIM0_initialize+0x2e4>)
 80083ea:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	48a3      	ldr	r0, [pc, #652]	; (8008680 <SIM0_initialize+0x2e8>)
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	3105      	adds	r1, #5
 80083f8:	00c9      	lsls	r1, r1, #3
 80083fa:	4401      	add	r1, r0
 80083fc:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];
 8008400:	4a9e      	ldr	r2, [pc, #632]	; (800867c <SIM0_initialize+0x2e4>)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	4413      	add	r3, r2
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	489b      	ldr	r0, [pc, #620]	; (8008680 <SIM0_initialize+0x2e8>)
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	3183      	adds	r1, #131	; 0x83
 8008416:	00c9      	lsls	r1, r1, #3
 8008418:	4401      	add	r1, r0
 800841a:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];
 800841e:	4a97      	ldr	r2, [pc, #604]	; (800867c <SIM0_initialize+0x2e4>)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	339d      	adds	r3, #157	; 0x9d
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	4894      	ldr	r0, [pc, #592]	; (8008680 <SIM0_initialize+0x2e8>)
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	f201 1103 	addw	r1, r1, #259	; 0x103
 8008434:	00c9      	lsls	r1, r1, #3
 8008436:	4401      	add	r1, r0
 8008438:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];
 800843c:	4a8f      	ldr	r2, [pc, #572]	; (800867c <SIM0_initialize+0x2e4>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	331f      	adds	r3, #31
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	488d      	ldr	r0, [pc, #564]	; (8008680 <SIM0_initialize+0x2e8>)
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	f201 1181 	addw	r1, r1, #385	; 0x181
 8008452:	00c9      	lsls	r1, r1, #3
 8008454:	4401      	add	r1, r0
 8008456:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;
 800845a:	4b88      	ldr	r3, [pc, #544]	; (800867c <SIM0_initialize+0x2e4>)
 800845c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008460:	3308      	adds	r3, #8
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	4886      	ldr	r0, [pc, #536]	; (8008680 <SIM0_initialize+0x2e8>)
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800846e:	00c9      	lsls	r1, r1, #3
 8008470:	4401      	add	r1, r0
 8008472:	e9c1 2300 	strd	r2, r3, [r1]
      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;
 8008476:	4b81      	ldr	r3, [pc, #516]	; (800867c <SIM0_initialize+0x2e4>)
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	3310      	adds	r3, #16
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	487f      	ldr	r0, [pc, #508]	; (8008680 <SIM0_initialize+0x2e8>)
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	f201 217e 	addw	r1, r1, #638	; 0x27e
 800848a:	00c9      	lsls	r1, r1, #3
 800848c:	4401      	add	r1, r0
 800848e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 126; i++) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3301      	adds	r3, #1
 8008496:	607b      	str	r3, [r7, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b7d      	cmp	r3, #125	; 0x7d
 800849c:	dda4      	ble.n	80083e8 <SIM0_initialize+0x50>
    }

    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;
 800849e:	4b77      	ldr	r3, [pc, #476]	; (800867c <SIM0_initialize+0x2e4>)
 80084a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80084a4:	3308      	adds	r3, #8
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	4975      	ldr	r1, [pc, #468]	; (8008680 <SIM0_initialize+0x2e8>)
 80084ac:	f501 51bf 	add.w	r1, r1, #6112	; 0x17e0
 80084b0:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;
 80084b4:	4b71      	ldr	r3, [pc, #452]	; (800867c <SIM0_initialize+0x2e4>)
 80084b6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80084ba:	3310      	adds	r3, #16
 80084bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084c0:	4b6f      	ldr	r3, [pc, #444]	; (8008680 <SIM0_initialize+0x2e8>)
 80084c2:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80084c6:	3308      	adds	r3, #8
 80084c8:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;
 80084cc:	4b6b      	ldr	r3, [pc, #428]	; (800867c <SIM0_initialize+0x2e4>)
 80084ce:	f893 2bf0 	ldrb.w	r2, [r3, #3056]	; 0xbf0
 80084d2:	4b6b      	ldr	r3, [pc, #428]	; (8008680 <SIM0_initialize+0x2e8>)
 80084d4:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80084d8:	3318      	adds	r3, #24
 80084da:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;
 80084dc:	4b67      	ldr	r3, [pc, #412]	; (800867c <SIM0_initialize+0x2e4>)
 80084de:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80084e2:	3318      	adds	r3, #24
 80084e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084e8:	4b65      	ldr	r3, [pc, #404]	; (8008680 <SIM0_initialize+0x2e8>)
 80084ea:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 80084ee:	3310      	adds	r3, #16
 80084f0:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;
 80084f4:	4b61      	ldr	r3, [pc, #388]	; (800867c <SIM0_initialize+0x2e4>)
 80084f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80084fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084fe:	4b60      	ldr	r3, [pc, #384]	; (8008680 <SIM0_initialize+0x2e8>)
 8008500:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8008504:	3318      	adds	r3, #24
 8008506:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;
 800850a:	4b5c      	ldr	r3, [pc, #368]	; (800867c <SIM0_initialize+0x2e4>)
 800850c:	f893 2bf1 	ldrb.w	r2, [r3, #3057]	; 0xbf1
 8008510:	4b5b      	ldr	r3, [pc, #364]	; (8008680 <SIM0_initialize+0x2e8>)
 8008512:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008516:	3319      	adds	r3, #25
 8008518:	701a      	strb	r2, [r3, #0]
    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;
 800851a:	4b58      	ldr	r3, [pc, #352]	; (800867c <SIM0_initialize+0x2e4>)
 800851c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008520:	3308      	adds	r3, #8
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	4956      	ldr	r1, [pc, #344]	; (8008680 <SIM0_initialize+0x2e8>)
 8008528:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800852c:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;
 8008530:	4b52      	ldr	r3, [pc, #328]	; (800867c <SIM0_initialize+0x2e4>)
 8008532:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008536:	3310      	adds	r3, #16
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4950      	ldr	r1, [pc, #320]	; (8008680 <SIM0_initialize+0x2e8>)
 800853e:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;
 8008542:	4b4e      	ldr	r3, [pc, #312]	; (800867c <SIM0_initialize+0x2e4>)
 8008544:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8008548:	3318      	adds	r3, #24
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	494c      	ldr	r1, [pc, #304]	; (8008680 <SIM0_initialize+0x2e8>)
 8008550:	e9c1 2302 	strd	r2, r3, [r1, #8]
    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;
 8008554:	4b49      	ldr	r3, [pc, #292]	; (800867c <SIM0_initialize+0x2e4>)
 8008556:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	4948      	ldr	r1, [pc, #288]	; (8008680 <SIM0_initialize+0x2e8>)
 8008560:	e9c1 2306 	strd	r2, r3, [r1, #24]
    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;
 8008564:	4b45      	ldr	r3, [pc, #276]	; (800867c <SIM0_initialize+0x2e4>)
 8008566:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800856a:	3318      	adds	r3, #24
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	4943      	ldr	r1, [pc, #268]	; (8008680 <SIM0_initialize+0x2e8>)
 8008572:	e9c1 2304 	strd	r2, r3, [r1, #16]
    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;
 8008576:	4b41      	ldr	r3, [pc, #260]	; (800867c <SIM0_initialize+0x2e4>)
 8008578:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	493f      	ldr	r1, [pc, #252]	; (8008680 <SIM0_initialize+0x2e8>)
 8008582:	e9c1 2308 	strd	r2, r3, [r1, #32]
    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;
 8008586:	4b3d      	ldr	r3, [pc, #244]	; (800867c <SIM0_initialize+0x2e4>)
 8008588:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800858c:	3308      	adds	r3, #8
 800858e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008592:	4b3b      	ldr	r3, [pc, #236]	; (8008680 <SIM0_initialize+0x2e8>)
 8008594:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8008598:	3308      	adds	r3, #8
 800859a:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <SIM0_initialize+0x2e4>)
 80085a0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80085a4:	3310      	adds	r3, #16
 80085a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085aa:	4b35      	ldr	r3, [pc, #212]	; (8008680 <SIM0_initialize+0x2e8>)
 80085ac:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80085b0:	3310      	adds	r3, #16
 80085b2:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;
 80085b6:	4b31      	ldr	r3, [pc, #196]	; (800867c <SIM0_initialize+0x2e4>)
 80085b8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80085bc:	3318      	adds	r3, #24
 80085be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085c2:	4b2f      	ldr	r3, [pc, #188]	; (8008680 <SIM0_initialize+0x2e8>)
 80085c4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80085c8:	3318      	adds	r3, #24
 80085ca:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;
 80085ce:	4b2b      	ldr	r3, [pc, #172]	; (800867c <SIM0_initialize+0x2e4>)
 80085d0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	4929      	ldr	r1, [pc, #164]	; (8008680 <SIM0_initialize+0x2e8>)
 80085da:	f501 51c1 	add.w	r1, r1, #6176	; 0x1820
 80085de:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;
 80085e2:	4b26      	ldr	r3, [pc, #152]	; (800867c <SIM0_initialize+0x2e4>)
 80085e4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80085e8:	3308      	adds	r3, #8
 80085ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085ee:	4b24      	ldr	r3, [pc, #144]	; (8008680 <SIM0_initialize+0x2e8>)
 80085f0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80085f4:	3308      	adds	r3, #8
 80085f6:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;
 80085fa:	4b20      	ldr	r3, [pc, #128]	; (800867c <SIM0_initialize+0x2e4>)
 80085fc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8008600:	3310      	adds	r3, #16
 8008602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008606:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <SIM0_initialize+0x2e8>)
 8008608:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800860c:	3310      	adds	r3, #16
 800860e:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;
 8008612:	4b1a      	ldr	r3, [pc, #104]	; (800867c <SIM0_initialize+0x2e4>)
 8008614:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8008618:	3318      	adds	r3, #24
 800861a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800861e:	4b18      	ldr	r3, [pc, #96]	; (8008680 <SIM0_initialize+0x2e8>)
 8008620:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8008624:	3318      	adds	r3, #24
 8008626:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;
 800862a:	4b14      	ldr	r3, [pc, #80]	; (800867c <SIM0_initialize+0x2e4>)
 800862c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	4912      	ldr	r1, [pc, #72]	; (8008680 <SIM0_initialize+0x2e8>)
 8008636:	f501 51c2 	add.w	r1, r1, #6208	; 0x1840
 800863a:	e9c1 2300 	strd	r2, r3, [r1]
    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <SIM0_initialize+0x2e4>)
 8008640:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8008644:	3308      	adds	r3, #8
 8008646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <SIM0_initialize+0x2e8>)
 800864c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008650:	3308      	adds	r3, #8
 8008652:	e9c3 0100 	strd	r0, r1, [r3]
    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <SIM0_initialize+0x2e4>)
 8008658:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800865c:	3310      	adds	r3, #16
 800865e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008662:	4b07      	ldr	r3, [pc, #28]	; (8008680 <SIM0_initialize+0x2e8>)
 8008664:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8008668:	3310      	adds	r3, #16
 800866a:	e9c3 0100 	strd	r0, r1, [r3]
  }
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20000360 	.word	0x20000360
 8008680:	2001bdd8 	.word	0x2001bdd8

08008684 <UTMeanCovSqrt_C2vgLQ4W>:
#include "qr_5a2P8Gh6.h"

void UTMeanCovSqrt_C2vgLQ4W(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1[3], real_T Y2[18], const real_T X1[3],
  real_T X2[18], real_T Ymean[3], real_T Sy[9], real_T Pxy[9])
{
 8008684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008688:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800868c:	af00      	add	r7, sp, #0
 800868e:	f107 0414 	add.w	r4, r7, #20
 8008692:	6020      	str	r0, [r4, #0]
 8008694:	f107 0010 	add.w	r0, r7, #16
 8008698:	6001      	str	r1, [r0, #0]
 800869a:	f107 0108 	add.w	r1, r7, #8
 800869e:	ed81 0b00 	vstr	d0, [r1]
 80086a2:	1d39      	adds	r1, r7, #4
 80086a4:	600a      	str	r2, [r1, #0]
 80086a6:	463a      	mov	r2, r7
 80086a8:	6013      	str	r3, [r2, #0]
  int32_T i;
  int32_T iAcol;
  int32_T i_0;
  int32_T i_1;
  int32_T kk;
  Ymean[0] = Y1[0] * meanWeights[0];
 80086aa:	1d3b      	adds	r3, r7, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f7f7 ff8e 	bl	80005dc <__aeabi_dmul>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80086c8:	e9c1 2300 	strd	r2, r3, [r1]
  Ymean[1] = meanWeights[0] * Y1[1];
 80086cc:	f107 0314 	add.w	r3, r7, #20
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086d6:	1d3b      	adds	r3, r7, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 80086e4:	3408      	adds	r4, #8
 80086e6:	f7f7 ff79 	bl	80005dc <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	e9c4 2300 	strd	r2, r3, [r4]
  Ymean[2] = meanWeights[0] * Y1[2];
 80086f2:	f107 0314 	add.w	r3, r7, #20
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3310      	adds	r3, #16
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 800870a:	3410      	adds	r4, #16
 800870c:	f7f7 ff66 	bl	80005dc <__aeabi_dmul>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	e9c4 2300 	strd	r2, r3, [r4]
  iAcol = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 800871e:	2300      	movs	r3, #0
 8008720:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008724:	e079      	b.n	800881a <UTMeanCovSqrt_C2vgLQ4W+0x196>
    Ymean[0] += Y2[iAcol] * meanWeights[1];
 8008726:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800872a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800872e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	463a      	mov	r2, r7
 8008736:	6812      	ldr	r2, [r2, #0]
 8008738:	4413      	add	r3, r2
 800873a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 ff47 	bl	80005dc <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f7f7 fd8b 	bl	8000270 <__adddf3>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8008762:	e9c1 2300 	strd	r2, r3, [r1]
    Ymean[1] += Y2[iAcol + 1] * meanWeights[1];
 8008766:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800876a:	3308      	adds	r3, #8
 800876c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008770:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008774:	3301      	adds	r3, #1
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	463a      	mov	r2, r7
 800877a:	6812      	ldr	r2, [r2, #0]
 800877c:	4413      	add	r3, r2
 800877e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008782:	f107 0314 	add.w	r3, r7, #20
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3308      	adds	r3, #8
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 ff25 	bl	80005dc <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4610      	mov	r0, r2
 8008798:	4619      	mov	r1, r3
 800879a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800879e:	f103 0608 	add.w	r6, r3, #8
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd61 	bl	8000270 <__adddf3>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	e9c6 2300 	strd	r2, r3, [r6]
    Ymean[2] += Y2[iAcol + 2] * meanWeights[1];
 80087b6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80087ba:	3310      	adds	r3, #16
 80087bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087c0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80087c4:	3302      	adds	r3, #2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	463a      	mov	r2, r7
 80087ca:	6812      	ldr	r2, [r2, #0]
 80087cc:	4413      	add	r3, r2
 80087ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087d2:	f107 0314 	add.w	r3, r7, #20
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 fefd 	bl	80005dc <__aeabi_dmul>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4610      	mov	r0, r2
 80087e8:	4619      	mov	r1, r3
 80087ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80087ee:	f103 0610 	add.w	r6, r3, #16
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f7 fd39 	bl	8000270 <__adddf3>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	e9c6 2300 	strd	r2, r3, [r6]
    iAcol += 3;
 8008806:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800880a:	3303      	adds	r3, #3
 800880c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8008810:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008814:	3301      	adds	r3, #1
 8008816:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800881a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800881e:	2b05      	cmp	r3, #5
 8008820:	dd81      	ble.n	8008726 <UTMeanCovSqrt_C2vgLQ4W+0xa2>
  }

  signOOM = Ymean[0] * OOM;
 8008822:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f107 0108 	add.w	r1, r7, #8
 800882e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008832:	f7f7 fed3 	bl	80005dc <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  scale = Y1[0] - signOOM;
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008846:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800884a:	f7f7 fd0f 	bl	800026c <__aeabi_dsub>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
  Ymean[0] = signOOM;
 8008856:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800885a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800885e:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[0] = scale;
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	6819      	ldr	r1, [r3, #0]
 8008866:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800886a:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[1] * OOM;
 800886e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008872:	3308      	adds	r3, #8
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f107 0108 	add.w	r1, r7, #8
 800887c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008880:	f7f7 feac 	bl	80005dc <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  absxk = Y1[1] - signOOM;
 800888c:	1d3b      	adds	r3, r7, #4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008896:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800889a:	f7f7 fce7 	bl	800026c <__aeabi_dsub>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  Ymean[1] = signOOM;
 80088a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80088aa:	f103 0108 	add.w	r1, r3, #8
 80088ae:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80088b2:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[1] = absxk;
 80088b6:	1d3b      	adds	r3, r7, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f103 0108 	add.w	r1, r3, #8
 80088be:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80088c2:	e9c1 2300 	strd	r2, r3, [r1]
  signOOM = Ymean[2] * OOM;
 80088c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80088ca:	3310      	adds	r3, #16
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d8:	f7f7 fe80 	bl	80005dc <__aeabi_dmul>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  b_t = Y1[2] - signOOM;
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3310      	adds	r3, #16
 80088ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088ee:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80088f2:	f7f7 fcbb 	bl	800026c <__aeabi_dsub>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  Ymean[2] = signOOM;
 80088fe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008902:	f103 0110 	add.w	r1, r3, #16
 8008906:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800890a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1[2] = b_t;
 800890e:	1d3b      	adds	r3, r7, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f103 0110 	add.w	r1, r3, #16
 8008916:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800891a:	e9c1 2300 	strd	r2, r3, [r1]
  iAcol = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8008924:	2300      	movs	r3, #0
 8008926:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800892a:	e054      	b.n	80089d6 <UTMeanCovSqrt_C2vgLQ4W+0x352>
    Y2[iAcol] -= Ymean[0];
 800892c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	463a      	mov	r2, r7
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	4413      	add	r3, r2
 8008938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800893c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8008948:	00e4      	lsls	r4, r4, #3
 800894a:	463d      	mov	r5, r7
 800894c:	682d      	ldr	r5, [r5, #0]
 800894e:	442c      	add	r4, r5
 8008950:	f7f7 fc8c 	bl	800026c <__aeabi_dsub>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 1] -= Ymean[1];
 800895c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008960:	3301      	adds	r3, #1
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	463a      	mov	r2, r7
 8008966:	6812      	ldr	r2, [r2, #0]
 8008968:	4413      	add	r3, r2
 800896a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800896e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8008972:	3308      	adds	r3, #8
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 800897c:	3401      	adds	r4, #1
 800897e:	00e4      	lsls	r4, r4, #3
 8008980:	463d      	mov	r5, r7
 8008982:	682d      	ldr	r5, [r5, #0]
 8008984:	442c      	add	r4, r5
 8008986:	f7f7 fc71 	bl	800026c <__aeabi_dsub>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9c4 2300 	strd	r2, r3, [r4]
    Y2[iAcol + 2] -= signOOM;
 8008992:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008996:	3302      	adds	r3, #2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	463a      	mov	r2, r7
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	4413      	add	r3, r2
 80089a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089a4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80089a8:	3302      	adds	r3, #2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	463a      	mov	r2, r7
 80089ae:	6812      	ldr	r2, [r2, #0]
 80089b0:	18d4      	adds	r4, r2, r3
 80089b2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80089b6:	f7f7 fc59 	bl	800026c <__aeabi_dsub>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 80089c2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80089c6:	3303      	adds	r3, #3
 80089c8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 80089cc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80089d0:	3301      	adds	r3, #1
 80089d2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80089d6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80089da:	2b05      	cmp	r3, #5
 80089dc:	dda6      	ble.n	800892c <UTMeanCovSqrt_C2vgLQ4W+0x2a8>
  }

  if (rtIsNaN(OOM)) {
 80089de:	f107 0308 	add.w	r3, r7, #8
 80089e2:	ed93 0b00 	vldr	d0, [r3]
 80089e6:	f004 fbed 	bl	800d1c4 <rtIsNaN>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <UTMeanCovSqrt_C2vgLQ4W+0x37a>
    signOOM = OOM;
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 80089fc:	e029      	b.n	8008a52 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else if (OOM < 0.0) {
 80089fe:	f107 0108 	add.w	r1, r7, #8
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0e:	f7f8 f857 	bl	8000ac0 <__aeabi_dcmplt>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <UTMeanCovSqrt_C2vgLQ4W+0x3a0>
    signOOM = -1.0;
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	4bce      	ldr	r3, [pc, #824]	; (8008d58 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8008a1e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 8008a22:	e016      	b.n	8008a52 <UTMeanCovSqrt_C2vgLQ4W+0x3ce>
  } else {
    signOOM = (OOM > 0.0);
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a34:	f7f8 f862 	bl	8000afc <__aeabi_dcmpgt>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <UTMeanCovSqrt_C2vgLQ4W+0x3c2>
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	4bc6      	ldr	r3, [pc, #792]	; (8008d5c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008a44:	e003      	b.n	8008a4e <UTMeanCovSqrt_C2vgLQ4W+0x3ca>
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	f04f 0300 	mov.w	r3, #0
 8008a4e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  }

  covWeights_0 = signOOM * covWeights[0];
 8008a52:	f107 0310 	add.w	r3, r7, #16
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008a60:	f7f7 fdbc 	bl	80005dc <__aeabi_dmul>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
  covWeights_1 = signOOM * covWeights[1];
 8008a6c:	f107 0310 	add.w	r3, r7, #16
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8008a7c:	f7f7 fdae 	bl	80005dc <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  OOM *= signOOM;
 8008a88:	f107 0408 	add.w	r4, r7, #8
 8008a8c:	f107 0108 	add.w	r1, r7, #8
 8008a90:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a98:	f7f7 fda0 	bl	80005dc <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	e9c4 2300 	strd	r2, r3, [r4]
  signOOM = sqrt(OOM);
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	ed93 0b00 	vldr	d0, [r3]
 8008aac:	f011 fa14 	bl	8019ed8 <sqrt>
 8008ab0:	ed87 0ba8 	vstr	d0, [r7, #672]	; 0x2a0
  temp = sqrt(covWeights_1);
 8008ab4:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8008ab8:	f011 fa0e 	bl	8019ed8 <sqrt>
 8008abc:	eeb0 7a40 	vmov.f32	s14, s0
 8008ac0:	eef0 7a60 	vmov.f32	s15, s1
 8008ac4:	f107 0318 	add.w	r3, r7, #24
 8008ac8:	ed83 7b00 	vstr	d7, [r3]
  kk = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008ad8:	e03c      	b.n	8008b54 <UTMeanCovSqrt_C2vgLQ4W+0x4d0>
    i_1 = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008ae6:	e027      	b.n	8008b38 <UTMeanCovSqrt_C2vgLQ4W+0x4b4>
      temp_0[i + kk] = Y2[i_1 + iAcol] * temp;
 8008ae8:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008aec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008af0:	4413      	add	r3, r2
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	463a      	mov	r2, r7
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	4413      	add	r3, r2
 8008afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008afe:	f107 0318 	add.w	r3, r7, #24
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 8008b0a:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 8008b0e:	442c      	add	r4, r5
 8008b10:	f7f7 fd64 	bl	80005dc <__aeabi_dmul>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008b1c:	00e1      	lsls	r1, r4, #3
 8008b1e:	4401      	add	r1, r0
 8008b20:	e9c1 2300 	strd	r2, r3, [r1]
      i_1 += 3;
 8008b24:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008b28:	3303      	adds	r3, #3
 8008b2a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    for (i = 0; i < 6; i++) {
 8008b2e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008b32:	3301      	adds	r3, #1
 8008b34:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8008b38:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008b3c:	2b05      	cmp	r3, #5
 8008b3e:	ddd3      	ble.n	8008ae8 <UTMeanCovSqrt_C2vgLQ4W+0x464>
    }

    kk += 6;
 8008b40:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008b44:	3306      	adds	r3, #6
 8008b46:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008b4a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008b54:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	ddbe      	ble.n	8008ada <UTMeanCovSqrt_C2vgLQ4W+0x456>
  }

  qr_DvOBrgQi(temp_0, a__1, Sy);
 8008b5c:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8008b60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b64:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f002 ff43 	bl	800b9f4 <qr_DvOBrgQi>
  if (!rtIsNaN(covWeights_0)) {
 8008b6e:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8008b72:	f004 fb27 	bl	800d1c4 <rtIsNaN>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d125      	bne.n	8008bc8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    if (covWeights_0 < 0.0) {
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008b88:	f7f7 ff9a 	bl	8000ac0 <__aeabi_dcmplt>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <UTMeanCovSqrt_C2vgLQ4W+0x51a>
      covWeights_0 = -1.0;
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	4b70      	ldr	r3, [pc, #448]	; (8008d58 <UTMeanCovSqrt_C2vgLQ4W+0x6d4>)
 8008b98:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 8008b9c:	e014      	b.n	8008bc8 <UTMeanCovSqrt_C2vgLQ4W+0x544>
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008baa:	f7f7 ffa7 	bl	8000afc <__aeabi_dcmpgt>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <UTMeanCovSqrt_C2vgLQ4W+0x538>
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	4b68      	ldr	r3, [pc, #416]	; (8008d5c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008bba:	e003      	b.n	8008bc4 <UTMeanCovSqrt_C2vgLQ4W+0x540>
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    }
  }

  if (covWeights_0 == 1.0) {
 8008bc8:	f04f 0200 	mov.w	r2, #0
 8008bcc:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <UTMeanCovSqrt_C2vgLQ4W+0x6d8>)
 8008bce:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8008bd2:	f7f7 ff6b 	bl	8000aac <__aeabi_dcmpeq>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 81bd 	beq.w	8008f58 <UTMeanCovSqrt_C2vgLQ4W+0x8d4>
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008bde:	2300      	movs	r3, #0
 8008be0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008be4:	e011      	b.n	8008c0a <UTMeanCovSqrt_C2vgLQ4W+0x586>
      Sy[iAcol + 1] = 0.0;
 8008be6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008bea:	3301      	adds	r3, #1
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008bf2:	18d1      	adds	r1, r2, r3
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008c00:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c04:	3301      	adds	r3, #1
 8008c06:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008c0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	dde9      	ble.n	8008be6 <UTMeanCovSqrt_C2vgLQ4W+0x562>
    }

    Sy[5] = 0.0;
 8008c12:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008c16:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	e9c1 2300 	strd	r2, r3, [r1]
    c[2] = 0.0;
 8008c26:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	e9c1 2304 	strd	r2, r3, [r1, #16]
    s[2] = 0.0;
 8008c36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rotate_LZ7ctbe0(Sy[0], scale, &c[0], &s[0], &Sy[0]);
 8008c46:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008c4a:	ed93 7b00 	vldr	d7, [r3]
 8008c4e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c56:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	ed97 1baa 	vldr	d1, [r7, #680]	; 0x2a8
 8008c60:	eeb0 0a47 	vmov.f32	s0, s14
 8008c64:	eef0 0a67 	vmov.f32	s1, s15
 8008c68:	f004 f814 	bl	800cc94 <rotate_LZ7ctbe0>
    temp = c[0] * absxk - s[0] * Sy[3];
 8008c6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c74:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008c78:	f7f7 fcb0 	bl	80005dc <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4614      	mov	r4, r2
 8008c82:	461d      	mov	r5, r3
 8008c84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c8c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008c90:	3318      	adds	r3, #24
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fca1 	bl	80005dc <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 fae3 	bl	800026c <__aeabi_dsub>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	f107 0118 	add.w	r1, r7, #24
 8008cae:	e9c1 2300 	strd	r2, r3, [r1]
    Sy[3] = c[0] * Sy[3] + s[0] * absxk;
 8008cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cba:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008cbe:	3318      	adds	r3, #24
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f7f7 fc8a 	bl	80005dc <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4690      	mov	r8, r2
 8008cce:	4699      	mov	r9, r3
 8008cd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cd8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008cdc:	f7f7 fc7e 	bl	80005dc <__aeabi_dmul>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008cec:	f103 0418 	add.w	r4, r3, #24
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 faba 	bl	8000270 <__adddf3>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	e9c4 2300 	strd	r2, r3, [r4]
    rotate_LZ7ctbe0(Sy[4], temp, &c[1], &s[1], &Sy[4]);
 8008d04:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d08:	3320      	adds	r3, #32
 8008d0a:	ed93 7b00 	vldr	d7, [r3]
 8008d0e:	f107 0318 	add.w	r3, r7, #24
 8008d12:	ed93 6b00 	vldr	d6, [r3]
 8008d16:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008d1a:	f103 0220 	add.w	r2, r3, #32
 8008d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d22:	f103 0108 	add.w	r1, r3, #8
 8008d26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	eeb0 1a46 	vmov.f32	s2, s12
 8008d32:	eef0 1a66 	vmov.f32	s3, s13
 8008d36:	eeb0 0a47 	vmov.f32	s0, s14
 8008d3a:	eef0 0a67 	vmov.f32	s1, s15
 8008d3e:	f003 ffa9 	bl	800cc94 <rotate_LZ7ctbe0>
    temp = b_t;
 8008d42:	f107 0118 	add.w	r1, r7, #24
 8008d46:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008d4a:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008d54:	e06f      	b.n	8008e36 <UTMeanCovSqrt_C2vgLQ4W+0x7b2>
 8008d56:	bf00      	nop
 8008d58:	bff00000 	.word	0xbff00000
 8008d5c:	3ff00000 	.word	0x3ff00000
      scale = s[iAcol] * temp;
 8008d60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008d64:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4413      	add	r3, r2
 8008d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d70:	f107 0318 	add.w	r3, r7, #24
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fc30 	bl	80005dc <__aeabi_dmul>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = Sy[iAcol + 6];
 8008d84:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008d88:	3306      	adds	r3, #6
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008d90:	4413      	add	r3, r2
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
      temp = c[iAcol] * temp - absxk * s[iAcol];
 8008d9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d9e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	4413      	add	r3, r2
 8008da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008daa:	f107 0318 	add.w	r3, r7, #24
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	f7f7 fc13 	bl	80005dc <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4614      	mov	r4, r2
 8008dbc:	461d      	mov	r5, r3
 8008dbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008dc2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4413      	add	r3, r2
 8008dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dce:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008dd2:	f7f7 fc03 	bl	80005dc <__aeabi_dmul>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4620      	mov	r0, r4
 8008ddc:	4629      	mov	r1, r5
 8008dde:	f7f7 fa45 	bl	800026c <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	f107 0118 	add.w	r1, r7, #24
 8008dea:	e9c1 2300 	strd	r2, r3, [r1]
      Sy[iAcol + 6] = absxk * c[iAcol] + scale;
 8008dee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008df2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	4413      	add	r3, r2
 8008dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dfe:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008e02:	f7f7 fbeb 	bl	80005dc <__aeabi_dmul>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e12:	3306      	adds	r3, #6
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e1a:	18d4      	adds	r4, r2, r3
 8008e1c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8008e20:	f7f7 fa26 	bl	8000270 <__adddf3>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	e9c4 2300 	strd	r2, r3, [r4]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008e2c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e36:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	dd90      	ble.n	8008d60 <UTMeanCovSqrt_C2vgLQ4W+0x6dc>
    }

    rotate_LZ7ctbe0(Sy[8], temp, &c[2], &s[2], &Sy[8]);
 8008e3e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008e42:	3340      	adds	r3, #64	; 0x40
 8008e44:	ed93 7b00 	vldr	d7, [r3]
 8008e48:	f107 0318 	add.w	r3, r7, #24
 8008e4c:	ed93 6b00 	vldr	d6, [r3]
 8008e50:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008e54:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008e58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e5c:	f103 0110 	add.w	r1, r3, #16
 8008e60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e64:	3310      	adds	r3, #16
 8008e66:	4618      	mov	r0, r3
 8008e68:	eeb0 1a46 	vmov.f32	s2, s12
 8008e6c:	eef0 1a66 	vmov.f32	s3, s13
 8008e70:	eeb0 0a47 	vmov.f32	s0, s14
 8008e74:	eef0 0a67 	vmov.f32	s1, s15
 8008e78:	f003 ff0c 	bl	800cc94 <rotate_LZ7ctbe0>
    kk = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008e82:	2300      	movs	r3, #0
 8008e84:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008e88:	e03d      	b.n	8008f06 <UTMeanCovSqrt_C2vgLQ4W+0x882>
      Sy_0[kk] = Sy[iAcol];
 8008e8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008e94:	4413      	add	r3, r2
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008e9e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008ea2:	00c9      	lsls	r1, r1, #3
 8008ea4:	4401      	add	r1, r0
 8008ea6:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8008eaa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008eae:	3303      	adds	r3, #3
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008ebc:	1c51      	adds	r1, r2, #1
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008ec6:	00c9      	lsls	r1, r1, #3
 8008ec8:	4401      	add	r1, r0
 8008eca:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8008ece:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008ed2:	3306      	adds	r3, #6
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008eda:	4413      	add	r3, r2
 8008edc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008ee0:	1c91      	adds	r1, r2, #2
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8008eea:	00c9      	lsls	r1, r1, #3
 8008eec:	4401      	add	r1, r0
 8008eee:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8008ef2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008ef6:	3303      	adds	r3, #3
 8008ef8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008efc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f00:	3301      	adds	r3, #1
 8008f02:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f06:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	ddbd      	ble.n	8008e8a <UTMeanCovSqrt_C2vgLQ4W+0x806>
    }

    for (kk = 0; kk < 9; kk++) {
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008f14:	e01a      	b.n	8008f4c <UTMeanCovSqrt_C2vgLQ4W+0x8c8>
      Sy[kk] = signOOM * Sy_0[kk];
 8008f16:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008f1a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	4413      	add	r3, r2
 8008f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f26:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008f30:	18d4      	adds	r4, r2, r3
 8008f32:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8008f36:	f7f7 fb51 	bl	80005dc <__aeabi_dmul>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8008f42:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f46:	3301      	adds	r3, #1
 8008f48:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008f4c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	dde0      	ble.n	8008f16 <UTMeanCovSqrt_C2vgLQ4W+0x892>
 8008f54:	f000 bf6e 	b.w	8009e34 <UTMeanCovSqrt_C2vgLQ4W+0x17b0>
    }
  } else {
    boolean_T errorCondition;
    boolean_T guard1 = false;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f64:	e011      	b.n	8008f8a <UTMeanCovSqrt_C2vgLQ4W+0x906>
      Sy[iAcol + 1] = 0.0;
 8008f66:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8008f72:	18d1      	adds	r1, r2, r3
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 2; iAcol++) {
 8008f80:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f84:	3301      	adds	r3, #1
 8008f86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8008f8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	dde9      	ble.n	8008f66 <UTMeanCovSqrt_C2vgLQ4W+0x8e2>
    }

    Sy[5] = 0.0;
 8008f92:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008f96:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	f04f 0300 	mov.w	r3, #0
 8008fa2:	e9c1 2300 	strd	r2, r3, [r1]
    errorCondition = (Sy[0] == 0.0);
 8008fa6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	461c      	mov	r4, r3
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	f04f 0300 	mov.w	r3, #0
 8008fba:	f7f7 fd77 	bl	8000aac <__aeabi_dcmpeq>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <UTMeanCovSqrt_C2vgLQ4W+0x944>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	461c      	mov	r4, r3
 8008fc8:	b2e3      	uxtb	r3, r4
 8008fca:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if (!errorCondition) {
 8008fce:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d114      	bne.n	8009000 <UTMeanCovSqrt_C2vgLQ4W+0x97c>
      errorCondition = (Sy[4] == 0.0);
 8008fd6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8008fda:	3320      	adds	r3, #32
 8008fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	461c      	mov	r4, r3
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	f7f7 fd5e 	bl	8000aac <__aeabi_dcmpeq>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <UTMeanCovSqrt_C2vgLQ4W+0x976>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	461c      	mov	r4, r3
 8008ffa:	b2e3      	uxtb	r3, r4
 8008ffc:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    if (!errorCondition) {
 8009000:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009004:	2b00      	cmp	r3, #0
 8009006:	d114      	bne.n	8009032 <UTMeanCovSqrt_C2vgLQ4W+0x9ae>
      errorCondition = (Sy[8] == 0.0);
 8009008:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800900c:	3340      	adds	r3, #64	; 0x40
 800900e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009012:	2301      	movs	r3, #1
 8009014:	461c      	mov	r4, r3
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	f04f 0300 	mov.w	r3, #0
 800901e:	f7f7 fd45 	bl	8000aac <__aeabi_dcmpeq>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <UTMeanCovSqrt_C2vgLQ4W+0x9a8>
 8009028:	2300      	movs	r3, #0
 800902a:	461c      	mov	r4, r3
 800902c:	b2e3      	uxtb	r3, r4
 800902e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    }

    guard1 = false;
 8009032:	2300      	movs	r3, #0
 8009034:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
    if (errorCondition) {
 8009038:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <UTMeanCovSqrt_C2vgLQ4W+0x9c4>
      guard1 = true;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8009046:	e394      	b.n	8009772 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
    } else {
      x[2] = b_t;
 8009048:	f107 0120 	add.w	r1, r7, #32
 800904c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009050:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x[0] = scale / Sy[0];
 8009054:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8009060:	f7f7 fbe6 	bl	8000830 <__aeabi_ddiv>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	f107 0120 	add.w	r1, r7, #32
 800906c:	e9c1 2300 	strd	r2, r3, [r1]
      x[1] = (absxk - x[0] * Sy[3]) / Sy[4];
 8009070:	f107 0320 	add.w	r3, r7, #32
 8009074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009078:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800907c:	3318      	adds	r3, #24
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 faab 	bl	80005dc <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800908e:	f7f7 f8ed 	bl	800026c <__aeabi_dsub>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4610      	mov	r0, r2
 8009098:	4619      	mov	r1, r3
 800909a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800909e:	3320      	adds	r3, #32
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7f7 fbc4 	bl	8000830 <__aeabi_ddiv>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	f107 0120 	add.w	r1, r7, #32
 80090b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      temp = b_t;
 80090b4:	f107 0118 	add.w	r1, r7, #24
 80090b8:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80090bc:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80090c6:	e027      	b.n	8009118 <UTMeanCovSqrt_C2vgLQ4W+0xa94>
        temp -= Sy[kk + 6] * x[kk];
 80090c8:	f107 0318 	add.w	r3, r7, #24
 80090cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090d0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80090d4:	3306      	adds	r3, #6
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80090dc:	4413      	add	r3, r2
 80090de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090e2:	f107 0220 	add.w	r2, r7, #32
 80090e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4413      	add	r3, r2
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7f7 fa73 	bl	80005dc <__aeabi_dmul>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4620      	mov	r0, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	f7f7 f8b5 	bl	800026c <__aeabi_dsub>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	f107 0118 	add.w	r1, r7, #24
 800910a:	e9c1 2300 	strd	r2, r3, [r1]
      for (kk = 0; kk < 2; kk++) {
 800910e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009112:	3301      	adds	r3, #1
 8009114:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009118:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800911c:	2b01      	cmp	r3, #1
 800911e:	ddd3      	ble.n	80090c8 <UTMeanCovSqrt_C2vgLQ4W+0xa44>
      }

      x[2] = temp / Sy[8];
 8009120:	f107 0318 	add.w	r3, r7, #24
 8009124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009128:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800912c:	3340      	adds	r3, #64	; 0x40
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 fb7d 	bl	8000830 <__aeabi_ddiv>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	f107 0120 	add.w	r1, r7, #32
 800913e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      scale = 3.3121686421112381E-170;
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800914a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
      absxk = fabs(x[0]);
 800914e:	f107 0320 	add.w	r3, r7, #32
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	4611      	mov	r1, r2
 8009158:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800915c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009160:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > 3.3121686421112381E-170) {
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800916c:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009170:	f7f7 fcc4 	bl	8000afc <__aeabi_dcmpgt>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <UTMeanCovSqrt_C2vgLQ4W+0xb0e>
        temp = 1.0;
 800917a:	f107 0118 	add.w	r1, r7, #24
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	4b85      	ldr	r3, [pc, #532]	; (8009398 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8009184:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8009188:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800918c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8009190:	e017      	b.n	80091c2 <UTMeanCovSqrt_C2vgLQ4W+0xb3e>
      } else {
        b_t = absxk / 3.3121686421112381E-170;
 8009192:	f04f 0200 	mov.w	r2, #0
 8009196:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800919a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800919e:	f7f7 fb47 	bl	8000830 <__aeabi_ddiv>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = b_t * b_t;
 80091aa:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80091ae:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 80091b2:	f7f7 fa13 	bl	80005dc <__aeabi_dmul>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	f107 0118 	add.w	r1, r7, #24
 80091be:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[1]);
 80091c2:	f107 0320 	add.w	r3, r7, #32
 80091c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80091ca:	4611      	mov	r1, r2
 80091cc:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80091d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091d4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 80091d8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80091dc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80091e0:	f7f7 fc8c 	bl	8000afc <__aeabi_dcmpgt>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d02d      	beq.n	8009246 <UTMeanCovSqrt_C2vgLQ4W+0xbc2>
        b_t = scale / absxk;
 80091ea:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80091ee:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80091f2:	f7f7 fb1d 	bl	8000830 <__aeabi_ddiv>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80091fe:	f107 0318 	add.w	r3, r7, #24
 8009202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009206:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800920a:	f7f7 f9e7 	bl	80005dc <__aeabi_dmul>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4610      	mov	r0, r2
 8009214:	4619      	mov	r1, r3
 8009216:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800921a:	f7f7 f9df 	bl	80005dc <__aeabi_dmul>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	4610      	mov	r0, r2
 8009224:	4619      	mov	r1, r3
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	4b5b      	ldr	r3, [pc, #364]	; (8009398 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 800922c:	f7f7 f820 	bl	8000270 <__adddf3>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	f107 0118 	add.w	r1, r7, #24
 8009238:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 800923c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009240:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8009244:	e01f      	b.n	8009286 <UTMeanCovSqrt_C2vgLQ4W+0xc02>
      } else {
        b_t = absxk / scale;
 8009246:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800924a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800924e:	f7f7 faef 	bl	8000830 <__aeabi_ddiv>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800925a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800925e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8009262:	f7f7 f9bb 	bl	80005dc <__aeabi_dmul>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	f107 0318 	add.w	r3, r7, #24
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f6 fffb 	bl	8000270 <__adddf3>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	f107 0118 	add.w	r1, r7, #24
 8009282:	e9c1 2300 	strd	r2, r3, [r1]
      }

      absxk = fabs(x[2]);
 8009286:	f107 0320 	add.w	r3, r7, #32
 800928a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800928e:	4611      	mov	r1, r2
 8009290:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8009294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009298:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      if (absxk > scale) {
 800929c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80092a0:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80092a4:	f7f7 fc2a 	bl	8000afc <__aeabi_dcmpgt>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d02d      	beq.n	800930a <UTMeanCovSqrt_C2vgLQ4W+0xc86>
        b_t = scale / absxk;
 80092ae:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80092b2:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80092b6:	f7f7 fabb 	bl	8000830 <__aeabi_ddiv>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp = temp * b_t * b_t + 1.0;
 80092c2:	f107 0318 	add.w	r3, r7, #24
 80092c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092ca:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80092ce:	f7f7 f985 	bl	80005dc <__aeabi_dmul>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4610      	mov	r0, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80092de:	f7f7 f97d 	bl	80005dc <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4610      	mov	r0, r2
 80092e8:	4619      	mov	r1, r3
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	4b2a      	ldr	r3, [pc, #168]	; (8009398 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 80092f0:	f7f6 ffbe 	bl	8000270 <__adddf3>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	f107 0118 	add.w	r1, r7, #24
 80092fc:	e9c1 2300 	strd	r2, r3, [r1]
        scale = absxk;
 8009300:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009304:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 8009308:	e01f      	b.n	800934a <UTMeanCovSqrt_C2vgLQ4W+0xcc6>
      } else {
        b_t = absxk / scale;
 800930a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800930e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8009312:	f7f7 fa8d 	bl	8000830 <__aeabi_ddiv>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
        temp += b_t * b_t;
 800931e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8009322:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8009326:	f7f7 f959 	bl	80005dc <__aeabi_dmul>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f107 0318 	add.w	r3, r7, #24
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f7f6 ff99 	bl	8000270 <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	f107 0118 	add.w	r1, r7, #24
 8009346:	e9c1 2300 	strd	r2, r3, [r1]
      }

      temp = scale * sqrt(temp);
 800934a:	f107 0318 	add.w	r3, r7, #24
 800934e:	ed93 7b00 	vldr	d7, [r3]
 8009352:	eeb0 0a47 	vmov.f32	s0, s14
 8009356:	eef0 0a67 	vmov.f32	s1, s15
 800935a:	f010 fdbd 	bl	8019ed8 <sqrt>
 800935e:	ec51 0b10 	vmov	r0, r1, d0
 8009362:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8009366:	f7f7 f939 	bl	80005dc <__aeabi_dmul>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	f107 0118 	add.w	r1, r7, #24
 8009372:	e9c1 2300 	strd	r2, r3, [r1]
      if (temp >= 1.0) {
 8009376:	f107 0318 	add.w	r3, r7, #24
 800937a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <UTMeanCovSqrt_C2vgLQ4W+0xd14>)
 8009384:	f7f7 fbb0 	bl	8000ae8 <__aeabi_dcmpge>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d006      	beq.n	800939c <UTMeanCovSqrt_C2vgLQ4W+0xd18>
        guard1 = true;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8009394:	e1ed      	b.n	8009772 <UTMeanCovSqrt_C2vgLQ4W+0x10ee>
 8009396:	bf00      	nop
 8009398:	3ff00000 	.word	0x3ff00000
      } else {
        rotate_LZ7ctbe0(sqrt(1.0 - temp * temp), x[2], &c[2], &s[2], &temp);
 800939c:	f107 0318 	add.w	r3, r7, #24
 80093a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f7 f916 	bl	80005dc <__aeabi_dmul>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	f04f 0000 	mov.w	r0, #0
 80093b8:	49b4      	ldr	r1, [pc, #720]	; (800968c <UTMeanCovSqrt_C2vgLQ4W+0x1008>)
 80093ba:	f7f6 ff57 	bl	800026c <__aeabi_dsub>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	ec43 2b17 	vmov	d7, r2, r3
 80093c6:	eeb0 0a47 	vmov.f32	s0, s14
 80093ca:	eef0 0a67 	vmov.f32	s1, s15
 80093ce:	f010 fd83 	bl	8019ed8 <sqrt>
 80093d2:	eeb0 6a40 	vmov.f32	s12, s0
 80093d6:	eef0 6a60 	vmov.f32	s13, s1
 80093da:	f107 0320 	add.w	r3, r7, #32
 80093de:	ed93 7b04 	vldr	d7, [r3, #16]
 80093e2:	f107 0218 	add.w	r2, r7, #24
 80093e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80093ea:	f103 0110 	add.w	r1, r3, #16
 80093ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80093f2:	3310      	adds	r3, #16
 80093f4:	4618      	mov	r0, r3
 80093f6:	eeb0 1a47 	vmov.f32	s2, s14
 80093fa:	eef0 1a67 	vmov.f32	s3, s15
 80093fe:	eeb0 0a46 	vmov.f32	s0, s12
 8009402:	eef0 0a66 	vmov.f32	s1, s13
 8009406:	f003 fc45 	bl	800cc94 <rotate_LZ7ctbe0>
        x[2] = 0.0;
 800940a:	f107 0120 	add.w	r1, r7, #32
 800940e:	f04f 0200 	mov.w	r2, #0
 8009412:	f04f 0300 	mov.w	r3, #0
 8009416:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rotate_LZ7ctbe0(temp, x[1], &c[1], &s[1], &temp);
 800941a:	f107 0318 	add.w	r3, r7, #24
 800941e:	ed93 7b00 	vldr	d7, [r3]
 8009422:	f107 0320 	add.w	r3, r7, #32
 8009426:	ed93 6b02 	vldr	d6, [r3, #8]
 800942a:	f107 0218 	add.w	r2, r7, #24
 800942e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009432:	f103 0108 	add.w	r1, r3, #8
 8009436:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800943a:	3308      	adds	r3, #8
 800943c:	4618      	mov	r0, r3
 800943e:	eeb0 1a46 	vmov.f32	s2, s12
 8009442:	eef0 1a66 	vmov.f32	s3, s13
 8009446:	eeb0 0a47 	vmov.f32	s0, s14
 800944a:	eef0 0a67 	vmov.f32	s1, s15
 800944e:	f003 fc21 	bl	800cc94 <rotate_LZ7ctbe0>
        x[1] = 0.0;
 8009452:	f107 0120 	add.w	r1, r7, #32
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rotate_LZ7ctbe0(temp, x[0], &c[0], &s[0], &temp);
 8009462:	f107 0318 	add.w	r3, r7, #24
 8009466:	ed93 7b00 	vldr	d7, [r3]
 800946a:	f107 0320 	add.w	r3, r7, #32
 800946e:	ed93 6b00 	vldr	d6, [r3]
 8009472:	f107 0218 	add.w	r2, r7, #24
 8009476:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800947a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800947e:	4618      	mov	r0, r3
 8009480:	eeb0 1a46 	vmov.f32	s2, s12
 8009484:	eef0 1a66 	vmov.f32	s3, s13
 8009488:	eeb0 0a47 	vmov.f32	s0, s14
 800948c:	eef0 0a67 	vmov.f32	s1, s15
 8009490:	f003 fc00 	bl	800cc94 <rotate_LZ7ctbe0>
        x[0] = 0.0;
 8009494:	f107 0120 	add.w	r1, r7, #32
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 80094a4:	2300      	movs	r3, #0
 80094a6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80094aa:	e072      	b.n	8009592 <UTMeanCovSqrt_C2vgLQ4W+0xf0e>
          temp = s[iAcol] * Sy[iAcol];
 80094ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80094b0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094b4:	00db      	lsls	r3, r3, #3
 80094b6:	4413      	add	r3, r2
 80094b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80094c6:	4413      	add	r3, r2
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f7 f886 	bl	80005dc <__aeabi_dmul>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	f107 0118 	add.w	r1, r7, #24
 80094d8:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[iAcol] = c[iAcol] * Sy[iAcol] - s[iAcol] * x[0];
 80094dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80094e0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	4413      	add	r3, r2
 80094e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094ec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80094f6:	4413      	add	r3, r2
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f7 f86e 	bl	80005dc <__aeabi_dmul>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4690      	mov	r8, r2
 8009506:	4699      	mov	r9, r3
 8009508:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800950c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	4413      	add	r3, r2
 8009514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009518:	f107 0320 	add.w	r3, r7, #32
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f7 f85c 	bl	80005dc <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4610      	mov	r0, r2
 800952a:	4619      	mov	r1, r3
 800952c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009536:	18d4      	adds	r4, r2, r3
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	f7f6 fe94 	bl	800026c <__aeabi_dsub>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	e9c4 2300 	strd	r2, r3, [r4]
          x[0] = c[iAcol] * x[0] + temp;
 800954c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009550:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	4413      	add	r3, r2
 8009558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800955c:	f107 0320 	add.w	r3, r7, #32
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f7 f83a 	bl	80005dc <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4610      	mov	r0, r2
 800956e:	4619      	mov	r1, r3
 8009570:	f107 0318 	add.w	r3, r7, #24
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f6 fe7a 	bl	8000270 <__adddf3>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	f107 0120 	add.w	r1, r7, #32
 8009584:	e9c1 2300 	strd	r2, r3, [r1]
        for (iAcol = 0; iAcol + 1 > 0; iAcol--) {
 8009588:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800958c:	3b01      	subs	r3, #1
 800958e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009592:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009596:	2b00      	cmp	r3, #0
 8009598:	da88      	bge.n	80094ac <UTMeanCovSqrt_C2vgLQ4W+0xe28>
        }

        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 800959a:	2301      	movs	r3, #1
 800959c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80095a0:	e06c      	b.n	800967c <UTMeanCovSqrt_C2vgLQ4W+0xff8>
          absxk = Sy[iAcol + 3];
 80095a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095a6:	3303      	adds	r3, #3
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80095ae:	4413      	add	r3, r2
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 3] = absxk * c[iAcol] - s[iAcol] * x[1];
 80095b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80095bc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	4413      	add	r3, r2
 80095c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095c8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80095cc:	f7f7 f806 	bl	80005dc <__aeabi_dmul>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4690      	mov	r8, r2
 80095d6:	4699      	mov	r9, r3
 80095d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80095dc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	4413      	add	r3, r2
 80095e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e8:	f107 0320 	add.w	r3, r7, #32
 80095ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80095f0:	f7f6 fff4 	bl	80005dc <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4610      	mov	r0, r2
 80095fa:	4619      	mov	r1, r3
 80095fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009600:	3303      	adds	r3, #3
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009608:	18d4      	adds	r4, r2, r3
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4640      	mov	r0, r8
 8009610:	4649      	mov	r1, r9
 8009612:	f7f6 fe2b 	bl	800026c <__aeabi_dsub>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	e9c4 2300 	strd	r2, r3, [r4]
          x[1] = c[iAcol] * x[1] + absxk * s[iAcol];
 800961e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009622:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	4413      	add	r3, r2
 800962a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800962e:	f107 0320 	add.w	r3, r7, #32
 8009632:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009636:	f7f6 ffd1 	bl	80005dc <__aeabi_dmul>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4614      	mov	r4, r2
 8009640:	461d      	mov	r5, r3
 8009642:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009646:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4413      	add	r3, r2
 800964e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009652:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009656:	f7f6 ffc1 	bl	80005dc <__aeabi_dmul>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f7f6 fe05 	bl	8000270 <__adddf3>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	f107 0120 	add.w	r1, r7, #32
 800966e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        for (iAcol = 1; iAcol + 1 > 0; iAcol--) {
 8009672:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009676:	3b01      	subs	r3, #1
 8009678:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800967c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009680:	2b00      	cmp	r3, #0
 8009682:	da8e      	bge.n	80095a2 <UTMeanCovSqrt_C2vgLQ4W+0xf1e>
        }

        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8009684:	2302      	movs	r3, #2
 8009686:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800968a:	e06e      	b.n	800976a <UTMeanCovSqrt_C2vgLQ4W+0x10e6>
 800968c:	3ff00000 	.word	0x3ff00000
          absxk = Sy[iAcol + 6];
 8009690:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009694:	3306      	adds	r3, #6
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800969c:	4413      	add	r3, r2
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
          Sy[iAcol + 6] = absxk * c[iAcol] - s[iAcol] * x[2];
 80096a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80096aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4413      	add	r3, r2
 80096b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096b6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80096ba:	f7f6 ff8f 	bl	80005dc <__aeabi_dmul>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4690      	mov	r8, r2
 80096c4:	4699      	mov	r9, r3
 80096c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80096ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4413      	add	r3, r2
 80096d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096d6:	f107 0320 	add.w	r3, r7, #32
 80096da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80096de:	f7f6 ff7d 	bl	80005dc <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4610      	mov	r0, r2
 80096e8:	4619      	mov	r1, r3
 80096ea:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80096ee:	3306      	adds	r3, #6
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80096f6:	18d4      	adds	r4, r2, r3
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4640      	mov	r0, r8
 80096fe:	4649      	mov	r1, r9
 8009700:	f7f6 fdb4 	bl	800026c <__aeabi_dsub>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	e9c4 2300 	strd	r2, r3, [r4]
          x[2] = c[iAcol] * x[2] + absxk * s[iAcol];
 800970c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009710:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4413      	add	r3, r2
 8009718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800971c:	f107 0320 	add.w	r3, r7, #32
 8009720:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009724:	f7f6 ff5a 	bl	80005dc <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4614      	mov	r4, r2
 800972e:	461d      	mov	r5, r3
 8009730:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009734:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	4413      	add	r3, r2
 800973c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009740:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8009744:	f7f6 ff4a 	bl	80005dc <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 fd8e 	bl	8000270 <__adddf3>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	f107 0120 	add.w	r1, r7, #32
 800975c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (iAcol = 2; iAcol + 1 > 0; iAcol--) {
 8009760:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009764:	3b01      	subs	r3, #1
 8009766:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800976a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800976e:	2b00      	cmp	r3, #0
 8009770:	da8e      	bge.n	8009690 <UTMeanCovSqrt_C2vgLQ4W+0x100c>
        }
      }
    }

    if (guard1) {
 8009772:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 82f0 	beq.w	8009d5c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
      boolean_T exitg2;
      kk = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009782:	2300      	movs	r3, #0
 8009784:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009788:	e0d3      	b.n	8009932 <UTMeanCovSqrt_C2vgLQ4W+0x12ae>
        i_1 = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009790:	2300      	movs	r3, #0
 8009792:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009796:	e0bd      	b.n	8009914 <UTMeanCovSqrt_C2vgLQ4W+0x1290>
          Sy_tmp = i_1 + iAcol;
 8009798:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800979c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80097a0:	4413      	add	r3, r2
 80097a2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy_0[Sy_tmp] = 0.0;
 80097a6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80097aa:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	18d1      	adds	r1, r2, r3
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	f04f 0300 	mov.w	r3, #0
 80097ba:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk] * Sy[i_1];
 80097be:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80097c2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4413      	add	r3, r2
 80097ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80097ce:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80097d8:	4413      	add	r3, r2
 80097da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097de:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80097e8:	4413      	add	r3, r2
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	f7f6 fef5 	bl	80005dc <__aeabi_dmul>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 fd39 	bl	8000270 <__adddf3>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009806:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 800980a:	00c9      	lsls	r1, r1, #3
 800980c:	4401      	add	r1, r0
 800980e:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 1] * Sy[i_1 + 1];
 8009812:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009816:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4413      	add	r3, r2
 800981e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009822:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009826:	3301      	adds	r3, #1
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800982e:	4413      	add	r3, r2
 8009830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009834:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009838:	3301      	adds	r3, #1
 800983a:	00db      	lsls	r3, r3, #3
 800983c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009840:	4413      	add	r3, r2
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f7f6 fec9 	bl	80005dc <__aeabi_dmul>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f6 fd0d 	bl	8000270 <__adddf3>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800985e:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009862:	00c9      	lsls	r1, r1, #3
 8009864:	4401      	add	r1, r0
 8009866:	e9c1 2300 	strd	r2, r3, [r1]
          Sy_0[Sy_tmp] += Sy[kk + 2] * Sy[i_1 + 2];
 800986a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800986e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4413      	add	r3, r2
 8009876:	e9d3 4500 	ldrd	r4, r5, [r3]
 800987a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800987e:	3302      	adds	r3, #2
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009886:	4413      	add	r3, r2
 8009888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800988c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009890:	3302      	adds	r3, #2
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009898:	4413      	add	r3, r2
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fe9d 	bl	80005dc <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f6 fce1 	bl	8000270 <__adddf3>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80098b6:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80098ba:	00c9      	lsls	r1, r1, #3
 80098bc:	4401      	add	r1, r0
 80098be:	e9c1 2300 	strd	r2, r3, [r1]
          Y1_0[i + kk] = Y1[i] * Y1[iAcol];
 80098c2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	1d3a      	adds	r2, r7, #4
 80098ca:	6812      	ldr	r2, [r2, #0]
 80098cc:	4413      	add	r3, r2
 80098ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	1d3a      	adds	r2, r7, #4
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	4413      	add	r3, r2
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f8d7 529c 	ldr.w	r5, [r7, #668]	; 0x29c
 80098e6:	f8d7 428c 	ldr.w	r4, [r7, #652]	; 0x28c
 80098ea:	442c      	add	r4, r5
 80098ec:	f7f6 fe76 	bl	80005dc <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80098f8:	00e1      	lsls	r1, r4, #3
 80098fa:	4401      	add	r1, r0
 80098fc:	e9c1 2300 	strd	r2, r3, [r1]
          i_1 += 3;
 8009900:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009904:	3303      	adds	r3, #3
 8009906:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 800990a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800990e:	3301      	adds	r3, #1
 8009910:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009914:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009918:	2b02      	cmp	r3, #2
 800991a:	f77f af3d 	ble.w	8009798 <UTMeanCovSqrt_C2vgLQ4W+0x1114>
        }

        kk += 3;
 800991e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009922:	3303      	adds	r3, #3
 8009924:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009928:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800992c:	3301      	adds	r3, #1
 800992e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009932:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009936:	2b02      	cmp	r3, #2
 8009938:	f77f af27 	ble.w	800978a <UTMeanCovSqrt_C2vgLQ4W+0x1106>
      }

      errorCondition = true;
 800993c:	2301      	movs	r3, #1
 800993e:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      for (iAcol = 0; iAcol < 9; iAcol++) {
 8009942:	2300      	movs	r3, #0
 8009944:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009948:	e049      	b.n	80099de <UTMeanCovSqrt_C2vgLQ4W+0x135a>
        temp = Sy_0[iAcol] - Y1_0[iAcol];
 800994a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800994e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4413      	add	r3, r2
 8009956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800995a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800995e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	4413      	add	r3, r2
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f7f6 fc7f 	bl	800026c <__aeabi_dsub>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	f107 0118 	add.w	r1, r7, #24
 8009976:	e9c1 2300 	strd	r2, r3, [r1]
        if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 800997a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800997e:	2b00      	cmp	r3, #0
 8009980:	d01c      	beq.n	80099bc <UTMeanCovSqrt_C2vgLQ4W+0x1338>
 8009982:	f107 0318 	add.w	r3, r7, #24
 8009986:	ed93 7b00 	vldr	d7, [r3]
 800998a:	eeb0 0a47 	vmov.f32	s0, s14
 800998e:	eef0 0a67 	vmov.f32	s1, s15
 8009992:	f003 fbf3 	bl	800d17c <rtIsInf>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10c      	bne.n	80099b6 <UTMeanCovSqrt_C2vgLQ4W+0x1332>
 800999c:	f107 0318 	add.w	r3, r7, #24
 80099a0:	ed93 7b00 	vldr	d7, [r3]
 80099a4:	eeb0 0a47 	vmov.f32	s0, s14
 80099a8:	eef0 0a67 	vmov.f32	s1, s15
 80099ac:	f003 fc0a 	bl	800d1c4 <rtIsNaN>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <UTMeanCovSqrt_C2vgLQ4W+0x1338>
          errorCondition = false;
 80099b6:	2300      	movs	r3, #0
 80099b8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        }

        Ss[iAcol] = temp;
 80099bc:	f107 0318 	add.w	r3, r7, #24
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80099c8:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80099cc:	00c9      	lsls	r1, r1, #3
 80099ce:	4401      	add	r1, r0
 80099d0:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 9; iAcol++) {
 80099d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80099d8:	3301      	adds	r3, #1
 80099da:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80099de:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80099e2:	2b08      	cmp	r3, #8
 80099e4:	ddb1      	ble.n	800994a <UTMeanCovSqrt_C2vgLQ4W+0x12c6>
      }

      if (errorCondition) {
 80099e6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UTMeanCovSqrt_C2vgLQ4W+0x1380>
        svd_u3DvUgOe(Ss, Y1_0, s, Sy_0);
 80099ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80099f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80099f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80099fa:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80099fe:	f003 fc33 	bl	800d268 <svd_u3DvUgOe>
 8009a02:	e02c      	b.n	8009a5e <UTMeanCovSqrt_C2vgLQ4W+0x13da>
      } else {
        s[0] = (rtNaN);
 8009a04:	4bbc      	ldr	r3, [pc, #752]	; (8009cf8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a0e:	e9c1 2300 	strd	r2, r3, [r1]
        s[1] = (rtNaN);
 8009a12:	4bb9      	ldr	r3, [pc, #740]	; (8009cf8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        s[2] = (rtNaN);
 8009a20:	4bb5      	ldr	r3, [pc, #724]	; (8009cf8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        for (kk = 0; kk < 9; kk++) {
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009a34:	e00f      	b.n	8009a56 <UTMeanCovSqrt_C2vgLQ4W+0x13d2>
          Sy_0[kk] = (rtNaN);
 8009a36:	4bb0      	ldr	r3, [pc, #704]	; (8009cf8 <UTMeanCovSqrt_C2vgLQ4W+0x1674>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009a40:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009a44:	00c9      	lsls	r1, r1, #3
 8009a46:	4401      	add	r1, r0
 8009a48:	e9c1 2300 	strd	r2, r3, [r1]
        for (kk = 0; kk < 9; kk++) {
 8009a4c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a50:	3301      	adds	r3, #1
 8009a52:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009a56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009a5a:	2b08      	cmp	r3, #8
 8009a5c:	ddeb      	ble.n	8009a36 <UTMeanCovSqrt_C2vgLQ4W+0x13b2>
        }
      }

      memset(&Ss[0], 0, 9U * sizeof(real_T));
 8009a5e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009a62:	2248      	movs	r2, #72	; 0x48
 8009a64:	2100      	movs	r1, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f010 f87e 	bl	8019b68 <memset>
      Ss[0] = s[0];
 8009a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009a78:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[4] = s[1];
 8009a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009a84:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009a88:	e9c1 2308 	strd	r2, r3, [r1, #32]
      Ss[8] = s[2];
 8009a8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009a94:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8009a98:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      for (kk = 0; kk < 9; kk++) {
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009aa2:	e01e      	b.n	8009ae2 <UTMeanCovSqrt_C2vgLQ4W+0x145e>
        Ss[kk] = sqrt(Ss[kk]);
 8009aa4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009aa8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	4413      	add	r3, r2
 8009ab0:	ed93 7b00 	vldr	d7, [r3]
 8009ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8009ab8:	eef0 0a67 	vmov.f32	s1, s15
 8009abc:	f010 fa0c 	bl	8019ed8 <sqrt>
 8009ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8009ac4:	eef0 7a60 	vmov.f32	s15, s1
 8009ac8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009acc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	ed83 7b00 	vstr	d7, [r3]
      for (kk = 0; kk < 9; kk++) {
 8009ad8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009adc:	3301      	adds	r3, #1
 8009ade:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009ae2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	dddc      	ble.n	8009aa4 <UTMeanCovSqrt_C2vgLQ4W+0x1420>
      }

      kk = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009af0:	2300      	movs	r3, #0
 8009af2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009af6:	e0c0      	b.n	8009c7a <UTMeanCovSqrt_C2vgLQ4W+0x15f6>
        i_1 = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009afe:	2300      	movs	r3, #0
 8009b00:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009b04:	e0aa      	b.n	8009c5c <UTMeanCovSqrt_C2vgLQ4W+0x15d8>
          Sy_tmp = i_1 + iAcol;
 8009b06:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8009b0a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009b0e:	4413      	add	r3, r2
 8009b10:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
          Sy[Sy_tmp] = 0.0;
 8009b14:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009b1e:	18d1      	adds	r1, r2, r3
 8009b20:	f04f 0200 	mov.w	r2, #0
 8009b24:	f04f 0300 	mov.w	r3, #0
 8009b28:	e9c1 2300 	strd	r2, r3, [r1]
          Sy[Sy_tmp] += Ss[kk] * Sy_0[i];
 8009b2c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009b36:	4413      	add	r3, r2
 8009b38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009b3c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009b40:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	4413      	add	r3, r2
 8009b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b4c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009b50:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	4413      	add	r3, r2
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fd3e 	bl	80005dc <__aeabi_dmul>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4610      	mov	r0, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009b72:	18d6      	adds	r6, r2, r3
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 fb78 	bl	8000270 <__adddf3>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 1] * Sy_0[i + 3];
 8009b88:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009b92:	4413      	add	r3, r2
 8009b94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009b98:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009baa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009bae:	3303      	adds	r3, #3
 8009bb0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fd0e 	bl	80005dc <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009bd2:	18d6      	adds	r6, r2, r3
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4620      	mov	r0, r4
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7f6 fb48 	bl	8000270 <__adddf3>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	e9c6 2300 	strd	r2, r3, [r6]
          Sy[Sy_tmp] += Ss[kk + 2] * Sy_0[i + 6];
 8009be8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009bf2:	4413      	add	r3, r2
 8009bf4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009bf8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	4413      	add	r3, r2
 8009c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c0a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009c0e:	3306      	adds	r3, #6
 8009c10:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	4413      	add	r3, r2
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7f6 fcde 	bl	80005dc <__aeabi_dmul>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4610      	mov	r0, r2
 8009c26:	4619      	mov	r1, r3
 8009c28:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009c32:	18d6      	adds	r6, r2, r3
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4620      	mov	r0, r4
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	f7f6 fb18 	bl	8000270 <__adddf3>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	e9c6 2300 	strd	r2, r3, [r6]
          i_1 += 3;
 8009c48:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009c4c:	3303      	adds	r3, #3
 8009c4e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        for (i = 0; i < 3; i++) {
 8009c52:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009c56:	3301      	adds	r3, #1
 8009c58:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8009c5c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	f77f af50 	ble.w	8009b06 <UTMeanCovSqrt_C2vgLQ4W+0x1482>
        }

        kk += 3;
 8009c66:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009c6a:	3303      	adds	r3, #3
 8009c6c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8009c70:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009c74:	3301      	adds	r3, #1
 8009c76:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009c7a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	f77f af3a 	ble.w	8009af8 <UTMeanCovSqrt_C2vgLQ4W+0x1474>
      }

      errorCondition = true;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
      kk = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      exitg2 = false;
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009c96:	e044      	b.n	8009d22 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
        int32_T exitg1;
        iAcol = kk + 1;
 8009c98:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
        do {
          exitg1 = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          if (iAcol + 1 < 4) {
 8009ca8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	dc25      	bgt.n	8009cfc <UTMeanCovSqrt_C2vgLQ4W+0x1678>
            if (!(Sy[3 * kk + iAcol] == 0.0)) {
 8009cb0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009cbe:	4413      	add	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009cc6:	4413      	add	r3, r2
 8009cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	f7f6 feea 	bl	8000aac <__aeabi_dcmpeq>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <UTMeanCovSqrt_C2vgLQ4W+0x1668>
              errorCondition = false;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
              exitg1 = 1;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8009cea:	e00f      	b.n	8009d0c <UTMeanCovSqrt_C2vgLQ4W+0x1688>
            } else {
              iAcol++;
 8009cec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009cf6:	e009      	b.n	8009d0c <UTMeanCovSqrt_C2vgLQ4W+0x1688>
 8009cf8:	2001e8a0 	.word	0x2001e8a0
            }
          } else {
            kk++;
 8009cfc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009d00:	3301      	adds	r3, #1
 8009d02:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            exitg1 = 2;
 8009d06:	2302      	movs	r3, #2
 8009d08:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
          }
        } while (exitg1 == 0);
 8009d0c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0c6      	beq.n	8009ca2 <UTMeanCovSqrt_C2vgLQ4W+0x161e>

        if (exitg1 == 1) {
 8009d14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d102      	bne.n	8009d22 <UTMeanCovSqrt_C2vgLQ4W+0x169e>
          exitg2 = true;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
      while ((!exitg2) && (kk < 3)) {
 8009d22:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <UTMeanCovSqrt_C2vgLQ4W+0x16ae>
 8009d2a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	ddb2      	ble.n	8009c98 <UTMeanCovSqrt_C2vgLQ4W+0x1614>
        }
      }

      if (!errorCondition) {
 8009d32:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d110      	bne.n	8009d5c <UTMeanCovSqrt_C2vgLQ4W+0x16d8>
        memcpy(&Sy_0[0], &Sy[0], 9U * sizeof(real_T));
 8009d3a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009d3e:	2248      	movs	r2, #72	; 0x48
 8009d40:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8009d44:	4618      	mov	r0, r3
 8009d46:	f00f ff01 	bl	8019b4c <memcpy>
        qr_5a2P8Gh6(Sy_0, Y1_0, Sy);
 8009d4a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009d4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009d52:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fec4 	bl	800aae4 <qr_5a2P8Gh6>
      }
    }

    kk = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009d62:	2300      	movs	r3, #0
 8009d64:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009d68:	e03d      	b.n	8009de6 <UTMeanCovSqrt_C2vgLQ4W+0x1762>
      Sy_0[kk] = Sy[iAcol];
 8009d6a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009d74:	4413      	add	r3, r2
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009d7e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8009d82:	00c9      	lsls	r1, r1, #3
 8009d84:	4401      	add	r1, r0
 8009d86:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 1] = Sy[iAcol + 3];
 8009d8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009d8e:	3303      	adds	r3, #3
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009d96:	4413      	add	r3, r2
 8009d98:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009d9c:	1c51      	adds	r1, r2, #1
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009da6:	00c9      	lsls	r1, r1, #3
 8009da8:	4401      	add	r1, r0
 8009daa:	e9c1 2300 	strd	r2, r3, [r1]
      Sy_0[kk + 2] = Sy[iAcol + 6];
 8009dae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009db2:	3306      	adds	r3, #6
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009dba:	4413      	add	r3, r2
 8009dbc:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8009dc0:	1c91      	adds	r1, r2, #2
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8009dca:	00c9      	lsls	r1, r1, #3
 8009dcc:	4401      	add	r1, r0
 8009dce:	e9c1 2300 	strd	r2, r3, [r1]
      kk += 3;
 8009dd2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009dd6:	3303      	adds	r3, #3
 8009dd8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8009ddc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009de0:	3301      	adds	r3, #1
 8009de2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8009de6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	ddbd      	ble.n	8009d6a <UTMeanCovSqrt_C2vgLQ4W+0x16e6>
    }

    for (kk = 0; kk < 9; kk++) {
 8009dee:	2300      	movs	r3, #0
 8009df0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009df4:	e01a      	b.n	8009e2c <UTMeanCovSqrt_C2vgLQ4W+0x17a8>
      Sy[kk] = signOOM * Sy_0[kk];
 8009df6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009dfa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	4413      	add	r3, r2
 8009e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e06:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009e10:	18d4      	adds	r4, r2, r3
 8009e12:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8009e16:	f7f6 fbe1 	bl	80005dc <__aeabi_dmul>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	e9c4 2300 	strd	r2, r3, [r4]
    for (kk = 0; kk < 9; kk++) {
 8009e22:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009e26:	3301      	adds	r3, #1
 8009e28:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009e2c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	dde0      	ble.n	8009df6 <UTMeanCovSqrt_C2vgLQ4W+0x1772>
    }
  }

  iAcol = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009e40:	e057      	b.n	8009ef2 <UTMeanCovSqrt_C2vgLQ4W+0x186e>
    X2[iAcol] -= X1[0];
 8009e42:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009e4c:	4413      	add	r3, r2
 8009e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e52:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009e5e:	00e4      	lsls	r4, r4, #3
 8009e60:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009e64:	442c      	add	r4, r5
 8009e66:	f7f6 fa01 	bl	800026c <__aeabi_dsub>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 1] -= X1[1];
 8009e72:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009e76:	3301      	adds	r3, #1
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009e7e:	4413      	add	r3, r2
 8009e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e84:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009e88:	3308      	adds	r3, #8
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009e92:	3401      	adds	r4, #1
 8009e94:	00e4      	lsls	r4, r4, #3
 8009e96:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009e9a:	442c      	add	r4, r5
 8009e9c:	f7f6 f9e6 	bl	800026c <__aeabi_dsub>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	e9c4 2300 	strd	r2, r3, [r4]
    X2[iAcol + 2] -= X1[2];
 8009ea8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009eac:	3302      	adds	r3, #2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009eb4:	4413      	add	r3, r2
 8009eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009eba:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8009ebe:	3310      	adds	r3, #16
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f8d7 4298 	ldr.w	r4, [r7, #664]	; 0x298
 8009ec8:	3402      	adds	r4, #2
 8009eca:	00e4      	lsls	r4, r4, #3
 8009ecc:	f8d7 52dc 	ldr.w	r5, [r7, #732]	; 0x2dc
 8009ed0:	442c      	add	r4, r5
 8009ed2:	f7f6 f9cb 	bl	800026c <__aeabi_dsub>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	e9c4 2300 	strd	r2, r3, [r4]
    iAcol += 3;
 8009ede:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009ee2:	3303      	adds	r3, #3
 8009ee4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  for (kk = 0; kk < 6; kk++) {
 8009ee8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009eec:	3301      	adds	r3, #1
 8009eee:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009ef2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ef6:	2b05      	cmp	r3, #5
 8009ef8:	dda3      	ble.n	8009e42 <UTMeanCovSqrt_C2vgLQ4W+0x17be>
  }

  signOOM = covWeights_1 * OOM;
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 8009f06:	f7f6 fb69 	bl	80005dc <__aeabi_dmul>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
  for (kk = 0; kk < 3; kk++) {
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009f18:	e071      	b.n	8009ffe <UTMeanCovSqrt_C2vgLQ4W+0x197a>
    iAcol = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009f20:	2300      	movs	r3, #0
 8009f22:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009f26:	e061      	b.n	8009fec <UTMeanCovSqrt_C2vgLQ4W+0x1968>
      Sy_tmp = iAcol + kk;
 8009f28:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8009f2c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009f30:	4413      	add	r3, r2
 8009f32:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      Ss[Sy_tmp] = 0.0;
 8009f36:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009f3a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	18d1      	adds	r1, r2, r3
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	f04f 0300 	mov.w	r3, #0
 8009f4a:	e9c1 2300 	strd	r2, r3, [r1]
      i = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8009f54:	2300      	movs	r3, #0
 8009f56:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009f5a:	e039      	b.n	8009fd0 <UTMeanCovSqrt_C2vgLQ4W+0x194c>
        Ss[Sy_tmp] += X2[i + kk] * Y2[i + i_1];
 8009f5c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009f60:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4413      	add	r3, r2
 8009f68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f6c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009f70:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009f74:	4413      	add	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8009f7c:	4413      	add	r3, r2
 8009f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f82:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009f86:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009f8a:	4413      	add	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	463a      	mov	r2, r7
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	4413      	add	r3, r2
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 fb20 	bl	80005dc <__aeabi_dmul>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f7f6 f964 	bl	8000270 <__adddf3>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8009fb0:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8009fb4:	00c9      	lsls	r1, r1, #3
 8009fb6:	4401      	add	r1, r0
 8009fb8:	e9c1 2300 	strd	r2, r3, [r1]
        i += 3;
 8009fbc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009fc0:	3303      	adds	r3, #3
 8009fc2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      for (i_0 = 0; i_0 < 6; i_0++) {
 8009fc6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009fca:	3301      	adds	r3, #1
 8009fcc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009fd0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009fd4:	2b05      	cmp	r3, #5
 8009fd6:	ddc1      	ble.n	8009f5c <UTMeanCovSqrt_C2vgLQ4W+0x18d8>
      }

      iAcol += 3;
 8009fd8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8009fdc:	3303      	adds	r3, #3
 8009fde:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    for (i_1 = 0; i_1 < 3; i_1++) {
 8009fe2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8009fec:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	dd99      	ble.n	8009f28 <UTMeanCovSqrt_C2vgLQ4W+0x18a4>
  for (kk = 0; kk < 3; kk++) {
 8009ff4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009ffe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a002:	2b02      	cmp	r3, #2
 800a004:	dd89      	ble.n	8009f1a <UTMeanCovSqrt_C2vgLQ4W+0x1896>
    }
  }

  for (kk = 0; kk < 9; kk++) {
 800a006:	2300      	movs	r3, #0
 800a008:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800a00c:	e01a      	b.n	800a044 <UTMeanCovSqrt_C2vgLQ4W+0x19c0>
    Pxy[kk] = Ss[kk] * signOOM;
 800a00e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800a012:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	4413      	add	r3, r2
 800a01a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a01e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800a028:	18d4      	adds	r4, r2, r3
 800a02a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800a02e:	f7f6 fad5 	bl	80005dc <__aeabi_dmul>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	e9c4 2300 	strd	r2, r3, [r4]
  for (kk = 0; kk < 9; kk++) {
 800a03a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a03e:	3301      	adds	r3, #1
 800a040:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800a044:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a048:	2b08      	cmp	r3, #8
 800a04a:	dde0      	ble.n	800a00e <UTMeanCovSqrt_C2vgLQ4W+0x198a>
  }
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 800a054:	46bd      	mov	sp, r7
 800a056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a05a:	bf00      	nop

0800a05c <UTMeanCovSqrt_C6QfB9Td>:
#include "rotate_LZ7ctbe0.h"

void UTMeanCovSqrt_C6QfB9Td(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 800a05c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a060:	ed2d 8b02 	vpush	{d8}
 800a064:	b0ac      	sub	sp, #176	; 0xb0
 800a066:	af00      	add	r7, sp, #0
 800a068:	6378      	str	r0, [r7, #52]	; 0x34
 800a06a:	6339      	str	r1, [r7, #48]	; 0x30
 800a06c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a070:	ed87 1b08 	vstr	d1, [r7, #32]
 800a074:	61fa      	str	r2, [r7, #28]
 800a076:	61bb      	str	r3, [r7, #24]
  real_T signOOM;
  real_T xnorm;
  int32_T b_k;
  int32_T i;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 800a078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a07e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a082:	f7f6 faab 	bl	80005dc <__aeabi_dmul>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a08e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a092:	2300      	movs	r3, #0
 800a094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a098:	e021      	b.n	800a0de <UTMeanCovSqrt_C6QfB9Td+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 800a09a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a09e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 fa90 	bl	80005dc <__aeabi_dmul>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7f6 f8d4 	bl	8000270 <__adddf3>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a0d0:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a0d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0d8:	3301      	adds	r3, #1
 800a0da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	ddd9      	ble.n	800a09a <UTMeanCovSqrt_C6QfB9Td+0x3e>
  }

  *Ymean *= OOM;
 800a0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0f2:	f7f6 fa73 	bl	80005dc <__aeabi_dmul>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a0fe:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 800a102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a10e:	f7f6 f8ad 	bl	800026c <__aeabi_dsub>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 800a11a:	2300      	movs	r3, #0
 800a11c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a120:	e01c      	b.n	800a15c <UTMeanCovSqrt_C6QfB9Td+0x100>
    Y2[knt] -= *Ymean;
 800a122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	4413      	add	r3, r2
 800a12c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	69fa      	ldr	r2, [r7, #28]
 800a140:	18d4      	adds	r4, r2, r3
 800a142:	4642      	mov	r2, r8
 800a144:	464b      	mov	r3, r9
 800a146:	f7f6 f891 	bl	800026c <__aeabi_dsub>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 800a152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a156:	3301      	adds	r3, #1
 800a158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a15c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a160:	2b05      	cmp	r3, #5
 800a162:	ddde      	ble.n	800a122 <UTMeanCovSqrt_C6QfB9Td+0xc6>
  }

  if (rtIsNaN(OOM)) {
 800a164:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a168:	f003 f82c 	bl	800d1c4 <rtIsNaN>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <UTMeanCovSqrt_C6QfB9Td+0x120>
    signOOM = OOM;
 800a172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a176:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a17a:	e025      	b.n	800a1c8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else if (OOM < 0.0) {
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	f04f 0300 	mov.w	r3, #0
 800a184:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a188:	f7f6 fc9a 	bl	8000ac0 <__aeabi_dcmplt>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <UTMeanCovSqrt_C6QfB9Td+0x142>
    signOOM = -1.0;
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	4bc3      	ldr	r3, [pc, #780]	; (800a4a4 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800a198:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a19c:	e014      	b.n	800a1c8 <UTMeanCovSqrt_C6QfB9Td+0x16c>
  } else {
    signOOM = (OOM > 0.0);
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	f04f 0300 	mov.w	r3, #0
 800a1a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a1aa:	f7f6 fca7 	bl	8000afc <__aeabi_dcmpgt>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <UTMeanCovSqrt_C6QfB9Td+0x160>
 800a1b4:	f04f 0200 	mov.w	r2, #0
 800a1b8:	4bbb      	ldr	r3, [pc, #748]	; (800a4a8 <UTMeanCovSqrt_C6QfB9Td+0x44c>)
 800a1ba:	e003      	b.n	800a1c4 <UTMeanCovSqrt_C6QfB9Td+0x168>
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	f04f 0300 	mov.w	r3, #0
 800a1c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  covWeights_0 = signOOM * covWeights[0];
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1d2:	f7f6 fa03 	bl	80005dc <__aeabi_dmul>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  covWeights_1 = signOOM * covWeights[1];
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1ea:	f7f6 f9f7 	bl	80005dc <__aeabi_dmul>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 800a1f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a1fe:	f7f6 f9ed 	bl	80005dc <__aeabi_dmul>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 800a20a:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800a20e:	f00f fe63 	bl	8019ed8 <sqrt>
 800a212:	eeb0 7a40 	vmov.f32	s14, s0
 800a216:	eef0 7a60 	vmov.f32	s15, s1
 800a21a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  for (knt = 0; knt < 6; knt++) {
 800a21e:	2300      	movs	r3, #0
 800a220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a224:	e01a      	b.n	800a25c <UTMeanCovSqrt_C6QfB9Td+0x200>
    A[knt] = signOOM * Y2[knt];
 800a226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a22a:	00db      	lsls	r3, r3, #3
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	4413      	add	r3, r2
 800a230:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a234:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a238:	f7f6 f9d0 	bl	80005dc <__aeabi_dmul>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a244:	00c9      	lsls	r1, r1, #3
 800a246:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a24a:	4401      	add	r1, r0
 800a24c:	3948      	subs	r1, #72	; 0x48
 800a24e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800a252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a256:	3301      	adds	r3, #1
 800a258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a25c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a260:	2b05      	cmp	r3, #5
 800a262:	dde0      	ble.n	800a226 <UTMeanCovSqrt_C6QfB9Td+0x1ca>
  }

  signOOM = A[0];
 800a264:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a268:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  xnorm = xnrm2_7bm34mDQ(5, A, 2);
 800a26c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a270:	2202      	movs	r2, #2
 800a272:	4619      	mov	r1, r3
 800a274:	2005      	movs	r0, #5
 800a276:	f005 f973 	bl	800f560 <xnrm2_7bm34mDQ>
 800a27a:	eeb0 7a40 	vmov.f32	s14, s0
 800a27e:	eef0 7a60 	vmov.f32	s15, s1
 800a282:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (xnorm != 0.0) {
 800a286:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	f7f6 fc0b 	bl	8000aac <__aeabi_dcmpeq>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f040 80e7 	bne.w	800a46c <UTMeanCovSqrt_C6QfB9Td+0x410>
    xnorm = rt_hypotd_snf(A[0], xnorm);
 800a29e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800a2a2:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800a2a6:	eeb0 1a46 	vmov.f32	s2, s12
 800a2aa:	eef0 1a66 	vmov.f32	s3, s13
 800a2ae:	eeb0 0a47 	vmov.f32	s0, s14
 800a2b2:	eef0 0a67 	vmov.f32	s1, s15
 800a2b6:	f002 fe77 	bl	800cfa8 <rt_hypotd_snf>
 800a2ba:	eeb0 7a40 	vmov.f32	s14, s0
 800a2be:	eef0 7a60 	vmov.f32	s15, s1
 800a2c2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 800a2c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	f7f6 fc09 	bl	8000ae8 <__aeabi_dcmpge>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d009      	beq.n	800a2f0 <UTMeanCovSqrt_C6QfB9Td+0x294>
      xnorm = -xnorm;
 800a2dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2e0:	613a      	str	r2, [r7, #16]
 800a2e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	ed97 7b04 	vldr	d7, [r7, #16]
 800a2ec:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(xnorm) < 1.0020841800044864E-292) {
 800a2f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2f4:	60ba      	str	r2, [r7, #8]
 800a2f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	f04f 0200 	mov.w	r2, #0
 800a300:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a308:	f7f6 fbda 	bl	8000ac0 <__aeabi_dcmplt>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 80a8 	beq.w	800a464 <UTMeanCovSqrt_C6QfB9Td+0x408>
      knt = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      do {
        knt++;
 800a31a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a31e:	3301      	adds	r3, #1
 800a320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (b_k = 1; b_k < 6; b_k++) {
 800a324:	2301      	movs	r3, #1
 800a326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a32a:	e01d      	b.n	800a368 <UTMeanCovSqrt_C6QfB9Td+0x30c>
          A[b_k] *= 9.9792015476736E+291;
 800a32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a330:	00db      	lsls	r3, r3, #3
 800a332:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a336:	4413      	add	r3, r2
 800a338:	3b48      	subs	r3, #72	; 0x48
 800a33a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a33e:	f04f 0200 	mov.w	r2, #0
 800a342:	4b5a      	ldr	r3, [pc, #360]	; (800a4ac <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a344:	f7f6 f94a 	bl	80005dc <__aeabi_dmul>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a350:	00c9      	lsls	r1, r1, #3
 800a352:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a356:	4401      	add	r1, r0
 800a358:	3948      	subs	r1, #72	; 0x48
 800a35a:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 1; b_k < 6; b_k++) {
 800a35e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a362:	3301      	adds	r3, #1
 800a364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	dddd      	ble.n	800a32c <UTMeanCovSqrt_C6QfB9Td+0x2d0>
        }

        xnorm *= 9.9792015476736E+291;
 800a370:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a374:	f04f 0200 	mov.w	r2, #0
 800a378:	4b4c      	ldr	r3, [pc, #304]	; (800a4ac <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a37a:	f7f6 f92f 	bl	80005dc <__aeabi_dmul>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        signOOM *= 9.9792015476736E+291;
 800a386:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	4b47      	ldr	r3, [pc, #284]	; (800a4ac <UTMeanCovSqrt_C6QfB9Td+0x450>)
 800a390:	f7f6 f924 	bl	80005dc <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));
 800a39c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a3a0:	603a      	str	r2, [r7, #0]
 800a3a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3a6:	607b      	str	r3, [r7, #4]
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a3b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3b4:	f7f6 fb84 	bl	8000ac0 <__aeabi_dcmplt>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <UTMeanCovSqrt_C6QfB9Td+0x36a>
 800a3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3c2:	2b13      	cmp	r3, #19
 800a3c4:	dda9      	ble.n	800a31a <UTMeanCovSqrt_C6QfB9Td+0x2be>

      xnorm = rt_hypotd_snf(signOOM, xnrm2_7bm34mDQ(5, A, 2));
 800a3c6:	ed97 8b10 	vldr	d8, [r7, #64]	; 0x40
 800a3ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2005      	movs	r0, #5
 800a3d4:	f005 f8c4 	bl	800f560 <xnrm2_7bm34mDQ>
 800a3d8:	eeb0 7a40 	vmov.f32	s14, s0
 800a3dc:	eef0 7a60 	vmov.f32	s15, s1
 800a3e0:	eeb0 1a47 	vmov.f32	s2, s14
 800a3e4:	eef0 1a67 	vmov.f32	s3, s15
 800a3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800a3ec:	eef0 0a68 	vmov.f32	s1, s17
 800a3f0:	f002 fdda 	bl	800cfa8 <rt_hypotd_snf>
 800a3f4:	eeb0 7a40 	vmov.f32	s14, s0
 800a3f8:	eef0 7a60 	vmov.f32	s15, s1
 800a3fc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (signOOM >= 0.0) {
 800a400:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a404:	f04f 0200 	mov.w	r2, #0
 800a408:	f04f 0300 	mov.w	r3, #0
 800a40c:	f7f6 fb6c 	bl	8000ae8 <__aeabi_dcmpge>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d006      	beq.n	800a424 <UTMeanCovSqrt_C6QfB9Td+0x3c8>
        xnorm = -xnorm;
 800a416:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a41a:	4692      	mov	sl, r2
 800a41c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800a420:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 800a424:	2300      	movs	r3, #0
 800a426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a42a:	e010      	b.n	800a44e <UTMeanCovSqrt_C6QfB9Td+0x3f2>
        xnorm *= 1.0020841800044864E-292;
 800a42c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a430:	f04f 0200 	mov.w	r2, #0
 800a434:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800a438:	f7f6 f8d0 	bl	80005dc <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 800a444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a448:	3301      	adds	r3, #1
 800a44a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a44e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a456:	429a      	cmp	r2, r3
 800a458:	dbe8      	blt.n	800a42c <UTMeanCovSqrt_C6QfB9Td+0x3d0>
      }

      signOOM = xnorm;
 800a45a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a45e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a462:	e003      	b.n	800a46c <UTMeanCovSqrt_C6QfB9Td+0x410>
    } else {
      signOOM = xnorm;
 800a464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a468:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  if (!rtIsNaN(covWeights_0)) {
 800a46c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800a470:	eeb0 0a47 	vmov.f32	s0, s14
 800a474:	eef0 0a67 	vmov.f32	s1, s15
 800a478:	f002 fea4 	bl	800d1c4 <rtIsNaN>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d12b      	bne.n	800a4da <UTMeanCovSqrt_C6QfB9Td+0x47e>
    if (covWeights_0 < 0.0) {
 800a482:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a486:	f04f 0200 	mov.w	r2, #0
 800a48a:	f04f 0300 	mov.w	r3, #0
 800a48e:	f7f6 fb17 	bl	8000ac0 <__aeabi_dcmplt>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00b      	beq.n	800a4b0 <UTMeanCovSqrt_C6QfB9Td+0x454>
      covWeights_0 = -1.0;
 800a498:	f04f 0200 	mov.w	r2, #0
 800a49c:	4b01      	ldr	r3, [pc, #4]	; (800a4a4 <UTMeanCovSqrt_C6QfB9Td+0x448>)
 800a49e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800a4a2:	e01a      	b.n	800a4da <UTMeanCovSqrt_C6QfB9Td+0x47e>
 800a4a4:	bff00000 	.word	0xbff00000
 800a4a8:	3ff00000 	.word	0x3ff00000
 800a4ac:	7c900000 	.word	0x7c900000
    } else {
      covWeights_0 = (covWeights_0 > 0.0);
 800a4b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	f7f6 fb1e 	bl	8000afc <__aeabi_dcmpgt>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <UTMeanCovSqrt_C6QfB9Td+0x472>
 800a4c6:	f04f 0200 	mov.w	r2, #0
 800a4ca:	4b99      	ldr	r3, [pc, #612]	; (800a730 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800a4cc:	e003      	b.n	800a4d6 <UTMeanCovSqrt_C6QfB9Td+0x47a>
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	f04f 0300 	mov.w	r3, #0
 800a4d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (covWeights_0 == 1.0) {
 800a4da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a4de:	f04f 0200 	mov.w	r2, #0
 800a4e2:	4b93      	ldr	r3, [pc, #588]	; (800a730 <UTMeanCovSqrt_C6QfB9Td+0x6d4>)
 800a4e4:	f7f6 fae2 	bl	8000aac <__aeabi_dcmpeq>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d021      	beq.n	800a532 <UTMeanCovSqrt_C6QfB9Td+0x4d6>
    rotate_LZ7ctbe0(signOOM, Y1, &signOOM, &xnorm, &covWeights_0);
 800a4ee:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800a4f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a4fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a4fe:	4618      	mov	r0, r3
 800a500:	ed97 1b08 	vldr	d1, [r7, #32]
 800a504:	eeb0 0a47 	vmov.f32	s0, s14
 800a508:	eef0 0a67 	vmov.f32	s1, s15
 800a50c:	f002 fbc2 	bl	800cc94 <rotate_LZ7ctbe0>
    *Sy = sqrt(OOM) * covWeights_0;
 800a510:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a514:	f00f fce0 	bl	8019ed8 <sqrt>
 800a518:	ec51 0b10 	vmov	r0, r1, d0
 800a51c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a520:	f7f6 f85c 	bl	80005dc <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800a52c:	e9c1 2300 	strd	r2, r3, [r1]
 800a530:	e016      	b.n	800a560 <UTMeanCovSqrt_C6QfB9Td+0x504>
  } else {
    cholUpdateFactor_HBMX5a5h(&signOOM, Y1);
 800a532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a536:	ed97 0b08 	vldr	d0, [r7, #32]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 f8fa 	bl	800a734 <cholUpdateFactor_HBMX5a5h>
    *Sy = sqrt(OOM) * signOOM;
 800a540:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a544:	f00f fcc8 	bl	8019ed8 <sqrt>
 800a548:	ec51 0b10 	vmov	r0, r1, d0
 800a54c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a550:	f7f6 f844 	bl	80005dc <__aeabi_dmul>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800a55c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  b_k = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800a566:	2300      	movs	r3, #0
 800a568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a56c:	e054      	b.n	800a618 <UTMeanCovSqrt_C6QfB9Td+0x5bc>
    X2[b_k] -= X1[0];
 800a56e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a578:	4413      	add	r3, r2
 800a57a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a588:	00e4      	lsls	r4, r4, #3
 800a58a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a58e:	442c      	add	r4, r5
 800a590:	f7f5 fe6c 	bl	800026c <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 1] -= X1[1];
 800a59c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a5a8:	4413      	add	r3, r2
 800a5aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a5ba:	3401      	adds	r4, #1
 800a5bc:	00e4      	lsls	r4, r4, #3
 800a5be:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a5c2:	442c      	add	r4, r5
 800a5c4:	f7f5 fe52 	bl	800026c <__aeabi_dsub>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	e9c4 2300 	strd	r2, r3, [r4]
    X2[b_k + 2] -= X1[2];
 800a5d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5d4:	3302      	adds	r3, #2
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a5dc:	4413      	add	r3, r2
 800a5de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	3310      	adds	r3, #16
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a5ee:	3402      	adds	r4, #2
 800a5f0:	00e4      	lsls	r4, r4, #3
 800a5f2:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800a5f6:	442c      	add	r4, r5
 800a5f8:	f7f5 fe38 	bl	800026c <__aeabi_dsub>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	e9c4 2300 	strd	r2, r3, [r4]
    b_k += 3;
 800a604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a608:	3303      	adds	r3, #3
 800a60a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (knt = 0; knt < 6; knt++) {
 800a60e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a612:	3301      	adds	r3, #1
 800a614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a618:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a61c:	2b05      	cmp	r3, #5
 800a61e:	dda6      	ble.n	800a56e <UTMeanCovSqrt_C6QfB9Td+0x512>
  }

  signOOM = covWeights_1 * OOM;
 800a620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a628:	f7f5 ffd8 	bl	80005dc <__aeabi_dmul>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (knt = 0; knt < 3; knt++) {
 800a634:	2300      	movs	r3, #0
 800a636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a63a:	e06c      	b.n	800a716 <UTMeanCovSqrt_C6QfB9Td+0x6ba>
    X2_0[knt] = 0.0;
 800a63c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a640:	00db      	lsls	r3, r3, #3
 800a642:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a646:	4413      	add	r3, r2
 800a648:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	e9c1 2300 	strd	r2, r3, [r1]
    b_k = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800a65e:	2300      	movs	r3, #0
 800a660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a664:	e037      	b.n	800a6d6 <UTMeanCovSqrt_C6QfB9Td+0x67a>
      X2_0[knt] += X2[b_k + knt] * Y2[i];
 800a666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a670:	4413      	add	r3, r2
 800a672:	3b60      	subs	r3, #96	; 0x60
 800a674:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a678:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a67c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a680:	4413      	add	r3, r2
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a688:	4413      	add	r3, r2
 800a68a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a68e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	4413      	add	r3, r2
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	f7f5 ff9e 	bl	80005dc <__aeabi_dmul>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f5 fde2 	bl	8000270 <__adddf3>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6b4:	00c9      	lsls	r1, r1, #3
 800a6b6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800a6ba:	4401      	add	r1, r0
 800a6bc:	3960      	subs	r1, #96	; 0x60
 800a6be:	e9c1 2300 	strd	r2, r3, [r1]
      b_k += 3;
 800a6c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6c6:	3303      	adds	r3, #3
 800a6c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for (i = 0; i < 6; i++) {
 800a6cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	ddc3      	ble.n	800a666 <UTMeanCovSqrt_C6QfB9Td+0x60a>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 800a6de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a6e8:	4413      	add	r3, r2
 800a6ea:	3b60      	subs	r3, #96	; 0x60
 800a6ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a6f4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800a6f8:	00e4      	lsls	r4, r4, #3
 800a6fa:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800a6fe:	442c      	add	r4, r5
 800a700:	f7f5 ff6c 	bl	80005dc <__aeabi_dmul>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 800a70c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a710:	3301      	adds	r3, #1
 800a712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	dd8e      	ble.n	800a63c <UTMeanCovSqrt_C6QfB9Td+0x5e0>
  }
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	37b0      	adds	r7, #176	; 0xb0
 800a724:	46bd      	mov	sp, r7
 800a726:	ecbd 8b02 	vpop	{d8}
 800a72a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a72e:	bf00      	nop
 800a730:	3ff00000 	.word	0x3ff00000

0800a734 <cholUpdateFactor_HBMX5a5h>:
#include "rotate_LZ7ctbe0.h"
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

void cholUpdateFactor_HBMX5a5h(real_T *S, real_T U)
{
 800a734:	b5b0      	push	{r4, r5, r7, lr}
 800a736:	b090      	sub	sp, #64	; 0x40
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	ed87 0b00 	vstr	d0, [r7]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	e9c7 2308 	strd	r2, r3, [r7, #32]
  p = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (*S == 0.0) {
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a756:	f04f 0200 	mov.w	r2, #0
 800a75a:	f04f 0300 	mov.w	r3, #0
 800a75e:	f7f6 f9a5 	bl	8000aac <__aeabi_dcmpeq>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <cholUpdateFactor_HBMX5a5h+0x3c>
    p = 2;
 800a768:	2302      	movs	r3, #2
 800a76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a76e:	e065      	b.n	800a83c <cholUpdateFactor_HBMX5a5h+0x108>
  } else {
    s = U / *S;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a77a:	f7f6 f859 	bl	8000830 <__aeabi_ddiv>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    nrmx = fabs(s);
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	63bb      	str	r3, [r7, #56]	; 0x38
 800a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (nrmx >= 1.0) {
 800a792:	f04f 0200 	mov.w	r2, #0
 800a796:	4b5c      	ldr	r3, [pc, #368]	; (800a908 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a798:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a79c:	f7f6 f9a4 	bl	8000ae8 <__aeabi_dcmpge>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <cholUpdateFactor_HBMX5a5h+0x7a>
      p = 1;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7ac:	e046      	b.n	800a83c <cholUpdateFactor_HBMX5a5h+0x108>
    } else {
      rotate_LZ7ctbe0(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 800a7ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a7b6:	f7f5 ff11 	bl	80005dc <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	f04f 0000 	mov.w	r0, #0
 800a7c2:	4951      	ldr	r1, [pc, #324]	; (800a908 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a7c4:	f7f5 fd52 	bl	800026c <__aeabi_dsub>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	ec43 2b17 	vmov	d7, r2, r3
 800a7d0:	eeb0 0a47 	vmov.f32	s0, s14
 800a7d4:	eef0 0a67 	vmov.f32	s1, s15
 800a7d8:	f00f fb7e 	bl	8019ed8 <sqrt>
 800a7dc:	eeb0 7a40 	vmov.f32	s14, s0
 800a7e0:	eef0 7a60 	vmov.f32	s15, s1
 800a7e4:	f107 0218 	add.w	r2, r7, #24
 800a7e8:	f107 0110 	add.w	r1, r7, #16
 800a7ec:	f107 0320 	add.w	r3, r7, #32
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800a7f6:	eeb0 0a47 	vmov.f32	s0, s14
 800a7fa:	eef0 0a67 	vmov.f32	s1, s15
 800a7fe:	f002 fa49 	bl	800cc94 <rotate_LZ7ctbe0>
      R = R * *S - c * 0.0;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a808:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a80c:	f7f5 fee6 	bl	80005dc <__aeabi_dmul>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4614      	mov	r4, r2
 800a816:	461d      	mov	r5, r3
 800a818:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	f04f 0300 	mov.w	r3, #0
 800a824:	f7f5 feda 	bl	80005dc <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4620      	mov	r0, r4
 800a82e:	4629      	mov	r1, r5
 800a830:	f7f5 fd1c 	bl	800026c <__aeabi_dsub>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
  }

  *S = R;
 800a83c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a840:	68f9      	ldr	r1, [r7, #12]
 800a842:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 800a846:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d057      	beq.n	800a8fe <cholUpdateFactor_HBMX5a5h+0x1ca>
    s = R * R - U * U;
 800a84e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a856:	f7f5 fec1 	bl	80005dc <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4614      	mov	r4, r2
 800a860:	461d      	mov	r5, r3
 800a862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a86a:	f7f5 feb7 	bl	80005dc <__aeabi_dmul>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	f7f5 fcf9 	bl	800026c <__aeabi_dsub>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 800a882:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a886:	f002 fc79 	bl	800d17c <rtIsInf>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d11d      	bne.n	800a8cc <cholUpdateFactor_HBMX5a5h+0x198>
 800a890:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a894:	f002 fc96 	bl	800d1c4 <rtIsNaN>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d116      	bne.n	800a8cc <cholUpdateFactor_HBMX5a5h+0x198>
      nrmx = 1.0;
 800a89e:	f04f 0200 	mov.w	r2, #0
 800a8a2:	4b19      	ldr	r3, [pc, #100]	; (800a908 <cholUpdateFactor_HBMX5a5h+0x1d4>)
 800a8a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      if (s != 0.0) {
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a8b4:	f7f6 f8fa 	bl	8000aac <__aeabi_dcmpeq>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d110      	bne.n	800a8e0 <cholUpdateFactor_HBMX5a5h+0x1ac>
        s = fabs(s);
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
 800a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (s != 0.0) {
 800a8ca:	e009      	b.n	800a8e0 <cholUpdateFactor_HBMX5a5h+0x1ac>
      }
    } else {
      s = (rtNaN);
 800a8cc:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      nrmx = (rtNaN);
 800a8d6:	4b0d      	ldr	r3, [pc, #52]	; (800a90c <cholUpdateFactor_HBMX5a5h+0x1d8>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    *S = nrmx * sqrt(s);
 800a8e0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800a8e4:	f00f faf8 	bl	8019ed8 <sqrt>
 800a8e8:	ec51 0b10 	vmov	r0, r1, d0
 800a8ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a8f0:	f7f5 fe74 	bl	80005dc <__aeabi_dmul>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	68f9      	ldr	r1, [r7, #12]
 800a8fa:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 800a8fe:	bf00      	nop
 800a900:	3740      	adds	r7, #64	; 0x40
 800a902:	46bd      	mov	sp, r7
 800a904:	bdb0      	pop	{r4, r5, r7, pc}
 800a906:	bf00      	nop
 800a908:	3ff00000 	.word	0x3ff00000
 800a90c:	2001e8a0 	.word	0x2001e8a0

0800a910 <look1_binlxpw>:
#include "look1_binlxpw.h"
#include "rtwtypes.h"

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800a910:	b5b0      	push	{r4, r5, r7, lr}
 800a912:	b08e      	sub	sp, #56	; 0x38
 800a914:	af00      	add	r7, sp, #0
 800a916:	ed87 0b04 	vstr	d0, [r7, #16]
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
  real_T frac;
  real_T yL_0d0;
  uint32_T iLeft;
  if (u0 <= bp0[0U]) {
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a92a:	f7f6 f8d3 	bl	8000ad4 <__aeabi_dcmple>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d020      	beq.n	800a976 <look1_binlxpw+0x66>
    iLeft = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a942:	f7f5 fc93 	bl	800026c <__aeabi_dsub>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4614      	mov	r4, r2
 800a94c:	461d      	mov	r5, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3308      	adds	r3, #8
 800a952:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fc86 	bl	800026c <__aeabi_dsub>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 ff62 	bl	8000830 <__aeabi_ddiv>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a974:	e087      	b.n	800aa86 <look1_binlxpw+0x176>
  } else if (u0 < bp0[maxIndex]) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4413      	add	r3, r2
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a986:	f7f6 f89b 	bl	8000ac0 <__aeabi_dcmplt>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d04b      	beq.n	800aa28 <look1_binlxpw+0x118>
    uint32_T bpIdx;
    uint32_T iRght;
    bpIdx = maxIndex >> 1U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	085b      	lsrs	r3, r3, #1
 800a994:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 800a99e:	e016      	b.n	800a9ce <look1_binlxpw+0xbe>
      if (u0 < bp0[bpIdx]) {
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a9b0:	f7f6 f886 	bl	8000ac0 <__aeabi_dcmplt>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <look1_binlxpw+0xb0>
        iRght = bpIdx;
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9be:	e001      	b.n	800a9c4 <look1_binlxpw+0xb4>
      } else {
        iLeft = bpIdx;
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800a9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	4413      	add	r3, r2
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 800a9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d8e3      	bhi.n	800a9a0 <look1_binlxpw+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a9e8:	f7f5 fc40 	bl	800026c <__aeabi_dsub>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	461d      	mov	r5, r3
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fc2d 	bl	800026c <__aeabi_dsub>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4620      	mov	r0, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f7f5 ff09 	bl	8000830 <__aeabi_ddiv>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800aa26:	e02e      	b.n	800aa86 <look1_binlxpw+0x176>
  } else {
    iLeft = maxIndex - 1U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800aa34:	3b01      	subs	r3, #1
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa44:	f7f5 fc12 	bl	800026c <__aeabi_dsub>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	461d      	mov	r5, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800aa62:	3b01      	subs	r3, #1
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	4413      	add	r3, r2
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f7f5 fbfd 	bl	800026c <__aeabi_dsub>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f5 fed9 	bl	8000830 <__aeabi_ddiv>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  yL_0d0 = table[iLeft];
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	3301      	adds	r3, #1
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aaa8:	f7f5 fbe0 	bl	800026c <__aeabi_dsub>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4610      	mov	r0, r2
 800aab2:	4619      	mov	r1, r3
 800aab4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aab8:	f7f5 fd90 	bl	80005dc <__aeabi_dmul>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4610      	mov	r0, r2
 800aac2:	4619      	mov	r1, r3
 800aac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aac8:	f7f5 fbd2 	bl	8000270 <__adddf3>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	ec43 2b17 	vmov	d7, r2, r3
}
 800aad4:	eeb0 0a47 	vmov.f32	s0, s14
 800aad8:	eef0 0a67 	vmov.f32	s1, s15
 800aadc:	3738      	adds	r7, #56	; 0x38
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aae4 <qr_5a2P8Gh6>:
#include <math.h>
#include "xgemv_fRiR1I1O.h"
#include "xgerc_tNNiazQU.h"

void qr_5a2P8Gh6(const real_T A[9], real_T Q[9], real_T R[9])
{
 800aae4:	b5b0      	push	{r4, r5, r7, lr}
 800aae6:	b0c0      	sub	sp, #256	; 0x100
 800aae8:	af04      	add	r7, sp, #16
 800aaea:	6578      	str	r0, [r7, #84]	; 0x54
 800aaec:	6539      	str	r1, [r7, #80]	; 0x50
 800aaee:	64fa      	str	r2, [r7, #76]	; 0x4c
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 800aaf0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aaf4:	2248      	movs	r2, #72	; 0x48
 800aaf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f00f f827 	bl	8019b4c <memcpy>
  tau_idx_0 = 0.0;
 800aafe:	f04f 0200 	mov.w	r2, #0
 800ab02:	f04f 0300 	mov.w	r3, #0
 800ab06:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  work[0] = 0.0;
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	f04f 0300 	mov.w	r3, #0
 800ab12:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  tau_idx_1 = 0.0;
 800ab16:	f04f 0200 	mov.w	r2, #0
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  work[1] = 0.0;
 800ab22:	f04f 0200 	mov.w	r2, #0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  work[2] = 0.0;
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  atmp = b_A[0];
 800ab3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800ab3e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(2, b_A, 2);
 800ab42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab46:	2202      	movs	r2, #2
 800ab48:	4619      	mov	r1, r3
 800ab4a:	2002      	movs	r0, #2
 800ab4c:	f004 ffc0 	bl	800fad0 <xnrm2_xDOlDEtw>
 800ab50:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800ab54:	f04f 0200 	mov.w	r2, #0
 800ab58:	f04f 0300 	mov.w	r3, #0
 800ab5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab60:	f7f5 ffa4 	bl	8000aac <__aeabi_dcmpeq>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f040 8172 	bne.w	800ae50 <qr_5a2P8Gh6+0x36c>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800ab6c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800ab70:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800ab74:	eeb0 0a47 	vmov.f32	s0, s14
 800ab78:	eef0 0a67 	vmov.f32	s1, s15
 800ab7c:	f002 fa14 	bl	800cfa8 <rt_hypotd_snf>
 800ab80:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[0] >= 0.0) {
 800ab84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800ab88:	f04f 0200 	mov.w	r2, #0
 800ab8c:	f04f 0300 	mov.w	r3, #0
 800ab90:	f7f5 ffaa 	bl	8000ae8 <__aeabi_dcmpge>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <qr_5a2P8Gh6+0xca>
      beta1 = -beta1;
 800ab9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aba6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800abaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800abae:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800abb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abb6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800abc2:	4620      	mov	r0, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7f5 ff7b 	bl	8000ac0 <__aeabi_dcmplt>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80f1 	beq.w	800adb4 <qr_5a2P8Gh6+0x2d0>
      knt = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800abd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abdc:	3301      	adds	r3, #1
 800abde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800abe2:	2301      	movs	r3, #1
 800abe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abe8:	e01f      	b.n	800ac2a <qr_5a2P8Gh6+0x146>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800abea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800abf4:	4413      	add	r3, r2
 800abf6:	3b80      	subs	r3, #128	; 0x80
 800abf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abfc:	f04f 0200 	mov.w	r2, #0
 800ac00:	4bc9      	ldr	r3, [pc, #804]	; (800af28 <qr_5a2P8Gh6+0x444>)
 800ac02:	f7f5 fceb 	bl	80005dc <__aeabi_dmul>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ac18:	4413      	add	r3, r2
 800ac1a:	3b80      	subs	r3, #128	; 0x80
 800ac1c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800ac20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac24:	3301      	adds	r3, #1
 800ac26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	dddb      	ble.n	800abea <qr_5a2P8Gh6+0x106>
        }

        beta1 *= 9.9792015476736E+291;
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	4bbc      	ldr	r3, [pc, #752]	; (800af28 <qr_5a2P8Gh6+0x444>)
 800ac38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac3c:	f7f5 fcce 	bl	80005dc <__aeabi_dmul>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	4bb6      	ldr	r3, [pc, #728]	; (800af28 <qr_5a2P8Gh6+0x444>)
 800ac4e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ac52:	f7f5 fcc3 	bl	80005dc <__aeabi_dmul>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800ac5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac62:	643b      	str	r3, [r7, #64]	; 0x40
 800ac64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac6c:	647b      	str	r3, [r7, #68]	; 0x44
 800ac6e:	f04f 0200 	mov.w	r2, #0
 800ac72:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ac76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ac7a:	f7f5 ff21 	bl	8000ac0 <__aeabi_dcmplt>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <qr_5a2P8Gh6+0x1a8>
 800ac84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac88:	2b13      	cmp	r3, #19
 800ac8a:	dda5      	ble.n	800abd8 <qr_5a2P8Gh6+0xf4>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(2, b_A, 2));
 800ac8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ac90:	2202      	movs	r2, #2
 800ac92:	4619      	mov	r1, r3
 800ac94:	2002      	movs	r0, #2
 800ac96:	f004 ff1b 	bl	800fad0 <xnrm2_xDOlDEtw>
 800ac9a:	eeb0 7a40 	vmov.f32	s14, s0
 800ac9e:	eef0 7a60 	vmov.f32	s15, s1
 800aca2:	eeb0 1a47 	vmov.f32	s2, s14
 800aca6:	eef0 1a67 	vmov.f32	s3, s15
 800acaa:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800acae:	f002 f97b 	bl	800cfa8 <rt_hypotd_snf>
 800acb2:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800acb6:	f04f 0200 	mov.w	r2, #0
 800acba:	f04f 0300 	mov.w	r3, #0
 800acbe:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800acc2:	f7f5 ff11 	bl	8000ae8 <__aeabi_dcmpge>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d009      	beq.n	800ace0 <qr_5a2P8Gh6+0x1fc>
        beta1 = -beta1;
 800accc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800ace0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ace4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ace8:	f7f5 fac0 	bl	800026c <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4610      	mov	r0, r2
 800acf2:	4619      	mov	r1, r3
 800acf4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800acf8:	f7f5 fd9a 	bl	8000830 <__aeabi_ddiv>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (atmp - beta1);
 800ad04:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ad08:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800ad0c:	f7f5 faae 	bl	800026c <__aeabi_dsub>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	f04f 0000 	mov.w	r0, #0
 800ad18:	4984      	ldr	r1, [pc, #528]	; (800af2c <qr_5a2P8Gh6+0x448>)
 800ad1a:	f7f5 fd89 	bl	8000830 <__aeabi_ddiv>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800ad26:	2301      	movs	r3, #1
 800ad28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad2c:	e01e      	b.n	800ad6c <qr_5a2P8Gh6+0x288>
        b_A[b_coltop] *= atmp;
 800ad2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ad38:	4413      	add	r3, r2
 800ad3a:	3b80      	subs	r3, #128	; 0x80
 800ad3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad40:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ad44:	f7f5 fc4a 	bl	80005dc <__aeabi_dmul>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4619      	mov	r1, r3
 800ad50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad54:	00db      	lsls	r3, r3, #3
 800ad56:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ad5a:	4413      	add	r3, r2
 800ad5c:	3b80      	subs	r3, #128	; 0x80
 800ad5e:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800ad62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad66:	3301      	adds	r3, #1
 800ad68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	dddc      	ble.n	800ad2e <qr_5a2P8Gh6+0x24a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800ad74:	2300      	movs	r3, #0
 800ad76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad7a:	e010      	b.n	800ad9e <qr_5a2P8Gh6+0x2ba>
        beta1 *= 1.0020841800044864E-292;
 800ad7c:	f04f 0200 	mov.w	r2, #0
 800ad80:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800ad84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ad88:	f7f5 fc28 	bl	80005dc <__aeabi_dmul>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800ad94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad98:	3301      	adds	r3, #1
 800ad9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ada2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ada6:	429a      	cmp	r2, r3
 800ada8:	dbe8      	blt.n	800ad7c <qr_5a2P8Gh6+0x298>
      }

      atmp = beta1;
 800adaa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800adae:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800adb2:	e04d      	b.n	800ae50 <qr_5a2P8Gh6+0x36c>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800adb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800adb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800adbc:	f7f5 fa56 	bl	800026c <__aeabi_dsub>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4610      	mov	r0, r2
 800adc6:	4619      	mov	r1, r3
 800adc8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800adcc:	f7f5 fd30 	bl	8000830 <__aeabi_ddiv>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      atmp = 1.0 / (b_A[0] - beta1);
 800add8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800addc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ade0:	f7f5 fa44 	bl	800026c <__aeabi_dsub>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	f04f 0000 	mov.w	r0, #0
 800adec:	494f      	ldr	r1, [pc, #316]	; (800af2c <qr_5a2P8Gh6+0x448>)
 800adee:	f7f5 fd1f 	bl	8000830 <__aeabi_ddiv>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800adfa:	2301      	movs	r3, #1
 800adfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae00:	e01e      	b.n	800ae40 <qr_5a2P8Gh6+0x35c>
        b_A[c_lastc] *= atmp;
 800ae02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3b80      	subs	r3, #128	; 0x80
 800ae10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae14:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ae18:	f7f5 fbe0 	bl	80005dc <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4610      	mov	r0, r2
 800ae22:	4619      	mov	r1, r3
 800ae24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800ae2e:	4413      	add	r3, r2
 800ae30:	3b80      	subs	r3, #128	; 0x80
 800ae32:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 3; c_lastc++) {
 800ae36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	dddc      	ble.n	800ae02 <qr_5a2P8Gh6+0x31e>
      }

      atmp = beta1;
 800ae48:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ae4c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[0] = 1.0;
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	4b35      	ldr	r3, [pc, #212]	; (800af2c <qr_5a2P8Gh6+0x448>)
 800ae56:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800ae5a:	f04f 0200 	mov.w	r2, #0
 800ae5e:	f04f 0300 	mov.w	r3, #0
 800ae62:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ae66:	f7f5 fe21 	bl	8000aac <__aeabi_dcmpeq>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f040 8081 	bne.w	800af74 <qr_5a2P8Gh6+0x490>
    knt = 3;
 800ae72:	2303      	movs	r3, #3
 800ae74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 2;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ae7e:	e009      	b.n	800ae94 <qr_5a2P8Gh6+0x3b0>
      knt--;
 800ae80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae84:	3b01      	subs	r3, #1
 800ae86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800ae8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800ae94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dd11      	ble.n	800aec0 <qr_5a2P8Gh6+0x3dc>
 800ae9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800aea6:	4413      	add	r3, r2
 800aea8:	3b80      	subs	r3, #128	; 0x80
 800aeaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aeae:	f04f 0200 	mov.w	r2, #0
 800aeb2:	f04f 0300 	mov.w	r3, #0
 800aeb6:	f7f5 fdf9 	bl	8000aac <__aeabi_dcmpeq>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1df      	bne.n	800ae80 <qr_5a2P8Gh6+0x39c>
    }

    c_lastc = 2;
 800aec0:	2302      	movs	r3, #2
 800aec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    exitg2 = false;
 800aec6:	2300      	movs	r3, #0
 800aec8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800aecc:	e049      	b.n	800af62 <qr_5a2P8Gh6+0x47e>
      b_coltop = (c_lastc - 1) * 3 + 3;
 800aece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aed2:	4613      	mov	r3, r2
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	4413      	add	r3, r2
 800aed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      coltop = b_coltop;
 800aedc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aee0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      do {
        exitg1 = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (coltop + 1 <= b_coltop + knt) {
 800aeea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800aeee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aef2:	441a      	add	r2, r3
 800aef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aef8:	4293      	cmp	r3, r2
 800aefa:	da1f      	bge.n	800af3c <qr_5a2P8Gh6+0x458>
          if (b_A[coltop] != 0.0) {
 800aefc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800af06:	4413      	add	r3, r2
 800af08:	3b80      	subs	r3, #128	; 0x80
 800af0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	f04f 0300 	mov.w	r3, #0
 800af16:	f7f5 fdc9 	bl	8000aac <__aeabi_dcmpeq>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d107      	bne.n	800af30 <qr_5a2P8Gh6+0x44c>
            exitg1 = 1;
 800af20:	2301      	movs	r3, #1
 800af22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af26:	e011      	b.n	800af4c <qr_5a2P8Gh6+0x468>
 800af28:	7c900000 	.word	0x7c900000
 800af2c:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800af30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af34:	3301      	adds	r3, #1
 800af36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af3a:	e007      	b.n	800af4c <qr_5a2P8Gh6+0x468>
          }
        } else {
          c_lastc--;
 800af3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af40:	3b01      	subs	r3, #1
 800af42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
          exitg1 = 2;
 800af46:	2302      	movs	r3, #2
 800af48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800af4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0c7      	beq.n	800aee4 <qr_5a2P8Gh6+0x400>

      if (exitg1 == 1) {
 800af54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d102      	bne.n	800af62 <qr_5a2P8Gh6+0x47e>
        exitg2 = true;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (c_lastc > 0)) {
 800af62:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <qr_5a2P8Gh6+0x49c>
 800af6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dcad      	bgt.n	800aece <qr_5a2P8Gh6+0x3ea>
 800af72:	e005      	b.n	800af80 <qr_5a2P8Gh6+0x49c>
      }
    }
  } else {
    knt = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800af80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd29      	ble.n	800afdc <qr_5a2P8Gh6+0x4f8>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 4, b_A, 1, work);
 800af88:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800af8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af90:	9302      	str	r3, [sp, #8]
 800af92:	2301      	movs	r3, #1
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	2304      	movs	r3, #4
 800af9e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800afa2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800afa6:	f004 f94f 	bl	800f248 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_0, 1, work, b_A, 4);
 800afaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afae:	63bb      	str	r3, [r7, #56]	; 0x38
 800afb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800afbe:	2304      	movs	r3, #4
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	2201      	movs	r2, #1
 800afcc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800afd0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800afd4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800afd8:	f004 fa3f 	bl	800f45a <xgerc_tNNiazQU>
  }

  b_A[0] = atmp;
 800afdc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800afe0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  atmp = b_A[4];
 800afe4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800afe8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  beta1 = xnrm2_xDOlDEtw(1, b_A, 6);
 800afec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800aff0:	2206      	movs	r2, #6
 800aff2:	4619      	mov	r1, r3
 800aff4:	2001      	movs	r0, #1
 800aff6:	f004 fd6b 	bl	800fad0 <xnrm2_xDOlDEtw>
 800affa:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  if (beta1 != 0.0) {
 800affe:	f04f 0200 	mov.w	r2, #0
 800b002:	f04f 0300 	mov.w	r3, #0
 800b006:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b00a:	f7f5 fd4f 	bl	8000aac <__aeabi_dcmpeq>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	f040 8170 	bne.w	800b2f6 <qr_5a2P8Gh6+0x812>
    beta1 = rt_hypotd_snf(b_A[4], beta1);
 800b016:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800b01a:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 800b01e:	eeb0 0a47 	vmov.f32	s0, s14
 800b022:	eef0 0a67 	vmov.f32	s1, s15
 800b026:	f001 ffbf 	bl	800cfa8 <rt_hypotd_snf>
 800b02a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
    if (b_A[4] >= 0.0) {
 800b02e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b032:	f04f 0200 	mov.w	r2, #0
 800b036:	f04f 0300 	mov.w	r3, #0
 800b03a:	f7f5 fd55 	bl	8000ae8 <__aeabi_dcmpge>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d009      	beq.n	800b058 <qr_5a2P8Gh6+0x574>
      beta1 = -beta1;
 800b044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b050:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05c:	633b      	str	r3, [r7, #48]	; 0x30
 800b05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
 800b068:	f04f 0200 	mov.w	r2, #0
 800b06c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b070:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b074:	f7f5 fd24 	bl	8000ac0 <__aeabi_dcmplt>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 80ef 	beq.w	800b25e <qr_5a2P8Gh6+0x77a>
      knt = 0;
 800b080:	2300      	movs	r3, #0
 800b082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        knt++;
 800b086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b08a:	3301      	adds	r3, #1
 800b08c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b090:	2305      	movs	r3, #5
 800b092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b096:	e01f      	b.n	800b0d8 <qr_5a2P8Gh6+0x5f4>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800b098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b0a2:	4413      	add	r3, r2
 800b0a4:	3b80      	subs	r3, #128	; 0x80
 800b0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0aa:	f04f 0200 	mov.w	r2, #0
 800b0ae:	4bc9      	ldr	r3, [pc, #804]	; (800b3d4 <qr_5a2P8Gh6+0x8f0>)
 800b0b0:	f7f5 fa94 	bl	80005dc <__aeabi_dmul>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b0c6:	4413      	add	r3, r2
 800b0c8:	3b80      	subs	r3, #128	; 0x80
 800b0ca:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b0ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b0dc:	2b05      	cmp	r3, #5
 800b0de:	dddb      	ble.n	800b098 <qr_5a2P8Gh6+0x5b4>
        }

        beta1 *= 9.9792015476736E+291;
 800b0e0:	f04f 0200 	mov.w	r2, #0
 800b0e4:	4bbb      	ldr	r3, [pc, #748]	; (800b3d4 <qr_5a2P8Gh6+0x8f0>)
 800b0e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0ea:	f7f5 fa77 	bl	80005dc <__aeabi_dmul>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
        atmp *= 9.9792015476736E+291;
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	4bb6      	ldr	r3, [pc, #728]	; (800b3d4 <qr_5a2P8Gh6+0x8f0>)
 800b0fc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b100:	f7f5 fa6c 	bl	80005dc <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800b10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
 800b112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b124:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b128:	f7f5 fcca 	bl	8000ac0 <__aeabi_dcmplt>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <qr_5a2P8Gh6+0x656>
 800b132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b136:	2b13      	cmp	r3, #19
 800b138:	dda5      	ble.n	800b086 <qr_5a2P8Gh6+0x5a2>

      beta1 = rt_hypotd_snf(atmp, xnrm2_xDOlDEtw(1, b_A, 6));
 800b13a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b13e:	2206      	movs	r2, #6
 800b140:	4619      	mov	r1, r3
 800b142:	2001      	movs	r0, #1
 800b144:	f004 fcc4 	bl	800fad0 <xnrm2_xDOlDEtw>
 800b148:	eeb0 7a40 	vmov.f32	s14, s0
 800b14c:	eef0 7a60 	vmov.f32	s15, s1
 800b150:	eeb0 1a47 	vmov.f32	s2, s14
 800b154:	eef0 1a67 	vmov.f32	s3, s15
 800b158:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800b15c:	f001 ff24 	bl	800cfa8 <rt_hypotd_snf>
 800b160:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
      if (atmp >= 0.0) {
 800b164:	f04f 0200 	mov.w	r2, #0
 800b168:	f04f 0300 	mov.w	r3, #0
 800b16c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b170:	f7f5 fcba 	bl	8000ae8 <__aeabi_dcmpge>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d009      	beq.n	800b18e <qr_5a2P8Gh6+0x6aa>
        beta1 = -beta1;
 800b17a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b17e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b186:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b18a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800b18e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b192:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b196:	f7f5 f869 	bl	800026c <__aeabi_dsub>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4610      	mov	r0, r2
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b1a6:	f7f5 fb43 	bl	8000830 <__aeabi_ddiv>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (atmp - beta1);
 800b1b2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b1b6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800b1ba:	f7f5 f857 	bl	800026c <__aeabi_dsub>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	4984      	ldr	r1, [pc, #528]	; (800b3d8 <qr_5a2P8Gh6+0x8f4>)
 800b1c8:	f7f5 fb32 	bl	8000830 <__aeabi_ddiv>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b1d4:	2305      	movs	r3, #5
 800b1d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1da:	e01c      	b.n	800b216 <qr_5a2P8Gh6+0x732>
        b_A[b_coltop] *= atmp;
 800b1dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b1e6:	4413      	add	r3, r2
 800b1e8:	3b80      	subs	r3, #128	; 0x80
 800b1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1ee:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b1f2:	f7f5 f9f3 	bl	80005dc <__aeabi_dmul>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b1fe:	00c9      	lsls	r1, r1, #3
 800b200:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b204:	4401      	add	r1, r0
 800b206:	3980      	subs	r1, #128	; 0x80
 800b208:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b20c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b210:	3301      	adds	r3, #1
 800b212:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b21a:	2b05      	cmp	r3, #5
 800b21c:	ddde      	ble.n	800b1dc <qr_5a2P8Gh6+0x6f8>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b21e:	2300      	movs	r3, #0
 800b220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b224:	e010      	b.n	800b248 <qr_5a2P8Gh6+0x764>
        beta1 *= 1.0020841800044864E-292;
 800b226:	f04f 0200 	mov.w	r2, #0
 800b22a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800b22e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b232:	f7f5 f9d3 	bl	80005dc <__aeabi_dmul>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800b23e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b242:	3301      	adds	r3, #1
 800b244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b248:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b24c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b250:	429a      	cmp	r2, r3
 800b252:	dbe8      	blt.n	800b226 <qr_5a2P8Gh6+0x742>
      }

      atmp = beta1;
 800b254:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b258:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800b25c:	e04b      	b.n	800b2f6 <qr_5a2P8Gh6+0x812>
    } else {
      tau_idx_1 = (beta1 - b_A[4]) / beta1;
 800b25e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800b262:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b266:	f7f5 f801 	bl	800026c <__aeabi_dsub>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4610      	mov	r0, r2
 800b270:	4619      	mov	r1, r3
 800b272:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b276:	f7f5 fadb 	bl	8000830 <__aeabi_ddiv>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      atmp = 1.0 / (b_A[4] - beta1);
 800b282:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b286:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b28a:	f7f4 ffef 	bl	800026c <__aeabi_dsub>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	f04f 0000 	mov.w	r0, #0
 800b296:	4950      	ldr	r1, [pc, #320]	; (800b3d8 <qr_5a2P8Gh6+0x8f4>)
 800b298:	f7f5 faca 	bl	8000830 <__aeabi_ddiv>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800b2a4:	2305      	movs	r3, #5
 800b2a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2aa:	e01c      	b.n	800b2e6 <qr_5a2P8Gh6+0x802>
        b_A[c_lastc] *= atmp;
 800b2ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3b80      	subs	r3, #128	; 0x80
 800b2ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2be:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b2c2:	f7f5 f98b 	bl	80005dc <__aeabi_dmul>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b2ce:	00c9      	lsls	r1, r1, #3
 800b2d0:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b2d4:	4401      	add	r1, r0
 800b2d6:	3980      	subs	r1, #128	; 0x80
 800b2d8:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 5; c_lastc < 6; c_lastc++) {
 800b2dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2ea:	2b05      	cmp	r3, #5
 800b2ec:	ddde      	ble.n	800b2ac <qr_5a2P8Gh6+0x7c8>
      }

      atmp = beta1;
 800b2ee:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800b2f2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    }
  }

  b_A[4] = 1.0;
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	4b37      	ldr	r3, [pc, #220]	; (800b3d8 <qr_5a2P8Gh6+0x8f4>)
 800b2fc:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800b300:	f04f 0200 	mov.w	r2, #0
 800b304:	f04f 0300 	mov.w	r3, #0
 800b308:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b30c:	f7f5 fbce 	bl	8000aac <__aeabi_dcmpeq>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d162      	bne.n	800b3dc <qr_5a2P8Gh6+0x8f8>
    knt = 2;
 800b316:	2302      	movs	r3, #2
 800b318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 5;
 800b31c:	2305      	movs	r3, #5
 800b31e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b322:	e009      	b.n	800b338 <qr_5a2P8Gh6+0x854>
      knt--;
 800b324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b328:	3b01      	subs	r3, #1
 800b32a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      c_lastc--;
 800b32e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b332:	3b01      	subs	r3, #1
 800b334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800b338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dd11      	ble.n	800b364 <qr_5a2P8Gh6+0x880>
 800b340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b34a:	4413      	add	r3, r2
 800b34c:	3b80      	subs	r3, #128	; 0x80
 800b34e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b352:	f04f 0200 	mov.w	r2, #0
 800b356:	f04f 0300 	mov.w	r3, #0
 800b35a:	f7f5 fba7 	bl	8000aac <__aeabi_dcmpeq>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1df      	bne.n	800b324 <qr_5a2P8Gh6+0x840>
    }

    c_lastc = 1;
 800b364:	2301      	movs	r3, #1
 800b366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    coltop = 7;
 800b36a:	2307      	movs	r3, #7
 800b36c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    do {
      exitg1 = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (coltop + 1 <= knt + 7) {
 800b376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b37a:	3306      	adds	r3, #6
 800b37c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b380:	429a      	cmp	r2, r3
 800b382:	dc1b      	bgt.n	800b3bc <qr_5a2P8Gh6+0x8d8>
        if (b_A[coltop] != 0.0) {
 800b384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b38e:	4413      	add	r3, r2
 800b390:	3b80      	subs	r3, #128	; 0x80
 800b392:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b396:	f04f 0200 	mov.w	r2, #0
 800b39a:	f04f 0300 	mov.w	r3, #0
 800b39e:	f7f5 fb85 	bl	8000aac <__aeabi_dcmpeq>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d103      	bne.n	800b3b0 <qr_5a2P8Gh6+0x8cc>
          exitg1 = 1;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3ae:	e00b      	b.n	800b3c8 <qr_5a2P8Gh6+0x8e4>
        } else {
          coltop++;
 800b3b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3ba:	e005      	b.n	800b3c8 <qr_5a2P8Gh6+0x8e4>
        }
      } else {
        c_lastc = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        exitg1 = 1;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800b3c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0cf      	beq.n	800b370 <qr_5a2P8Gh6+0x88c>
 800b3d0:	e00a      	b.n	800b3e8 <qr_5a2P8Gh6+0x904>
 800b3d2:	bf00      	nop
 800b3d4:	7c900000 	.word	0x7c900000
 800b3d8:	3ff00000 	.word	0x3ff00000
  } else {
    knt = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    c_lastc = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  }

  if (knt > 0) {
 800b3e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dd29      	ble.n	800b444 <qr_5a2P8Gh6+0x960>
    xgemv_fRiR1I1O(knt, c_lastc, b_A, 8, b_A, 5, work);
 800b3f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b3f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3f8:	9302      	str	r3, [sp, #8]
 800b3fa:	2305      	movs	r3, #5
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	2308      	movs	r3, #8
 800b406:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b40a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b40e:	f003 ff1b 	bl	800f248 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(knt, c_lastc, -tau_idx_1, 5, work, b_A, 8);
 800b412:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b416:	623b      	str	r3, [r7, #32]
 800b418:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b41c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
 800b422:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b426:	2308      	movs	r3, #8
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	4613      	mov	r3, r2
 800b432:	2205      	movs	r2, #5
 800b434:	ed97 0b08 	vldr	d0, [r7, #32]
 800b438:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800b43c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b440:	f004 f80b 	bl	800f45a <xgerc_tNNiazQU>
  }

  b_A[4] = atmp;
 800b444:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800b448:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  R[0] = b_A[0];
 800b44c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b450:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b452:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b456:	2301      	movs	r3, #1
 800b458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b45c:	e00f      	b.n	800b47e <qr_5a2P8Gh6+0x99a>
    R[c_lastc] = 0.0;
 800b45e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b466:	18d1      	adds	r1, r2, r3
 800b468:	f04f 0200 	mov.w	r2, #0
 800b46c:	f04f 0300 	mov.w	r3, #0
 800b470:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800b474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b478:	3301      	adds	r3, #1
 800b47a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b47e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b482:	2b02      	cmp	r3, #2
 800b484:	ddeb      	ble.n	800b45e <qr_5a2P8Gh6+0x97a>
  }

  work[0] = 0.0;
 800b486:	f04f 0200 	mov.w	r2, #0
 800b48a:	f04f 0300 	mov.w	r3, #0
 800b48e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b492:	2300      	movs	r3, #0
 800b494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b498:	e016      	b.n	800b4c8 <qr_5a2P8Gh6+0x9e4>
    R[c_lastc + 3] = b_A[c_lastc + 3];
 800b49a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b49e:	3303      	adds	r3, #3
 800b4a0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4a4:	3203      	adds	r2, #3
 800b4a6:	00d2      	lsls	r2, r2, #3
 800b4a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b4aa:	4411      	add	r1, r2
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b4b2:	4413      	add	r3, r2
 800b4b4:	3b80      	subs	r3, #128	; 0x80
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	dde4      	ble.n	800b49a <qr_5a2P8Gh6+0x9b6>
  }

  while (c_lastc + 1 < 4) {
 800b4d0:	e010      	b.n	800b4f4 <qr_5a2P8Gh6+0xa10>
    R[c_lastc + 3] = 0.0;
 800b4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4d6:	3303      	adds	r3, #3
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4dc:	18d1      	adds	r1, r2, r3
 800b4de:	f04f 0200 	mov.w	r2, #0
 800b4e2:	f04f 0300 	mov.w	r3, #0
 800b4e6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800b4ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  while (c_lastc + 1 < 4) {
 800b4f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	ddea      	ble.n	800b4d2 <qr_5a2P8Gh6+0x9ee>
  }

  work[1] = 0.0;
 800b4fc:	f04f 0200 	mov.w	r2, #0
 800b500:	f04f 0300 	mov.w	r3, #0
 800b504:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b50e:	e016      	b.n	800b53e <qr_5a2P8Gh6+0xa5a>
    R[c_lastc + 6] = b_A[c_lastc + 6];
 800b510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b514:	3306      	adds	r3, #6
 800b516:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b51a:	3206      	adds	r2, #6
 800b51c:	00d2      	lsls	r2, r2, #3
 800b51e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b520:	4411      	add	r1, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b528:	4413      	add	r3, r2
 800b52a:	3b80      	subs	r3, #128	; 0x80
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800b534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b538:	3301      	adds	r3, #1
 800b53a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b53e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b542:	2b02      	cmp	r3, #2
 800b544:	dde4      	ble.n	800b510 <qr_5a2P8Gh6+0xa2c>
  }

  work[2] = 0.0;
 800b546:	f04f 0200 	mov.w	r2, #0
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  b_A[8] = 1.0;
 800b552:	f04f 0200 	mov.w	r2, #0
 800b556:	4bc8      	ldr	r3, [pc, #800]	; (800b878 <qr_5a2P8Gh6+0xd94>)
 800b558:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b55c:	2300      	movs	r3, #0
 800b55e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b562:	e014      	b.n	800b58e <qr_5a2P8Gh6+0xaaa>
    b_A[7 - c_lastc] = 0.0;
 800b564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b568:	f1c3 0307 	rsb	r3, r3, #7
 800b56c:	00db      	lsls	r3, r3, #3
 800b56e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b572:	4413      	add	r3, r2
 800b574:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800b578:	f04f 0200 	mov.w	r2, #0
 800b57c:	f04f 0300 	mov.w	r3, #0
 800b580:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800b584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b588:	3301      	adds	r3, #1
 800b58a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b58e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b592:	2b01      	cmp	r3, #1
 800b594:	dde6      	ble.n	800b564 <qr_5a2P8Gh6+0xa80>
  }

  b_A[4] = 1.0;
 800b596:	f04f 0200 	mov.w	r2, #0
 800b59a:	4bb7      	ldr	r3, [pc, #732]	; (800b878 <qr_5a2P8Gh6+0xd94>)
 800b59c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  if (tau_idx_1 != 0.0) {
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b5ac:	f7f5 fa7e 	bl	8000aac <__aeabi_dcmpeq>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d15c      	bne.n	800b670 <qr_5a2P8Gh6+0xb8c>
    b_coltop = 7;
 800b5b6:	2307      	movs	r3, #7
 800b5b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b5bc:	e009      	b.n	800b5d2 <qr_5a2P8Gh6+0xaee>
      c_lastc--;
 800b5be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800b5c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b5d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dd12      	ble.n	800b600 <qr_5a2P8Gh6+0xb1c>
 800b5da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5de:	3b02      	subs	r3, #2
 800b5e0:	00db      	lsls	r3, r3, #3
 800b5e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b5e6:	4413      	add	r3, r2
 800b5e8:	3b80      	subs	r3, #128	; 0x80
 800b5ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5ee:	f04f 0200 	mov.w	r2, #0
 800b5f2:	f04f 0300 	mov.w	r3, #0
 800b5f6:	f7f5 fa59 	bl	8000aac <__aeabi_dcmpeq>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1de      	bne.n	800b5be <qr_5a2P8Gh6+0xada>
    }

    b_coltop = 1;
 800b600:	2301      	movs	r3, #1
 800b602:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    knt = 8;
 800b606:	2308      	movs	r3, #8
 800b608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    do {
      exitg1 = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      if (knt <= c_lastc + 7) {
 800b612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b616:	3307      	adds	r3, #7
 800b618:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b61c:	429a      	cmp	r2, r3
 800b61e:	dc1c      	bgt.n	800b65a <qr_5a2P8Gh6+0xb76>
        if (b_A[knt - 1] != 0.0) {
 800b620:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b624:	3b01      	subs	r3, #1
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b62c:	4413      	add	r3, r2
 800b62e:	3b80      	subs	r3, #128	; 0x80
 800b630:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b634:	f04f 0200 	mov.w	r2, #0
 800b638:	f04f 0300 	mov.w	r3, #0
 800b63c:	f7f5 fa36 	bl	8000aac <__aeabi_dcmpeq>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <qr_5a2P8Gh6+0xb6a>
          exitg1 = 1;
 800b646:	2301      	movs	r3, #1
 800b648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b64c:	e00b      	b.n	800b666 <qr_5a2P8Gh6+0xb82>
        } else {
          knt++;
 800b64e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b652:	3301      	adds	r3, #1
 800b654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b658:	e005      	b.n	800b666 <qr_5a2P8Gh6+0xb82>
        }
      } else {
        b_coltop = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        exitg1 = 1;
 800b660:	2301      	movs	r3, #1
 800b662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
    } while (exitg1 == 0);
 800b666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0ce      	beq.n	800b60c <qr_5a2P8Gh6+0xb28>
 800b66e:	e005      	b.n	800b67c <qr_5a2P8Gh6+0xb98>
  } else {
    c_lastc = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b67c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b680:	2b00      	cmp	r3, #0
 800b682:	dd29      	ble.n	800b6d8 <qr_5a2P8Gh6+0xbf4>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 8, b_A, 5, work);
 800b684:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b68c:	9302      	str	r3, [sp, #8]
 800b68e:	2305      	movs	r3, #5
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2308      	movs	r3, #8
 800b69a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b69e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b6a2:	f003 fdd1 	bl	800f248 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_1, 5, work, b_A, 8);
 800b6a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b6ba:	2308      	movs	r3, #8
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	ed97 0b06 	vldr	d0, [r7, #24]
 800b6cc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b6d0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b6d4:	f003 fec1 	bl	800f45a <xgerc_tNNiazQU>
  }

  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b6d8:	2305      	movs	r3, #5
 800b6da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6de:	e024      	b.n	800b72a <qr_5a2P8Gh6+0xc46>
    b_A[b_coltop] *= -tau_idx_1;
 800b6e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3b80      	subs	r3, #128	; 0x80
 800b6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b6f6:	613b      	str	r3, [r7, #16]
 800b6f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b706:	f7f4 ff69 	bl	80005dc <__aeabi_dmul>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b712:	00c9      	lsls	r1, r1, #3
 800b714:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b718:	4401      	add	r1, r0
 800b71a:	3980      	subs	r1, #128	; 0x80
 800b71c:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 5; b_coltop < 6; b_coltop++) {
 800b720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b724:	3301      	adds	r3, #1
 800b726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b72a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b72e:	2b05      	cmp	r3, #5
 800b730:	ddd6      	ble.n	800b6e0 <qr_5a2P8Gh6+0xbfc>
  }

  b_A[4] = 1.0 - tau_idx_1;
 800b732:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800b736:	f04f 0000 	mov.w	r0, #0
 800b73a:	494f      	ldr	r1, [pc, #316]	; (800b878 <qr_5a2P8Gh6+0xd94>)
 800b73c:	f7f4 fd96 	bl	800026c <__aeabi_dsub>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  b_A[3] = 0.0;
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	f04f 0300 	mov.w	r3, #0
 800b750:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_A[0] = 1.0;
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	4b47      	ldr	r3, [pc, #284]	; (800b878 <qr_5a2P8Gh6+0xd94>)
 800b75a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  if (tau_idx_0 != 0.0) {
 800b75e:	f04f 0200 	mov.w	r2, #0
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b76a:	f7f5 f99f 	bl	8000aac <__aeabi_dcmpeq>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	f040 8083 	bne.w	800b87c <qr_5a2P8Gh6+0xd98>
    c_lastc = 3;
 800b776:	2303      	movs	r3, #3
 800b778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 4;
 800b77c:	2304      	movs	r3, #4
 800b77e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b782:	e009      	b.n	800b798 <qr_5a2P8Gh6+0xcb4>
      c_lastc--;
 800b784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b788:	3b01      	subs	r3, #1
 800b78a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      b_coltop--;
 800b78e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b792:	3b01      	subs	r3, #1
 800b794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800b798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd12      	ble.n	800b7c6 <qr_5a2P8Gh6+0xce2>
 800b7a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7a4:	3b02      	subs	r3, #2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b7ac:	4413      	add	r3, r2
 800b7ae:	3b80      	subs	r3, #128	; 0x80
 800b7b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	f7f5 f976 	bl	8000aac <__aeabi_dcmpeq>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1de      	bne.n	800b784 <qr_5a2P8Gh6+0xca0>
    }

    b_coltop = 2;
 800b7c6:	2302      	movs	r3, #2
 800b7c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    exitg2 = false;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b7d2:	e048      	b.n	800b866 <qr_5a2P8Gh6+0xd82>
      coltop = (b_coltop - 1) * 3 + 4;
 800b7d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7d8:	1e5a      	subs	r2, r3, #1
 800b7da:	4613      	mov	r3, r2
 800b7dc:	005b      	lsls	r3, r3, #1
 800b7de:	4413      	add	r3, r2
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      knt = coltop;
 800b7e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      do {
        exitg1 = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (knt <= (coltop + c_lastc) - 1) {
 800b7f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b7f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b802:	429a      	cmp	r2, r3
 800b804:	da1c      	bge.n	800b840 <qr_5a2P8Gh6+0xd5c>
          if (b_A[knt - 1] != 0.0) {
 800b806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b80a:	3b01      	subs	r3, #1
 800b80c:	00db      	lsls	r3, r3, #3
 800b80e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b812:	4413      	add	r3, r2
 800b814:	3b80      	subs	r3, #128	; 0x80
 800b816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	f04f 0300 	mov.w	r3, #0
 800b822:	f7f5 f943 	bl	8000aac <__aeabi_dcmpeq>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d103      	bne.n	800b834 <qr_5a2P8Gh6+0xd50>
            exitg1 = 1;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b832:	e00d      	b.n	800b850 <qr_5a2P8Gh6+0xd6c>
          } else {
            knt++;
 800b834:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b838:	3301      	adds	r3, #1
 800b83a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b83e:	e007      	b.n	800b850 <qr_5a2P8Gh6+0xd6c>
          }
        } else {
          b_coltop--;
 800b840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b844:	3b01      	subs	r3, #1
 800b846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          exitg1 = 2;
 800b84a:	2302      	movs	r3, #2
 800b84c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        }
      } while (exitg1 == 0);
 800b850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0ca      	beq.n	800b7ee <qr_5a2P8Gh6+0xd0a>

      if (exitg1 == 1) {
 800b858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d102      	bne.n	800b866 <qr_5a2P8Gh6+0xd82>
        exitg2 = true;
 800b860:	2301      	movs	r3, #1
 800b862:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    while ((!exitg2) && (b_coltop > 0)) {
 800b866:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10c      	bne.n	800b888 <qr_5a2P8Gh6+0xda4>
 800b86e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b872:	2b00      	cmp	r3, #0
 800b874:	dcae      	bgt.n	800b7d4 <qr_5a2P8Gh6+0xcf0>
 800b876:	e007      	b.n	800b888 <qr_5a2P8Gh6+0xda4>
 800b878:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    b_coltop = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  }

  if (c_lastc > 0) {
 800b888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dd29      	ble.n	800b8e4 <qr_5a2P8Gh6+0xe00>
    xgemv_fRiR1I1O(c_lastc, b_coltop, b_A, 4, b_A, 1, work);
 800b890:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	2301      	movs	r3, #1
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	2304      	movs	r3, #4
 800b8a6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b8aa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b8ae:	f003 fccb 	bl	800f248 <xgemv_fRiR1I1O>
    xgerc_tNNiazQU(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 4);
 800b8b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8b6:	60bb      	str	r3, [r7, #8]
 800b8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	ed97 0b02 	vldr	d0, [r7, #8]
 800b8d8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b8dc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b8e0:	f003 fdbb 	bl	800f45a <xgerc_tNNiazQU>
  }

  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8ea:	e024      	b.n	800b936 <qr_5a2P8Gh6+0xe52>
    b_A[b_coltop] *= -tau_idx_0;
 800b8ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b8f6:	4413      	add	r3, r2
 800b8f8:	3b80      	subs	r3, #128	; 0x80
 800b8fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b90c:	607b      	str	r3, [r7, #4]
 800b90e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b912:	f7f4 fe63 	bl	80005dc <__aeabi_dmul>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b91e:	00c9      	lsls	r1, r1, #3
 800b920:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800b924:	4401      	add	r1, r0
 800b926:	3980      	subs	r1, #128	; 0x80
 800b928:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 3; b_coltop++) {
 800b92c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b930:	3301      	adds	r3, #1
 800b932:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b936:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	ddd6      	ble.n	800b8ec <qr_5a2P8Gh6+0xe08>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800b93e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800b942:	f04f 0000 	mov.w	r0, #0
 800b946:	492a      	ldr	r1, [pc, #168]	; (800b9f0 <qr_5a2P8Gh6+0xf0c>)
 800b948:	f7f4 fc90 	bl	800026c <__aeabi_dsub>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  c_lastc = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b960:	e03d      	b.n	800b9de <qr_5a2P8Gh6+0xefa>
    Q[c_lastc] = b_A[c_lastc];
 800b962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b96a:	18d1      	adds	r1, r2, r3
 800b96c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b976:	4413      	add	r3, r2
 800b978:	3b80      	subs	r3, #128	; 0x80
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 1] = b_A[c_lastc + 1];
 800b982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b986:	3301      	adds	r3, #1
 800b988:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b98c:	3201      	adds	r2, #1
 800b98e:	00d2      	lsls	r2, r2, #3
 800b990:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b992:	4411      	add	r1, r2
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b99a:	4413      	add	r3, r2
 800b99c:	3b80      	subs	r3, #128	; 0x80
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	e9c1 2300 	strd	r2, r3, [r1]
    Q[c_lastc + 2] = b_A[c_lastc + 2];
 800b9a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9aa:	3302      	adds	r3, #2
 800b9ac:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b9b0:	3202      	adds	r2, #2
 800b9b2:	00d2      	lsls	r2, r2, #3
 800b9b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9b6:	4411      	add	r1, r2
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b9be:	4413      	add	r3, r2
 800b9c0:	3b80      	subs	r3, #128	; 0x80
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc += 3;
 800b9ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9ce:	3303      	adds	r3, #3
 800b9d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  for (b_coltop = 0; b_coltop < 3; b_coltop++) {
 800b9d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9d8:	3301      	adds	r3, #1
 800b9da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	ddbd      	ble.n	800b962 <qr_5a2P8Gh6+0xe7e>
  }
}
 800b9e6:	bf00      	nop
 800b9e8:	bf00      	nop
 800b9ea:	37f0      	adds	r7, #240	; 0xf0
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bdb0      	pop	{r4, r5, r7, pc}
 800b9f0:	3ff00000 	.word	0x3ff00000

0800b9f4 <qr_DvOBrgQi>:
#include <math.h>
#include "xgemv_NQlWbt2i.h"
#include "xgerc_R09LiDgJ.h"

void qr_DvOBrgQi(const real_T A[18], real_T Q[18], real_T R[9])
{
 800b9f4:	b5b0      	push	{r4, r5, r7, lr}
 800b9f6:	b0da      	sub	sp, #360	; 0x168
 800b9f8:	af04      	add	r7, sp, #16
 800b9fa:	66f8      	str	r0, [r7, #108]	; 0x6c
 800b9fc:	66b9      	str	r1, [r7, #104]	; 0x68
 800b9fe:	667a      	str	r2, [r7, #100]	; 0x64
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
 800ba00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ba04:	2290      	movs	r2, #144	; 0x90
 800ba06:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f00e f89f 	bl	8019b4c <memcpy>
  work[0] = 0.0;
 800ba0e:	f04f 0200 	mov.w	r2, #0
 800ba12:	f04f 0300 	mov.w	r3, #0
 800ba16:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  work[1] = 0.0;
 800ba1a:	f04f 0200 	mov.w	r2, #0
 800ba1e:	f04f 0300 	mov.w	r3, #0
 800ba22:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  work[2] = 0.0;
 800ba26:	f04f 0200 	mov.w	r2, #0
 800ba2a:	f04f 0300 	mov.w	r3, #0
 800ba2e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  atmp = b_A[0];
 800ba32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ba36:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_0 = 0.0;
 800ba3a:	f04f 0200 	mov.w	r2, #0
 800ba3e:	f04f 0300 	mov.w	r3, #0
 800ba42:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  beta1 = xnrm2_nLdASVZH(5, b_A, 2);
 800ba46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	2005      	movs	r0, #5
 800ba50:	f003 ff90 	bl	800f974 <xnrm2_nLdASVZH>
 800ba54:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800ba58:	f04f 0200 	mov.w	r2, #0
 800ba5c:	f04f 0300 	mov.w	r3, #0
 800ba60:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800ba64:	f7f5 f822 	bl	8000aac <__aeabi_dcmpeq>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f040 8172 	bne.w	800bd54 <qr_DvOBrgQi+0x360>
    beta1 = rt_hypotd_snf(b_A[0], beta1);
 800ba70:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800ba74:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800ba78:	eeb0 0a47 	vmov.f32	s0, s14
 800ba7c:	eef0 0a67 	vmov.f32	s1, s15
 800ba80:	f001 fa92 	bl	800cfa8 <rt_hypotd_snf>
 800ba84:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[0] >= 0.0) {
 800ba88:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800ba8c:	f04f 0200 	mov.w	r2, #0
 800ba90:	f04f 0300 	mov.w	r3, #0
 800ba94:	f7f5 f828 	bl	8000ae8 <__aeabi_dcmpge>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d009      	beq.n	800bab2 <qr_DvOBrgQi+0xbe>
      beta1 = -beta1;
 800ba9e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800baa2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800baa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800baaa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800baae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800bab2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800bab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800baba:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fff9 	bl	8000ac0 <__aeabi_dcmplt>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 80f1 	beq.w	800bcb8 <qr_DvOBrgQi+0x2c4>
      knt = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800badc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bae0:	3301      	adds	r3, #1
 800bae2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bae6:	2301      	movs	r3, #1
 800bae8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800baec:	e01f      	b.n	800bb2e <qr_DvOBrgQi+0x13a>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800baee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baf2:	00db      	lsls	r3, r3, #3
 800baf4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800baf8:	4413      	add	r3, r2
 800bafa:	3bd0      	subs	r3, #208	; 0xd0
 800bafc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb00:	f04f 0200 	mov.w	r2, #0
 800bb04:	4bca      	ldr	r3, [pc, #808]	; (800be30 <qr_DvOBrgQi+0x43c>)
 800bb06:	f7f4 fd69 	bl	80005dc <__aeabi_dmul>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4610      	mov	r0, r2
 800bb10:	4619      	mov	r1, r3
 800bb12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb16:	00db      	lsls	r3, r3, #3
 800bb18:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bb1c:	4413      	add	r3, r2
 800bb1e:	3bd0      	subs	r3, #208	; 0xd0
 800bb20:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bb24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb28:	3301      	adds	r3, #1
 800bb2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	dddb      	ble.n	800baee <qr_DvOBrgQi+0xfa>
        }

        beta1 *= 9.9792015476736E+291;
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	4bbd      	ldr	r3, [pc, #756]	; (800be30 <qr_DvOBrgQi+0x43c>)
 800bb3c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bb40:	f7f4 fd4c 	bl	80005dc <__aeabi_dmul>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	4bb7      	ldr	r3, [pc, #732]	; (800be30 <qr_DvOBrgQi+0x43c>)
 800bb52:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bb56:	f7f4 fd41 	bl	80005dc <__aeabi_dmul>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800bb62:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bb66:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb72:	f04f 0200 	mov.w	r2, #0
 800bb76:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bb7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bb7e:	f7f4 ff9f 	bl	8000ac0 <__aeabi_dcmplt>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d003      	beq.n	800bb90 <qr_DvOBrgQi+0x19c>
 800bb88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bb8c:	2b13      	cmp	r3, #19
 800bb8e:	dda5      	ble.n	800badc <qr_DvOBrgQi+0xe8>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(5, b_A, 2));
 800bb90:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bb94:	2202      	movs	r2, #2
 800bb96:	4619      	mov	r1, r3
 800bb98:	2005      	movs	r0, #5
 800bb9a:	f003 feeb 	bl	800f974 <xnrm2_nLdASVZH>
 800bb9e:	eeb0 7a40 	vmov.f32	s14, s0
 800bba2:	eef0 7a60 	vmov.f32	s15, s1
 800bba6:	eeb0 1a47 	vmov.f32	s2, s14
 800bbaa:	eef0 1a67 	vmov.f32	s3, s15
 800bbae:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800bbb2:	f001 f9f9 	bl	800cfa8 <rt_hypotd_snf>
 800bbb6:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800bbba:	f04f 0200 	mov.w	r2, #0
 800bbbe:	f04f 0300 	mov.w	r3, #0
 800bbc2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bbc6:	f7f4 ff8f 	bl	8000ae8 <__aeabi_dcmpge>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <qr_DvOBrgQi+0x1f0>
        beta1 = -beta1;
 800bbd0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bbd4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bbd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bbdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bbe0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_0 = (beta1 - atmp) / beta1;
 800bbe4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bbe8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bbec:	f7f4 fb3e 	bl	800026c <__aeabi_dsub>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bbfc:	f7f4 fe18 	bl	8000830 <__aeabi_ddiv>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (atmp - beta1);
 800bc08:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bc0c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800bc10:	f7f4 fb2c 	bl	800026c <__aeabi_dsub>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	f04f 0000 	mov.w	r0, #0
 800bc1c:	4985      	ldr	r1, [pc, #532]	; (800be34 <qr_DvOBrgQi+0x440>)
 800bc1e:	f7f4 fe07 	bl	8000830 <__aeabi_ddiv>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bc30:	e01e      	b.n	800bc70 <qr_DvOBrgQi+0x27c>
        b_A[b_coltop] *= atmp;
 800bc32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc3c:	4413      	add	r3, r2
 800bc3e:	3bd0      	subs	r3, #208	; 0xd0
 800bc40:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc44:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bc48:	f7f4 fcc8 	bl	80005dc <__aeabi_dmul>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4610      	mov	r0, r2
 800bc52:	4619      	mov	r1, r3
 800bc54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc5e:	4413      	add	r3, r2
 800bc60:	3bd0      	subs	r3, #208	; 0xd0
 800bc62:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800bc66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bc70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc74:	2b05      	cmp	r3, #5
 800bc76:	dddc      	ble.n	800bc32 <qr_DvOBrgQi+0x23e>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bc7e:	e010      	b.n	800bca2 <qr_DvOBrgQi+0x2ae>
        beta1 *= 1.0020841800044864E-292;
 800bc80:	f04f 0200 	mov.w	r2, #0
 800bc84:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bc88:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bc8c:	f7f4 fca6 	bl	80005dc <__aeabi_dmul>
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800bc98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bca2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	dbe8      	blt.n	800bc80 <qr_DvOBrgQi+0x28c>
      }

      atmp = beta1;
 800bcae:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bcb2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800bcb6:	e04d      	b.n	800bd54 <qr_DvOBrgQi+0x360>
    } else {
      tau_idx_0 = (beta1 - b_A[0]) / beta1;
 800bcb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bcbc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bcc0:	f7f4 fad4 	bl	800026c <__aeabi_dsub>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4610      	mov	r0, r2
 800bcca:	4619      	mov	r1, r3
 800bccc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bcd0:	f7f4 fdae 	bl	8000830 <__aeabi_ddiv>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      atmp = 1.0 / (b_A[0] - beta1);
 800bcdc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800bce0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bce4:	f7f4 fac2 	bl	800026c <__aeabi_dsub>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	f04f 0000 	mov.w	r0, #0
 800bcf0:	4950      	ldr	r1, [pc, #320]	; (800be34 <qr_DvOBrgQi+0x440>)
 800bcf2:	f7f4 fd9d 	bl	8000830 <__aeabi_ddiv>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800bcfe:	2301      	movs	r3, #1
 800bd00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd04:	e01e      	b.n	800bd44 <qr_DvOBrgQi+0x350>
        b_A[c_lastc] *= atmp;
 800bd06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd10:	4413      	add	r3, r2
 800bd12:	3bd0      	subs	r3, #208	; 0xd0
 800bd14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd18:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bd1c:	f7f4 fc5e 	bl	80005dc <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4610      	mov	r0, r2
 800bd26:	4619      	mov	r1, r3
 800bd28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd2c:	00db      	lsls	r3, r3, #3
 800bd2e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd32:	4413      	add	r3, r2
 800bd34:	3bd0      	subs	r3, #208	; 0xd0
 800bd36:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 1; c_lastc < 6; c_lastc++) {
 800bd3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd3e:	3301      	adds	r3, #1
 800bd40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd48:	2b05      	cmp	r3, #5
 800bd4a:	dddc      	ble.n	800bd06 <qr_DvOBrgQi+0x312>
      }

      atmp = beta1;
 800bd4c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bd50:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[0] = 1.0;
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	4b36      	ldr	r3, [pc, #216]	; (800be34 <qr_DvOBrgQi+0x440>)
 800bd5a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	f04f 0300 	mov.w	r3, #0
 800bd66:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800bd6a:	f7f4 fe9f 	bl	8000aac <__aeabi_dcmpeq>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f040 8083 	bne.w	800be7c <qr_DvOBrgQi+0x488>
    knt = 6;
 800bd76:	2306      	movs	r3, #6
 800bd78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 5;
 800bd7c:	2305      	movs	r3, #5
 800bd7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800bd82:	e009      	b.n	800bd98 <qr_DvOBrgQi+0x3a4>
      knt--;
 800bd84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800bd8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd92:	3b01      	subs	r3, #1
 800bd94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800bd98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dd11      	ble.n	800bdc4 <qr_DvOBrgQi+0x3d0>
 800bda0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bdaa:	4413      	add	r3, r2
 800bdac:	3bd0      	subs	r3, #208	; 0xd0
 800bdae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f7f4 fe77 	bl	8000aac <__aeabi_dcmpeq>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1df      	bne.n	800bd84 <qr_DvOBrgQi+0x390>
    }

    c_lastc = 2;
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    exitg2 = false;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800bdd0:	e04b      	b.n	800be6a <qr_DvOBrgQi+0x476>
      b_coltop = (c_lastc - 1) * 6 + 6;
 800bdd2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      coltop = b_coltop;
 800bde2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bde6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      do {
        exitg1 = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (coltop + 1 <= b_coltop + knt) {
 800bdf0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800bdf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bdf8:	441a      	add	r2, r3
 800bdfa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bdfe:	4293      	cmp	r3, r2
 800be00:	da20      	bge.n	800be44 <qr_DvOBrgQi+0x450>
          if (b_A[coltop] != 0.0) {
 800be02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800be0c:	4413      	add	r3, r2
 800be0e:	3bd0      	subs	r3, #208	; 0xd0
 800be10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	f04f 0300 	mov.w	r3, #0
 800be1c:	f7f4 fe46 	bl	8000aac <__aeabi_dcmpeq>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d108      	bne.n	800be38 <qr_DvOBrgQi+0x444>
            exitg1 = 1;
 800be26:	2301      	movs	r3, #1
 800be28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800be2c:	e012      	b.n	800be54 <qr_DvOBrgQi+0x460>
 800be2e:	bf00      	nop
 800be30:	7c900000 	.word	0x7c900000
 800be34:	3ff00000 	.word	0x3ff00000
          } else {
            coltop++;
 800be38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be3c:	3301      	adds	r3, #1
 800be3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800be42:	e007      	b.n	800be54 <qr_DvOBrgQi+0x460>
          }
        } else {
          c_lastc--;
 800be44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be48:	3b01      	subs	r3, #1
 800be4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          exitg1 = 2;
 800be4e:	2302      	movs	r3, #2
 800be50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800be54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d0c6      	beq.n	800bdea <qr_DvOBrgQi+0x3f6>

      if (exitg1 == 1) {
 800be5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800be60:	2b01      	cmp	r3, #1
 800be62:	d102      	bne.n	800be6a <qr_DvOBrgQi+0x476>
        exitg2 = true;
 800be64:	2301      	movs	r3, #1
 800be66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (c_lastc > 0)) {
 800be6a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <qr_DvOBrgQi+0x494>
 800be72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be76:	2b00      	cmp	r3, #0
 800be78:	dcab      	bgt.n	800bdd2 <qr_DvOBrgQi+0x3de>
 800be7a:	e005      	b.n	800be88 <qr_DvOBrgQi+0x494>
      }
    }
  } else {
    knt = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800be88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd29      	ble.n	800bee4 <qr_DvOBrgQi+0x4f0>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 7, b_A, 1, work);
 800be90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800be94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800be98:	9302      	str	r3, [sp, #8]
 800be9a:	2301      	movs	r3, #1
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	2307      	movs	r3, #7
 800bea6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800beaa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800beae:	f003 f943 	bl	800f138 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_0, 1, work, b_A, 7);
 800beb2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800beb6:	653b      	str	r3, [r7, #80]	; 0x50
 800beb8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bebc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bec0:	657b      	str	r3, [r7, #84]	; 0x54
 800bec2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bec6:	2307      	movs	r3, #7
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	2201      	movs	r2, #1
 800bed4:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800bed8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bedc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bee0:	f003 fa38 	bl	800f354 <xgerc_R09LiDgJ>
  }

  b_A[0] = atmp;
 800bee4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800bee8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  atmp = b_A[7];
 800beec:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800bef0:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_1 = 0.0;
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  beta1 = xnrm2_nLdASVZH(4, b_A, 9);
 800bf00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bf04:	2209      	movs	r2, #9
 800bf06:	4619      	mov	r1, r3
 800bf08:	2004      	movs	r0, #4
 800bf0a:	f003 fd33 	bl	800f974 <xnrm2_nLdASVZH>
 800bf0e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	f04f 0300 	mov.w	r3, #0
 800bf1a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bf1e:	f7f4 fdc5 	bl	8000aac <__aeabi_dcmpeq>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f040 8174 	bne.w	800c212 <qr_DvOBrgQi+0x81e>
    beta1 = rt_hypotd_snf(b_A[7], beta1);
 800bf2a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800bf2e:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800bf32:	eeb0 0a47 	vmov.f32	s0, s14
 800bf36:	eef0 0a67 	vmov.f32	s1, s15
 800bf3a:	f001 f835 	bl	800cfa8 <rt_hypotd_snf>
 800bf3e:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[7] >= 0.0) {
 800bf42:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800bf46:	f04f 0200 	mov.w	r2, #0
 800bf4a:	f04f 0300 	mov.w	r3, #0
 800bf4e:	f7f4 fdcb 	bl	8000ae8 <__aeabi_dcmpge>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d009      	beq.n	800bf6c <qr_DvOBrgQi+0x578>
      beta1 = -beta1;
 800bf58:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bf5c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800bf60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bf68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800bf6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bf70:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bf76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf7c:	f04f 0200 	mov.w	r2, #0
 800bf80:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800bf84:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bf88:	f7f4 fd9a 	bl	8000ac0 <__aeabi_dcmplt>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 80f1 	beq.w	800c176 <qr_DvOBrgQi+0x782>
      knt = 0;
 800bf94:	2300      	movs	r3, #0
 800bf96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800bf9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bfa4:	2308      	movs	r3, #8
 800bfa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bfaa:	e01f      	b.n	800bfec <qr_DvOBrgQi+0x5f8>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800bfac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfb0:	00db      	lsls	r3, r3, #3
 800bfb2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bfb6:	4413      	add	r3, r2
 800bfb8:	3bd0      	subs	r3, #208	; 0xd0
 800bfba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfbe:	f04f 0200 	mov.w	r2, #0
 800bfc2:	4bc6      	ldr	r3, [pc, #792]	; (800c2dc <qr_DvOBrgQi+0x8e8>)
 800bfc4:	f7f4 fb0a 	bl	80005dc <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4619      	mov	r1, r3
 800bfd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bfda:	4413      	add	r3, r2
 800bfdc:	3bd0      	subs	r3, #208	; 0xd0
 800bfde:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800bfe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bfec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bff0:	2b0b      	cmp	r3, #11
 800bff2:	dddb      	ble.n	800bfac <qr_DvOBrgQi+0x5b8>
        }

        beta1 *= 9.9792015476736E+291;
 800bff4:	f04f 0200 	mov.w	r2, #0
 800bff8:	4bb8      	ldr	r3, [pc, #736]	; (800c2dc <qr_DvOBrgQi+0x8e8>)
 800bffa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bffe:	f7f4 faed 	bl	80005dc <__aeabi_dmul>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800c00a:	f04f 0200 	mov.w	r2, #0
 800c00e:	4bb3      	ldr	r3, [pc, #716]	; (800c2dc <qr_DvOBrgQi+0x8e8>)
 800c010:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c014:	f7f4 fae2 	bl	80005dc <__aeabi_dmul>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800c020:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c024:	643b      	str	r3, [r7, #64]	; 0x40
 800c026:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c02a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c02e:	647b      	str	r3, [r7, #68]	; 0x44
 800c030:	f04f 0200 	mov.w	r2, #0
 800c034:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c038:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c03c:	f7f4 fd40 	bl	8000ac0 <__aeabi_dcmplt>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d003      	beq.n	800c04e <qr_DvOBrgQi+0x65a>
 800c046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c04a:	2b13      	cmp	r3, #19
 800c04c:	dda5      	ble.n	800bf9a <qr_DvOBrgQi+0x5a6>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(4, b_A, 9));
 800c04e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c052:	2209      	movs	r2, #9
 800c054:	4619      	mov	r1, r3
 800c056:	2004      	movs	r0, #4
 800c058:	f003 fc8c 	bl	800f974 <xnrm2_nLdASVZH>
 800c05c:	eeb0 7a40 	vmov.f32	s14, s0
 800c060:	eef0 7a60 	vmov.f32	s15, s1
 800c064:	eeb0 1a47 	vmov.f32	s2, s14
 800c068:	eef0 1a67 	vmov.f32	s3, s15
 800c06c:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800c070:	f000 ff9a 	bl	800cfa8 <rt_hypotd_snf>
 800c074:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800c078:	f04f 0200 	mov.w	r2, #0
 800c07c:	f04f 0300 	mov.w	r3, #0
 800c080:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c084:	f7f4 fd30 	bl	8000ae8 <__aeabi_dcmpge>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d009      	beq.n	800c0a2 <qr_DvOBrgQi+0x6ae>
        beta1 = -beta1;
 800c08e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c092:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c096:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c09a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c09e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_1 = (beta1 - atmp) / beta1;
 800c0a2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c0a6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c0aa:	f7f4 f8df 	bl	800026c <__aeabi_dsub>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c0ba:	f7f4 fbb9 	bl	8000830 <__aeabi_ddiv>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (atmp - beta1);
 800c0c6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c0ca:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c0ce:	f7f4 f8cd 	bl	800026c <__aeabi_dsub>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	f04f 0000 	mov.w	r0, #0
 800c0da:	4981      	ldr	r1, [pc, #516]	; (800c2e0 <qr_DvOBrgQi+0x8ec>)
 800c0dc:	f7f4 fba8 	bl	8000830 <__aeabi_ddiv>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c0e8:	2308      	movs	r3, #8
 800c0ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c0ee:	e01e      	b.n	800c12e <qr_DvOBrgQi+0x73a>
        b_A[b_coltop] *= atmp;
 800c0f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c0fa:	4413      	add	r3, r2
 800c0fc:	3bd0      	subs	r3, #208	; 0xd0
 800c0fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c102:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c106:	f7f4 fa69 	bl	80005dc <__aeabi_dmul>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4610      	mov	r0, r2
 800c110:	4619      	mov	r1, r3
 800c112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c11c:	4413      	add	r3, r2
 800c11e:	3bd0      	subs	r3, #208	; 0xd0
 800c120:	e9c3 0100 	strd	r0, r1, [r3]
      for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c128:	3301      	adds	r3, #1
 800c12a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c12e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c132:	2b0b      	cmp	r3, #11
 800c134:	dddc      	ble.n	800c0f0 <qr_DvOBrgQi+0x6fc>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c136:	2300      	movs	r3, #0
 800c138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c13c:	e010      	b.n	800c160 <qr_DvOBrgQi+0x76c>
        beta1 *= 1.0020841800044864E-292;
 800c13e:	f04f 0200 	mov.w	r2, #0
 800c142:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c146:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c14a:	f7f4 fa47 	bl	80005dc <__aeabi_dmul>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c156:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c15a:	3301      	adds	r3, #1
 800c15c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c160:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c164:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c168:	429a      	cmp	r2, r3
 800c16a:	dbe8      	blt.n	800c13e <qr_DvOBrgQi+0x74a>
      }

      atmp = beta1;
 800c16c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c170:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800c174:	e04d      	b.n	800c212 <qr_DvOBrgQi+0x81e>
    } else {
      tau_idx_1 = (beta1 - b_A[7]) / beta1;
 800c176:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800c17a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c17e:	f7f4 f875 	bl	800026c <__aeabi_dsub>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4610      	mov	r0, r2
 800c188:	4619      	mov	r1, r3
 800c18a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c18e:	f7f4 fb4f 	bl	8000830 <__aeabi_ddiv>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      atmp = 1.0 / (b_A[7] - beta1);
 800c19a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c19e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c1a2:	f7f4 f863 	bl	800026c <__aeabi_dsub>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	f04f 0000 	mov.w	r0, #0
 800c1ae:	494c      	ldr	r1, [pc, #304]	; (800c2e0 <qr_DvOBrgQi+0x8ec>)
 800c1b0:	f7f4 fb3e 	bl	8000830 <__aeabi_ddiv>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800c1bc:	2308      	movs	r3, #8
 800c1be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c1c2:	e01e      	b.n	800c202 <qr_DvOBrgQi+0x80e>
        b_A[c_lastc] *= atmp;
 800c1c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3bd0      	subs	r3, #208	; 0xd0
 800c1d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1d6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c1da:	f7f4 f9ff 	bl	80005dc <__aeabi_dmul>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c1f0:	4413      	add	r3, r2
 800c1f2:	3bd0      	subs	r3, #208	; 0xd0
 800c1f4:	e9c3 0100 	strd	r0, r1, [r3]
      for (c_lastc = 8; c_lastc < 12; c_lastc++) {
 800c1f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c206:	2b0b      	cmp	r3, #11
 800c208:	dddc      	ble.n	800c1c4 <qr_DvOBrgQi+0x7d0>
      }

      atmp = beta1;
 800c20a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c20e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[7] = 1.0;
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	4b32      	ldr	r3, [pc, #200]	; (800c2e0 <qr_DvOBrgQi+0x8ec>)
 800c218:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c21c:	f04f 0200 	mov.w	r2, #0
 800c220:	f04f 0300 	mov.w	r3, #0
 800c224:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c228:	f7f4 fc40 	bl	8000aac <__aeabi_dcmpeq>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d163      	bne.n	800c2fa <qr_DvOBrgQi+0x906>
    knt = 5;
 800c232:	2305      	movs	r3, #5
 800c234:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 11;
 800c238:	230b      	movs	r3, #11
 800c23a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800c23e:	e009      	b.n	800c254 <qr_DvOBrgQi+0x860>
      knt--;
 800c240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c244:	3b01      	subs	r3, #1
 800c246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      c_lastc--;
 800c24a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c24e:	3b01      	subs	r3, #1
 800c250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    while ((knt > 0) && (b_A[c_lastc] == 0.0)) {
 800c254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dd11      	ble.n	800c280 <qr_DvOBrgQi+0x88c>
 800c25c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c266:	4413      	add	r3, r2
 800c268:	3bd0      	subs	r3, #208	; 0xd0
 800c26a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c26e:	f04f 0200 	mov.w	r2, #0
 800c272:	f04f 0300 	mov.w	r3, #0
 800c276:	f7f4 fc19 	bl	8000aac <__aeabi_dcmpeq>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1df      	bne.n	800c240 <qr_DvOBrgQi+0x84c>
    }

    c_lastc = 1;
 800c280:	2301      	movs	r3, #1
 800c282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    coltop = 13;
 800c286:	230d      	movs	r3, #13
 800c288:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    do {
      exitg1 = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (coltop + 1 <= knt + 13) {
 800c292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c296:	f103 020c 	add.w	r2, r3, #12
 800c29a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	dc20      	bgt.n	800c2e4 <qr_DvOBrgQi+0x8f0>
        if (b_A[coltop] != 0.0) {
 800c2a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c2ac:	4413      	add	r3, r2
 800c2ae:	3bd0      	subs	r3, #208	; 0xd0
 800c2b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2b4:	f04f 0200 	mov.w	r2, #0
 800c2b8:	f04f 0300 	mov.w	r3, #0
 800c2bc:	f7f4 fbf6 	bl	8000aac <__aeabi_dcmpeq>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d103      	bne.n	800c2ce <qr_DvOBrgQi+0x8da>
          exitg1 = 1;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c2cc:	e010      	b.n	800c2f0 <qr_DvOBrgQi+0x8fc>
        } else {
          coltop++;
 800c2ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c2d8:	e00a      	b.n	800c2f0 <qr_DvOBrgQi+0x8fc>
 800c2da:	bf00      	nop
 800c2dc:	7c900000 	.word	0x7c900000
 800c2e0:	3ff00000 	.word	0x3ff00000
        }
      } else {
        c_lastc = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg1 = 1;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c2f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0c9      	beq.n	800c28c <qr_DvOBrgQi+0x898>
 800c2f8:	e005      	b.n	800c306 <qr_DvOBrgQi+0x912>
  } else {
    knt = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    c_lastc = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }

  if (knt > 0) {
 800c306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	dd29      	ble.n	800c362 <qr_DvOBrgQi+0x96e>
    xgemv_NQlWbt2i(knt, c_lastc, b_A, 14, b_A, 8, work);
 800c30e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c312:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c316:	9302      	str	r3, [sp, #8]
 800c318:	2308      	movs	r3, #8
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	230e      	movs	r3, #14
 800c324:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c328:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c32c:	f002 ff04 	bl	800f138 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(knt, c_lastc, -tau_idx_1, 8, work, b_A, 14);
 800c330:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c334:	63bb      	str	r3, [r7, #56]	; 0x38
 800c336:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c33a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c340:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c344:	230e      	movs	r3, #14
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4613      	mov	r3, r2
 800c350:	2208      	movs	r2, #8
 800c352:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800c356:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c35a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c35e:	f002 fff9 	bl	800f354 <xgerc_R09LiDgJ>
  }

  b_A[7] = atmp;
 800c362:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c366:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  atmp = b_A[14];
 800c36a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c36e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  tau_idx_2 = 0.0;
 800c372:	f04f 0200 	mov.w	r2, #0
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  beta1 = xnrm2_nLdASVZH(3, b_A, 16);
 800c37e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c382:	2210      	movs	r2, #16
 800c384:	4619      	mov	r1, r3
 800c386:	2003      	movs	r0, #3
 800c388:	f003 faf4 	bl	800f974 <xnrm2_nLdASVZH>
 800c38c:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
  if (beta1 != 0.0) {
 800c390:	f04f 0200 	mov.w	r2, #0
 800c394:	f04f 0300 	mov.w	r3, #0
 800c398:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c39c:	f7f4 fb86 	bl	8000aac <__aeabi_dcmpeq>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 8170 	bne.w	800c688 <qr_DvOBrgQi+0xc94>
    beta1 = rt_hypotd_snf(b_A[14], beta1);
 800c3a8:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800c3ac:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800c3b0:	eeb0 0a47 	vmov.f32	s0, s14
 800c3b4:	eef0 0a67 	vmov.f32	s1, s15
 800c3b8:	f000 fdf6 	bl	800cfa8 <rt_hypotd_snf>
 800c3bc:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
    if (b_A[14] >= 0.0) {
 800c3c0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c3c4:	f04f 0200 	mov.w	r2, #0
 800c3c8:	f04f 0300 	mov.w	r3, #0
 800c3cc:	f7f4 fb8c 	bl	8000ae8 <__aeabi_dcmpge>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d009      	beq.n	800c3ea <qr_DvOBrgQi+0x9f6>
      beta1 = -beta1;
 800c3d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3da:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c3de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c3e6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    if (fabs(beta1) < 1.0020841800044864E-292) {
 800c3ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c3ee:	633b      	str	r3, [r7, #48]	; 0x30
 800c3f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c3f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3fa:	f04f 0200 	mov.w	r2, #0
 800c3fe:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c406:	f7f4 fb5b 	bl	8000ac0 <__aeabi_dcmplt>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 80ef 	beq.w	800c5f0 <qr_DvOBrgQi+0xbfc>
      knt = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        knt++;
 800c418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c41c:	3301      	adds	r3, #1
 800c41e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c422:	230f      	movs	r3, #15
 800c424:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c428:	e01f      	b.n	800c46a <qr_DvOBrgQi+0xa76>
          b_A[b_coltop] *= 9.9792015476736E+291;
 800c42a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c434:	4413      	add	r3, r2
 800c436:	3bd0      	subs	r3, #208	; 0xd0
 800c438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c43c:	f04f 0200 	mov.w	r2, #0
 800c440:	4bb5      	ldr	r3, [pc, #724]	; (800c718 <qr_DvOBrgQi+0xd24>)
 800c442:	f7f4 f8cb 	bl	80005dc <__aeabi_dmul>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	4610      	mov	r0, r2
 800c44c:	4619      	mov	r1, r3
 800c44e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c458:	4413      	add	r3, r2
 800c45a:	3bd0      	subs	r3, #208	; 0xd0
 800c45c:	e9c3 0100 	strd	r0, r1, [r3]
        for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c464:	3301      	adds	r3, #1
 800c466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c46e:	2b11      	cmp	r3, #17
 800c470:	dddb      	ble.n	800c42a <qr_DvOBrgQi+0xa36>
        }

        beta1 *= 9.9792015476736E+291;
 800c472:	f04f 0200 	mov.w	r2, #0
 800c476:	4ba8      	ldr	r3, [pc, #672]	; (800c718 <qr_DvOBrgQi+0xd24>)
 800c478:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c47c:	f7f4 f8ae 	bl	80005dc <__aeabi_dmul>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        atmp *= 9.9792015476736E+291;
 800c488:	f04f 0200 	mov.w	r2, #0
 800c48c:	4ba2      	ldr	r3, [pc, #648]	; (800c718 <qr_DvOBrgQi+0xd24>)
 800c48e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c492:	f7f4 f8a3 	bl	80005dc <__aeabi_dmul>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800c49e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c4a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c4b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c4ba:	f7f4 fb01 	bl	8000ac0 <__aeabi_dcmplt>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <qr_DvOBrgQi+0xad8>
 800c4c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c4c8:	2b13      	cmp	r3, #19
 800c4ca:	dda5      	ble.n	800c418 <qr_DvOBrgQi+0xa24>

      beta1 = rt_hypotd_snf(atmp, xnrm2_nLdASVZH(3, b_A, 16));
 800c4cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c4d0:	2210      	movs	r2, #16
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	2003      	movs	r0, #3
 800c4d6:	f003 fa4d 	bl	800f974 <xnrm2_nLdASVZH>
 800c4da:	eeb0 7a40 	vmov.f32	s14, s0
 800c4de:	eef0 7a60 	vmov.f32	s15, s1
 800c4e2:	eeb0 1a47 	vmov.f32	s2, s14
 800c4e6:	eef0 1a67 	vmov.f32	s3, s15
 800c4ea:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800c4ee:	f000 fd5b 	bl	800cfa8 <rt_hypotd_snf>
 800c4f2:	ed87 0b52 	vstr	d0, [r7, #328]	; 0x148
      if (atmp >= 0.0) {
 800c4f6:	f04f 0200 	mov.w	r2, #0
 800c4fa:	f04f 0300 	mov.w	r3, #0
 800c4fe:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c502:	f7f4 faf1 	bl	8000ae8 <__aeabi_dcmpge>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d009      	beq.n	800c520 <qr_DvOBrgQi+0xb2c>
        beta1 = -beta1;
 800c50c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c510:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800c518:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c51c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
      }

      tau_idx_2 = (beta1 - atmp) / beta1;
 800c520:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c524:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c528:	f7f3 fea0 	bl	800026c <__aeabi_dsub>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4610      	mov	r0, r2
 800c532:	4619      	mov	r1, r3
 800c534:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c538:	f7f4 f97a 	bl	8000830 <__aeabi_ddiv>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (atmp - beta1);
 800c544:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c548:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800c54c:	f7f3 fe8e 	bl	800026c <__aeabi_dsub>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	f04f 0000 	mov.w	r0, #0
 800c558:	4970      	ldr	r1, [pc, #448]	; (800c71c <qr_DvOBrgQi+0xd28>)
 800c55a:	f7f4 f969 	bl	8000830 <__aeabi_ddiv>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c566:	230f      	movs	r3, #15
 800c568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c56c:	e01c      	b.n	800c5a8 <qr_DvOBrgQi+0xbb4>
        b_A[b_coltop] *= atmp;
 800c56e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c578:	4413      	add	r3, r2
 800c57a:	3bd0      	subs	r3, #208	; 0xd0
 800c57c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c580:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c584:	f7f4 f82a 	bl	80005dc <__aeabi_dmul>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c590:	00c9      	lsls	r1, r1, #3
 800c592:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c596:	4401      	add	r1, r0
 800c598:	39d0      	subs	r1, #208	; 0xd0
 800c59a:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c59e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5ac:	2b11      	cmp	r3, #17
 800c5ae:	ddde      	ble.n	800c56e <qr_DvOBrgQi+0xb7a>
      }

      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c5b6:	e010      	b.n	800c5da <qr_DvOBrgQi+0xbe6>
        beta1 *= 1.0020841800044864E-292;
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800c5c0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c5c4:	f7f4 f80a 	bl	80005dc <__aeabi_dmul>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      for (c_lastc = 0; c_lastc < knt; c_lastc++) {
 800c5d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c5da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c5de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	dbe8      	blt.n	800c5b8 <qr_DvOBrgQi+0xbc4>
      }

      atmp = beta1;
 800c5e6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c5ea:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800c5ee:	e04b      	b.n	800c688 <qr_DvOBrgQi+0xc94>
    } else {
      tau_idx_2 = (beta1 - b_A[14]) / beta1;
 800c5f0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c5f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c5f8:	f7f3 fe38 	bl	800026c <__aeabi_dsub>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4610      	mov	r0, r2
 800c602:	4619      	mov	r1, r3
 800c604:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c608:	f7f4 f912 	bl	8000830 <__aeabi_ddiv>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
      atmp = 1.0 / (b_A[14] - beta1);
 800c614:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800c618:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c61c:	f7f3 fe26 	bl	800026c <__aeabi_dsub>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	f04f 0000 	mov.w	r0, #0
 800c628:	493c      	ldr	r1, [pc, #240]	; (800c71c <qr_DvOBrgQi+0xd28>)
 800c62a:	f7f4 f901 	bl	8000830 <__aeabi_ddiv>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800c636:	230f      	movs	r3, #15
 800c638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c63c:	e01c      	b.n	800c678 <qr_DvOBrgQi+0xc84>
        b_A[c_lastc] *= atmp;
 800c63e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c648:	4413      	add	r3, r2
 800c64a:	3bd0      	subs	r3, #208	; 0xd0
 800c64c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c650:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c654:	f7f3 ffc2 	bl	80005dc <__aeabi_dmul>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c660:	00c9      	lsls	r1, r1, #3
 800c662:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c666:	4401      	add	r1, r0
 800c668:	39d0      	subs	r1, #208	; 0xd0
 800c66a:	e9c1 2300 	strd	r2, r3, [r1]
      for (c_lastc = 15; c_lastc < 18; c_lastc++) {
 800c66e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c672:	3301      	adds	r3, #1
 800c674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c678:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c67c:	2b11      	cmp	r3, #17
 800c67e:	ddde      	ble.n	800c63e <qr_DvOBrgQi+0xc4a>
      }

      atmp = beta1;
 800c680:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c684:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    }
  }

  b_A[14] = atmp;
 800c688:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c68c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  R[0] = b_A[0];
 800c690:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c694:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c696:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800c69a:	2301      	movs	r3, #1
 800c69c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c6a0:	e00f      	b.n	800c6c2 <qr_DvOBrgQi+0xcce>
    R[c_lastc] = 0.0;
 800c6a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c6aa:	18d1      	adds	r1, r2, r3
 800c6ac:	f04f 0200 	mov.w	r2, #0
 800c6b0:	f04f 0300 	mov.w	r3, #0
 800c6b4:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 1; c_lastc + 1 < 4; c_lastc++) {
 800c6b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6bc:	3301      	adds	r3, #1
 800c6be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c6c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	ddeb      	ble.n	800c6a2 <qr_DvOBrgQi+0xcae>
  }

  work[0] = 0.0;
 800c6ca:	f04f 0200 	mov.w	r2, #0
 800c6ce:	f04f 0300 	mov.w	r3, #0
 800c6d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c6dc:	e016      	b.n	800c70c <qr_DvOBrgQi+0xd18>
    R[c_lastc + 3] = b_A[c_lastc + 6];
 800c6de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6e2:	3306      	adds	r3, #6
 800c6e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c6e8:	3203      	adds	r2, #3
 800c6ea:	00d2      	lsls	r2, r2, #3
 800c6ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c6ee:	4411      	add	r1, r2
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c6f6:	4413      	add	r3, r2
 800c6f8:	3bd0      	subs	r3, #208	; 0xd0
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c706:	3301      	adds	r3, #1
 800c708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c70c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c710:	2b01      	cmp	r3, #1
 800c712:	dde4      	ble.n	800c6de <qr_DvOBrgQi+0xcea>
  }

  while (c_lastc + 1 < 4) {
 800c714:	e015      	b.n	800c742 <qr_DvOBrgQi+0xd4e>
 800c716:	bf00      	nop
 800c718:	7c900000 	.word	0x7c900000
 800c71c:	3ff00000 	.word	0x3ff00000
    R[c_lastc + 3] = 0.0;
 800c720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c724:	3303      	adds	r3, #3
 800c726:	00db      	lsls	r3, r3, #3
 800c728:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c72a:	18d1      	adds	r1, r2, r3
 800c72c:	f04f 0200 	mov.w	r2, #0
 800c730:	f04f 0300 	mov.w	r3, #0
 800c734:	e9c1 2300 	strd	r2, r3, [r1]
    c_lastc++;
 800c738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c73c:	3301      	adds	r3, #1
 800c73e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  while (c_lastc + 1 < 4) {
 800c742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c746:	2b02      	cmp	r3, #2
 800c748:	ddea      	ble.n	800c720 <qr_DvOBrgQi+0xd2c>
  }

  work[1] = 0.0;
 800c74a:	f04f 0200 	mov.w	r2, #0
 800c74e:	f04f 0300 	mov.w	r3, #0
 800c752:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800c756:	2300      	movs	r3, #0
 800c758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c75c:	e016      	b.n	800c78c <qr_DvOBrgQi+0xd98>
    R[c_lastc + 6] = b_A[c_lastc + 12];
 800c75e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c762:	330c      	adds	r3, #12
 800c764:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c768:	3206      	adds	r2, #6
 800c76a:	00d2      	lsls	r2, r2, #3
 800c76c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c76e:	4411      	add	r1, r2
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c776:	4413      	add	r3, r2
 800c778:	3bd0      	subs	r3, #208	; 0xd0
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 3; c_lastc++) {
 800c782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c786:	3301      	adds	r3, #1
 800c788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c78c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c790:	2b02      	cmp	r3, #2
 800c792:	dde4      	ble.n	800c75e <qr_DvOBrgQi+0xd6a>
  }

  work[2] = 0.0;
 800c794:	f04f 0200 	mov.w	r2, #0
 800c798:	f04f 0300 	mov.w	r3, #0
 800c79c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c7a0:	230f      	movs	r3, #15
 800c7a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c7a6:	e024      	b.n	800c7f2 <qr_DvOBrgQi+0xdfe>
    b_A[b_coltop] *= -tau_idx_2;
 800c7a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c7b2:	4413      	add	r3, r2
 800c7b4:	3bd0      	subs	r3, #208	; 0xd0
 800c7b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c7be:	623b      	str	r3, [r7, #32]
 800c7c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c7c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7ce:	f7f3 ff05 	bl	80005dc <__aeabi_dmul>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c7da:	00c9      	lsls	r1, r1, #3
 800c7dc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c7e0:	4401      	add	r1, r0
 800c7e2:	39d0      	subs	r1, #208	; 0xd0
 800c7e4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 15; b_coltop < 18; b_coltop++) {
 800c7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c7f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c7f6:	2b11      	cmp	r3, #17
 800c7f8:	ddd6      	ble.n	800c7a8 <qr_DvOBrgQi+0xdb4>
  }

  b_A[14] = 1.0 - tau_idx_2;
 800c7fa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c7fe:	f04f 0000 	mov.w	r0, #0
 800c802:	49cc      	ldr	r1, [pc, #816]	; (800cb34 <qr_DvOBrgQi+0x1140>)
 800c804:	f7f3 fd32 	bl	800026c <__aeabi_dsub>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c810:	2300      	movs	r3, #0
 800c812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c816:	e014      	b.n	800c842 <qr_DvOBrgQi+0xe4e>
    b_A[13 - c_lastc] = 0.0;
 800c818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c81c:	f1c3 030d 	rsb	r3, r3, #13
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c826:	4413      	add	r3, r2
 800c828:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800c82c:	f04f 0200 	mov.w	r2, #0
 800c830:	f04f 0300 	mov.w	r3, #0
 800c834:	e9c1 2300 	strd	r2, r3, [r1]
  for (c_lastc = 0; c_lastc < 2; c_lastc++) {
 800c838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c83c:	3301      	adds	r3, #1
 800c83e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c846:	2b01      	cmp	r3, #1
 800c848:	dde6      	ble.n	800c818 <qr_DvOBrgQi+0xe24>
  }

  b_A[7] = 1.0;
 800c84a:	f04f 0200 	mov.w	r2, #0
 800c84e:	4bb9      	ldr	r3, [pc, #740]	; (800cb34 <qr_DvOBrgQi+0x1140>)
 800c850:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  if (tau_idx_1 != 0.0) {
 800c854:	f04f 0200 	mov.w	r2, #0
 800c858:	f04f 0300 	mov.w	r3, #0
 800c85c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800c860:	f7f4 f924 	bl	8000aac <__aeabi_dcmpeq>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d15f      	bne.n	800c92a <qr_DvOBrgQi+0xf36>
    c_lastc = 5;
 800c86a:	2305      	movs	r3, #5
 800c86c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 13;
 800c870:	230d      	movs	r3, #13
 800c872:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c876:	e009      	b.n	800c88c <qr_DvOBrgQi+0xe98>
      c_lastc--;
 800c878:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c87c:	3b01      	subs	r3, #1
 800c87e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800c882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c886:	3b01      	subs	r3, #1
 800c888:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800c88c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c890:	2b00      	cmp	r3, #0
 800c892:	dd12      	ble.n	800c8ba <qr_DvOBrgQi+0xec6>
 800c894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c898:	3b02      	subs	r3, #2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c8a0:	4413      	add	r3, r2
 800c8a2:	3bd0      	subs	r3, #208	; 0xd0
 800c8a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8a8:	f04f 0200 	mov.w	r2, #0
 800c8ac:	f04f 0300 	mov.w	r3, #0
 800c8b0:	f7f4 f8fc 	bl	8000aac <__aeabi_dcmpeq>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1de      	bne.n	800c878 <qr_DvOBrgQi+0xe84>
    }

    b_coltop = 1;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    knt = 14;
 800c8c0:	230e      	movs	r3, #14
 800c8c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    do {
      exitg1 = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      if (knt <= c_lastc + 13) {
 800c8cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c8d0:	330d      	adds	r3, #13
 800c8d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	dc1c      	bgt.n	800c914 <qr_DvOBrgQi+0xf20>
        if (b_A[knt - 1] != 0.0) {
 800c8da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c8e6:	4413      	add	r3, r2
 800c8e8:	3bd0      	subs	r3, #208	; 0xd0
 800c8ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	f7f4 f8d9 	bl	8000aac <__aeabi_dcmpeq>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d103      	bne.n	800c908 <qr_DvOBrgQi+0xf14>
          exitg1 = 1;
 800c900:	2301      	movs	r3, #1
 800c902:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c906:	e00b      	b.n	800c920 <qr_DvOBrgQi+0xf2c>
        } else {
          knt++;
 800c908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c90c:	3301      	adds	r3, #1
 800c90e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c912:	e005      	b.n	800c920 <qr_DvOBrgQi+0xf2c>
        }
      } else {
        b_coltop = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        exitg1 = 1;
 800c91a:	2301      	movs	r3, #1
 800c91c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      }
    } while (exitg1 == 0);
 800c920:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0ce      	beq.n	800c8c6 <qr_DvOBrgQi+0xed2>
 800c928:	e005      	b.n	800c936 <qr_DvOBrgQi+0xf42>
  } else {
    c_lastc = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800c936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dd29      	ble.n	800c992 <qr_DvOBrgQi+0xf9e>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 14, b_A, 8, work);
 800c93e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c942:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c946:	9302      	str	r3, [sp, #8]
 800c948:	2308      	movs	r3, #8
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	230e      	movs	r3, #14
 800c954:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c958:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c95c:	f002 fbec 	bl	800f138 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_1, 8, work, b_A, 14);
 800c960:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c964:	61bb      	str	r3, [r7, #24]
 800c966:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c96a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c96e:	61fb      	str	r3, [r7, #28]
 800c970:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c974:	230e      	movs	r3, #14
 800c976:	9301      	str	r3, [sp, #4]
 800c978:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	4613      	mov	r3, r2
 800c980:	2208      	movs	r2, #8
 800c982:	ed97 0b06 	vldr	d0, [r7, #24]
 800c986:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c98a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c98e:	f002 fce1 	bl	800f354 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c992:	2308      	movs	r3, #8
 800c994:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c998:	e024      	b.n	800c9e4 <qr_DvOBrgQi+0xff0>
    b_A[b_coltop] *= -tau_idx_1;
 800c99a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800c9a4:	4413      	add	r3, r2
 800c9a6:	3bd0      	subs	r3, #208	; 0xd0
 800c9a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c9b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c9c0:	f7f3 fe0c 	bl	80005dc <__aeabi_dmul>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800c9cc:	00c9      	lsls	r1, r1, #3
 800c9ce:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800c9d2:	4401      	add	r1, r0
 800c9d4:	39d0      	subs	r1, #208	; 0xd0
 800c9d6:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 8; b_coltop < 12; b_coltop++) {
 800c9da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9de:	3301      	adds	r3, #1
 800c9e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9e8:	2b0b      	cmp	r3, #11
 800c9ea:	ddd6      	ble.n	800c99a <qr_DvOBrgQi+0xfa6>
  }

  b_A[7] = 1.0 - tau_idx_1;
 800c9ec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c9f0:	f04f 0000 	mov.w	r0, #0
 800c9f4:	494f      	ldr	r1, [pc, #316]	; (800cb34 <qr_DvOBrgQi+0x1140>)
 800c9f6:	f7f3 fc39 	bl	800026c <__aeabi_dsub>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  b_A[6] = 0.0;
 800ca02:	f04f 0200 	mov.w	r2, #0
 800ca06:	f04f 0300 	mov.w	r3, #0
 800ca0a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  b_A[0] = 1.0;
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	4b48      	ldr	r3, [pc, #288]	; (800cb34 <qr_DvOBrgQi+0x1140>)
 800ca14:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  if (tau_idx_0 != 0.0) {
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800ca24:	f7f4 f842 	bl	8000aac <__aeabi_dcmpeq>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f040 8084 	bne.w	800cb38 <qr_DvOBrgQi+0x1144>
    c_lastc = 6;
 800ca30:	2306      	movs	r3, #6
 800ca32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 7;
 800ca36:	2307      	movs	r3, #7
 800ca38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800ca3c:	e009      	b.n	800ca52 <qr_DvOBrgQi+0x105e>
      c_lastc--;
 800ca3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca42:	3b01      	subs	r3, #1
 800ca44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      b_coltop--;
 800ca48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    while ((c_lastc > 0) && (b_A[b_coltop - 2] == 0.0)) {
 800ca52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dd12      	ble.n	800ca80 <qr_DvOBrgQi+0x108c>
 800ca5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca5e:	3b02      	subs	r3, #2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ca66:	4413      	add	r3, r2
 800ca68:	3bd0      	subs	r3, #208	; 0xd0
 800ca6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca6e:	f04f 0200 	mov.w	r2, #0
 800ca72:	f04f 0300 	mov.w	r3, #0
 800ca76:	f7f4 f819 	bl	8000aac <__aeabi_dcmpeq>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1de      	bne.n	800ca3e <qr_DvOBrgQi+0x104a>
    }

    b_coltop = 2;
 800ca80:	2302      	movs	r3, #2
 800ca82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    exitg2 = false;
 800ca86:	2300      	movs	r3, #0
 800ca88:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800ca8c:	e049      	b.n	800cb22 <qr_DvOBrgQi+0x112e>
      coltop = (b_coltop - 1) * 6 + 7;
 800ca8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca92:	1e5a      	subs	r2, r3, #1
 800ca94:	4613      	mov	r3, r2
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	4413      	add	r3, r2
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	3307      	adds	r3, #7
 800ca9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      knt = coltop;
 800caa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800caa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      do {
        exitg1 = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (knt <= (coltop + c_lastc) - 1) {
 800cab0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800cab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cab8:	4413      	add	r3, r2
 800caba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800cabe:	429a      	cmp	r2, r3
 800cac0:	da1c      	bge.n	800cafc <qr_DvOBrgQi+0x1108>
          if (b_A[knt - 1] != 0.0) {
 800cac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cac6:	3b01      	subs	r3, #1
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cace:	4413      	add	r3, r2
 800cad0:	3bd0      	subs	r3, #208	; 0xd0
 800cad2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cad6:	f04f 0200 	mov.w	r2, #0
 800cada:	f04f 0300 	mov.w	r3, #0
 800cade:	f7f3 ffe5 	bl	8000aac <__aeabi_dcmpeq>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d103      	bne.n	800caf0 <qr_DvOBrgQi+0x10fc>
            exitg1 = 1;
 800cae8:	2301      	movs	r3, #1
 800caea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800caee:	e00d      	b.n	800cb0c <qr_DvOBrgQi+0x1118>
          } else {
            knt++;
 800caf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800caf4:	3301      	adds	r3, #1
 800caf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cafa:	e007      	b.n	800cb0c <qr_DvOBrgQi+0x1118>
          }
        } else {
          b_coltop--;
 800cafc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb00:	3b01      	subs	r3, #1
 800cb02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          exitg1 = 2;
 800cb06:	2302      	movs	r3, #2
 800cb08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
      } while (exitg1 == 0);
 800cb0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d0ca      	beq.n	800caaa <qr_DvOBrgQi+0x10b6>

      if (exitg1 == 1) {
 800cb14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d102      	bne.n	800cb22 <qr_DvOBrgQi+0x112e>
        exitg2 = true;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    while ((!exitg2) && (b_coltop > 0)) {
 800cb22:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10c      	bne.n	800cb44 <qr_DvOBrgQi+0x1150>
 800cb2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dcad      	bgt.n	800ca8e <qr_DvOBrgQi+0x109a>
 800cb32:	e007      	b.n	800cb44 <qr_DvOBrgQi+0x1150>
 800cb34:	3ff00000 	.word	0x3ff00000
      }
    }
  } else {
    c_lastc = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    b_coltop = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  }

  if (c_lastc > 0) {
 800cb44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	dd29      	ble.n	800cba0 <qr_DvOBrgQi+0x11ac>
    xgemv_NQlWbt2i(c_lastc, b_coltop, b_A, 7, b_A, 1, work);
 800cb4c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800cb50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cb54:	9302      	str	r3, [sp, #8]
 800cb56:	2301      	movs	r3, #1
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	2307      	movs	r3, #7
 800cb62:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800cb66:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800cb6a:	f002 fae5 	bl	800f138 <xgemv_NQlWbt2i>
    xgerc_R09LiDgJ(c_lastc, b_coltop, -tau_idx_0, 1, work, b_A, 7);
 800cb6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cb72:	60bb      	str	r3, [r7, #8]
 800cb74:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cb78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cb7c:	60fb      	str	r3, [r7, #12]
 800cb7e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cb82:	2307      	movs	r3, #7
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	2201      	movs	r2, #1
 800cb90:	ed97 0b02 	vldr	d0, [r7, #8]
 800cb94:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800cb98:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800cb9c:	f002 fbda 	bl	800f354 <xgerc_R09LiDgJ>
  }

  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800cba0:	2301      	movs	r3, #1
 800cba2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800cba6:	e024      	b.n	800cbf2 <qr_DvOBrgQi+0x11fe>
    b_A[b_coltop] *= -tau_idx_0;
 800cba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cbb2:	4413      	add	r3, r2
 800cbb4:	3bd0      	subs	r3, #208	; 0xd0
 800cbb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cbc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cbc8:	607b      	str	r3, [r7, #4]
 800cbca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbce:	f7f3 fd05 	bl	80005dc <__aeabi_dmul>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800cbda:	00c9      	lsls	r1, r1, #3
 800cbdc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800cbe0:	4401      	add	r1, r0
 800cbe2:	39d0      	subs	r1, #208	; 0xd0
 800cbe4:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_coltop = 1; b_coltop < 6; b_coltop++) {
 800cbe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbec:	3301      	adds	r3, #1
 800cbee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800cbf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbf6:	2b05      	cmp	r3, #5
 800cbf8:	ddd6      	ble.n	800cba8 <qr_DvOBrgQi+0x11b4>
  }

  b_A[0] = 1.0 - tau_idx_0;
 800cbfa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800cbfe:	f04f 0000 	mov.w	r0, #0
 800cc02:	4923      	ldr	r1, [pc, #140]	; (800cc90 <qr_DvOBrgQi+0x129c>)
 800cc04:	f7f3 fb32 	bl	800026c <__aeabi_dsub>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  b_coltop = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800cc16:	2300      	movs	r3, #0
 800cc18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cc1c:	e02d      	b.n	800cc7a <qr_DvOBrgQi+0x1286>
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800cc24:	e01b      	b.n	800cc5e <qr_DvOBrgQi+0x126a>
      knt = c_lastc + b_coltop;
 800cc26:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cc2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc2e:	4413      	add	r3, r2
 800cc30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
      Q[knt] = b_A[knt];
 800cc34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc3c:	18d1      	adds	r1, r2, r3
 800cc3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800cc48:	4413      	add	r3, r2
 800cc4a:	3bd0      	subs	r3, #208	; 0xd0
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	e9c1 2300 	strd	r2, r3, [r1]
    for (c_lastc = 0; c_lastc < 6; c_lastc++) {
 800cc54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc58:	3301      	adds	r3, #1
 800cc5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800cc5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	dddf      	ble.n	800cc26 <qr_DvOBrgQi+0x1232>
    }

    b_coltop += 6;
 800cc66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc6a:	3306      	adds	r3, #6
 800cc6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  for (coltop = 0; coltop < 3; coltop++) {
 800cc70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cc74:	3301      	adds	r3, #1
 800cc76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cc7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	ddcd      	ble.n	800cc1e <qr_DvOBrgQi+0x122a>
  }
}
 800cc82:	bf00      	nop
 800cc84:	bf00      	nop
 800cc86:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	3ff00000 	.word	0x3ff00000

0800cc94 <rotate_LZ7ctbe0>:
#include "rotate_LZ7ctbe0.h"
#include <math.h>
#include "rt_hypotd_snf.h"

void rotate_LZ7ctbe0(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 800cc94:	b5b0      	push	{r4, r5, r7, lr}
 800cc96:	b092      	sub	sp, #72	; 0x48
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	ed87 0b06 	vstr	d0, [r7, #24]
 800cc9e:	ed87 1b04 	vstr	d1, [r7, #16]
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	643b      	str	r3, [r7, #64]	; 0x40
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccb2:	647b      	str	r3, [r7, #68]	; 0x44
  absy = fabs(y);
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (absy == 0.0) {
 800ccc0:	f04f 0200 	mov.w	r2, #0
 800ccc4:	f04f 0300 	mov.w	r3, #0
 800ccc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cccc:	f7f3 feee 	bl	8000aac <__aeabi_dcmpeq>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d012      	beq.n	800ccfc <rotate_LZ7ctbe0+0x68>
    *c = 1.0;
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	f04f 0200 	mov.w	r2, #0
 800ccdc:	4b4e      	ldr	r3, [pc, #312]	; (800ce18 <rotate_LZ7ctbe0+0x184>)
 800ccde:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 800cce2:	68b9      	ldr	r1, [r7, #8]
 800cce4:	f04f 0200 	mov.w	r2, #0
 800cce8:	f04f 0300 	mov.w	r3, #0
 800ccec:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccf6:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 800ccfa:	e088      	b.n	800ce0e <rotate_LZ7ctbe0+0x17a>
  } else if (absx == 0.0) {
 800ccfc:	f04f 0200 	mov.w	r2, #0
 800cd00:	f04f 0300 	mov.w	r3, #0
 800cd04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cd08:	f7f3 fed0 	bl	8000aac <__aeabi_dcmpeq>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d012      	beq.n	800cd38 <rotate_LZ7ctbe0+0xa4>
    *c = 0.0;
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	f04f 0300 	mov.w	r3, #0
 800cd1c:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	f04f 0200 	mov.w	r2, #0
 800cd26:	4b3c      	ldr	r3, [pc, #240]	; (800ce18 <rotate_LZ7ctbe0+0x184>)
 800cd28:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd32:	e9c1 2300 	strd	r2, r3, [r1]
}
 800cd36:	e06a      	b.n	800ce0e <rotate_LZ7ctbe0+0x17a>
    absy += absx;
 800cd38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cd3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cd40:	f7f3 fa96 	bl	8000270 <__adddf3>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xx = x / absy;
 800cd4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cd50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cd54:	f7f3 fd6c 	bl	8000830 <__aeabi_ddiv>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    yy = y / absy;
 800cd60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cd64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd68:	f7f3 fd62 	bl	8000830 <__aeabi_ddiv>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    absx = fabs(xx);
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	643b      	str	r3, [r7, #64]	; 0x40
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd7e:	647b      	str	r3, [r7, #68]	; 0x44
    rho = rt_hypotd_snf(absx, fabs(yy));
 800cd80:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800cd88:	ec45 4b11 	vmov	d1, r4, r5
 800cd8c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800cd90:	f000 f90a 	bl	800cfa8 <rt_hypotd_snf>
 800cd94:	ed87 0b08 	vstr	d0, [r7, #32]
    *c = absx / rho;
 800cd98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800cda0:	f7f3 fd46 	bl	8000830 <__aeabi_ddiv>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	68f9      	ldr	r1, [r7, #12]
 800cdaa:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 800cdae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cdb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cdb6:	f7f3 fd3b 	bl	8000830 <__aeabi_ddiv>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    *s = xx * yy / rho;
 800cdc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cdc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cdca:	f7f3 fc07 	bl	80005dc <__aeabi_dmul>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cdda:	f7f3 fd29 	bl	8000830 <__aeabi_ddiv>
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	68b9      	ldr	r1, [r7, #8]
 800cde4:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800cde8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cdec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cdf0:	f7f3 fbf4 	bl	80005dc <__aeabi_dmul>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ce00:	f7f3 fbec 	bl	80005dc <__aeabi_dmul>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	6879      	ldr	r1, [r7, #4]
 800ce0a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800ce0e:	bf00      	nop
 800ce10:	3748      	adds	r7, #72	; 0x48
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bdb0      	pop	{r4, r5, r7, pc}
 800ce16:	bf00      	nop
 800ce18:	3ff00000 	.word	0x3ff00000

0800ce1c <rtGetInf>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetInf(void)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800ce22:	2340      	movs	r3, #64	; 0x40
 800ce24:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 800ce26:	f04f 0200 	mov.w	r2, #0
 800ce2a:	f04f 0300 	mov.w	r3, #0
 800ce2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2b20      	cmp	r3, #32
 800ce36:	d10b      	bne.n	800ce50 <rtGetInf+0x34>
    inf = rtGetInfF();
 800ce38:	f000 f820 	bl	800ce7c <rtGetInfF>
 800ce3c:	ee10 3a10 	vmov	r3, s0
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f3 fb73 	bl	800052c <__aeabi_f2d>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ce4e:	e007      	b.n	800ce60 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800ce50:	4b09      	ldr	r3, [pc, #36]	; (800ce78 <rtGetInf+0x5c>)
 800ce52:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800ce58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 800ce60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce64:	ec43 2b17 	vmov	d7, r2, r3
}
 800ce68:	eeb0 0a47 	vmov.f32	s0, s14
 800ce6c:	eef0 0a67 	vmov.f32	s1, s15
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	7ff00000 	.word	0x7ff00000

0800ce7c <rtGetInfF>:

real32_T rtGetInfF(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800ce82:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800ce86:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	ee07 3a90 	vmov	s15, r3
}
 800ce8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <rtGetMinusInf>:

real_T rtGetMinusInf(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800cea2:	2340      	movs	r3, #64	; 0x40
 800cea4:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800cea6:	f04f 0200 	mov.w	r2, #0
 800ceaa:	f04f 0300 	mov.w	r3, #0
 800ceae:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b20      	cmp	r3, #32
 800ceb6:	d10b      	bne.n	800ced0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800ceb8:	f000 f820 	bl	800cefc <rtGetMinusInfF>
 800cebc:	ee10 3a10 	vmov	r3, s0
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7f3 fb33 	bl	800052c <__aeabi_f2d>
 800cec6:	4602      	mov	r2, r0
 800cec8:	460b      	mov	r3, r1
 800ceca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cece:	e007      	b.n	800cee0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800ced0:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <rtGetMinusInf+0x5c>)
 800ced2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800ced4:	2300      	movs	r3, #0
 800ced6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800ced8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cedc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800cee0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cee4:	ec43 2b17 	vmov	d7, r2, r3
}
 800cee8:	eeb0 0a47 	vmov.f32	s0, s14
 800ceec:	eef0 0a67 	vmov.f32	s1, s15
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	fff00000 	.word	0xfff00000

0800cefc <rtGetMinusInfF>:

real32_T rtGetMinusInfF(void)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800cf02:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <rtGetMinusInfF+0x20>)
 800cf04:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	ee07 3a90 	vmov	s15, r3
}
 800cf0c:	eeb0 0a67 	vmov.f32	s0, s15
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	ff800000 	.word	0xff800000

0800cf20 <rtGetNaN>:
#include <stddef.h>
#include "rt_nonfinite.h"
#define NumBitsPerChar                 8U

real_T rtGetNaN(void)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800cf26:	2340      	movs	r3, #64	; 0x40
 800cf28:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 800cf2a:	f04f 0200 	mov.w	r2, #0
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d10b      	bne.n	800cf54 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 800cf3c:	f000 f820 	bl	800cf80 <rtGetNaNF>
 800cf40:	ee10 3a10 	vmov	r3, s0
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7f3 faf1 	bl	800052c <__aeabi_f2d>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800cf52:	e007      	b.n	800cf64 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <rtGetNaN+0x5c>)
 800cf56:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 800cf5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf60:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800cf64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cf68:	ec43 2b17 	vmov	d7, r2, r3
}
 800cf6c:	eeb0 0a47 	vmov.f32	s0, s14
 800cf70:	eef0 0a67 	vmov.f32	s1, s15
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	fff80000 	.word	0xfff80000

0800cf80 <rtGetNaNF>:

real32_T rtGetNaNF(void)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800cf86:	f04f 0300 	mov.w	r3, #0
 800cf8a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 800cf8c:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <rtGetNaNF+0x24>)
 800cf8e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	ee07 3a90 	vmov	s15, r3
}
 800cf96:	eeb0 0a67 	vmov.f32	s0, s15
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	ffc00000 	.word	0xffc00000

0800cfa8 <rt_hypotd_snf>:
#include "rt_hypotd_snf.h"
#include <math.h>
#include "rt_nonfinite.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	ed87 0b02 	vstr	d0, [r7, #8]
 800cfb2:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T y;
  a = fabs(u0);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	613b      	str	r3, [r7, #16]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfc0:	617b      	str	r3, [r7, #20]
  y = fabs(u1);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	61bb      	str	r3, [r7, #24]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfcc:	61fb      	str	r3, [r7, #28]
  if (a < y) {
 800cfce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cfd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cfd6:	f7f3 fd73 	bl	8000ac0 <__aeabi_dcmplt>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d02d      	beq.n	800d03c <rt_hypotd_snf+0x94>
    a /= y;
 800cfe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cfe4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cfe8:	f7f3 fc22 	bl	8000830 <__aeabi_ddiv>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y *= sqrt(a * a + 1.0);
 800cff4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cffc:	f7f3 faee 	bl	80005dc <__aeabi_dmul>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	4610      	mov	r0, r2
 800d006:	4619      	mov	r1, r3
 800d008:	f04f 0200 	mov.w	r2, #0
 800d00c:	4b38      	ldr	r3, [pc, #224]	; (800d0f0 <rt_hypotd_snf+0x148>)
 800d00e:	f7f3 f92f 	bl	8000270 <__adddf3>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	ec43 2b17 	vmov	d7, r2, r3
 800d01a:	eeb0 0a47 	vmov.f32	s0, s14
 800d01e:	eef0 0a67 	vmov.f32	s1, s15
 800d022:	f00c ff59 	bl	8019ed8 <sqrt>
 800d026:	ec53 2b10 	vmov	r2, r3, d0
 800d02a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d02e:	f7f3 fad5 	bl	80005dc <__aeabi_dmul>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d03a:	e048      	b.n	800d0ce <rt_hypotd_snf+0x126>
  } else if (a > y) {
 800d03c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d040:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d044:	f7f3 fd5a 	bl	8000afc <__aeabi_dcmpgt>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02d      	beq.n	800d0aa <rt_hypotd_snf+0x102>
    y /= a;
 800d04e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d052:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d056:	f7f3 fbeb 	bl	8000830 <__aeabi_ddiv>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(y * y + 1.0) * a;
 800d062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d066:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d06a:	f7f3 fab7 	bl	80005dc <__aeabi_dmul>
 800d06e:	4602      	mov	r2, r0
 800d070:	460b      	mov	r3, r1
 800d072:	4610      	mov	r0, r2
 800d074:	4619      	mov	r1, r3
 800d076:	f04f 0200 	mov.w	r2, #0
 800d07a:	4b1d      	ldr	r3, [pc, #116]	; (800d0f0 <rt_hypotd_snf+0x148>)
 800d07c:	f7f3 f8f8 	bl	8000270 <__adddf3>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	ec43 2b17 	vmov	d7, r2, r3
 800d088:	eeb0 0a47 	vmov.f32	s0, s14
 800d08c:	eef0 0a67 	vmov.f32	s1, s15
 800d090:	f00c ff22 	bl	8019ed8 <sqrt>
 800d094:	ec53 2b10 	vmov	r2, r3, d0
 800d098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d09c:	f7f3 fa9e 	bl	80005dc <__aeabi_dmul>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d0a8:	e011      	b.n	800d0ce <rt_hypotd_snf+0x126>
  } else if (!rtIsNaN(y)) {
 800d0aa:	ed97 0b06 	vldr	d0, [r7, #24]
 800d0ae:	f000 f889 	bl	800d1c4 <rtIsNaN>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <rt_hypotd_snf+0x126>
    y = a * 1.4142135623730951;
 800d0b8:	a30b      	add	r3, pc, #44	; (adr r3, 800d0e8 <rt_hypotd_snf+0x140>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0c2:	f7f3 fa8b 	bl	80005dc <__aeabi_dmul>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }

  return y;
 800d0ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0d2:	ec43 2b17 	vmov	d7, r2, r3
}
 800d0d6:	eeb0 0a47 	vmov.f32	s0, s14
 800d0da:	eef0 0a67 	vmov.f32	s1, s15
 800d0de:	3720      	adds	r7, #32
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	f3af 8000 	nop.w
 800d0e8:	667f3bcd 	.word	0x667f3bcd
 800d0ec:	3ff6a09e 	.word	0x3ff6a09e
 800d0f0:	3ff00000 	.word	0x3ff00000

0800d0f4 <rt_InitInfAndNaN>:
real_T rtNaN;
real32_T rtInfF;
real32_T rtMinusInfF;
real32_T rtNaNF;
void rt_InitInfAndNaN(size_t realSize)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800d0fc:	f7ff ff10 	bl	800cf20 <rtGetNaN>
 800d100:	eeb0 7a40 	vmov.f32	s14, s0
 800d104:	eef0 7a60 	vmov.f32	s15, s1
 800d108:	4b16      	ldr	r3, [pc, #88]	; (800d164 <rt_InitInfAndNaN+0x70>)
 800d10a:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800d10e:	f7ff ff37 	bl	800cf80 <rtGetNaNF>
 800d112:	eef0 7a40 	vmov.f32	s15, s0
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <rt_InitInfAndNaN+0x74>)
 800d118:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800d11c:	f7ff fe7e 	bl	800ce1c <rtGetInf>
 800d120:	eeb0 7a40 	vmov.f32	s14, s0
 800d124:	eef0 7a60 	vmov.f32	s15, s1
 800d128:	4b10      	ldr	r3, [pc, #64]	; (800d16c <rt_InitInfAndNaN+0x78>)
 800d12a:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800d12e:	f7ff fea5 	bl	800ce7c <rtGetInfF>
 800d132:	eef0 7a40 	vmov.f32	s15, s0
 800d136:	4b0e      	ldr	r3, [pc, #56]	; (800d170 <rt_InitInfAndNaN+0x7c>)
 800d138:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800d13c:	f7ff feae 	bl	800ce9c <rtGetMinusInf>
 800d140:	eeb0 7a40 	vmov.f32	s14, s0
 800d144:	eef0 7a60 	vmov.f32	s15, s1
 800d148:	4b0a      	ldr	r3, [pc, #40]	; (800d174 <rt_InitInfAndNaN+0x80>)
 800d14a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800d14e:	f7ff fed5 	bl	800cefc <rtGetMinusInfF>
 800d152:	eef0 7a40 	vmov.f32	s15, s0
 800d156:	4b08      	ldr	r3, [pc, #32]	; (800d178 <rt_InitInfAndNaN+0x84>)
 800d158:	edc3 7a00 	vstr	s15, [r3]
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	2001e8a0 	.word	0x2001e8a0
 800d168:	2001e890 	.word	0x2001e890
 800d16c:	2001e898 	.word	0x2001e898
 800d170:	2001e894 	.word	0x2001e894
 800d174:	2001e8a8 	.word	0x2001e8a8
 800d178:	2001e8b0 	.word	0x2001e8b0

0800d17c <rtIsInf>:

boolean_T rtIsInf(real_T value)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800d186:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <rtIsInf+0x40>)
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d190:	f7f3 fc8c 	bl	8000aac <__aeabi_dcmpeq>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <rtIsInf+0x32>
 800d19a:	4b09      	ldr	r3, [pc, #36]	; (800d1c0 <rtIsInf+0x44>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1a4:	f7f3 fc82 	bl	8000aac <__aeabi_dcmpeq>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <rtIsInf+0x36>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e000      	b.n	800d1b4 <rtIsInf+0x38>
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	2001e898 	.word	0x2001e898
 800d1c0:	2001e8a8 	.word	0x2001e8a8

0800d1c4 <rtIsNaN>:
{
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

boolean_T rtIsNaN(real_T value)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800d1d2:	2340      	movs	r3, #64	; 0x40
 800d1d4:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b20      	cmp	r3, #32
 800d1da:	d10b      	bne.n	800d1f4 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 800d1dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1e0:	f7f3 fcf4 	bl	8000bcc <__aeabi_d2f>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	ee00 3a10 	vmov	s0, r3
 800d1ea:	f000 f821 	bl	800d230 <rtIsNaNF>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	75fb      	strb	r3, [r7, #23]
 800d1f2:	e015      	b.n	800d220 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 800d1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	4b0b      	ldr	r3, [pc, #44]	; (800d22c <rtIsNaN+0x68>)
 800d200:	4013      	ands	r3, r2
 800d202:	4a0a      	ldr	r2, [pc, #40]	; (800d22c <rtIsNaN+0x68>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d109      	bne.n	800d21c <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d102      	bne.n	800d218 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800d212:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800d218:	2301      	movs	r3, #1
 800d21a:	e000      	b.n	800d21e <rtIsNaN+0x5a>
 800d21c:	2300      	movs	r3, #0
 800d21e:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 800d220:	7dfb      	ldrb	r3, [r7, #23]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3718      	adds	r7, #24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	7ff00000 	.word	0x7ff00000

0800d230 <rtIsNaNF>:

boolean_T rtIsNaNF(real32_T value)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800d244:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d248:	d106      	bne.n	800d258 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800d250:	2b00      	cmp	r3, #0
 800d252:	d001      	beq.n	800d258 <rtIsNaNF+0x28>
 800d254:	2301      	movs	r3, #1
 800d256:	e000      	b.n	800d25a <rtIsNaNF+0x2a>
 800d258:	2300      	movs	r3, #0
 800d25a:	b2db      	uxtb	r3, r3
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <svd_u3DvUgOe>:
#include "xrotg_XzIjz1eG.h"
#include "xrot_i7f01JoJ.h"
#include "xswap_JoAqPjUv.h"

void svd_u3DvUgOe(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 800d268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d26c:	ed2d 8b02 	vpush	{d8}
 800d270:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800d274:	af02      	add	r7, sp, #8
 800d276:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800d27a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d27e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d282:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d286:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qq;
  boolean_T apply_transform;
  e[0] = 0.0;
 800d288:	f04f 0200 	mov.w	r2, #0
 800d28c:	f04f 0300 	mov.w	r3, #0
 800d290:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  work[0] = 0.0;
 800d294:	f04f 0200 	mov.w	r2, #0
 800d298:	f04f 0300 	mov.w	r3, #0
 800d29c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  e[1] = 0.0;
 800d2a0:	f04f 0200 	mov.w	r2, #0
 800d2a4:	f04f 0300 	mov.w	r3, #0
 800d2a8:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  work[1] = 0.0;
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	f04f 0300 	mov.w	r3, #0
 800d2b4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  e[2] = 0.0;
 800d2b8:	f04f 0200 	mov.w	r2, #0
 800d2bc:	f04f 0300 	mov.w	r3, #0
 800d2c0:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  work[2] = 0.0;
 800d2c4:	f04f 0200 	mov.w	r2, #0
 800d2c8:	f04f 0300 	mov.w	r3, #0
 800d2cc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  for (qq = 0; qq < 9; qq++) {
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d2d6:	e02e      	b.n	800d336 <svd_u3DvUgOe+0xce>
    b_A[qq] = A[qq];
 800d2d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2dc:	00da      	lsls	r2, r3, #3
 800d2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e2:	4413      	add	r3, r2
 800d2e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2ec:	00db      	lsls	r3, r3, #3
 800d2ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2f2:	4413      	add	r3, r2
 800d2f4:	3b88      	subs	r3, #136	; 0x88
 800d2f6:	e9c3 0100 	strd	r0, r1, [r3]
    U[qq] = 0.0;
 800d2fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d2fe:	00da      	lsls	r2, r3, #3
 800d300:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d304:	1899      	adds	r1, r3, r2
 800d306:	f04f 0200 	mov.w	r2, #0
 800d30a:	f04f 0300 	mov.w	r3, #0
 800d30e:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq] = 0.0;
 800d312:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d316:	00da      	lsls	r2, r3, #3
 800d318:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	1899      	adds	r1, r3, r2
 800d320:	f04f 0200 	mov.w	r2, #0
 800d324:	f04f 0300 	mov.w	r3, #0
 800d328:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 0; qq < 9; qq++) {
 800d32c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d330:	3301      	adds	r3, #1
 800d332:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d336:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d33a:	2b08      	cmp	r3, #8
 800d33c:	ddcc      	ble.n	800d2d8 <svd_u3DvUgOe+0x70>
  }

  qq = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  apply_transform = false;
 800d344:	2300      	movs	r3, #0
 800d346:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(3, b_A, 1);
 800d34a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d34e:	2201      	movs	r2, #1
 800d350:	4619      	mov	r1, r3
 800d352:	2003      	movs	r0, #3
 800d354:	f002 fbbc 	bl	800fad0 <xnrm2_xDOlDEtw>
 800d358:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800d35c:	f04f 0200 	mov.w	r2, #0
 800d360:	f04f 0300 	mov.w	r3, #0
 800d364:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d368:	f7f3 fbc8 	bl	8000afc <__aeabi_dcmpgt>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d07b      	beq.n	800d46a <svd_u3DvUgOe+0x202>
    apply_transform = true;
 800d372:	2301      	movs	r3, #1
 800d374:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[0] < 0.0) {
 800d378:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d37c:	f04f 0200 	mov.w	r2, #0
 800d380:	f04f 0300 	mov.w	r3, #0
 800d384:	f7f3 fb9c 	bl	8000ac0 <__aeabi_dcmplt>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d008      	beq.n	800d3a0 <svd_u3DvUgOe+0x138>
      b_s[0] = -nrm;
 800d38e:	f8d7 41c8 	ldr.w	r4, [r7, #456]	; 0x1c8
 800d392:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d396:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800d39a:	e9c7 4558 	strd	r4, r5, [r7, #352]	; 0x160
 800d39e:	e003      	b.n	800d3a8 <svd_u3DvUgOe+0x140>
    } else {
      b_s[0] = nrm;
 800d3a0:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d3a4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    }

    if (fabs(b_s[0]) >= 1.0020841800044864E-292) {
 800d3a8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d3ac:	4690      	mov	r8, r2
 800d3ae:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800d3b2:	f04f 0200 	mov.w	r2, #0
 800d3b6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	f7f3 fb93 	bl	8000ae8 <__aeabi_dcmpge>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d016      	beq.n	800d3f6 <svd_u3DvUgOe+0x18e>
      xscal_59GtRAwv(3, 1.0 / b_s[0], b_A, 1);
 800d3c8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d3cc:	f04f 0000 	mov.w	r0, #0
 800d3d0:	49c1      	ldr	r1, [pc, #772]	; (800d6d8 <svd_u3DvUgOe+0x470>)
 800d3d2:	f7f3 fa2d 	bl	8000830 <__aeabi_ddiv>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	ec43 2b17 	vmov	d7, r2, r3
 800d3de:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ea:	eef0 0a67 	vmov.f32	s1, s15
 800d3ee:	2003      	movs	r0, #3
 800d3f0:	f002 fe36 	bl	8010060 <xscal_59GtRAwv>
 800d3f4:	e026      	b.n	800d444 <svd_u3DvUgOe+0x1dc>
    } else {
      for (qjj = 0; qjj < 3; qjj++) {
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d3fc:	e01e      	b.n	800d43c <svd_u3DvUgOe+0x1d4>
        b_A[qjj] /= b_s[0];
 800d3fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d408:	4413      	add	r3, r2
 800d40a:	3b88      	subs	r3, #136	; 0x88
 800d40c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d410:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d414:	f7f3 fa0c 	bl	8000830 <__aeabi_ddiv>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4610      	mov	r0, r2
 800d41e:	4619      	mov	r1, r3
 800d420:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d42a:	4413      	add	r3, r2
 800d42c:	3b88      	subs	r3, #136	; 0x88
 800d42e:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 0; qjj < 3; qjj++) {
 800d432:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d436:	3301      	adds	r3, #1
 800d438:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d43c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d440:	2b02      	cmp	r3, #2
 800d442:	dddc      	ble.n	800d3fe <svd_u3DvUgOe+0x196>
      }
    }

    b_A[0]++;
 800d444:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800d448:	f04f 0200 	mov.w	r2, #0
 800d44c:	4ba2      	ldr	r3, [pc, #648]	; (800d6d8 <svd_u3DvUgOe+0x470>)
 800d44e:	f7f2 ff0f 	bl	8000270 <__adddf3>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    b_s[0] = -b_s[0];
 800d45a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800d45e:	4692      	mov	sl, r2
 800d460:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800d464:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160
 800d468:	e005      	b.n	800d476 <svd_u3DvUgOe+0x20e>
  } else {
    b_s[0] = 0.0;
 800d46a:	f04f 0200 	mov.w	r2, #0
 800d46e:	f04f 0300 	mov.w	r3, #0
 800d472:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  }

  for (d = 1; d + 1 < 4; d++) {
 800d476:	2301      	movs	r3, #1
 800d478:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d47c:	e047      	b.n	800d50e <svd_u3DvUgOe+0x2a6>
    qjj = 3 * d;
 800d47e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d482:	4613      	mov	r3, r2
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800d48c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800d490:	2b00      	cmp	r3, #0
 800d492:	d025      	beq.n	800d4e0 <svd_u3DvUgOe+0x278>
      xaxpy_guu0hJif(3, -(xdotc_mznw4aLl(3, b_A, 1, b_A, qjj + 1) / b_A[0]), 1,
 800d494:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d498:	3301      	adds	r3, #1
 800d49a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d49e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	2003      	movs	r0, #3
 800d4aa:	f001 fdf8 	bl	800f09e <xdotc_mznw4aLl>
 800d4ae:	ec51 0b10 	vmov	r0, r1, d0
 800d4b2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d4b6:	f7f3 f9bb 	bl	8000830 <__aeabi_ddiv>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d4c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d4c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d4ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800d4da:	2003      	movs	r0, #3
 800d4dc:	f001 fd8b 	bl	800eff6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800d4e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3b88      	subs	r3, #136	; 0x88
 800d4ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d4fc:	4413      	add	r3, r2
 800d4fe:	3bb8      	subs	r3, #184	; 0xb8
 800d500:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 1; d + 1 < 4; d++) {
 800d504:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d508:	3301      	adds	r3, #1
 800d50a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d50e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d512:	2b02      	cmp	r3, #2
 800d514:	ddb3      	ble.n	800d47e <svd_u3DvUgOe+0x216>
  }

  while (qq + 1 < 4) {
 800d516:	e015      	b.n	800d544 <svd_u3DvUgOe+0x2dc>
    U[qq] = b_A[qq];
 800d518:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d51c:	00da      	lsls	r2, r3, #3
 800d51e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d522:	1899      	adds	r1, r3, r2
 800d524:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d52e:	4413      	add	r3, r2
 800d530:	3b88      	subs	r3, #136	; 0x88
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	e9c1 2300 	strd	r2, r3, [r1]
    qq++;
 800d53a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d53e:	3301      	adds	r3, #1
 800d540:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  while (qq + 1 < 4) {
 800d544:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d548:	2b02      	cmp	r3, #2
 800d54a:	dde5      	ble.n	800d518 <svd_u3DvUgOe+0x2b0>
  }

  nrm = xnrm2_Rlk0oxWw(2, e, 2);
 800d54c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d550:	2202      	movs	r2, #2
 800d552:	4619      	mov	r1, r3
 800d554:	2002      	movs	r0, #2
 800d556:	f002 f95f 	bl	800f818 <xnrm2_Rlk0oxWw>
 800d55a:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm == 0.0) {
 800d55e:	f04f 0200 	mov.w	r2, #0
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d56a:	f7f3 fa9f 	bl	8000aac <__aeabi_dcmpeq>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <svd_u3DvUgOe+0x31a>
    e[0] = 0.0;
 800d574:	f04f 0200 	mov.w	r2, #0
 800d578:	f04f 0300 	mov.w	r3, #0
 800d57c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800d580:	e10d      	b.n	800d79e <svd_u3DvUgOe+0x536>
  } else {
    if (e[1] < 0.0) {
 800d582:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d586:	f04f 0200 	mov.w	r2, #0
 800d58a:	f04f 0300 	mov.w	r3, #0
 800d58e:	f7f3 fa97 	bl	8000ac0 <__aeabi_dcmplt>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00e      	beq.n	800d5b6 <svd_u3DvUgOe+0x34e>
      e[0] = -nrm;
 800d598:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d59c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d5a0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d5a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d5a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d5ac:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800d5b0:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
 800d5b4:	e003      	b.n	800d5be <svd_u3DvUgOe+0x356>
    } else {
      e[0] = nrm;
 800d5b6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d5ba:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    }

    nrm = e[0];
 800d5be:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d5c2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
 800d5c6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d5ca:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800d5ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d5d6:	f04f 0200 	mov.w	r2, #0
 800d5da:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d5de:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d5e2:	f7f3 fa81 	bl	8000ae8 <__aeabi_dcmpge>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d016      	beq.n	800d61a <svd_u3DvUgOe+0x3b2>
      xscal_PLmmUlD2(2, 1.0 / e[0], e, 2);
 800d5ec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d5f0:	f04f 0000 	mov.w	r0, #0
 800d5f4:	4938      	ldr	r1, [pc, #224]	; (800d6d8 <svd_u3DvUgOe+0x470>)
 800d5f6:	f7f3 f91b 	bl	8000830 <__aeabi_ddiv>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	ec43 2b17 	vmov	d7, r2, r3
 800d602:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d606:	2202      	movs	r2, #2
 800d608:	4619      	mov	r1, r3
 800d60a:	eeb0 0a47 	vmov.f32	s0, s14
 800d60e:	eef0 0a67 	vmov.f32	s1, s15
 800d612:	2002      	movs	r0, #2
 800d614:	f002 fd58 	bl	80100c8 <xscal_PLmmUlD2>
 800d618:	e026      	b.n	800d668 <svd_u3DvUgOe+0x400>
    } else {
      for (qq = 1; qq < 3; qq++) {
 800d61a:	2301      	movs	r3, #1
 800d61c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d620:	e01e      	b.n	800d660 <svd_u3DvUgOe+0x3f8>
        e[qq] /= nrm;
 800d622:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d626:	00db      	lsls	r3, r3, #3
 800d628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d62c:	4413      	add	r3, r2
 800d62e:	3bb8      	subs	r3, #184	; 0xb8
 800d630:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d634:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d638:	f7f3 f8fa 	bl	8000830 <__aeabi_ddiv>
 800d63c:	4602      	mov	r2, r0
 800d63e:	460b      	mov	r3, r1
 800d640:	4610      	mov	r0, r2
 800d642:	4619      	mov	r1, r3
 800d644:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d64e:	4413      	add	r3, r2
 800d650:	3bb8      	subs	r3, #184	; 0xb8
 800d652:	e9c3 0100 	strd	r0, r1, [r3]
      for (qq = 1; qq < 3; qq++) {
 800d656:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d65a:	3301      	adds	r3, #1
 800d65c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d660:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d664:	2b02      	cmp	r3, #2
 800d666:	dddc      	ble.n	800d622 <svd_u3DvUgOe+0x3ba>
      }
    }

    e[1]++;
 800d668:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d66c:	f04f 0200 	mov.w	r2, #0
 800d670:	4b19      	ldr	r3, [pc, #100]	; (800d6d8 <svd_u3DvUgOe+0x470>)
 800d672:	f7f2 fdfd 	bl	8000270 <__adddf3>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    e[0] = -e[0];
 800d67e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800d682:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d686:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d68a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d68e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800d692:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
    for (qq = 2; qq < 4; qq++) {
 800d696:	2302      	movs	r3, #2
 800d698:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d69c:	e013      	b.n	800d6c6 <svd_u3DvUgOe+0x45e>
      work[qq - 1] = 0.0;
 800d69e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 800d6b0:	f04f 0200 	mov.w	r2, #0
 800d6b4:	f04f 0300 	mov.w	r3, #0
 800d6b8:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = 2; qq < 4; qq++) {
 800d6bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d6c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	dde7      	ble.n	800d69e <svd_u3DvUgOe+0x436>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d6d4:	e025      	b.n	800d722 <svd_u3DvUgOe+0x4ba>
 800d6d6:	bf00      	nop
 800d6d8:	3ff00000 	.word	0x3ff00000
      xaxpy_OQ28XA21(2, e[qq], b_A, 3 * qq + 2, work, 2);
 800d6dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d6e6:	4413      	add	r3, r2
 800d6e8:	3bb8      	subs	r3, #184	; 0xb8
 800d6ea:	ed93 7b00 	vldr	d7, [r3]
 800d6ee:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	1c98      	adds	r0, r3, #2
 800d6fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d6fe:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d702:	2302      	movs	r3, #2
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	4613      	mov	r3, r2
 800d708:	4602      	mov	r2, r0
 800d70a:	eeb0 0a47 	vmov.f32	s0, s14
 800d70e:	eef0 0a67 	vmov.f32	s1, s15
 800d712:	2002      	movs	r0, #2
 800d714:	f001 fbc7 	bl	800eea6 <xaxpy_OQ28XA21>
    for (qq = 1; qq + 1 < 4; qq++) {
 800d718:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d71c:	3301      	adds	r3, #1
 800d71e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d722:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d726:	2b02      	cmp	r3, #2
 800d728:	ddd8      	ble.n	800d6dc <svd_u3DvUgOe+0x474>
    }

    for (qq = 1; qq + 1 < 4; qq++) {
 800d72a:	2301      	movs	r3, #1
 800d72c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d730:	e031      	b.n	800d796 <svd_u3DvUgOe+0x52e>
      xaxpy_Wxch84Fl(2, -e[qq] / e[1], work, 2, b_A, 3 * qq + 2);
 800d732:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d736:	00db      	lsls	r3, r3, #3
 800d738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d73c:	4413      	add	r3, r2
 800d73e:	3bb8      	subs	r3, #184	; 0xb8
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800d748:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d74c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d750:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800d754:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d758:	f7f3 f86a 	bl	8000830 <__aeabi_ddiv>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	ec43 2b17 	vmov	d7, r2, r3
 800d764:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800d768:	4613      	mov	r3, r2
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	4413      	add	r3, r2
 800d76e:	3302      	adds	r3, #2
 800d770:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d774:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4613      	mov	r3, r2
 800d77c:	2202      	movs	r2, #2
 800d77e:	eeb0 0a47 	vmov.f32	s0, s14
 800d782:	eef0 0a67 	vmov.f32	s1, s15
 800d786:	2002      	movs	r0, #2
 800d788:	f001 fbe1 	bl	800ef4e <xaxpy_Wxch84Fl>
    for (qq = 1; qq + 1 < 4; qq++) {
 800d78c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d790:	3301      	adds	r3, #1
 800d792:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d796:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	ddc9      	ble.n	800d732 <svd_u3DvUgOe+0x4ca>
    }
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800d79e:	2301      	movs	r3, #1
 800d7a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d7a4:	e016      	b.n	800d7d4 <svd_u3DvUgOe+0x56c>
    V[qq] = e[qq];
 800d7a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7aa:	00da      	lsls	r2, r3, #3
 800d7ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	1899      	adds	r1, r3, r2
 800d7b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7b8:	00db      	lsls	r3, r3, #3
 800d7ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d7be:	4413      	add	r3, r2
 800d7c0:	3bb8      	subs	r3, #184	; 0xb8
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d7ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d7d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	dde4      	ble.n	800d7a6 <svd_u3DvUgOe+0x53e>
  }

  apply_transform = false;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
  nrm = xnrm2_xDOlDEtw(2, b_A, 5);
 800d7e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d7e6:	2205      	movs	r2, #5
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	2002      	movs	r0, #2
 800d7ec:	f002 f970 	bl	800fad0 <xnrm2_xDOlDEtw>
 800d7f0:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  if (nrm > 0.0) {
 800d7f4:	f04f 0200 	mov.w	r2, #0
 800d7f8:	f04f 0300 	mov.w	r3, #0
 800d7fc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800d800:	f7f3 f97c 	bl	8000afc <__aeabi_dcmpgt>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 808a 	beq.w	800d920 <svd_u3DvUgOe+0x6b8>
    apply_transform = true;
 800d80c:	2301      	movs	r3, #1
 800d80e:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
    if (b_A[4] < 0.0) {
 800d812:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d816:	f04f 0200 	mov.w	r2, #0
 800d81a:	f04f 0300 	mov.w	r3, #0
 800d81e:	f7f3 f94f 	bl	8000ac0 <__aeabi_dcmplt>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00e      	beq.n	800d846 <svd_u3DvUgOe+0x5de>
      b_s[1] = -nrm;
 800d828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800d82c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d830:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800d834:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d83c:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800d840:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d844:	e003      	b.n	800d84e <svd_u3DvUgOe+0x5e6>
    } else {
      b_s[1] = nrm;
 800d846:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800d84a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    }

    if (fabs(b_s[1]) >= 1.0020841800044864E-292) {
 800d84e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d852:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800d856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d85a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d85e:	f04f 0200 	mov.w	r2, #0
 800d862:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800d866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d86a:	f7f3 f93d 	bl	8000ae8 <__aeabi_dcmpge>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d016      	beq.n	800d8a2 <svd_u3DvUgOe+0x63a>
      xscal_59GtRAwv(2, 1.0 / b_s[1], b_A, 5);
 800d874:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d878:	f04f 0000 	mov.w	r0, #0
 800d87c:	49d6      	ldr	r1, [pc, #856]	; (800dbd8 <svd_u3DvUgOe+0x970>)
 800d87e:	f7f2 ffd7 	bl	8000830 <__aeabi_ddiv>
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	ec43 2b17 	vmov	d7, r2, r3
 800d88a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d88e:	2205      	movs	r2, #5
 800d890:	4619      	mov	r1, r3
 800d892:	eeb0 0a47 	vmov.f32	s0, s14
 800d896:	eef0 0a67 	vmov.f32	s1, s15
 800d89a:	2002      	movs	r0, #2
 800d89c:	f002 fbe0 	bl	8010060 <xscal_59GtRAwv>
 800d8a0:	e026      	b.n	800d8f0 <svd_u3DvUgOe+0x688>
    } else {
      for (qjj = 4; qjj < 6; qjj++) {
 800d8a2:	2304      	movs	r3, #4
 800d8a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d8a8:	e01e      	b.n	800d8e8 <svd_u3DvUgOe+0x680>
        b_A[qjj] /= b_s[1];
 800d8aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8b4:	4413      	add	r3, r2
 800d8b6:	3b88      	subs	r3, #136	; 0x88
 800d8b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8bc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d8c0:	f7f2 ffb6 	bl	8000830 <__aeabi_ddiv>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d8d6:	4413      	add	r3, r2
 800d8d8:	3b88      	subs	r3, #136	; 0x88
 800d8da:	e9c3 0100 	strd	r0, r1, [r3]
      for (qjj = 4; qjj < 6; qjj++) {
 800d8de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800d8e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d8ec:	2b05      	cmp	r3, #5
 800d8ee:	dddc      	ble.n	800d8aa <svd_u3DvUgOe+0x642>
      }
    }

    b_A[4]++;
 800d8f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d8f4:	f04f 0200 	mov.w	r2, #0
 800d8f8:	4bb7      	ldr	r3, [pc, #732]	; (800dbd8 <svd_u3DvUgOe+0x970>)
 800d8fa:	f7f2 fcb9 	bl	8000270 <__adddf3>
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    b_s[1] = -b_s[1];
 800d906:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d90a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800d90e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d916:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800d91a:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
 800d91e:	e005      	b.n	800d92c <svd_u3DvUgOe+0x6c4>
  } else {
    b_s[1] = 0.0;
 800d920:	f04f 0200 	mov.w	r2, #0
 800d924:	f04f 0300 	mov.w	r3, #0
 800d928:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  }

  for (d = 2; d + 1 < 4; d++) {
 800d92c:	2302      	movs	r3, #2
 800d92e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d932:	e048      	b.n	800d9c6 <svd_u3DvUgOe+0x75e>
    qjj = 3 * d + 1;
 800d934:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800d938:	4613      	mov	r3, r2
 800d93a:	005b      	lsls	r3, r3, #1
 800d93c:	4413      	add	r3, r2
 800d93e:	3301      	adds	r3, #1
 800d940:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    if (apply_transform) {
 800d944:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d025      	beq.n	800d998 <svd_u3DvUgOe+0x730>
      xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, b_A, 5, b_A, qjj + 1) / b_A[4]), 5,
 800d94c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d950:	3301      	adds	r3, #1
 800d952:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d956:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	4613      	mov	r3, r2
 800d95e:	2205      	movs	r2, #5
 800d960:	2002      	movs	r0, #2
 800d962:	f001 fb9c 	bl	800f09e <xdotc_mznw4aLl>
 800d966:	ec51 0b10 	vmov	r0, r1, d0
 800d96a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d96e:	f7f2 ff5f 	bl	8000830 <__aeabi_ddiv>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800d97a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d97e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d982:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d986:	3301      	adds	r3, #1
 800d988:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d98c:	2105      	movs	r1, #5
 800d98e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800d992:	2002      	movs	r0, #2
 800d994:	f001 fb2f 	bl	800eff6 <xaxpy_guu0hJif>
                     b_A, qjj + 1);
    }

    e[d] = b_A[qjj];
 800d998:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800d99c:	00db      	lsls	r3, r3, #3
 800d99e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d9a2:	4413      	add	r3, r2
 800d9a4:	3b88      	subs	r3, #136	; 0x88
 800d9a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d9b4:	4413      	add	r3, r2
 800d9b6:	3bb8      	subs	r3, #184	; 0xb8
 800d9b8:	e9c3 0100 	strd	r0, r1, [r3]
  for (d = 2; d + 1 < 4; d++) {
 800d9bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d9c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	ddb2      	ble.n	800d934 <svd_u3DvUgOe+0x6cc>
  }

  for (qq = 1; qq + 1 < 4; qq++) {
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d9d4:	e017      	b.n	800da06 <svd_u3DvUgOe+0x79e>
    U[qq + 3] = b_A[qq + 3];
 800d9d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9da:	1cd8      	adds	r0, r3, #3
 800d9dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800d9e0:	3303      	adds	r3, #3
 800d9e2:	00da      	lsls	r2, r3, #3
 800d9e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9e8:	1899      	adds	r1, r3, r2
 800d9ea:	00c3      	lsls	r3, r0, #3
 800d9ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d9f0:	4413      	add	r3, r2
 800d9f2:	3b88      	subs	r3, #136	; 0x88
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 1; qq + 1 < 4; qq++) {
 800d9fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800da00:	3301      	adds	r3, #1
 800da02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800da06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	dde3      	ble.n	800d9d6 <svd_u3DvUgOe+0x76e>
  }

  m = 1;
 800da0e:	2301      	movs	r3, #1
 800da10:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  b_s[2] = b_A[8];
 800da14:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800da18:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800da1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da24:	f04f 0200 	mov.w	r2, #0
 800da28:	f04f 0300 	mov.w	r3, #0
 800da2c:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 800da30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da38:	f04f 0200 	mov.w	r2, #0
 800da3c:	f04f 0300 	mov.w	r3, #0
 800da40:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 800da44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da48:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800da4c:	f04f 0200 	mov.w	r2, #0
 800da50:	4b61      	ldr	r3, [pc, #388]	; (800dbd8 <svd_u3DvUgOe+0x970>)
 800da52:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800da56:	2301      	movs	r3, #1
 800da58:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800da5c:	e100      	b.n	800dc60 <svd_u3DvUgOe+0x9f8>
    qq = 3 * d + d;
 800da5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    if (b_s[d] != 0.0) {
 800da68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da6c:	00db      	lsls	r3, r3, #3
 800da6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800da72:	4413      	add	r3, r2
 800da74:	3ba0      	subs	r3, #160	; 0xa0
 800da76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da7a:	f04f 0200 	mov.w	r2, #0
 800da7e:	f04f 0300 	mov.w	r3, #0
 800da82:	f7f3 f813 	bl	8000aac <__aeabi_dcmpeq>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f040 80a7 	bne.w	800dbdc <svd_u3DvUgOe+0x974>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800da8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800da92:	3301      	adds	r3, #1
 800da94:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800da98:	e043      	b.n	800db22 <svd_u3DvUgOe+0x8ba>
        qjj = (3 * kase + d) + 1;
 800da9a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800da9e:	4613      	mov	r3, r2
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	441a      	add	r2, r3
 800daa4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800daa8:	4413      	add	r3, r2
 800daaa:	3301      	adds	r3, #1
 800daac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(3 - d, -(xdotc_mznw4aLl(3 - d, U, qq + 1, U, qjj) / U[qq]),
 800dab0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dab4:	f1c3 0403 	rsb	r4, r3, #3
 800dab8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dabc:	f1c3 0003 	rsb	r0, r3, #3
 800dac0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dac4:	1c5a      	adds	r2, r3, #1
 800dac6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dad0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800dad4:	f001 fae3 	bl	800f09e <xdotc_mznw4aLl>
 800dad8:	ec51 0b10 	vmov	r0, r1, d0
 800dadc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dae0:	00da      	lsls	r2, r3, #3
 800dae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dae6:	4413      	add	r3, r2
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fea0 	bl	8000830 <__aeabi_ddiv>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800daf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dafc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db04:	1c59      	adds	r1, r3, #1
 800db06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db0a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800db0e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800db12:	4620      	mov	r0, r4
 800db14:	f001 fa6f 	bl	800eff6 <xaxpy_guu0hJif>
      for (kase = d + 1; kase + 1 < 4; kase++) {
 800db18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db1c:	3301      	adds	r3, #1
 800db1e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800db22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db26:	2b02      	cmp	r3, #2
 800db28:	ddb7      	ble.n	800da9a <svd_u3DvUgOe+0x832>
                       qq + 1, U, qjj);
      }

      for (qjj = d; qjj + 1 < 4; qjj++) {
 800db2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800db2e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800db32:	e026      	b.n	800db82 <svd_u3DvUgOe+0x91a>
        kase = 3 * d + qjj;
 800db34:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800db38:	4613      	mov	r3, r2
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	441a      	add	r2, r3
 800db3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db42:	4413      	add	r3, r2
 800db44:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        U[kase] = -U[kase];
 800db48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db4c:	00da      	lsls	r2, r3, #3
 800db4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db52:	4413      	add	r3, r2
 800db54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800db5c:	00da      	lsls	r2, r3, #3
 800db5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db62:	4413      	add	r3, r2
 800db64:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800db68:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800db6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800db70:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800db74:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = d; qjj + 1 < 4; qjj++) {
 800db78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db7c:	3301      	adds	r3, #1
 800db7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800db82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800db86:	2b02      	cmp	r3, #2
 800db88:	ddd4      	ble.n	800db34 <svd_u3DvUgOe+0x8cc>
      }

      U[qq]++;
 800db8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800db8e:	00da      	lsls	r2, r3, #3
 800db90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db94:	189c      	adds	r4, r3, r2
 800db96:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db9a:	f04f 0200 	mov.w	r2, #0
 800db9e:	4b0e      	ldr	r3, [pc, #56]	; (800dbd8 <svd_u3DvUgOe+0x970>)
 800dba0:	f7f2 fb66 	bl	8000270 <__adddf3>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	e9c4 2300 	strd	r2, r3, [r4]
      if (d - 1 >= 0) {
 800dbac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dd50      	ble.n	800dc56 <svd_u3DvUgOe+0x9ee>
        U[3 * d] = 0.0;
 800dbb4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dbb8:	4613      	mov	r3, r2
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	4413      	add	r3, r2
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbc6:	1899      	adds	r1, r3, r2
 800dbc8:	f04f 0200 	mov.w	r2, #0
 800dbcc:	f04f 0300 	mov.w	r3, #0
 800dbd0:	e9c1 2300 	strd	r2, r3, [r1]
 800dbd4:	e03f      	b.n	800dc56 <svd_u3DvUgOe+0x9ee>
 800dbd6:	bf00      	nop
 800dbd8:	3ff00000 	.word	0x3ff00000
      }
    } else {
      U[3 * d] = 0.0;
 800dbdc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	4413      	add	r3, r2
 800dbe6:	00db      	lsls	r3, r3, #3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbee:	1899      	adds	r1, r3, r2
 800dbf0:	f04f 0200 	mov.w	r2, #0
 800dbf4:	f04f 0300 	mov.w	r3, #0
 800dbf8:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 1] = 0.0;
 800dbfc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dc00:	4613      	mov	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	f103 0208 	add.w	r2, r3, #8
 800dc0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc10:	1899      	adds	r1, r3, r2
 800dc12:	f04f 0200 	mov.w	r2, #0
 800dc16:	f04f 0300 	mov.w	r3, #0
 800dc1a:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * d + 2] = 0.0;
 800dc1e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800dc22:	4613      	mov	r3, r2
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4413      	add	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	f103 0210 	add.w	r2, r3, #16
 800dc2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc32:	1899      	adds	r1, r3, r2
 800dc34:	f04f 0200 	mov.w	r2, #0
 800dc38:	f04f 0300 	mov.w	r3, #0
 800dc3c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 800dc40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc44:	00da      	lsls	r2, r3, #3
 800dc46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc4a:	1899      	adds	r1, r3, r2
 800dc4c:	f04f 0200 	mov.w	r2, #0
 800dc50:	4b11      	ldr	r3, [pc, #68]	; (800dc98 <svd_u3DvUgOe+0xa30>)
 800dc52:	e9c1 2300 	strd	r2, r3, [r1]
  for (d = 1; d >= 0; d--) {
 800dc56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800dc60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f6bf aefa 	bge.w	800da5e <svd_u3DvUgOe+0x7f6>
    }
  }

  for (qq = 2; qq >= 0; qq--) {
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800dc70:	e096      	b.n	800dda0 <svd_u3DvUgOe+0xb38>
    if ((qq + 1 <= 1) && (e[0] != 0.0)) {
 800dc72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dc4c      	bgt.n	800dd14 <svd_u3DvUgOe+0xaac>
 800dc7a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800dc7e:	f04f 0200 	mov.w	r2, #0
 800dc82:	f04f 0300 	mov.w	r3, #0
 800dc86:	f7f2 ff11 	bl	8000aac <__aeabi_dcmpeq>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d141      	bne.n	800dd14 <svd_u3DvUgOe+0xaac>
      for (d = 2; d < 4; d++) {
 800dc90:	2302      	movs	r3, #2
 800dc92:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800dc96:	e039      	b.n	800dd0c <svd_u3DvUgOe+0xaa4>
 800dc98:	3ff00000 	.word	0x3ff00000
        qjj = (d - 1) * 3 + 2;
 800dc9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dca0:	1e5a      	subs	r2, r3, #1
 800dca2:	4613      	mov	r3, r2
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	4413      	add	r3, r2
 800dca8:	3302      	adds	r3, #2
 800dcaa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        xaxpy_guu0hJif(2, -(xdotc_mznw4aLl(2, V, 2, V, qjj) / V[1]), 2, V, qjj);
 800dcae:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800dcb2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800dcb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	6813      	ldr	r3, [r2, #0]
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	6809      	ldr	r1, [r1, #0]
 800dcc2:	2002      	movs	r0, #2
 800dcc4:	f001 f9eb 	bl	800f09e <xdotc_mznw4aLl>
 800dcc8:	ec51 0b10 	vmov	r0, r1, d0
 800dccc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	3308      	adds	r3, #8
 800dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd8:	f7f2 fdaa 	bl	8000830 <__aeabi_ddiv>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800dce4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dcec:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800dcf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800dcf4:	6812      	ldr	r2, [r2, #0]
 800dcf6:	2102      	movs	r1, #2
 800dcf8:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800dcfc:	2002      	movs	r0, #2
 800dcfe:	f001 f97a 	bl	800eff6 <xaxpy_guu0hJif>
      for (d = 2; d < 4; d++) {
 800dd02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd06:	3301      	adds	r3, #1
 800dd08:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800dd0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800dd10:	2b03      	cmp	r3, #3
 800dd12:	ddc3      	ble.n	800dc9c <svd_u3DvUgOe+0xa34>
      }
    }

    V[3 * qq] = 0.0;
 800dd14:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dd18:	4613      	mov	r3, r2
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	4413      	add	r3, r2
 800dd1e:	00db      	lsls	r3, r3, #3
 800dd20:	461a      	mov	r2, r3
 800dd22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	1899      	adds	r1, r3, r2
 800dd2a:	f04f 0200 	mov.w	r2, #0
 800dd2e:	f04f 0300 	mov.w	r3, #0
 800dd32:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 1] = 0.0;
 800dd36:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	4413      	add	r3, r2
 800dd40:	00db      	lsls	r3, r3, #3
 800dd42:	f103 0208 	add.w	r2, r3, #8
 800dd46:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	1899      	adds	r1, r3, r2
 800dd4e:	f04f 0200 	mov.w	r2, #0
 800dd52:	f04f 0300 	mov.w	r3, #0
 800dd56:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qq + 2] = 0.0;
 800dd5a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800dd5e:	4613      	mov	r3, r2
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	4413      	add	r3, r2
 800dd64:	00db      	lsls	r3, r3, #3
 800dd66:	f103 0210 	add.w	r2, r3, #16
 800dd6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	1899      	adds	r1, r3, r2
 800dd72:	f04f 0200 	mov.w	r2, #0
 800dd76:	f04f 0300 	mov.w	r3, #0
 800dd7a:	e9c1 2300 	strd	r2, r3, [r1]
    V[qq + 3 * qq] = 1.0;
 800dd7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd82:	015a      	lsls	r2, r3, #5
 800dd84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	1899      	adds	r1, r3, r2
 800dd8c:	f04f 0200 	mov.w	r2, #0
 800dd90:	4bbd      	ldr	r3, [pc, #756]	; (800e088 <svd_u3DvUgOe+0xe20>)
 800dd92:	e9c1 2300 	strd	r2, r3, [r1]
  for (qq = 2; qq >= 0; qq--) {
 800dd96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800dda0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f6bf af64 	bge.w	800dc72 <svd_u3DvUgOe+0xa0a>
  }

  ztest = e[0];
 800ddaa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ddae:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[0] != 0.0) {
 800ddb2:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800ddb6:	f04f 0200 	mov.w	r2, #0
 800ddba:	f04f 0300 	mov.w	r3, #0
 800ddbe:	f7f2 fe75 	bl	8000aac <__aeabi_dcmpeq>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d12a      	bne.n	800de1e <svd_u3DvUgOe+0xbb6>
    rt = fabs(b_s[0]);
 800ddc8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800ddcc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800ddd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ddd8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800dddc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[0] / rt;
 800dde0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800dde4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dde8:	f7f2 fd22 	bl	8000830 <__aeabi_ddiv>
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[0] = rt;
 800ddf4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ddf8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    ztest = e[0] / nrm;
 800ddfc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800de00:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800de04:	f7f2 fd14 	bl	8000830 <__aeabi_ddiv>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 1);
 800de10:	2101      	movs	r1, #1
 800de12:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800de16:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800de1a:	f002 f989 	bl	8010130 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800de1e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800de22:	f04f 0200 	mov.w	r2, #0
 800de26:	f04f 0300 	mov.w	r3, #0
 800de2a:	f7f2 fe3f 	bl	8000aac <__aeabi_dcmpeq>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d12b      	bne.n	800de8c <svd_u3DvUgOe+0xc24>
    rt = fabs(ztest);
 800de34:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800de3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de44:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800de48:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800de4c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800de50:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de54:	f7f2 fcec 	bl	8000830 <__aeabi_ddiv>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800de60:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800de64:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[1] *= nrm;
 800de68:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800de6c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800de70:	f7f2 fbb4 	bl	80005dc <__aeabi_dmul>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    xscal_eaAxXsvQ(nrm, V, 4);
 800de7c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800de80:	2104      	movs	r1, #4
 800de82:	6818      	ldr	r0, [r3, #0]
 800de84:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800de88:	f002 f952 	bl	8010130 <xscal_eaAxXsvQ>
  }

  e[0] = ztest;
 800de8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de90:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  ztest = b_A[7];
 800de94:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800de98:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  if (b_s[1] != 0.0) {
 800de9c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800dea0:	f04f 0200 	mov.w	r2, #0
 800dea4:	f04f 0300 	mov.w	r3, #0
 800dea8:	f7f2 fe00 	bl	8000aac <__aeabi_dcmpeq>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d12a      	bne.n	800df08 <svd_u3DvUgOe+0xca0>
    rt = fabs(b_s[1]);
 800deb2:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800deb6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800deba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800debe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dec2:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800dec6:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[1] / rt;
 800deca:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800dece:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ded2:	f7f2 fcad 	bl	8000830 <__aeabi_ddiv>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[1] = rt;
 800dede:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dee2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    ztest = b_A[7] / nrm;
 800dee6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800deea:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800deee:	f7f2 fc9f 	bl	8000830 <__aeabi_ddiv>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    xscal_eaAxXsvQ(nrm, U, 4);
 800defa:	2104      	movs	r1, #4
 800defc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800df00:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800df04:	f002 f914 	bl	8010130 <xscal_eaAxXsvQ>
  }

  if (ztest != 0.0) {
 800df08:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800df0c:	f04f 0200 	mov.w	r2, #0
 800df10:	f04f 0300 	mov.w	r3, #0
 800df14:	f7f2 fdca 	bl	8000aac <__aeabi_dcmpeq>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d12b      	bne.n	800df76 <svd_u3DvUgOe+0xd0e>
    rt = fabs(ztest);
 800df1e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800df22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800df26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df2e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800df32:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = rt / ztest;
 800df36:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800df3a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800df3e:	f7f2 fc77 	bl	8000830 <__aeabi_ddiv>
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    ztest = rt;
 800df4a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800df4e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    b_s[2] = b_A[8] * nrm;
 800df52:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800df56:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800df5a:	f7f2 fb3f 	bl	80005dc <__aeabi_dmul>
 800df5e:	4602      	mov	r2, r0
 800df60:	460b      	mov	r3, r1
 800df62:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, V, 7);
 800df66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800df6a:	2107      	movs	r1, #7
 800df6c:	6818      	ldr	r0, [r3, #0]
 800df6e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800df72:	f002 f8dd 	bl	8010130 <xscal_eaAxXsvQ>
  }

  e[1] = ztest;
 800df76:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800df7a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  if (b_s[2] != 0.0) {
 800df7e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800df82:	f04f 0200 	mov.w	r2, #0
 800df86:	f04f 0300 	mov.w	r3, #0
 800df8a:	f7f2 fd8f 	bl	8000aac <__aeabi_dcmpeq>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d11e      	bne.n	800dfd2 <svd_u3DvUgOe+0xd6a>
    rt = fabs(b_s[2]);
 800df94:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800df98:	67ba      	str	r2, [r7, #120]	; 0x78
 800df9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dfa0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800dfa4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
    nrm = b_s[2] / rt;
 800dfa8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800dfac:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dfb0:	f7f2 fc3e 	bl	8000830 <__aeabi_ddiv>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
    b_s[2] = rt;
 800dfbc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dfc0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    xscal_eaAxXsvQ(nrm, U, 7);
 800dfc4:	2107      	movs	r1, #7
 800dfc6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800dfca:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800dfce:	f002 f8af 	bl	8010130 <xscal_eaAxXsvQ>
  }

  e[2] = 0.0;
 800dfd2:	f04f 0200 	mov.w	r2, #0
 800dfd6:	f04f 0300 	mov.w	r3, #0
 800dfda:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  qq = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  nrm = fmax(fmax(fmax(b_s[0], e[0]), fmax(b_s[1], ztest)), fmax(b_s[2], 0.0));
 800dfe4:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800dfe8:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 800dfec:	eeb0 1a46 	vmov.f32	s2, s12
 800dff0:	eef0 1a66 	vmov.f32	s3, s13
 800dff4:	eeb0 0a47 	vmov.f32	s0, s14
 800dff8:	eef0 0a67 	vmov.f32	s1, s15
 800dffc:	f00b fe82 	bl	8019d04 <fmax>
 800e000:	eeb0 8a40 	vmov.f32	s16, s0
 800e004:	eef0 8a60 	vmov.f32	s17, s1
 800e008:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800e00c:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800e010:	eeb0 1a46 	vmov.f32	s2, s12
 800e014:	eef0 1a66 	vmov.f32	s3, s13
 800e018:	eeb0 0a47 	vmov.f32	s0, s14
 800e01c:	eef0 0a67 	vmov.f32	s1, s15
 800e020:	f00b fe70 	bl	8019d04 <fmax>
 800e024:	eeb0 7a40 	vmov.f32	s14, s0
 800e028:	eef0 7a60 	vmov.f32	s15, s1
 800e02c:	eeb0 1a47 	vmov.f32	s2, s14
 800e030:	eef0 1a67 	vmov.f32	s3, s15
 800e034:	eeb0 0a48 	vmov.f32	s0, s16
 800e038:	eef0 0a68 	vmov.f32	s1, s17
 800e03c:	f00b fe62 	bl	8019d04 <fmax>
 800e040:	eeb0 8a40 	vmov.f32	s16, s0
 800e044:	eef0 8a60 	vmov.f32	s17, s1
 800e048:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800e04c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800e080 <svd_u3DvUgOe+0xe18>
 800e050:	eeb0 0a47 	vmov.f32	s0, s14
 800e054:	eef0 0a67 	vmov.f32	s1, s15
 800e058:	f00b fe54 	bl	8019d04 <fmax>
 800e05c:	eeb0 7a40 	vmov.f32	s14, s0
 800e060:	eef0 7a60 	vmov.f32	s15, s1
 800e064:	eeb0 1a47 	vmov.f32	s2, s14
 800e068:	eef0 1a67 	vmov.f32	s3, s15
 800e06c:	eeb0 0a48 	vmov.f32	s0, s16
 800e070:	eef0 0a68 	vmov.f32	s1, s17
 800e074:	f00b fe46 	bl	8019d04 <fmax>
 800e078:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
  while ((m + 2 > 0) && (qq < 75)) {
 800e07c:	f000 be8a 	b.w	800ed94 <svd_u3DvUgOe+0x1b2c>
	...
 800e088:	3ff00000 	.word	0x3ff00000
    kase = m + 1;
 800e08c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e090:	3301      	adds	r3, #1
 800e092:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int32_T exitg1;
    do {
      exitg1 = 0;
 800e096:	2300      	movs	r3, #0
 800e098:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
      d = kase;
 800e09c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      if (kase == 0) {
 800e0a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d103      	bne.n	800e0b4 <svd_u3DvUgOe+0xe4c>
        exitg1 = 1;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e0b2:	e092      	b.n	800e1da <svd_u3DvUgOe+0xf72>
      } else {
        rt = fabs(e[kase - 1]);
 800e0b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e0c0:	4413      	add	r3, r2
 800e0c2:	3bb8      	subs	r3, #184	; 0xb8
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	673a      	str	r2, [r7, #112]	; 0x70
 800e0ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0ce:	677b      	str	r3, [r7, #116]	; 0x74
 800e0d0:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800e0d4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800e0d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e0e4:	4413      	add	r3, r2
 800e0e6:	3ba0      	subs	r3, #160	; 0xa0
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	66ba      	str	r2, [r7, #104]	; 0x68
 800e0ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e0fe:	4413      	add	r3, r2
 800e100:	3ba0      	subs	r3, #160	; 0xa0
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	663a      	str	r2, [r7, #96]	; 0x60
 800e108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e10c:	667b      	str	r3, [r7, #100]	; 0x64
 800e10e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e112:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e116:	f7f2 f8ab 	bl	8000270 <__adddf3>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4610      	mov	r0, r2
 800e120:	4619      	mov	r1, r3
 800e122:	f04f 0200 	mov.w	r2, #0
 800e126:	4bb2      	ldr	r3, [pc, #712]	; (800e3f0 <svd_u3DvUgOe+0x1188>)
 800e128:	f7f2 fa58 	bl	80005dc <__aeabi_dmul>
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	4610      	mov	r0, r2
 800e132:	4619      	mov	r1, r3
 800e134:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e138:	f7f2 fcd6 	bl	8000ae8 <__aeabi_dcmpge>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d012      	beq.n	800e168 <svd_u3DvUgOe+0xf00>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 800e142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e146:	3b01      	subs	r3, #1
 800e148:	00db      	lsls	r3, r3, #3
 800e14a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e14e:	4413      	add	r3, r2
 800e150:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e154:	f04f 0200 	mov.w	r2, #0
 800e158:	f04f 0300 	mov.w	r3, #0
 800e15c:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800e160:	2301      	movs	r3, #1
 800e162:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e166:	e038      	b.n	800e1da <svd_u3DvUgOe+0xf72>
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800e168:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e16c:	f04f 0200 	mov.w	r2, #0
 800e170:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800e174:	f7f2 fcae 	bl	8000ad4 <__aeabi_dcmple>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d115      	bne.n	800e1aa <svd_u3DvUgOe+0xf42>
 800e17e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e182:	2b14      	cmp	r3, #20
 800e184:	dd24      	ble.n	800e1d0 <svd_u3DvUgOe+0xf68>
                     2.2204460492503131E-16 * nrm))) {
 800e186:	f04f 0200 	mov.w	r2, #0
 800e18a:	4b99      	ldr	r3, [pc, #612]	; (800e3f0 <svd_u3DvUgOe+0x1188>)
 800e18c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e190:	f7f2 fa24 	bl	80005dc <__aeabi_dmul>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4610      	mov	r0, r2
 800e19a:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qq > 20) && (rt <=
 800e19c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e1a0:	f7f2 fca2 	bl	8000ae8 <__aeabi_dcmpge>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d012      	beq.n	800e1d0 <svd_u3DvUgOe+0xf68>
          e[kase - 1] = 0.0;
 800e1aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e1b6:	4413      	add	r3, r2
 800e1b8:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e1bc:	f04f 0200 	mov.w	r2, #0
 800e1c0:	f04f 0300 	mov.w	r3, #0
 800e1c4:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e1ce:	e004      	b.n	800e1da <svd_u3DvUgOe+0xf72>
        } else {
          kase--;
 800e1d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        }
      }
    } while (exitg1 == 0);
 800e1da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f43f af59 	beq.w	800e096 <svd_u3DvUgOe+0xe2e>

    if (m + 1 == kase) {
 800e1e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e1e8:	1c5a      	adds	r2, r3, #1
 800e1ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d103      	bne.n	800e1fa <svd_u3DvUgOe+0xf92>
      kase = 4;
 800e1f2:	2304      	movs	r3, #4
 800e1f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e1f8:	e0c7      	b.n	800e38a <svd_u3DvUgOe+0x1122>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 800e1fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e1fe:	3302      	adds	r3, #2
 800e200:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
      k_ii = m + 2;
 800e204:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e208:	3302      	adds	r3, #2
 800e20a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      exitg2 = false;
 800e20e:	2300      	movs	r3, #0
 800e210:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      while ((!exitg2) && (k_ii >= kase)) {
 800e214:	e092      	b.n	800e33c <svd_u3DvUgOe+0x10d4>
        qjj = k_ii;
 800e216:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e21a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        if (k_ii == kase) {
 800e21e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800e222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e226:	429a      	cmp	r2, r3
 800e228:	d103      	bne.n	800e232 <svd_u3DvUgOe+0xfca>
          exitg2 = true;
 800e22a:	2301      	movs	r3, #1
 800e22c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800e230:	e084      	b.n	800e33c <svd_u3DvUgOe+0x10d4>
        } else {
          rt = 0.0;
 800e232:	f04f 0200 	mov.w	r2, #0
 800e236:	f04f 0300 	mov.w	r3, #0
 800e23a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          if (k_ii < m + 2) {
 800e23e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e248:	4293      	cmp	r3, r2
 800e24a:	dc11      	bgt.n	800e270 <svd_u3DvUgOe+0x1008>
            rt = fabs(e[k_ii - 1]);
 800e24c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e250:	3b01      	subs	r3, #1
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e258:	4413      	add	r3, r2
 800e25a:	3bb8      	subs	r3, #184	; 0xb8
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	65ba      	str	r2, [r7, #88]	; 0x58
 800e262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e266:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e268:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800e26c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          }

          if (k_ii > kase + 1) {
 800e270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e27a:	4293      	cmp	r3, r2
 800e27c:	dd17      	ble.n	800e2ae <svd_u3DvUgOe+0x1046>
            rt += fabs(e[k_ii - 2]);
 800e27e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e282:	3b02      	subs	r3, #2
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e28a:	4413      	add	r3, r2
 800e28c:	3bb8      	subs	r3, #184	; 0xb8
 800e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e292:	653a      	str	r2, [r7, #80]	; 0x50
 800e294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e298:	657b      	str	r3, [r7, #84]	; 0x54
 800e29a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e29e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e2a2:	f7f1 ffe5 	bl	8000270 <__adddf3>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          }

          ztest = fabs(b_s[k_ii - 1]);
 800e2ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	00db      	lsls	r3, r3, #3
 800e2b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e2ba:	4413      	add	r3, r2
 800e2bc:	3ba0      	subs	r3, #160	; 0xa0
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e2c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2ca:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800e2ce:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 800e2d2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e2d6:	f04f 0200 	mov.w	r2, #0
 800e2da:	4b45      	ldr	r3, [pc, #276]	; (800e3f0 <svd_u3DvUgOe+0x1188>)
 800e2dc:	f7f2 f97e 	bl	80005dc <__aeabi_dmul>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4610      	mov	r0, r2
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e2ec:	f7f2 fbfc 	bl	8000ae8 <__aeabi_dcmpge>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10a      	bne.n	800e30c <svd_u3DvUgOe+0x10a4>
 800e2f6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800e2fa:	f04f 0200 	mov.w	r2, #0
 800e2fe:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800e302:	f7f2 fbe7 	bl	8000ad4 <__aeabi_dcmple>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d012      	beq.n	800e332 <svd_u3DvUgOe+0x10ca>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 800e30c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e310:	3b01      	subs	r3, #1
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e318:	4413      	add	r3, r2
 800e31a:	f1a3 01a0 	sub.w	r1, r3, #160	; 0xa0
 800e31e:	f04f 0200 	mov.w	r2, #0
 800e322:	f04f 0300 	mov.w	r3, #0
 800e326:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800e32a:	2301      	movs	r3, #1
 800e32c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 800e330:	e004      	b.n	800e33c <svd_u3DvUgOe+0x10d4>
          } else {
            k_ii--;
 800e332:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e336:	3b01      	subs	r3, #1
 800e338:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
      while ((!exitg2) && (k_ii >= kase)) {
 800e33c:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800e340:	2b00      	cmp	r3, #0
 800e342:	d106      	bne.n	800e352 <svd_u3DvUgOe+0x10ea>
 800e344:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800e348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e34c:	429a      	cmp	r2, r3
 800e34e:	f6bf af62 	bge.w	800e216 <svd_u3DvUgOe+0xfae>
          }
        }
      }

      if (qjj == kase) {
 800e352:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d103      	bne.n	800e366 <svd_u3DvUgOe+0x10fe>
        kase = 3;
 800e35e:	2303      	movs	r3, #3
 800e360:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e364:	e011      	b.n	800e38a <svd_u3DvUgOe+0x1122>
      } else if (m + 2 == qjj) {
 800e366:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e36a:	1c9a      	adds	r2, r3, #2
 800e36c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e370:	4293      	cmp	r3, r2
 800e372:	d103      	bne.n	800e37c <svd_u3DvUgOe+0x1114>
        kase = 1;
 800e374:	2301      	movs	r3, #1
 800e376:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800e37a:	e006      	b.n	800e38a <svd_u3DvUgOe+0x1122>
      } else {
        kase = 2;
 800e37c:	2302      	movs	r3, #2
 800e37e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        d = qjj;
 800e382:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e386:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
      }
    }

    switch (kase) {
 800e38a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e38e:	2b03      	cmp	r3, #3
 800e390:	f000 8113 	beq.w	800e5ba <svd_u3DvUgOe+0x1352>
 800e394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e398:	2b03      	cmp	r3, #3
 800e39a:	f300 8443 	bgt.w	800ec24 <svd_u3DvUgOe+0x19bc>
 800e39e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d005      	beq.n	800e3b2 <svd_u3DvUgOe+0x114a>
 800e3a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d07b      	beq.n	800e4a6 <svd_u3DvUgOe+0x123e>
 800e3ae:	f000 bc39 	b.w	800ec24 <svd_u3DvUgOe+0x19bc>
     case 1:
      rt = e[m];
 800e3b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3bc:	4413      	add	r3, r2
 800e3be:	3bb8      	subs	r3, #184	; 0xb8
 800e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[m] = 0.0;
 800e3c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3cc:	00db      	lsls	r3, r3, #3
 800e3ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e3d2:	4413      	add	r3, r2
 800e3d4:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e3d8:	f04f 0200 	mov.w	r2, #0
 800e3dc:	f04f 0300 	mov.w	r3, #0
 800e3e0:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800e3e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e3e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e3ec:	e053      	b.n	800e496 <svd_u3DvUgOe+0x122e>
 800e3ee:	bf00      	nop
 800e3f0:	3cb00000 	.word	0x3cb00000
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800e3f4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e3f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e3fc:	00db      	lsls	r3, r3, #3
 800e3fe:	18d0      	adds	r0, r2, r3
 800e400:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e404:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e408:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800e40c:	f001 fd2a 	bl	800fe64 <xrotg_XzIjz1eG>
        if (qjj + 1 > d + 1) {
 800e410:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e414:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e418:	429a      	cmp	r2, r3
 800e41a:	dd19      	ble.n	800e450 <svd_u3DvUgOe+0x11e8>
          rt = -sqds * e[0];
 800e41c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e420:	643a      	str	r2, [r7, #64]	; 0x40
 800e422:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e426:	647b      	str	r3, [r7, #68]	; 0x44
 800e428:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800e42c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e430:	f7f2 f8d4 	bl	80005dc <__aeabi_dmul>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[0] *= ztest;
 800e43c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e440:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e444:	f7f2 f8ca 	bl	80005dc <__aeabi_dmul>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        }

        xrot_i7f01JoJ(V, 3 * qjj + 1, 3 * (m + 1) + 1, ztest, sqds);
 800e450:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e454:	4613      	mov	r3, r2
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	4413      	add	r3, r2
 800e45a:	1c59      	adds	r1, r3, #1
 800e45c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e460:	1c5a      	adds	r2, r3, #1
 800e462:	4613      	mov	r3, r2
 800e464:	005b      	lsls	r3, r3, #1
 800e466:	4413      	add	r3, r2
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800e46e:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800e472:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800e476:	eeb0 1a46 	vmov.f32	s2, s12
 800e47a:	eef0 1a66 	vmov.f32	s3, s13
 800e47e:	eeb0 0a47 	vmov.f32	s0, s14
 800e482:	eef0 0a67 	vmov.f32	s1, s15
 800e486:	6818      	ldr	r0, [r3, #0]
 800e488:	f001 fbd0 	bl	800fc2c <xrot_i7f01JoJ>
      for (qjj = m; qjj + 1 >= d + 1; qjj--) {
 800e48c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e490:	3b01      	subs	r3, #1
 800e492:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e496:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e49a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	daa8      	bge.n	800e3f4 <svd_u3DvUgOe+0x118c>
      }
      break;
 800e4a2:	f000 bc77 	b.w	800ed94 <svd_u3DvUgOe+0x1b2c>

     case 2:
      rt = e[d - 1];
 800e4a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4b2:	4413      	add	r3, r2
 800e4b4:	3bb8      	subs	r3, #184	; 0xb8
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      e[d - 1] = 0.0;
 800e4be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f1a3 01b8 	sub.w	r1, r3, #184	; 0xb8
 800e4d0:	f04f 0200 	mov.w	r2, #0
 800e4d4:	f04f 0300 	mov.w	r3, #0
 800e4d8:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = d; qjj < m + 2; qjj++) {
 800e4dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e4e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e4e4:	e061      	b.n	800e5aa <svd_u3DvUgOe+0x1342>
        xrotg_XzIjz1eG(&b_s[qjj], &rt, &ztest, &sqds);
 800e4e6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800e4ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e4ee:	00db      	lsls	r3, r3, #3
 800e4f0:	18d0      	adds	r0, r2, r3
 800e4f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e4f6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e4fa:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800e4fe:	f001 fcb1 	bl	800fe64 <xrotg_XzIjz1eG>
        rt = -sqds * e[qjj];
 800e502:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e506:	63ba      	str	r2, [r7, #56]	; 0x38
 800e508:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e50c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e50e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e518:	4413      	add	r3, r2
 800e51a:	3bb8      	subs	r3, #184	; 0xb8
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e524:	f7f2 f85a 	bl	80005dc <__aeabi_dmul>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        e[qjj] *= ztest;
 800e530:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e53a:	4413      	add	r3, r2
 800e53c:	3bb8      	subs	r3, #184	; 0xb8
 800e53e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e542:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e546:	f7f2 f849 	bl	80005dc <__aeabi_dmul>
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	4610      	mov	r0, r2
 800e550:	4619      	mov	r1, r3
 800e552:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e55c:	4413      	add	r3, r2
 800e55e:	3bb8      	subs	r3, #184	; 0xb8
 800e560:	e9c3 0100 	strd	r0, r1, [r3]
        xrot_i7f01JoJ(U, 3 * qjj + 1, 3 * (d - 1) + 1, ztest, sqds);
 800e564:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e568:	4613      	mov	r3, r2
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4413      	add	r3, r2
 800e56e:	1c59      	adds	r1, r3, #1
 800e570:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e574:	1e5a      	subs	r2, r3, #1
 800e576:	4613      	mov	r3, r2
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	4413      	add	r3, r2
 800e57c:	3301      	adds	r3, #1
 800e57e:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 800e582:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800e586:	eeb0 1a46 	vmov.f32	s2, s12
 800e58a:	eef0 1a66 	vmov.f32	s3, s13
 800e58e:	eeb0 0a47 	vmov.f32	s0, s14
 800e592:	eef0 0a67 	vmov.f32	s1, s15
 800e596:	461a      	mov	r2, r3
 800e598:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e59c:	f001 fb46 	bl	800fc2c <xrot_i7f01JoJ>
      for (qjj = d; qjj < m + 2; qjj++) {
 800e5a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e5aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	dd96      	ble.n	800e4e6 <svd_u3DvUgOe+0x127e>
      }
      break;
 800e5b8:	e3ec      	b.n	800ed94 <svd_u3DvUgOe+0x1b2c>

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 800e5ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e5be:	3301      	adds	r3, #1
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5c6:	4413      	add	r3, r2
 800e5c8:	3ba0      	subs	r3, #160	; 0xa0
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e5d2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e5d6:	633a      	str	r2, [r7, #48]	; 0x30
 800e5d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e5de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e5e2:	00db      	lsls	r3, r3, #3
 800e5e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e5e8:	4413      	add	r3, r2
 800e5ea:	3ba0      	subs	r3, #160	; 0xa0
 800e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f0:	62ba      	str	r2, [r7, #40]	; 0x28
 800e5f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5f8:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800e5fc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800e600:	f00b fb80 	bl	8019d04 <fmax>
 800e604:	eeb0 7a40 	vmov.f32	s14, s0
 800e608:	eef0 7a60 	vmov.f32	s15, s1
 800e60c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e616:	4413      	add	r3, r2
 800e618:	3bb8      	subs	r3, #184	; 0xb8
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	623a      	str	r2, [r7, #32]
 800e620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e624:	627b      	str	r3, [r7, #36]	; 0x24
 800e626:	ed97 1b08 	vldr	d1, [r7, #32]
 800e62a:	eeb0 0a47 	vmov.f32	s0, s14
 800e62e:	eef0 0a67 	vmov.f32	s1, s15
 800e632:	f00b fb67 	bl	8019d04 <fmax>
 800e636:	eeb0 7a40 	vmov.f32	s14, s0
 800e63a:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800e63e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e648:	4413      	add	r3, r2
 800e64a:	3ba0      	subs	r3, #160	; 0xa0
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e650:	61ba      	str	r2, [r7, #24]
 800e652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e656:	61fb      	str	r3, [r7, #28]
 800e658:	ed97 1b06 	vldr	d1, [r7, #24]
 800e65c:	eeb0 0a47 	vmov.f32	s0, s14
 800e660:	eef0 0a67 	vmov.f32	s1, s15
 800e664:	f00b fb4e 	bl	8019d04 <fmax>
 800e668:	eeb0 7a40 	vmov.f32	s14, s0
 800e66c:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[d])), fabs(e[d]));
 800e670:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e674:	00db      	lsls	r3, r3, #3
 800e676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e67a:	4413      	add	r3, r2
 800e67c:	3bb8      	subs	r3, #184	; 0xb8
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800e682:	613a      	str	r2, [r7, #16]
 800e684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e688:	617b      	str	r3, [r7, #20]
 800e68a:	ed97 1b04 	vldr	d1, [r7, #16]
 800e68e:	eeb0 0a47 	vmov.f32	s0, s14
 800e692:	eef0 0a67 	vmov.f32	s1, s15
 800e696:	f00b fb35 	bl	8019d04 <fmax>
 800e69a:	eeb0 7a40 	vmov.f32	s14, s0
 800e69e:	eef0 7a60 	vmov.f32	s15, s1
 800e6a2:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        rt = sqds / ztest;
 800e6a6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e6aa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e6ae:	f7f2 f8bf 	bl	8000830 <__aeabi_ddiv>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        smm1 = b_s[m] / ztest;
 800e6ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6c4:	4413      	add	r3, r2
 800e6c6:	3ba0      	subs	r3, #160	; 0xa0
 800e6c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e6d0:	f7f2 f8ae 	bl	8000830 <__aeabi_ddiv>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 = e[m] / ztest;
 800e6dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800e6e0:	00db      	lsls	r3, r3, #3
 800e6e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e6e6:	4413      	add	r3, r2
 800e6e8:	3bb8      	subs	r3, #184	; 0xb8
 800e6ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6ee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e6f2:	f7f2 f89d 	bl	8000830 <__aeabi_ddiv>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        sqds = b_s[d] / ztest;
 800e6fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e708:	4413      	add	r3, r2
 800e70a:	3ba0      	subs	r3, #160	; 0xa0
 800e70c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e710:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e714:	f7f2 f88c 	bl	8000830 <__aeabi_ddiv>
 800e718:	4602      	mov	r2, r0
 800e71a:	460b      	mov	r3, r1
 800e71c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800e720:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e724:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e728:	f7f1 fda2 	bl	8000270 <__adddf3>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4614      	mov	r4, r2
 800e732:	461d      	mov	r5, r3
 800e734:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e738:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e73c:	f7f1 fd96 	bl	800026c <__aeabi_dsub>
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	4620      	mov	r0, r4
 800e746:	4629      	mov	r1, r5
 800e748:	f7f1 ff48 	bl	80005dc <__aeabi_dmul>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	4614      	mov	r4, r2
 800e752:	461d      	mov	r5, r3
 800e754:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e758:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e75c:	f7f1 ff3e 	bl	80005dc <__aeabi_dmul>
 800e760:	4602      	mov	r2, r0
 800e762:	460b      	mov	r3, r1
 800e764:	4620      	mov	r0, r4
 800e766:	4629      	mov	r1, r5
 800e768:	f7f1 fd82 	bl	8000270 <__adddf3>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4610      	mov	r0, r2
 800e772:	4619      	mov	r1, r3
 800e774:	f04f 0200 	mov.w	r2, #0
 800e778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e77c:	f7f2 f858 	bl	8000830 <__aeabi_ddiv>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        emm1 *= rt;
 800e788:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e78c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e790:	f7f1 ff24 	bl	80005dc <__aeabi_dmul>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        emm1 *= emm1;
 800e79c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e7a0:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e7a4:	f7f1 ff1a 	bl	80005dc <__aeabi_dmul>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 800e7b0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e7b4:	f04f 0200 	mov.w	r2, #0
 800e7b8:	f04f 0300 	mov.w	r3, #0
 800e7bc:	f7f2 f976 	bl	8000aac <__aeabi_dcmpeq>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <svd_u3DvUgOe+0x1574>
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	f04f 0300 	mov.w	r3, #0
 800e7ce:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e7d2:	f7f2 f96b 	bl	8000aac <__aeabi_dcmpeq>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d13f      	bne.n	800e85c <svd_u3DvUgOe+0x15f4>
          shift = sqrt(smm1 * smm1 + emm1);
 800e7dc:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e7e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e7e4:	f7f1 fefa 	bl	80005dc <__aeabi_dmul>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e7f4:	f7f1 fd3c 	bl	8000270 <__adddf3>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	ec43 2b17 	vmov	d7, r2, r3
 800e800:	eeb0 0a47 	vmov.f32	s0, s14
 800e804:	eef0 0a67 	vmov.f32	s1, s15
 800e808:	f00b fb66 	bl	8019ed8 <sqrt>
 800e80c:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
          if (smm1 < 0.0) {
 800e810:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e814:	f04f 0200 	mov.w	r2, #0
 800e818:	f04f 0300 	mov.w	r3, #0
 800e81c:	f7f2 f950 	bl	8000ac0 <__aeabi_dcmplt>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d009      	beq.n	800e83a <svd_u3DvUgOe+0x15d2>
            shift = -shift;
 800e826:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e82a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800e82e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e832:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e836:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          }

          shift = emm1 / (smm1 + shift);
 800e83a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e83e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e842:	f7f1 fd15 	bl	8000270 <__adddf3>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e84e:	f7f1 ffef 	bl	8000830 <__aeabi_ddiv>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
 800e85a:	e005      	b.n	800e868 <svd_u3DvUgOe+0x1600>
        } else {
          shift = 0.0;
 800e85c:	f04f 0200 	mov.w	r2, #0
 800e860:	f04f 0300 	mov.w	r3, #0
 800e864:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 800e868:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e86c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e870:	f7f1 fcfe 	bl	8000270 <__adddf3>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	461d      	mov	r5, r3
 800e87c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e880:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e884:	f7f1 fcf2 	bl	800026c <__aeabi_dsub>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	4620      	mov	r0, r4
 800e88e:	4629      	mov	r1, r5
 800e890:	f7f1 fea4 	bl	80005dc <__aeabi_dmul>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	4610      	mov	r0, r2
 800e89a:	4619      	mov	r1, r3
 800e89c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e8a0:	f7f1 fce6 	bl	8000270 <__adddf3>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        ztest = e[d] / ztest * sqds;
 800e8ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e8b6:	4413      	add	r3, r2
 800e8b8:	3bb8      	subs	r3, #184	; 0xb8
 800e8ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8be:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e8c2:	f7f1 ffb5 	bl	8000830 <__aeabi_ddiv>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e8d2:	f7f1 fe83 	bl	80005dc <__aeabi_dmul>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800e8de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800e8e8:	e183      	b.n	800ebf2 <svd_u3DvUgOe+0x198a>
          xrotg_XzIjz1eG(&rt, &ztest, &sqds, &smm1);
 800e8ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800e8ee:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800e8f2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800e8f6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800e8fa:	f001 fab3 	bl	800fe64 <xrotg_XzIjz1eG>
          if (qjj > d + 1) {
 800e8fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e908:	4293      	cmp	r3, r2
 800e90a:	dd03      	ble.n	800e914 <svd_u3DvUgOe+0x16ac>
            e[0] = rt;
 800e90c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800e910:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
          }

          rt = e[qjj - 1];
 800e914:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e918:	3b01      	subs	r3, #1
 800e91a:	00db      	lsls	r3, r3, #3
 800e91c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e920:	4413      	add	r3, r2
 800e922:	3bb8      	subs	r3, #184	; 0xb8
 800e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e928:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          emm1 = b_s[qjj - 1];
 800e92c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e930:	3b01      	subs	r3, #1
 800e932:	00db      	lsls	r3, r3, #3
 800e934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e938:	4413      	add	r3, r2
 800e93a:	3ba0      	subs	r3, #160	; 0xa0
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
          e[qjj - 1] = rt * sqds - emm1 * smm1;
 800e944:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800e948:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e94c:	f7f1 fe46 	bl	80005dc <__aeabi_dmul>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	4690      	mov	r8, r2
 800e956:	4699      	mov	r9, r3
 800e958:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800e95c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e960:	f7f1 fe3c 	bl	80005dc <__aeabi_dmul>
 800e964:	4602      	mov	r2, r0
 800e966:	460b      	mov	r3, r1
 800e968:	4610      	mov	r0, r2
 800e96a:	4619      	mov	r1, r3
 800e96c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e970:	1e5c      	subs	r4, r3, #1
 800e972:	4602      	mov	r2, r0
 800e974:	460b      	mov	r3, r1
 800e976:	4640      	mov	r0, r8
 800e978:	4649      	mov	r1, r9
 800e97a:	f7f1 fc77 	bl	800026c <__aeabi_dsub>
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	4610      	mov	r0, r2
 800e984:	4619      	mov	r1, r3
 800e986:	00e3      	lsls	r3, r4, #3
 800e988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e98c:	4413      	add	r3, r2
 800e98e:	3bb8      	subs	r3, #184	; 0xb8
 800e990:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 800e994:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e998:	00db      	lsls	r3, r3, #3
 800e99a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e99e:	4413      	add	r3, r2
 800e9a0:	3ba0      	subs	r3, #160	; 0xa0
 800e9a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e9aa:	f7f1 fe17 	bl	80005dc <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          b_s[qjj] *= sqds;
 800e9b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e9c0:	4413      	add	r3, r2
 800e9c2:	3ba0      	subs	r3, #160	; 0xa0
 800e9c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e9cc:	f7f1 fe06 	bl	80005dc <__aeabi_dmul>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4610      	mov	r0, r2
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9dc:	00db      	lsls	r3, r3, #3
 800e9de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800e9e2:	4413      	add	r3, r2
 800e9e4:	3ba0      	subs	r3, #160	; 0xa0
 800e9e6:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800e9ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800e9ee:	1e5a      	subs	r2, r3, #1
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	005b      	lsls	r3, r3, #1
 800e9f4:	4413      	add	r3, r2
 800e9f6:	1c59      	adds	r1, r3, #1
 800e9f8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	005b      	lsls	r3, r3, #1
 800ea00:	4413      	add	r3, r2
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800ea08:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800ea0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ea10:	eeb0 1a46 	vmov.f32	s2, s12
 800ea14:	eef0 1a66 	vmov.f32	s3, s13
 800ea18:	eeb0 0a47 	vmov.f32	s0, s14
 800ea1c:	eef0 0a67 	vmov.f32	s1, s15
 800ea20:	6818      	ldr	r0, [r3, #0]
 800ea22:	f001 f903 	bl	800fc2c <xrot_i7f01JoJ>
          b_s[qjj - 1] = emm1 * sqds + rt * smm1;
 800ea26:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800ea2a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800ea2e:	f7f1 fdd5 	bl	80005dc <__aeabi_dmul>
 800ea32:	4602      	mov	r2, r0
 800ea34:	460b      	mov	r3, r1
 800ea36:	4690      	mov	r8, r2
 800ea38:	4699      	mov	r9, r3
 800ea3a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ea3e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ea42:	f7f1 fdcb 	bl	80005dc <__aeabi_dmul>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea52:	1e5c      	subs	r4, r3, #1
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4640      	mov	r0, r8
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	f7f1 fc08 	bl	8000270 <__adddf3>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4610      	mov	r0, r2
 800ea66:	4619      	mov	r1, r3
 800ea68:	00e3      	lsls	r3, r4, #3
 800ea6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ea6e:	4413      	add	r3, r2
 800ea70:	3ba0      	subs	r3, #160	; 0xa0
 800ea72:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_XzIjz1eG(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 800ea76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800ea80:	00db      	lsls	r3, r3, #3
 800ea82:	18d0      	adds	r0, r2, r3
 800ea84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ea88:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800ea8c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800ea90:	f001 f9e8 	bl	800fe64 <xrotg_XzIjz1eG>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 800ea94:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eaa0:	4413      	add	r3, r2
 800eaa2:	3bb8      	subs	r3, #184	; 0xb8
 800eaa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eaa8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eaac:	f7f1 fd96 	bl	80005dc <__aeabi_dmul>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4614      	mov	r4, r2
 800eab6:	461d      	mov	r5, r3
 800eab8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eac2:	4413      	add	r3, r2
 800eac4:	3ba0      	subs	r3, #160	; 0xa0
 800eac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eaca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eace:	f7f1 fd85 	bl	80005dc <__aeabi_dmul>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f1 fbc9 	bl	8000270 <__adddf3>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 800eae6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eaea:	3b01      	subs	r3, #1
 800eaec:	00db      	lsls	r3, r3, #3
 800eaee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eaf2:	4413      	add	r3, r2
 800eaf4:	3bb8      	subs	r3, #184	; 0xb8
 800eaf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eafa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eafe:	60ba      	str	r2, [r7, #8]
 800eb00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800eb04:	60fb      	str	r3, [r7, #12]
 800eb06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eb0a:	f7f1 fd67 	bl	80005dc <__aeabi_dmul>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4614      	mov	r4, r2
 800eb14:	461d      	mov	r5, r3
 800eb16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb20:	4413      	add	r3, r2
 800eb22:	3ba0      	subs	r3, #160	; 0xa0
 800eb24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb28:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eb2c:	f7f1 fd56 	bl	80005dc <__aeabi_dmul>
 800eb30:	4602      	mov	r2, r0
 800eb32:	460b      	mov	r3, r1
 800eb34:	4620      	mov	r0, r4
 800eb36:	4629      	mov	r1, r5
 800eb38:	f7f1 fb9a 	bl	8000270 <__adddf3>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	4610      	mov	r0, r2
 800eb42:	4619      	mov	r1, r3
 800eb44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb48:	00db      	lsls	r3, r3, #3
 800eb4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb4e:	4413      	add	r3, r2
 800eb50:	3ba0      	subs	r3, #160	; 0xa0
 800eb52:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 800eb56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb60:	4413      	add	r3, r2
 800eb62:	3bb8      	subs	r3, #184	; 0xb8
 800eb64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb68:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eb6c:	f7f1 fd36 	bl	80005dc <__aeabi_dmul>
 800eb70:	4602      	mov	r2, r0
 800eb72:	460b      	mov	r3, r1
 800eb74:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          e[qjj] *= sqds;
 800eb78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb7c:	00db      	lsls	r3, r3, #3
 800eb7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eb82:	4413      	add	r3, r2
 800eb84:	3bb8      	subs	r3, #184	; 0xb8
 800eb86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb8a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eb8e:	f7f1 fd25 	bl	80005dc <__aeabi_dmul>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	4610      	mov	r0, r2
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800eb9e:	00db      	lsls	r3, r3, #3
 800eba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800eba4:	4413      	add	r3, r2
 800eba6:	3bb8      	subs	r3, #184	; 0xb8
 800eba8:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_i7f01JoJ(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800ebac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ebb0:	1e5a      	subs	r2, r3, #1
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	1c59      	adds	r1, r3, #1
 800ebba:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	4413      	add	r3, r2
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800ebca:	ed97 6b48 	vldr	d6, [r7, #288]	; 0x120
 800ebce:	eeb0 1a46 	vmov.f32	s2, s12
 800ebd2:	eef0 1a66 	vmov.f32	s3, s13
 800ebd6:	eeb0 0a47 	vmov.f32	s0, s14
 800ebda:	eef0 0a67 	vmov.f32	s1, s15
 800ebde:	461a      	mov	r2, r3
 800ebe0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800ebe4:	f001 f822 	bl	800fc2c <xrot_i7f01JoJ>
        for (qjj = d + 1; qjj <= m + 1; qjj++) {
 800ebe8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ebec:	3301      	adds	r3, #1
 800ebee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ebf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	f77f ae74 	ble.w	800e8ea <svd_u3DvUgOe+0x1682>
        }

        e[m] = rt;
 800ec02:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ec06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ec0a:	00db      	lsls	r3, r3, #3
 800ec0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec10:	4413      	add	r3, r2
 800ec12:	3bb8      	subs	r3, #184	; 0xb8
 800ec14:	e9c3 0100 	strd	r0, r1, [r3]
        qq++;
 800ec18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      }
      break;
 800ec22:	e0b7      	b.n	800ed94 <svd_u3DvUgOe+0x1b2c>

     default:
      if (b_s[d] < 0.0) {
 800ec24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ec28:	00db      	lsls	r3, r3, #3
 800ec2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec2e:	4413      	add	r3, r2
 800ec30:	3ba0      	subs	r3, #160	; 0xa0
 800ec32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec36:	f04f 0200 	mov.w	r2, #0
 800ec3a:	f04f 0300 	mov.w	r3, #0
 800ec3e:	f7f1 ff3f 	bl	8000ac0 <__aeabi_dcmplt>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d025      	beq.n	800ec94 <svd_u3DvUgOe+0x1a2c>
        b_s[d] = -b_s[d];
 800ec48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec52:	4413      	add	r3, r2
 800ec54:	3ba0      	subs	r3, #160	; 0xa0
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	603a      	str	r2, [r7, #0]
 800ec5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ec60:	607b      	str	r3, [r7, #4]
 800ec62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ec6c:	4413      	add	r3, r2
 800ec6e:	3ba0      	subs	r3, #160	; 0xa0
 800ec70:	ed97 7b00 	vldr	d7, [r7]
 800ec74:	ed83 7b00 	vstr	d7, [r3]
        xscal_eaAxXsvQ(-1.0, V, 3 * d + 1);
 800ec78:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	4413      	add	r3, r2
 800ec82:	1c5a      	adds	r2, r3, #1
 800ec84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ec88:	4611      	mov	r1, r2
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	ed9f 0b56 	vldr	d0, [pc, #344]	; 800ede8 <svd_u3DvUgOe+0x1b80>
 800ec90:	f001 fa4e 	bl	8010130 <xscal_eaAxXsvQ>
      }

      qq = d + 1;
 800ec94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ec98:	3301      	adds	r3, #1
 800ec9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800ec9e:	e055      	b.n	800ed4c <svd_u3DvUgOe+0x1ae4>
        rt = b_s[d];
 800eca0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ecaa:	4413      	add	r3, r2
 800ecac:	3ba0      	subs	r3, #160	; 0xa0
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        b_s[d] = b_s[qq];
 800ecb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ecba:	00db      	lsls	r3, r3, #3
 800ecbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ecc0:	4413      	add	r3, r2
 800ecc2:	3ba0      	subs	r3, #160	; 0xa0
 800ecc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ecd2:	4413      	add	r3, r2
 800ecd4:	3ba0      	subs	r3, #160	; 0xa0
 800ecd6:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qq] = rt;
 800ecda:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ecde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ece2:	00db      	lsls	r3, r3, #3
 800ece4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ece8:	4413      	add	r3, r2
 800ecea:	3ba0      	subs	r3, #160	; 0xa0
 800ecec:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_JoAqPjUv(V, 3 * d + 1, 3 * (d + 1) + 1);
 800ecf0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	1c59      	adds	r1, r3, #1
 800ecfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed00:	1c5a      	adds	r2, r3, #1
 800ed02:	4613      	mov	r3, r2
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	4413      	add	r3, r2
 800ed08:	3301      	adds	r3, #1
 800ed0a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800ed0e:	461a      	mov	r2, r3
 800ed10:	6800      	ldr	r0, [r0, #0]
 800ed12:	f001 fa3c 	bl	801018e <xswap_JoAqPjUv>
        xswap_JoAqPjUv(U, 3 * d + 1, 3 * (d + 1) + 1);
 800ed16:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4413      	add	r3, r2
 800ed20:	1c59      	adds	r1, r3, #1
 800ed22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	4613      	mov	r3, r2
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	4413      	add	r3, r2
 800ed2e:	3301      	adds	r3, #1
 800ed30:	461a      	mov	r2, r3
 800ed32:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800ed36:	f001 fa2a 	bl	801018e <xswap_JoAqPjUv>
        d = qq;
 800ed3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ed3e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
        qq++;
 800ed42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ed46:	3301      	adds	r3, #1
 800ed48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      while ((d + 1 < 3) && (b_s[d] < b_s[qq])) {
 800ed4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	dc16      	bgt.n	800ed82 <svd_u3DvUgOe+0x1b1a>
 800ed54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ed58:	00db      	lsls	r3, r3, #3
 800ed5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed5e:	4413      	add	r3, r2
 800ed60:	3ba0      	subs	r3, #160	; 0xa0
 800ed62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ed6a:	00db      	lsls	r3, r3, #3
 800ed6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ed70:	4413      	add	r3, r2
 800ed72:	3ba0      	subs	r3, #160	; 0xa0
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	f7f1 fea2 	bl	8000ac0 <__aeabi_dcmplt>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d18e      	bne.n	800eca0 <svd_u3DvUgOe+0x1a38>
      }

      qq = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
      m--;
 800ed88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
      break;
 800ed92:	bf00      	nop
  while ((m + 2 > 0) && (qq < 75)) {
 800ed94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800ed98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9c:	db04      	blt.n	800eda8 <svd_u3DvUgOe+0x1b40>
 800ed9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800eda2:	2b4a      	cmp	r3, #74	; 0x4a
 800eda4:	f77f a972 	ble.w	800e08c <svd_u3DvUgOe+0xe24>
    }
  }

  s[0] = b_s[0];
 800eda8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800edac:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800edb0:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 800edb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edb8:	f103 0108 	add.w	r1, r3, #8
 800edbc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800edc0:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 800edc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edc8:	f103 0110 	add.w	r1, r3, #16
 800edcc:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800edd0:	e9c1 2300 	strd	r2, r3, [r1]
}
 800edd4:	bf00      	nop
 800edd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800edda:	46bd      	mov	sp, r7
 800eddc:	ecbd 8b02 	vpop	{d8}
 800ede0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ede4:	f3af 8000 	nop.w
 800ede8:	00000000 	.word	0x00000000
 800edec:	bff00000 	.word	0xbff00000

0800edf0 <trisolve_BC1XmAGq>:
#include "rtwtypes.h"
#include "trisolve_BC1XmAGq.h"

void trisolve_BC1XmAGq(real_T A, real_T B[3])
{
 800edf0:	b590      	push	{r4, r7, lr}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	ed87 0b02 	vstr	d0, [r7, #8]
 800edfa:	6078      	str	r0, [r7, #4]
  if (B[0] != 0.0) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee02:	f04f 0200 	mov.w	r2, #0
 800ee06:	f04f 0300 	mov.w	r3, #0
 800ee0a:	f7f1 fe4f 	bl	8000aac <__aeabi_dcmpeq>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d10b      	bne.n	800ee2c <trisolve_BC1XmAGq+0x3c>
    B[0] /= A;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee1e:	f7f1 fd07 	bl	8000830 <__aeabi_ddiv>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	6879      	ldr	r1, [r7, #4]
 800ee28:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B[1] != 0.0) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3308      	adds	r3, #8
 800ee30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee34:	f04f 0200 	mov.w	r2, #0
 800ee38:	f04f 0300 	mov.w	r3, #0
 800ee3c:	f7f1 fe36 	bl	8000aac <__aeabi_dcmpeq>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10e      	bne.n	800ee64 <trisolve_BC1XmAGq+0x74>
    B[1] /= A;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3308      	adds	r3, #8
 800ee4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f103 0408 	add.w	r4, r3, #8
 800ee54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee58:	f7f1 fcea 	bl	8000830 <__aeabi_ddiv>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	460b      	mov	r3, r1
 800ee60:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B[2] != 0.0) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3310      	adds	r3, #16
 800ee68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee6c:	f04f 0200 	mov.w	r2, #0
 800ee70:	f04f 0300 	mov.w	r3, #0
 800ee74:	f7f1 fe1a 	bl	8000aac <__aeabi_dcmpeq>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d000      	beq.n	800ee80 <trisolve_BC1XmAGq+0x90>
    B[2] /= A;
  }
}
 800ee7e:	e00e      	b.n	800ee9e <trisolve_BC1XmAGq+0xae>
    B[2] /= A;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	3310      	adds	r3, #16
 800ee84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f103 0410 	add.w	r4, r3, #16
 800ee8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee92:	f7f1 fccd 	bl	8000830 <__aeabi_ddiv>
 800ee96:	4602      	mov	r2, r0
 800ee98:	460b      	mov	r3, r1
 800ee9a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ee9e:	bf00      	nop
 800eea0:	3714      	adds	r7, #20
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd90      	pop	{r4, r7, pc}

0800eea6 <xaxpy_OQ28XA21>:
#include "rtwtypes.h"
#include "xaxpy_OQ28XA21.h"

void xaxpy_OQ28XA21(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800eea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eea8:	b08b      	sub	sp, #44	; 0x2c
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6178      	str	r0, [r7, #20]
 800eeae:	ed87 0b02 	vstr	d0, [r7, #8]
 800eeb2:	6139      	str	r1, [r7, #16]
 800eeb4:	607a      	str	r2, [r7, #4]
 800eeb6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	dd43      	ble.n	800ef46 <xaxpy_OQ28XA21+0xa0>
 800eebe:	f04f 0200 	mov.w	r2, #0
 800eec2:	f04f 0300 	mov.w	r3, #0
 800eec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eeca:	f7f1 fdef 	bl	8000aac <__aeabi_dcmpeq>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d000      	beq.n	800eed6 <xaxpy_OQ28XA21+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800eed4:	e037      	b.n	800ef46 <xaxpy_OQ28XA21+0xa0>
    ix = ix0 - 1;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800eedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eede:	3b01      	subs	r3, #1
 800eee0:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800eee2:	2300      	movs	r3, #0
 800eee4:	627b      	str	r3, [r7, #36]	; 0x24
 800eee6:	e02a      	b.n	800ef3e <xaxpy_OQ28XA21+0x98>
      y[iy] += a * x[ix];
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	00db      	lsls	r3, r3, #3
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	4413      	add	r3, r2
 800eef0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eef4:	6a3b      	ldr	r3, [r7, #32]
 800eef6:	00db      	lsls	r3, r3, #3
 800eef8:	693a      	ldr	r2, [r7, #16]
 800eefa:	4413      	add	r3, r2
 800eefc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef04:	f7f1 fb6a 	bl	80005dc <__aeabi_dmul>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	4619      	mov	r1, r3
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	18d6      	adds	r6, r2, r3
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f7f1 f9a6 	bl	8000270 <__adddf3>
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800ef2c:	6a3b      	ldr	r3, [r7, #32]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	623b      	str	r3, [r7, #32]
      iy++;
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	3301      	adds	r3, #1
 800ef36:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ef38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	dbd0      	blt.n	800eee8 <xaxpy_OQ28XA21+0x42>
}
 800ef46:	bf00      	nop
 800ef48:	372c      	adds	r7, #44	; 0x2c
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef4e <xaxpy_Wxch84Fl>:
#include "rtwtypes.h"
#include "xaxpy_Wxch84Fl.h"

void xaxpy_Wxch84Fl(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800ef4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef50:	b08b      	sub	sp, #44	; 0x2c
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6178      	str	r0, [r7, #20]
 800ef56:	ed87 0b02 	vstr	d0, [r7, #8]
 800ef5a:	6139      	str	r1, [r7, #16]
 800ef5c:	607a      	str	r2, [r7, #4]
 800ef5e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	dd43      	ble.n	800efee <xaxpy_Wxch84Fl+0xa0>
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	f04f 0300 	mov.w	r3, #0
 800ef6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef72:	f7f1 fd9b 	bl	8000aac <__aeabi_dcmpeq>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d000      	beq.n	800ef7e <xaxpy_Wxch84Fl+0x30>
      y[iy] += a * x[ix];
      ix++;
      iy++;
    }
  }
}
 800ef7c:	e037      	b.n	800efee <xaxpy_Wxch84Fl+0xa0>
    ix = ix0 - 1;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	3b01      	subs	r3, #1
 800ef82:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800ef84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef86:	3b01      	subs	r3, #1
 800ef88:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ef8e:	e02a      	b.n	800efe6 <xaxpy_Wxch84Fl+0x98>
      y[iy] += a * x[ix];
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	00db      	lsls	r3, r3, #3
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	4413      	add	r3, r2
 800ef98:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	00db      	lsls	r3, r3, #3
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	4413      	add	r3, r2
 800efa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800efac:	f7f1 fb16 	bl	80005dc <__aeabi_dmul>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4610      	mov	r0, r2
 800efb6:	4619      	mov	r1, r3
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	00db      	lsls	r3, r3, #3
 800efbc:	683a      	ldr	r2, [r7, #0]
 800efbe:	18d6      	adds	r6, r2, r3
 800efc0:	4602      	mov	r2, r0
 800efc2:	460b      	mov	r3, r1
 800efc4:	4620      	mov	r0, r4
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7f1 f952 	bl	8000270 <__adddf3>
 800efcc:	4602      	mov	r2, r0
 800efce:	460b      	mov	r3, r1
 800efd0:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800efd4:	6a3b      	ldr	r3, [r7, #32]
 800efd6:	3301      	adds	r3, #1
 800efd8:	623b      	str	r3, [r7, #32]
      iy++;
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	3301      	adds	r3, #1
 800efde:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	3301      	adds	r3, #1
 800efe4:	627b      	str	r3, [r7, #36]	; 0x24
 800efe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	429a      	cmp	r2, r3
 800efec:	dbd0      	blt.n	800ef90 <xaxpy_Wxch84Fl+0x42>
}
 800efee:	bf00      	nop
 800eff0:	372c      	adds	r7, #44	; 0x2c
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eff6 <xaxpy_guu0hJif>:
#include "rtwtypes.h"
#include "xaxpy_guu0hJif.h"

void xaxpy_guu0hJif(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 800eff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff8:	b08b      	sub	sp, #44	; 0x2c
 800effa:	af00      	add	r7, sp, #0
 800effc:	6178      	str	r0, [r7, #20]
 800effe:	ed87 0b02 	vstr	d0, [r7, #8]
 800f002:	6139      	str	r1, [r7, #16]
 800f004:	607a      	str	r2, [r7, #4]
 800f006:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dd43      	ble.n	800f096 <xaxpy_guu0hJif+0xa0>
 800f00e:	f04f 0200 	mov.w	r2, #0
 800f012:	f04f 0300 	mov.w	r3, #0
 800f016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f01a:	f7f1 fd47 	bl	8000aac <__aeabi_dcmpeq>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d000      	beq.n	800f026 <xaxpy_guu0hJif+0x30>
      y[iy] += a * y[ix];
      ix++;
      iy++;
    }
  }
}
 800f024:	e037      	b.n	800f096 <xaxpy_guu0hJif+0xa0>
    ix = ix0 - 1;
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	3b01      	subs	r3, #1
 800f02a:	623b      	str	r3, [r7, #32]
    iy = iy0 - 1;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	3b01      	subs	r3, #1
 800f030:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f032:	2300      	movs	r3, #0
 800f034:	627b      	str	r3, [r7, #36]	; 0x24
 800f036:	e02a      	b.n	800f08e <xaxpy_guu0hJif+0x98>
      y[iy] += a * y[ix];
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	4413      	add	r3, r2
 800f040:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	4413      	add	r3, r2
 800f04c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f054:	f7f1 fac2 	bl	80005dc <__aeabi_dmul>
 800f058:	4602      	mov	r2, r0
 800f05a:	460b      	mov	r3, r1
 800f05c:	4610      	mov	r0, r2
 800f05e:	4619      	mov	r1, r3
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	18d6      	adds	r6, r2, r3
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 f8fe 	bl	8000270 <__adddf3>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	e9c6 2300 	strd	r2, r3, [r6]
      ix++;
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	3301      	adds	r3, #1
 800f080:	623b      	str	r3, [r7, #32]
      iy++;
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	3301      	adds	r3, #1
 800f086:	61fb      	str	r3, [r7, #28]
    for (k = 0; k < n; k++) {
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	3301      	adds	r3, #1
 800f08c:	627b      	str	r3, [r7, #36]	; 0x24
 800f08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	429a      	cmp	r2, r3
 800f094:	dbd0      	blt.n	800f038 <xaxpy_guu0hJif+0x42>
}
 800f096:	bf00      	nop
 800f098:	372c      	adds	r7, #44	; 0x2c
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f09e <xdotc_mznw4aLl>:
#include "rtwtypes.h"
#include "xdotc_mznw4aLl.h"

real_T xdotc_mznw4aLl(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b08a      	sub	sp, #40	; 0x28
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	60f8      	str	r0, [r7, #12]
 800f0a6:	60b9      	str	r1, [r7, #8]
 800f0a8:	607a      	str	r2, [r7, #4]
 800f0aa:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 800f0ac:	f04f 0200 	mov.w	r2, #0
 800f0b0:	f04f 0300 	mov.w	r3, #0
 800f0b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (n >= 1) {
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	dd31      	ble.n	800f122 <xdotc_mznw4aLl+0x84>
    int32_T ix;
    int32_T iy;
    ix = ix0;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	61bb      	str	r3, [r7, #24]
    iy = iy0;
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	61fb      	str	r3, [r7, #28]
 800f0ca:	e026      	b.n	800f11a <xdotc_mznw4aLl+0x7c>
      d += x[ix - 1] * y[iy - 1];
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	00db      	lsls	r3, r3, #3
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	4413      	add	r3, r2
 800f0da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	f7f1 fa74 	bl	80005dc <__aeabi_dmul>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f0fc:	f7f1 f8b8 	bl	8000270 <__adddf3>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	e9c7 2308 	strd	r2, r3, [r7, #32]
      ix++;
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	3301      	adds	r3, #1
 800f10c:	61bb      	str	r3, [r7, #24]
      iy++;
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	3301      	adds	r3, #1
 800f112:	617b      	str	r3, [r7, #20]
    for (k = 0; k < n; k++) {
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	3301      	adds	r3, #1
 800f118:	61fb      	str	r3, [r7, #28]
 800f11a:	69fa      	ldr	r2, [r7, #28]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	429a      	cmp	r2, r3
 800f120:	dbd4      	blt.n	800f0cc <xdotc_mznw4aLl+0x2e>
    }
  }

  return d;
 800f122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f126:	ec43 2b17 	vmov	d7, r2, r3
}
 800f12a:	eeb0 0a47 	vmov.f32	s0, s14
 800f12e:	eef0 0a67 	vmov.f32	s1, s15
 800f132:	3728      	adds	r7, #40	; 0x28
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <xgemv_NQlWbt2i>:
#include "rtwtypes.h"
#include "xgemv_NQlWbt2i.h"

void xgemv_NQlWbt2i(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800f138:	b590      	push	{r4, r7, lr}
 800f13a:	b08f      	sub	sp, #60	; 0x3c
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d079      	beq.n	800f240 <xgemv_NQlWbt2i+0x108>
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d076      	beq.n	800f240 <xgemv_NQlWbt2i+0x108>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f152:	2300      	movs	r3, #0
 800f154:	637b      	str	r3, [r7, #52]	; 0x34
 800f156:	e00c      	b.n	800f172 <xgemv_NQlWbt2i+0x3a>
      y[b_iy] = 0.0;
 800f158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15a:	00db      	lsls	r3, r3, #3
 800f15c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f15e:	18d1      	adds	r1, r2, r3
 800f160:	f04f 0200 	mov.w	r2, #0
 800f164:	f04f 0300 	mov.w	r3, #0
 800f168:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16e:	3301      	adds	r3, #1
 800f170:	637b      	str	r3, [r7, #52]	; 0x34
 800f172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	429a      	cmp	r2, r3
 800f178:	dbee      	blt.n	800f158 <xgemv_NQlWbt2i+0x20>
    }

    b_iy = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 6 + ia0;
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	1e5a      	subs	r2, r3, #1
 800f182:	4613      	mov	r3, r2
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	4413      	add	r3, r2
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	461a      	mov	r2, r3
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	4413      	add	r3, r2
 800f190:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 6) {
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f196:	e04f      	b.n	800f238 <xgemv_NQlWbt2i+0x100>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800f198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f19a:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800f19c:	f04f 0200 	mov.w	r2, #0
 800f1a0:	f04f 0300 	mov.w	r3, #0
 800f1a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800f1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b4:	633b      	str	r3, [r7, #48]	; 0x30
 800f1b6:	e023      	b.n	800f200 <xgemv_NQlWbt2i+0xc8>
        c += A[ia - 1] * x[ix - 1];
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	00db      	lsls	r3, r3, #3
 800f1d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1d6:	4413      	add	r3, r2
 800f1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1dc:	f7f1 f9fe 	bl	80005dc <__aeabi_dmul>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f1e8:	f7f1 f842 	bl	8000270 <__adddf3>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800f200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	429a      	cmp	r2, r3
 800f206:	ddd7      	ble.n	800f1b8 <xgemv_NQlWbt2i+0x80>
      }

      y[b_iy] += c;
 800f208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f20a:	00db      	lsls	r3, r3, #3
 800f20c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f20e:	4413      	add	r3, r2
 800f210:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f21a:	18d4      	adds	r4, r2, r3
 800f21c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f220:	f7f1 f826 	bl	8000270 <__adddf3>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800f22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22e:	3301      	adds	r3, #1
 800f230:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 6) {
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	3306      	adds	r3, #6
 800f236:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	ddab      	ble.n	800f198 <xgemv_NQlWbt2i+0x60>
    }
  }
}
 800f240:	bf00      	nop
 800f242:	373c      	adds	r7, #60	; 0x3c
 800f244:	46bd      	mov	sp, r7
 800f246:	bd90      	pop	{r4, r7, pc}

0800f248 <xgemv_fRiR1I1O>:
#include "rtwtypes.h"
#include "xgemv_fRiR1I1O.h"

void xgemv_fRiR1I1O(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 800f248:	b590      	push	{r4, r7, lr}
 800f24a:	b08f      	sub	sp, #60	; 0x3c
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
 800f254:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d077      	beq.n	800f34c <xgemv_fRiR1I1O+0x104>
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d074      	beq.n	800f34c <xgemv_fRiR1I1O+0x104>
    int32_T b;
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f262:	2300      	movs	r3, #0
 800f264:	637b      	str	r3, [r7, #52]	; 0x34
 800f266:	e00c      	b.n	800f282 <xgemv_fRiR1I1O+0x3a>
      y[b_iy] = 0.0;
 800f268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26a:	00db      	lsls	r3, r3, #3
 800f26c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f26e:	18d1      	adds	r1, r2, r3
 800f270:	f04f 0200 	mov.w	r2, #0
 800f274:	f04f 0300 	mov.w	r3, #0
 800f278:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_iy = 0; b_iy < n; b_iy++) {
 800f27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f27e:	3301      	adds	r3, #1
 800f280:	637b      	str	r3, [r7, #52]	; 0x34
 800f282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	429a      	cmp	r2, r3
 800f288:	dbee      	blt.n	800f268 <xgemv_fRiR1I1O+0x20>
    }

    b_iy = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	637b      	str	r3, [r7, #52]	; 0x34
    b = (n - 1) * 3 + ia0;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	1e5a      	subs	r2, r3, #1
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	683a      	ldr	r2, [r7, #0]
 800f29a:	4413      	add	r3, r2
 800f29c:	61bb      	str	r3, [r7, #24]
    for (iac = ia0; iac <= b; iac += 3) {
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2a2:	e04f      	b.n	800f344 <xgemv_fRiR1I1O+0xfc>
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
 800f2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2a6:	61fb      	str	r3, [r7, #28]
      c = 0.0;
 800f2a8:	f04f 0200 	mov.w	r2, #0
 800f2ac:	f04f 0300 	mov.w	r3, #0
 800f2b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      d = (iac + m) - 1;
 800f2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	617b      	str	r3, [r7, #20]
      for (ia = iac; ia <= d; ia++) {
 800f2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c0:	633b      	str	r3, [r7, #48]	; 0x30
 800f2c2:	e023      	b.n	800f30c <xgemv_fRiR1I1O+0xc4>
        c += A[ia - 1] * x[ix - 1];
 800f2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	00db      	lsls	r3, r3, #3
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	00db      	lsls	r3, r3, #3
 800f2e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2e2:	4413      	add	r3, r2
 800f2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e8:	f7f1 f978 	bl	80005dc <__aeabi_dmul>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f2f4:	f7f0 ffbc 	bl	8000270 <__adddf3>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix++;
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	3301      	adds	r3, #1
 800f304:	61fb      	str	r3, [r7, #28]
      for (ia = iac; ia <= d; ia++) {
 800f306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f308:	3301      	adds	r3, #1
 800f30a:	633b      	str	r3, [r7, #48]	; 0x30
 800f30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	429a      	cmp	r2, r3
 800f312:	ddd7      	ble.n	800f2c4 <xgemv_fRiR1I1O+0x7c>
      }

      y[b_iy] += c;
 800f314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f31a:	4413      	add	r3, r2
 800f31c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f326:	18d4      	adds	r4, r2, r3
 800f328:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f32c:	f7f0 ffa0 	bl	8000270 <__adddf3>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	e9c4 2300 	strd	r2, r3, [r4]
      b_iy++;
 800f338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33a:	3301      	adds	r3, #1
 800f33c:	637b      	str	r3, [r7, #52]	; 0x34
    for (iac = ia0; iac <= b; iac += 3) {
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	3303      	adds	r3, #3
 800f342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	429a      	cmp	r2, r3
 800f34a:	ddab      	ble.n	800f2a4 <xgemv_fRiR1I1O+0x5c>
    }
  }
}
 800f34c:	bf00      	nop
 800f34e:	373c      	adds	r7, #60	; 0x3c
 800f350:	46bd      	mov	sp, r7
 800f352:	bd90      	pop	{r4, r7, pc}

0800f354 <xgerc_R09LiDgJ>:
#include "rtwtypes.h"
#include "xgerc_R09LiDgJ.h"

void xgerc_R09LiDgJ(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 800f354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f356:	b091      	sub	sp, #68	; 0x44
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6178      	str	r0, [r7, #20]
 800f35c:	6139      	str	r1, [r7, #16]
 800f35e:	ed87 0b02 	vstr	d0, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800f366:	f04f 0200 	mov.w	r2, #0
 800f36a:	f04f 0300 	mov.w	r3, #0
 800f36e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f372:	f7f1 fb9b 	bl	8000aac <__aeabi_dcmpeq>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d000      	beq.n	800f37e <xgerc_R09LiDgJ+0x2a>

      jy++;
      jA += 6;
    }
  }
}
 800f37c:	e069      	b.n	800f452 <xgerc_R09LiDgJ+0xfe>
    jA = ia0 - 1;
 800f37e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f380:	3b01      	subs	r3, #1
 800f382:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800f388:	2300      	movs	r3, #0
 800f38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f38c:	e05d      	b.n	800f44a <xgerc_R09LiDgJ+0xf6>
      if (y[jy] != 0.0) {
 800f38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f390:	00db      	lsls	r3, r3, #3
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	4413      	add	r3, r2
 800f396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f39a:	f04f 0200 	mov.w	r2, #0
 800f39e:	f04f 0300 	mov.w	r3, #0
 800f3a2:	f7f1 fb83 	bl	8000aac <__aeabi_dcmpeq>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d145      	bne.n	800f438 <xgerc_R09LiDgJ+0xe4>
        temp = y[jy] * alpha1;
 800f3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f3bc:	f7f1 f90e 	bl	80005dc <__aeabi_dmul>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d4:	4413      	add	r3, r2
 800f3d6:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800f3d8:	e02a      	b.n	800f430 <xgerc_R09LiDgJ+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3e0:	4413      	add	r3, r2
 800f3e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3f2:	4413      	add	r3, r2
 800f3f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f3fc:	f7f1 f8ee 	bl	80005dc <__aeabi_dmul>
 800f400:	4602      	mov	r2, r0
 800f402:	460b      	mov	r3, r1
 800f404:	4610      	mov	r0, r2
 800f406:	4619      	mov	r1, r3
 800f408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40a:	00db      	lsls	r3, r3, #3
 800f40c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f40e:	18d6      	adds	r6, r2, r3
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	4620      	mov	r0, r4
 800f416:	4629      	mov	r1, r5
 800f418:	f7f0 ff2a 	bl	8000270 <__adddf3>
 800f41c:	4602      	mov	r2, r0
 800f41e:	460b      	mov	r3, r1
 800f420:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	3301      	adds	r3, #1
 800f428:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800f42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42c:	3301      	adds	r3, #1
 800f42e:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800f430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	429a      	cmp	r2, r3
 800f436:	dbd0      	blt.n	800f3da <xgerc_R09LiDgJ+0x86>
      jy++;
 800f438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43a:	3301      	adds	r3, #1
 800f43c:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 6;
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	3306      	adds	r3, #6
 800f442:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	3301      	adds	r3, #1
 800f448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f44a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	429a      	cmp	r2, r3
 800f450:	db9d      	blt.n	800f38e <xgerc_R09LiDgJ+0x3a>
}
 800f452:	bf00      	nop
 800f454:	3744      	adds	r7, #68	; 0x44
 800f456:	46bd      	mov	sp, r7
 800f458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f45a <xgerc_tNNiazQU>:
#include "rtwtypes.h"
#include "xgerc_tNNiazQU.h"

void xgerc_tNNiazQU(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 800f45a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45c:	b091      	sub	sp, #68	; 0x44
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6178      	str	r0, [r7, #20]
 800f462:	6139      	str	r1, [r7, #16]
 800f464:	ed87 0b02 	vstr	d0, [r7, #8]
 800f468:	607a      	str	r2, [r7, #4]
 800f46a:	603b      	str	r3, [r7, #0]
  int32_T j;
  if (!(alpha1 == 0.0)) {
 800f46c:	f04f 0200 	mov.w	r2, #0
 800f470:	f04f 0300 	mov.w	r3, #0
 800f474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f478:	f7f1 fb18 	bl	8000aac <__aeabi_dcmpeq>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d000      	beq.n	800f484 <xgerc_tNNiazQU+0x2a>

      jy++;
      jA += 3;
    }
  }
}
 800f482:	e069      	b.n	800f558 <xgerc_tNNiazQU+0xfe>
    jA = ia0 - 1;
 800f484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f486:	3b01      	subs	r3, #1
 800f488:	63bb      	str	r3, [r7, #56]	; 0x38
    jy = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = 0; j < n; j++) {
 800f48e:	2300      	movs	r3, #0
 800f490:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f492:	e05d      	b.n	800f550 <xgerc_tNNiazQU+0xf6>
      if (y[jy] != 0.0) {
 800f494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f496:	00db      	lsls	r3, r3, #3
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	4413      	add	r3, r2
 800f49c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4a0:	f04f 0200 	mov.w	r2, #0
 800f4a4:	f04f 0300 	mov.w	r3, #0
 800f4a8:	f7f1 fb00 	bl	8000aac <__aeabi_dcmpeq>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d145      	bne.n	800f53e <xgerc_tNNiazQU+0xe4>
        temp = y[jy] * alpha1;
 800f4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b4:	00db      	lsls	r3, r3, #3
 800f4b6:	683a      	ldr	r2, [r7, #0]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f4c2:	f7f1 f88b 	bl	80005dc <__aeabi_dmul>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
        ix = ix0;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ijA = jA;
 800f4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d4:	633b      	str	r3, [r7, #48]	; 0x30
        b = m + jA;
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	4413      	add	r3, r2
 800f4dc:	61fb      	str	r3, [r7, #28]
        while (ijA + 1 <= b) {
 800f4de:	e02a      	b.n	800f536 <xgerc_tNNiazQU+0xdc>
          A[ijA] += A[ix - 1] * temp;
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4e6:	4413      	add	r3, r2
 800f4e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4f8:	4413      	add	r3, r2
 800f4fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f502:	f7f1 f86b 	bl	80005dc <__aeabi_dmul>
 800f506:	4602      	mov	r2, r0
 800f508:	460b      	mov	r3, r1
 800f50a:	4610      	mov	r0, r2
 800f50c:	4619      	mov	r1, r3
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	00db      	lsls	r3, r3, #3
 800f512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f514:	18d6      	adds	r6, r2, r3
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	4620      	mov	r0, r4
 800f51c:	4629      	mov	r1, r5
 800f51e:	f7f0 fea7 	bl	8000270 <__adddf3>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	e9c6 2300 	strd	r2, r3, [r6]
          ix++;
 800f52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52c:	3301      	adds	r3, #1
 800f52e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ijA++;
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	3301      	adds	r3, #1
 800f534:	633b      	str	r3, [r7, #48]	; 0x30
        while (ijA + 1 <= b) {
 800f536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	dbd0      	blt.n	800f4e0 <xgerc_tNNiazQU+0x86>
      jy++;
 800f53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f540:	3301      	adds	r3, #1
 800f542:	637b      	str	r3, [r7, #52]	; 0x34
      jA += 3;
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	3303      	adds	r3, #3
 800f548:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j = 0; j < n; j++) {
 800f54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54c:	3301      	adds	r3, #1
 800f54e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	429a      	cmp	r2, r3
 800f556:	db9d      	blt.n	800f494 <xgerc_tNNiazQU+0x3a>
}
 800f558:	bf00      	nop
 800f55a:	3744      	adds	r7, #68	; 0x44
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f560 <xnrm2_7bm34mDQ>:
#include "rtwtypes.h"
#include "xnrm2_7bm34mDQ.h"
#include <math.h>

real_T xnrm2_7bm34mDQ(int32_T n, const real_T x[6], int32_T ix0)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b092      	sub	sp, #72	; 0x48
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f56c:	f04f 0200 	mov.w	r2, #0
 800f570:	f04f 0300 	mov.w	r3, #0
 800f574:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f340 8090 	ble.w	800f6a0 <xnrm2_7bm34mDQ+0x140>
    if (n == 1) {
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b01      	cmp	r3, #1
 800f584:	d10e      	bne.n	800f5a4 <xnrm2_7bm34mDQ+0x44>
      y = fabs(x[ix0 - 1]);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f58c:	3b01      	subs	r3, #1
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	68ba      	ldr	r2, [r7, #8]
 800f592:	4413      	add	r3, r2
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	4611      	mov	r1, r2
 800f59a:	6439      	str	r1, [r7, #64]	; 0x40
 800f59c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5a0:	647b      	str	r3, [r7, #68]	; 0x44
 800f5a2:	e07d      	b.n	800f6a0 <xnrm2_7bm34mDQ+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f5a4:	f04f 0200 	mov.w	r2, #0
 800f5a8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f5ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5be:	e05d      	b.n	800f67c <xnrm2_7bm34mDQ+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	00db      	lsls	r3, r3, #3
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	6239      	str	r1, [r7, #32]
 800f5d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5da:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f5dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f5e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f5e4:	f7f1 fa8a 	bl	8000afc <__aeabi_dcmpgt>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d029      	beq.n	800f642 <xnrm2_7bm34mDQ+0xe2>
          real_T t;
          t = scale / absxk;
 800f5ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f5f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f5f6:	f7f1 f91b 	bl	8000830 <__aeabi_ddiv>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f602:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f606:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f60a:	f7f0 ffe7 	bl	80005dc <__aeabi_dmul>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4610      	mov	r0, r2
 800f614:	4619      	mov	r1, r3
 800f616:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f61a:	f7f0 ffdf 	bl	80005dc <__aeabi_dmul>
 800f61e:	4602      	mov	r2, r0
 800f620:	460b      	mov	r3, r1
 800f622:	4610      	mov	r0, r2
 800f624:	4619      	mov	r1, r3
 800f626:	f04f 0200 	mov.w	r2, #0
 800f62a:	4b23      	ldr	r3, [pc, #140]	; (800f6b8 <xnrm2_7bm34mDQ+0x158>)
 800f62c:	f7f0 fe20 	bl	8000270 <__adddf3>
 800f630:	4602      	mov	r2, r0
 800f632:	460b      	mov	r3, r1
 800f634:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f638:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f63c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f640:	e019      	b.n	800f676 <xnrm2_7bm34mDQ+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f642:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f646:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f64a:	f7f1 f8f1 	bl	8000830 <__aeabi_ddiv>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f65a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f65e:	f7f0 ffbd 	bl	80005dc <__aeabi_dmul>
 800f662:	4602      	mov	r2, r0
 800f664:	460b      	mov	r3, r1
 800f666:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f66a:	f7f0 fe01 	bl	8000270 <__adddf3>
 800f66e:	4602      	mov	r2, r0
 800f670:	460b      	mov	r3, r1
 800f672:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f678:	3301      	adds	r3, #1
 800f67a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f67c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	429a      	cmp	r2, r3
 800f682:	dd9d      	ble.n	800f5c0 <xnrm2_7bm34mDQ+0x60>
        }
      }

      y = scale * sqrt(y);
 800f684:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f688:	f00a fc26 	bl	8019ed8 <sqrt>
 800f68c:	ec53 2b10 	vmov	r2, r3, d0
 800f690:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f694:	f7f0 ffa2 	bl	80005dc <__aeabi_dmul>
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f6a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f6a4:	ec43 2b17 	vmov	d7, r2, r3
}
 800f6a8:	eeb0 0a47 	vmov.f32	s0, s14
 800f6ac:	eef0 0a67 	vmov.f32	s1, s15
 800f6b0:	3748      	adds	r7, #72	; 0x48
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	3ff00000 	.word	0x3ff00000

0800f6bc <xnrm2_Mnmxg9YT>:
#include "rtwtypes.h"
#include "xnrm2_Mnmxg9YT.h"
#include <math.h>

real_T xnrm2_Mnmxg9YT(int32_T n, const real_T x[2], int32_T ix0)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b092      	sub	sp, #72	; 0x48
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f6c8:	f04f 0200 	mov.w	r2, #0
 800f6cc:	f04f 0300 	mov.w	r3, #0
 800f6d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f340 8090 	ble.w	800f7fc <xnrm2_Mnmxg9YT+0x140>
    if (n == 1) {
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d10e      	bne.n	800f700 <xnrm2_Mnmxg9YT+0x44>
      y = fabs(x[ix0 - 1]);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	00db      	lsls	r3, r3, #3
 800f6ec:	68ba      	ldr	r2, [r7, #8]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	6439      	str	r1, [r7, #64]	; 0x40
 800f6f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f6fe:	e07d      	b.n	800f7fc <xnrm2_Mnmxg9YT+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f700:	f04f 0200 	mov.w	r2, #0
 800f704:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f708:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	4413      	add	r3, r2
 800f712:	3b01      	subs	r3, #1
 800f714:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f71a:	e05d      	b.n	800f7d8 <xnrm2_Mnmxg9YT+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f722:	3b01      	subs	r3, #1
 800f724:	00db      	lsls	r3, r3, #3
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	4413      	add	r3, r2
 800f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72e:	4611      	mov	r1, r2
 800f730:	6239      	str	r1, [r7, #32]
 800f732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f736:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f738:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f73c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f740:	f7f1 f9dc 	bl	8000afc <__aeabi_dcmpgt>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d029      	beq.n	800f79e <xnrm2_Mnmxg9YT+0xe2>
          real_T t;
          t = scale / absxk;
 800f74a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f74e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f752:	f7f1 f86d 	bl	8000830 <__aeabi_ddiv>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f75e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f762:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f766:	f7f0 ff39 	bl	80005dc <__aeabi_dmul>
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	4610      	mov	r0, r2
 800f770:	4619      	mov	r1, r3
 800f772:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f776:	f7f0 ff31 	bl	80005dc <__aeabi_dmul>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4610      	mov	r0, r2
 800f780:	4619      	mov	r1, r3
 800f782:	f04f 0200 	mov.w	r2, #0
 800f786:	4b23      	ldr	r3, [pc, #140]	; (800f814 <xnrm2_Mnmxg9YT+0x158>)
 800f788:	f7f0 fd72 	bl	8000270 <__adddf3>
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f794:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f798:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f79c:	e019      	b.n	800f7d2 <xnrm2_Mnmxg9YT+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f79e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f7a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f7a6:	f7f1 f843 	bl	8000830 <__aeabi_ddiv>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f7b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f7b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f7ba:	f7f0 ff0f 	bl	80005dc <__aeabi_dmul>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f7c6:	f7f0 fd53 	bl	8000270 <__adddf3>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	dd9d      	ble.n	800f71c <xnrm2_Mnmxg9YT+0x60>
        }
      }

      y = scale * sqrt(y);
 800f7e0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f7e4:	f00a fb78 	bl	8019ed8 <sqrt>
 800f7e8:	ec53 2b10 	vmov	r2, r3, d0
 800f7ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f7f0:	f7f0 fef4 	bl	80005dc <__aeabi_dmul>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f7fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f800:	ec43 2b17 	vmov	d7, r2, r3
}
 800f804:	eeb0 0a47 	vmov.f32	s0, s14
 800f808:	eef0 0a67 	vmov.f32	s1, s15
 800f80c:	3748      	adds	r7, #72	; 0x48
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	3ff00000 	.word	0x3ff00000

0800f818 <xnrm2_Rlk0oxWw>:
#include "rtwtypes.h"
#include "xnrm2_Rlk0oxWw.h"
#include <math.h>

real_T xnrm2_Rlk0oxWw(int32_T n, const real_T x[3], int32_T ix0)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b092      	sub	sp, #72	; 0x48
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f824:	f04f 0200 	mov.w	r2, #0
 800f828:	f04f 0300 	mov.w	r3, #0
 800f82c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	f340 8090 	ble.w	800f958 <xnrm2_Rlk0oxWw+0x140>
    if (n == 1) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d10e      	bne.n	800f85c <xnrm2_Rlk0oxWw+0x44>
      y = fabs(x[ix0 - 1]);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f844:	3b01      	subs	r3, #1
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	4413      	add	r3, r2
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	4611      	mov	r1, r2
 800f852:	6439      	str	r1, [r7, #64]	; 0x40
 800f854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f858:	647b      	str	r3, [r7, #68]	; 0x44
 800f85a:	e07d      	b.n	800f958 <xnrm2_Rlk0oxWw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f85c:	f04f 0200 	mov.w	r2, #0
 800f860:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f864:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	4413      	add	r3, r2
 800f86e:	3b01      	subs	r3, #1
 800f870:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f876:	e05d      	b.n	800f934 <xnrm2_Rlk0oxWw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f87e:	3b01      	subs	r3, #1
 800f880:	00db      	lsls	r3, r3, #3
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	4413      	add	r3, r2
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	4611      	mov	r1, r2
 800f88c:	6239      	str	r1, [r7, #32]
 800f88e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f892:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f894:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f898:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f89c:	f7f1 f92e 	bl	8000afc <__aeabi_dcmpgt>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d029      	beq.n	800f8fa <xnrm2_Rlk0oxWw+0xe2>
          real_T t;
          t = scale / absxk;
 800f8a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f8aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f8ae:	f7f0 ffbf 	bl	8000830 <__aeabi_ddiv>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800f8ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f8c2:	f7f0 fe8b 	bl	80005dc <__aeabi_dmul>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8d2:	f7f0 fe83 	bl	80005dc <__aeabi_dmul>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	460b      	mov	r3, r1
 800f8da:	4610      	mov	r0, r2
 800f8dc:	4619      	mov	r1, r3
 800f8de:	f04f 0200 	mov.w	r2, #0
 800f8e2:	4b23      	ldr	r3, [pc, #140]	; (800f970 <xnrm2_Rlk0oxWw+0x158>)
 800f8e4:	f7f0 fcc4 	bl	8000270 <__adddf3>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800f8f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f8f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800f8f8:	e019      	b.n	800f92e <xnrm2_Rlk0oxWw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800f8fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f8fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f902:	f7f0 ff95 	bl	8000830 <__aeabi_ddiv>
 800f906:	4602      	mov	r2, r0
 800f908:	460b      	mov	r3, r1
 800f90a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800f90e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f912:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f916:	f7f0 fe61 	bl	80005dc <__aeabi_dmul>
 800f91a:	4602      	mov	r2, r0
 800f91c:	460b      	mov	r3, r1
 800f91e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f922:	f7f0 fca5 	bl	8000270 <__adddf3>
 800f926:	4602      	mov	r2, r0
 800f928:	460b      	mov	r3, r1
 800f92a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800f92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f930:	3301      	adds	r3, #1
 800f932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f938:	429a      	cmp	r2, r3
 800f93a:	dd9d      	ble.n	800f878 <xnrm2_Rlk0oxWw+0x60>
        }
      }

      y = scale * sqrt(y);
 800f93c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800f940:	f00a faca 	bl	8019ed8 <sqrt>
 800f944:	ec53 2b10 	vmov	r2, r3, d0
 800f948:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800f94c:	f7f0 fe46 	bl	80005dc <__aeabi_dmul>
 800f950:	4602      	mov	r2, r0
 800f952:	460b      	mov	r3, r1
 800f954:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800f958:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f95c:	ec43 2b17 	vmov	d7, r2, r3
}
 800f960:	eeb0 0a47 	vmov.f32	s0, s14
 800f964:	eef0 0a67 	vmov.f32	s1, s15
 800f968:	3748      	adds	r7, #72	; 0x48
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	3ff00000 	.word	0x3ff00000

0800f974 <xnrm2_nLdASVZH>:
#include "rtwtypes.h"
#include "xnrm2_nLdASVZH.h"
#include <math.h>

real_T xnrm2_nLdASVZH(int32_T n, const real_T x[18], int32_T ix0)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b092      	sub	sp, #72	; 0x48
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800f980:	f04f 0200 	mov.w	r2, #0
 800f984:	f04f 0300 	mov.w	r3, #0
 800f988:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f340 8090 	ble.w	800fab4 <xnrm2_nLdASVZH+0x140>
    if (n == 1) {
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2b01      	cmp	r3, #1
 800f998:	d10e      	bne.n	800f9b8 <xnrm2_nLdASVZH+0x44>
      y = fabs(x[ix0 - 1]);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	6439      	str	r1, [r7, #64]	; 0x40
 800f9b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800f9b6:	e07d      	b.n	800fab4 <xnrm2_nLdASVZH+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800f9b8:	f04f 0200 	mov.w	r2, #0
 800f9bc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800f9c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9d2:	e05d      	b.n	800fa90 <xnrm2_nLdASVZH+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800f9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	00db      	lsls	r3, r3, #3
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	6239      	str	r1, [r7, #32]
 800f9ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9ee:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800f9f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f9f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f9f8:	f7f1 f880 	bl	8000afc <__aeabi_dcmpgt>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d029      	beq.n	800fa56 <xnrm2_nLdASVZH+0xe2>
          real_T t;
          t = scale / absxk;
 800fa02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fa06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fa0a:	f7f0 ff11 	bl	8000830 <__aeabi_ddiv>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800fa16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fa1e:	f7f0 fddd 	bl	80005dc <__aeabi_dmul>
 800fa22:	4602      	mov	r2, r0
 800fa24:	460b      	mov	r3, r1
 800fa26:	4610      	mov	r0, r2
 800fa28:	4619      	mov	r1, r3
 800fa2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa2e:	f7f0 fdd5 	bl	80005dc <__aeabi_dmul>
 800fa32:	4602      	mov	r2, r0
 800fa34:	460b      	mov	r3, r1
 800fa36:	4610      	mov	r0, r2
 800fa38:	4619      	mov	r1, r3
 800fa3a:	f04f 0200 	mov.w	r2, #0
 800fa3e:	4b23      	ldr	r3, [pc, #140]	; (800facc <xnrm2_nLdASVZH+0x158>)
 800fa40:	f7f0 fc16 	bl	8000270 <__adddf3>
 800fa44:	4602      	mov	r2, r0
 800fa46:	460b      	mov	r3, r1
 800fa48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800fa4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fa50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800fa54:	e019      	b.n	800fa8a <xnrm2_nLdASVZH+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800fa56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fa5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fa5e:	f7f0 fee7 	bl	8000830 <__aeabi_ddiv>
 800fa62:	4602      	mov	r2, r0
 800fa64:	460b      	mov	r3, r1
 800fa66:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800fa6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fa6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fa72:	f7f0 fdb3 	bl	80005dc <__aeabi_dmul>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fa7e:	f7f0 fbf7 	bl	8000270 <__adddf3>
 800fa82:	4602      	mov	r2, r0
 800fa84:	460b      	mov	r3, r1
 800fa86:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800fa8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	429a      	cmp	r2, r3
 800fa96:	dd9d      	ble.n	800f9d4 <xnrm2_nLdASVZH+0x60>
        }
      }

      y = scale * sqrt(y);
 800fa98:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800fa9c:	f00a fa1c 	bl	8019ed8 <sqrt>
 800faa0:	ec53 2b10 	vmov	r2, r3, d0
 800faa4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800faa8:	f7f0 fd98 	bl	80005dc <__aeabi_dmul>
 800faac:	4602      	mov	r2, r0
 800faae:	460b      	mov	r3, r1
 800fab0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800fab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fab8:	ec43 2b17 	vmov	d7, r2, r3
}
 800fabc:	eeb0 0a47 	vmov.f32	s0, s14
 800fac0:	eef0 0a67 	vmov.f32	s1, s15
 800fac4:	3748      	adds	r7, #72	; 0x48
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	3ff00000 	.word	0x3ff00000

0800fad0 <xnrm2_xDOlDEtw>:
#include "rtwtypes.h"
#include "xnrm2_xDOlDEtw.h"
#include <math.h>

real_T xnrm2_xDOlDEtw(int32_T n, const real_T x[9], int32_T ix0)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b092      	sub	sp, #72	; 0x48
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 800fadc:	f04f 0200 	mov.w	r2, #0
 800fae0:	f04f 0300 	mov.w	r3, #0
 800fae4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f340 8090 	ble.w	800fc10 <xnrm2_xDOlDEtw+0x140>
    if (n == 1) {
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d10e      	bne.n	800fb14 <xnrm2_xDOlDEtw+0x44>
      y = fabs(x[ix0 - 1]);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fafc:	3b01      	subs	r3, #1
 800fafe:	00db      	lsls	r3, r3, #3
 800fb00:	68ba      	ldr	r2, [r7, #8]
 800fb02:	4413      	add	r3, r2
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	4611      	mov	r1, r2
 800fb0a:	6439      	str	r1, [r7, #64]	; 0x40
 800fb0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb10:	647b      	str	r3, [r7, #68]	; 0x44
 800fb12:	e07d      	b.n	800fc10 <xnrm2_xDOlDEtw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800fb14:	f04f 0200 	mov.w	r2, #0
 800fb18:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800fb1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	4413      	add	r3, r2
 800fb26:	3b01      	subs	r3, #1
 800fb28:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb2e:	e05d      	b.n	800fbec <xnrm2_xDOlDEtw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fb36:	3b01      	subs	r3, #1
 800fb38:	00db      	lsls	r3, r3, #3
 800fb3a:	68ba      	ldr	r2, [r7, #8]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	4611      	mov	r1, r2
 800fb44:	6239      	str	r1, [r7, #32]
 800fb46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb4a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800fb4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fb50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fb54:	f7f0 ffd2 	bl	8000afc <__aeabi_dcmpgt>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d029      	beq.n	800fbb2 <xnrm2_xDOlDEtw+0xe2>
          real_T t;
          t = scale / absxk;
 800fb5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fb62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fb66:	f7f0 fe63 	bl	8000830 <__aeabi_ddiv>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800fb72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fb7a:	f7f0 fd2f 	bl	80005dc <__aeabi_dmul>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	4610      	mov	r0, r2
 800fb84:	4619      	mov	r1, r3
 800fb86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb8a:	f7f0 fd27 	bl	80005dc <__aeabi_dmul>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	460b      	mov	r3, r1
 800fb92:	4610      	mov	r0, r2
 800fb94:	4619      	mov	r1, r3
 800fb96:	f04f 0200 	mov.w	r2, #0
 800fb9a:	4b23      	ldr	r3, [pc, #140]	; (800fc28 <xnrm2_xDOlDEtw+0x158>)
 800fb9c:	f7f0 fb68 	bl	8000270 <__adddf3>
 800fba0:	4602      	mov	r2, r0
 800fba2:	460b      	mov	r3, r1
 800fba4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800fba8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fbac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800fbb0:	e019      	b.n	800fbe6 <xnrm2_xDOlDEtw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800fbb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fbb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fbba:	f7f0 fe39 	bl	8000830 <__aeabi_ddiv>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800fbc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fbca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fbce:	f7f0 fd05 	bl	80005dc <__aeabi_dmul>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fbda:	f7f0 fb49 	bl	8000270 <__adddf3>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800fbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbe8:	3301      	adds	r3, #1
 800fbea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	dd9d      	ble.n	800fb30 <xnrm2_xDOlDEtw+0x60>
        }
      }

      y = scale * sqrt(y);
 800fbf4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800fbf8:	f00a f96e 	bl	8019ed8 <sqrt>
 800fbfc:	ec53 2b10 	vmov	r2, r3, d0
 800fc00:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fc04:	f7f0 fcea 	bl	80005dc <__aeabi_dmul>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 800fc10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fc14:	ec43 2b17 	vmov	d7, r2, r3
}
 800fc18:	eeb0 0a47 	vmov.f32	s0, s14
 800fc1c:	eef0 0a67 	vmov.f32	s1, s15
 800fc20:	3748      	adds	r7, #72	; 0x48
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	3ff00000 	.word	0x3ff00000

0800fc2c <xrot_i7f01JoJ>:
#include "rtwtypes.h"
#include "xrot_i7f01JoJ.h"

void xrot_i7f01JoJ(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800fc2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fc30:	b08c      	sub	sp, #48	; 0x30
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	61f8      	str	r0, [r7, #28]
 800fc36:	61b9      	str	r1, [r7, #24]
 800fc38:	617a      	str	r2, [r7, #20]
 800fc3a:	ed87 0b02 	vstr	d0, [r7, #8]
 800fc3e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	69fa      	ldr	r2, [r7, #28]
 800fc4e:	4413      	add	r3, r2
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	00db      	lsls	r3, r3, #3
 800fc62:	69fa      	ldr	r2, [r7, #28]
 800fc64:	4413      	add	r3, r2
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800fc6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fc72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fc76:	f7f0 fcb1 	bl	80005dc <__aeabi_dmul>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4690      	mov	r8, r2
 800fc80:	4699      	mov	r9, r3
 800fc82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fc8a:	f7f0 fca7 	bl	80005dc <__aeabi_dmul>
 800fc8e:	4602      	mov	r2, r0
 800fc90:	460b      	mov	r3, r1
 800fc92:	4610      	mov	r0, r2
 800fc94:	4619      	mov	r1, r3
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	00db      	lsls	r3, r3, #3
 800fca0:	69fa      	ldr	r2, [r7, #28]
 800fca2:	18d4      	adds	r4, r2, r3
 800fca4:	4602      	mov	r2, r0
 800fca6:	460b      	mov	r3, r1
 800fca8:	4640      	mov	r0, r8
 800fcaa:	4649      	mov	r1, r9
 800fcac:	f7f0 fade 	bl	800026c <__aeabi_dsub>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 800fcb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fcbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fcc0:	f7f0 fc8c 	bl	80005dc <__aeabi_dmul>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	4690      	mov	r8, r2
 800fcca:	4699      	mov	r9, r3
 800fccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fcd4:	f7f0 fc82 	bl	80005dc <__aeabi_dmul>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4610      	mov	r0, r2
 800fcde:	4619      	mov	r1, r3
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fce6:	3b01      	subs	r3, #1
 800fce8:	00db      	lsls	r3, r3, #3
 800fcea:	69fa      	ldr	r2, [r7, #28]
 800fcec:	18d4      	adds	r4, r2, r3
 800fcee:	4602      	mov	r2, r0
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	f7f0 fabb 	bl	8000270 <__adddf3>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 800fd02:	69bb      	ldr	r3, [r7, #24]
 800fd04:	00db      	lsls	r3, r3, #3
 800fd06:	69fa      	ldr	r2, [r7, #28]
 800fd08:	4413      	add	r3, r2
 800fd0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd12:	f7f0 fc63 	bl	80005dc <__aeabi_dmul>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	4614      	mov	r4, r2
 800fd1c:	461d      	mov	r5, r3
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	00db      	lsls	r3, r3, #3
 800fd22:	69fa      	ldr	r2, [r7, #28]
 800fd24:	4413      	add	r3, r2
 800fd26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd2e:	f7f0 fc55 	bl	80005dc <__aeabi_dmul>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f0 fa99 	bl	8000270 <__adddf3>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	00db      	lsls	r3, r3, #3
 800fd4a:	69fa      	ldr	r2, [r7, #28]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd56:	f7f0 fc41 	bl	80005dc <__aeabi_dmul>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	4690      	mov	r8, r2
 800fd60:	4699      	mov	r9, r3
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	00db      	lsls	r3, r3, #3
 800fd66:	69fa      	ldr	r2, [r7, #28]
 800fd68:	4413      	add	r3, r2
 800fd6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd72:	f7f0 fc33 	bl	80005dc <__aeabi_dmul>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	69fa      	ldr	r2, [r7, #28]
 800fd84:	18d4      	adds	r4, r2, r3
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4640      	mov	r0, r8
 800fd8c:	4649      	mov	r1, r9
 800fd8e:	f7f0 fa6d 	bl	800026c <__aeabi_dsub>
 800fd92:	4602      	mov	r2, r0
 800fd94:	460b      	mov	r3, r1
 800fd96:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	00db      	lsls	r3, r3, #3
 800fd9e:	69fa      	ldr	r2, [r7, #28]
 800fda0:	18d1      	adds	r1, r2, r3
 800fda2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fda6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	3301      	adds	r3, #1
 800fdae:	00db      	lsls	r3, r3, #3
 800fdb0:	69fa      	ldr	r2, [r7, #28]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	69fa      	ldr	r2, [r7, #28]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800fdce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fdd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fdd6:	f7f0 fc01 	bl	80005dc <__aeabi_dmul>
 800fdda:	4602      	mov	r2, r0
 800fddc:	460b      	mov	r3, r1
 800fdde:	4690      	mov	r8, r2
 800fde0:	4699      	mov	r9, r3
 800fde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fde6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fdea:	f7f0 fbf7 	bl	80005dc <__aeabi_dmul>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	69fa      	ldr	r2, [r7, #28]
 800fdfe:	18d4      	adds	r4, r2, r3
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	4640      	mov	r0, r8
 800fe06:	4649      	mov	r1, r9
 800fe08:	f7f0 fa30 	bl	800026c <__aeabi_dsub>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 800fe14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fe18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fe1c:	f7f0 fbde 	bl	80005dc <__aeabi_dmul>
 800fe20:	4602      	mov	r2, r0
 800fe22:	460b      	mov	r3, r1
 800fe24:	4690      	mov	r8, r2
 800fe26:	4699      	mov	r9, r3
 800fe28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fe30:	f7f0 fbd4 	bl	80005dc <__aeabi_dmul>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	69fa      	ldr	r2, [r7, #28]
 800fe44:	18d4      	adds	r4, r2, r3
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4640      	mov	r0, r8
 800fe4c:	4649      	mov	r1, r9
 800fe4e:	f7f0 fa0f 	bl	8000270 <__adddf3>
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	e9c4 2300 	strd	r2, r3, [r4]
}
 800fe5a:	bf00      	nop
 800fe5c:	3730      	adds	r7, #48	; 0x30
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800fe64 <xrotg_XzIjz1eG>:
#include "rtwtypes.h"
#include "xrotg_XzIjz1eG.h"
#include <math.h>

void xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c, real_T *s)
{
 800fe64:	b5b0      	push	{r4, r5, r7, lr}
 800fe66:	b090      	sub	sp, #64	; 0x40
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	4611      	mov	r1, r2
 800fe84:	62b9      	str	r1, [r7, #40]	; 0x28
 800fe86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	4611      	mov	r1, r2
 800fe94:	6239      	str	r1, [r7, #32]
 800fe96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800fe9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fea0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fea4:	f7f0 fe2a 	bl	8000afc <__aeabi_dcmpgt>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d004      	beq.n	800feb8 <xrotg_XzIjz1eG+0x54>
    roe = *a;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800feb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800febc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fec0:	f7f0 f9d6 	bl	8000270 <__adddf3>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 800fecc:	f04f 0200 	mov.w	r2, #0
 800fed0:	f04f 0300 	mov.w	r3, #0
 800fed4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800fed8:	f7f0 fde8 	bl	8000aac <__aeabi_dcmpeq>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d01b      	beq.n	800ff1a <xrotg_XzIjz1eG+0xb6>
    *s = 0.0;
 800fee2:	6839      	ldr	r1, [r7, #0]
 800fee4:	f04f 0200 	mov.w	r2, #0
 800fee8:	f04f 0300 	mov.w	r3, #0
 800feec:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 800fef0:	6879      	ldr	r1, [r7, #4]
 800fef2:	f04f 0200 	mov.w	r2, #0
 800fef6:	4b59      	ldr	r3, [pc, #356]	; (801005c <xrotg_XzIjz1eG+0x1f8>)
 800fef8:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 800fefc:	68f9      	ldr	r1, [r7, #12]
 800fefe:	f04f 0200 	mov.w	r2, #0
 800ff02:	f04f 0300 	mov.w	r3, #0
 800ff06:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 800ff0a:	68b9      	ldr	r1, [r7, #8]
 800ff0c:	f04f 0200 	mov.w	r2, #0
 800ff10:	f04f 0300 	mov.w	r3, #0
 800ff14:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 800ff18:	e09b      	b.n	8010052 <xrotg_XzIjz1eG+0x1ee>
    ads = absa / scale;
 800ff1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ff1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ff22:	f7f0 fc85 	bl	8000830 <__aeabi_ddiv>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 800ff2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ff32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ff36:	f7f0 fc7b 	bl	8000830 <__aeabi_ddiv>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 800ff42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ff4a:	f7f0 fb47 	bl	80005dc <__aeabi_dmul>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	460b      	mov	r3, r1
 800ff52:	4614      	mov	r4, r2
 800ff54:	461d      	mov	r5, r3
 800ff56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ff5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ff5e:	f7f0 fb3d 	bl	80005dc <__aeabi_dmul>
 800ff62:	4602      	mov	r2, r0
 800ff64:	460b      	mov	r3, r1
 800ff66:	4620      	mov	r0, r4
 800ff68:	4629      	mov	r1, r5
 800ff6a:	f7f0 f981 	bl	8000270 <__adddf3>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	ec43 2b17 	vmov	d7, r2, r3
 800ff76:	eeb0 0a47 	vmov.f32	s0, s14
 800ff7a:	eef0 0a67 	vmov.f32	s1, s15
 800ff7e:	f009 ffab 	bl	8019ed8 <sqrt>
 800ff82:	ec53 2b10 	vmov	r2, r3, d0
 800ff86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ff8a:	f7f0 fb27 	bl	80005dc <__aeabi_dmul>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 800ff96:	f04f 0200 	mov.w	r2, #0
 800ff9a:	f04f 0300 	mov.w	r3, #0
 800ff9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ffa2:	f7f0 fd8d 	bl	8000ac0 <__aeabi_dcmplt>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d005      	beq.n	800ffb8 <xrotg_XzIjz1eG+0x154>
      scale = -scale;
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	633b      	str	r3, [r7, #48]	; 0x30
 800ffb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ffb6:	637b      	str	r3, [r7, #52]	; 0x34
    *c = *a / scale;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ffc2:	f7f0 fc35 	bl	8000830 <__aeabi_ddiv>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	460b      	mov	r3, r1
 800ffca:	6879      	ldr	r1, [r7, #4]
 800ffcc:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ffda:	f7f0 fc29 	bl	8000830 <__aeabi_ddiv>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	6839      	ldr	r1, [r7, #0]
 800ffe4:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 800ffe8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ffec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fff0:	f7f0 fd84 	bl	8000afc <__aeabi_dcmpgt>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d006      	beq.n	8010008 <xrotg_XzIjz1eG+0x1a4>
      *b = *s;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	e9c1 2300 	strd	r2, r3, [r1]
 8010006:	e01f      	b.n	8010048 <xrotg_XzIjz1eG+0x1e4>
    } else if (*c != 0.0) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801000e:	f04f 0200 	mov.w	r2, #0
 8010012:	f04f 0300 	mov.w	r3, #0
 8010016:	f7f0 fd49 	bl	8000aac <__aeabi_dcmpeq>
 801001a:	4603      	mov	r3, r0
 801001c:	2b00      	cmp	r3, #0
 801001e:	d10d      	bne.n	801003c <xrotg_XzIjz1eG+0x1d8>
      *b = 1.0 / *c;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f04f 0000 	mov.w	r0, #0
 801002a:	490c      	ldr	r1, [pc, #48]	; (801005c <xrotg_XzIjz1eG+0x1f8>)
 801002c:	f7f0 fc00 	bl	8000830 <__aeabi_ddiv>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	e9c1 2300 	strd	r2, r3, [r1]
 801003a:	e005      	b.n	8010048 <xrotg_XzIjz1eG+0x1e4>
      *b = 1.0;
 801003c:	68b9      	ldr	r1, [r7, #8]
 801003e:	f04f 0200 	mov.w	r2, #0
 8010042:	4b06      	ldr	r3, [pc, #24]	; (801005c <xrotg_XzIjz1eG+0x1f8>)
 8010044:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8010048:	68f9      	ldr	r1, [r7, #12]
 801004a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801004e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8010052:	bf00      	nop
 8010054:	3740      	adds	r7, #64	; 0x40
 8010056:	46bd      	mov	sp, r7
 8010058:	bdb0      	pop	{r4, r5, r7, pc}
 801005a:	bf00      	nop
 801005c:	3ff00000 	.word	0x3ff00000

08010060 <xscal_59GtRAwv>:
#include "rtwtypes.h"
#include "xscal_59GtRAwv.h"

void xscal_59GtRAwv(int32_T n, real_T a, real_T x[9], int32_T ix0)
{
 8010060:	b590      	push	{r4, r7, lr}
 8010062:	b089      	sub	sp, #36	; 0x24
 8010064:	af00      	add	r7, sp, #0
 8010066:	6178      	str	r0, [r7, #20]
 8010068:	ed87 0b02 	vstr	d0, [r7, #8]
 801006c:	6139      	str	r1, [r7, #16]
 801006e:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	4413      	add	r3, r2
 8010076:	3b01      	subs	r3, #1
 8010078:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	61fb      	str	r3, [r7, #28]
 801007e:	e01a      	b.n	80100b6 <xscal_59GtRAwv+0x56>
    x[k - 1] *= a;
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010086:	3b01      	subs	r3, #1
 8010088:	00db      	lsls	r3, r3, #3
 801008a:	693a      	ldr	r2, [r7, #16]
 801008c:	4413      	add	r3, r2
 801008e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010098:	3b01      	subs	r3, #1
 801009a:	00db      	lsls	r3, r3, #3
 801009c:	693a      	ldr	r2, [r7, #16]
 801009e:	18d4      	adds	r4, r2, r3
 80100a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80100a4:	f7f0 fa9a 	bl	80005dc <__aeabi_dmul>
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	3301      	adds	r3, #1
 80100b4:	61fb      	str	r3, [r7, #28]
 80100b6:	69fa      	ldr	r2, [r7, #28]
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	dde0      	ble.n	8010080 <xscal_59GtRAwv+0x20>
  }
}
 80100be:	bf00      	nop
 80100c0:	bf00      	nop
 80100c2:	3724      	adds	r7, #36	; 0x24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd90      	pop	{r4, r7, pc}

080100c8 <xscal_PLmmUlD2>:
#include "rtwtypes.h"
#include "xscal_PLmmUlD2.h"

void xscal_PLmmUlD2(int32_T n, real_T a, real_T x[3], int32_T ix0)
{
 80100c8:	b590      	push	{r4, r7, lr}
 80100ca:	b089      	sub	sp, #36	; 0x24
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6178      	str	r0, [r7, #20]
 80100d0:	ed87 0b02 	vstr	d0, [r7, #8]
 80100d4:	6139      	str	r1, [r7, #16]
 80100d6:	607a      	str	r2, [r7, #4]
  int32_T b;
  int32_T k;
  b = (ix0 + n) - 1;
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	4413      	add	r3, r2
 80100de:	3b01      	subs	r3, #1
 80100e0:	61bb      	str	r3, [r7, #24]
  for (k = ix0; k <= b; k++) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	61fb      	str	r3, [r7, #28]
 80100e6:	e01a      	b.n	801011e <xscal_PLmmUlD2+0x56>
    x[k - 1] *= a;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80100ee:	3b01      	subs	r3, #1
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	4413      	add	r3, r2
 80100f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010100:	3b01      	subs	r3, #1
 8010102:	00db      	lsls	r3, r3, #3
 8010104:	693a      	ldr	r2, [r7, #16]
 8010106:	18d4      	adds	r4, r2, r3
 8010108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801010c:	f7f0 fa66 	bl	80005dc <__aeabi_dmul>
 8010110:	4602      	mov	r2, r0
 8010112:	460b      	mov	r3, r1
 8010114:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= b; k++) {
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	3301      	adds	r3, #1
 801011c:	61fb      	str	r3, [r7, #28]
 801011e:	69fa      	ldr	r2, [r7, #28]
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	429a      	cmp	r2, r3
 8010124:	dde0      	ble.n	80100e8 <xscal_PLmmUlD2+0x20>
  }
}
 8010126:	bf00      	nop
 8010128:	bf00      	nop
 801012a:	3724      	adds	r7, #36	; 0x24
 801012c:	46bd      	mov	sp, r7
 801012e:	bd90      	pop	{r4, r7, pc}

08010130 <xscal_eaAxXsvQ>:
#include "rtwtypes.h"
#include "xscal_eaAxXsvQ.h"

void xscal_eaAxXsvQ(real_T a, real_T x[9], int32_T ix0)
{
 8010130:	b590      	push	{r4, r7, lr}
 8010132:	b087      	sub	sp, #28
 8010134:	af00      	add	r7, sp, #0
 8010136:	ed87 0b02 	vstr	d0, [r7, #8]
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  int32_T k;
  for (k = ix0; k <= ix0 + 2; k++) {
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	617b      	str	r3, [r7, #20]
 8010142:	e01a      	b.n	801017a <xscal_eaAxXsvQ+0x4a>
    x[k - 1] *= a;
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801014a:	3b01      	subs	r3, #1
 801014c:	00db      	lsls	r3, r3, #3
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	4413      	add	r3, r2
 8010152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801015c:	3b01      	subs	r3, #1
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	18d4      	adds	r4, r2, r3
 8010164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010168:	f7f0 fa38 	bl	80005dc <__aeabi_dmul>
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	e9c4 2300 	strd	r2, r3, [r4]
  for (k = ix0; k <= ix0 + 2; k++) {
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	3301      	adds	r3, #1
 8010178:	617b      	str	r3, [r7, #20]
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	3302      	adds	r3, #2
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	429a      	cmp	r2, r3
 8010182:	dddf      	ble.n	8010144 <xscal_eaAxXsvQ+0x14>
  }
}
 8010184:	bf00      	nop
 8010186:	bf00      	nop
 8010188:	371c      	adds	r7, #28
 801018a:	46bd      	mov	sp, r7
 801018c:	bd90      	pop	{r4, r7, pc}

0801018e <xswap_JoAqPjUv>:
#include "rtwtypes.h"
#include "xswap_JoAqPjUv.h"

void xswap_JoAqPjUv(real_T x[9], int32_T ix0, int32_T iy0)
{
 801018e:	b480      	push	{r7}
 8010190:	b087      	sub	sp, #28
 8010192:	af00      	add	r7, sp, #0
 8010194:	60f8      	str	r0, [r7, #12]
 8010196:	60b9      	str	r1, [r7, #8]
 8010198:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80101a0:	3b01      	subs	r3, #1
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	4413      	add	r3, r2
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80101b6:	3b01      	subs	r3, #1
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	441a      	add	r2, r3
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80101c4:	3b01      	subs	r3, #1
 80101c6:	00db      	lsls	r3, r3, #3
 80101c8:	68f9      	ldr	r1, [r7, #12]
 80101ca:	4419      	add	r1, r3
 80101cc:	e9d2 2300 	ldrd	r2, r3, [r2]
 80101d0:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80101da:	3b01      	subs	r3, #1
 80101dc:	00db      	lsls	r3, r3, #3
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	18d1      	adds	r1, r2, r3
 80101e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80101e6:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	00db      	lsls	r3, r3, #3
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	4413      	add	r3, r2
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	00db      	lsls	r3, r3, #3
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	4413      	add	r3, r2
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	00d2      	lsls	r2, r2, #3
 8010206:	68f9      	ldr	r1, [r7, #12]
 8010208:	4411      	add	r1, r2
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	18d1      	adds	r1, r2, r3
 801021a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801021e:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	3301      	adds	r3, #1
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	4413      	add	r3, r2
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3301      	adds	r3, #1
 8010238:	00db      	lsls	r3, r3, #3
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	4413      	add	r3, r2
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	3201      	adds	r2, #1
 8010242:	00d2      	lsls	r2, r2, #3
 8010244:	68f9      	ldr	r1, [r7, #12]
 8010246:	4411      	add	r1, r2
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	3301      	adds	r3, #1
 8010254:	00db      	lsls	r3, r3, #3
 8010256:	68fa      	ldr	r2, [r7, #12]
 8010258:	18d1      	adds	r1, r2, r3
 801025a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801025e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8010262:	bf00      	nop
 8010264:	371c      	adds	r7, #28
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr
	...

08010270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80102a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010274:	480d      	ldr	r0, [pc, #52]	; (80102ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010276:	490e      	ldr	r1, [pc, #56]	; (80102b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010278:	4a0e      	ldr	r2, [pc, #56]	; (80102b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801027c:	e002      	b.n	8010284 <LoopCopyDataInit>

0801027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010282:	3304      	adds	r3, #4

08010284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010288:	d3f9      	bcc.n	801027e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801028a:	4a0b      	ldr	r2, [pc, #44]	; (80102b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801028c:	4c0b      	ldr	r4, [pc, #44]	; (80102bc <LoopFillZerobss+0x26>)
  movs r3, #0
 801028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010290:	e001      	b.n	8010296 <LoopFillZerobss>

08010292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010294:	3204      	adds	r2, #4

08010296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010298:	d3fb      	bcc.n	8010292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801029a:	f7f4 fd4d 	bl	8004d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801029e:	f009 fc21 	bl	8019ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80102a2:	f7f3 f889 	bl	80033b8 <main>
  bx  lr    
 80102a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80102a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80102ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80102b0:	200014ac 	.word	0x200014ac
  ldr r2, =_sidata
 80102b4:	0801afb8 	.word	0x0801afb8
  ldr r2, =_sbss
 80102b8:	200014b0 	.word	0x200014b0
  ldr r4, =_ebss
 80102bc:	2001e9ac 	.word	0x2001e9ac

080102c0 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80102c0:	e7fe      	b.n	80102c0 <CAN1_SCE_IRQHandler>
	...

080102c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80102c8:	4b0e      	ldr	r3, [pc, #56]	; (8010304 <HAL_Init+0x40>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a0d      	ldr	r2, [pc, #52]	; (8010304 <HAL_Init+0x40>)
 80102ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80102d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80102d4:	4b0b      	ldr	r3, [pc, #44]	; (8010304 <HAL_Init+0x40>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a0a      	ldr	r2, [pc, #40]	; (8010304 <HAL_Init+0x40>)
 80102da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80102de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80102e0:	4b08      	ldr	r3, [pc, #32]	; (8010304 <HAL_Init+0x40>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a07      	ldr	r2, [pc, #28]	; (8010304 <HAL_Init+0x40>)
 80102e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80102ec:	2003      	movs	r0, #3
 80102ee:	f001 fa8a 	bl	8011806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80102f2:	200f      	movs	r0, #15
 80102f4:	f7f4 fc60 	bl	8004bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80102f8:	f7f4 fc32 	bl	8004b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	40023c00 	.word	0x40023c00

08010308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010308:	b480      	push	{r7}
 801030a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801030c:	4b06      	ldr	r3, [pc, #24]	; (8010328 <HAL_IncTick+0x20>)
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	461a      	mov	r2, r3
 8010312:	4b06      	ldr	r3, [pc, #24]	; (801032c <HAL_IncTick+0x24>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4413      	add	r3, r2
 8010318:	4a04      	ldr	r2, [pc, #16]	; (801032c <HAL_IncTick+0x24>)
 801031a:	6013      	str	r3, [r2, #0]
}
 801031c:	bf00      	nop
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	2000143c 	.word	0x2000143c
 801032c:	2001e8b4 	.word	0x2001e8b4

08010330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010330:	b480      	push	{r7}
 8010332:	af00      	add	r7, sp, #0
  return uwTick;
 8010334:	4b03      	ldr	r3, [pc, #12]	; (8010344 <HAL_GetTick+0x14>)
 8010336:	681b      	ldr	r3, [r3, #0]
}
 8010338:	4618      	mov	r0, r3
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	2001e8b4 	.word	0x2001e8b4

08010348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010350:	f7ff ffee 	bl	8010330 <HAL_GetTick>
 8010354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010360:	d005      	beq.n	801036e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010362:	4b0a      	ldr	r3, [pc, #40]	; (801038c <HAL_Delay+0x44>)
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	461a      	mov	r2, r3
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	4413      	add	r3, r2
 801036c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801036e:	bf00      	nop
 8010370:	f7ff ffde 	bl	8010330 <HAL_GetTick>
 8010374:	4602      	mov	r2, r0
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	1ad3      	subs	r3, r2, r3
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	429a      	cmp	r2, r3
 801037e:	d8f7      	bhi.n	8010370 <HAL_Delay+0x28>
  {
  }
}
 8010380:	bf00      	nop
 8010382:	bf00      	nop
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	2000143c 	.word	0x2000143c

08010390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80103a2:	2301      	movs	r3, #1
 80103a4:	e033      	b.n	801040e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d109      	bne.n	80103c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7f2 fb7c 	bl	8002aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c6:	f003 0310 	and.w	r3, r3, #16
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d118      	bne.n	8010400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80103d6:	f023 0302 	bic.w	r3, r3, #2
 80103da:	f043 0202 	orr.w	r2, r3, #2
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fba8 	bl	8010b38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f2:	f023 0303 	bic.w	r3, r3, #3
 80103f6:	f043 0201 	orr.w	r2, r3, #1
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	641a      	str	r2, [r3, #64]	; 0x40
 80103fe:	e001      	b.n	8010404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010400:	2301      	movs	r3, #1
 8010402:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801040c:	7bfb      	ldrb	r3, [r7, #15]
}
 801040e:	4618      	mov	r0, r3
 8010410:	3710      	adds	r7, #16
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8010416:	b580      	push	{r7, lr}
 8010418:	b084      	sub	sp, #16
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 801041e:	2300      	movs	r3, #0
 8010420:	60fb      	str	r3, [r7, #12]
 8010422:	2300      	movs	r3, #0
 8010424:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f003 0302 	and.w	r3, r3, #2
 8010430:	2b02      	cmp	r3, #2
 8010432:	bf0c      	ite	eq
 8010434:	2301      	moveq	r3, #1
 8010436:	2300      	movne	r3, #0
 8010438:	b2db      	uxtb	r3, r3
 801043a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	f003 0320 	and.w	r3, r3, #32
 8010446:	2b20      	cmp	r3, #32
 8010448:	bf0c      	ite	eq
 801044a:	2301      	moveq	r3, #1
 801044c:	2300      	movne	r3, #0
 801044e:	b2db      	uxtb	r3, r3
 8010450:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d049      	beq.n	80104ec <HAL_ADC_IRQHandler+0xd6>
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d046      	beq.n	80104ec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010462:	f003 0310 	and.w	r3, r3, #16
 8010466:	2b00      	cmp	r3, #0
 8010468:	d105      	bne.n	8010476 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801046e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010480:	2b00      	cmp	r3, #0
 8010482:	d12b      	bne.n	80104dc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010488:	2b00      	cmp	r3, #0
 801048a:	d127      	bne.n	80104dc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010492:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010496:	2b00      	cmp	r3, #0
 8010498:	d006      	beq.n	80104a8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d119      	bne.n	80104dc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f022 0220 	bic.w	r2, r2, #32
 80104b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d105      	bne.n	80104dc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d4:	f043 0201 	orr.w	r2, r3, #1
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7f2 fd5f 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f06f 0212 	mvn.w	r2, #18
 80104ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 0304 	and.w	r3, r3, #4
 80104f6:	2b04      	cmp	r3, #4
 80104f8:	bf0c      	ite	eq
 80104fa:	2301      	moveq	r3, #1
 80104fc:	2300      	movne	r3, #0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801050c:	2b80      	cmp	r3, #128	; 0x80
 801050e:	bf0c      	ite	eq
 8010510:	2301      	moveq	r3, #1
 8010512:	2300      	movne	r3, #0
 8010514:	b2db      	uxtb	r3, r3
 8010516:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d057      	beq.n	80105ce <HAL_ADC_IRQHandler+0x1b8>
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d054      	beq.n	80105ce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010528:	f003 0310 	and.w	r3, r3, #16
 801052c:	2b00      	cmp	r3, #0
 801052e:	d105      	bne.n	801053c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010534:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010546:	2b00      	cmp	r3, #0
 8010548:	d139      	bne.n	80105be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010554:	2b00      	cmp	r3, #0
 8010556:	d006      	beq.n	8010566 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010562:	2b00      	cmp	r3, #0
 8010564:	d12b      	bne.n	80105be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010570:	2b00      	cmp	r3, #0
 8010572:	d124      	bne.n	80105be <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801057e:	2b00      	cmp	r3, #0
 8010580:	d11d      	bne.n	80105be <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010586:	2b00      	cmp	r3, #0
 8010588:	d119      	bne.n	80105be <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	685a      	ldr	r2, [r3, #4]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010598:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801059e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d105      	bne.n	80105be <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b6:	f043 0201 	orr.w	r2, r3, #1
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fc38 	bl	8010e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f06f 020c 	mvn.w	r2, #12
 80105cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 0301 	and.w	r3, r3, #1
 80105d8:	2b01      	cmp	r3, #1
 80105da:	bf0c      	ite	eq
 80105dc:	2301      	moveq	r3, #1
 80105de:	2300      	movne	r3, #0
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105ee:	2b40      	cmp	r3, #64	; 0x40
 80105f0:	bf0c      	ite	eq
 80105f2:	2301      	moveq	r3, #1
 80105f4:	2300      	movne	r3, #0
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d017      	beq.n	8010630 <HAL_ADC_IRQHandler+0x21a>
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d014      	beq.n	8010630 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	2b01      	cmp	r3, #1
 8010612:	d10d      	bne.n	8010630 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 f953 	bl	80108cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f06f 0201 	mvn.w	r2, #1
 801062e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f003 0320 	and.w	r3, r3, #32
 801063a:	2b20      	cmp	r3, #32
 801063c:	bf0c      	ite	eq
 801063e:	2301      	moveq	r3, #1
 8010640:	2300      	movne	r3, #0
 8010642:	b2db      	uxtb	r3, r3
 8010644:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010654:	bf0c      	ite	eq
 8010656:	2301      	moveq	r3, #1
 8010658:	2300      	movne	r3, #0
 801065a:	b2db      	uxtb	r3, r3
 801065c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d015      	beq.n	8010690 <HAL_ADC_IRQHandler+0x27a>
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d012      	beq.n	8010690 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066e:	f043 0202 	orr.w	r2, r3, #2
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f06f 0220 	mvn.w	r2, #32
 801067e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 f92d 	bl	80108e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f06f 0220 	mvn.w	r2, #32
 801068e:	601a      	str	r2, [r3, #0]
  }
}
 8010690:	bf00      	nop
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80106a4:	2300      	movs	r3, #0
 80106a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d101      	bne.n	80106b6 <HAL_ADC_Start_DMA+0x1e>
 80106b2:	2302      	movs	r3, #2
 80106b4:	e0e9      	b.n	801088a <HAL_ADC_Start_DMA+0x1f2>
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d018      	beq.n	80106fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	689a      	ldr	r2, [r3, #8]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f042 0201 	orr.w	r2, r2, #1
 80106da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80106dc:	4b6d      	ldr	r3, [pc, #436]	; (8010894 <HAL_ADC_Start_DMA+0x1fc>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a6d      	ldr	r2, [pc, #436]	; (8010898 <HAL_ADC_Start_DMA+0x200>)
 80106e2:	fba2 2303 	umull	r2, r3, r2, r3
 80106e6:	0c9a      	lsrs	r2, r3, #18
 80106e8:	4613      	mov	r3, r2
 80106ea:	005b      	lsls	r3, r3, #1
 80106ec:	4413      	add	r3, r2
 80106ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80106f0:	e002      	b.n	80106f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	3b01      	subs	r3, #1
 80106f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1f9      	bne.n	80106f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801070c:	d107      	bne.n	801071e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	689a      	ldr	r2, [r3, #8]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801071c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	f003 0301 	and.w	r3, r3, #1
 8010728:	2b01      	cmp	r3, #1
 801072a:	f040 80a1 	bne.w	8010870 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010732:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010736:	f023 0301 	bic.w	r3, r3, #1
 801073a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801074c:	2b00      	cmp	r3, #0
 801074e:	d007      	beq.n	8010760 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010754:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010758:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801076c:	d106      	bne.n	801077c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010772:	f023 0206 	bic.w	r2, r3, #6
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	645a      	str	r2, [r3, #68]	; 0x44
 801077a:	e002      	b.n	8010782 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2200      	movs	r2, #0
 8010780:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2200      	movs	r2, #0
 8010786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801078a:	4b44      	ldr	r3, [pc, #272]	; (801089c <HAL_ADC_Start_DMA+0x204>)
 801078c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010792:	4a43      	ldr	r2, [pc, #268]	; (80108a0 <HAL_ADC_Start_DMA+0x208>)
 8010794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079a:	4a42      	ldr	r2, [pc, #264]	; (80108a4 <HAL_ADC_Start_DMA+0x20c>)
 801079c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a2:	4a41      	ldr	r2, [pc, #260]	; (80108a8 <HAL_ADC_Start_DMA+0x210>)
 80107a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80107ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	685a      	ldr	r2, [r3, #4]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80107be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	689a      	ldr	r2, [r3, #8]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	334c      	adds	r3, #76	; 0x4c
 80107da:	4619      	mov	r1, r3
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f001 f8f4 	bl	80119cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	f003 031f 	and.w	r3, r3, #31
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d12a      	bne.n	8010846 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4a2d      	ldr	r2, [pc, #180]	; (80108ac <HAL_ADC_Start_DMA+0x214>)
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d015      	beq.n	8010826 <HAL_ADC_Start_DMA+0x18e>
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	4a2c      	ldr	r2, [pc, #176]	; (80108b0 <HAL_ADC_Start_DMA+0x218>)
 8010800:	4293      	cmp	r3, r2
 8010802:	d105      	bne.n	8010810 <HAL_ADC_Start_DMA+0x178>
 8010804:	4b25      	ldr	r3, [pc, #148]	; (801089c <HAL_ADC_Start_DMA+0x204>)
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	f003 031f 	and.w	r3, r3, #31
 801080c:	2b00      	cmp	r3, #0
 801080e:	d00a      	beq.n	8010826 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a27      	ldr	r2, [pc, #156]	; (80108b4 <HAL_ADC_Start_DMA+0x21c>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d136      	bne.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
 801081a:	4b20      	ldr	r3, [pc, #128]	; (801089c <HAL_ADC_Start_DMA+0x204>)
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f003 0310 	and.w	r3, r3, #16
 8010822:	2b00      	cmp	r3, #0
 8010824:	d130      	bne.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010830:	2b00      	cmp	r3, #0
 8010832:	d129      	bne.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	689a      	ldr	r2, [r3, #8]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010842:	609a      	str	r2, [r3, #8]
 8010844:	e020      	b.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a18      	ldr	r2, [pc, #96]	; (80108ac <HAL_ADC_Start_DMA+0x214>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d11b      	bne.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801085a:	2b00      	cmp	r3, #0
 801085c:	d114      	bne.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	689a      	ldr	r2, [r3, #8]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801086c:	609a      	str	r2, [r3, #8]
 801086e:	e00b      	b.n	8010888 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010874:	f043 0210 	orr.w	r2, r3, #16
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010880:	f043 0201 	orr.w	r2, r3, #1
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3718      	adds	r7, #24
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	20000080 	.word	0x20000080
 8010898:	431bde83 	.word	0x431bde83
 801089c:	40012300 	.word	0x40012300
 80108a0:	08010d31 	.word	0x08010d31
 80108a4:	08010deb 	.word	0x08010deb
 80108a8:	08010e07 	.word	0x08010e07
 80108ac:	40012000 	.word	0x40012000
 80108b0:	40012100 	.word	0x40012100
 80108b4:	40012200 	.word	0x40012200

080108b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80108c0:	bf00      	nop
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80108d4:	bf00      	nop
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80108e8:	bf00      	nop
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b085      	sub	sp, #20
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80108fe:	2300      	movs	r3, #0
 8010900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010908:	2b01      	cmp	r3, #1
 801090a:	d101      	bne.n	8010910 <HAL_ADC_ConfigChannel+0x1c>
 801090c:	2302      	movs	r3, #2
 801090e:	e105      	b.n	8010b1c <HAL_ADC_ConfigChannel+0x228>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2201      	movs	r2, #1
 8010914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b09      	cmp	r3, #9
 801091e:	d925      	bls.n	801096c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68d9      	ldr	r1, [r3, #12]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	b29b      	uxth	r3, r3
 801092c:	461a      	mov	r2, r3
 801092e:	4613      	mov	r3, r2
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	4413      	add	r3, r2
 8010934:	3b1e      	subs	r3, #30
 8010936:	2207      	movs	r2, #7
 8010938:	fa02 f303 	lsl.w	r3, r2, r3
 801093c:	43da      	mvns	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	400a      	ands	r2, r1
 8010944:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68d9      	ldr	r1, [r3, #12]
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	689a      	ldr	r2, [r3, #8]
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	b29b      	uxth	r3, r3
 8010956:	4618      	mov	r0, r3
 8010958:	4603      	mov	r3, r0
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	4403      	add	r3, r0
 801095e:	3b1e      	subs	r3, #30
 8010960:	409a      	lsls	r2, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	430a      	orrs	r2, r1
 8010968:	60da      	str	r2, [r3, #12]
 801096a:	e022      	b.n	80109b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	6919      	ldr	r1, [r3, #16]
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	b29b      	uxth	r3, r3
 8010978:	461a      	mov	r2, r3
 801097a:	4613      	mov	r3, r2
 801097c:	005b      	lsls	r3, r3, #1
 801097e:	4413      	add	r3, r2
 8010980:	2207      	movs	r2, #7
 8010982:	fa02 f303 	lsl.w	r3, r2, r3
 8010986:	43da      	mvns	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	400a      	ands	r2, r1
 801098e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	6919      	ldr	r1, [r3, #16]
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	689a      	ldr	r2, [r3, #8]
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	4618      	mov	r0, r3
 80109a2:	4603      	mov	r3, r0
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	4403      	add	r3, r0
 80109a8:	409a      	lsls	r2, r3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	2b06      	cmp	r3, #6
 80109b8:	d824      	bhi.n	8010a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	685a      	ldr	r2, [r3, #4]
 80109c4:	4613      	mov	r3, r2
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4413      	add	r3, r2
 80109ca:	3b05      	subs	r3, #5
 80109cc:	221f      	movs	r2, #31
 80109ce:	fa02 f303 	lsl.w	r3, r2, r3
 80109d2:	43da      	mvns	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	400a      	ands	r2, r1
 80109da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	4618      	mov	r0, r3
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	685a      	ldr	r2, [r3, #4]
 80109ee:	4613      	mov	r3, r2
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	4413      	add	r3, r2
 80109f4:	3b05      	subs	r3, #5
 80109f6:	fa00 f203 	lsl.w	r2, r0, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	430a      	orrs	r2, r1
 8010a00:	635a      	str	r2, [r3, #52]	; 0x34
 8010a02:	e04c      	b.n	8010a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	2b0c      	cmp	r3, #12
 8010a0a:	d824      	bhi.n	8010a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	685a      	ldr	r2, [r3, #4]
 8010a16:	4613      	mov	r3, r2
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	4413      	add	r3, r2
 8010a1c:	3b23      	subs	r3, #35	; 0x23
 8010a1e:	221f      	movs	r2, #31
 8010a20:	fa02 f303 	lsl.w	r3, r2, r3
 8010a24:	43da      	mvns	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	400a      	ands	r2, r1
 8010a2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	685a      	ldr	r2, [r3, #4]
 8010a40:	4613      	mov	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	3b23      	subs	r3, #35	; 0x23
 8010a48:	fa00 f203 	lsl.w	r2, r0, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	430a      	orrs	r2, r1
 8010a52:	631a      	str	r2, [r3, #48]	; 0x30
 8010a54:	e023      	b.n	8010a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	4613      	mov	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4413      	add	r3, r2
 8010a66:	3b41      	subs	r3, #65	; 0x41
 8010a68:	221f      	movs	r2, #31
 8010a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a6e:	43da      	mvns	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	400a      	ands	r2, r1
 8010a76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	4618      	mov	r0, r3
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	685a      	ldr	r2, [r3, #4]
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	4413      	add	r3, r2
 8010a90:	3b41      	subs	r3, #65	; 0x41
 8010a92:	fa00 f203 	lsl.w	r2, r0, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	430a      	orrs	r2, r1
 8010a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010a9e:	4b22      	ldr	r3, [pc, #136]	; (8010b28 <HAL_ADC_ConfigChannel+0x234>)
 8010aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4a21      	ldr	r2, [pc, #132]	; (8010b2c <HAL_ADC_ConfigChannel+0x238>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d109      	bne.n	8010ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b12      	cmp	r3, #18
 8010ab2:	d105      	bne.n	8010ac0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a19      	ldr	r2, [pc, #100]	; (8010b2c <HAL_ADC_ConfigChannel+0x238>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d123      	bne.n	8010b12 <HAL_ADC_ConfigChannel+0x21e>
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2b10      	cmp	r3, #16
 8010ad0:	d003      	beq.n	8010ada <HAL_ADC_ConfigChannel+0x1e6>
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b11      	cmp	r3, #17
 8010ad8:	d11b      	bne.n	8010b12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b10      	cmp	r3, #16
 8010aec:	d111      	bne.n	8010b12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8010aee:	4b10      	ldr	r3, [pc, #64]	; (8010b30 <HAL_ADC_ConfigChannel+0x23c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a10      	ldr	r2, [pc, #64]	; (8010b34 <HAL_ADC_ConfigChannel+0x240>)
 8010af4:	fba2 2303 	umull	r2, r3, r2, r3
 8010af8:	0c9a      	lsrs	r2, r3, #18
 8010afa:	4613      	mov	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	4413      	add	r3, r2
 8010b00:	005b      	lsls	r3, r3, #1
 8010b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010b04:	e002      	b.n	8010b0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1f9      	bne.n	8010b06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2200      	movs	r2, #0
 8010b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr
 8010b28:	40012300 	.word	0x40012300
 8010b2c:	40012000 	.word	0x40012000
 8010b30:	20000080 	.word	0x20000080
 8010b34:	431bde83 	.word	0x431bde83

08010b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010b40:	4b79      	ldr	r3, [pc, #484]	; (8010d28 <ADC_Init+0x1f0>)
 8010b42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	431a      	orrs	r2, r3
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	685a      	ldr	r2, [r3, #4]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	6859      	ldr	r1, [r3, #4]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	691b      	ldr	r3, [r3, #16]
 8010b78:	021a      	lsls	r2, r3, #8
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	430a      	orrs	r2, r1
 8010b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	685a      	ldr	r2, [r3, #4]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	6859      	ldr	r1, [r3, #4]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	689a      	ldr	r2, [r3, #8]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	430a      	orrs	r2, r1
 8010ba2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	689a      	ldr	r2, [r3, #8]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	6899      	ldr	r1, [r3, #8]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	68da      	ldr	r2, [r3, #12]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	430a      	orrs	r2, r1
 8010bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bca:	4a58      	ldr	r2, [pc, #352]	; (8010d2c <ADC_Init+0x1f4>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d022      	beq.n	8010c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	689a      	ldr	r2, [r3, #8]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6899      	ldr	r1, [r3, #8]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	430a      	orrs	r2, r1
 8010bf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	689a      	ldr	r2, [r3, #8]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	6899      	ldr	r1, [r3, #8]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	430a      	orrs	r2, r1
 8010c12:	609a      	str	r2, [r3, #8]
 8010c14:	e00f      	b.n	8010c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	689a      	ldr	r2, [r3, #8]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	689a      	ldr	r2, [r3, #8]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010c34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	689a      	ldr	r2, [r3, #8]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f022 0202 	bic.w	r2, r2, #2
 8010c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	6899      	ldr	r1, [r3, #8]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	7e1b      	ldrb	r3, [r3, #24]
 8010c50:	005a      	lsls	r2, r3, #1
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d01b      	beq.n	8010c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	685a      	ldr	r2, [r3, #4]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	685a      	ldr	r2, [r3, #4]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	6859      	ldr	r1, [r3, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	035a      	lsls	r2, r3, #13
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	605a      	str	r2, [r3, #4]
 8010c9a:	e007      	b.n	8010cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	685a      	ldr	r2, [r3, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	69db      	ldr	r3, [r3, #28]
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	051a      	lsls	r2, r3, #20
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	430a      	orrs	r2, r1
 8010cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	689a      	ldr	r2, [r3, #8]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6899      	ldr	r1, [r3, #8]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cee:	025a      	lsls	r2, r3, #9
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	430a      	orrs	r2, r1
 8010cf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	689a      	ldr	r2, [r3, #8]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	6899      	ldr	r1, [r3, #8]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	695b      	ldr	r3, [r3, #20]
 8010d12:	029a      	lsls	r2, r3, #10
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	430a      	orrs	r2, r1
 8010d1a:	609a      	str	r2, [r3, #8]
}
 8010d1c:	bf00      	nop
 8010d1e:	3714      	adds	r7, #20
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	40012300 	.word	0x40012300
 8010d2c:	0f000001 	.word	0x0f000001

08010d30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b084      	sub	sp, #16
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d13c      	bne.n	8010dc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d12b      	bne.n	8010dbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d127      	bne.n	8010dbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d006      	beq.n	8010d88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d119      	bne.n	8010dbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	685a      	ldr	r2, [r3, #4]
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f022 0220 	bic.w	r2, r2, #32
 8010d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d105      	bne.n	8010dbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db4:	f043 0201 	orr.w	r2, r3, #1
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f7f2 f8ef 	bl	8002fa0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010dc2:	e00e      	b.n	8010de2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc8:	f003 0310 	and.w	r3, r3, #16
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d003      	beq.n	8010dd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f7ff fd85 	bl	80108e0 <HAL_ADC_ErrorCallback>
}
 8010dd6:	e004      	b.n	8010de2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	4798      	blx	r3
}
 8010de2:	bf00      	nop
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f7ff fd5d 	bl	80108b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010dfe:	bf00      	nop
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}

08010e06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b084      	sub	sp, #16
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2240      	movs	r2, #64	; 0x40
 8010e18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e1e:	f043 0204 	orr.w	r2, r3, #4
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f7ff fd5a 	bl	80108e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010e2c:	bf00      	nop
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8010e56:	2301      	movs	r3, #1
 8010e58:	e0ed      	b.n	8011036 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d102      	bne.n	8010e6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7f2 f918 	bl	800309c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f042 0201 	orr.w	r2, r2, #1
 8010e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010e7c:	f7ff fa58 	bl	8010330 <HAL_GetTick>
 8010e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010e82:	e012      	b.n	8010eaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010e84:	f7ff fa54 	bl	8010330 <HAL_GetTick>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	2b0a      	cmp	r3, #10
 8010e90:	d90b      	bls.n	8010eaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2205      	movs	r2, #5
 8010ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e0c5      	b.n	8011036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	f003 0301 	and.w	r3, r3, #1
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d0e5      	beq.n	8010e84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f022 0202 	bic.w	r2, r2, #2
 8010ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010ec8:	f7ff fa32 	bl	8010330 <HAL_GetTick>
 8010ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010ece:	e012      	b.n	8010ef6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010ed0:	f7ff fa2e 	bl	8010330 <HAL_GetTick>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	2b0a      	cmp	r3, #10
 8010edc:	d90b      	bls.n	8010ef6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2205      	movs	r2, #5
 8010eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e09f      	b.n	8011036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	f003 0302 	and.w	r3, r3, #2
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1e5      	bne.n	8010ed0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7e1b      	ldrb	r3, [r3, #24]
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d108      	bne.n	8010f1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010f1a:	601a      	str	r2, [r3, #0]
 8010f1c:	e007      	b.n	8010f2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	7e5b      	ldrb	r3, [r3, #25]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d108      	bne.n	8010f48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	e007      	b.n	8010f58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	7e9b      	ldrb	r3, [r3, #26]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d108      	bne.n	8010f72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f042 0220 	orr.w	r2, r2, #32
 8010f6e:	601a      	str	r2, [r3, #0]
 8010f70:	e007      	b.n	8010f82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f022 0220 	bic.w	r2, r2, #32
 8010f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	7edb      	ldrb	r3, [r3, #27]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d108      	bne.n	8010f9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f022 0210 	bic.w	r2, r2, #16
 8010f98:	601a      	str	r2, [r3, #0]
 8010f9a:	e007      	b.n	8010fac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f042 0210 	orr.w	r2, r2, #16
 8010faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7f1b      	ldrb	r3, [r3, #28]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d108      	bne.n	8010fc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f042 0208 	orr.w	r2, r2, #8
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	e007      	b.n	8010fd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f022 0208 	bic.w	r2, r2, #8
 8010fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	7f5b      	ldrb	r3, [r3, #29]
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	d108      	bne.n	8010ff0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f042 0204 	orr.w	r2, r2, #4
 8010fec:	601a      	str	r2, [r3, #0]
 8010fee:	e007      	b.n	8011000 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f022 0204 	bic.w	r2, r2, #4
 8010ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	689a      	ldr	r2, [r3, #8]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	431a      	orrs	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	431a      	orrs	r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	695b      	ldr	r3, [r3, #20]
 8011014:	ea42 0103 	orr.w	r1, r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	1e5a      	subs	r2, r3, #1
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	430a      	orrs	r2, r1
 8011024:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2201      	movs	r2, #1
 8011030:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8011034:	2300      	movs	r3, #0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801103e:	b480      	push	{r7}
 8011040:	b087      	sub	sp, #28
 8011042:	af00      	add	r7, sp, #0
 8011044:	60f8      	str	r0, [r7, #12]
 8011046:	60b9      	str	r1, [r7, #8]
 8011048:	607a      	str	r2, [r7, #4]
 801104a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011052:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8011054:	7dfb      	ldrb	r3, [r7, #23]
 8011056:	2b01      	cmp	r3, #1
 8011058:	d003      	beq.n	8011062 <HAL_CAN_GetRxMessage+0x24>
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	2b02      	cmp	r3, #2
 801105e:	f040 80f3 	bne.w	8011248 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10e      	bne.n	8011086 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d116      	bne.n	80110a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	e0e7      	b.n	8011256 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	f003 0303 	and.w	r3, r3, #3
 8011090:	2b00      	cmp	r3, #0
 8011092:	d107      	bne.n	80110a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80110a0:	2301      	movs	r3, #1
 80110a2:	e0d8      	b.n	8011256 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	331b      	adds	r3, #27
 80110ac:	011b      	lsls	r3, r3, #4
 80110ae:	4413      	add	r3, r2
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f003 0204 	and.w	r2, r3, #4
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10c      	bne.n	80110dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	331b      	adds	r3, #27
 80110ca:	011b      	lsls	r3, r3, #4
 80110cc:	4413      	add	r3, r2
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	0d5b      	lsrs	r3, r3, #21
 80110d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	e00b      	b.n	80110f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	331b      	adds	r3, #27
 80110e4:	011b      	lsls	r3, r3, #4
 80110e6:	4413      	add	r3, r2
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	08db      	lsrs	r3, r3, #3
 80110ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	331b      	adds	r3, #27
 80110fc:	011b      	lsls	r3, r3, #4
 80110fe:	4413      	add	r3, r2
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f003 0202 	and.w	r2, r3, #2
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	331b      	adds	r3, #27
 8011112:	011b      	lsls	r3, r3, #4
 8011114:	4413      	add	r3, r2
 8011116:	3304      	adds	r3, #4
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f003 020f 	and.w	r2, r3, #15
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	331b      	adds	r3, #27
 801112a:	011b      	lsls	r3, r3, #4
 801112c:	4413      	add	r3, r2
 801112e:	3304      	adds	r3, #4
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	0a1b      	lsrs	r3, r3, #8
 8011134:	b2da      	uxtb	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	331b      	adds	r3, #27
 8011142:	011b      	lsls	r3, r3, #4
 8011144:	4413      	add	r3, r2
 8011146:	3304      	adds	r3, #4
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	0c1b      	lsrs	r3, r3, #16
 801114c:	b29a      	uxth	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	011b      	lsls	r3, r3, #4
 801115a:	4413      	add	r3, r2
 801115c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	b2da      	uxtb	r2, r3
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	011b      	lsls	r3, r3, #4
 8011170:	4413      	add	r3, r2
 8011172:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	0a1a      	lsrs	r2, r3, #8
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	3301      	adds	r3, #1
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	011b      	lsls	r3, r3, #4
 801118a:	4413      	add	r3, r2
 801118c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	0c1a      	lsrs	r2, r3, #16
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	3302      	adds	r3, #2
 8011198:	b2d2      	uxtb	r2, r2
 801119a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	011b      	lsls	r3, r3, #4
 80111a4:	4413      	add	r3, r2
 80111a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	0e1a      	lsrs	r2, r3, #24
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	3303      	adds	r3, #3
 80111b2:	b2d2      	uxtb	r2, r2
 80111b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	4413      	add	r3, r2
 80111c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	3304      	adds	r3, #4
 80111ca:	b2d2      	uxtb	r2, r2
 80111cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	011b      	lsls	r3, r3, #4
 80111d6:	4413      	add	r3, r2
 80111d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	0a1a      	lsrs	r2, r3, #8
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	3305      	adds	r3, #5
 80111e4:	b2d2      	uxtb	r2, r2
 80111e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	011b      	lsls	r3, r3, #4
 80111f0:	4413      	add	r3, r2
 80111f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	0c1a      	lsrs	r2, r3, #16
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	3306      	adds	r3, #6
 80111fe:	b2d2      	uxtb	r2, r2
 8011200:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	011b      	lsls	r3, r3, #4
 801120a:	4413      	add	r3, r2
 801120c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	0e1a      	lsrs	r2, r3, #24
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	3307      	adds	r3, #7
 8011218:	b2d2      	uxtb	r2, r2
 801121a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d108      	bne.n	8011234 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	68da      	ldr	r2, [r3, #12]
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f042 0220 	orr.w	r2, r2, #32
 8011230:	60da      	str	r2, [r3, #12]
 8011232:	e007      	b.n	8011244 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	691a      	ldr	r2, [r3, #16]
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f042 0220 	orr.w	r2, r2, #32
 8011242:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8011244:	2300      	movs	r3, #0
 8011246:	e006      	b.n	8011256 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801124c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011254:	2301      	movs	r3, #1
  }
}
 8011256:	4618      	mov	r0, r3
 8011258:	371c      	adds	r7, #28
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr

08011262 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b08a      	sub	sp, #40	; 0x28
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801126a:	2300      	movs	r3, #0
 801126c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	695b      	ldr	r3, [r3, #20]
 8011274:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	691b      	ldr	r3, [r3, #16]
 8011294:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	699b      	ldr	r3, [r3, #24]
 801129c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 801129e:	6a3b      	ldr	r3, [r7, #32]
 80112a0:	f003 0301 	and.w	r3, r3, #1
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d07c      	beq.n	80113a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	f003 0301 	and.w	r3, r3, #1
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d023      	beq.n	80112fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2201      	movs	r2, #1
 80112b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	f003 0302 	and.w	r3, r3, #2
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d003      	beq.n	80112cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 f983 	bl	80115d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80112ca:	e016      	b.n	80112fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	f003 0304 	and.w	r3, r3, #4
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d004      	beq.n	80112e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80112d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80112dc:	627b      	str	r3, [r7, #36]	; 0x24
 80112de:	e00c      	b.n	80112fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	f003 0308 	and.w	r3, r3, #8
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d004      	beq.n	80112f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80112ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80112f0:	627b      	str	r3, [r7, #36]	; 0x24
 80112f2:	e002      	b.n	80112fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f000 f989 	bl	801160c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011300:	2b00      	cmp	r3, #0
 8011302:	d024      	beq.n	801134e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f44f 7280 	mov.w	r2, #256	; 0x100
 801130c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011314:	2b00      	cmp	r3, #0
 8011316:	d003      	beq.n	8011320 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 f963 	bl	80115e4 <HAL_CAN_TxMailbox1CompleteCallback>
 801131e:	e016      	b.n	801134e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011326:	2b00      	cmp	r3, #0
 8011328:	d004      	beq.n	8011334 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011330:	627b      	str	r3, [r7, #36]	; 0x24
 8011332:	e00c      	b.n	801134e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011334:	69bb      	ldr	r3, [r7, #24]
 8011336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801133a:	2b00      	cmp	r3, #0
 801133c:	d004      	beq.n	8011348 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011344:	627b      	str	r3, [r7, #36]	; 0x24
 8011346:	e002      	b.n	801134e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f000 f969 	bl	8011620 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011354:	2b00      	cmp	r3, #0
 8011356:	d024      	beq.n	80113a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011360:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011368:	2b00      	cmp	r3, #0
 801136a:	d003      	beq.n	8011374 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 f943 	bl	80115f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8011372:	e016      	b.n	80113a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011374:	69bb      	ldr	r3, [r7, #24]
 8011376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801137a:	2b00      	cmp	r3, #0
 801137c:	d004      	beq.n	8011388 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011384:	627b      	str	r3, [r7, #36]	; 0x24
 8011386:	e00c      	b.n	80113a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8011388:	69bb      	ldr	r3, [r7, #24]
 801138a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801138e:	2b00      	cmp	r3, #0
 8011390:	d004      	beq.n	801139c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8011392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011398:	627b      	str	r3, [r7, #36]	; 0x24
 801139a:	e002      	b.n	80113a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 f949 	bl	8011634 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	f003 0308 	and.w	r3, r3, #8
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00c      	beq.n	80113c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	f003 0310 	and.w	r3, r3, #16
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d007      	beq.n	80113c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80113b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2210      	movs	r2, #16
 80113c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	f003 0304 	and.w	r3, r3, #4
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d00b      	beq.n	80113e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	f003 0308 	and.w	r3, r3, #8
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d006      	beq.n	80113e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2208      	movs	r2, #8
 80113e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 f930 	bl	8011648 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80113e8:	6a3b      	ldr	r3, [r7, #32]
 80113ea:	f003 0302 	and.w	r3, r3, #2
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d009      	beq.n	8011406 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	f003 0303 	and.w	r3, r3, #3
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d002      	beq.n	8011406 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7f0 f9b5 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8011406:	6a3b      	ldr	r3, [r7, #32]
 8011408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00c      	beq.n	801142a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	f003 0310 	and.w	r3, r3, #16
 8011416:	2b00      	cmp	r3, #0
 8011418:	d007      	beq.n	801142a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 801141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011420:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2210      	movs	r2, #16
 8011428:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801142a:	6a3b      	ldr	r3, [r7, #32]
 801142c:	f003 0320 	and.w	r3, r3, #32
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00b      	beq.n	801144c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	f003 0308 	and.w	r3, r3, #8
 801143a:	2b00      	cmp	r3, #0
 801143c:	d006      	beq.n	801144c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2208      	movs	r2, #8
 8011444:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 f908 	bl	801165c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	f003 0310 	and.w	r3, r3, #16
 8011452:	2b00      	cmp	r3, #0
 8011454:	d009      	beq.n	801146a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	f003 0303 	and.w	r3, r3, #3
 8011460:	2b00      	cmp	r3, #0
 8011462:	d002      	beq.n	801146a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7f0 f9cf 	bl	8001808 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801146a:	6a3b      	ldr	r3, [r7, #32]
 801146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00b      	beq.n	801148c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	f003 0310 	and.w	r3, r3, #16
 801147a:	2b00      	cmp	r3, #0
 801147c:	d006      	beq.n	801148c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2210      	movs	r2, #16
 8011484:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f000 f8f2 	bl	8011670 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00b      	beq.n	80114ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	f003 0308 	and.w	r3, r3, #8
 801149c:	2b00      	cmp	r3, #0
 801149e:	d006      	beq.n	80114ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2208      	movs	r2, #8
 80114a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f000 f8eb 	bl	8011684 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80114ae:	6a3b      	ldr	r3, [r7, #32]
 80114b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d07b      	beq.n	80115b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	f003 0304 	and.w	r3, r3, #4
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d072      	beq.n	80115a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d008      	beq.n	80114de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d003      	beq.n	80114de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80114d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d8:	f043 0301 	orr.w	r3, r3, #1
 80114dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d008      	beq.n	80114fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d003      	beq.n	80114fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80114f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f4:	f043 0302 	orr.w	r3, r3, #2
 80114f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011500:	2b00      	cmp	r3, #0
 8011502:	d008      	beq.n	8011516 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801150a:	2b00      	cmp	r3, #0
 801150c:	d003      	beq.n	8011516 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	f043 0304 	orr.w	r3, r3, #4
 8011514:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801151c:	2b00      	cmp	r3, #0
 801151e:	d043      	beq.n	80115a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011526:	2b00      	cmp	r3, #0
 8011528:	d03e      	beq.n	80115a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011530:	2b60      	cmp	r3, #96	; 0x60
 8011532:	d02b      	beq.n	801158c <HAL_CAN_IRQHandler+0x32a>
 8011534:	2b60      	cmp	r3, #96	; 0x60
 8011536:	d82e      	bhi.n	8011596 <HAL_CAN_IRQHandler+0x334>
 8011538:	2b50      	cmp	r3, #80	; 0x50
 801153a:	d022      	beq.n	8011582 <HAL_CAN_IRQHandler+0x320>
 801153c:	2b50      	cmp	r3, #80	; 0x50
 801153e:	d82a      	bhi.n	8011596 <HAL_CAN_IRQHandler+0x334>
 8011540:	2b40      	cmp	r3, #64	; 0x40
 8011542:	d019      	beq.n	8011578 <HAL_CAN_IRQHandler+0x316>
 8011544:	2b40      	cmp	r3, #64	; 0x40
 8011546:	d826      	bhi.n	8011596 <HAL_CAN_IRQHandler+0x334>
 8011548:	2b30      	cmp	r3, #48	; 0x30
 801154a:	d010      	beq.n	801156e <HAL_CAN_IRQHandler+0x30c>
 801154c:	2b30      	cmp	r3, #48	; 0x30
 801154e:	d822      	bhi.n	8011596 <HAL_CAN_IRQHandler+0x334>
 8011550:	2b10      	cmp	r3, #16
 8011552:	d002      	beq.n	801155a <HAL_CAN_IRQHandler+0x2f8>
 8011554:	2b20      	cmp	r3, #32
 8011556:	d005      	beq.n	8011564 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8011558:	e01d      	b.n	8011596 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	f043 0308 	orr.w	r3, r3, #8
 8011560:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011562:	e019      	b.n	8011598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	f043 0310 	orr.w	r3, r3, #16
 801156a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801156c:	e014      	b.n	8011598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 801156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011570:	f043 0320 	orr.w	r3, r3, #32
 8011574:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011576:	e00f      	b.n	8011598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8011578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801157e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011580:	e00a      	b.n	8011598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011588:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801158a:	e005      	b.n	8011598 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011592:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011594:	e000      	b.n	8011598 <HAL_CAN_IRQHandler+0x336>
            break;
 8011596:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	699a      	ldr	r2, [r3, #24]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80115a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2204      	movs	r2, #4
 80115ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80115b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d008      	beq.n	80115c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115bc:	431a      	orrs	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 f868 	bl	8011698 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80115c8:	bf00      	nop
 80115ca:	3728      	adds	r7, #40	; 0x28
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011614:	bf00      	nop
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011650:	bf00      	nop
 8011652:	370c      	adds	r7, #12
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr

0801165c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011664:	bf00      	nop
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8011678:	bf00      	nop
 801167a:	370c      	adds	r7, #12
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801168c:	bf00      	nop
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80116a0:	bf00      	nop
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f003 0307 	and.w	r3, r3, #7
 80116ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80116bc:	4b0c      	ldr	r3, [pc, #48]	; (80116f0 <__NVIC_SetPriorityGrouping+0x44>)
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80116c2:	68ba      	ldr	r2, [r7, #8]
 80116c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80116c8:	4013      	ands	r3, r2
 80116ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80116d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80116d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80116dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80116de:	4a04      	ldr	r2, [pc, #16]	; (80116f0 <__NVIC_SetPriorityGrouping+0x44>)
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	60d3      	str	r3, [r2, #12]
}
 80116e4:	bf00      	nop
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	e000ed00 	.word	0xe000ed00

080116f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80116f4:	b480      	push	{r7}
 80116f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80116f8:	4b04      	ldr	r3, [pc, #16]	; (801170c <__NVIC_GetPriorityGrouping+0x18>)
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	0a1b      	lsrs	r3, r3, #8
 80116fe:	f003 0307 	and.w	r3, r3, #7
}
 8011702:	4618      	mov	r0, r3
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	e000ed00 	.word	0xe000ed00

08011710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801171e:	2b00      	cmp	r3, #0
 8011720:	db0b      	blt.n	801173a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011722:	79fb      	ldrb	r3, [r7, #7]
 8011724:	f003 021f 	and.w	r2, r3, #31
 8011728:	4907      	ldr	r1, [pc, #28]	; (8011748 <__NVIC_EnableIRQ+0x38>)
 801172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801172e:	095b      	lsrs	r3, r3, #5
 8011730:	2001      	movs	r0, #1
 8011732:	fa00 f202 	lsl.w	r2, r0, r2
 8011736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801173a:	bf00      	nop
 801173c:	370c      	adds	r7, #12
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop
 8011748:	e000e100 	.word	0xe000e100

0801174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	4603      	mov	r3, r0
 8011754:	6039      	str	r1, [r7, #0]
 8011756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801175c:	2b00      	cmp	r3, #0
 801175e:	db0a      	blt.n	8011776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	b2da      	uxtb	r2, r3
 8011764:	490c      	ldr	r1, [pc, #48]	; (8011798 <__NVIC_SetPriority+0x4c>)
 8011766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801176a:	0112      	lsls	r2, r2, #4
 801176c:	b2d2      	uxtb	r2, r2
 801176e:	440b      	add	r3, r1
 8011770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011774:	e00a      	b.n	801178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	b2da      	uxtb	r2, r3
 801177a:	4908      	ldr	r1, [pc, #32]	; (801179c <__NVIC_SetPriority+0x50>)
 801177c:	79fb      	ldrb	r3, [r7, #7]
 801177e:	f003 030f 	and.w	r3, r3, #15
 8011782:	3b04      	subs	r3, #4
 8011784:	0112      	lsls	r2, r2, #4
 8011786:	b2d2      	uxtb	r2, r2
 8011788:	440b      	add	r3, r1
 801178a:	761a      	strb	r2, [r3, #24]
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr
 8011798:	e000e100 	.word	0xe000e100
 801179c:	e000ed00 	.word	0xe000ed00

080117a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b089      	sub	sp, #36	; 0x24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f003 0307 	and.w	r3, r3, #7
 80117b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	f1c3 0307 	rsb	r3, r3, #7
 80117ba:	2b04      	cmp	r3, #4
 80117bc:	bf28      	it	cs
 80117be:	2304      	movcs	r3, #4
 80117c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	3304      	adds	r3, #4
 80117c6:	2b06      	cmp	r3, #6
 80117c8:	d902      	bls.n	80117d0 <NVIC_EncodePriority+0x30>
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	3b03      	subs	r3, #3
 80117ce:	e000      	b.n	80117d2 <NVIC_EncodePriority+0x32>
 80117d0:	2300      	movs	r3, #0
 80117d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80117d4:	f04f 32ff 	mov.w	r2, #4294967295
 80117d8:	69bb      	ldr	r3, [r7, #24]
 80117da:	fa02 f303 	lsl.w	r3, r2, r3
 80117de:	43da      	mvns	r2, r3
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	401a      	ands	r2, r3
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80117e8:	f04f 31ff 	mov.w	r1, #4294967295
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	fa01 f303 	lsl.w	r3, r1, r3
 80117f2:	43d9      	mvns	r1, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80117f8:	4313      	orrs	r3, r2
         );
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3724      	adds	r7, #36	; 0x24
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr

08011806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011806:	b580      	push	{r7, lr}
 8011808:	b082      	sub	sp, #8
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7ff ff4c 	bl	80116ac <__NVIC_SetPriorityGrouping>
}
 8011814:	bf00      	nop
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801181c:	b580      	push	{r7, lr}
 801181e:	b086      	sub	sp, #24
 8011820:	af00      	add	r7, sp, #0
 8011822:	4603      	mov	r3, r0
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	607a      	str	r2, [r7, #4]
 8011828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801182a:	2300      	movs	r3, #0
 801182c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801182e:	f7ff ff61 	bl	80116f4 <__NVIC_GetPriorityGrouping>
 8011832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	68b9      	ldr	r1, [r7, #8]
 8011838:	6978      	ldr	r0, [r7, #20]
 801183a:	f7ff ffb1 	bl	80117a0 <NVIC_EncodePriority>
 801183e:	4602      	mov	r2, r0
 8011840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011844:	4611      	mov	r1, r2
 8011846:	4618      	mov	r0, r3
 8011848:	f7ff ff80 	bl	801174c <__NVIC_SetPriority>
}
 801184c:	bf00      	nop
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	4603      	mov	r3, r0
 801185c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011862:	4618      	mov	r0, r3
 8011864:	f7ff ff54 	bl	8011710 <__NVIC_EnableIRQ>
}
 8011868:	bf00      	nop
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011878:	2300      	movs	r3, #0
 801187a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801187c:	f7fe fd58 	bl	8010330 <HAL_GetTick>
 8011880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d101      	bne.n	801188c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011888:	2301      	movs	r3, #1
 801188a:	e099      	b.n	80119c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2202      	movs	r2, #2
 8011890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f022 0201 	bic.w	r2, r2, #1
 80118aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80118ac:	e00f      	b.n	80118ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80118ae:	f7fe fd3f 	bl	8010330 <HAL_GetTick>
 80118b2:	4602      	mov	r2, r0
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	2b05      	cmp	r3, #5
 80118ba:	d908      	bls.n	80118ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2220      	movs	r2, #32
 80118c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2203      	movs	r2, #3
 80118c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80118ca:	2303      	movs	r3, #3
 80118cc:	e078      	b.n	80119c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f003 0301 	and.w	r3, r3, #1
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1e8      	bne.n	80118ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80118e4:	697a      	ldr	r2, [r7, #20]
 80118e6:	4b38      	ldr	r3, [pc, #224]	; (80119c8 <HAL_DMA_Init+0x158>)
 80118e8:	4013      	ands	r3, r2
 80118ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	685a      	ldr	r2, [r3, #4]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80118fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	699b      	ldr	r3, [r3, #24]
 801190c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6a1b      	ldr	r3, [r3, #32]
 8011918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801191a:	697a      	ldr	r2, [r7, #20]
 801191c:	4313      	orrs	r3, r2
 801191e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011924:	2b04      	cmp	r3, #4
 8011926:	d107      	bne.n	8011938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011930:	4313      	orrs	r3, r2
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	4313      	orrs	r3, r2
 8011936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	697a      	ldr	r2, [r7, #20]
 801193e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	695b      	ldr	r3, [r3, #20]
 8011946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	f023 0307 	bic.w	r3, r3, #7
 801194e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011954:	697a      	ldr	r2, [r7, #20]
 8011956:	4313      	orrs	r3, r2
 8011958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801195e:	2b04      	cmp	r3, #4
 8011960:	d117      	bne.n	8011992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011966:	697a      	ldr	r2, [r7, #20]
 8011968:	4313      	orrs	r3, r2
 801196a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00e      	beq.n	8011992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fa6f 	bl	8011e58 <DMA_CheckFifoParam>
 801197a:	4603      	mov	r3, r0
 801197c:	2b00      	cmp	r3, #0
 801197e:	d008      	beq.n	8011992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2240      	movs	r2, #64	; 0x40
 8011984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2201      	movs	r2, #1
 801198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801198e:	2301      	movs	r3, #1
 8011990:	e016      	b.n	80119c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	697a      	ldr	r2, [r7, #20]
 8011998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fa26 	bl	8011dec <DMA_CalcBaseAndBitshift>
 80119a0:	4603      	mov	r3, r0
 80119a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119a8:	223f      	movs	r2, #63	; 0x3f
 80119aa:	409a      	lsls	r2, r3
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2201      	movs	r2, #1
 80119ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3718      	adds	r7, #24
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	f010803f 	.word	0xf010803f

080119cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b086      	sub	sp, #24
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80119da:	2300      	movs	r3, #0
 80119dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d101      	bne.n	80119f2 <HAL_DMA_Start_IT+0x26>
 80119ee:	2302      	movs	r3, #2
 80119f0:	e040      	b.n	8011a74 <HAL_DMA_Start_IT+0xa8>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2201      	movs	r2, #1
 80119f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d12f      	bne.n	8011a66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2202      	movs	r2, #2
 8011a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2200      	movs	r2, #0
 8011a12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	68b9      	ldr	r1, [r7, #8]
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f000 f9b8 	bl	8011d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a24:	223f      	movs	r2, #63	; 0x3f
 8011a26:	409a      	lsls	r2, r3
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	f042 0216 	orr.w	r2, r2, #22
 8011a3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d007      	beq.n	8011a54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f042 0208 	orr.w	r2, r2, #8
 8011a52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	681a      	ldr	r2, [r3, #0]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f042 0201 	orr.w	r2, r2, #1
 8011a62:	601a      	str	r2, [r3, #0]
 8011a64:	e005      	b.n	8011a72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011a6e:	2302      	movs	r3, #2
 8011a70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011a84:	2300      	movs	r3, #0
 8011a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011a88:	4b92      	ldr	r3, [pc, #584]	; (8011cd4 <HAL_DMA_IRQHandler+0x258>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4a92      	ldr	r2, [pc, #584]	; (8011cd8 <HAL_DMA_IRQHandler+0x25c>)
 8011a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a92:	0a9b      	lsrs	r3, r3, #10
 8011a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aa6:	2208      	movs	r2, #8
 8011aa8:	409a      	lsls	r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	4013      	ands	r3, r2
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d01a      	beq.n	8011ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f003 0304 	and.w	r3, r3, #4
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d013      	beq.n	8011ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f022 0204 	bic.w	r2, r2, #4
 8011ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ad4:	2208      	movs	r2, #8
 8011ad6:	409a      	lsls	r2, r3
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ae0:	f043 0201 	orr.w	r2, r3, #1
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aec:	2201      	movs	r2, #1
 8011aee:	409a      	lsls	r2, r3
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	4013      	ands	r3, r2
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d012      	beq.n	8011b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	695b      	ldr	r3, [r3, #20]
 8011afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d00b      	beq.n	8011b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	409a      	lsls	r2, r3
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b16:	f043 0202 	orr.w	r2, r3, #2
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b22:	2204      	movs	r2, #4
 8011b24:	409a      	lsls	r2, r3
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	4013      	ands	r3, r2
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d012      	beq.n	8011b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f003 0302 	and.w	r3, r3, #2
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00b      	beq.n	8011b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b40:	2204      	movs	r2, #4
 8011b42:	409a      	lsls	r2, r3
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b4c:	f043 0204 	orr.w	r2, r3, #4
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b58:	2210      	movs	r2, #16
 8011b5a:	409a      	lsls	r2, r3
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	4013      	ands	r3, r2
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d043      	beq.n	8011bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f003 0308 	and.w	r3, r3, #8
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d03c      	beq.n	8011bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b76:	2210      	movs	r2, #16
 8011b78:	409a      	lsls	r2, r3
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d018      	beq.n	8011bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d108      	bne.n	8011bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d024      	beq.n	8011bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	4798      	blx	r3
 8011baa:	e01f      	b.n	8011bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d01b      	beq.n	8011bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	4798      	blx	r3
 8011bbc:	e016      	b.n	8011bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d107      	bne.n	8011bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f022 0208 	bic.w	r2, r2, #8
 8011bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d003      	beq.n	8011bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bf0:	2220      	movs	r2, #32
 8011bf2:	409a      	lsls	r2, r3
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f000 808e 	beq.w	8011d1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f003 0310 	and.w	r3, r3, #16
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f000 8086 	beq.w	8011d1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c12:	2220      	movs	r2, #32
 8011c14:	409a      	lsls	r2, r3
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b05      	cmp	r3, #5
 8011c24:	d136      	bne.n	8011c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f022 0216 	bic.w	r2, r2, #22
 8011c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	695a      	ldr	r2, [r3, #20]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d103      	bne.n	8011c56 <HAL_DMA_IRQHandler+0x1da>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d007      	beq.n	8011c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f022 0208 	bic.w	r2, r2, #8
 8011c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c6a:	223f      	movs	r2, #63	; 0x3f
 8011c6c:	409a      	lsls	r2, r3
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2201      	movs	r2, #1
 8011c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d07d      	beq.n	8011d86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	4798      	blx	r3
        }
        return;
 8011c92:	e078      	b.n	8011d86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d01c      	beq.n	8011cdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d108      	bne.n	8011cc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d030      	beq.n	8011d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	4798      	blx	r3
 8011cc0:	e02b      	b.n	8011d1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d027      	beq.n	8011d1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	4798      	blx	r3
 8011cd2:	e022      	b.n	8011d1a <HAL_DMA_IRQHandler+0x29e>
 8011cd4:	20000080 	.word	0x20000080
 8011cd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10f      	bne.n	8011d0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f022 0210 	bic.w	r2, r2, #16
 8011cf8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d003      	beq.n	8011d1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d032      	beq.n	8011d88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d26:	f003 0301 	and.w	r3, r3, #1
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d022      	beq.n	8011d74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2205      	movs	r2, #5
 8011d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f022 0201 	bic.w	r2, r2, #1
 8011d44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	3301      	adds	r3, #1
 8011d4a:	60bb      	str	r3, [r7, #8]
 8011d4c:	697a      	ldr	r2, [r7, #20]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d307      	bcc.n	8011d62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f003 0301 	and.w	r3, r3, #1
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1f2      	bne.n	8011d46 <HAL_DMA_IRQHandler+0x2ca>
 8011d60:	e000      	b.n	8011d64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011d62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d005      	beq.n	8011d88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	4798      	blx	r3
 8011d84:	e000      	b.n	8011d88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8011d86:	bf00      	nop
    }
  }
}
 8011d88:	3718      	adds	r7, #24
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop

08011d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
 8011d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	683a      	ldr	r2, [r7, #0]
 8011db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	2b40      	cmp	r3, #64	; 0x40
 8011dbc:	d108      	bne.n	8011dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011dce:	e007      	b.n	8011de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	68ba      	ldr	r2, [r7, #8]
 8011dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	60da      	str	r2, [r3, #12]
}
 8011de0:	bf00      	nop
 8011de2:	3714      	adds	r7, #20
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b085      	sub	sp, #20
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	3b10      	subs	r3, #16
 8011dfc:	4a14      	ldr	r2, [pc, #80]	; (8011e50 <DMA_CalcBaseAndBitshift+0x64>)
 8011dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8011e02:	091b      	lsrs	r3, r3, #4
 8011e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011e06:	4a13      	ldr	r2, [pc, #76]	; (8011e54 <DMA_CalcBaseAndBitshift+0x68>)
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2b03      	cmp	r3, #3
 8011e18:	d909      	bls.n	8011e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011e22:	f023 0303 	bic.w	r3, r3, #3
 8011e26:	1d1a      	adds	r2, r3, #4
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8011e2c:	e007      	b.n	8011e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011e36:	f023 0303 	bic.w	r3, r3, #3
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3714      	adds	r7, #20
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	aaaaaaab 	.word	0xaaaaaaab
 8011e54:	0801af00 	.word	0x0801af00

08011e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	699b      	ldr	r3, [r3, #24]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d11f      	bne.n	8011eb2 <DMA_CheckFifoParam+0x5a>
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d856      	bhi.n	8011f26 <DMA_CheckFifoParam+0xce>
 8011e78:	a201      	add	r2, pc, #4	; (adr r2, 8011e80 <DMA_CheckFifoParam+0x28>)
 8011e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e7e:	bf00      	nop
 8011e80:	08011e91 	.word	0x08011e91
 8011e84:	08011ea3 	.word	0x08011ea3
 8011e88:	08011e91 	.word	0x08011e91
 8011e8c:	08011f27 	.word	0x08011f27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d046      	beq.n	8011f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011ea0:	e043      	b.n	8011f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011eaa:	d140      	bne.n	8011f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011eac:	2301      	movs	r3, #1
 8011eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011eb0:	e03d      	b.n	8011f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	699b      	ldr	r3, [r3, #24]
 8011eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011eba:	d121      	bne.n	8011f00 <DMA_CheckFifoParam+0xa8>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2b03      	cmp	r3, #3
 8011ec0:	d837      	bhi.n	8011f32 <DMA_CheckFifoParam+0xda>
 8011ec2:	a201      	add	r2, pc, #4	; (adr r2, 8011ec8 <DMA_CheckFifoParam+0x70>)
 8011ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec8:	08011ed9 	.word	0x08011ed9
 8011ecc:	08011edf 	.word	0x08011edf
 8011ed0:	08011ed9 	.word	0x08011ed9
 8011ed4:	08011ef1 	.word	0x08011ef1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011ed8:	2301      	movs	r3, #1
 8011eda:	73fb      	strb	r3, [r7, #15]
      break;
 8011edc:	e030      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d025      	beq.n	8011f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011eee:	e022      	b.n	8011f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011ef8:	d11f      	bne.n	8011f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011efa:	2301      	movs	r3, #1
 8011efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011efe:	e01c      	b.n	8011f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2b02      	cmp	r3, #2
 8011f04:	d903      	bls.n	8011f0e <DMA_CheckFifoParam+0xb6>
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	2b03      	cmp	r3, #3
 8011f0a:	d003      	beq.n	8011f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011f0c:	e018      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	73fb      	strb	r3, [r7, #15]
      break;
 8011f12:	e015      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00e      	beq.n	8011f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8011f20:	2301      	movs	r3, #1
 8011f22:	73fb      	strb	r3, [r7, #15]
      break;
 8011f24:	e00b      	b.n	8011f3e <DMA_CheckFifoParam+0xe6>
      break;
 8011f26:	bf00      	nop
 8011f28:	e00a      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      break;
 8011f2a:	bf00      	nop
 8011f2c:	e008      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      break;
 8011f2e:	bf00      	nop
 8011f30:	e006      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      break;
 8011f32:	bf00      	nop
 8011f34:	e004      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      break;
 8011f36:	bf00      	nop
 8011f38:	e002      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8011f3a:	bf00      	nop
 8011f3c:	e000      	b.n	8011f40 <DMA_CheckFifoParam+0xe8>
      break;
 8011f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8011f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3714      	adds	r7, #20
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop

08011f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b089      	sub	sp, #36	; 0x24
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011f62:	2300      	movs	r3, #0
 8011f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f66:	2300      	movs	r3, #0
 8011f68:	61fb      	str	r3, [r7, #28]
 8011f6a:	e16b      	b.n	8012244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	fa02 f303 	lsl.w	r3, r2, r3
 8011f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	697a      	ldr	r2, [r7, #20]
 8011f7c:	4013      	ands	r3, r2
 8011f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011f80:	693a      	ldr	r2, [r7, #16]
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	f040 815a 	bne.w	801223e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	f003 0303 	and.w	r3, r3, #3
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d005      	beq.n	8011fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	d130      	bne.n	8012004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	689b      	ldr	r3, [r3, #8]
 8011fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	005b      	lsls	r3, r3, #1
 8011fac:	2203      	movs	r2, #3
 8011fae:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb2:	43db      	mvns	r3, r3
 8011fb4:	69ba      	ldr	r2, [r7, #24]
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	68da      	ldr	r2, [r3, #12]
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	005b      	lsls	r3, r3, #1
 8011fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fc6:	69ba      	ldr	r2, [r7, #24]
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	69ba      	ldr	r2, [r7, #24]
 8011fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011fd8:	2201      	movs	r2, #1
 8011fda:	69fb      	ldr	r3, [r7, #28]
 8011fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe0:	43db      	mvns	r3, r3
 8011fe2:	69ba      	ldr	r2, [r7, #24]
 8011fe4:	4013      	ands	r3, r2
 8011fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	091b      	lsrs	r3, r3, #4
 8011fee:	f003 0201 	and.w	r2, r3, #1
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ff8:	69ba      	ldr	r2, [r7, #24]
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	69ba      	ldr	r2, [r7, #24]
 8012002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	f003 0303 	and.w	r3, r3, #3
 801200c:	2b03      	cmp	r3, #3
 801200e:	d017      	beq.n	8012040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	2203      	movs	r2, #3
 801201c:	fa02 f303 	lsl.w	r3, r2, r3
 8012020:	43db      	mvns	r3, r3
 8012022:	69ba      	ldr	r2, [r7, #24]
 8012024:	4013      	ands	r3, r2
 8012026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	689a      	ldr	r2, [r3, #8]
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	fa02 f303 	lsl.w	r3, r2, r3
 8012034:	69ba      	ldr	r2, [r7, #24]
 8012036:	4313      	orrs	r3, r2
 8012038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	69ba      	ldr	r2, [r7, #24]
 801203e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	f003 0303 	and.w	r3, r3, #3
 8012048:	2b02      	cmp	r3, #2
 801204a:	d123      	bne.n	8012094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	08da      	lsrs	r2, r3, #3
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	3208      	adds	r2, #8
 8012054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	f003 0307 	and.w	r3, r3, #7
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	220f      	movs	r2, #15
 8012064:	fa02 f303 	lsl.w	r3, r2, r3
 8012068:	43db      	mvns	r3, r3
 801206a:	69ba      	ldr	r2, [r7, #24]
 801206c:	4013      	ands	r3, r2
 801206e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	691a      	ldr	r2, [r3, #16]
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	f003 0307 	and.w	r3, r3, #7
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	fa02 f303 	lsl.w	r3, r2, r3
 8012080:	69ba      	ldr	r2, [r7, #24]
 8012082:	4313      	orrs	r3, r2
 8012084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	08da      	lsrs	r2, r3, #3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	3208      	adds	r2, #8
 801208e:	69b9      	ldr	r1, [r7, #24]
 8012090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	005b      	lsls	r3, r3, #1
 801209e:	2203      	movs	r2, #3
 80120a0:	fa02 f303 	lsl.w	r3, r2, r3
 80120a4:	43db      	mvns	r3, r3
 80120a6:	69ba      	ldr	r2, [r7, #24]
 80120a8:	4013      	ands	r3, r2
 80120aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	f003 0203 	and.w	r2, r3, #3
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	fa02 f303 	lsl.w	r3, r2, r3
 80120bc:	69ba      	ldr	r2, [r7, #24]
 80120be:	4313      	orrs	r3, r2
 80120c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	69ba      	ldr	r2, [r7, #24]
 80120c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 80b4 	beq.w	801223e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80120d6:	2300      	movs	r3, #0
 80120d8:	60fb      	str	r3, [r7, #12]
 80120da:	4b60      	ldr	r3, [pc, #384]	; (801225c <HAL_GPIO_Init+0x30c>)
 80120dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120de:	4a5f      	ldr	r2, [pc, #380]	; (801225c <HAL_GPIO_Init+0x30c>)
 80120e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80120e4:	6453      	str	r3, [r2, #68]	; 0x44
 80120e6:	4b5d      	ldr	r3, [pc, #372]	; (801225c <HAL_GPIO_Init+0x30c>)
 80120e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120ee:	60fb      	str	r3, [r7, #12]
 80120f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80120f2:	4a5b      	ldr	r2, [pc, #364]	; (8012260 <HAL_GPIO_Init+0x310>)
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	089b      	lsrs	r3, r3, #2
 80120f8:	3302      	adds	r3, #2
 80120fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	f003 0303 	and.w	r3, r3, #3
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	220f      	movs	r2, #15
 801210a:	fa02 f303 	lsl.w	r3, r2, r3
 801210e:	43db      	mvns	r3, r3
 8012110:	69ba      	ldr	r2, [r7, #24]
 8012112:	4013      	ands	r3, r2
 8012114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4a52      	ldr	r2, [pc, #328]	; (8012264 <HAL_GPIO_Init+0x314>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d02b      	beq.n	8012176 <HAL_GPIO_Init+0x226>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4a51      	ldr	r2, [pc, #324]	; (8012268 <HAL_GPIO_Init+0x318>)
 8012122:	4293      	cmp	r3, r2
 8012124:	d025      	beq.n	8012172 <HAL_GPIO_Init+0x222>
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	4a50      	ldr	r2, [pc, #320]	; (801226c <HAL_GPIO_Init+0x31c>)
 801212a:	4293      	cmp	r3, r2
 801212c:	d01f      	beq.n	801216e <HAL_GPIO_Init+0x21e>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4a4f      	ldr	r2, [pc, #316]	; (8012270 <HAL_GPIO_Init+0x320>)
 8012132:	4293      	cmp	r3, r2
 8012134:	d019      	beq.n	801216a <HAL_GPIO_Init+0x21a>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4a4e      	ldr	r2, [pc, #312]	; (8012274 <HAL_GPIO_Init+0x324>)
 801213a:	4293      	cmp	r3, r2
 801213c:	d013      	beq.n	8012166 <HAL_GPIO_Init+0x216>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4a4d      	ldr	r2, [pc, #308]	; (8012278 <HAL_GPIO_Init+0x328>)
 8012142:	4293      	cmp	r3, r2
 8012144:	d00d      	beq.n	8012162 <HAL_GPIO_Init+0x212>
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4a4c      	ldr	r2, [pc, #304]	; (801227c <HAL_GPIO_Init+0x32c>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d007      	beq.n	801215e <HAL_GPIO_Init+0x20e>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	4a4b      	ldr	r2, [pc, #300]	; (8012280 <HAL_GPIO_Init+0x330>)
 8012152:	4293      	cmp	r3, r2
 8012154:	d101      	bne.n	801215a <HAL_GPIO_Init+0x20a>
 8012156:	2307      	movs	r3, #7
 8012158:	e00e      	b.n	8012178 <HAL_GPIO_Init+0x228>
 801215a:	2308      	movs	r3, #8
 801215c:	e00c      	b.n	8012178 <HAL_GPIO_Init+0x228>
 801215e:	2306      	movs	r3, #6
 8012160:	e00a      	b.n	8012178 <HAL_GPIO_Init+0x228>
 8012162:	2305      	movs	r3, #5
 8012164:	e008      	b.n	8012178 <HAL_GPIO_Init+0x228>
 8012166:	2304      	movs	r3, #4
 8012168:	e006      	b.n	8012178 <HAL_GPIO_Init+0x228>
 801216a:	2303      	movs	r3, #3
 801216c:	e004      	b.n	8012178 <HAL_GPIO_Init+0x228>
 801216e:	2302      	movs	r3, #2
 8012170:	e002      	b.n	8012178 <HAL_GPIO_Init+0x228>
 8012172:	2301      	movs	r3, #1
 8012174:	e000      	b.n	8012178 <HAL_GPIO_Init+0x228>
 8012176:	2300      	movs	r3, #0
 8012178:	69fa      	ldr	r2, [r7, #28]
 801217a:	f002 0203 	and.w	r2, r2, #3
 801217e:	0092      	lsls	r2, r2, #2
 8012180:	4093      	lsls	r3, r2
 8012182:	69ba      	ldr	r2, [r7, #24]
 8012184:	4313      	orrs	r3, r2
 8012186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012188:	4935      	ldr	r1, [pc, #212]	; (8012260 <HAL_GPIO_Init+0x310>)
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	089b      	lsrs	r3, r3, #2
 801218e:	3302      	adds	r3, #2
 8012190:	69ba      	ldr	r2, [r7, #24]
 8012192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012196:	4b3b      	ldr	r3, [pc, #236]	; (8012284 <HAL_GPIO_Init+0x334>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	43db      	mvns	r3, r3
 80121a0:	69ba      	ldr	r2, [r7, #24]
 80121a2:	4013      	ands	r3, r2
 80121a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d003      	beq.n	80121ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80121b2:	69ba      	ldr	r2, [r7, #24]
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	4313      	orrs	r3, r2
 80121b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80121ba:	4a32      	ldr	r2, [pc, #200]	; (8012284 <HAL_GPIO_Init+0x334>)
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80121c0:	4b30      	ldr	r3, [pc, #192]	; (8012284 <HAL_GPIO_Init+0x334>)
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	43db      	mvns	r3, r3
 80121ca:	69ba      	ldr	r2, [r7, #24]
 80121cc:	4013      	ands	r3, r2
 80121ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d003      	beq.n	80121e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80121dc:	69ba      	ldr	r2, [r7, #24]
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	4313      	orrs	r3, r2
 80121e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80121e4:	4a27      	ldr	r2, [pc, #156]	; (8012284 <HAL_GPIO_Init+0x334>)
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80121ea:	4b26      	ldr	r3, [pc, #152]	; (8012284 <HAL_GPIO_Init+0x334>)
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	43db      	mvns	r3, r3
 80121f4:	69ba      	ldr	r2, [r7, #24]
 80121f6:	4013      	ands	r3, r2
 80121f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012202:	2b00      	cmp	r3, #0
 8012204:	d003      	beq.n	801220e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012206:	69ba      	ldr	r2, [r7, #24]
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	4313      	orrs	r3, r2
 801220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801220e:	4a1d      	ldr	r2, [pc, #116]	; (8012284 <HAL_GPIO_Init+0x334>)
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012214:	4b1b      	ldr	r3, [pc, #108]	; (8012284 <HAL_GPIO_Init+0x334>)
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	43db      	mvns	r3, r3
 801221e:	69ba      	ldr	r2, [r7, #24]
 8012220:	4013      	ands	r3, r2
 8012222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801222c:	2b00      	cmp	r3, #0
 801222e:	d003      	beq.n	8012238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012230:	69ba      	ldr	r2, [r7, #24]
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	4313      	orrs	r3, r2
 8012236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012238:	4a12      	ldr	r2, [pc, #72]	; (8012284 <HAL_GPIO_Init+0x334>)
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	3301      	adds	r3, #1
 8012242:	61fb      	str	r3, [r7, #28]
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	2b0f      	cmp	r3, #15
 8012248:	f67f ae90 	bls.w	8011f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801224c:	bf00      	nop
 801224e:	bf00      	nop
 8012250:	3724      	adds	r7, #36	; 0x24
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	40023800 	.word	0x40023800
 8012260:	40013800 	.word	0x40013800
 8012264:	40020000 	.word	0x40020000
 8012268:	40020400 	.word	0x40020400
 801226c:	40020800 	.word	0x40020800
 8012270:	40020c00 	.word	0x40020c00
 8012274:	40021000 	.word	0x40021000
 8012278:	40021400 	.word	0x40021400
 801227c:	40021800 	.word	0x40021800
 8012280:	40021c00 	.word	0x40021c00
 8012284:	40013c00 	.word	0x40013c00

08012288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	460b      	mov	r3, r1
 8012292:	807b      	strh	r3, [r7, #2]
 8012294:	4613      	mov	r3, r2
 8012296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012298:	787b      	ldrb	r3, [r7, #1]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d003      	beq.n	80122a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801229e:	887a      	ldrh	r2, [r7, #2]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80122a4:	e003      	b.n	80122ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80122a6:	887b      	ldrh	r3, [r7, #2]
 80122a8:	041a      	lsls	r2, r3, #16
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	619a      	str	r2, [r3, #24]
}
 80122ae:	bf00      	nop
 80122b0:	370c      	adds	r7, #12
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr

080122ba <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80122ba:	b480      	push	{r7}
 80122bc:	b083      	sub	sp, #12
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80122ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	370c      	adds	r7, #12
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr
	...

080122dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b086      	sub	sp, #24
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d101      	bne.n	80122ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80122ea:	2301      	movs	r3, #1
 80122ec:	e264      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f003 0301 	and.w	r3, r3, #1
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d075      	beq.n	80123e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80122fa:	4ba3      	ldr	r3, [pc, #652]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 80122fc:	689b      	ldr	r3, [r3, #8]
 80122fe:	f003 030c 	and.w	r3, r3, #12
 8012302:	2b04      	cmp	r3, #4
 8012304:	d00c      	beq.n	8012320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012306:	4ba0      	ldr	r3, [pc, #640]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801230e:	2b08      	cmp	r3, #8
 8012310:	d112      	bne.n	8012338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012312:	4b9d      	ldr	r3, [pc, #628]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801231a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801231e:	d10b      	bne.n	8012338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012320:	4b99      	ldr	r3, [pc, #612]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d05b      	beq.n	80123e4 <HAL_RCC_OscConfig+0x108>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d157      	bne.n	80123e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012334:	2301      	movs	r3, #1
 8012336:	e23f      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012340:	d106      	bne.n	8012350 <HAL_RCC_OscConfig+0x74>
 8012342:	4b91      	ldr	r3, [pc, #580]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4a90      	ldr	r2, [pc, #576]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801234c:	6013      	str	r3, [r2, #0]
 801234e:	e01d      	b.n	801238c <HAL_RCC_OscConfig+0xb0>
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012358:	d10c      	bne.n	8012374 <HAL_RCC_OscConfig+0x98>
 801235a:	4b8b      	ldr	r3, [pc, #556]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4a8a      	ldr	r2, [pc, #552]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012364:	6013      	str	r3, [r2, #0]
 8012366:	4b88      	ldr	r3, [pc, #544]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4a87      	ldr	r2, [pc, #540]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012370:	6013      	str	r3, [r2, #0]
 8012372:	e00b      	b.n	801238c <HAL_RCC_OscConfig+0xb0>
 8012374:	4b84      	ldr	r3, [pc, #528]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4a83      	ldr	r2, [pc, #524]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801237a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801237e:	6013      	str	r3, [r2, #0]
 8012380:	4b81      	ldr	r3, [pc, #516]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a80      	ldr	r2, [pc, #512]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d013      	beq.n	80123bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012394:	f7fd ffcc 	bl	8010330 <HAL_GetTick>
 8012398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801239a:	e008      	b.n	80123ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801239c:	f7fd ffc8 	bl	8010330 <HAL_GetTick>
 80123a0:	4602      	mov	r2, r0
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	2b64      	cmp	r3, #100	; 0x64
 80123a8:	d901      	bls.n	80123ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80123aa:	2303      	movs	r3, #3
 80123ac:	e204      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80123ae:	4b76      	ldr	r3, [pc, #472]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d0f0      	beq.n	801239c <HAL_RCC_OscConfig+0xc0>
 80123ba:	e014      	b.n	80123e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80123bc:	f7fd ffb8 	bl	8010330 <HAL_GetTick>
 80123c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80123c2:	e008      	b.n	80123d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80123c4:	f7fd ffb4 	bl	8010330 <HAL_GetTick>
 80123c8:	4602      	mov	r2, r0
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	2b64      	cmp	r3, #100	; 0x64
 80123d0:	d901      	bls.n	80123d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80123d2:	2303      	movs	r3, #3
 80123d4:	e1f0      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80123d6:	4b6c      	ldr	r3, [pc, #432]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d1f0      	bne.n	80123c4 <HAL_RCC_OscConfig+0xe8>
 80123e2:	e000      	b.n	80123e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80123e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f003 0302 	and.w	r3, r3, #2
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d063      	beq.n	80124ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80123f2:	4b65      	ldr	r3, [pc, #404]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 80123f4:	689b      	ldr	r3, [r3, #8]
 80123f6:	f003 030c 	and.w	r3, r3, #12
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00b      	beq.n	8012416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80123fe:	4b62      	ldr	r3, [pc, #392]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012400:	689b      	ldr	r3, [r3, #8]
 8012402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012406:	2b08      	cmp	r3, #8
 8012408:	d11c      	bne.n	8012444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801240a:	4b5f      	ldr	r3, [pc, #380]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012412:	2b00      	cmp	r3, #0
 8012414:	d116      	bne.n	8012444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012416:	4b5c      	ldr	r3, [pc, #368]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f003 0302 	and.w	r3, r3, #2
 801241e:	2b00      	cmp	r3, #0
 8012420:	d005      	beq.n	801242e <HAL_RCC_OscConfig+0x152>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	2b01      	cmp	r3, #1
 8012428:	d001      	beq.n	801242e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801242a:	2301      	movs	r3, #1
 801242c:	e1c4      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801242e:	4b56      	ldr	r3, [pc, #344]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	691b      	ldr	r3, [r3, #16]
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	4952      	ldr	r1, [pc, #328]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801243e:	4313      	orrs	r3, r2
 8012440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012442:	e03a      	b.n	80124ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d020      	beq.n	801248e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801244c:	4b4f      	ldr	r3, [pc, #316]	; (801258c <HAL_RCC_OscConfig+0x2b0>)
 801244e:	2201      	movs	r2, #1
 8012450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012452:	f7fd ff6d 	bl	8010330 <HAL_GetTick>
 8012456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012458:	e008      	b.n	801246c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801245a:	f7fd ff69 	bl	8010330 <HAL_GetTick>
 801245e:	4602      	mov	r2, r0
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	2b02      	cmp	r3, #2
 8012466:	d901      	bls.n	801246c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012468:	2303      	movs	r3, #3
 801246a:	e1a5      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801246c:	4b46      	ldr	r3, [pc, #280]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f003 0302 	and.w	r3, r3, #2
 8012474:	2b00      	cmp	r3, #0
 8012476:	d0f0      	beq.n	801245a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012478:	4b43      	ldr	r3, [pc, #268]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	00db      	lsls	r3, r3, #3
 8012486:	4940      	ldr	r1, [pc, #256]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012488:	4313      	orrs	r3, r2
 801248a:	600b      	str	r3, [r1, #0]
 801248c:	e015      	b.n	80124ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801248e:	4b3f      	ldr	r3, [pc, #252]	; (801258c <HAL_RCC_OscConfig+0x2b0>)
 8012490:	2200      	movs	r2, #0
 8012492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012494:	f7fd ff4c 	bl	8010330 <HAL_GetTick>
 8012498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801249a:	e008      	b.n	80124ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801249c:	f7fd ff48 	bl	8010330 <HAL_GetTick>
 80124a0:	4602      	mov	r2, r0
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	1ad3      	subs	r3, r2, r3
 80124a6:	2b02      	cmp	r3, #2
 80124a8:	d901      	bls.n	80124ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80124aa:	2303      	movs	r3, #3
 80124ac:	e184      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80124ae:	4b36      	ldr	r3, [pc, #216]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	f003 0302 	and.w	r3, r3, #2
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1f0      	bne.n	801249c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f003 0308 	and.w	r3, r3, #8
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d030      	beq.n	8012528 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	695b      	ldr	r3, [r3, #20]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d016      	beq.n	80124fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80124ce:	4b30      	ldr	r3, [pc, #192]	; (8012590 <HAL_RCC_OscConfig+0x2b4>)
 80124d0:	2201      	movs	r2, #1
 80124d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80124d4:	f7fd ff2c 	bl	8010330 <HAL_GetTick>
 80124d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80124da:	e008      	b.n	80124ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80124dc:	f7fd ff28 	bl	8010330 <HAL_GetTick>
 80124e0:	4602      	mov	r2, r0
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	2b02      	cmp	r3, #2
 80124e8:	d901      	bls.n	80124ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80124ea:	2303      	movs	r3, #3
 80124ec:	e164      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80124ee:	4b26      	ldr	r3, [pc, #152]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 80124f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124f2:	f003 0302 	and.w	r3, r3, #2
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d0f0      	beq.n	80124dc <HAL_RCC_OscConfig+0x200>
 80124fa:	e015      	b.n	8012528 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80124fc:	4b24      	ldr	r3, [pc, #144]	; (8012590 <HAL_RCC_OscConfig+0x2b4>)
 80124fe:	2200      	movs	r2, #0
 8012500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012502:	f7fd ff15 	bl	8010330 <HAL_GetTick>
 8012506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012508:	e008      	b.n	801251c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801250a:	f7fd ff11 	bl	8010330 <HAL_GetTick>
 801250e:	4602      	mov	r2, r0
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	1ad3      	subs	r3, r2, r3
 8012514:	2b02      	cmp	r3, #2
 8012516:	d901      	bls.n	801251c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012518:	2303      	movs	r3, #3
 801251a:	e14d      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801251c:	4b1a      	ldr	r3, [pc, #104]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012520:	f003 0302 	and.w	r3, r3, #2
 8012524:	2b00      	cmp	r3, #0
 8012526:	d1f0      	bne.n	801250a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	f003 0304 	and.w	r3, r3, #4
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 80a0 	beq.w	8012676 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012536:	2300      	movs	r3, #0
 8012538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801253a:	4b13      	ldr	r3, [pc, #76]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10f      	bne.n	8012566 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012546:	2300      	movs	r3, #0
 8012548:	60bb      	str	r3, [r7, #8]
 801254a:	4b0f      	ldr	r3, [pc, #60]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 801254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801254e:	4a0e      	ldr	r2, [pc, #56]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012554:	6413      	str	r3, [r2, #64]	; 0x40
 8012556:	4b0c      	ldr	r3, [pc, #48]	; (8012588 <HAL_RCC_OscConfig+0x2ac>)
 8012558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801255e:	60bb      	str	r3, [r7, #8]
 8012560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012562:	2301      	movs	r3, #1
 8012564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012566:	4b0b      	ldr	r3, [pc, #44]	; (8012594 <HAL_RCC_OscConfig+0x2b8>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801256e:	2b00      	cmp	r3, #0
 8012570:	d121      	bne.n	80125b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012572:	4b08      	ldr	r3, [pc, #32]	; (8012594 <HAL_RCC_OscConfig+0x2b8>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4a07      	ldr	r2, [pc, #28]	; (8012594 <HAL_RCC_OscConfig+0x2b8>)
 8012578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801257c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801257e:	f7fd fed7 	bl	8010330 <HAL_GetTick>
 8012582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012584:	e011      	b.n	80125aa <HAL_RCC_OscConfig+0x2ce>
 8012586:	bf00      	nop
 8012588:	40023800 	.word	0x40023800
 801258c:	42470000 	.word	0x42470000
 8012590:	42470e80 	.word	0x42470e80
 8012594:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012598:	f7fd feca 	bl	8010330 <HAL_GetTick>
 801259c:	4602      	mov	r2, r0
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d901      	bls.n	80125aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80125a6:	2303      	movs	r3, #3
 80125a8:	e106      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80125aa:	4b85      	ldr	r3, [pc, #532]	; (80127c0 <HAL_RCC_OscConfig+0x4e4>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d0f0      	beq.n	8012598 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d106      	bne.n	80125cc <HAL_RCC_OscConfig+0x2f0>
 80125be:	4b81      	ldr	r3, [pc, #516]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125c2:	4a80      	ldr	r2, [pc, #512]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125c4:	f043 0301 	orr.w	r3, r3, #1
 80125c8:	6713      	str	r3, [r2, #112]	; 0x70
 80125ca:	e01c      	b.n	8012606 <HAL_RCC_OscConfig+0x32a>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	689b      	ldr	r3, [r3, #8]
 80125d0:	2b05      	cmp	r3, #5
 80125d2:	d10c      	bne.n	80125ee <HAL_RCC_OscConfig+0x312>
 80125d4:	4b7b      	ldr	r3, [pc, #492]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125d8:	4a7a      	ldr	r2, [pc, #488]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125da:	f043 0304 	orr.w	r3, r3, #4
 80125de:	6713      	str	r3, [r2, #112]	; 0x70
 80125e0:	4b78      	ldr	r3, [pc, #480]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125e4:	4a77      	ldr	r2, [pc, #476]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125e6:	f043 0301 	orr.w	r3, r3, #1
 80125ea:	6713      	str	r3, [r2, #112]	; 0x70
 80125ec:	e00b      	b.n	8012606 <HAL_RCC_OscConfig+0x32a>
 80125ee:	4b75      	ldr	r3, [pc, #468]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125f2:	4a74      	ldr	r2, [pc, #464]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125f4:	f023 0301 	bic.w	r3, r3, #1
 80125f8:	6713      	str	r3, [r2, #112]	; 0x70
 80125fa:	4b72      	ldr	r3, [pc, #456]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80125fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125fe:	4a71      	ldr	r2, [pc, #452]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 8012600:	f023 0304 	bic.w	r3, r3, #4
 8012604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d015      	beq.n	801263a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801260e:	f7fd fe8f 	bl	8010330 <HAL_GetTick>
 8012612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012614:	e00a      	b.n	801262c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012616:	f7fd fe8b 	bl	8010330 <HAL_GetTick>
 801261a:	4602      	mov	r2, r0
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	f241 3288 	movw	r2, #5000	; 0x1388
 8012624:	4293      	cmp	r3, r2
 8012626:	d901      	bls.n	801262c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012628:	2303      	movs	r3, #3
 801262a:	e0c5      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801262c:	4b65      	ldr	r3, [pc, #404]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 801262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012630:	f003 0302 	and.w	r3, r3, #2
 8012634:	2b00      	cmp	r3, #0
 8012636:	d0ee      	beq.n	8012616 <HAL_RCC_OscConfig+0x33a>
 8012638:	e014      	b.n	8012664 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801263a:	f7fd fe79 	bl	8010330 <HAL_GetTick>
 801263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012640:	e00a      	b.n	8012658 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012642:	f7fd fe75 	bl	8010330 <HAL_GetTick>
 8012646:	4602      	mov	r2, r0
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012650:	4293      	cmp	r3, r2
 8012652:	d901      	bls.n	8012658 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012654:	2303      	movs	r3, #3
 8012656:	e0af      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012658:	4b5a      	ldr	r3, [pc, #360]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 801265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801265c:	f003 0302 	and.w	r3, r3, #2
 8012660:	2b00      	cmp	r3, #0
 8012662:	d1ee      	bne.n	8012642 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012664:	7dfb      	ldrb	r3, [r7, #23]
 8012666:	2b01      	cmp	r3, #1
 8012668:	d105      	bne.n	8012676 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801266a:	4b56      	ldr	r3, [pc, #344]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 801266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801266e:	4a55      	ldr	r2, [pc, #340]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 8012670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	699b      	ldr	r3, [r3, #24]
 801267a:	2b00      	cmp	r3, #0
 801267c:	f000 809b 	beq.w	80127b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012680:	4b50      	ldr	r3, [pc, #320]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	f003 030c 	and.w	r3, r3, #12
 8012688:	2b08      	cmp	r3, #8
 801268a:	d05c      	beq.n	8012746 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	699b      	ldr	r3, [r3, #24]
 8012690:	2b02      	cmp	r3, #2
 8012692:	d141      	bne.n	8012718 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012694:	4b4c      	ldr	r3, [pc, #304]	; (80127c8 <HAL_RCC_OscConfig+0x4ec>)
 8012696:	2200      	movs	r2, #0
 8012698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801269a:	f7fd fe49 	bl	8010330 <HAL_GetTick>
 801269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80126a0:	e008      	b.n	80126b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80126a2:	f7fd fe45 	bl	8010330 <HAL_GetTick>
 80126a6:	4602      	mov	r2, r0
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	1ad3      	subs	r3, r2, r3
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d901      	bls.n	80126b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80126b0:	2303      	movs	r3, #3
 80126b2:	e081      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80126b4:	4b43      	ldr	r3, [pc, #268]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d1f0      	bne.n	80126a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	69da      	ldr	r2, [r3, #28]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6a1b      	ldr	r3, [r3, #32]
 80126c8:	431a      	orrs	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ce:	019b      	lsls	r3, r3, #6
 80126d0:	431a      	orrs	r2, r3
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126d6:	085b      	lsrs	r3, r3, #1
 80126d8:	3b01      	subs	r3, #1
 80126da:	041b      	lsls	r3, r3, #16
 80126dc:	431a      	orrs	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126e2:	061b      	lsls	r3, r3, #24
 80126e4:	4937      	ldr	r1, [pc, #220]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 80126e6:	4313      	orrs	r3, r2
 80126e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80126ea:	4b37      	ldr	r3, [pc, #220]	; (80127c8 <HAL_RCC_OscConfig+0x4ec>)
 80126ec:	2201      	movs	r2, #1
 80126ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80126f0:	f7fd fe1e 	bl	8010330 <HAL_GetTick>
 80126f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126f6:	e008      	b.n	801270a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80126f8:	f7fd fe1a 	bl	8010330 <HAL_GetTick>
 80126fc:	4602      	mov	r2, r0
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	2b02      	cmp	r3, #2
 8012704:	d901      	bls.n	801270a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012706:	2303      	movs	r3, #3
 8012708:	e056      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801270a:	4b2e      	ldr	r3, [pc, #184]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012712:	2b00      	cmp	r3, #0
 8012714:	d0f0      	beq.n	80126f8 <HAL_RCC_OscConfig+0x41c>
 8012716:	e04e      	b.n	80127b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012718:	4b2b      	ldr	r3, [pc, #172]	; (80127c8 <HAL_RCC_OscConfig+0x4ec>)
 801271a:	2200      	movs	r2, #0
 801271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801271e:	f7fd fe07 	bl	8010330 <HAL_GetTick>
 8012722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012724:	e008      	b.n	8012738 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012726:	f7fd fe03 	bl	8010330 <HAL_GetTick>
 801272a:	4602      	mov	r2, r0
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	1ad3      	subs	r3, r2, r3
 8012730:	2b02      	cmp	r3, #2
 8012732:	d901      	bls.n	8012738 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012734:	2303      	movs	r3, #3
 8012736:	e03f      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012738:	4b22      	ldr	r3, [pc, #136]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012740:	2b00      	cmp	r3, #0
 8012742:	d1f0      	bne.n	8012726 <HAL_RCC_OscConfig+0x44a>
 8012744:	e037      	b.n	80127b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d101      	bne.n	8012752 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801274e:	2301      	movs	r3, #1
 8012750:	e032      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012752:	4b1c      	ldr	r3, [pc, #112]	; (80127c4 <HAL_RCC_OscConfig+0x4e8>)
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	699b      	ldr	r3, [r3, #24]
 801275c:	2b01      	cmp	r3, #1
 801275e:	d028      	beq.n	80127b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801276a:	429a      	cmp	r2, r3
 801276c:	d121      	bne.n	80127b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012778:	429a      	cmp	r2, r3
 801277a:	d11a      	bne.n	80127b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012782:	4013      	ands	r3, r2
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012788:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801278a:	4293      	cmp	r3, r2
 801278c:	d111      	bne.n	80127b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012798:	085b      	lsrs	r3, r3, #1
 801279a:	3b01      	subs	r3, #1
 801279c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801279e:	429a      	cmp	r2, r3
 80127a0:	d107      	bne.n	80127b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d001      	beq.n	80127b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80127b2:	2301      	movs	r3, #1
 80127b4:	e000      	b.n	80127b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80127b6:	2300      	movs	r3, #0
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3718      	adds	r7, #24
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	40007000 	.word	0x40007000
 80127c4:	40023800 	.word	0x40023800
 80127c8:	42470060 	.word	0x42470060

080127cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d101      	bne.n	80127e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80127dc:	2301      	movs	r3, #1
 80127de:	e0cc      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80127e0:	4b68      	ldr	r3, [pc, #416]	; (8012984 <HAL_RCC_ClockConfig+0x1b8>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f003 0307 	and.w	r3, r3, #7
 80127e8:	683a      	ldr	r2, [r7, #0]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d90c      	bls.n	8012808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80127ee:	4b65      	ldr	r3, [pc, #404]	; (8012984 <HAL_RCC_ClockConfig+0x1b8>)
 80127f0:	683a      	ldr	r2, [r7, #0]
 80127f2:	b2d2      	uxtb	r2, r2
 80127f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80127f6:	4b63      	ldr	r3, [pc, #396]	; (8012984 <HAL_RCC_ClockConfig+0x1b8>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f003 0307 	and.w	r3, r3, #7
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	429a      	cmp	r2, r3
 8012802:	d001      	beq.n	8012808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012804:	2301      	movs	r3, #1
 8012806:	e0b8      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f003 0302 	and.w	r3, r3, #2
 8012810:	2b00      	cmp	r3, #0
 8012812:	d020      	beq.n	8012856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f003 0304 	and.w	r3, r3, #4
 801281c:	2b00      	cmp	r3, #0
 801281e:	d005      	beq.n	801282c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012820:	4b59      	ldr	r3, [pc, #356]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 8012822:	689b      	ldr	r3, [r3, #8]
 8012824:	4a58      	ldr	r2, [pc, #352]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 8012826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801282a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f003 0308 	and.w	r3, r3, #8
 8012834:	2b00      	cmp	r3, #0
 8012836:	d005      	beq.n	8012844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012838:	4b53      	ldr	r3, [pc, #332]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801283a:	689b      	ldr	r3, [r3, #8]
 801283c:	4a52      	ldr	r2, [pc, #328]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801283e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012844:	4b50      	ldr	r3, [pc, #320]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 8012846:	689b      	ldr	r3, [r3, #8]
 8012848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	494d      	ldr	r1, [pc, #308]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 8012852:	4313      	orrs	r3, r2
 8012854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f003 0301 	and.w	r3, r3, #1
 801285e:	2b00      	cmp	r3, #0
 8012860:	d044      	beq.n	80128ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d107      	bne.n	801287a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801286a:	4b47      	ldr	r3, [pc, #284]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012872:	2b00      	cmp	r3, #0
 8012874:	d119      	bne.n	80128aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012876:	2301      	movs	r3, #1
 8012878:	e07f      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	2b02      	cmp	r3, #2
 8012880:	d003      	beq.n	801288a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012886:	2b03      	cmp	r3, #3
 8012888:	d107      	bne.n	801289a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801288a:	4b3f      	ldr	r3, [pc, #252]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012892:	2b00      	cmp	r3, #0
 8012894:	d109      	bne.n	80128aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012896:	2301      	movs	r3, #1
 8012898:	e06f      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801289a:	4b3b      	ldr	r3, [pc, #236]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f003 0302 	and.w	r3, r3, #2
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d101      	bne.n	80128aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80128a6:	2301      	movs	r3, #1
 80128a8:	e067      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80128aa:	4b37      	ldr	r3, [pc, #220]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	f023 0203 	bic.w	r2, r3, #3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	4934      	ldr	r1, [pc, #208]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 80128b8:	4313      	orrs	r3, r2
 80128ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80128bc:	f7fd fd38 	bl	8010330 <HAL_GetTick>
 80128c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80128c2:	e00a      	b.n	80128da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128c4:	f7fd fd34 	bl	8010330 <HAL_GetTick>
 80128c8:	4602      	mov	r2, r0
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	1ad3      	subs	r3, r2, r3
 80128ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d901      	bls.n	80128da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80128d6:	2303      	movs	r3, #3
 80128d8:	e04f      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80128da:	4b2b      	ldr	r3, [pc, #172]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 80128dc:	689b      	ldr	r3, [r3, #8]
 80128de:	f003 020c 	and.w	r2, r3, #12
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d1eb      	bne.n	80128c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80128ec:	4b25      	ldr	r3, [pc, #148]	; (8012984 <HAL_RCC_ClockConfig+0x1b8>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f003 0307 	and.w	r3, r3, #7
 80128f4:	683a      	ldr	r2, [r7, #0]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d20c      	bcs.n	8012914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80128fa:	4b22      	ldr	r3, [pc, #136]	; (8012984 <HAL_RCC_ClockConfig+0x1b8>)
 80128fc:	683a      	ldr	r2, [r7, #0]
 80128fe:	b2d2      	uxtb	r2, r2
 8012900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012902:	4b20      	ldr	r3, [pc, #128]	; (8012984 <HAL_RCC_ClockConfig+0x1b8>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	f003 0307 	and.w	r3, r3, #7
 801290a:	683a      	ldr	r2, [r7, #0]
 801290c:	429a      	cmp	r2, r3
 801290e:	d001      	beq.n	8012914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012910:	2301      	movs	r3, #1
 8012912:	e032      	b.n	801297a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f003 0304 	and.w	r3, r3, #4
 801291c:	2b00      	cmp	r3, #0
 801291e:	d008      	beq.n	8012932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012920:	4b19      	ldr	r3, [pc, #100]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 8012922:	689b      	ldr	r3, [r3, #8]
 8012924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	68db      	ldr	r3, [r3, #12]
 801292c:	4916      	ldr	r1, [pc, #88]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801292e:	4313      	orrs	r3, r2
 8012930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f003 0308 	and.w	r3, r3, #8
 801293a:	2b00      	cmp	r3, #0
 801293c:	d009      	beq.n	8012952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801293e:	4b12      	ldr	r3, [pc, #72]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	691b      	ldr	r3, [r3, #16]
 801294a:	00db      	lsls	r3, r3, #3
 801294c:	490e      	ldr	r1, [pc, #56]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801294e:	4313      	orrs	r3, r2
 8012950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012952:	f000 f821 	bl	8012998 <HAL_RCC_GetSysClockFreq>
 8012956:	4602      	mov	r2, r0
 8012958:	4b0b      	ldr	r3, [pc, #44]	; (8012988 <HAL_RCC_ClockConfig+0x1bc>)
 801295a:	689b      	ldr	r3, [r3, #8]
 801295c:	091b      	lsrs	r3, r3, #4
 801295e:	f003 030f 	and.w	r3, r3, #15
 8012962:	490a      	ldr	r1, [pc, #40]	; (801298c <HAL_RCC_ClockConfig+0x1c0>)
 8012964:	5ccb      	ldrb	r3, [r1, r3]
 8012966:	fa22 f303 	lsr.w	r3, r2, r3
 801296a:	4a09      	ldr	r2, [pc, #36]	; (8012990 <HAL_RCC_ClockConfig+0x1c4>)
 801296c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801296e:	4b09      	ldr	r3, [pc, #36]	; (8012994 <HAL_RCC_ClockConfig+0x1c8>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4618      	mov	r0, r3
 8012974:	f7f2 f920 	bl	8004bb8 <HAL_InitTick>

  return HAL_OK;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	40023c00 	.word	0x40023c00
 8012988:	40023800 	.word	0x40023800
 801298c:	0801aec4 	.word	0x0801aec4
 8012990:	20000080 	.word	0x20000080
 8012994:	20001438 	.word	0x20001438

08012998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012998:	b5b0      	push	{r4, r5, r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801299e:	2100      	movs	r1, #0
 80129a0:	6079      	str	r1, [r7, #4]
 80129a2:	2100      	movs	r1, #0
 80129a4:	60f9      	str	r1, [r7, #12]
 80129a6:	2100      	movs	r1, #0
 80129a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80129aa:	2100      	movs	r1, #0
 80129ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80129ae:	4952      	ldr	r1, [pc, #328]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80129b0:	6889      	ldr	r1, [r1, #8]
 80129b2:	f001 010c 	and.w	r1, r1, #12
 80129b6:	2908      	cmp	r1, #8
 80129b8:	d00d      	beq.n	80129d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80129ba:	2908      	cmp	r1, #8
 80129bc:	f200 8094 	bhi.w	8012ae8 <HAL_RCC_GetSysClockFreq+0x150>
 80129c0:	2900      	cmp	r1, #0
 80129c2:	d002      	beq.n	80129ca <HAL_RCC_GetSysClockFreq+0x32>
 80129c4:	2904      	cmp	r1, #4
 80129c6:	d003      	beq.n	80129d0 <HAL_RCC_GetSysClockFreq+0x38>
 80129c8:	e08e      	b.n	8012ae8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80129ca:	4b4c      	ldr	r3, [pc, #304]	; (8012afc <HAL_RCC_GetSysClockFreq+0x164>)
 80129cc:	60bb      	str	r3, [r7, #8]
       break;
 80129ce:	e08e      	b.n	8012aee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80129d0:	4b4b      	ldr	r3, [pc, #300]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x168>)
 80129d2:	60bb      	str	r3, [r7, #8]
      break;
 80129d4:	e08b      	b.n	8012aee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80129d6:	4948      	ldr	r1, [pc, #288]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80129d8:	6849      	ldr	r1, [r1, #4]
 80129da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80129de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80129e0:	4945      	ldr	r1, [pc, #276]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80129e2:	6849      	ldr	r1, [r1, #4]
 80129e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80129e8:	2900      	cmp	r1, #0
 80129ea:	d024      	beq.n	8012a36 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80129ec:	4942      	ldr	r1, [pc, #264]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80129ee:	6849      	ldr	r1, [r1, #4]
 80129f0:	0989      	lsrs	r1, r1, #6
 80129f2:	4608      	mov	r0, r1
 80129f4:	f04f 0100 	mov.w	r1, #0
 80129f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80129fc:	f04f 0500 	mov.w	r5, #0
 8012a00:	ea00 0204 	and.w	r2, r0, r4
 8012a04:	ea01 0305 	and.w	r3, r1, r5
 8012a08:	493d      	ldr	r1, [pc, #244]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x168>)
 8012a0a:	fb01 f003 	mul.w	r0, r1, r3
 8012a0e:	2100      	movs	r1, #0
 8012a10:	fb01 f102 	mul.w	r1, r1, r2
 8012a14:	1844      	adds	r4, r0, r1
 8012a16:	493a      	ldr	r1, [pc, #232]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x168>)
 8012a18:	fba2 0101 	umull	r0, r1, r2, r1
 8012a1c:	1863      	adds	r3, r4, r1
 8012a1e:	4619      	mov	r1, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	461a      	mov	r2, r3
 8012a24:	f04f 0300 	mov.w	r3, #0
 8012a28:	f7ee f920 	bl	8000c6c <__aeabi_uldivmod>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	460b      	mov	r3, r1
 8012a30:	4613      	mov	r3, r2
 8012a32:	60fb      	str	r3, [r7, #12]
 8012a34:	e04a      	b.n	8012acc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012a36:	4b30      	ldr	r3, [pc, #192]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x160>)
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	099b      	lsrs	r3, r3, #6
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	f04f 0300 	mov.w	r3, #0
 8012a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012a46:	f04f 0100 	mov.w	r1, #0
 8012a4a:	ea02 0400 	and.w	r4, r2, r0
 8012a4e:	ea03 0501 	and.w	r5, r3, r1
 8012a52:	4620      	mov	r0, r4
 8012a54:	4629      	mov	r1, r5
 8012a56:	f04f 0200 	mov.w	r2, #0
 8012a5a:	f04f 0300 	mov.w	r3, #0
 8012a5e:	014b      	lsls	r3, r1, #5
 8012a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012a64:	0142      	lsls	r2, r0, #5
 8012a66:	4610      	mov	r0, r2
 8012a68:	4619      	mov	r1, r3
 8012a6a:	1b00      	subs	r0, r0, r4
 8012a6c:	eb61 0105 	sbc.w	r1, r1, r5
 8012a70:	f04f 0200 	mov.w	r2, #0
 8012a74:	f04f 0300 	mov.w	r3, #0
 8012a78:	018b      	lsls	r3, r1, #6
 8012a7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012a7e:	0182      	lsls	r2, r0, #6
 8012a80:	1a12      	subs	r2, r2, r0
 8012a82:	eb63 0301 	sbc.w	r3, r3, r1
 8012a86:	f04f 0000 	mov.w	r0, #0
 8012a8a:	f04f 0100 	mov.w	r1, #0
 8012a8e:	00d9      	lsls	r1, r3, #3
 8012a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012a94:	00d0      	lsls	r0, r2, #3
 8012a96:	4602      	mov	r2, r0
 8012a98:	460b      	mov	r3, r1
 8012a9a:	1912      	adds	r2, r2, r4
 8012a9c:	eb45 0303 	adc.w	r3, r5, r3
 8012aa0:	f04f 0000 	mov.w	r0, #0
 8012aa4:	f04f 0100 	mov.w	r1, #0
 8012aa8:	0299      	lsls	r1, r3, #10
 8012aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8012aae:	0290      	lsls	r0, r2, #10
 8012ab0:	4602      	mov	r2, r0
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	4610      	mov	r0, r2
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	461a      	mov	r2, r3
 8012abc:	f04f 0300 	mov.w	r3, #0
 8012ac0:	f7ee f8d4 	bl	8000c6c <__aeabi_uldivmod>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	4613      	mov	r3, r2
 8012aca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012acc:	4b0a      	ldr	r3, [pc, #40]	; (8012af8 <HAL_RCC_GetSysClockFreq+0x160>)
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	0c1b      	lsrs	r3, r3, #16
 8012ad2:	f003 0303 	and.w	r3, r3, #3
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	005b      	lsls	r3, r3, #1
 8012ada:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ae4:	60bb      	str	r3, [r7, #8]
      break;
 8012ae6:	e002      	b.n	8012aee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012ae8:	4b04      	ldr	r3, [pc, #16]	; (8012afc <HAL_RCC_GetSysClockFreq+0x164>)
 8012aea:	60bb      	str	r3, [r7, #8]
      break;
 8012aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012aee:	68bb      	ldr	r3, [r7, #8]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3710      	adds	r7, #16
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bdb0      	pop	{r4, r5, r7, pc}
 8012af8:	40023800 	.word	0x40023800
 8012afc:	00f42400 	.word	0x00f42400
 8012b00:	017d7840 	.word	0x017d7840

08012b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012b04:	b480      	push	{r7}
 8012b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012b08:	4b03      	ldr	r3, [pc, #12]	; (8012b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr
 8012b16:	bf00      	nop
 8012b18:	20000080 	.word	0x20000080

08012b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012b20:	f7ff fff0 	bl	8012b04 <HAL_RCC_GetHCLKFreq>
 8012b24:	4602      	mov	r2, r0
 8012b26:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	0a9b      	lsrs	r3, r3, #10
 8012b2c:	f003 0307 	and.w	r3, r3, #7
 8012b30:	4903      	ldr	r1, [pc, #12]	; (8012b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012b32:	5ccb      	ldrb	r3, [r1, r3]
 8012b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	40023800 	.word	0x40023800
 8012b40:	0801aed4 	.word	0x0801aed4

08012b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	220f      	movs	r2, #15
 8012b52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012b54:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	f003 0203 	and.w	r2, r3, #3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012b60:	4b0f      	ldr	r3, [pc, #60]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b62:	689b      	ldr	r3, [r3, #8]
 8012b64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b6e:	689b      	ldr	r3, [r3, #8]
 8012b70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012b78:	4b09      	ldr	r3, [pc, #36]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	08db      	lsrs	r3, r3, #3
 8012b7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012b86:	4b07      	ldr	r3, [pc, #28]	; (8012ba4 <HAL_RCC_GetClockConfig+0x60>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f003 0207 	and.w	r2, r3, #7
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	601a      	str	r2, [r3, #0]
}
 8012b92:	bf00      	nop
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	40023800 	.word	0x40023800
 8012ba4:	40023c00 	.word	0x40023c00

08012ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e07b      	b.n	8012cb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d108      	bne.n	8012bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012bca:	d009      	beq.n	8012be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	61da      	str	r2, [r3, #28]
 8012bd2:	e005      	b.n	8012be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d106      	bne.n	8012c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7f1 ff48 	bl	8004a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2202      	movs	r2, #2
 8012c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	681a      	ldr	r2, [r3, #0]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	689b      	ldr	r3, [r3, #8]
 8012c24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012c28:	431a      	orrs	r2, r3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	68db      	ldr	r3, [r3, #12]
 8012c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c32:	431a      	orrs	r2, r3
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	f003 0302 	and.w	r3, r3, #2
 8012c3c:	431a      	orrs	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	695b      	ldr	r3, [r3, #20]
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	431a      	orrs	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	699b      	ldr	r3, [r3, #24]
 8012c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c50:	431a      	orrs	r2, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	69db      	ldr	r3, [r3, #28]
 8012c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c5a:	431a      	orrs	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a1b      	ldr	r3, [r3, #32]
 8012c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c64:	ea42 0103 	orr.w	r1, r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	430a      	orrs	r2, r1
 8012c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	699b      	ldr	r3, [r3, #24]
 8012c7c:	0c1b      	lsrs	r3, r3, #16
 8012c7e:	f003 0104 	and.w	r1, r3, #4
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c86:	f003 0210 	and.w	r2, r3, #16
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	430a      	orrs	r2, r1
 8012c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	69da      	ldr	r2, [r3, #28]
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2201      	movs	r2, #1
 8012cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3708      	adds	r7, #8
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b088      	sub	sp, #32
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	60f8      	str	r0, [r7, #12]
 8012cc2:	60b9      	str	r1, [r7, #8]
 8012cc4:	603b      	str	r3, [r7, #0]
 8012cc6:	4613      	mov	r3, r2
 8012cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d101      	bne.n	8012cdc <HAL_SPI_Transmit+0x22>
 8012cd8:	2302      	movs	r3, #2
 8012cda:	e126      	b.n	8012f2a <HAL_SPI_Transmit+0x270>
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	2201      	movs	r2, #1
 8012ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012ce4:	f7fd fb24 	bl	8010330 <HAL_GetTick>
 8012ce8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012cea:	88fb      	ldrh	r3, [r7, #6]
 8012cec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b01      	cmp	r3, #1
 8012cf8:	d002      	beq.n	8012d00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012cfa:	2302      	movs	r3, #2
 8012cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012cfe:	e10b      	b.n	8012f18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d002      	beq.n	8012d0c <HAL_SPI_Transmit+0x52>
 8012d06:	88fb      	ldrh	r3, [r7, #6]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d102      	bne.n	8012d12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d10:	e102      	b.n	8012f18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2203      	movs	r2, #3
 8012d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	88fa      	ldrh	r2, [r7, #6]
 8012d2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	88fa      	ldrh	r2, [r7, #6]
 8012d30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2200      	movs	r2, #0
 8012d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2200      	movs	r2, #0
 8012d42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2200      	movs	r2, #0
 8012d48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d58:	d10f      	bne.n	8012d7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012d78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d84:	2b40      	cmp	r3, #64	; 0x40
 8012d86:	d007      	beq.n	8012d98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	681a      	ldr	r2, [r3, #0]
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012da0:	d14b      	bne.n	8012e3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d002      	beq.n	8012db0 <HAL_SPI_Transmit+0xf6>
 8012daa:	8afb      	ldrh	r3, [r7, #22]
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d13e      	bne.n	8012e2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db4:	881a      	ldrh	r2, [r3, #0]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dc0:	1c9a      	adds	r2, r3, #2
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	3b01      	subs	r3, #1
 8012dce:	b29a      	uxth	r2, r3
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012dd4:	e02b      	b.n	8012e2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	689b      	ldr	r3, [r3, #8]
 8012ddc:	f003 0302 	and.w	r3, r3, #2
 8012de0:	2b02      	cmp	r3, #2
 8012de2:	d112      	bne.n	8012e0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012de8:	881a      	ldrh	r2, [r3, #0]
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df4:	1c9a      	adds	r2, r3, #2
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	3b01      	subs	r3, #1
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	86da      	strh	r2, [r3, #54]	; 0x36
 8012e08:	e011      	b.n	8012e2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e0a:	f7fd fa91 	bl	8010330 <HAL_GetTick>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	69bb      	ldr	r3, [r7, #24]
 8012e12:	1ad3      	subs	r3, r2, r3
 8012e14:	683a      	ldr	r2, [r7, #0]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d803      	bhi.n	8012e22 <HAL_SPI_Transmit+0x168>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e20:	d102      	bne.n	8012e28 <HAL_SPI_Transmit+0x16e>
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d102      	bne.n	8012e2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8012e28:	2303      	movs	r3, #3
 8012e2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012e2c:	e074      	b.n	8012f18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1ce      	bne.n	8012dd6 <HAL_SPI_Transmit+0x11c>
 8012e38:	e04c      	b.n	8012ed4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d002      	beq.n	8012e48 <HAL_SPI_Transmit+0x18e>
 8012e42:	8afb      	ldrh	r3, [r7, #22]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d140      	bne.n	8012eca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	330c      	adds	r3, #12
 8012e52:	7812      	ldrb	r2, [r2, #0]
 8012e54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e5a:	1c5a      	adds	r2, r3, #1
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	3b01      	subs	r3, #1
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012e6e:	e02c      	b.n	8012eca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	f003 0302 	and.w	r3, r3, #2
 8012e7a:	2b02      	cmp	r3, #2
 8012e7c:	d113      	bne.n	8012ea6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	330c      	adds	r3, #12
 8012e88:	7812      	ldrb	r2, [r2, #0]
 8012e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e90:	1c5a      	adds	r2, r3, #1
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	3b01      	subs	r3, #1
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	86da      	strh	r2, [r3, #54]	; 0x36
 8012ea4:	e011      	b.n	8012eca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012ea6:	f7fd fa43 	bl	8010330 <HAL_GetTick>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	1ad3      	subs	r3, r2, r3
 8012eb0:	683a      	ldr	r2, [r7, #0]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d803      	bhi.n	8012ebe <HAL_SPI_Transmit+0x204>
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ebc:	d102      	bne.n	8012ec4 <HAL_SPI_Transmit+0x20a>
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d102      	bne.n	8012eca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8012ec4:	2303      	movs	r3, #3
 8012ec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012ec8:	e026      	b.n	8012f18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1cd      	bne.n	8012e70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012ed4:	69ba      	ldr	r2, [r7, #24]
 8012ed6:	6839      	ldr	r1, [r7, #0]
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f000 fbcb 	bl	8013674 <SPI_EndRxTxTransaction>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d002      	beq.n	8012eea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2220      	movs	r2, #32
 8012ee8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d10a      	bne.n	8012f08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	613b      	str	r3, [r7, #16]
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	68db      	ldr	r3, [r3, #12]
 8012efc:	613b      	str	r3, [r7, #16]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	613b      	str	r3, [r7, #16]
 8012f06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d002      	beq.n	8012f16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8012f10:	2301      	movs	r3, #1
 8012f12:	77fb      	strb	r3, [r7, #31]
 8012f14:	e000      	b.n	8012f18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8012f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2200      	movs	r2, #0
 8012f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012f28:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3720      	adds	r7, #32
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}

08012f32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f32:	b580      	push	{r7, lr}
 8012f34:	b088      	sub	sp, #32
 8012f36:	af02      	add	r7, sp, #8
 8012f38:	60f8      	str	r0, [r7, #12]
 8012f3a:	60b9      	str	r1, [r7, #8]
 8012f3c:	603b      	str	r3, [r7, #0]
 8012f3e:	4613      	mov	r3, r2
 8012f40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012f42:	2300      	movs	r3, #0
 8012f44:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012f4e:	d112      	bne.n	8012f76 <HAL_SPI_Receive+0x44>
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	689b      	ldr	r3, [r3, #8]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10e      	bne.n	8012f76 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2204      	movs	r2, #4
 8012f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012f60:	88fa      	ldrh	r2, [r7, #6]
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	4613      	mov	r3, r2
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	68b9      	ldr	r1, [r7, #8]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f000 f8f1 	bl	8013154 <HAL_SPI_TransmitReceive>
 8012f72:	4603      	mov	r3, r0
 8012f74:	e0ea      	b.n	801314c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d101      	bne.n	8012f84 <HAL_SPI_Receive+0x52>
 8012f80:	2302      	movs	r3, #2
 8012f82:	e0e3      	b.n	801314c <HAL_SPI_Receive+0x21a>
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2201      	movs	r2, #1
 8012f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012f8c:	f7fd f9d0 	bl	8010330 <HAL_GetTick>
 8012f90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d002      	beq.n	8012fa4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012f9e:	2302      	movs	r3, #2
 8012fa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012fa2:	e0ca      	b.n	801313a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d002      	beq.n	8012fb0 <HAL_SPI_Receive+0x7e>
 8012faa:	88fb      	ldrh	r3, [r7, #6]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d102      	bne.n	8012fb6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012fb4:	e0c1      	b.n	801313a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	2204      	movs	r2, #4
 8012fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	68ba      	ldr	r2, [r7, #8]
 8012fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	88fa      	ldrh	r2, [r7, #6]
 8012fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	88fa      	ldrh	r2, [r7, #6]
 8012fd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2200      	movs	r2, #0
 8012fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	689b      	ldr	r3, [r3, #8]
 8012ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ffc:	d10f      	bne.n	801301e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801300c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801301c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013028:	2b40      	cmp	r3, #64	; 0x40
 801302a:	d007      	beq.n	801303c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801303a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d162      	bne.n	801310a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013044:	e02e      	b.n	80130a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	689b      	ldr	r3, [r3, #8]
 801304c:	f003 0301 	and.w	r3, r3, #1
 8013050:	2b01      	cmp	r3, #1
 8013052:	d115      	bne.n	8013080 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	f103 020c 	add.w	r2, r3, #12
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013060:	7812      	ldrb	r2, [r2, #0]
 8013062:	b2d2      	uxtb	r2, r2
 8013064:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801306a:	1c5a      	adds	r2, r3, #1
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013074:	b29b      	uxth	r3, r3
 8013076:	3b01      	subs	r3, #1
 8013078:	b29a      	uxth	r2, r3
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801307e:	e011      	b.n	80130a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013080:	f7fd f956 	bl	8010330 <HAL_GetTick>
 8013084:	4602      	mov	r2, r0
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	683a      	ldr	r2, [r7, #0]
 801308c:	429a      	cmp	r2, r3
 801308e:	d803      	bhi.n	8013098 <HAL_SPI_Receive+0x166>
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013096:	d102      	bne.n	801309e <HAL_SPI_Receive+0x16c>
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d102      	bne.n	80130a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801309e:	2303      	movs	r3, #3
 80130a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80130a2:	e04a      	b.n	801313a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1cb      	bne.n	8013046 <HAL_SPI_Receive+0x114>
 80130ae:	e031      	b.n	8013114 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	f003 0301 	and.w	r3, r3, #1
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d113      	bne.n	80130e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	68da      	ldr	r2, [r3, #12]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130c8:	b292      	uxth	r2, r2
 80130ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130d0:	1c9a      	adds	r2, r3, #2
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80130da:	b29b      	uxth	r3, r3
 80130dc:	3b01      	subs	r3, #1
 80130de:	b29a      	uxth	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80130e4:	e011      	b.n	801310a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80130e6:	f7fd f923 	bl	8010330 <HAL_GetTick>
 80130ea:	4602      	mov	r2, r0
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	1ad3      	subs	r3, r2, r3
 80130f0:	683a      	ldr	r2, [r7, #0]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d803      	bhi.n	80130fe <HAL_SPI_Receive+0x1cc>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130fc:	d102      	bne.n	8013104 <HAL_SPI_Receive+0x1d2>
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d102      	bne.n	801310a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013104:	2303      	movs	r3, #3
 8013106:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013108:	e017      	b.n	801313a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801310e:	b29b      	uxth	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d1cd      	bne.n	80130b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013114:	693a      	ldr	r2, [r7, #16]
 8013116:	6839      	ldr	r1, [r7, #0]
 8013118:	68f8      	ldr	r0, [r7, #12]
 801311a:	f000 fa45 	bl	80135a8 <SPI_EndRxTransaction>
 801311e:	4603      	mov	r3, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d002      	beq.n	801312a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2220      	movs	r2, #32
 8013128:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8013132:	2301      	movs	r3, #1
 8013134:	75fb      	strb	r3, [r7, #23]
 8013136:	e000      	b.n	801313a <HAL_SPI_Receive+0x208>
  }

error :
 8013138:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	2201      	movs	r2, #1
 801313e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2200      	movs	r2, #0
 8013146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801314a:	7dfb      	ldrb	r3, [r7, #23]
}
 801314c:	4618      	mov	r0, r3
 801314e:	3718      	adds	r7, #24
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b08c      	sub	sp, #48	; 0x30
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013162:	2301      	movs	r3, #1
 8013164:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013166:	2300      	movs	r3, #0
 8013168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013172:	2b01      	cmp	r3, #1
 8013174:	d101      	bne.n	801317a <HAL_SPI_TransmitReceive+0x26>
 8013176:	2302      	movs	r3, #2
 8013178:	e18a      	b.n	8013490 <HAL_SPI_TransmitReceive+0x33c>
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2201      	movs	r2, #1
 801317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013182:	f7fd f8d5 	bl	8010330 <HAL_GetTick>
 8013186:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013198:	887b      	ldrh	r3, [r7, #2]
 801319a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801319c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d00f      	beq.n	80131c4 <HAL_SPI_TransmitReceive+0x70>
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80131aa:	d107      	bne.n	80131bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	689b      	ldr	r3, [r3, #8]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d103      	bne.n	80131bc <HAL_SPI_TransmitReceive+0x68>
 80131b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80131b8:	2b04      	cmp	r3, #4
 80131ba:	d003      	beq.n	80131c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80131bc:	2302      	movs	r3, #2
 80131be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80131c2:	e15b      	b.n	801347c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d005      	beq.n	80131d6 <HAL_SPI_TransmitReceive+0x82>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d002      	beq.n	80131d6 <HAL_SPI_TransmitReceive+0x82>
 80131d0:	887b      	ldrh	r3, [r7, #2]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d103      	bne.n	80131de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80131d6:	2301      	movs	r3, #1
 80131d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80131dc:	e14e      	b.n	801347c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	2b04      	cmp	r3, #4
 80131e8:	d003      	beq.n	80131f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2205      	movs	r2, #5
 80131ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2200      	movs	r2, #0
 80131f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	887a      	ldrh	r2, [r7, #2]
 8013202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	887a      	ldrh	r2, [r7, #2]
 8013208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	68ba      	ldr	r2, [r7, #8]
 801320e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	887a      	ldrh	r2, [r7, #2]
 8013214:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	887a      	ldrh	r2, [r7, #2]
 801321a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2200      	movs	r2, #0
 8013220:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2200      	movs	r2, #0
 8013226:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013232:	2b40      	cmp	r3, #64	; 0x40
 8013234:	d007      	beq.n	8013246 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801324e:	d178      	bne.n	8013342 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d002      	beq.n	801325e <HAL_SPI_TransmitReceive+0x10a>
 8013258:	8b7b      	ldrh	r3, [r7, #26]
 801325a:	2b01      	cmp	r3, #1
 801325c:	d166      	bne.n	801332c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013262:	881a      	ldrh	r2, [r3, #0]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326e:	1c9a      	adds	r2, r3, #2
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013278:	b29b      	uxth	r3, r3
 801327a:	3b01      	subs	r3, #1
 801327c:	b29a      	uxth	r2, r3
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013282:	e053      	b.n	801332c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	f003 0302 	and.w	r3, r3, #2
 801328e:	2b02      	cmp	r3, #2
 8013290:	d11b      	bne.n	80132ca <HAL_SPI_TransmitReceive+0x176>
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013296:	b29b      	uxth	r3, r3
 8013298:	2b00      	cmp	r3, #0
 801329a:	d016      	beq.n	80132ca <HAL_SPI_TransmitReceive+0x176>
 801329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329e:	2b01      	cmp	r3, #1
 80132a0:	d113      	bne.n	80132ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a6:	881a      	ldrh	r2, [r3, #0]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b2:	1c9a      	adds	r2, r3, #2
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132bc:	b29b      	uxth	r3, r3
 80132be:	3b01      	subs	r3, #1
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80132c6:	2300      	movs	r3, #0
 80132c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	689b      	ldr	r3, [r3, #8]
 80132d0:	f003 0301 	and.w	r3, r3, #1
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d119      	bne.n	801330c <HAL_SPI_TransmitReceive+0x1b8>
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132dc:	b29b      	uxth	r3, r3
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d014      	beq.n	801330c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	68da      	ldr	r2, [r3, #12]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ec:	b292      	uxth	r2, r2
 80132ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132f4:	1c9a      	adds	r2, r3, #2
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132fe:	b29b      	uxth	r3, r3
 8013300:	3b01      	subs	r3, #1
 8013302:	b29a      	uxth	r2, r3
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013308:	2301      	movs	r3, #1
 801330a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801330c:	f7fd f810 	bl	8010330 <HAL_GetTick>
 8013310:	4602      	mov	r2, r0
 8013312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013318:	429a      	cmp	r2, r3
 801331a:	d807      	bhi.n	801332c <HAL_SPI_TransmitReceive+0x1d8>
 801331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013322:	d003      	beq.n	801332c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013324:	2303      	movs	r3, #3
 8013326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801332a:	e0a7      	b.n	801347c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013330:	b29b      	uxth	r3, r3
 8013332:	2b00      	cmp	r3, #0
 8013334:	d1a6      	bne.n	8013284 <HAL_SPI_TransmitReceive+0x130>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801333a:	b29b      	uxth	r3, r3
 801333c:	2b00      	cmp	r3, #0
 801333e:	d1a1      	bne.n	8013284 <HAL_SPI_TransmitReceive+0x130>
 8013340:	e07c      	b.n	801343c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d002      	beq.n	8013350 <HAL_SPI_TransmitReceive+0x1fc>
 801334a:	8b7b      	ldrh	r3, [r7, #26]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d16b      	bne.n	8013428 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	330c      	adds	r3, #12
 801335a:	7812      	ldrb	r2, [r2, #0]
 801335c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013362:	1c5a      	adds	r2, r3, #1
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801336c:	b29b      	uxth	r3, r3
 801336e:	3b01      	subs	r3, #1
 8013370:	b29a      	uxth	r2, r3
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013376:	e057      	b.n	8013428 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	689b      	ldr	r3, [r3, #8]
 801337e:	f003 0302 	and.w	r3, r3, #2
 8013382:	2b02      	cmp	r3, #2
 8013384:	d11c      	bne.n	80133c0 <HAL_SPI_TransmitReceive+0x26c>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801338a:	b29b      	uxth	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d017      	beq.n	80133c0 <HAL_SPI_TransmitReceive+0x26c>
 8013390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013392:	2b01      	cmp	r3, #1
 8013394:	d114      	bne.n	80133c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	330c      	adds	r3, #12
 80133a0:	7812      	ldrb	r2, [r2, #0]
 80133a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a8:	1c5a      	adds	r2, r3, #1
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	3b01      	subs	r3, #1
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80133bc:	2300      	movs	r3, #0
 80133be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	f003 0301 	and.w	r3, r3, #1
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	d119      	bne.n	8013402 <HAL_SPI_TransmitReceive+0x2ae>
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d014      	beq.n	8013402 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	68da      	ldr	r2, [r3, #12]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133e2:	b2d2      	uxtb	r2, r2
 80133e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ea:	1c5a      	adds	r2, r3, #1
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	3b01      	subs	r3, #1
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80133fe:	2301      	movs	r3, #1
 8013400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013402:	f7fc ff95 	bl	8010330 <HAL_GetTick>
 8013406:	4602      	mov	r2, r0
 8013408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340a:	1ad3      	subs	r3, r2, r3
 801340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801340e:	429a      	cmp	r2, r3
 8013410:	d803      	bhi.n	801341a <HAL_SPI_TransmitReceive+0x2c6>
 8013412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013418:	d102      	bne.n	8013420 <HAL_SPI_TransmitReceive+0x2cc>
 801341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801341c:	2b00      	cmp	r3, #0
 801341e:	d103      	bne.n	8013428 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013420:	2303      	movs	r3, #3
 8013422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013426:	e029      	b.n	801347c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801342c:	b29b      	uxth	r3, r3
 801342e:	2b00      	cmp	r3, #0
 8013430:	d1a2      	bne.n	8013378 <HAL_SPI_TransmitReceive+0x224>
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013436:	b29b      	uxth	r3, r3
 8013438:	2b00      	cmp	r3, #0
 801343a:	d19d      	bne.n	8013378 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801343e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013440:	68f8      	ldr	r0, [r7, #12]
 8013442:	f000 f917 	bl	8013674 <SPI_EndRxTxTransaction>
 8013446:	4603      	mov	r3, r0
 8013448:	2b00      	cmp	r3, #0
 801344a:	d006      	beq.n	801345a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801344c:	2301      	movs	r3, #1
 801344e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2220      	movs	r2, #32
 8013456:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013458:	e010      	b.n	801347c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	689b      	ldr	r3, [r3, #8]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10b      	bne.n	801347a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013462:	2300      	movs	r3, #0
 8013464:	617b      	str	r3, [r7, #20]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	617b      	str	r3, [r7, #20]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	617b      	str	r3, [r7, #20]
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	e000      	b.n	801347c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801347a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2201      	movs	r2, #1
 8013480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2200      	movs	r2, #0
 8013488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801348c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013490:	4618      	mov	r0, r3
 8013492:	3730      	adds	r7, #48	; 0x30
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b088      	sub	sp, #32
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	60b9      	str	r1, [r7, #8]
 80134a2:	603b      	str	r3, [r7, #0]
 80134a4:	4613      	mov	r3, r2
 80134a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80134a8:	f7fc ff42 	bl	8010330 <HAL_GetTick>
 80134ac:	4602      	mov	r2, r0
 80134ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b0:	1a9b      	subs	r3, r3, r2
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	4413      	add	r3, r2
 80134b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80134b8:	f7fc ff3a 	bl	8010330 <HAL_GetTick>
 80134bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80134be:	4b39      	ldr	r3, [pc, #228]	; (80135a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	015b      	lsls	r3, r3, #5
 80134c4:	0d1b      	lsrs	r3, r3, #20
 80134c6:	69fa      	ldr	r2, [r7, #28]
 80134c8:	fb02 f303 	mul.w	r3, r2, r3
 80134cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80134ce:	e054      	b.n	801357a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d6:	d050      	beq.n	801357a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80134d8:	f7fc ff2a 	bl	8010330 <HAL_GetTick>
 80134dc:	4602      	mov	r2, r0
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	69fa      	ldr	r2, [r7, #28]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d902      	bls.n	80134ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80134e8:	69fb      	ldr	r3, [r7, #28]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d13d      	bne.n	801356a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	685a      	ldr	r2, [r3, #4]
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80134fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013506:	d111      	bne.n	801352c <SPI_WaitFlagStateUntilTimeout+0x94>
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013510:	d004      	beq.n	801351c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	689b      	ldr	r3, [r3, #8]
 8013516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801351a:	d107      	bne.n	801352c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801352a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013534:	d10f      	bne.n	8013556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013544:	601a      	str	r2, [r3, #0]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2201      	movs	r2, #1
 801355a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	2200      	movs	r2, #0
 8013562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013566:	2303      	movs	r3, #3
 8013568:	e017      	b.n	801359a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013570:	2300      	movs	r3, #0
 8013572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	3b01      	subs	r3, #1
 8013578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	689a      	ldr	r2, [r3, #8]
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	4013      	ands	r3, r2
 8013584:	68ba      	ldr	r2, [r7, #8]
 8013586:	429a      	cmp	r2, r3
 8013588:	bf0c      	ite	eq
 801358a:	2301      	moveq	r3, #1
 801358c:	2300      	movne	r3, #0
 801358e:	b2db      	uxtb	r3, r3
 8013590:	461a      	mov	r2, r3
 8013592:	79fb      	ldrb	r3, [r7, #7]
 8013594:	429a      	cmp	r2, r3
 8013596:	d19b      	bne.n	80134d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013598:	2300      	movs	r3, #0
}
 801359a:	4618      	mov	r0, r3
 801359c:	3720      	adds	r7, #32
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	20000080 	.word	0x20000080

080135a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af02      	add	r7, sp, #8
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80135bc:	d111      	bne.n	80135e2 <SPI_EndRxTransaction+0x3a>
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	689b      	ldr	r3, [r3, #8]
 80135c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135c6:	d004      	beq.n	80135d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135d0:	d107      	bne.n	80135e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80135e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80135ea:	d12a      	bne.n	8013642 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135f4:	d012      	beq.n	801361c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	2200      	movs	r2, #0
 80135fe:	2180      	movs	r1, #128	; 0x80
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f7ff ff49 	bl	8013498 <SPI_WaitFlagStateUntilTimeout>
 8013606:	4603      	mov	r3, r0
 8013608:	2b00      	cmp	r3, #0
 801360a:	d02d      	beq.n	8013668 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013610:	f043 0220 	orr.w	r2, r3, #32
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013618:	2303      	movs	r3, #3
 801361a:	e026      	b.n	801366a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	9300      	str	r3, [sp, #0]
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	2200      	movs	r2, #0
 8013624:	2101      	movs	r1, #1
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f7ff ff36 	bl	8013498 <SPI_WaitFlagStateUntilTimeout>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d01a      	beq.n	8013668 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013636:	f043 0220 	orr.w	r2, r3, #32
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801363e:	2303      	movs	r3, #3
 8013640:	e013      	b.n	801366a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	9300      	str	r3, [sp, #0]
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	2200      	movs	r2, #0
 801364a:	2101      	movs	r1, #1
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	f7ff ff23 	bl	8013498 <SPI_WaitFlagStateUntilTimeout>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d007      	beq.n	8013668 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801365c:	f043 0220 	orr.w	r2, r3, #32
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013664:	2303      	movs	r3, #3
 8013666:	e000      	b.n	801366a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3710      	adds	r7, #16
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
	...

08013674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b088      	sub	sp, #32
 8013678:	af02      	add	r7, sp, #8
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013680:	4b1b      	ldr	r3, [pc, #108]	; (80136f0 <SPI_EndRxTxTransaction+0x7c>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	4a1b      	ldr	r2, [pc, #108]	; (80136f4 <SPI_EndRxTxTransaction+0x80>)
 8013686:	fba2 2303 	umull	r2, r3, r2, r3
 801368a:	0d5b      	lsrs	r3, r3, #21
 801368c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013690:	fb02 f303 	mul.w	r3, r2, r3
 8013694:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801369e:	d112      	bne.n	80136c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	9300      	str	r3, [sp, #0]
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	2200      	movs	r2, #0
 80136a8:	2180      	movs	r1, #128	; 0x80
 80136aa:	68f8      	ldr	r0, [r7, #12]
 80136ac:	f7ff fef4 	bl	8013498 <SPI_WaitFlagStateUntilTimeout>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d016      	beq.n	80136e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136ba:	f043 0220 	orr.w	r2, r3, #32
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80136c2:	2303      	movs	r3, #3
 80136c4:	e00f      	b.n	80136e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d00a      	beq.n	80136e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	3b01      	subs	r3, #1
 80136d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	689b      	ldr	r3, [r3, #8]
 80136d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136dc:	2b80      	cmp	r3, #128	; 0x80
 80136de:	d0f2      	beq.n	80136c6 <SPI_EndRxTxTransaction+0x52>
 80136e0:	e000      	b.n	80136e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80136e2:	bf00      	nop
  }

  return HAL_OK;
 80136e4:	2300      	movs	r3, #0
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3718      	adds	r7, #24
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20000080 	.word	0x20000080
 80136f4:	165e9f81 	.word	0x165e9f81

080136f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d101      	bne.n	801370a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013706:	2301      	movs	r3, #1
 8013708:	e041      	b.n	801378e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013710:	b2db      	uxtb	r3, r3
 8013712:	2b00      	cmp	r3, #0
 8013714:	d106      	bne.n	8013724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2200      	movs	r2, #0
 801371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7f1 fca6 	bl	8005070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2202      	movs	r2, #2
 8013728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	3304      	adds	r3, #4
 8013734:	4619      	mov	r1, r3
 8013736:	4610      	mov	r0, r2
 8013738:	f001 f858 	bl	80147ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2201      	movs	r2, #1
 8013740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2201      	movs	r2, #1
 8013748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2201      	movs	r2, #1
 8013750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2201      	movs	r2, #1
 8013758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2201      	movs	r2, #1
 8013760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2201      	movs	r2, #1
 8013768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2201      	movs	r2, #1
 8013770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2201      	movs	r2, #1
 8013778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2201      	movs	r2, #1
 8013780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2201      	movs	r2, #1
 8013788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	3708      	adds	r7, #8
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
	...

08013798 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013798:	b480      	push	{r7}
 801379a:	b085      	sub	sp, #20
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b01      	cmp	r3, #1
 80137aa:	d001      	beq.n	80137b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80137ac:	2301      	movs	r3, #1
 80137ae:	e046      	b.n	801383e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2202      	movs	r2, #2
 80137b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a23      	ldr	r2, [pc, #140]	; (801384c <HAL_TIM_Base_Start+0xb4>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d022      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137ca:	d01d      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	4a1f      	ldr	r2, [pc, #124]	; (8013850 <HAL_TIM_Base_Start+0xb8>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	d018      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4a1e      	ldr	r2, [pc, #120]	; (8013854 <HAL_TIM_Base_Start+0xbc>)
 80137dc:	4293      	cmp	r3, r2
 80137de:	d013      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	4a1c      	ldr	r2, [pc, #112]	; (8013858 <HAL_TIM_Base_Start+0xc0>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d00e      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	4a1b      	ldr	r2, [pc, #108]	; (801385c <HAL_TIM_Base_Start+0xc4>)
 80137f0:	4293      	cmp	r3, r2
 80137f2:	d009      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	4a19      	ldr	r2, [pc, #100]	; (8013860 <HAL_TIM_Base_Start+0xc8>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d004      	beq.n	8013808 <HAL_TIM_Base_Start+0x70>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	4a18      	ldr	r2, [pc, #96]	; (8013864 <HAL_TIM_Base_Start+0xcc>)
 8013804:	4293      	cmp	r3, r2
 8013806:	d111      	bne.n	801382c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	f003 0307 	and.w	r3, r3, #7
 8013812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2b06      	cmp	r3, #6
 8013818:	d010      	beq.n	801383c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f042 0201 	orr.w	r2, r2, #1
 8013828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801382a:	e007      	b.n	801383c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f042 0201 	orr.w	r2, r2, #1
 801383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801383c:	2300      	movs	r3, #0
}
 801383e:	4618      	mov	r0, r3
 8013840:	3714      	adds	r7, #20
 8013842:	46bd      	mov	sp, r7
 8013844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013848:	4770      	bx	lr
 801384a:	bf00      	nop
 801384c:	40010000 	.word	0x40010000
 8013850:	40000400 	.word	0x40000400
 8013854:	40000800 	.word	0x40000800
 8013858:	40000c00 	.word	0x40000c00
 801385c:	40010400 	.word	0x40010400
 8013860:	40014000 	.word	0x40014000
 8013864:	40001800 	.word	0x40001800

08013868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013868:	b480      	push	{r7}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013876:	b2db      	uxtb	r3, r3
 8013878:	2b01      	cmp	r3, #1
 801387a:	d001      	beq.n	8013880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801387c:	2301      	movs	r3, #1
 801387e:	e04e      	b.n	801391e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2202      	movs	r2, #2
 8013884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	68da      	ldr	r2, [r3, #12]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f042 0201 	orr.w	r2, r2, #1
 8013896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4a23      	ldr	r2, [pc, #140]	; (801392c <HAL_TIM_Base_Start_IT+0xc4>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d022      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138aa:	d01d      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a1f      	ldr	r2, [pc, #124]	; (8013930 <HAL_TIM_Base_Start_IT+0xc8>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d018      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	4a1e      	ldr	r2, [pc, #120]	; (8013934 <HAL_TIM_Base_Start_IT+0xcc>)
 80138bc:	4293      	cmp	r3, r2
 80138be:	d013      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	4a1c      	ldr	r2, [pc, #112]	; (8013938 <HAL_TIM_Base_Start_IT+0xd0>)
 80138c6:	4293      	cmp	r3, r2
 80138c8:	d00e      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	4a1b      	ldr	r2, [pc, #108]	; (801393c <HAL_TIM_Base_Start_IT+0xd4>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d009      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	4a19      	ldr	r2, [pc, #100]	; (8013940 <HAL_TIM_Base_Start_IT+0xd8>)
 80138da:	4293      	cmp	r3, r2
 80138dc:	d004      	beq.n	80138e8 <HAL_TIM_Base_Start_IT+0x80>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	4a18      	ldr	r2, [pc, #96]	; (8013944 <HAL_TIM_Base_Start_IT+0xdc>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d111      	bne.n	801390c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	689b      	ldr	r3, [r3, #8]
 80138ee:	f003 0307 	and.w	r3, r3, #7
 80138f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b06      	cmp	r3, #6
 80138f8:	d010      	beq.n	801391c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f042 0201 	orr.w	r2, r2, #1
 8013908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801390a:	e007      	b.n	801391c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	681a      	ldr	r2, [r3, #0]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f042 0201 	orr.w	r2, r2, #1
 801391a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3714      	adds	r7, #20
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	40010000 	.word	0x40010000
 8013930:	40000400 	.word	0x40000400
 8013934:	40000800 	.word	0x40000800
 8013938:	40000c00 	.word	0x40000c00
 801393c:	40010400 	.word	0x40010400
 8013940:	40014000 	.word	0x40014000
 8013944:	40001800 	.word	0x40001800

08013948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d101      	bne.n	801395a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013956:	2301      	movs	r3, #1
 8013958:	e041      	b.n	80139de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013960:	b2db      	uxtb	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d106      	bne.n	8013974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 f839 	bl	80139e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2202      	movs	r2, #2
 8013978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	3304      	adds	r3, #4
 8013984:	4619      	mov	r1, r3
 8013986:	4610      	mov	r0, r2
 8013988:	f000 ff30 	bl	80147ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2201      	movs	r2, #1
 8013990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2201      	movs	r2, #1
 8013998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2201      	movs	r2, #1
 80139a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2201      	movs	r2, #1
 80139a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2201      	movs	r2, #1
 80139b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2201      	movs	r2, #1
 80139b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2201      	movs	r2, #1
 80139c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2201      	movs	r2, #1
 80139c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2201      	movs	r2, #1
 80139d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2201      	movs	r2, #1
 80139d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3708      	adds	r7, #8
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80139e6:	b480      	push	{r7}
 80139e8:	b083      	sub	sp, #12
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80139ee:	bf00      	nop
 80139f0:	370c      	adds	r7, #12
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr
	...

080139fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d109      	bne.n	8013a20 <HAL_TIM_PWM_Start+0x24>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	bf14      	ite	ne
 8013a18:	2301      	movne	r3, #1
 8013a1a:	2300      	moveq	r3, #0
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	e022      	b.n	8013a66 <HAL_TIM_PWM_Start+0x6a>
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2b04      	cmp	r3, #4
 8013a24:	d109      	bne.n	8013a3a <HAL_TIM_PWM_Start+0x3e>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	bf14      	ite	ne
 8013a32:	2301      	movne	r3, #1
 8013a34:	2300      	moveq	r3, #0
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	e015      	b.n	8013a66 <HAL_TIM_PWM_Start+0x6a>
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	2b08      	cmp	r3, #8
 8013a3e:	d109      	bne.n	8013a54 <HAL_TIM_PWM_Start+0x58>
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	bf14      	ite	ne
 8013a4c:	2301      	movne	r3, #1
 8013a4e:	2300      	moveq	r3, #0
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	e008      	b.n	8013a66 <HAL_TIM_PWM_Start+0x6a>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	bf14      	ite	ne
 8013a60:	2301      	movne	r3, #1
 8013a62:	2300      	moveq	r3, #0
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d001      	beq.n	8013a6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e07c      	b.n	8013b68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d104      	bne.n	8013a7e <HAL_TIM_PWM_Start+0x82>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2202      	movs	r2, #2
 8013a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013a7c:	e013      	b.n	8013aa6 <HAL_TIM_PWM_Start+0xaa>
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	2b04      	cmp	r3, #4
 8013a82:	d104      	bne.n	8013a8e <HAL_TIM_PWM_Start+0x92>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2202      	movs	r2, #2
 8013a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013a8c:	e00b      	b.n	8013aa6 <HAL_TIM_PWM_Start+0xaa>
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	2b08      	cmp	r3, #8
 8013a92:	d104      	bne.n	8013a9e <HAL_TIM_PWM_Start+0xa2>
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2202      	movs	r2, #2
 8013a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013a9c:	e003      	b.n	8013aa6 <HAL_TIM_PWM_Start+0xaa>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2202      	movs	r2, #2
 8013aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2201      	movs	r2, #1
 8013aac:	6839      	ldr	r1, [r7, #0]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f001 fb42 	bl	8015138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	4a2d      	ldr	r2, [pc, #180]	; (8013b70 <HAL_TIM_PWM_Start+0x174>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d004      	beq.n	8013ac8 <HAL_TIM_PWM_Start+0xcc>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4a2c      	ldr	r2, [pc, #176]	; (8013b74 <HAL_TIM_PWM_Start+0x178>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d101      	bne.n	8013acc <HAL_TIM_PWM_Start+0xd0>
 8013ac8:	2301      	movs	r3, #1
 8013aca:	e000      	b.n	8013ace <HAL_TIM_PWM_Start+0xd2>
 8013acc:	2300      	movs	r3, #0
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d007      	beq.n	8013ae2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	4a22      	ldr	r2, [pc, #136]	; (8013b70 <HAL_TIM_PWM_Start+0x174>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d022      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013af4:	d01d      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a1f      	ldr	r2, [pc, #124]	; (8013b78 <HAL_TIM_PWM_Start+0x17c>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d018      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	4a1d      	ldr	r2, [pc, #116]	; (8013b7c <HAL_TIM_PWM_Start+0x180>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d013      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4a1c      	ldr	r2, [pc, #112]	; (8013b80 <HAL_TIM_PWM_Start+0x184>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d00e      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4a16      	ldr	r2, [pc, #88]	; (8013b74 <HAL_TIM_PWM_Start+0x178>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d009      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4a18      	ldr	r2, [pc, #96]	; (8013b84 <HAL_TIM_PWM_Start+0x188>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d004      	beq.n	8013b32 <HAL_TIM_PWM_Start+0x136>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a16      	ldr	r2, [pc, #88]	; (8013b88 <HAL_TIM_PWM_Start+0x18c>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d111      	bne.n	8013b56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	f003 0307 	and.w	r3, r3, #7
 8013b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2b06      	cmp	r3, #6
 8013b42:	d010      	beq.n	8013b66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	f042 0201 	orr.w	r2, r2, #1
 8013b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b54:	e007      	b.n	8013b66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	681a      	ldr	r2, [r3, #0]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f042 0201 	orr.w	r2, r2, #1
 8013b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013b66:	2300      	movs	r3, #0
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	40010000 	.word	0x40010000
 8013b74:	40010400 	.word	0x40010400
 8013b78:	40000400 	.word	0x40000400
 8013b7c:	40000800 	.word	0x40000800
 8013b80:	40000c00 	.word	0x40000c00
 8013b84:	40014000 	.word	0x40014000
 8013b88:	40001800 	.word	0x40001800

08013b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d101      	bne.n	8013b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	e041      	b.n	8013c22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d106      	bne.n	8013bb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f000 f839 	bl	8013c2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2202      	movs	r2, #2
 8013bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3304      	adds	r3, #4
 8013bc8:	4619      	mov	r1, r3
 8013bca:	4610      	mov	r0, r2
 8013bcc:	f000 fe0e 	bl	80147ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2201      	movs	r2, #1
 8013be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2201      	movs	r2, #1
 8013bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2201      	movs	r2, #1
 8013c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2201      	movs	r2, #1
 8013c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013c20:	2300      	movs	r3, #0
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8013c2a:	b480      	push	{r7}
 8013c2c:	b083      	sub	sp, #12
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8013c32:	bf00      	nop
 8013c34:	370c      	adds	r7, #12
 8013c36:	46bd      	mov	sp, r7
 8013c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3c:	4770      	bx	lr
	...

08013c40 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b084      	sub	sp, #16
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d104      	bne.n	8013c5a <HAL_TIM_IC_Start+0x1a>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	e013      	b.n	8013c82 <HAL_TIM_IC_Start+0x42>
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	2b04      	cmp	r3, #4
 8013c5e:	d104      	bne.n	8013c6a <HAL_TIM_IC_Start+0x2a>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	e00b      	b.n	8013c82 <HAL_TIM_IC_Start+0x42>
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	2b08      	cmp	r3, #8
 8013c6e:	d104      	bne.n	8013c7a <HAL_TIM_IC_Start+0x3a>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	e003      	b.n	8013c82 <HAL_TIM_IC_Start+0x42>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d104      	bne.n	8013c94 <HAL_TIM_IC_Start+0x54>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c90:	b2db      	uxtb	r3, r3
 8013c92:	e013      	b.n	8013cbc <HAL_TIM_IC_Start+0x7c>
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	2b04      	cmp	r3, #4
 8013c98:	d104      	bne.n	8013ca4 <HAL_TIM_IC_Start+0x64>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	e00b      	b.n	8013cbc <HAL_TIM_IC_Start+0x7c>
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	2b08      	cmp	r3, #8
 8013ca8:	d104      	bne.n	8013cb4 <HAL_TIM_IC_Start+0x74>
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	e003      	b.n	8013cbc <HAL_TIM_IC_Start+0x7c>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d102      	bne.n	8013cca <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013cc4:	7bbb      	ldrb	r3, [r7, #14]
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d001      	beq.n	8013cce <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e081      	b.n	8013dd2 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d104      	bne.n	8013cde <HAL_TIM_IC_Start+0x9e>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2202      	movs	r2, #2
 8013cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013cdc:	e013      	b.n	8013d06 <HAL_TIM_IC_Start+0xc6>
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	2b04      	cmp	r3, #4
 8013ce2:	d104      	bne.n	8013cee <HAL_TIM_IC_Start+0xae>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2202      	movs	r2, #2
 8013ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013cec:	e00b      	b.n	8013d06 <HAL_TIM_IC_Start+0xc6>
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	2b08      	cmp	r3, #8
 8013cf2:	d104      	bne.n	8013cfe <HAL_TIM_IC_Start+0xbe>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013cfc:	e003      	b.n	8013d06 <HAL_TIM_IC_Start+0xc6>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2202      	movs	r2, #2
 8013d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d104      	bne.n	8013d16 <HAL_TIM_IC_Start+0xd6>
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2202      	movs	r2, #2
 8013d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013d14:	e013      	b.n	8013d3e <HAL_TIM_IC_Start+0xfe>
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	2b04      	cmp	r3, #4
 8013d1a:	d104      	bne.n	8013d26 <HAL_TIM_IC_Start+0xe6>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2202      	movs	r2, #2
 8013d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013d24:	e00b      	b.n	8013d3e <HAL_TIM_IC_Start+0xfe>
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	2b08      	cmp	r3, #8
 8013d2a:	d104      	bne.n	8013d36 <HAL_TIM_IC_Start+0xf6>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2202      	movs	r2, #2
 8013d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d34:	e003      	b.n	8013d3e <HAL_TIM_IC_Start+0xfe>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2202      	movs	r2, #2
 8013d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2201      	movs	r2, #1
 8013d44:	6839      	ldr	r1, [r7, #0]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f001 f9f6 	bl	8015138 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a22      	ldr	r2, [pc, #136]	; (8013ddc <HAL_TIM_IC_Start+0x19c>)
 8013d52:	4293      	cmp	r3, r2
 8013d54:	d022      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d5e:	d01d      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	4a1e      	ldr	r2, [pc, #120]	; (8013de0 <HAL_TIM_IC_Start+0x1a0>)
 8013d66:	4293      	cmp	r3, r2
 8013d68:	d018      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	4a1d      	ldr	r2, [pc, #116]	; (8013de4 <HAL_TIM_IC_Start+0x1a4>)
 8013d70:	4293      	cmp	r3, r2
 8013d72:	d013      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4a1b      	ldr	r2, [pc, #108]	; (8013de8 <HAL_TIM_IC_Start+0x1a8>)
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d00e      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	4a1a      	ldr	r2, [pc, #104]	; (8013dec <HAL_TIM_IC_Start+0x1ac>)
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d009      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4a18      	ldr	r2, [pc, #96]	; (8013df0 <HAL_TIM_IC_Start+0x1b0>)
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d004      	beq.n	8013d9c <HAL_TIM_IC_Start+0x15c>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4a17      	ldr	r2, [pc, #92]	; (8013df4 <HAL_TIM_IC_Start+0x1b4>)
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	d111      	bne.n	8013dc0 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	f003 0307 	and.w	r3, r3, #7
 8013da6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	2b06      	cmp	r3, #6
 8013dac:	d010      	beq.n	8013dd0 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	f042 0201 	orr.w	r2, r2, #1
 8013dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013dbe:	e007      	b.n	8013dd0 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f042 0201 	orr.w	r2, r2, #1
 8013dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3710      	adds	r7, #16
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	40010000 	.word	0x40010000
 8013de0:	40000400 	.word	0x40000400
 8013de4:	40000800 	.word	0x40000800
 8013de8:	40000c00 	.word	0x40000c00
 8013dec:	40010400 	.word	0x40010400
 8013df0:	40014000 	.word	0x40014000
 8013df4:	40001800 	.word	0x40001800

08013df8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013e02:	2300      	movs	r3, #0
 8013e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d104      	bne.n	8013e16 <HAL_TIM_IC_Start_IT+0x1e>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	e013      	b.n	8013e3e <HAL_TIM_IC_Start_IT+0x46>
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	2b04      	cmp	r3, #4
 8013e1a:	d104      	bne.n	8013e26 <HAL_TIM_IC_Start_IT+0x2e>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	e00b      	b.n	8013e3e <HAL_TIM_IC_Start_IT+0x46>
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	2b08      	cmp	r3, #8
 8013e2a:	d104      	bne.n	8013e36 <HAL_TIM_IC_Start_IT+0x3e>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	e003      	b.n	8013e3e <HAL_TIM_IC_Start_IT+0x46>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d104      	bne.n	8013e50 <HAL_TIM_IC_Start_IT+0x58>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	e013      	b.n	8013e78 <HAL_TIM_IC_Start_IT+0x80>
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	2b04      	cmp	r3, #4
 8013e54:	d104      	bne.n	8013e60 <HAL_TIM_IC_Start_IT+0x68>
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013e5c:	b2db      	uxtb	r3, r3
 8013e5e:	e00b      	b.n	8013e78 <HAL_TIM_IC_Start_IT+0x80>
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	2b08      	cmp	r3, #8
 8013e64:	d104      	bne.n	8013e70 <HAL_TIM_IC_Start_IT+0x78>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	e003      	b.n	8013e78 <HAL_TIM_IC_Start_IT+0x80>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8013e7a:	7bbb      	ldrb	r3, [r7, #14]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d102      	bne.n	8013e86 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8013e80:	7b7b      	ldrb	r3, [r7, #13]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d001      	beq.n	8013e8a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8013e86:	2301      	movs	r3, #1
 8013e88:	e0cc      	b.n	8014024 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d104      	bne.n	8013e9a <HAL_TIM_IC_Start_IT+0xa2>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2202      	movs	r2, #2
 8013e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013e98:	e013      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0xca>
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	2b04      	cmp	r3, #4
 8013e9e:	d104      	bne.n	8013eaa <HAL_TIM_IC_Start_IT+0xb2>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2202      	movs	r2, #2
 8013ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013ea8:	e00b      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0xca>
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	2b08      	cmp	r3, #8
 8013eae:	d104      	bne.n	8013eba <HAL_TIM_IC_Start_IT+0xc2>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013eb8:	e003      	b.n	8013ec2 <HAL_TIM_IC_Start_IT+0xca>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2202      	movs	r2, #2
 8013ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d104      	bne.n	8013ed2 <HAL_TIM_IC_Start_IT+0xda>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2202      	movs	r2, #2
 8013ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013ed0:	e013      	b.n	8013efa <HAL_TIM_IC_Start_IT+0x102>
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	2b04      	cmp	r3, #4
 8013ed6:	d104      	bne.n	8013ee2 <HAL_TIM_IC_Start_IT+0xea>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2202      	movs	r2, #2
 8013edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ee0:	e00b      	b.n	8013efa <HAL_TIM_IC_Start_IT+0x102>
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	2b08      	cmp	r3, #8
 8013ee6:	d104      	bne.n	8013ef2 <HAL_TIM_IC_Start_IT+0xfa>
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2202      	movs	r2, #2
 8013eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ef0:	e003      	b.n	8013efa <HAL_TIM_IC_Start_IT+0x102>
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2202      	movs	r2, #2
 8013ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	2b0c      	cmp	r3, #12
 8013efe:	d841      	bhi.n	8013f84 <HAL_TIM_IC_Start_IT+0x18c>
 8013f00:	a201      	add	r2, pc, #4	; (adr r2, 8013f08 <HAL_TIM_IC_Start_IT+0x110>)
 8013f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f06:	bf00      	nop
 8013f08:	08013f3d 	.word	0x08013f3d
 8013f0c:	08013f85 	.word	0x08013f85
 8013f10:	08013f85 	.word	0x08013f85
 8013f14:	08013f85 	.word	0x08013f85
 8013f18:	08013f4f 	.word	0x08013f4f
 8013f1c:	08013f85 	.word	0x08013f85
 8013f20:	08013f85 	.word	0x08013f85
 8013f24:	08013f85 	.word	0x08013f85
 8013f28:	08013f61 	.word	0x08013f61
 8013f2c:	08013f85 	.word	0x08013f85
 8013f30:	08013f85 	.word	0x08013f85
 8013f34:	08013f85 	.word	0x08013f85
 8013f38:	08013f73 	.word	0x08013f73
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	68da      	ldr	r2, [r3, #12]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f042 0202 	orr.w	r2, r2, #2
 8013f4a:	60da      	str	r2, [r3, #12]
      break;
 8013f4c:	e01d      	b.n	8013f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	68da      	ldr	r2, [r3, #12]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f042 0204 	orr.w	r2, r2, #4
 8013f5c:	60da      	str	r2, [r3, #12]
      break;
 8013f5e:	e014      	b.n	8013f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	68da      	ldr	r2, [r3, #12]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	f042 0208 	orr.w	r2, r2, #8
 8013f6e:	60da      	str	r2, [r3, #12]
      break;
 8013f70:	e00b      	b.n	8013f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	68da      	ldr	r2, [r3, #12]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f042 0210 	orr.w	r2, r2, #16
 8013f80:	60da      	str	r2, [r3, #12]
      break;
 8013f82:	e002      	b.n	8013f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8013f84:	2301      	movs	r3, #1
 8013f86:	73fb      	strb	r3, [r7, #15]
      break;
 8013f88:	bf00      	nop
  }

  if (status == HAL_OK)
 8013f8a:	7bfb      	ldrb	r3, [r7, #15]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d148      	bne.n	8014022 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2201      	movs	r2, #1
 8013f96:	6839      	ldr	r1, [r7, #0]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f001 f8cd 	bl	8015138 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4a22      	ldr	r2, [pc, #136]	; (801402c <HAL_TIM_IC_Start_IT+0x234>)
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d022      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fb0:	d01d      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	4a1e      	ldr	r2, [pc, #120]	; (8014030 <HAL_TIM_IC_Start_IT+0x238>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d018      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a1c      	ldr	r2, [pc, #112]	; (8014034 <HAL_TIM_IC_Start_IT+0x23c>)
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d013      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4a1b      	ldr	r2, [pc, #108]	; (8014038 <HAL_TIM_IC_Start_IT+0x240>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d00e      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4a19      	ldr	r2, [pc, #100]	; (801403c <HAL_TIM_IC_Start_IT+0x244>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d009      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	4a18      	ldr	r2, [pc, #96]	; (8014040 <HAL_TIM_IC_Start_IT+0x248>)
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	d004      	beq.n	8013fee <HAL_TIM_IC_Start_IT+0x1f6>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	4a16      	ldr	r2, [pc, #88]	; (8014044 <HAL_TIM_IC_Start_IT+0x24c>)
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d111      	bne.n	8014012 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	689b      	ldr	r3, [r3, #8]
 8013ff4:	f003 0307 	and.w	r3, r3, #7
 8013ff8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	2b06      	cmp	r3, #6
 8013ffe:	d010      	beq.n	8014022 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	f042 0201 	orr.w	r2, r2, #1
 801400e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014010:	e007      	b.n	8014022 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f042 0201 	orr.w	r2, r2, #1
 8014020:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8014022:	7bfb      	ldrb	r3, [r7, #15]
}
 8014024:	4618      	mov	r0, r3
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	40010000 	.word	0x40010000
 8014030:	40000400 	.word	0x40000400
 8014034:	40000800 	.word	0x40000800
 8014038:	40000c00 	.word	0x40000c00
 801403c:	40010400 	.word	0x40010400
 8014040:	40014000 	.word	0x40014000
 8014044:	40001800 	.word	0x40001800

08014048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	691b      	ldr	r3, [r3, #16]
 8014056:	f003 0302 	and.w	r3, r3, #2
 801405a:	2b02      	cmp	r3, #2
 801405c:	d122      	bne.n	80140a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	f003 0302 	and.w	r3, r3, #2
 8014068:	2b02      	cmp	r3, #2
 801406a:	d11b      	bne.n	80140a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f06f 0202 	mvn.w	r2, #2
 8014074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2201      	movs	r2, #1
 801407a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	699b      	ldr	r3, [r3, #24]
 8014082:	f003 0303 	and.w	r3, r3, #3
 8014086:	2b00      	cmp	r3, #0
 8014088:	d003      	beq.n	8014092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f7ed fde6 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8014090:	e005      	b.n	801409e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f000 fb8c 	bl	80147b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f000 fb93 	bl	80147c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2200      	movs	r2, #0
 80140a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	691b      	ldr	r3, [r3, #16]
 80140aa:	f003 0304 	and.w	r3, r3, #4
 80140ae:	2b04      	cmp	r3, #4
 80140b0:	d122      	bne.n	80140f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	f003 0304 	and.w	r3, r3, #4
 80140bc:	2b04      	cmp	r3, #4
 80140be:	d11b      	bne.n	80140f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	f06f 0204 	mvn.w	r2, #4
 80140c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2202      	movs	r2, #2
 80140ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	699b      	ldr	r3, [r3, #24]
 80140d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d003      	beq.n	80140e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f7ed fdbc 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 80140e4:	e005      	b.n	80140f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 fb62 	bl	80147b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 fb69 	bl	80147c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	691b      	ldr	r3, [r3, #16]
 80140fe:	f003 0308 	and.w	r3, r3, #8
 8014102:	2b08      	cmp	r3, #8
 8014104:	d122      	bne.n	801414c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	f003 0308 	and.w	r3, r3, #8
 8014110:	2b08      	cmp	r3, #8
 8014112:	d11b      	bne.n	801414c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f06f 0208 	mvn.w	r2, #8
 801411c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2204      	movs	r2, #4
 8014122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	69db      	ldr	r3, [r3, #28]
 801412a:	f003 0303 	and.w	r3, r3, #3
 801412e:	2b00      	cmp	r3, #0
 8014130:	d003      	beq.n	801413a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7ed fd92 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8014138:	e005      	b.n	8014146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f000 fb38 	bl	80147b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 fb3f 	bl	80147c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2200      	movs	r2, #0
 801414a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	691b      	ldr	r3, [r3, #16]
 8014152:	f003 0310 	and.w	r3, r3, #16
 8014156:	2b10      	cmp	r3, #16
 8014158:	d122      	bne.n	80141a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	f003 0310 	and.w	r3, r3, #16
 8014164:	2b10      	cmp	r3, #16
 8014166:	d11b      	bne.n	80141a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f06f 0210 	mvn.w	r2, #16
 8014170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2208      	movs	r2, #8
 8014176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	69db      	ldr	r3, [r3, #28]
 801417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014182:	2b00      	cmp	r3, #0
 8014184:	d003      	beq.n	801418e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7ed fd68 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 801418c:	e005      	b.n	801419a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f000 fb0e 	bl	80147b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f000 fb15 	bl	80147c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	2200      	movs	r2, #0
 801419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	691b      	ldr	r3, [r3, #16]
 80141a6:	f003 0301 	and.w	r3, r3, #1
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d10e      	bne.n	80141cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	68db      	ldr	r3, [r3, #12]
 80141b4:	f003 0301 	and.w	r3, r3, #1
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d107      	bne.n	80141cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	f06f 0201 	mvn.w	r2, #1
 80141c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7f0 f818 	bl	80041fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	691b      	ldr	r3, [r3, #16]
 80141d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141d6:	2b80      	cmp	r3, #128	; 0x80
 80141d8:	d10e      	bne.n	80141f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	68db      	ldr	r3, [r3, #12]
 80141e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141e4:	2b80      	cmp	r3, #128	; 0x80
 80141e6:	d107      	bne.n	80141f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80141f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f001 f89e 	bl	8015334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	691b      	ldr	r3, [r3, #16]
 80141fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014202:	2b40      	cmp	r3, #64	; 0x40
 8014204:	d10e      	bne.n	8014224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014210:	2b40      	cmp	r3, #64	; 0x40
 8014212:	d107      	bne.n	8014224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fada 	bl	80147d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	691b      	ldr	r3, [r3, #16]
 801422a:	f003 0320 	and.w	r3, r3, #32
 801422e:	2b20      	cmp	r3, #32
 8014230:	d10e      	bne.n	8014250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	68db      	ldr	r3, [r3, #12]
 8014238:	f003 0320 	and.w	r3, r3, #32
 801423c:	2b20      	cmp	r3, #32
 801423e:	d107      	bne.n	8014250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f06f 0220 	mvn.w	r2, #32
 8014248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f001 f868 	bl	8015320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014250:	bf00      	nop
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b086      	sub	sp, #24
 801425c:	af00      	add	r7, sp, #0
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014264:	2300      	movs	r3, #0
 8014266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801426e:	2b01      	cmp	r3, #1
 8014270:	d101      	bne.n	8014276 <HAL_TIM_IC_ConfigChannel+0x1e>
 8014272:	2302      	movs	r3, #2
 8014274:	e088      	b.n	8014388 <HAL_TIM_IC_ConfigChannel+0x130>
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	2201      	movs	r2, #1
 801427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d11b      	bne.n	80142bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	6818      	ldr	r0, [r3, #0]
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	6819      	ldr	r1, [r3, #0]
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	685a      	ldr	r2, [r3, #4]
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	68db      	ldr	r3, [r3, #12]
 8014294:	f000 fd8c 	bl	8014db0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	699a      	ldr	r2, [r3, #24]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	f022 020c 	bic.w	r2, r2, #12
 80142a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	6999      	ldr	r1, [r3, #24]
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	689a      	ldr	r2, [r3, #8]
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	430a      	orrs	r2, r1
 80142b8:	619a      	str	r2, [r3, #24]
 80142ba:	e060      	b.n	801437e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2b04      	cmp	r3, #4
 80142c0:	d11c      	bne.n	80142fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6818      	ldr	r0, [r3, #0]
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	6819      	ldr	r1, [r3, #0]
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	68db      	ldr	r3, [r3, #12]
 80142d2:	f000 fe10 	bl	8014ef6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	699a      	ldr	r2, [r3, #24]
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80142e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	6999      	ldr	r1, [r3, #24]
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	021a      	lsls	r2, r3, #8
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	430a      	orrs	r2, r1
 80142f8:	619a      	str	r2, [r3, #24]
 80142fa:	e040      	b.n	801437e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b08      	cmp	r3, #8
 8014300:	d11b      	bne.n	801433a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	6818      	ldr	r0, [r3, #0]
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	6819      	ldr	r1, [r3, #0]
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	685a      	ldr	r2, [r3, #4]
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	68db      	ldr	r3, [r3, #12]
 8014312:	f000 fe5d 	bl	8014fd0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	69da      	ldr	r2, [r3, #28]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f022 020c 	bic.w	r2, r2, #12
 8014324:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	69d9      	ldr	r1, [r3, #28]
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	689a      	ldr	r2, [r3, #8]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	430a      	orrs	r2, r1
 8014336:	61da      	str	r2, [r3, #28]
 8014338:	e021      	b.n	801437e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2b0c      	cmp	r3, #12
 801433e:	d11c      	bne.n	801437a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	6818      	ldr	r0, [r3, #0]
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	6819      	ldr	r1, [r3, #0]
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	685a      	ldr	r2, [r3, #4]
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	68db      	ldr	r3, [r3, #12]
 8014350:	f000 fe7a 	bl	8015048 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	69da      	ldr	r2, [r3, #28]
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8014362:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	69d9      	ldr	r1, [r3, #28]
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	021a      	lsls	r2, r3, #8
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	430a      	orrs	r2, r1
 8014376:	61da      	str	r2, [r3, #28]
 8014378:	e001      	b.n	801437e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801437a:	2301      	movs	r3, #1
 801437c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	2200      	movs	r2, #0
 8014382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014386:	7dfb      	ldrb	r3, [r7, #23]
}
 8014388:	4618      	mov	r0, r3
 801438a:	3718      	adds	r7, #24
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801439c:	2300      	movs	r3, #0
 801439e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80143a6:	2b01      	cmp	r3, #1
 80143a8:	d101      	bne.n	80143ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80143aa:	2302      	movs	r3, #2
 80143ac:	e0ae      	b.n	801450c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2201      	movs	r2, #1
 80143b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2b0c      	cmp	r3, #12
 80143ba:	f200 809f 	bhi.w	80144fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80143be:	a201      	add	r2, pc, #4	; (adr r2, 80143c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80143c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143c4:	080143f9 	.word	0x080143f9
 80143c8:	080144fd 	.word	0x080144fd
 80143cc:	080144fd 	.word	0x080144fd
 80143d0:	080144fd 	.word	0x080144fd
 80143d4:	08014439 	.word	0x08014439
 80143d8:	080144fd 	.word	0x080144fd
 80143dc:	080144fd 	.word	0x080144fd
 80143e0:	080144fd 	.word	0x080144fd
 80143e4:	0801447b 	.word	0x0801447b
 80143e8:	080144fd 	.word	0x080144fd
 80143ec:	080144fd 	.word	0x080144fd
 80143f0:	080144fd 	.word	0x080144fd
 80143f4:	080144bb 	.word	0x080144bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	68b9      	ldr	r1, [r7, #8]
 80143fe:	4618      	mov	r0, r3
 8014400:	f000 fa94 	bl	801492c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	699a      	ldr	r2, [r3, #24]
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	f042 0208 	orr.w	r2, r2, #8
 8014412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	699a      	ldr	r2, [r3, #24]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f022 0204 	bic.w	r2, r2, #4
 8014422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	6999      	ldr	r1, [r3, #24]
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	691a      	ldr	r2, [r3, #16]
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	430a      	orrs	r2, r1
 8014434:	619a      	str	r2, [r3, #24]
      break;
 8014436:	e064      	b.n	8014502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	68b9      	ldr	r1, [r7, #8]
 801443e:	4618      	mov	r0, r3
 8014440:	f000 fae4 	bl	8014a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	699a      	ldr	r2, [r3, #24]
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	699a      	ldr	r2, [r3, #24]
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	6999      	ldr	r1, [r3, #24]
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	691b      	ldr	r3, [r3, #16]
 801446e:	021a      	lsls	r2, r3, #8
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	430a      	orrs	r2, r1
 8014476:	619a      	str	r2, [r3, #24]
      break;
 8014478:	e043      	b.n	8014502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	68b9      	ldr	r1, [r7, #8]
 8014480:	4618      	mov	r0, r3
 8014482:	f000 fb39 	bl	8014af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	69da      	ldr	r2, [r3, #28]
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	f042 0208 	orr.w	r2, r2, #8
 8014494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	69da      	ldr	r2, [r3, #28]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	f022 0204 	bic.w	r2, r2, #4
 80144a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	69d9      	ldr	r1, [r3, #28]
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	691a      	ldr	r2, [r3, #16]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	430a      	orrs	r2, r1
 80144b6:	61da      	str	r2, [r3, #28]
      break;
 80144b8:	e023      	b.n	8014502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	68b9      	ldr	r1, [r7, #8]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f000 fb8d 	bl	8014be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	69da      	ldr	r2, [r3, #28]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80144d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	69da      	ldr	r2, [r3, #28]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80144e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	69d9      	ldr	r1, [r3, #28]
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	691b      	ldr	r3, [r3, #16]
 80144f0:	021a      	lsls	r2, r3, #8
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	430a      	orrs	r2, r1
 80144f8:	61da      	str	r2, [r3, #28]
      break;
 80144fa:	e002      	b.n	8014502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80144fc:	2301      	movs	r3, #1
 80144fe:	75fb      	strb	r3, [r7, #23]
      break;
 8014500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2200      	movs	r2, #0
 8014506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801450a:	7dfb      	ldrb	r3, [r7, #23]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3718      	adds	r7, #24
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801451e:	2300      	movs	r3, #0
 8014520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014528:	2b01      	cmp	r3, #1
 801452a:	d101      	bne.n	8014530 <HAL_TIM_ConfigClockSource+0x1c>
 801452c:	2302      	movs	r3, #2
 801452e:	e0b4      	b.n	801469a <HAL_TIM_ConfigClockSource+0x186>
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2201      	movs	r2, #1
 8014534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2202      	movs	r2, #2
 801453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	68ba      	ldr	r2, [r7, #8]
 801455e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014568:	d03e      	beq.n	80145e8 <HAL_TIM_ConfigClockSource+0xd4>
 801456a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801456e:	f200 8087 	bhi.w	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 8014572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014576:	f000 8086 	beq.w	8014686 <HAL_TIM_ConfigClockSource+0x172>
 801457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801457e:	d87f      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 8014580:	2b70      	cmp	r3, #112	; 0x70
 8014582:	d01a      	beq.n	80145ba <HAL_TIM_ConfigClockSource+0xa6>
 8014584:	2b70      	cmp	r3, #112	; 0x70
 8014586:	d87b      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 8014588:	2b60      	cmp	r3, #96	; 0x60
 801458a:	d050      	beq.n	801462e <HAL_TIM_ConfigClockSource+0x11a>
 801458c:	2b60      	cmp	r3, #96	; 0x60
 801458e:	d877      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 8014590:	2b50      	cmp	r3, #80	; 0x50
 8014592:	d03c      	beq.n	801460e <HAL_TIM_ConfigClockSource+0xfa>
 8014594:	2b50      	cmp	r3, #80	; 0x50
 8014596:	d873      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 8014598:	2b40      	cmp	r3, #64	; 0x40
 801459a:	d058      	beq.n	801464e <HAL_TIM_ConfigClockSource+0x13a>
 801459c:	2b40      	cmp	r3, #64	; 0x40
 801459e:	d86f      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 80145a0:	2b30      	cmp	r3, #48	; 0x30
 80145a2:	d064      	beq.n	801466e <HAL_TIM_ConfigClockSource+0x15a>
 80145a4:	2b30      	cmp	r3, #48	; 0x30
 80145a6:	d86b      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 80145a8:	2b20      	cmp	r3, #32
 80145aa:	d060      	beq.n	801466e <HAL_TIM_ConfigClockSource+0x15a>
 80145ac:	2b20      	cmp	r3, #32
 80145ae:	d867      	bhi.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d05c      	beq.n	801466e <HAL_TIM_ConfigClockSource+0x15a>
 80145b4:	2b10      	cmp	r3, #16
 80145b6:	d05a      	beq.n	801466e <HAL_TIM_ConfigClockSource+0x15a>
 80145b8:	e062      	b.n	8014680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6818      	ldr	r0, [r3, #0]
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	6899      	ldr	r1, [r3, #8]
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	685a      	ldr	r2, [r3, #4]
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	68db      	ldr	r3, [r3, #12]
 80145ca:	f000 fd95 	bl	80150f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80145dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	68ba      	ldr	r2, [r7, #8]
 80145e4:	609a      	str	r2, [r3, #8]
      break;
 80145e6:	e04f      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6818      	ldr	r0, [r3, #0]
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	6899      	ldr	r1, [r3, #8]
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	685a      	ldr	r2, [r3, #4]
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	f000 fd7e 	bl	80150f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	689a      	ldr	r2, [r3, #8]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801460a:	609a      	str	r2, [r3, #8]
      break;
 801460c:	e03c      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6818      	ldr	r0, [r3, #0]
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	6859      	ldr	r1, [r3, #4]
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	461a      	mov	r2, r3
 801461c:	f000 fc3c 	bl	8014e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2150      	movs	r1, #80	; 0x50
 8014626:	4618      	mov	r0, r3
 8014628:	f000 fd4b 	bl	80150c2 <TIM_ITRx_SetConfig>
      break;
 801462c:	e02c      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6818      	ldr	r0, [r3, #0]
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	6859      	ldr	r1, [r3, #4]
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	461a      	mov	r2, r3
 801463c:	f000 fc98 	bl	8014f70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2160      	movs	r1, #96	; 0x60
 8014646:	4618      	mov	r0, r3
 8014648:	f000 fd3b 	bl	80150c2 <TIM_ITRx_SetConfig>
      break;
 801464c:	e01c      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6818      	ldr	r0, [r3, #0]
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	6859      	ldr	r1, [r3, #4]
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	461a      	mov	r2, r3
 801465c:	f000 fc1c 	bl	8014e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	2140      	movs	r1, #64	; 0x40
 8014666:	4618      	mov	r0, r3
 8014668:	f000 fd2b 	bl	80150c2 <TIM_ITRx_SetConfig>
      break;
 801466c:	e00c      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	4619      	mov	r1, r3
 8014678:	4610      	mov	r0, r2
 801467a:	f000 fd22 	bl	80150c2 <TIM_ITRx_SetConfig>
      break;
 801467e:	e003      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014680:	2301      	movs	r3, #1
 8014682:	73fb      	strb	r3, [r7, #15]
      break;
 8014684:	e000      	b.n	8014688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2201      	movs	r2, #1
 801468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2200      	movs	r2, #0
 8014694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014698:	7bfb      	ldrb	r3, [r7, #15]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3710      	adds	r7, #16
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b082      	sub	sp, #8
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
 80146aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80146b2:	2b01      	cmp	r3, #1
 80146b4:	d101      	bne.n	80146ba <HAL_TIM_SlaveConfigSynchro+0x18>
 80146b6:	2302      	movs	r3, #2
 80146b8:	e031      	b.n	801471e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2201      	movs	r2, #1
 80146be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2202      	movs	r2, #2
 80146c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80146ca:	6839      	ldr	r1, [r7, #0]
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f000 fadd 	bl	8014c8c <TIM_SlaveTimer_SetConfig>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d009      	beq.n	80146ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2201      	movs	r2, #1
 80146dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2200      	movs	r2, #0
 80146e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80146e8:	2301      	movs	r3, #1
 80146ea:	e018      	b.n	801471e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	68da      	ldr	r2, [r3, #12]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80146fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	68da      	ldr	r2, [r3, #12]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801470a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2201      	movs	r2, #1
 8014710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2200      	movs	r2, #0
 8014718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801471c:	2300      	movs	r3, #0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
	...

08014728 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8014732:	2300      	movs	r3, #0
 8014734:	60fb      	str	r3, [r7, #12]
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	2b0c      	cmp	r3, #12
 801473a:	d831      	bhi.n	80147a0 <HAL_TIM_ReadCapturedValue+0x78>
 801473c:	a201      	add	r2, pc, #4	; (adr r2, 8014744 <HAL_TIM_ReadCapturedValue+0x1c>)
 801473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014742:	bf00      	nop
 8014744:	08014779 	.word	0x08014779
 8014748:	080147a1 	.word	0x080147a1
 801474c:	080147a1 	.word	0x080147a1
 8014750:	080147a1 	.word	0x080147a1
 8014754:	08014783 	.word	0x08014783
 8014758:	080147a1 	.word	0x080147a1
 801475c:	080147a1 	.word	0x080147a1
 8014760:	080147a1 	.word	0x080147a1
 8014764:	0801478d 	.word	0x0801478d
 8014768:	080147a1 	.word	0x080147a1
 801476c:	080147a1 	.word	0x080147a1
 8014770:	080147a1 	.word	0x080147a1
 8014774:	08014797 	.word	0x08014797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801477e:	60fb      	str	r3, [r7, #12]

      break;
 8014780:	e00f      	b.n	80147a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014788:	60fb      	str	r3, [r7, #12]

      break;
 801478a:	e00a      	b.n	80147a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014792:	60fb      	str	r3, [r7, #12]

      break;
 8014794:	e005      	b.n	80147a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801479c:	60fb      	str	r3, [r7, #12]

      break;
 801479e:	e000      	b.n	80147a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80147a0:	bf00      	nop
  }

  return tmpreg;
 80147a2:	68fb      	ldr	r3, [r7, #12]
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3714      	adds	r7, #20
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b083      	sub	sp, #12
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80147b8:	bf00      	nop
 80147ba:	370c      	adds	r7, #12
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr

080147c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80147cc:	bf00      	nop
 80147ce:	370c      	adds	r7, #12
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr

080147d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80147d8:	b480      	push	{r7}
 80147da:	b083      	sub	sp, #12
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80147e0:	bf00      	nop
 80147e2:	370c      	adds	r7, #12
 80147e4:	46bd      	mov	sp, r7
 80147e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ea:	4770      	bx	lr

080147ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80147ec:	b480      	push	{r7}
 80147ee:	b085      	sub	sp, #20
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	4a40      	ldr	r2, [pc, #256]	; (8014900 <TIM_Base_SetConfig+0x114>)
 8014800:	4293      	cmp	r3, r2
 8014802:	d013      	beq.n	801482c <TIM_Base_SetConfig+0x40>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801480a:	d00f      	beq.n	801482c <TIM_Base_SetConfig+0x40>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	4a3d      	ldr	r2, [pc, #244]	; (8014904 <TIM_Base_SetConfig+0x118>)
 8014810:	4293      	cmp	r3, r2
 8014812:	d00b      	beq.n	801482c <TIM_Base_SetConfig+0x40>
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	4a3c      	ldr	r2, [pc, #240]	; (8014908 <TIM_Base_SetConfig+0x11c>)
 8014818:	4293      	cmp	r3, r2
 801481a:	d007      	beq.n	801482c <TIM_Base_SetConfig+0x40>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	4a3b      	ldr	r2, [pc, #236]	; (801490c <TIM_Base_SetConfig+0x120>)
 8014820:	4293      	cmp	r3, r2
 8014822:	d003      	beq.n	801482c <TIM_Base_SetConfig+0x40>
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	4a3a      	ldr	r2, [pc, #232]	; (8014910 <TIM_Base_SetConfig+0x124>)
 8014828:	4293      	cmp	r3, r2
 801482a:	d108      	bne.n	801483e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	68fa      	ldr	r2, [r7, #12]
 801483a:	4313      	orrs	r3, r2
 801483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	4a2f      	ldr	r2, [pc, #188]	; (8014900 <TIM_Base_SetConfig+0x114>)
 8014842:	4293      	cmp	r3, r2
 8014844:	d02b      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801484c:	d027      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4a2c      	ldr	r2, [pc, #176]	; (8014904 <TIM_Base_SetConfig+0x118>)
 8014852:	4293      	cmp	r3, r2
 8014854:	d023      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	4a2b      	ldr	r2, [pc, #172]	; (8014908 <TIM_Base_SetConfig+0x11c>)
 801485a:	4293      	cmp	r3, r2
 801485c:	d01f      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	4a2a      	ldr	r2, [pc, #168]	; (801490c <TIM_Base_SetConfig+0x120>)
 8014862:	4293      	cmp	r3, r2
 8014864:	d01b      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	4a29      	ldr	r2, [pc, #164]	; (8014910 <TIM_Base_SetConfig+0x124>)
 801486a:	4293      	cmp	r3, r2
 801486c:	d017      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	4a28      	ldr	r2, [pc, #160]	; (8014914 <TIM_Base_SetConfig+0x128>)
 8014872:	4293      	cmp	r3, r2
 8014874:	d013      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	4a27      	ldr	r2, [pc, #156]	; (8014918 <TIM_Base_SetConfig+0x12c>)
 801487a:	4293      	cmp	r3, r2
 801487c:	d00f      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	4a26      	ldr	r2, [pc, #152]	; (801491c <TIM_Base_SetConfig+0x130>)
 8014882:	4293      	cmp	r3, r2
 8014884:	d00b      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	4a25      	ldr	r2, [pc, #148]	; (8014920 <TIM_Base_SetConfig+0x134>)
 801488a:	4293      	cmp	r3, r2
 801488c:	d007      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	4a24      	ldr	r2, [pc, #144]	; (8014924 <TIM_Base_SetConfig+0x138>)
 8014892:	4293      	cmp	r3, r2
 8014894:	d003      	beq.n	801489e <TIM_Base_SetConfig+0xb2>
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	4a23      	ldr	r2, [pc, #140]	; (8014928 <TIM_Base_SetConfig+0x13c>)
 801489a:	4293      	cmp	r3, r2
 801489c:	d108      	bne.n	80148b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80148a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	68db      	ldr	r3, [r3, #12]
 80148aa:	68fa      	ldr	r2, [r7, #12]
 80148ac:	4313      	orrs	r3, r2
 80148ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	695b      	ldr	r3, [r3, #20]
 80148ba:	4313      	orrs	r3, r2
 80148bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	689a      	ldr	r2, [r3, #8]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	4a0a      	ldr	r2, [pc, #40]	; (8014900 <TIM_Base_SetConfig+0x114>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d003      	beq.n	80148e4 <TIM_Base_SetConfig+0xf8>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	4a0c      	ldr	r2, [pc, #48]	; (8014910 <TIM_Base_SetConfig+0x124>)
 80148e0:	4293      	cmp	r3, r2
 80148e2:	d103      	bne.n	80148ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	691a      	ldr	r2, [r3, #16]
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2201      	movs	r2, #1
 80148f0:	615a      	str	r2, [r3, #20]
}
 80148f2:	bf00      	nop
 80148f4:	3714      	adds	r7, #20
 80148f6:	46bd      	mov	sp, r7
 80148f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop
 8014900:	40010000 	.word	0x40010000
 8014904:	40000400 	.word	0x40000400
 8014908:	40000800 	.word	0x40000800
 801490c:	40000c00 	.word	0x40000c00
 8014910:	40010400 	.word	0x40010400
 8014914:	40014000 	.word	0x40014000
 8014918:	40014400 	.word	0x40014400
 801491c:	40014800 	.word	0x40014800
 8014920:	40001800 	.word	0x40001800
 8014924:	40001c00 	.word	0x40001c00
 8014928:	40002000 	.word	0x40002000

0801492c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801492c:	b480      	push	{r7}
 801492e:	b087      	sub	sp, #28
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	6a1b      	ldr	r3, [r3, #32]
 801493a:	f023 0201 	bic.w	r2, r3, #1
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6a1b      	ldr	r3, [r3, #32]
 8014946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	699b      	ldr	r3, [r3, #24]
 8014952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f023 0303 	bic.w	r3, r3, #3
 8014962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	68fa      	ldr	r2, [r7, #12]
 801496a:	4313      	orrs	r3, r2
 801496c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	f023 0302 	bic.w	r3, r3, #2
 8014974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	697a      	ldr	r2, [r7, #20]
 801497c:	4313      	orrs	r3, r2
 801497e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	4a20      	ldr	r2, [pc, #128]	; (8014a04 <TIM_OC1_SetConfig+0xd8>)
 8014984:	4293      	cmp	r3, r2
 8014986:	d003      	beq.n	8014990 <TIM_OC1_SetConfig+0x64>
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	4a1f      	ldr	r2, [pc, #124]	; (8014a08 <TIM_OC1_SetConfig+0xdc>)
 801498c:	4293      	cmp	r3, r2
 801498e:	d10c      	bne.n	80149aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	f023 0308 	bic.w	r3, r3, #8
 8014996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	697a      	ldr	r2, [r7, #20]
 801499e:	4313      	orrs	r3, r2
 80149a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	f023 0304 	bic.w	r3, r3, #4
 80149a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	4a15      	ldr	r2, [pc, #84]	; (8014a04 <TIM_OC1_SetConfig+0xd8>)
 80149ae:	4293      	cmp	r3, r2
 80149b0:	d003      	beq.n	80149ba <TIM_OC1_SetConfig+0x8e>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4a14      	ldr	r2, [pc, #80]	; (8014a08 <TIM_OC1_SetConfig+0xdc>)
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d111      	bne.n	80149de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80149c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80149c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	695b      	ldr	r3, [r3, #20]
 80149ce:	693a      	ldr	r2, [r7, #16]
 80149d0:	4313      	orrs	r3, r2
 80149d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	693a      	ldr	r2, [r7, #16]
 80149da:	4313      	orrs	r3, r2
 80149dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	693a      	ldr	r2, [r7, #16]
 80149e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	68fa      	ldr	r2, [r7, #12]
 80149e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	685a      	ldr	r2, [r3, #4]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	697a      	ldr	r2, [r7, #20]
 80149f6:	621a      	str	r2, [r3, #32]
}
 80149f8:	bf00      	nop
 80149fa:	371c      	adds	r7, #28
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr
 8014a04:	40010000 	.word	0x40010000
 8014a08:	40010400 	.word	0x40010400

08014a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b087      	sub	sp, #28
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a1b      	ldr	r3, [r3, #32]
 8014a1a:	f023 0210 	bic.w	r2, r3, #16
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	6a1b      	ldr	r3, [r3, #32]
 8014a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	699b      	ldr	r3, [r3, #24]
 8014a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	021b      	lsls	r3, r3, #8
 8014a4a:	68fa      	ldr	r2, [r7, #12]
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	f023 0320 	bic.w	r3, r3, #32
 8014a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	689b      	ldr	r3, [r3, #8]
 8014a5c:	011b      	lsls	r3, r3, #4
 8014a5e:	697a      	ldr	r2, [r7, #20]
 8014a60:	4313      	orrs	r3, r2
 8014a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4a22      	ldr	r2, [pc, #136]	; (8014af0 <TIM_OC2_SetConfig+0xe4>)
 8014a68:	4293      	cmp	r3, r2
 8014a6a:	d003      	beq.n	8014a74 <TIM_OC2_SetConfig+0x68>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	4a21      	ldr	r2, [pc, #132]	; (8014af4 <TIM_OC2_SetConfig+0xe8>)
 8014a70:	4293      	cmp	r3, r2
 8014a72:	d10d      	bne.n	8014a90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	011b      	lsls	r3, r3, #4
 8014a82:	697a      	ldr	r2, [r7, #20]
 8014a84:	4313      	orrs	r3, r2
 8014a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	4a17      	ldr	r2, [pc, #92]	; (8014af0 <TIM_OC2_SetConfig+0xe4>)
 8014a94:	4293      	cmp	r3, r2
 8014a96:	d003      	beq.n	8014aa0 <TIM_OC2_SetConfig+0x94>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	4a16      	ldr	r2, [pc, #88]	; (8014af4 <TIM_OC2_SetConfig+0xe8>)
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	d113      	bne.n	8014ac8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	695b      	ldr	r3, [r3, #20]
 8014ab4:	009b      	lsls	r3, r3, #2
 8014ab6:	693a      	ldr	r2, [r7, #16]
 8014ab8:	4313      	orrs	r3, r2
 8014aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	699b      	ldr	r3, [r3, #24]
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	693a      	ldr	r2, [r7, #16]
 8014ac4:	4313      	orrs	r3, r2
 8014ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	693a      	ldr	r2, [r7, #16]
 8014acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	685a      	ldr	r2, [r3, #4]
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	697a      	ldr	r2, [r7, #20]
 8014ae0:	621a      	str	r2, [r3, #32]
}
 8014ae2:	bf00      	nop
 8014ae4:	371c      	adds	r7, #28
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr
 8014aee:	bf00      	nop
 8014af0:	40010000 	.word	0x40010000
 8014af4:	40010400 	.word	0x40010400

08014af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b087      	sub	sp, #28
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a1b      	ldr	r3, [r3, #32]
 8014b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	6a1b      	ldr	r3, [r3, #32]
 8014b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	685b      	ldr	r3, [r3, #4]
 8014b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	69db      	ldr	r3, [r3, #28]
 8014b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	f023 0303 	bic.w	r3, r3, #3
 8014b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	68fa      	ldr	r2, [r7, #12]
 8014b36:	4313      	orrs	r3, r2
 8014b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	021b      	lsls	r3, r3, #8
 8014b48:	697a      	ldr	r2, [r7, #20]
 8014b4a:	4313      	orrs	r3, r2
 8014b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	4a21      	ldr	r2, [pc, #132]	; (8014bd8 <TIM_OC3_SetConfig+0xe0>)
 8014b52:	4293      	cmp	r3, r2
 8014b54:	d003      	beq.n	8014b5e <TIM_OC3_SetConfig+0x66>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	4a20      	ldr	r2, [pc, #128]	; (8014bdc <TIM_OC3_SetConfig+0xe4>)
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	d10d      	bne.n	8014b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	021b      	lsls	r3, r3, #8
 8014b6c:	697a      	ldr	r2, [r7, #20]
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4a16      	ldr	r2, [pc, #88]	; (8014bd8 <TIM_OC3_SetConfig+0xe0>)
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d003      	beq.n	8014b8a <TIM_OC3_SetConfig+0x92>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4a15      	ldr	r2, [pc, #84]	; (8014bdc <TIM_OC3_SetConfig+0xe4>)
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d113      	bne.n	8014bb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	695b      	ldr	r3, [r3, #20]
 8014b9e:	011b      	lsls	r3, r3, #4
 8014ba0:	693a      	ldr	r2, [r7, #16]
 8014ba2:	4313      	orrs	r3, r2
 8014ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	699b      	ldr	r3, [r3, #24]
 8014baa:	011b      	lsls	r3, r3, #4
 8014bac:	693a      	ldr	r2, [r7, #16]
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	693a      	ldr	r2, [r7, #16]
 8014bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	68fa      	ldr	r2, [r7, #12]
 8014bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	685a      	ldr	r2, [r3, #4]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	697a      	ldr	r2, [r7, #20]
 8014bca:	621a      	str	r2, [r3, #32]
}
 8014bcc:	bf00      	nop
 8014bce:	371c      	adds	r7, #28
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr
 8014bd8:	40010000 	.word	0x40010000
 8014bdc:	40010400 	.word	0x40010400

08014be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b087      	sub	sp, #28
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6a1b      	ldr	r3, [r3, #32]
 8014bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6a1b      	ldr	r3, [r3, #32]
 8014bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	69db      	ldr	r3, [r3, #28]
 8014c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	021b      	lsls	r3, r3, #8
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	4313      	orrs	r3, r2
 8014c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	689b      	ldr	r3, [r3, #8]
 8014c30:	031b      	lsls	r3, r3, #12
 8014c32:	693a      	ldr	r2, [r7, #16]
 8014c34:	4313      	orrs	r3, r2
 8014c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	4a12      	ldr	r2, [pc, #72]	; (8014c84 <TIM_OC4_SetConfig+0xa4>)
 8014c3c:	4293      	cmp	r3, r2
 8014c3e:	d003      	beq.n	8014c48 <TIM_OC4_SetConfig+0x68>
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	4a11      	ldr	r2, [pc, #68]	; (8014c88 <TIM_OC4_SetConfig+0xa8>)
 8014c44:	4293      	cmp	r3, r2
 8014c46:	d109      	bne.n	8014c5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	695b      	ldr	r3, [r3, #20]
 8014c54:	019b      	lsls	r3, r3, #6
 8014c56:	697a      	ldr	r2, [r7, #20]
 8014c58:	4313      	orrs	r3, r2
 8014c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	697a      	ldr	r2, [r7, #20]
 8014c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	68fa      	ldr	r2, [r7, #12]
 8014c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	685a      	ldr	r2, [r3, #4]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	693a      	ldr	r2, [r7, #16]
 8014c74:	621a      	str	r2, [r3, #32]
}
 8014c76:	bf00      	nop
 8014c78:	371c      	adds	r7, #28
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c80:	4770      	bx	lr
 8014c82:	bf00      	nop
 8014c84:	40010000 	.word	0x40010000
 8014c88:	40010400 	.word	0x40010400

08014c8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b086      	sub	sp, #24
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014c96:	2300      	movs	r3, #0
 8014c98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	689b      	ldr	r3, [r3, #8]
 8014ca0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ca8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	693a      	ldr	r2, [r7, #16]
 8014cb0:	4313      	orrs	r3, r2
 8014cb2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	f023 0307 	bic.w	r3, r3, #7
 8014cba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	693a      	ldr	r2, [r7, #16]
 8014cc2:	4313      	orrs	r3, r2
 8014cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	693a      	ldr	r2, [r7, #16]
 8014ccc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	2b70      	cmp	r3, #112	; 0x70
 8014cd4:	d01a      	beq.n	8014d0c <TIM_SlaveTimer_SetConfig+0x80>
 8014cd6:	2b70      	cmp	r3, #112	; 0x70
 8014cd8:	d860      	bhi.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
 8014cda:	2b60      	cmp	r3, #96	; 0x60
 8014cdc:	d054      	beq.n	8014d88 <TIM_SlaveTimer_SetConfig+0xfc>
 8014cde:	2b60      	cmp	r3, #96	; 0x60
 8014ce0:	d85c      	bhi.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
 8014ce2:	2b50      	cmp	r3, #80	; 0x50
 8014ce4:	d046      	beq.n	8014d74 <TIM_SlaveTimer_SetConfig+0xe8>
 8014ce6:	2b50      	cmp	r3, #80	; 0x50
 8014ce8:	d858      	bhi.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
 8014cea:	2b40      	cmp	r3, #64	; 0x40
 8014cec:	d019      	beq.n	8014d22 <TIM_SlaveTimer_SetConfig+0x96>
 8014cee:	2b40      	cmp	r3, #64	; 0x40
 8014cf0:	d854      	bhi.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
 8014cf2:	2b30      	cmp	r3, #48	; 0x30
 8014cf4:	d055      	beq.n	8014da2 <TIM_SlaveTimer_SetConfig+0x116>
 8014cf6:	2b30      	cmp	r3, #48	; 0x30
 8014cf8:	d850      	bhi.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
 8014cfa:	2b20      	cmp	r3, #32
 8014cfc:	d051      	beq.n	8014da2 <TIM_SlaveTimer_SetConfig+0x116>
 8014cfe:	2b20      	cmp	r3, #32
 8014d00:	d84c      	bhi.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d04d      	beq.n	8014da2 <TIM_SlaveTimer_SetConfig+0x116>
 8014d06:	2b10      	cmp	r3, #16
 8014d08:	d04b      	beq.n	8014da2 <TIM_SlaveTimer_SetConfig+0x116>
 8014d0a:	e047      	b.n	8014d9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6818      	ldr	r0, [r3, #0]
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	68d9      	ldr	r1, [r3, #12]
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	689a      	ldr	r2, [r3, #8]
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	691b      	ldr	r3, [r3, #16]
 8014d1c:	f000 f9ec 	bl	80150f8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8014d20:	e040      	b.n	8014da4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b05      	cmp	r3, #5
 8014d28:	d101      	bne.n	8014d2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	e03b      	b.n	8014da6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	6a1b      	ldr	r3, [r3, #32]
 8014d34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	6a1a      	ldr	r2, [r3, #32]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f022 0201 	bic.w	r2, r2, #1
 8014d44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	699b      	ldr	r3, [r3, #24]
 8014d4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014d54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	691b      	ldr	r3, [r3, #16]
 8014d5a:	011b      	lsls	r3, r3, #4
 8014d5c:	68ba      	ldr	r2, [r7, #8]
 8014d5e:	4313      	orrs	r3, r2
 8014d60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	68ba      	ldr	r2, [r7, #8]
 8014d68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	68fa      	ldr	r2, [r7, #12]
 8014d70:	621a      	str	r2, [r3, #32]
      break;
 8014d72:	e017      	b.n	8014da4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	6818      	ldr	r0, [r3, #0]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	6899      	ldr	r1, [r3, #8]
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	691b      	ldr	r3, [r3, #16]
 8014d80:	461a      	mov	r2, r3
 8014d82:	f000 f889 	bl	8014e98 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8014d86:	e00d      	b.n	8014da4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6818      	ldr	r0, [r3, #0]
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	6899      	ldr	r1, [r3, #8]
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	691b      	ldr	r3, [r3, #16]
 8014d94:	461a      	mov	r2, r3
 8014d96:	f000 f8eb 	bl	8014f70 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8014d9a:	e003      	b.n	8014da4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8014da0:	e000      	b.n	8014da4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8014da2:	bf00      	nop
  }

  return status;
 8014da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3718      	adds	r7, #24
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
	...

08014db0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b087      	sub	sp, #28
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	60b9      	str	r1, [r7, #8]
 8014dba:	607a      	str	r2, [r7, #4]
 8014dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	6a1b      	ldr	r3, [r3, #32]
 8014dc2:	f023 0201 	bic.w	r2, r3, #1
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	699b      	ldr	r3, [r3, #24]
 8014dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	6a1b      	ldr	r3, [r3, #32]
 8014dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	4a28      	ldr	r2, [pc, #160]	; (8014e7c <TIM_TI1_SetConfig+0xcc>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d01b      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014de4:	d017      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	4a25      	ldr	r2, [pc, #148]	; (8014e80 <TIM_TI1_SetConfig+0xd0>)
 8014dea:	4293      	cmp	r3, r2
 8014dec:	d013      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	4a24      	ldr	r2, [pc, #144]	; (8014e84 <TIM_TI1_SetConfig+0xd4>)
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d00f      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	4a23      	ldr	r2, [pc, #140]	; (8014e88 <TIM_TI1_SetConfig+0xd8>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d00b      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	4a22      	ldr	r2, [pc, #136]	; (8014e8c <TIM_TI1_SetConfig+0xdc>)
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d007      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	4a21      	ldr	r2, [pc, #132]	; (8014e90 <TIM_TI1_SetConfig+0xe0>)
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d003      	beq.n	8014e16 <TIM_TI1_SetConfig+0x66>
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	4a20      	ldr	r2, [pc, #128]	; (8014e94 <TIM_TI1_SetConfig+0xe4>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d101      	bne.n	8014e1a <TIM_TI1_SetConfig+0x6a>
 8014e16:	2301      	movs	r3, #1
 8014e18:	e000      	b.n	8014e1c <TIM_TI1_SetConfig+0x6c>
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d008      	beq.n	8014e32 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	f023 0303 	bic.w	r3, r3, #3
 8014e26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8014e28:	697a      	ldr	r2, [r7, #20]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4313      	orrs	r3, r2
 8014e2e:	617b      	str	r3, [r7, #20]
 8014e30:	e003      	b.n	8014e3a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	f043 0301 	orr.w	r3, r3, #1
 8014e38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	011b      	lsls	r3, r3, #4
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	697a      	ldr	r2, [r7, #20]
 8014e4a:	4313      	orrs	r3, r2
 8014e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014e4e:	693b      	ldr	r3, [r7, #16]
 8014e50:	f023 030a 	bic.w	r3, r3, #10
 8014e54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	f003 030a 	and.w	r3, r3, #10
 8014e5c:	693a      	ldr	r2, [r7, #16]
 8014e5e:	4313      	orrs	r3, r2
 8014e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	693a      	ldr	r2, [r7, #16]
 8014e6c:	621a      	str	r2, [r3, #32]
}
 8014e6e:	bf00      	nop
 8014e70:	371c      	adds	r7, #28
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr
 8014e7a:	bf00      	nop
 8014e7c:	40010000 	.word	0x40010000
 8014e80:	40000400 	.word	0x40000400
 8014e84:	40000800 	.word	0x40000800
 8014e88:	40000c00 	.word	0x40000c00
 8014e8c:	40010400 	.word	0x40010400
 8014e90:	40014000 	.word	0x40014000
 8014e94:	40001800 	.word	0x40001800

08014e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b087      	sub	sp, #28
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	6a1b      	ldr	r3, [r3, #32]
 8014ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	6a1b      	ldr	r3, [r3, #32]
 8014eae:	f023 0201 	bic.w	r2, r3, #1
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	699b      	ldr	r3, [r3, #24]
 8014eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014ebc:	693b      	ldr	r3, [r7, #16]
 8014ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	011b      	lsls	r3, r3, #4
 8014ec8:	693a      	ldr	r2, [r7, #16]
 8014eca:	4313      	orrs	r3, r2
 8014ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	f023 030a 	bic.w	r3, r3, #10
 8014ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014ed6:	697a      	ldr	r2, [r7, #20]
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	4313      	orrs	r3, r2
 8014edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	693a      	ldr	r2, [r7, #16]
 8014ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	697a      	ldr	r2, [r7, #20]
 8014ee8:	621a      	str	r2, [r3, #32]
}
 8014eea:	bf00      	nop
 8014eec:	371c      	adds	r7, #28
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef4:	4770      	bx	lr

08014ef6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014ef6:	b480      	push	{r7}
 8014ef8:	b087      	sub	sp, #28
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	60f8      	str	r0, [r7, #12]
 8014efe:	60b9      	str	r1, [r7, #8]
 8014f00:	607a      	str	r2, [r7, #4]
 8014f02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6a1b      	ldr	r3, [r3, #32]
 8014f08:	f023 0210 	bic.w	r2, r3, #16
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	699b      	ldr	r3, [r3, #24]
 8014f14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	6a1b      	ldr	r3, [r3, #32]
 8014f1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	021b      	lsls	r3, r3, #8
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	4313      	orrs	r3, r2
 8014f2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	031b      	lsls	r3, r3, #12
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	697a      	ldr	r2, [r7, #20]
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014f48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	011b      	lsls	r3, r3, #4
 8014f4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8014f52:	693a      	ldr	r2, [r7, #16]
 8014f54:	4313      	orrs	r3, r2
 8014f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	697a      	ldr	r2, [r7, #20]
 8014f5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	693a      	ldr	r2, [r7, #16]
 8014f62:	621a      	str	r2, [r3, #32]
}
 8014f64:	bf00      	nop
 8014f66:	371c      	adds	r7, #28
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr

08014f70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014f70:	b480      	push	{r7}
 8014f72:	b087      	sub	sp, #28
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	6a1b      	ldr	r3, [r3, #32]
 8014f80:	f023 0210 	bic.w	r2, r3, #16
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	699b      	ldr	r3, [r3, #24]
 8014f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	6a1b      	ldr	r3, [r3, #32]
 8014f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014f9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	031b      	lsls	r3, r3, #12
 8014fa0:	697a      	ldr	r2, [r7, #20]
 8014fa2:	4313      	orrs	r3, r2
 8014fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014fac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	011b      	lsls	r3, r3, #4
 8014fb2:	693a      	ldr	r2, [r7, #16]
 8014fb4:	4313      	orrs	r3, r2
 8014fb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	697a      	ldr	r2, [r7, #20]
 8014fbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	693a      	ldr	r2, [r7, #16]
 8014fc2:	621a      	str	r2, [r3, #32]
}
 8014fc4:	bf00      	nop
 8014fc6:	371c      	adds	r7, #28
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fce:	4770      	bx	lr

08014fd0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014fd0:	b480      	push	{r7}
 8014fd2:	b087      	sub	sp, #28
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	60f8      	str	r0, [r7, #12]
 8014fd8:	60b9      	str	r1, [r7, #8]
 8014fda:	607a      	str	r2, [r7, #4]
 8014fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	6a1b      	ldr	r3, [r3, #32]
 8014fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	69db      	ldr	r3, [r3, #28]
 8014fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	6a1b      	ldr	r3, [r3, #32]
 8014ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	f023 0303 	bic.w	r3, r3, #3
 8014ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8014ffe:	697a      	ldr	r2, [r7, #20]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	4313      	orrs	r3, r2
 8015004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801500c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	011b      	lsls	r3, r3, #4
 8015012:	b2db      	uxtb	r3, r3
 8015014:	697a      	ldr	r2, [r7, #20]
 8015016:	4313      	orrs	r3, r2
 8015018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8015020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	021b      	lsls	r3, r3, #8
 8015026:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801502a:	693a      	ldr	r2, [r7, #16]
 801502c:	4313      	orrs	r3, r2
 801502e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	697a      	ldr	r2, [r7, #20]
 8015034:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	693a      	ldr	r2, [r7, #16]
 801503a:	621a      	str	r2, [r3, #32]
}
 801503c:	bf00      	nop
 801503e:	371c      	adds	r7, #28
 8015040:	46bd      	mov	sp, r7
 8015042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015046:	4770      	bx	lr

08015048 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8015048:	b480      	push	{r7}
 801504a:	b087      	sub	sp, #28
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
 8015054:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	6a1b      	ldr	r3, [r3, #32]
 801505a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	69db      	ldr	r3, [r3, #28]
 8015066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	6a1b      	ldr	r3, [r3, #32]
 801506c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015074:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	021b      	lsls	r3, r3, #8
 801507a:	697a      	ldr	r2, [r7, #20]
 801507c:	4313      	orrs	r3, r2
 801507e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015086:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	031b      	lsls	r3, r3, #12
 801508c:	b29b      	uxth	r3, r3
 801508e:	697a      	ldr	r2, [r7, #20]
 8015090:	4313      	orrs	r3, r2
 8015092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801509a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	031b      	lsls	r3, r3, #12
 80150a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80150a4:	693a      	ldr	r2, [r7, #16]
 80150a6:	4313      	orrs	r3, r2
 80150a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	697a      	ldr	r2, [r7, #20]
 80150ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	693a      	ldr	r2, [r7, #16]
 80150b4:	621a      	str	r2, [r3, #32]
}
 80150b6:	bf00      	nop
 80150b8:	371c      	adds	r7, #28
 80150ba:	46bd      	mov	sp, r7
 80150bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c0:	4770      	bx	lr

080150c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80150c2:	b480      	push	{r7}
 80150c4:	b085      	sub	sp, #20
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	6078      	str	r0, [r7, #4]
 80150ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	689b      	ldr	r3, [r3, #8]
 80150d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80150d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	4313      	orrs	r3, r2
 80150e0:	f043 0307 	orr.w	r3, r3, #7
 80150e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	609a      	str	r2, [r3, #8]
}
 80150ec:	bf00      	nop
 80150ee:	3714      	adds	r7, #20
 80150f0:	46bd      	mov	sp, r7
 80150f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f6:	4770      	bx	lr

080150f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80150f8:	b480      	push	{r7}
 80150fa:	b087      	sub	sp, #28
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	607a      	str	r2, [r7, #4]
 8015104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	021a      	lsls	r2, r3, #8
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	431a      	orrs	r2, r3
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	4313      	orrs	r3, r2
 8015120:	697a      	ldr	r2, [r7, #20]
 8015122:	4313      	orrs	r3, r2
 8015124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	697a      	ldr	r2, [r7, #20]
 801512a:	609a      	str	r2, [r3, #8]
}
 801512c:	bf00      	nop
 801512e:	371c      	adds	r7, #28
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015138:	b480      	push	{r7}
 801513a:	b087      	sub	sp, #28
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	f003 031f 	and.w	r3, r3, #31
 801514a:	2201      	movs	r2, #1
 801514c:	fa02 f303 	lsl.w	r3, r2, r3
 8015150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	6a1a      	ldr	r2, [r3, #32]
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	43db      	mvns	r3, r3
 801515a:	401a      	ands	r2, r3
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	6a1a      	ldr	r2, [r3, #32]
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	f003 031f 	and.w	r3, r3, #31
 801516a:	6879      	ldr	r1, [r7, #4]
 801516c:	fa01 f303 	lsl.w	r3, r1, r3
 8015170:	431a      	orrs	r2, r3
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	621a      	str	r2, [r3, #32]
}
 8015176:	bf00      	nop
 8015178:	371c      	adds	r7, #28
 801517a:	46bd      	mov	sp, r7
 801517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015180:	4770      	bx	lr
	...

08015184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015184:	b480      	push	{r7}
 8015186:	b085      	sub	sp, #20
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015194:	2b01      	cmp	r3, #1
 8015196:	d101      	bne.n	801519c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015198:	2302      	movs	r3, #2
 801519a:	e05a      	b.n	8015252 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2201      	movs	r2, #1
 80151a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2202      	movs	r2, #2
 80151a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	689b      	ldr	r3, [r3, #8]
 80151ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	68fa      	ldr	r2, [r7, #12]
 80151ca:	4313      	orrs	r3, r2
 80151cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	4a21      	ldr	r2, [pc, #132]	; (8015260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80151dc:	4293      	cmp	r3, r2
 80151de:	d022      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151e8:	d01d      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	4a1d      	ldr	r2, [pc, #116]	; (8015264 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80151f0:	4293      	cmp	r3, r2
 80151f2:	d018      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	4a1b      	ldr	r2, [pc, #108]	; (8015268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d013      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	4a1a      	ldr	r2, [pc, #104]	; (801526c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015204:	4293      	cmp	r3, r2
 8015206:	d00e      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	4a18      	ldr	r2, [pc, #96]	; (8015270 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801520e:	4293      	cmp	r3, r2
 8015210:	d009      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	4a17      	ldr	r2, [pc, #92]	; (8015274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015218:	4293      	cmp	r3, r2
 801521a:	d004      	beq.n	8015226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4a15      	ldr	r2, [pc, #84]	; (8015278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015222:	4293      	cmp	r3, r2
 8015224:	d10c      	bne.n	8015240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801522c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	68ba      	ldr	r2, [r7, #8]
 8015234:	4313      	orrs	r3, r2
 8015236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	68ba      	ldr	r2, [r7, #8]
 801523e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2201      	movs	r2, #1
 8015244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2200      	movs	r2, #0
 801524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015250:	2300      	movs	r3, #0
}
 8015252:	4618      	mov	r0, r3
 8015254:	3714      	adds	r7, #20
 8015256:	46bd      	mov	sp, r7
 8015258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525c:	4770      	bx	lr
 801525e:	bf00      	nop
 8015260:	40010000 	.word	0x40010000
 8015264:	40000400 	.word	0x40000400
 8015268:	40000800 	.word	0x40000800
 801526c:	40000c00 	.word	0x40000c00
 8015270:	40010400 	.word	0x40010400
 8015274:	40014000 	.word	0x40014000
 8015278:	40001800 	.word	0x40001800

0801527c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801527c:	b480      	push	{r7}
 801527e:	b085      	sub	sp, #20
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015286:	2300      	movs	r3, #0
 8015288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015290:	2b01      	cmp	r3, #1
 8015292:	d101      	bne.n	8015298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015294:	2302      	movs	r3, #2
 8015296:	e03d      	b.n	8015314 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2201      	movs	r2, #1
 801529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	4313      	orrs	r3, r2
 80152ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	689b      	ldr	r3, [r3, #8]
 80152b8:	4313      	orrs	r3, r2
 80152ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	4313      	orrs	r3, r2
 80152c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4313      	orrs	r3, r2
 80152d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	691b      	ldr	r3, [r3, #16]
 80152e2:	4313      	orrs	r3, r2
 80152e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	695b      	ldr	r3, [r3, #20]
 80152f0:	4313      	orrs	r3, r2
 80152f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	69db      	ldr	r3, [r3, #28]
 80152fe:	4313      	orrs	r3, r2
 8015300:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2200      	movs	r2, #0
 801530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3714      	adds	r7, #20
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr

08015320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015320:	b480      	push	{r7}
 8015322:	b083      	sub	sp, #12
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015328:	bf00      	nop
 801532a:	370c      	adds	r7, #12
 801532c:	46bd      	mov	sp, r7
 801532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015332:	4770      	bx	lr

08015334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801533c:	bf00      	nop
 801533e:	370c      	adds	r7, #12
 8015340:	46bd      	mov	sp, r7
 8015342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015346:	4770      	bx	lr

08015348 <__NVIC_SetPriority>:
{
 8015348:	b480      	push	{r7}
 801534a:	b083      	sub	sp, #12
 801534c:	af00      	add	r7, sp, #0
 801534e:	4603      	mov	r3, r0
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015358:	2b00      	cmp	r3, #0
 801535a:	db0a      	blt.n	8015372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	b2da      	uxtb	r2, r3
 8015360:	490c      	ldr	r1, [pc, #48]	; (8015394 <__NVIC_SetPriority+0x4c>)
 8015362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015366:	0112      	lsls	r2, r2, #4
 8015368:	b2d2      	uxtb	r2, r2
 801536a:	440b      	add	r3, r1
 801536c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015370:	e00a      	b.n	8015388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	b2da      	uxtb	r2, r3
 8015376:	4908      	ldr	r1, [pc, #32]	; (8015398 <__NVIC_SetPriority+0x50>)
 8015378:	79fb      	ldrb	r3, [r7, #7]
 801537a:	f003 030f 	and.w	r3, r3, #15
 801537e:	3b04      	subs	r3, #4
 8015380:	0112      	lsls	r2, r2, #4
 8015382:	b2d2      	uxtb	r2, r2
 8015384:	440b      	add	r3, r1
 8015386:	761a      	strb	r2, [r3, #24]
}
 8015388:	bf00      	nop
 801538a:	370c      	adds	r7, #12
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr
 8015394:	e000e100 	.word	0xe000e100
 8015398:	e000ed00 	.word	0xe000ed00

0801539c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801539c:	b580      	push	{r7, lr}
 801539e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80153a0:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <SysTick_Handler+0x1c>)
 80153a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80153a4:	f002 f832 	bl	801740c <xTaskGetSchedulerState>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d001      	beq.n	80153b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80153ae:	f002 fe23 	bl	8017ff8 <xPortSysTickHandler>
  }
}
 80153b2:	bf00      	nop
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	e000e010 	.word	0xe000e010

080153bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80153bc:	b580      	push	{r7, lr}
 80153be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80153c0:	2100      	movs	r1, #0
 80153c2:	f06f 0004 	mvn.w	r0, #4
 80153c6:	f7ff ffbf 	bl	8015348 <__NVIC_SetPriority>
#endif
}
 80153ca:	bf00      	nop
 80153cc:	bd80      	pop	{r7, pc}
	...

080153d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80153d0:	b480      	push	{r7}
 80153d2:	b083      	sub	sp, #12
 80153d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80153d6:	f3ef 8305 	mrs	r3, IPSR
 80153da:	603b      	str	r3, [r7, #0]
  return(result);
 80153dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d003      	beq.n	80153ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80153e2:	f06f 0305 	mvn.w	r3, #5
 80153e6:	607b      	str	r3, [r7, #4]
 80153e8:	e00c      	b.n	8015404 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80153ea:	4b0a      	ldr	r3, [pc, #40]	; (8015414 <osKernelInitialize+0x44>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d105      	bne.n	80153fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80153f2:	4b08      	ldr	r3, [pc, #32]	; (8015414 <osKernelInitialize+0x44>)
 80153f4:	2201      	movs	r2, #1
 80153f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80153f8:	2300      	movs	r3, #0
 80153fa:	607b      	str	r3, [r7, #4]
 80153fc:	e002      	b.n	8015404 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80153fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015404:	687b      	ldr	r3, [r7, #4]
}
 8015406:	4618      	mov	r0, r3
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr
 8015412:	bf00      	nop
 8015414:	20001800 	.word	0x20001800

08015418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801541e:	f3ef 8305 	mrs	r3, IPSR
 8015422:	603b      	str	r3, [r7, #0]
  return(result);
 8015424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015426:	2b00      	cmp	r3, #0
 8015428:	d003      	beq.n	8015432 <osKernelStart+0x1a>
    stat = osErrorISR;
 801542a:	f06f 0305 	mvn.w	r3, #5
 801542e:	607b      	str	r3, [r7, #4]
 8015430:	e010      	b.n	8015454 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015432:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <osKernelStart+0x48>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b01      	cmp	r3, #1
 8015438:	d109      	bne.n	801544e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801543a:	f7ff ffbf 	bl	80153bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801543e:	4b08      	ldr	r3, [pc, #32]	; (8015460 <osKernelStart+0x48>)
 8015440:	2202      	movs	r2, #2
 8015442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015444:	f001 fb08 	bl	8016a58 <vTaskStartScheduler>
      stat = osOK;
 8015448:	2300      	movs	r3, #0
 801544a:	607b      	str	r3, [r7, #4]
 801544c:	e002      	b.n	8015454 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801544e:	f04f 33ff 	mov.w	r3, #4294967295
 8015452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015454:	687b      	ldr	r3, [r7, #4]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3708      	adds	r7, #8
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	20001800 	.word	0x20001800

08015464 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801546a:	f3ef 8305 	mrs	r3, IPSR
 801546e:	603b      	str	r3, [r7, #0]
  return(result);
 8015470:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015472:	2b00      	cmp	r3, #0
 8015474:	d003      	beq.n	801547e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8015476:	f001 fc31 	bl	8016cdc <xTaskGetTickCountFromISR>
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	e002      	b.n	8015484 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801547e:	f001 fc1d 	bl	8016cbc <xTaskGetTickCount>
 8015482:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8015484:	687b      	ldr	r3, [r7, #4]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3708      	adds	r7, #8
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}

0801548e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801548e:	b580      	push	{r7, lr}
 8015490:	b08e      	sub	sp, #56	; 0x38
 8015492:	af04      	add	r7, sp, #16
 8015494:	60f8      	str	r0, [r7, #12]
 8015496:	60b9      	str	r1, [r7, #8]
 8015498:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801549a:	2300      	movs	r3, #0
 801549c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801549e:	f3ef 8305 	mrs	r3, IPSR
 80154a2:	617b      	str	r3, [r7, #20]
  return(result);
 80154a4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d17e      	bne.n	80155a8 <osThreadNew+0x11a>
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d07b      	beq.n	80155a8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80154b0:	2380      	movs	r3, #128	; 0x80
 80154b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80154b4:	2318      	movs	r3, #24
 80154b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80154b8:	2300      	movs	r3, #0
 80154ba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80154bc:	f04f 33ff 	mov.w	r3, #4294967295
 80154c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d045      	beq.n	8015554 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d002      	beq.n	80154d6 <osThreadNew+0x48>
        name = attr->name;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	699b      	ldr	r3, [r3, #24]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d002      	beq.n	80154e4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	699b      	ldr	r3, [r3, #24]
 80154e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d008      	beq.n	80154fc <osThreadNew+0x6e>
 80154ea:	69fb      	ldr	r3, [r7, #28]
 80154ec:	2b38      	cmp	r3, #56	; 0x38
 80154ee:	d805      	bhi.n	80154fc <osThreadNew+0x6e>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	f003 0301 	and.w	r3, r3, #1
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d001      	beq.n	8015500 <osThreadNew+0x72>
        return (NULL);
 80154fc:	2300      	movs	r3, #0
 80154fe:	e054      	b.n	80155aa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	695b      	ldr	r3, [r3, #20]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d003      	beq.n	8015510 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	695b      	ldr	r3, [r3, #20]
 801550c:	089b      	lsrs	r3, r3, #2
 801550e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	689b      	ldr	r3, [r3, #8]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d00e      	beq.n	8015536 <osThreadNew+0xa8>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	2bcb      	cmp	r3, #203	; 0xcb
 801551e:	d90a      	bls.n	8015536 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015524:	2b00      	cmp	r3, #0
 8015526:	d006      	beq.n	8015536 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	695b      	ldr	r3, [r3, #20]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d002      	beq.n	8015536 <osThreadNew+0xa8>
        mem = 1;
 8015530:	2301      	movs	r3, #1
 8015532:	61bb      	str	r3, [r7, #24]
 8015534:	e010      	b.n	8015558 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	689b      	ldr	r3, [r3, #8]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d10c      	bne.n	8015558 <osThreadNew+0xca>
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d108      	bne.n	8015558 <osThreadNew+0xca>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	691b      	ldr	r3, [r3, #16]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d104      	bne.n	8015558 <osThreadNew+0xca>
          mem = 0;
 801554e:	2300      	movs	r3, #0
 8015550:	61bb      	str	r3, [r7, #24]
 8015552:	e001      	b.n	8015558 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015554:	2300      	movs	r3, #0
 8015556:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	2b01      	cmp	r3, #1
 801555c:	d110      	bne.n	8015580 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015562:	687a      	ldr	r2, [r7, #4]
 8015564:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015566:	9202      	str	r2, [sp, #8]
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	9300      	str	r3, [sp, #0]
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	6a3a      	ldr	r2, [r7, #32]
 8015572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f000 ffe1 	bl	801653c <xTaskCreateStatic>
 801557a:	4603      	mov	r3, r0
 801557c:	613b      	str	r3, [r7, #16]
 801557e:	e013      	b.n	80155a8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d110      	bne.n	80155a8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015586:	6a3b      	ldr	r3, [r7, #32]
 8015588:	b29a      	uxth	r2, r3
 801558a:	f107 0310 	add.w	r3, r7, #16
 801558e:	9301      	str	r3, [sp, #4]
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	9300      	str	r3, [sp, #0]
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015598:	68f8      	ldr	r0, [r7, #12]
 801559a:	f001 f82c 	bl	80165f6 <xTaskCreate>
 801559e:	4603      	mov	r3, r0
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d001      	beq.n	80155a8 <osThreadNew+0x11a>
            hTask = NULL;
 80155a4:	2300      	movs	r3, #0
 80155a6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80155a8:	693b      	ldr	r3, [r7, #16]
}
 80155aa:	4618      	mov	r0, r3
 80155ac:	3728      	adds	r7, #40	; 0x28
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}

080155b2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80155b2:	b580      	push	{r7, lr}
 80155b4:	b084      	sub	sp, #16
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155ba:	f3ef 8305 	mrs	r3, IPSR
 80155be:	60bb      	str	r3, [r7, #8]
  return(result);
 80155c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d003      	beq.n	80155ce <osDelay+0x1c>
    stat = osErrorISR;
 80155c6:	f06f 0305 	mvn.w	r3, #5
 80155ca:	60fb      	str	r3, [r7, #12]
 80155cc:	e007      	b.n	80155de <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80155ce:	2300      	movs	r3, #0
 80155d0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d002      	beq.n	80155de <osDelay+0x2c>
      vTaskDelay(ticks);
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f001 fa05 	bl	80169e8 <vTaskDelay>
    }
  }

  return (stat);
 80155de:	68fb      	ldr	r3, [r7, #12]
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3710      	adds	r7, #16
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}

080155e8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b086      	sub	sp, #24
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155f0:	f3ef 8305 	mrs	r3, IPSR
 80155f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80155f6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d003      	beq.n	8015604 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80155fc:	f06f 0305 	mvn.w	r3, #5
 8015600:	617b      	str	r3, [r7, #20]
 8015602:	e019      	b.n	8015638 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8015604:	2300      	movs	r3, #0
 8015606:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8015608:	f001 fb58 	bl	8016cbc <xTaskGetTickCount>
 801560c:	4603      	mov	r3, r0
 801560e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	1ad3      	subs	r3, r2, r3
 8015616:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d009      	beq.n	8015632 <osDelayUntil+0x4a>
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	2b00      	cmp	r3, #0
 8015622:	db06      	blt.n	8015632 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8015624:	f107 0308 	add.w	r3, r7, #8
 8015628:	6939      	ldr	r1, [r7, #16]
 801562a:	4618      	mov	r0, r3
 801562c:	f001 f95c 	bl	80168e8 <vTaskDelayUntil>
 8015630:	e002      	b.n	8015638 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8015632:	f06f 0303 	mvn.w	r3, #3
 8015636:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015638:	697b      	ldr	r3, [r7, #20]
}
 801563a:	4618      	mov	r0, r3
 801563c:	3718      	adds	r7, #24
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
	...

08015644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015644:	b480      	push	{r7}
 8015646:	b085      	sub	sp, #20
 8015648:	af00      	add	r7, sp, #0
 801564a:	60f8      	str	r0, [r7, #12]
 801564c:	60b9      	str	r1, [r7, #8]
 801564e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	4a07      	ldr	r2, [pc, #28]	; (8015670 <vApplicationGetIdleTaskMemory+0x2c>)
 8015654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	4a06      	ldr	r2, [pc, #24]	; (8015674 <vApplicationGetIdleTaskMemory+0x30>)
 801565a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2280      	movs	r2, #128	; 0x80
 8015660:	601a      	str	r2, [r3, #0]
}
 8015662:	bf00      	nop
 8015664:	3714      	adds	r7, #20
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	20001804 	.word	0x20001804
 8015674:	200018d0 	.word	0x200018d0

08015678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015678:	b480      	push	{r7}
 801567a:	b085      	sub	sp, #20
 801567c:	af00      	add	r7, sp, #0
 801567e:	60f8      	str	r0, [r7, #12]
 8015680:	60b9      	str	r1, [r7, #8]
 8015682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	4a07      	ldr	r2, [pc, #28]	; (80156a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8015688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	4a06      	ldr	r2, [pc, #24]	; (80156a8 <vApplicationGetTimerTaskMemory+0x30>)
 801568e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015696:	601a      	str	r2, [r3, #0]
}
 8015698:	bf00      	nop
 801569a:	3714      	adds	r7, #20
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr
 80156a4:	20001ad0 	.word	0x20001ad0
 80156a8:	20001b9c 	.word	0x20001b9c

080156ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f103 0208 	add.w	r2, r3, #8
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f04f 32ff 	mov.w	r2, #4294967295
 80156c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f103 0208 	add.w	r2, r3, #8
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f103 0208 	add.w	r2, r3, #8
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2200      	movs	r2, #0
 80156de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80156e0:	bf00      	nop
 80156e2:	370c      	adds	r7, #12
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80156fa:	bf00      	nop
 80156fc:	370c      	adds	r7, #12
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr

08015706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015706:	b480      	push	{r7}
 8015708:	b085      	sub	sp, #20
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
 801570e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	689a      	ldr	r2, [r3, #8]
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	689b      	ldr	r3, [r3, #8]
 8015728:	683a      	ldr	r2, [r7, #0]
 801572a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	687a      	ldr	r2, [r7, #4]
 8015736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	1c5a      	adds	r2, r3, #1
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	601a      	str	r2, [r3, #0]
}
 8015742:	bf00      	nop
 8015744:	3714      	adds	r7, #20
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr

0801574e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801574e:	b480      	push	{r7}
 8015750:	b085      	sub	sp, #20
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
 8015756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015764:	d103      	bne.n	801576e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	691b      	ldr	r3, [r3, #16]
 801576a:	60fb      	str	r3, [r7, #12]
 801576c:	e00c      	b.n	8015788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	3308      	adds	r3, #8
 8015772:	60fb      	str	r3, [r7, #12]
 8015774:	e002      	b.n	801577c <vListInsert+0x2e>
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	60fb      	str	r3, [r7, #12]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	68ba      	ldr	r2, [r7, #8]
 8015784:	429a      	cmp	r2, r3
 8015786:	d2f6      	bcs.n	8015776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	685a      	ldr	r2, [r3, #4]
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	683a      	ldr	r2, [r7, #0]
 8015796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	68fa      	ldr	r2, [r7, #12]
 801579c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	683a      	ldr	r2, [r7, #0]
 80157a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	1c5a      	adds	r2, r3, #1
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	601a      	str	r2, [r3, #0]
}
 80157b4:	bf00      	nop
 80157b6:	3714      	adds	r7, #20
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr

080157c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80157c0:	b480      	push	{r7}
 80157c2:	b085      	sub	sp, #20
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	691b      	ldr	r3, [r3, #16]
 80157cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	685b      	ldr	r3, [r3, #4]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	6892      	ldr	r2, [r2, #8]
 80157d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	689b      	ldr	r3, [r3, #8]
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	6852      	ldr	r2, [r2, #4]
 80157e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	687a      	ldr	r2, [r7, #4]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d103      	bne.n	80157f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	689a      	ldr	r2, [r3, #8]
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	1e5a      	subs	r2, r3, #1
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
}
 8015808:	4618      	mov	r0, r3
 801580a:	3714      	adds	r7, #20
 801580c:	46bd      	mov	sp, r7
 801580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015812:	4770      	bx	lr

08015814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b084      	sub	sp, #16
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d10a      	bne.n	801583e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801582c:	f383 8811 	msr	BASEPRI, r3
 8015830:	f3bf 8f6f 	isb	sy
 8015834:	f3bf 8f4f 	dsb	sy
 8015838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801583a:	bf00      	nop
 801583c:	e7fe      	b.n	801583c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801583e:	f002 fb49 	bl	8017ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801584a:	68f9      	ldr	r1, [r7, #12]
 801584c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801584e:	fb01 f303 	mul.w	r3, r1, r3
 8015852:	441a      	add	r2, r3
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	2200      	movs	r2, #0
 801585c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801586e:	3b01      	subs	r3, #1
 8015870:	68f9      	ldr	r1, [r7, #12]
 8015872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015874:	fb01 f303 	mul.w	r3, r1, r3
 8015878:	441a      	add	r2, r3
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	22ff      	movs	r2, #255	; 0xff
 8015882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	22ff      	movs	r2, #255	; 0xff
 801588a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801588e:	683b      	ldr	r3, [r7, #0]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d114      	bne.n	80158be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	691b      	ldr	r3, [r3, #16]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d01a      	beq.n	80158d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	3310      	adds	r3, #16
 80158a0:	4618      	mov	r0, r3
 80158a2:	f001 fbb5 	bl	8017010 <xTaskRemoveFromEventList>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d012      	beq.n	80158d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80158ac:	4b0c      	ldr	r3, [pc, #48]	; (80158e0 <xQueueGenericReset+0xcc>)
 80158ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158b2:	601a      	str	r2, [r3, #0]
 80158b4:	f3bf 8f4f 	dsb	sy
 80158b8:	f3bf 8f6f 	isb	sy
 80158bc:	e009      	b.n	80158d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	3310      	adds	r3, #16
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7ff fef2 	bl	80156ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	3324      	adds	r3, #36	; 0x24
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7ff feed 	bl	80156ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80158d2:	f002 fb2f 	bl	8017f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80158d6:	2301      	movs	r3, #1
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3710      	adds	r7, #16
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	e000ed04 	.word	0xe000ed04

080158e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b08e      	sub	sp, #56	; 0x38
 80158e8:	af02      	add	r7, sp, #8
 80158ea:	60f8      	str	r0, [r7, #12]
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	607a      	str	r2, [r7, #4]
 80158f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d10a      	bne.n	801590e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80158f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158fc:	f383 8811 	msr	BASEPRI, r3
 8015900:	f3bf 8f6f 	isb	sy
 8015904:	f3bf 8f4f 	dsb	sy
 8015908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801590a:	bf00      	nop
 801590c:	e7fe      	b.n	801590c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d10a      	bne.n	801592a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015918:	f383 8811 	msr	BASEPRI, r3
 801591c:	f3bf 8f6f 	isb	sy
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015926:	bf00      	nop
 8015928:	e7fe      	b.n	8015928 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d002      	beq.n	8015936 <xQueueGenericCreateStatic+0x52>
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d001      	beq.n	801593a <xQueueGenericCreateStatic+0x56>
 8015936:	2301      	movs	r3, #1
 8015938:	e000      	b.n	801593c <xQueueGenericCreateStatic+0x58>
 801593a:	2300      	movs	r3, #0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10a      	bne.n	8015956 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015944:	f383 8811 	msr	BASEPRI, r3
 8015948:	f3bf 8f6f 	isb	sy
 801594c:	f3bf 8f4f 	dsb	sy
 8015950:	623b      	str	r3, [r7, #32]
}
 8015952:	bf00      	nop
 8015954:	e7fe      	b.n	8015954 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d102      	bne.n	8015962 <xQueueGenericCreateStatic+0x7e>
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d101      	bne.n	8015966 <xQueueGenericCreateStatic+0x82>
 8015962:	2301      	movs	r3, #1
 8015964:	e000      	b.n	8015968 <xQueueGenericCreateStatic+0x84>
 8015966:	2300      	movs	r3, #0
 8015968:	2b00      	cmp	r3, #0
 801596a:	d10a      	bne.n	8015982 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015970:	f383 8811 	msr	BASEPRI, r3
 8015974:	f3bf 8f6f 	isb	sy
 8015978:	f3bf 8f4f 	dsb	sy
 801597c:	61fb      	str	r3, [r7, #28]
}
 801597e:	bf00      	nop
 8015980:	e7fe      	b.n	8015980 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015982:	2350      	movs	r3, #80	; 0x50
 8015984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	2b50      	cmp	r3, #80	; 0x50
 801598a:	d00a      	beq.n	80159a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015990:	f383 8811 	msr	BASEPRI, r3
 8015994:	f3bf 8f6f 	isb	sy
 8015998:	f3bf 8f4f 	dsb	sy
 801599c:	61bb      	str	r3, [r7, #24]
}
 801599e:	bf00      	nop
 80159a0:	e7fe      	b.n	80159a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80159a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80159a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d00d      	beq.n	80159ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80159ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b0:	2201      	movs	r2, #1
 80159b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80159b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80159ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	4613      	mov	r3, r2
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	68b9      	ldr	r1, [r7, #8]
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	f000 f83f 	bl	8015a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80159ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3730      	adds	r7, #48	; 0x30
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b08a      	sub	sp, #40	; 0x28
 80159d8:	af02      	add	r7, sp, #8
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	4613      	mov	r3, r2
 80159e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10a      	bne.n	80159fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	613b      	str	r3, [r7, #16]
}
 80159fa:	bf00      	nop
 80159fc:	e7fe      	b.n	80159fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	68ba      	ldr	r2, [r7, #8]
 8015a02:	fb02 f303 	mul.w	r3, r2, r3
 8015a06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a08:	69fb      	ldr	r3, [r7, #28]
 8015a0a:	3350      	adds	r3, #80	; 0x50
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f002 fb83 	bl	8018118 <pvPortMalloc>
 8015a12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015a14:	69bb      	ldr	r3, [r7, #24]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d011      	beq.n	8015a3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	3350      	adds	r3, #80	; 0x50
 8015a22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	2200      	movs	r2, #0
 8015a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a2c:	79fa      	ldrb	r2, [r7, #7]
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	9300      	str	r3, [sp, #0]
 8015a32:	4613      	mov	r3, r2
 8015a34:	697a      	ldr	r2, [r7, #20]
 8015a36:	68b9      	ldr	r1, [r7, #8]
 8015a38:	68f8      	ldr	r0, [r7, #12]
 8015a3a:	f000 f805 	bl	8015a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3720      	adds	r7, #32
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}

08015a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	60f8      	str	r0, [r7, #12]
 8015a50:	60b9      	str	r1, [r7, #8]
 8015a52:	607a      	str	r2, [r7, #4]
 8015a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d103      	bne.n	8015a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a5c:	69bb      	ldr	r3, [r7, #24]
 8015a5e:	69ba      	ldr	r2, [r7, #24]
 8015a60:	601a      	str	r2, [r3, #0]
 8015a62:	e002      	b.n	8015a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	68fa      	ldr	r2, [r7, #12]
 8015a6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015a70:	69bb      	ldr	r3, [r7, #24]
 8015a72:	68ba      	ldr	r2, [r7, #8]
 8015a74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a76:	2101      	movs	r1, #1
 8015a78:	69b8      	ldr	r0, [r7, #24]
 8015a7a:	f7ff fecb 	bl	8015814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015a7e:	69bb      	ldr	r3, [r7, #24]
 8015a80:	78fa      	ldrb	r2, [r7, #3]
 8015a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8015a86:	78fb      	ldrb	r3, [r7, #3]
 8015a88:	68ba      	ldr	r2, [r7, #8]
 8015a8a:	68f9      	ldr	r1, [r7, #12]
 8015a8c:	2073      	movs	r0, #115	; 0x73
 8015a8e:	f003 fa0b 	bl	8018ea8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8015a92:	bf00      	nop
 8015a94:	3710      	adds	r7, #16
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}
	...

08015a9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b090      	sub	sp, #64	; 0x40
 8015aa0:	af02      	add	r7, sp, #8
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
 8015aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d10a      	bne.n	8015ace <xQueueGenericSend+0x32>
	__asm volatile
 8015ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015abc:	f383 8811 	msr	BASEPRI, r3
 8015ac0:	f3bf 8f6f 	isb	sy
 8015ac4:	f3bf 8f4f 	dsb	sy
 8015ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015aca:	bf00      	nop
 8015acc:	e7fe      	b.n	8015acc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d103      	bne.n	8015adc <xQueueGenericSend+0x40>
 8015ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d101      	bne.n	8015ae0 <xQueueGenericSend+0x44>
 8015adc:	2301      	movs	r3, #1
 8015ade:	e000      	b.n	8015ae2 <xQueueGenericSend+0x46>
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d10a      	bne.n	8015afc <xQueueGenericSend+0x60>
	__asm volatile
 8015ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aea:	f383 8811 	msr	BASEPRI, r3
 8015aee:	f3bf 8f6f 	isb	sy
 8015af2:	f3bf 8f4f 	dsb	sy
 8015af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015af8:	bf00      	nop
 8015afa:	e7fe      	b.n	8015afa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	2b02      	cmp	r3, #2
 8015b00:	d103      	bne.n	8015b0a <xQueueGenericSend+0x6e>
 8015b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b06:	2b01      	cmp	r3, #1
 8015b08:	d101      	bne.n	8015b0e <xQueueGenericSend+0x72>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	e000      	b.n	8015b10 <xQueueGenericSend+0x74>
 8015b0e:	2300      	movs	r3, #0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d10a      	bne.n	8015b2a <xQueueGenericSend+0x8e>
	__asm volatile
 8015b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b18:	f383 8811 	msr	BASEPRI, r3
 8015b1c:	f3bf 8f6f 	isb	sy
 8015b20:	f3bf 8f4f 	dsb	sy
 8015b24:	623b      	str	r3, [r7, #32]
}
 8015b26:	bf00      	nop
 8015b28:	e7fe      	b.n	8015b28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b2a:	f001 fc6f 	bl	801740c <xTaskGetSchedulerState>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d102      	bne.n	8015b3a <xQueueGenericSend+0x9e>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d101      	bne.n	8015b3e <xQueueGenericSend+0xa2>
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	e000      	b.n	8015b40 <xQueueGenericSend+0xa4>
 8015b3e:	2300      	movs	r3, #0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d10a      	bne.n	8015b5a <xQueueGenericSend+0xbe>
	__asm volatile
 8015b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b48:	f383 8811 	msr	BASEPRI, r3
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	61fb      	str	r3, [r7, #28]
}
 8015b56:	bf00      	nop
 8015b58:	e7fe      	b.n	8015b58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b5a:	f002 f9bb 	bl	8017ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d302      	bcc.n	8015b70 <xQueueGenericSend+0xd4>
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	2b02      	cmp	r3, #2
 8015b6e:	d136      	bne.n	8015bde <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8015b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b72:	4618      	mov	r0, r3
 8015b74:	f003 fe4a 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015b78:	68ba      	ldr	r2, [r7, #8]
 8015b7a:	6879      	ldr	r1, [r7, #4]
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	460b      	mov	r3, r1
 8015b82:	4601      	mov	r1, r0
 8015b84:	205a      	movs	r0, #90	; 0x5a
 8015b86:	f003 fa05 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b8a:	683a      	ldr	r2, [r7, #0]
 8015b8c:	68b9      	ldr	r1, [r7, #8]
 8015b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b90:	f000 fb5e 	bl	8016250 <prvCopyDataToQueue>
 8015b94:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d010      	beq.n	8015bc0 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba0:	3324      	adds	r3, #36	; 0x24
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f001 fa34 	bl	8017010 <xTaskRemoveFromEventList>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d013      	beq.n	8015bd6 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015bae:	4b4d      	ldr	r3, [pc, #308]	; (8015ce4 <xQueueGenericSend+0x248>)
 8015bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bb4:	601a      	str	r2, [r3, #0]
 8015bb6:	f3bf 8f4f 	dsb	sy
 8015bba:	f3bf 8f6f 	isb	sy
 8015bbe:	e00a      	b.n	8015bd6 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d007      	beq.n	8015bd6 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015bc6:	4b47      	ldr	r3, [pc, #284]	; (8015ce4 <xQueueGenericSend+0x248>)
 8015bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bcc:	601a      	str	r2, [r3, #0]
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015bd6:	f002 f9ad 	bl	8017f34 <vPortExitCritical>
				return pdPASS;
 8015bda:	2301      	movs	r3, #1
 8015bdc:	e07d      	b.n	8015cda <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d110      	bne.n	8015c06 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015be4:	f002 f9a6 	bl	8017f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8015be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bea:	4618      	mov	r0, r3
 8015bec:	f003 fe0e 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015bf0:	68ba      	ldr	r2, [r7, #8]
 8015bf2:	6879      	ldr	r1, [r7, #4]
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	9300      	str	r3, [sp, #0]
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	4601      	mov	r1, r0
 8015bfc:	205a      	movs	r0, #90	; 0x5a
 8015bfe:	f003 f9c9 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8015c02:	2300      	movs	r3, #0
 8015c04:	e069      	b.n	8015cda <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d106      	bne.n	8015c1a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c0c:	f107 0314 	add.w	r3, r7, #20
 8015c10:	4618      	mov	r0, r3
 8015c12:	f001 fa65 	bl	80170e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c16:	2301      	movs	r3, #1
 8015c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c1a:	f002 f98b 	bl	8017f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c1e:	f000 ff9d 	bl	8016b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c22:	f002 f957 	bl	8017ed4 <vPortEnterCritical>
 8015c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c2c:	b25b      	sxtb	r3, r3
 8015c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c32:	d103      	bne.n	8015c3c <xQueueGenericSend+0x1a0>
 8015c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c36:	2200      	movs	r2, #0
 8015c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c42:	b25b      	sxtb	r3, r3
 8015c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c48:	d103      	bne.n	8015c52 <xQueueGenericSend+0x1b6>
 8015c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c52:	f002 f96f 	bl	8017f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c56:	1d3a      	adds	r2, r7, #4
 8015c58:	f107 0314 	add.w	r3, r7, #20
 8015c5c:	4611      	mov	r1, r2
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f001 fa54 	bl	801710c <xTaskCheckForTimeOut>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d124      	bne.n	8015cb4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c6c:	f000 fbe8 	bl	8016440 <prvIsQueueFull>
 8015c70:	4603      	mov	r3, r0
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d018      	beq.n	8015ca8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c78:	3310      	adds	r3, #16
 8015c7a:	687a      	ldr	r2, [r7, #4]
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f001 f974 	bl	8016f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c86:	f000 fb73 	bl	8016370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015c8a:	f000 ff75 	bl	8016b78 <xTaskResumeAll>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f47f af62 	bne.w	8015b5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015c96:	4b13      	ldr	r3, [pc, #76]	; (8015ce4 <xQueueGenericSend+0x248>)
 8015c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c9c:	601a      	str	r2, [r3, #0]
 8015c9e:	f3bf 8f4f 	dsb	sy
 8015ca2:	f3bf 8f6f 	isb	sy
 8015ca6:	e758      	b.n	8015b5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015caa:	f000 fb61 	bl	8016370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015cae:	f000 ff63 	bl	8016b78 <xTaskResumeAll>
 8015cb2:	e752      	b.n	8015b5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cb6:	f000 fb5b 	bl	8016370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015cba:	f000 ff5d 	bl	8016b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8015cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f003 fda3 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015cc6:	68ba      	ldr	r2, [r7, #8]
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	9300      	str	r3, [sp, #0]
 8015cce:	460b      	mov	r3, r1
 8015cd0:	4601      	mov	r1, r0
 8015cd2:	205a      	movs	r0, #90	; 0x5a
 8015cd4:	f003 f95e 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8015cd8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3738      	adds	r7, #56	; 0x38
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	e000ed04 	.word	0xe000ed04

08015ce8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b090      	sub	sp, #64	; 0x40
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	60f8      	str	r0, [r7, #12]
 8015cf0:	60b9      	str	r1, [r7, #8]
 8015cf2:	607a      	str	r2, [r7, #4]
 8015cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10a      	bne.n	8015d16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d103      	bne.n	8015d24 <xQueueGenericSendFromISR+0x3c>
 8015d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d101      	bne.n	8015d28 <xQueueGenericSendFromISR+0x40>
 8015d24:	2301      	movs	r3, #1
 8015d26:	e000      	b.n	8015d2a <xQueueGenericSendFromISR+0x42>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d10a      	bne.n	8015d44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d32:	f383 8811 	msr	BASEPRI, r3
 8015d36:	f3bf 8f6f 	isb	sy
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015d40:	bf00      	nop
 8015d42:	e7fe      	b.n	8015d42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	2b02      	cmp	r3, #2
 8015d48:	d103      	bne.n	8015d52 <xQueueGenericSendFromISR+0x6a>
 8015d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d101      	bne.n	8015d56 <xQueueGenericSendFromISR+0x6e>
 8015d52:	2301      	movs	r3, #1
 8015d54:	e000      	b.n	8015d58 <xQueueGenericSendFromISR+0x70>
 8015d56:	2300      	movs	r3, #0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10a      	bne.n	8015d72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	623b      	str	r3, [r7, #32]
}
 8015d6e:	bf00      	nop
 8015d70:	e7fe      	b.n	8015d70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d72:	f002 f991 	bl	8018098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015d76:	f3ef 8211 	mrs	r2, BASEPRI
 8015d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d7e:	f383 8811 	msr	BASEPRI, r3
 8015d82:	f3bf 8f6f 	isb	sy
 8015d86:	f3bf 8f4f 	dsb	sy
 8015d8a:	61fa      	str	r2, [r7, #28]
 8015d8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015d8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d302      	bcc.n	8015da4 <xQueueGenericSendFromISR+0xbc>
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	2b02      	cmp	r3, #2
 8015da2:	d139      	bne.n	8015e18 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015db2:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8015db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db6:	4618      	mov	r0, r3
 8015db8:	f003 fd28 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015dbc:	4601      	mov	r1, r0
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	461a      	mov	r2, r3
 8015dc2:	2060      	movs	r0, #96	; 0x60
 8015dc4:	f003 f816 	bl	8018df4 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015dc8:	683a      	ldr	r2, [r7, #0]
 8015dca:	68b9      	ldr	r1, [r7, #8]
 8015dcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015dce:	f000 fa3f 	bl	8016250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015dd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dda:	d112      	bne.n	8015e02 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d016      	beq.n	8015e12 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de6:	3324      	adds	r3, #36	; 0x24
 8015de8:	4618      	mov	r0, r3
 8015dea:	f001 f911 	bl	8017010 <xTaskRemoveFromEventList>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00e      	beq.n	8015e12 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d00b      	beq.n	8015e12 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	601a      	str	r2, [r3, #0]
 8015e00:	e007      	b.n	8015e12 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015e06:	3301      	adds	r3, #1
 8015e08:	b2db      	uxtb	r3, r3
 8015e0a:	b25a      	sxtb	r2, r3
 8015e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e12:	2301      	movs	r3, #1
 8015e14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015e16:	e00b      	b.n	8015e30 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8015e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f003 fcf6 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015e20:	4601      	mov	r1, r0
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	461a      	mov	r2, r3
 8015e26:	2060      	movs	r0, #96	; 0x60
 8015e28:	f002 ffe4 	bl	8018df4 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015e3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3740      	adds	r7, #64	; 0x40
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
	...

08015e48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015e48:	b590      	push	{r4, r7, lr}
 8015e4a:	b08f      	sub	sp, #60	; 0x3c
 8015e4c:	af02      	add	r7, sp, #8
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	60b9      	str	r1, [r7, #8]
 8015e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015e54:	2300      	movs	r3, #0
 8015e56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d10a      	bne.n	8015e78 <xQueueReceive+0x30>
	__asm volatile
 8015e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e66:	f383 8811 	msr	BASEPRI, r3
 8015e6a:	f3bf 8f6f 	isb	sy
 8015e6e:	f3bf 8f4f 	dsb	sy
 8015e72:	623b      	str	r3, [r7, #32]
}
 8015e74:	bf00      	nop
 8015e76:	e7fe      	b.n	8015e76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d103      	bne.n	8015e86 <xQueueReceive+0x3e>
 8015e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d101      	bne.n	8015e8a <xQueueReceive+0x42>
 8015e86:	2301      	movs	r3, #1
 8015e88:	e000      	b.n	8015e8c <xQueueReceive+0x44>
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d10a      	bne.n	8015ea6 <xQueueReceive+0x5e>
	__asm volatile
 8015e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e94:	f383 8811 	msr	BASEPRI, r3
 8015e98:	f3bf 8f6f 	isb	sy
 8015e9c:	f3bf 8f4f 	dsb	sy
 8015ea0:	61fb      	str	r3, [r7, #28]
}
 8015ea2:	bf00      	nop
 8015ea4:	e7fe      	b.n	8015ea4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ea6:	f001 fab1 	bl	801740c <xTaskGetSchedulerState>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d102      	bne.n	8015eb6 <xQueueReceive+0x6e>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d101      	bne.n	8015eba <xQueueReceive+0x72>
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e000      	b.n	8015ebc <xQueueReceive+0x74>
 8015eba:	2300      	movs	r3, #0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d10a      	bne.n	8015ed6 <xQueueReceive+0x8e>
	__asm volatile
 8015ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec4:	f383 8811 	msr	BASEPRI, r3
 8015ec8:	f3bf 8f6f 	isb	sy
 8015ecc:	f3bf 8f4f 	dsb	sy
 8015ed0:	61bb      	str	r3, [r7, #24]
}
 8015ed2:	bf00      	nop
 8015ed4:	e7fe      	b.n	8015ed4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015ed6:	f001 fffd 	bl	8017ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ede:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d02f      	beq.n	8015f46 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ee6:	68b9      	ldr	r1, [r7, #8]
 8015ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eea:	f000 fa1b 	bl	8016324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8015eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f003 fc8b 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015ef6:	4604      	mov	r4, r0
 8015ef8:	2000      	movs	r0, #0
 8015efa:	f003 fc87 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015efe:	4602      	mov	r2, r0
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2101      	movs	r1, #1
 8015f04:	9100      	str	r1, [sp, #0]
 8015f06:	4621      	mov	r1, r4
 8015f08:	205c      	movs	r0, #92	; 0x5c
 8015f0a:	f003 f843 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	1e5a      	subs	r2, r3, #1
 8015f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f18:	691b      	ldr	r3, [r3, #16]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d00f      	beq.n	8015f3e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f20:	3310      	adds	r3, #16
 8015f22:	4618      	mov	r0, r3
 8015f24:	f001 f874 	bl	8017010 <xTaskRemoveFromEventList>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d007      	beq.n	8015f3e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015f2e:	4b4d      	ldr	r3, [pc, #308]	; (8016064 <xQueueReceive+0x21c>)
 8015f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f34:	601a      	str	r2, [r3, #0]
 8015f36:	f3bf 8f4f 	dsb	sy
 8015f3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015f3e:	f001 fff9 	bl	8017f34 <vPortExitCritical>
				return pdPASS;
 8015f42:	2301      	movs	r3, #1
 8015f44:	e08a      	b.n	801605c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d113      	bne.n	8015f74 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015f4c:	f001 fff2 	bl	8017f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8015f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f52:	4618      	mov	r0, r3
 8015f54:	f003 fc5a 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015f58:	4604      	mov	r4, r0
 8015f5a:	2000      	movs	r0, #0
 8015f5c:	f003 fc56 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8015f60:	4602      	mov	r2, r0
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2101      	movs	r1, #1
 8015f66:	9100      	str	r1, [sp, #0]
 8015f68:	4621      	mov	r1, r4
 8015f6a:	205c      	movs	r0, #92	; 0x5c
 8015f6c:	f003 f812 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8015f70:	2300      	movs	r3, #0
 8015f72:	e073      	b.n	801605c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d106      	bne.n	8015f88 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f7a:	f107 0310 	add.w	r3, r7, #16
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f001 f8ae 	bl	80170e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015f84:	2301      	movs	r3, #1
 8015f86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015f88:	f001 ffd4 	bl	8017f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015f8c:	f000 fde6 	bl	8016b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015f90:	f001 ffa0 	bl	8017ed4 <vPortEnterCritical>
 8015f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f9a:	b25b      	sxtb	r3, r3
 8015f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fa0:	d103      	bne.n	8015faa <xQueueReceive+0x162>
 8015fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fb0:	b25b      	sxtb	r3, r3
 8015fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fb6:	d103      	bne.n	8015fc0 <xQueueReceive+0x178>
 8015fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fba:	2200      	movs	r2, #0
 8015fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015fc0:	f001 ffb8 	bl	8017f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015fc4:	1d3a      	adds	r2, r7, #4
 8015fc6:	f107 0310 	add.w	r3, r7, #16
 8015fca:	4611      	mov	r1, r2
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f001 f89d 	bl	801710c <xTaskCheckForTimeOut>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d124      	bne.n	8016022 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fda:	f000 fa1b 	bl	8016414 <prvIsQueueEmpty>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d018      	beq.n	8016016 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe6:	3324      	adds	r3, #36	; 0x24
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	4611      	mov	r1, r2
 8015fec:	4618      	mov	r0, r3
 8015fee:	f000 ffbd 	bl	8016f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ff4:	f000 f9bc 	bl	8016370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015ff8:	f000 fdbe 	bl	8016b78 <xTaskResumeAll>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	f47f af69 	bne.w	8015ed6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016004:	4b17      	ldr	r3, [pc, #92]	; (8016064 <xQueueReceive+0x21c>)
 8016006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801600a:	601a      	str	r2, [r3, #0]
 801600c:	f3bf 8f4f 	dsb	sy
 8016010:	f3bf 8f6f 	isb	sy
 8016014:	e75f      	b.n	8015ed6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016018:	f000 f9aa 	bl	8016370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801601c:	f000 fdac 	bl	8016b78 <xTaskResumeAll>
 8016020:	e759      	b.n	8015ed6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016024:	f000 f9a4 	bl	8016370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016028:	f000 fda6 	bl	8016b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801602c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801602e:	f000 f9f1 	bl	8016414 <prvIsQueueEmpty>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	f43f af4e 	beq.w	8015ed6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 801603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603c:	4618      	mov	r0, r3
 801603e:	f003 fbe5 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8016042:	4604      	mov	r4, r0
 8016044:	2000      	movs	r0, #0
 8016046:	f003 fbe1 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 801604a:	4602      	mov	r2, r0
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2101      	movs	r1, #1
 8016050:	9100      	str	r1, [sp, #0]
 8016052:	4621      	mov	r1, r4
 8016054:	205c      	movs	r0, #92	; 0x5c
 8016056:	f002 ff9d 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 801605a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801605c:	4618      	mov	r0, r3
 801605e:	3734      	adds	r7, #52	; 0x34
 8016060:	46bd      	mov	sp, r7
 8016062:	bd90      	pop	{r4, r7, pc}
 8016064:	e000ed04 	.word	0xe000ed04

08016068 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016068:	b590      	push	{r4, r7, lr}
 801606a:	b091      	sub	sp, #68	; 0x44
 801606c:	af02      	add	r7, sp, #8
 801606e:	60f8      	str	r0, [r7, #12]
 8016070:	60b9      	str	r1, [r7, #8]
 8016072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016074:	2300      	movs	r3, #0
 8016076:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607e:	2b00      	cmp	r3, #0
 8016080:	d10a      	bne.n	8016098 <xQueuePeek+0x30>
	__asm volatile
 8016082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016086:	f383 8811 	msr	BASEPRI, r3
 801608a:	f3bf 8f6f 	isb	sy
 801608e:	f3bf 8f4f 	dsb	sy
 8016092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016094:	bf00      	nop
 8016096:	e7fe      	b.n	8016096 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d103      	bne.n	80160a6 <xQueuePeek+0x3e>
 801609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d101      	bne.n	80160aa <xQueuePeek+0x42>
 80160a6:	2301      	movs	r3, #1
 80160a8:	e000      	b.n	80160ac <xQueuePeek+0x44>
 80160aa:	2300      	movs	r3, #0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d10a      	bne.n	80160c6 <xQueuePeek+0x5e>
	__asm volatile
 80160b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b4:	f383 8811 	msr	BASEPRI, r3
 80160b8:	f3bf 8f6f 	isb	sy
 80160bc:	f3bf 8f4f 	dsb	sy
 80160c0:	623b      	str	r3, [r7, #32]
}
 80160c2:	bf00      	nop
 80160c4:	e7fe      	b.n	80160c4 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80160c6:	f001 f9a1 	bl	801740c <xTaskGetSchedulerState>
 80160ca:	4603      	mov	r3, r0
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d102      	bne.n	80160d6 <xQueuePeek+0x6e>
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d101      	bne.n	80160da <xQueuePeek+0x72>
 80160d6:	2301      	movs	r3, #1
 80160d8:	e000      	b.n	80160dc <xQueuePeek+0x74>
 80160da:	2300      	movs	r3, #0
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10a      	bne.n	80160f6 <xQueuePeek+0x8e>
	__asm volatile
 80160e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e4:	f383 8811 	msr	BASEPRI, r3
 80160e8:	f3bf 8f6f 	isb	sy
 80160ec:	f3bf 8f4f 	dsb	sy
 80160f0:	61fb      	str	r3, [r7, #28]
}
 80160f2:	bf00      	nop
 80160f4:	e7fe      	b.n	80160f4 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80160f6:	f001 feed 	bl	8017ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80160fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fe:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	2b00      	cmp	r3, #0
 8016104:	d032      	beq.n	801616c <xQueuePeek+0x104>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8016106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016108:	68db      	ldr	r3, [r3, #12]
 801610a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801610c:	68b9      	ldr	r1, [r7, #8]
 801610e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016110:	f000 f908 	bl	8016324 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );
 8016114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016116:	4618      	mov	r0, r3
 8016118:	f003 fb78 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 801611c:	4604      	mov	r4, r0
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	4618      	mov	r0, r3
 8016122:	f003 fb73 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 8016126:	4602      	mov	r2, r0
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2101      	movs	r1, #1
 801612c:	9100      	str	r1, [sp, #0]
 801612e:	4621      	mov	r1, r4
 8016130:	205c      	movs	r0, #92	; 0x5c
 8016132:	f002 ff2f 	bl	8018f94 <SEGGER_SYSVIEW_RecordU32x4>

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8016136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801613a:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016140:	2b00      	cmp	r3, #0
 8016142:	d00f      	beq.n	8016164 <xQueuePeek+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016146:	3324      	adds	r3, #36	; 0x24
 8016148:	4618      	mov	r0, r3
 801614a:	f000 ff61 	bl	8017010 <xTaskRemoveFromEventList>
 801614e:	4603      	mov	r3, r0
 8016150:	2b00      	cmp	r3, #0
 8016152:	d007      	beq.n	8016164 <xQueuePeek+0xfc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8016154:	4b3d      	ldr	r3, [pc, #244]	; (801624c <xQueuePeek+0x1e4>)
 8016156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801615a:	601a      	str	r2, [r3, #0]
 801615c:	f3bf 8f4f 	dsb	sy
 8016160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016164:	f001 fee6 	bl	8017f34 <vPortExitCritical>
				return pdPASS;
 8016168:	2301      	movs	r3, #1
 801616a:	e06a      	b.n	8016242 <xQueuePeek+0x1da>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d103      	bne.n	801617a <xQueuePeek+0x112>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016172:	f001 fedf 	bl	8017f34 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016176:	2300      	movs	r3, #0
 8016178:	e063      	b.n	8016242 <xQueuePeek+0x1da>
				}
				else if( xEntryTimeSet == pdFALSE )
 801617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801617c:	2b00      	cmp	r3, #0
 801617e:	d106      	bne.n	801618e <xQueuePeek+0x126>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016180:	f107 0314 	add.w	r3, r7, #20
 8016184:	4618      	mov	r0, r3
 8016186:	f000 ffab 	bl	80170e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801618a:	2301      	movs	r3, #1
 801618c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801618e:	f001 fed1 	bl	8017f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016192:	f000 fce3 	bl	8016b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016196:	f001 fe9d 	bl	8017ed4 <vPortEnterCritical>
 801619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161a0:	b25b      	sxtb	r3, r3
 80161a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161a6:	d103      	bne.n	80161b0 <xQueuePeek+0x148>
 80161a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161aa:	2200      	movs	r2, #0
 80161ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161b6:	b25b      	sxtb	r3, r3
 80161b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161bc:	d103      	bne.n	80161c6 <xQueuePeek+0x15e>
 80161be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c0:	2200      	movs	r2, #0
 80161c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161c6:	f001 feb5 	bl	8017f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80161ca:	1d3a      	adds	r2, r7, #4
 80161cc:	f107 0314 	add.w	r3, r7, #20
 80161d0:	4611      	mov	r1, r2
 80161d2:	4618      	mov	r0, r3
 80161d4:	f000 ff9a 	bl	801710c <xTaskCheckForTimeOut>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d124      	bne.n	8016228 <xQueuePeek+0x1c0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80161de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161e0:	f000 f918 	bl	8016414 <prvIsQueueEmpty>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d018      	beq.n	801621c <xQueuePeek+0x1b4>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80161ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ec:	3324      	adds	r3, #36	; 0x24
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	4611      	mov	r1, r2
 80161f2:	4618      	mov	r0, r3
 80161f4:	f000 feba 	bl	8016f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80161f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161fa:	f000 f8b9 	bl	8016370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80161fe:	f000 fcbb 	bl	8016b78 <xTaskResumeAll>
 8016202:	4603      	mov	r3, r0
 8016204:	2b00      	cmp	r3, #0
 8016206:	f47f af76 	bne.w	80160f6 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 801620a:	4b10      	ldr	r3, [pc, #64]	; (801624c <xQueuePeek+0x1e4>)
 801620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	f3bf 8f4f 	dsb	sy
 8016216:	f3bf 8f6f 	isb	sy
 801621a:	e76c      	b.n	80160f6 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 801621c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801621e:	f000 f8a7 	bl	8016370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016222:	f000 fca9 	bl	8016b78 <xTaskResumeAll>
 8016226:	e766      	b.n	80160f6 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8016228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801622a:	f000 f8a1 	bl	8016370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801622e:	f000 fca3 	bl	8016b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016234:	f000 f8ee 	bl	8016414 <prvIsQueueEmpty>
 8016238:	4603      	mov	r3, r0
 801623a:	2b00      	cmp	r3, #0
 801623c:	f43f af5b 	beq.w	80160f6 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016242:	4618      	mov	r0, r3
 8016244:	373c      	adds	r7, #60	; 0x3c
 8016246:	46bd      	mov	sp, r7
 8016248:	bd90      	pop	{r4, r7, pc}
 801624a:	bf00      	nop
 801624c:	e000ed04 	.word	0xe000ed04

08016250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b086      	sub	sp, #24
 8016254:	af00      	add	r7, sp, #0
 8016256:	60f8      	str	r0, [r7, #12]
 8016258:	60b9      	str	r1, [r7, #8]
 801625a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801625c:	2300      	movs	r3, #0
 801625e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801626a:	2b00      	cmp	r3, #0
 801626c:	d10d      	bne.n	801628a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d14d      	bne.n	8016312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	689b      	ldr	r3, [r3, #8]
 801627a:	4618      	mov	r0, r3
 801627c:	f001 f8e4 	bl	8017448 <xTaskPriorityDisinherit>
 8016280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2200      	movs	r2, #0
 8016286:	609a      	str	r2, [r3, #8]
 8016288:	e043      	b.n	8016312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d119      	bne.n	80162c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	6858      	ldr	r0, [r3, #4]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016298:	461a      	mov	r2, r3
 801629a:	68b9      	ldr	r1, [r7, #8]
 801629c:	f003 fc56 	bl	8019b4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	685a      	ldr	r2, [r3, #4]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162a8:	441a      	add	r2, r3
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	685a      	ldr	r2, [r3, #4]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	689b      	ldr	r3, [r3, #8]
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d32b      	bcc.n	8016312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	605a      	str	r2, [r3, #4]
 80162c2:	e026      	b.n	8016312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	68d8      	ldr	r0, [r3, #12]
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162cc:	461a      	mov	r2, r3
 80162ce:	68b9      	ldr	r1, [r7, #8]
 80162d0:	f003 fc3c 	bl	8019b4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	68da      	ldr	r2, [r3, #12]
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162dc:	425b      	negs	r3, r3
 80162de:	441a      	add	r2, r3
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	68da      	ldr	r2, [r3, #12]
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d207      	bcs.n	8016300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	689a      	ldr	r2, [r3, #8]
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162f8:	425b      	negs	r3, r3
 80162fa:	441a      	add	r2, r3
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2b02      	cmp	r3, #2
 8016304:	d105      	bne.n	8016312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d002      	beq.n	8016312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	3b01      	subs	r3, #1
 8016310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	1c5a      	adds	r2, r3, #1
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801631a:	697b      	ldr	r3, [r7, #20]
}
 801631c:	4618      	mov	r0, r3
 801631e:	3718      	adds	r7, #24
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016332:	2b00      	cmp	r3, #0
 8016334:	d018      	beq.n	8016368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	68da      	ldr	r2, [r3, #12]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	441a      	add	r2, r3
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	68da      	ldr	r2, [r3, #12]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	689b      	ldr	r3, [r3, #8]
 801634c:	429a      	cmp	r2, r3
 801634e:	d303      	bcc.n	8016358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681a      	ldr	r2, [r3, #0]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	68d9      	ldr	r1, [r3, #12]
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016360:	461a      	mov	r2, r3
 8016362:	6838      	ldr	r0, [r7, #0]
 8016364:	f003 fbf2 	bl	8019b4c <memcpy>
	}
}
 8016368:	bf00      	nop
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016378:	f001 fdac 	bl	8017ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016384:	e011      	b.n	80163aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638a:	2b00      	cmp	r3, #0
 801638c:	d012      	beq.n	80163b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	3324      	adds	r3, #36	; 0x24
 8016392:	4618      	mov	r0, r3
 8016394:	f000 fe3c 	bl	8017010 <xTaskRemoveFromEventList>
 8016398:	4603      	mov	r3, r0
 801639a:	2b00      	cmp	r3, #0
 801639c:	d001      	beq.n	80163a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801639e:	f000 ff17 	bl	80171d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80163a2:	7bfb      	ldrb	r3, [r7, #15]
 80163a4:	3b01      	subs	r3, #1
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80163aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	dce9      	bgt.n	8016386 <prvUnlockQueue+0x16>
 80163b2:	e000      	b.n	80163b6 <prvUnlockQueue+0x46>
					break;
 80163b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	22ff      	movs	r2, #255	; 0xff
 80163ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80163be:	f001 fdb9 	bl	8017f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80163c2:	f001 fd87 	bl	8017ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163ce:	e011      	b.n	80163f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	691b      	ldr	r3, [r3, #16]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d012      	beq.n	80163fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	3310      	adds	r3, #16
 80163dc:	4618      	mov	r0, r3
 80163de:	f000 fe17 	bl	8017010 <xTaskRemoveFromEventList>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80163e8:	f000 fef2 	bl	80171d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80163ec:	7bbb      	ldrb	r3, [r7, #14]
 80163ee:	3b01      	subs	r3, #1
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	dce9      	bgt.n	80163d0 <prvUnlockQueue+0x60>
 80163fc:	e000      	b.n	8016400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80163fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	22ff      	movs	r2, #255	; 0xff
 8016404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016408:	f001 fd94 	bl	8017f34 <vPortExitCritical>
}
 801640c:	bf00      	nop
 801640e:	3710      	adds	r7, #16
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801641c:	f001 fd5a 	bl	8017ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016424:	2b00      	cmp	r3, #0
 8016426:	d102      	bne.n	801642e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016428:	2301      	movs	r3, #1
 801642a:	60fb      	str	r3, [r7, #12]
 801642c:	e001      	b.n	8016432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801642e:	2300      	movs	r3, #0
 8016430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016432:	f001 fd7f 	bl	8017f34 <vPortExitCritical>

	return xReturn;
 8016436:	68fb      	ldr	r3, [r7, #12]
}
 8016438:	4618      	mov	r0, r3
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b084      	sub	sp, #16
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016448:	f001 fd44 	bl	8017ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016454:	429a      	cmp	r2, r3
 8016456:	d102      	bne.n	801645e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016458:	2301      	movs	r3, #1
 801645a:	60fb      	str	r3, [r7, #12]
 801645c:	e001      	b.n	8016462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801645e:	2300      	movs	r3, #0
 8016460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016462:	f001 fd67 	bl	8017f34 <vPortExitCritical>

	return xReturn;
 8016466:	68fb      	ldr	r3, [r7, #12]
}
 8016468:	4618      	mov	r0, r3
 801646a:	3710      	adds	r7, #16
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}

08016470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801647a:	2300      	movs	r3, #0
 801647c:	60fb      	str	r3, [r7, #12]
 801647e:	e01e      	b.n	80164be <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016480:	4a13      	ldr	r2, [pc, #76]	; (80164d0 <vQueueAddToRegistry+0x60>)
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d115      	bne.n	80164b8 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801648c:	4910      	ldr	r1, [pc, #64]	; (80164d0 <vQueueAddToRegistry+0x60>)
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	683a      	ldr	r2, [r7, #0]
 8016492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016496:	4a0e      	ldr	r2, [pc, #56]	; (80164d0 <vQueueAddToRegistry+0x60>)
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	00db      	lsls	r3, r3, #3
 801649c:	4413      	add	r3, r2
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	4618      	mov	r0, r3
 80164a6:	f003 f9b1 	bl	801980c <SEGGER_SYSVIEW_ShrinkId>
 80164aa:	4601      	mov	r1, r0
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	461a      	mov	r2, r3
 80164b0:	2071      	movs	r0, #113	; 0x71
 80164b2:	f002 fc9f 	bl	8018df4 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80164b6:	e006      	b.n	80164c6 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	3301      	adds	r3, #1
 80164bc:	60fb      	str	r3, [r7, #12]
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2b07      	cmp	r3, #7
 80164c2:	d9dd      	bls.n	8016480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80164c4:	bf00      	nop
 80164c6:	bf00      	nop
 80164c8:	3710      	adds	r7, #16
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}
 80164ce:	bf00      	nop
 80164d0:	2001e8b8 	.word	0x2001e8b8

080164d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b086      	sub	sp, #24
 80164d8:	af00      	add	r7, sp, #0
 80164da:	60f8      	str	r0, [r7, #12]
 80164dc:	60b9      	str	r1, [r7, #8]
 80164de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80164e4:	f001 fcf6 	bl	8017ed4 <vPortEnterCritical>
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80164ee:	b25b      	sxtb	r3, r3
 80164f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164f4:	d103      	bne.n	80164fe <vQueueWaitForMessageRestricted+0x2a>
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	2200      	movs	r2, #0
 80164fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016504:	b25b      	sxtb	r3, r3
 8016506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801650a:	d103      	bne.n	8016514 <vQueueWaitForMessageRestricted+0x40>
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	2200      	movs	r2, #0
 8016510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016514:	f001 fd0e 	bl	8017f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801651c:	2b00      	cmp	r3, #0
 801651e:	d106      	bne.n	801652e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	3324      	adds	r3, #36	; 0x24
 8016524:	687a      	ldr	r2, [r7, #4]
 8016526:	68b9      	ldr	r1, [r7, #8]
 8016528:	4618      	mov	r0, r3
 801652a:	f000 fd43 	bl	8016fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801652e:	6978      	ldr	r0, [r7, #20]
 8016530:	f7ff ff1e 	bl	8016370 <prvUnlockQueue>
	}
 8016534:	bf00      	nop
 8016536:	3718      	adds	r7, #24
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801653c:	b580      	push	{r7, lr}
 801653e:	b08e      	sub	sp, #56	; 0x38
 8016540:	af04      	add	r7, sp, #16
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	607a      	str	r2, [r7, #4]
 8016548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801654c:	2b00      	cmp	r3, #0
 801654e:	d10a      	bne.n	8016566 <xTaskCreateStatic+0x2a>
	__asm volatile
 8016550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016554:	f383 8811 	msr	BASEPRI, r3
 8016558:	f3bf 8f6f 	isb	sy
 801655c:	f3bf 8f4f 	dsb	sy
 8016560:	623b      	str	r3, [r7, #32]
}
 8016562:	bf00      	nop
 8016564:	e7fe      	b.n	8016564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016568:	2b00      	cmp	r3, #0
 801656a:	d10a      	bne.n	8016582 <xTaskCreateStatic+0x46>
	__asm volatile
 801656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016570:	f383 8811 	msr	BASEPRI, r3
 8016574:	f3bf 8f6f 	isb	sy
 8016578:	f3bf 8f4f 	dsb	sy
 801657c:	61fb      	str	r3, [r7, #28]
}
 801657e:	bf00      	nop
 8016580:	e7fe      	b.n	8016580 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016582:	23cc      	movs	r3, #204	; 0xcc
 8016584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	2bcc      	cmp	r3, #204	; 0xcc
 801658a:	d00a      	beq.n	80165a2 <xTaskCreateStatic+0x66>
	__asm volatile
 801658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016590:	f383 8811 	msr	BASEPRI, r3
 8016594:	f3bf 8f6f 	isb	sy
 8016598:	f3bf 8f4f 	dsb	sy
 801659c:	61bb      	str	r3, [r7, #24]
}
 801659e:	bf00      	nop
 80165a0:	e7fe      	b.n	80165a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80165a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80165a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d01e      	beq.n	80165e8 <xTaskCreateStatic+0xac>
 80165aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d01b      	beq.n	80165e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80165b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80165b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80165ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165bc:	2202      	movs	r2, #2
 80165be:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80165c2:	2300      	movs	r3, #0
 80165c4:	9303      	str	r3, [sp, #12]
 80165c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c8:	9302      	str	r3, [sp, #8]
 80165ca:	f107 0314 	add.w	r3, r7, #20
 80165ce:	9301      	str	r3, [sp, #4]
 80165d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	687a      	ldr	r2, [r7, #4]
 80165d8:	68b9      	ldr	r1, [r7, #8]
 80165da:	68f8      	ldr	r0, [r7, #12]
 80165dc:	f000 f850 	bl	8016680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80165e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165e2:	f000 f8f3 	bl	80167cc <prvAddNewTaskToReadyList>
 80165e6:	e001      	b.n	80165ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80165e8:	2300      	movs	r3, #0
 80165ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80165ec:	697b      	ldr	r3, [r7, #20]
	}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3728      	adds	r7, #40	; 0x28
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b08c      	sub	sp, #48	; 0x30
 80165fa:	af04      	add	r7, sp, #16
 80165fc:	60f8      	str	r0, [r7, #12]
 80165fe:	60b9      	str	r1, [r7, #8]
 8016600:	603b      	str	r3, [r7, #0]
 8016602:	4613      	mov	r3, r2
 8016604:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016606:	88fb      	ldrh	r3, [r7, #6]
 8016608:	009b      	lsls	r3, r3, #2
 801660a:	4618      	mov	r0, r3
 801660c:	f001 fd84 	bl	8018118 <pvPortMalloc>
 8016610:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d00e      	beq.n	8016636 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016618:	20cc      	movs	r0, #204	; 0xcc
 801661a:	f001 fd7d 	bl	8018118 <pvPortMalloc>
 801661e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d003      	beq.n	801662e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	697a      	ldr	r2, [r7, #20]
 801662a:	631a      	str	r2, [r3, #48]	; 0x30
 801662c:	e005      	b.n	801663a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801662e:	6978      	ldr	r0, [r7, #20]
 8016630:	f001 fe3e 	bl	80182b0 <vPortFree>
 8016634:	e001      	b.n	801663a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016636:	2300      	movs	r3, #0
 8016638:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d017      	beq.n	8016670 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	2200      	movs	r2, #0
 8016644:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016648:	88fa      	ldrh	r2, [r7, #6]
 801664a:	2300      	movs	r3, #0
 801664c:	9303      	str	r3, [sp, #12]
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	9302      	str	r3, [sp, #8]
 8016652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016654:	9301      	str	r3, [sp, #4]
 8016656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	68b9      	ldr	r1, [r7, #8]
 801665e:	68f8      	ldr	r0, [r7, #12]
 8016660:	f000 f80e 	bl	8016680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016664:	69f8      	ldr	r0, [r7, #28]
 8016666:	f000 f8b1 	bl	80167cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801666a:	2301      	movs	r3, #1
 801666c:	61bb      	str	r3, [r7, #24]
 801666e:	e002      	b.n	8016676 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016670:	f04f 33ff 	mov.w	r3, #4294967295
 8016674:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016676:	69bb      	ldr	r3, [r7, #24]
	}
 8016678:	4618      	mov	r0, r3
 801667a:	3720      	adds	r7, #32
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b088      	sub	sp, #32
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	607a      	str	r2, [r7, #4]
 801668c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	009b      	lsls	r3, r3, #2
 8016696:	461a      	mov	r2, r3
 8016698:	21a5      	movs	r1, #165	; 0xa5
 801669a:	f003 fa65 	bl	8019b68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80166a8:	3b01      	subs	r3, #1
 80166aa:	009b      	lsls	r3, r3, #2
 80166ac:	4413      	add	r3, r2
 80166ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80166b0:	69bb      	ldr	r3, [r7, #24]
 80166b2:	f023 0307 	bic.w	r3, r3, #7
 80166b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	f003 0307 	and.w	r3, r3, #7
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d00a      	beq.n	80166d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80166c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c6:	f383 8811 	msr	BASEPRI, r3
 80166ca:	f3bf 8f6f 	isb	sy
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	617b      	str	r3, [r7, #20]
}
 80166d4:	bf00      	nop
 80166d6:	e7fe      	b.n	80166d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d01f      	beq.n	801671e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80166de:	2300      	movs	r3, #0
 80166e0:	61fb      	str	r3, [r7, #28]
 80166e2:	e012      	b.n	801670a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80166e4:	68ba      	ldr	r2, [r7, #8]
 80166e6:	69fb      	ldr	r3, [r7, #28]
 80166e8:	4413      	add	r3, r2
 80166ea:	7819      	ldrb	r1, [r3, #0]
 80166ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166ee:	69fb      	ldr	r3, [r7, #28]
 80166f0:	4413      	add	r3, r2
 80166f2:	3334      	adds	r3, #52	; 0x34
 80166f4:	460a      	mov	r2, r1
 80166f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80166f8:	68ba      	ldr	r2, [r7, #8]
 80166fa:	69fb      	ldr	r3, [r7, #28]
 80166fc:	4413      	add	r3, r2
 80166fe:	781b      	ldrb	r3, [r3, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d006      	beq.n	8016712 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	3301      	adds	r3, #1
 8016708:	61fb      	str	r3, [r7, #28]
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	2b1f      	cmp	r3, #31
 801670e:	d9e9      	bls.n	80166e4 <prvInitialiseNewTask+0x64>
 8016710:	e000      	b.n	8016714 <prvInitialiseNewTask+0x94>
			{
				break;
 8016712:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016716:	2200      	movs	r2, #0
 8016718:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801671c:	e003      	b.n	8016726 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016720:	2200      	movs	r2, #0
 8016722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016728:	2b37      	cmp	r3, #55	; 0x37
 801672a:	d901      	bls.n	8016730 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801672c:	2337      	movs	r3, #55	; 0x37
 801672e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016734:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801673a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 801673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801673e:	2200      	movs	r2, #0
 8016740:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016744:	3304      	adds	r3, #4
 8016746:	4618      	mov	r0, r3
 8016748:	f7fe ffd0 	bl	80156ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674e:	3318      	adds	r3, #24
 8016750:	4618      	mov	r0, r3
 8016752:	f7fe ffcb 	bl	80156ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801675a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016764:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801676a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801676e:	2200      	movs	r2, #0
 8016770:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016776:	2200      	movs	r2, #0
 8016778:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801677e:	3364      	adds	r3, #100	; 0x64
 8016780:	2260      	movs	r2, #96	; 0x60
 8016782:	2100      	movs	r1, #0
 8016784:	4618      	mov	r0, r3
 8016786:	f003 f9ef 	bl	8019b68 <memset>
 801678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678c:	4a0c      	ldr	r2, [pc, #48]	; (80167c0 <prvInitialiseNewTask+0x140>)
 801678e:	669a      	str	r2, [r3, #104]	; 0x68
 8016790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016792:	4a0c      	ldr	r2, [pc, #48]	; (80167c4 <prvInitialiseNewTask+0x144>)
 8016794:	66da      	str	r2, [r3, #108]	; 0x6c
 8016796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016798:	4a0b      	ldr	r2, [pc, #44]	; (80167c8 <prvInitialiseNewTask+0x148>)
 801679a:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801679c:	683a      	ldr	r2, [r7, #0]
 801679e:	68f9      	ldr	r1, [r7, #12]
 80167a0:	69b8      	ldr	r0, [r7, #24]
 80167a2:	f001 fa69 	bl	8017c78 <pxPortInitialiseStack>
 80167a6:	4602      	mov	r2, r0
 80167a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80167ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d002      	beq.n	80167b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80167b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80167b8:	bf00      	nop
 80167ba:	3720      	adds	r7, #32
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd80      	pop	{r7, pc}
 80167c0:	0801af34 	.word	0x0801af34
 80167c4:	0801af54 	.word	0x0801af54
 80167c8:	0801af14 	.word	0x0801af14

080167cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80167cc:	b5b0      	push	{r4, r5, r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af02      	add	r7, sp, #8
 80167d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80167d4:	f001 fb7e 	bl	8017ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80167d8:	4b3c      	ldr	r3, [pc, #240]	; (80168cc <prvAddNewTaskToReadyList+0x100>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	3301      	adds	r3, #1
 80167de:	4a3b      	ldr	r2, [pc, #236]	; (80168cc <prvAddNewTaskToReadyList+0x100>)
 80167e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80167e2:	4b3b      	ldr	r3, [pc, #236]	; (80168d0 <prvAddNewTaskToReadyList+0x104>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d109      	bne.n	80167fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80167ea:	4a39      	ldr	r2, [pc, #228]	; (80168d0 <prvAddNewTaskToReadyList+0x104>)
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80167f0:	4b36      	ldr	r3, [pc, #216]	; (80168cc <prvAddNewTaskToReadyList+0x100>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	d110      	bne.n	801681a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80167f8:	f000 fd0e 	bl	8017218 <prvInitialiseTaskLists>
 80167fc:	e00d      	b.n	801681a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80167fe:	4b35      	ldr	r3, [pc, #212]	; (80168d4 <prvAddNewTaskToReadyList+0x108>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d109      	bne.n	801681a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016806:	4b32      	ldr	r3, [pc, #200]	; (80168d0 <prvAddNewTaskToReadyList+0x104>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016810:	429a      	cmp	r2, r3
 8016812:	d802      	bhi.n	801681a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016814:	4a2e      	ldr	r2, [pc, #184]	; (80168d0 <prvAddNewTaskToReadyList+0x104>)
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801681a:	4b2f      	ldr	r3, [pc, #188]	; (80168d8 <prvAddNewTaskToReadyList+0x10c>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	3301      	adds	r3, #1
 8016820:	4a2d      	ldr	r2, [pc, #180]	; (80168d8 <prvAddNewTaskToReadyList+0x10c>)
 8016822:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016824:	4b2c      	ldr	r3, [pc, #176]	; (80168d8 <prvAddNewTaskToReadyList+0x10c>)
 8016826:	681a      	ldr	r2, [r3, #0]
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d016      	beq.n	8016860 <prvAddNewTaskToReadyList+0x94>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	4618      	mov	r0, r3
 8016836:	f002 ff23 	bl	8019680 <SEGGER_SYSVIEW_OnTaskCreate>
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801684a:	461d      	mov	r5, r3
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	461c      	mov	r4, r3
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016856:	1ae3      	subs	r3, r4, r3
 8016858:	9300      	str	r3, [sp, #0]
 801685a:	462b      	mov	r3, r5
 801685c:	f7eb fbea 	bl	8002034 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	4618      	mov	r0, r3
 8016864:	f002 ff90 	bl	8019788 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801686c:	4b1b      	ldr	r3, [pc, #108]	; (80168dc <prvAddNewTaskToReadyList+0x110>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	429a      	cmp	r2, r3
 8016872:	d903      	bls.n	801687c <prvAddNewTaskToReadyList+0xb0>
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016878:	4a18      	ldr	r2, [pc, #96]	; (80168dc <prvAddNewTaskToReadyList+0x110>)
 801687a:	6013      	str	r3, [r2, #0]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016880:	4613      	mov	r3, r2
 8016882:	009b      	lsls	r3, r3, #2
 8016884:	4413      	add	r3, r2
 8016886:	009b      	lsls	r3, r3, #2
 8016888:	4a15      	ldr	r2, [pc, #84]	; (80168e0 <prvAddNewTaskToReadyList+0x114>)
 801688a:	441a      	add	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	3304      	adds	r3, #4
 8016890:	4619      	mov	r1, r3
 8016892:	4610      	mov	r0, r2
 8016894:	f7fe ff37 	bl	8015706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016898:	f001 fb4c 	bl	8017f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801689c:	4b0d      	ldr	r3, [pc, #52]	; (80168d4 <prvAddNewTaskToReadyList+0x108>)
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d00e      	beq.n	80168c2 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80168a4:	4b0a      	ldr	r3, [pc, #40]	; (80168d0 <prvAddNewTaskToReadyList+0x104>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d207      	bcs.n	80168c2 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80168b2:	4b0c      	ldr	r3, [pc, #48]	; (80168e4 <prvAddNewTaskToReadyList+0x118>)
 80168b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168b8:	601a      	str	r2, [r3, #0]
 80168ba:	f3bf 8f4f 	dsb	sy
 80168be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80168c2:	bf00      	nop
 80168c4:	3708      	adds	r7, #8
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bdb0      	pop	{r4, r5, r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20002470 	.word	0x20002470
 80168d0:	20001f9c 	.word	0x20001f9c
 80168d4:	2000247c 	.word	0x2000247c
 80168d8:	2000248c 	.word	0x2000248c
 80168dc:	20002478 	.word	0x20002478
 80168e0:	20001fa0 	.word	0x20001fa0
 80168e4:	e000ed04 	.word	0xe000ed04

080168e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b08a      	sub	sp, #40	; 0x28
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80168f2:	2300      	movs	r3, #0
 80168f4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d10a      	bne.n	8016912 <vTaskDelayUntil+0x2a>
	__asm volatile
 80168fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016900:	f383 8811 	msr	BASEPRI, r3
 8016904:	f3bf 8f6f 	isb	sy
 8016908:	f3bf 8f4f 	dsb	sy
 801690c:	617b      	str	r3, [r7, #20]
}
 801690e:	bf00      	nop
 8016910:	e7fe      	b.n	8016910 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d10a      	bne.n	801692e <vTaskDelayUntil+0x46>
	__asm volatile
 8016918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801691c:	f383 8811 	msr	BASEPRI, r3
 8016920:	f3bf 8f6f 	isb	sy
 8016924:	f3bf 8f4f 	dsb	sy
 8016928:	613b      	str	r3, [r7, #16]
}
 801692a:	bf00      	nop
 801692c:	e7fe      	b.n	801692c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801692e:	4b2b      	ldr	r3, [pc, #172]	; (80169dc <vTaskDelayUntil+0xf4>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d00a      	beq.n	801694c <vTaskDelayUntil+0x64>
	__asm volatile
 8016936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801693a:	f383 8811 	msr	BASEPRI, r3
 801693e:	f3bf 8f6f 	isb	sy
 8016942:	f3bf 8f4f 	dsb	sy
 8016946:	60fb      	str	r3, [r7, #12]
}
 8016948:	bf00      	nop
 801694a:	e7fe      	b.n	801694a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801694c:	f000 f906 	bl	8016b5c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8016950:	4b23      	ldr	r3, [pc, #140]	; (80169e0 <vTaskDelayUntil+0xf8>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	4413      	add	r3, r2
 801695e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	6a3a      	ldr	r2, [r7, #32]
 8016966:	429a      	cmp	r2, r3
 8016968:	d20b      	bcs.n	8016982 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	69fa      	ldr	r2, [r7, #28]
 8016970:	429a      	cmp	r2, r3
 8016972:	d211      	bcs.n	8016998 <vTaskDelayUntil+0xb0>
 8016974:	69fa      	ldr	r2, [r7, #28]
 8016976:	6a3b      	ldr	r3, [r7, #32]
 8016978:	429a      	cmp	r2, r3
 801697a:	d90d      	bls.n	8016998 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801697c:	2301      	movs	r3, #1
 801697e:	627b      	str	r3, [r7, #36]	; 0x24
 8016980:	e00a      	b.n	8016998 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	69fa      	ldr	r2, [r7, #28]
 8016988:	429a      	cmp	r2, r3
 801698a:	d303      	bcc.n	8016994 <vTaskDelayUntil+0xac>
 801698c:	69fa      	ldr	r2, [r7, #28]
 801698e:	6a3b      	ldr	r3, [r7, #32]
 8016990:	429a      	cmp	r2, r3
 8016992:	d901      	bls.n	8016998 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8016994:	2301      	movs	r3, #1
 8016996:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	69fa      	ldr	r2, [r7, #28]
 801699c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d009      	beq.n	80169b8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80169a4:	2024      	movs	r0, #36	; 0x24
 80169a6:	f002 f9cb 	bl	8018d40 <SEGGER_SYSVIEW_RecordVoid>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80169aa:	69fa      	ldr	r2, [r7, #28]
 80169ac:	6a3b      	ldr	r3, [r7, #32]
 80169ae:	1ad3      	subs	r3, r2, r3
 80169b0:	2100      	movs	r1, #0
 80169b2:	4618      	mov	r0, r3
 80169b4:	f000 fdbe 	bl	8017534 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80169b8:	f000 f8de 	bl	8016b78 <xTaskResumeAll>
 80169bc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80169be:	69bb      	ldr	r3, [r7, #24]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d107      	bne.n	80169d4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80169c4:	4b07      	ldr	r3, [pc, #28]	; (80169e4 <vTaskDelayUntil+0xfc>)
 80169c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169ca:	601a      	str	r2, [r3, #0]
 80169cc:	f3bf 8f4f 	dsb	sy
 80169d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80169d4:	bf00      	nop
 80169d6:	3728      	adds	r7, #40	; 0x28
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	20002498 	.word	0x20002498
 80169e0:	20002474 	.word	0x20002474
 80169e4:	e000ed04 	.word	0xe000ed04

080169e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b084      	sub	sp, #16
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80169f0:	2300      	movs	r3, #0
 80169f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d01b      	beq.n	8016a32 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80169fa:	4b15      	ldr	r3, [pc, #84]	; (8016a50 <vTaskDelay+0x68>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d00a      	beq.n	8016a18 <vTaskDelay+0x30>
	__asm volatile
 8016a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a06:	f383 8811 	msr	BASEPRI, r3
 8016a0a:	f3bf 8f6f 	isb	sy
 8016a0e:	f3bf 8f4f 	dsb	sy
 8016a12:	60bb      	str	r3, [r7, #8]
}
 8016a14:	bf00      	nop
 8016a16:	e7fe      	b.n	8016a16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016a18:	f000 f8a0 	bl	8016b5c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8016a1c:	6879      	ldr	r1, [r7, #4]
 8016a1e:	2023      	movs	r0, #35	; 0x23
 8016a20:	f002 f9ac 	bl	8018d7c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016a24:	2100      	movs	r1, #0
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f000 fd84 	bl	8017534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016a2c:	f000 f8a4 	bl	8016b78 <xTaskResumeAll>
 8016a30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d107      	bne.n	8016a48 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8016a38:	4b06      	ldr	r3, [pc, #24]	; (8016a54 <vTaskDelay+0x6c>)
 8016a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a3e:	601a      	str	r2, [r3, #0]
 8016a40:	f3bf 8f4f 	dsb	sy
 8016a44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016a48:	bf00      	nop
 8016a4a:	3710      	adds	r7, #16
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	20002498 	.word	0x20002498
 8016a54:	e000ed04 	.word	0xe000ed04

08016a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b08a      	sub	sp, #40	; 0x28
 8016a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016a62:	2300      	movs	r3, #0
 8016a64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016a66:	463a      	mov	r2, r7
 8016a68:	1d39      	adds	r1, r7, #4
 8016a6a:	f107 0308 	add.w	r3, r7, #8
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7fe fde8 	bl	8015644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016a74:	6839      	ldr	r1, [r7, #0]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	68ba      	ldr	r2, [r7, #8]
 8016a7a:	9202      	str	r2, [sp, #8]
 8016a7c:	9301      	str	r3, [sp, #4]
 8016a7e:	2300      	movs	r3, #0
 8016a80:	9300      	str	r3, [sp, #0]
 8016a82:	2300      	movs	r3, #0
 8016a84:	460a      	mov	r2, r1
 8016a86:	492d      	ldr	r1, [pc, #180]	; (8016b3c <vTaskStartScheduler+0xe4>)
 8016a88:	482d      	ldr	r0, [pc, #180]	; (8016b40 <vTaskStartScheduler+0xe8>)
 8016a8a:	f7ff fd57 	bl	801653c <xTaskCreateStatic>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	4a2c      	ldr	r2, [pc, #176]	; (8016b44 <vTaskStartScheduler+0xec>)
 8016a92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016a94:	4b2b      	ldr	r3, [pc, #172]	; (8016b44 <vTaskStartScheduler+0xec>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d002      	beq.n	8016aa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	617b      	str	r3, [r7, #20]
 8016aa0:	e001      	b.n	8016aa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d102      	bne.n	8016ab2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016aac:	f000 fd96 	bl	80175dc <xTimerCreateTimerTask>
 8016ab0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	2b01      	cmp	r3, #1
 8016ab6:	d12e      	bne.n	8016b16 <vTaskStartScheduler+0xbe>
	__asm volatile
 8016ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016abc:	f383 8811 	msr	BASEPRI, r3
 8016ac0:	f3bf 8f6f 	isb	sy
 8016ac4:	f3bf 8f4f 	dsb	sy
 8016ac8:	613b      	str	r3, [r7, #16]
}
 8016aca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016acc:	4b1e      	ldr	r3, [pc, #120]	; (8016b48 <vTaskStartScheduler+0xf0>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	3364      	adds	r3, #100	; 0x64
 8016ad2:	4a1e      	ldr	r2, [pc, #120]	; (8016b4c <vTaskStartScheduler+0xf4>)
 8016ad4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016ad6:	4b1e      	ldr	r3, [pc, #120]	; (8016b50 <vTaskStartScheduler+0xf8>)
 8016ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8016adc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016ade:	4b1d      	ldr	r3, [pc, #116]	; (8016b54 <vTaskStartScheduler+0xfc>)
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016ae4:	4b1c      	ldr	r3, [pc, #112]	; (8016b58 <vTaskStartScheduler+0x100>)
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8016aea:	4b17      	ldr	r3, [pc, #92]	; (8016b48 <vTaskStartScheduler+0xf0>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	3334      	adds	r3, #52	; 0x34
 8016af0:	2205      	movs	r2, #5
 8016af2:	4912      	ldr	r1, [pc, #72]	; (8016b3c <vTaskStartScheduler+0xe4>)
 8016af4:	4618      	mov	r0, r3
 8016af6:	f003 f81b 	bl	8019b30 <memcmp>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d005      	beq.n	8016b0c <vTaskStartScheduler+0xb4>
 8016b00:	4b11      	ldr	r3, [pc, #68]	; (8016b48 <vTaskStartScheduler+0xf0>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	4618      	mov	r0, r3
 8016b06:	f002 fdfd 	bl	8019704 <SEGGER_SYSVIEW_OnTaskStartExec>
 8016b0a:	e001      	b.n	8016b10 <vTaskStartScheduler+0xb8>
 8016b0c:	f002 fd9c 	bl	8019648 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016b10:	f001 f93e 	bl	8017d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016b14:	e00e      	b.n	8016b34 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b1c:	d10a      	bne.n	8016b34 <vTaskStartScheduler+0xdc>
	__asm volatile
 8016b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b22:	f383 8811 	msr	BASEPRI, r3
 8016b26:	f3bf 8f6f 	isb	sy
 8016b2a:	f3bf 8f4f 	dsb	sy
 8016b2e:	60fb      	str	r3, [r7, #12]
}
 8016b30:	bf00      	nop
 8016b32:	e7fe      	b.n	8016b32 <vTaskStartScheduler+0xda>
}
 8016b34:	bf00      	nop
 8016b36:	3718      	adds	r7, #24
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}
 8016b3c:	0801a874 	.word	0x0801a874
 8016b40:	080171e9 	.word	0x080171e9
 8016b44:	20002494 	.word	0x20002494
 8016b48:	20001f9c 	.word	0x20001f9c
 8016b4c:	20001444 	.word	0x20001444
 8016b50:	20002490 	.word	0x20002490
 8016b54:	2000247c 	.word	0x2000247c
 8016b58:	20002474 	.word	0x20002474

08016b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016b60:	4b04      	ldr	r3, [pc, #16]	; (8016b74 <vTaskSuspendAll+0x18>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	3301      	adds	r3, #1
 8016b66:	4a03      	ldr	r2, [pc, #12]	; (8016b74 <vTaskSuspendAll+0x18>)
 8016b68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016b6a:	bf00      	nop
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b72:	4770      	bx	lr
 8016b74:	20002498 	.word	0x20002498

08016b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016b82:	2300      	movs	r3, #0
 8016b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016b86:	4b44      	ldr	r3, [pc, #272]	; (8016c98 <xTaskResumeAll+0x120>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d10a      	bne.n	8016ba4 <xTaskResumeAll+0x2c>
	__asm volatile
 8016b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b92:	f383 8811 	msr	BASEPRI, r3
 8016b96:	f3bf 8f6f 	isb	sy
 8016b9a:	f3bf 8f4f 	dsb	sy
 8016b9e:	603b      	str	r3, [r7, #0]
}
 8016ba0:	bf00      	nop
 8016ba2:	e7fe      	b.n	8016ba2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016ba4:	f001 f996 	bl	8017ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016ba8:	4b3b      	ldr	r3, [pc, #236]	; (8016c98 <xTaskResumeAll+0x120>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	3b01      	subs	r3, #1
 8016bae:	4a3a      	ldr	r2, [pc, #232]	; (8016c98 <xTaskResumeAll+0x120>)
 8016bb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bb2:	4b39      	ldr	r3, [pc, #228]	; (8016c98 <xTaskResumeAll+0x120>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d166      	bne.n	8016c88 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016bba:	4b38      	ldr	r3, [pc, #224]	; (8016c9c <xTaskResumeAll+0x124>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d062      	beq.n	8016c88 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016bc2:	e033      	b.n	8016c2c <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bc4:	4b36      	ldr	r3, [pc, #216]	; (8016ca0 <xTaskResumeAll+0x128>)
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	68db      	ldr	r3, [r3, #12]
 8016bca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	3318      	adds	r3, #24
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7fe fdf5 	bl	80157c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	3304      	adds	r3, #4
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7fe fdf0 	bl	80157c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	4618      	mov	r0, r3
 8016be4:	f002 fdd0 	bl	8019788 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bec:	4b2d      	ldr	r3, [pc, #180]	; (8016ca4 <xTaskResumeAll+0x12c>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d903      	bls.n	8016bfc <xTaskResumeAll+0x84>
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bf8:	4a2a      	ldr	r2, [pc, #168]	; (8016ca4 <xTaskResumeAll+0x12c>)
 8016bfa:	6013      	str	r3, [r2, #0]
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c00:	4613      	mov	r3, r2
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	4413      	add	r3, r2
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4a27      	ldr	r2, [pc, #156]	; (8016ca8 <xTaskResumeAll+0x130>)
 8016c0a:	441a      	add	r2, r3
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	3304      	adds	r3, #4
 8016c10:	4619      	mov	r1, r3
 8016c12:	4610      	mov	r0, r2
 8016c14:	f7fe fd77 	bl	8015706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c1c:	4b23      	ldr	r3, [pc, #140]	; (8016cac <xTaskResumeAll+0x134>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d302      	bcc.n	8016c2c <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8016c26:	4b22      	ldr	r3, [pc, #136]	; (8016cb0 <xTaskResumeAll+0x138>)
 8016c28:	2201      	movs	r2, #1
 8016c2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016c2c:	4b1c      	ldr	r3, [pc, #112]	; (8016ca0 <xTaskResumeAll+0x128>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d1c7      	bne.n	8016bc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d001      	beq.n	8016c3e <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016c3a:	f000 fbc7 	bl	80173cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016c3e:	4b1d      	ldr	r3, [pc, #116]	; (8016cb4 <xTaskResumeAll+0x13c>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d010      	beq.n	8016c6c <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016c4a:	f000 f859 	bl	8016d00 <xTaskIncrementTick>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d002      	beq.n	8016c5a <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8016c54:	4b16      	ldr	r3, [pc, #88]	; (8016cb0 <xTaskResumeAll+0x138>)
 8016c56:	2201      	movs	r2, #1
 8016c58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d1f1      	bne.n	8016c4a <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8016c66:	4b13      	ldr	r3, [pc, #76]	; (8016cb4 <xTaskResumeAll+0x13c>)
 8016c68:	2200      	movs	r2, #0
 8016c6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016c6c:	4b10      	ldr	r3, [pc, #64]	; (8016cb0 <xTaskResumeAll+0x138>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d009      	beq.n	8016c88 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016c74:	2301      	movs	r3, #1
 8016c76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016c78:	4b0f      	ldr	r3, [pc, #60]	; (8016cb8 <xTaskResumeAll+0x140>)
 8016c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c7e:	601a      	str	r2, [r3, #0]
 8016c80:	f3bf 8f4f 	dsb	sy
 8016c84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016c88:	f001 f954 	bl	8017f34 <vPortExitCritical>

	return xAlreadyYielded;
 8016c8c:	68bb      	ldr	r3, [r7, #8]
}
 8016c8e:	4618      	mov	r0, r3
 8016c90:	3710      	adds	r7, #16
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}
 8016c96:	bf00      	nop
 8016c98:	20002498 	.word	0x20002498
 8016c9c:	20002470 	.word	0x20002470
 8016ca0:	20002430 	.word	0x20002430
 8016ca4:	20002478 	.word	0x20002478
 8016ca8:	20001fa0 	.word	0x20001fa0
 8016cac:	20001f9c 	.word	0x20001f9c
 8016cb0:	20002484 	.word	0x20002484
 8016cb4:	20002480 	.word	0x20002480
 8016cb8:	e000ed04 	.word	0xe000ed04

08016cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b083      	sub	sp, #12
 8016cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016cc2:	4b05      	ldr	r3, [pc, #20]	; (8016cd8 <xTaskGetTickCount+0x1c>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016cc8:	687b      	ldr	r3, [r7, #4]
}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	370c      	adds	r7, #12
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd4:	4770      	bx	lr
 8016cd6:	bf00      	nop
 8016cd8:	20002474 	.word	0x20002474

08016cdc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ce2:	f001 f9d9 	bl	8018098 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016cea:	4b04      	ldr	r3, [pc, #16]	; (8016cfc <xTaskGetTickCountFromISR+0x20>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016cf0:	683b      	ldr	r3, [r7, #0]
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}
 8016cfa:	bf00      	nop
 8016cfc:	20002474 	.word	0x20002474

08016d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b086      	sub	sp, #24
 8016d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016d06:	2300      	movs	r3, #0
 8016d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d0a:	4b51      	ldr	r3, [pc, #324]	; (8016e50 <xTaskIncrementTick+0x150>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	f040 8093 	bne.w	8016e3a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016d14:	4b4f      	ldr	r3, [pc, #316]	; (8016e54 <xTaskIncrementTick+0x154>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	3301      	adds	r3, #1
 8016d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016d1c:	4a4d      	ldr	r2, [pc, #308]	; (8016e54 <xTaskIncrementTick+0x154>)
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016d22:	693b      	ldr	r3, [r7, #16]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d120      	bne.n	8016d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016d28:	4b4b      	ldr	r3, [pc, #300]	; (8016e58 <xTaskIncrementTick+0x158>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d00a      	beq.n	8016d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8016d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d36:	f383 8811 	msr	BASEPRI, r3
 8016d3a:	f3bf 8f6f 	isb	sy
 8016d3e:	f3bf 8f4f 	dsb	sy
 8016d42:	603b      	str	r3, [r7, #0]
}
 8016d44:	bf00      	nop
 8016d46:	e7fe      	b.n	8016d46 <xTaskIncrementTick+0x46>
 8016d48:	4b43      	ldr	r3, [pc, #268]	; (8016e58 <xTaskIncrementTick+0x158>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	60fb      	str	r3, [r7, #12]
 8016d4e:	4b43      	ldr	r3, [pc, #268]	; (8016e5c <xTaskIncrementTick+0x15c>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	4a41      	ldr	r2, [pc, #260]	; (8016e58 <xTaskIncrementTick+0x158>)
 8016d54:	6013      	str	r3, [r2, #0]
 8016d56:	4a41      	ldr	r2, [pc, #260]	; (8016e5c <xTaskIncrementTick+0x15c>)
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	6013      	str	r3, [r2, #0]
 8016d5c:	4b40      	ldr	r3, [pc, #256]	; (8016e60 <xTaskIncrementTick+0x160>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	3301      	adds	r3, #1
 8016d62:	4a3f      	ldr	r2, [pc, #252]	; (8016e60 <xTaskIncrementTick+0x160>)
 8016d64:	6013      	str	r3, [r2, #0]
 8016d66:	f000 fb31 	bl	80173cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016d6a:	4b3e      	ldr	r3, [pc, #248]	; (8016e64 <xTaskIncrementTick+0x164>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	693a      	ldr	r2, [r7, #16]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d34d      	bcc.n	8016e10 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016d74:	4b38      	ldr	r3, [pc, #224]	; (8016e58 <xTaskIncrementTick+0x158>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d104      	bne.n	8016d88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d7e:	4b39      	ldr	r3, [pc, #228]	; (8016e64 <xTaskIncrementTick+0x164>)
 8016d80:	f04f 32ff 	mov.w	r2, #4294967295
 8016d84:	601a      	str	r2, [r3, #0]
					break;
 8016d86:	e043      	b.n	8016e10 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d88:	4b33      	ldr	r3, [pc, #204]	; (8016e58 <xTaskIncrementTick+0x158>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	68db      	ldr	r3, [r3, #12]
 8016d8e:	68db      	ldr	r3, [r3, #12]
 8016d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	685b      	ldr	r3, [r3, #4]
 8016d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016d98:	693a      	ldr	r2, [r7, #16]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d203      	bcs.n	8016da8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016da0:	4a30      	ldr	r2, [pc, #192]	; (8016e64 <xTaskIncrementTick+0x164>)
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016da6:	e033      	b.n	8016e10 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	3304      	adds	r3, #4
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7fe fd07 	bl	80157c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d004      	beq.n	8016dc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	3318      	adds	r3, #24
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7fe fcfe 	bl	80157c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f002 fcde 	bl	8019788 <SEGGER_SYSVIEW_OnTaskStartReady>
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dd0:	4b25      	ldr	r3, [pc, #148]	; (8016e68 <xTaskIncrementTick+0x168>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d903      	bls.n	8016de0 <xTaskIncrementTick+0xe0>
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ddc:	4a22      	ldr	r2, [pc, #136]	; (8016e68 <xTaskIncrementTick+0x168>)
 8016dde:	6013      	str	r3, [r2, #0]
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016de4:	4613      	mov	r3, r2
 8016de6:	009b      	lsls	r3, r3, #2
 8016de8:	4413      	add	r3, r2
 8016dea:	009b      	lsls	r3, r3, #2
 8016dec:	4a1f      	ldr	r2, [pc, #124]	; (8016e6c <xTaskIncrementTick+0x16c>)
 8016dee:	441a      	add	r2, r3
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	3304      	adds	r3, #4
 8016df4:	4619      	mov	r1, r3
 8016df6:	4610      	mov	r0, r2
 8016df8:	f7fe fc85 	bl	8015706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e00:	4b1b      	ldr	r3, [pc, #108]	; (8016e70 <xTaskIncrementTick+0x170>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d3b4      	bcc.n	8016d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016e0e:	e7b1      	b.n	8016d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016e10:	4b17      	ldr	r3, [pc, #92]	; (8016e70 <xTaskIncrementTick+0x170>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e16:	4915      	ldr	r1, [pc, #84]	; (8016e6c <xTaskIncrementTick+0x16c>)
 8016e18:	4613      	mov	r3, r2
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	4413      	add	r3, r2
 8016e1e:	009b      	lsls	r3, r3, #2
 8016e20:	440b      	add	r3, r1
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	2b01      	cmp	r3, #1
 8016e26:	d901      	bls.n	8016e2c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8016e28:	2301      	movs	r3, #1
 8016e2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016e2c:	4b11      	ldr	r3, [pc, #68]	; (8016e74 <xTaskIncrementTick+0x174>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d007      	beq.n	8016e44 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8016e34:	2301      	movs	r3, #1
 8016e36:	617b      	str	r3, [r7, #20]
 8016e38:	e004      	b.n	8016e44 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016e3a:	4b0f      	ldr	r3, [pc, #60]	; (8016e78 <xTaskIncrementTick+0x178>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	3301      	adds	r3, #1
 8016e40:	4a0d      	ldr	r2, [pc, #52]	; (8016e78 <xTaskIncrementTick+0x178>)
 8016e42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016e44:	697b      	ldr	r3, [r7, #20]
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3718      	adds	r7, #24
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	20002498 	.word	0x20002498
 8016e54:	20002474 	.word	0x20002474
 8016e58:	20002428 	.word	0x20002428
 8016e5c:	2000242c 	.word	0x2000242c
 8016e60:	20002488 	.word	0x20002488
 8016e64:	20002490 	.word	0x20002490
 8016e68:	20002478 	.word	0x20002478
 8016e6c:	20001fa0 	.word	0x20001fa0
 8016e70:	20001f9c 	.word	0x20001f9c
 8016e74:	20002484 	.word	0x20002484
 8016e78:	20002480 	.word	0x20002480

08016e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016e82:	4b33      	ldr	r3, [pc, #204]	; (8016f50 <vTaskSwitchContext+0xd4>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d003      	beq.n	8016e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016e8a:	4b32      	ldr	r3, [pc, #200]	; (8016f54 <vTaskSwitchContext+0xd8>)
 8016e8c:	2201      	movs	r2, #1
 8016e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016e90:	e059      	b.n	8016f46 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8016e92:	4b30      	ldr	r3, [pc, #192]	; (8016f54 <vTaskSwitchContext+0xd8>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e98:	4b2f      	ldr	r3, [pc, #188]	; (8016f58 <vTaskSwitchContext+0xdc>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	60fb      	str	r3, [r7, #12]
 8016e9e:	e010      	b.n	8016ec2 <vTaskSwitchContext+0x46>
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d10a      	bne.n	8016ebc <vTaskSwitchContext+0x40>
	__asm volatile
 8016ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eaa:	f383 8811 	msr	BASEPRI, r3
 8016eae:	f3bf 8f6f 	isb	sy
 8016eb2:	f3bf 8f4f 	dsb	sy
 8016eb6:	607b      	str	r3, [r7, #4]
}
 8016eb8:	bf00      	nop
 8016eba:	e7fe      	b.n	8016eba <vTaskSwitchContext+0x3e>
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	3b01      	subs	r3, #1
 8016ec0:	60fb      	str	r3, [r7, #12]
 8016ec2:	4926      	ldr	r1, [pc, #152]	; (8016f5c <vTaskSwitchContext+0xe0>)
 8016ec4:	68fa      	ldr	r2, [r7, #12]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	009b      	lsls	r3, r3, #2
 8016eca:	4413      	add	r3, r2
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	440b      	add	r3, r1
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d0e4      	beq.n	8016ea0 <vTaskSwitchContext+0x24>
 8016ed6:	68fa      	ldr	r2, [r7, #12]
 8016ed8:	4613      	mov	r3, r2
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	4413      	add	r3, r2
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	4a1e      	ldr	r2, [pc, #120]	; (8016f5c <vTaskSwitchContext+0xe0>)
 8016ee2:	4413      	add	r3, r2
 8016ee4:	60bb      	str	r3, [r7, #8]
 8016ee6:	68bb      	ldr	r3, [r7, #8]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	685a      	ldr	r2, [r3, #4]
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	605a      	str	r2, [r3, #4]
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	685a      	ldr	r2, [r3, #4]
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	3308      	adds	r3, #8
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d104      	bne.n	8016f06 <vTaskSwitchContext+0x8a>
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	685a      	ldr	r2, [r3, #4]
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	605a      	str	r2, [r3, #4]
 8016f06:	68bb      	ldr	r3, [r7, #8]
 8016f08:	685b      	ldr	r3, [r3, #4]
 8016f0a:	68db      	ldr	r3, [r3, #12]
 8016f0c:	4a14      	ldr	r2, [pc, #80]	; (8016f60 <vTaskSwitchContext+0xe4>)
 8016f0e:	6013      	str	r3, [r2, #0]
 8016f10:	4a11      	ldr	r2, [pc, #68]	; (8016f58 <vTaskSwitchContext+0xdc>)
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8016f16:	4b12      	ldr	r3, [pc, #72]	; (8016f60 <vTaskSwitchContext+0xe4>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	3334      	adds	r3, #52	; 0x34
 8016f1c:	2205      	movs	r2, #5
 8016f1e:	4911      	ldr	r1, [pc, #68]	; (8016f64 <vTaskSwitchContext+0xe8>)
 8016f20:	4618      	mov	r0, r3
 8016f22:	f002 fe05 	bl	8019b30 <memcmp>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d005      	beq.n	8016f38 <vTaskSwitchContext+0xbc>
 8016f2c:	4b0c      	ldr	r3, [pc, #48]	; (8016f60 <vTaskSwitchContext+0xe4>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f002 fbe7 	bl	8019704 <SEGGER_SYSVIEW_OnTaskStartExec>
 8016f36:	e001      	b.n	8016f3c <vTaskSwitchContext+0xc0>
 8016f38:	f002 fb86 	bl	8019648 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016f3c:	4b08      	ldr	r3, [pc, #32]	; (8016f60 <vTaskSwitchContext+0xe4>)
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	3364      	adds	r3, #100	; 0x64
 8016f42:	4a09      	ldr	r2, [pc, #36]	; (8016f68 <vTaskSwitchContext+0xec>)
 8016f44:	6013      	str	r3, [r2, #0]
}
 8016f46:	bf00      	nop
 8016f48:	3710      	adds	r7, #16
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	20002498 	.word	0x20002498
 8016f54:	20002484 	.word	0x20002484
 8016f58:	20002478 	.word	0x20002478
 8016f5c:	20001fa0 	.word	0x20001fa0
 8016f60:	20001f9c 	.word	0x20001f9c
 8016f64:	0801a874 	.word	0x0801a874
 8016f68:	20001444 	.word	0x20001444

08016f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d10a      	bne.n	8016f92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f80:	f383 8811 	msr	BASEPRI, r3
 8016f84:	f3bf 8f6f 	isb	sy
 8016f88:	f3bf 8f4f 	dsb	sy
 8016f8c:	60fb      	str	r3, [r7, #12]
}
 8016f8e:	bf00      	nop
 8016f90:	e7fe      	b.n	8016f90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016f92:	4b07      	ldr	r3, [pc, #28]	; (8016fb0 <vTaskPlaceOnEventList+0x44>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	3318      	adds	r3, #24
 8016f98:	4619      	mov	r1, r3
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	f7fe fbd7 	bl	801574e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016fa0:	2101      	movs	r1, #1
 8016fa2:	6838      	ldr	r0, [r7, #0]
 8016fa4:	f000 fac6 	bl	8017534 <prvAddCurrentTaskToDelayedList>
}
 8016fa8:	bf00      	nop
 8016faa:	3710      	adds	r7, #16
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}
 8016fb0:	20001f9c 	.word	0x20001f9c

08016fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b086      	sub	sp, #24
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	60f8      	str	r0, [r7, #12]
 8016fbc:	60b9      	str	r1, [r7, #8]
 8016fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d10a      	bne.n	8016fdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fca:	f383 8811 	msr	BASEPRI, r3
 8016fce:	f3bf 8f6f 	isb	sy
 8016fd2:	f3bf 8f4f 	dsb	sy
 8016fd6:	617b      	str	r3, [r7, #20]
}
 8016fd8:	bf00      	nop
 8016fda:	e7fe      	b.n	8016fda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016fdc:	4b0b      	ldr	r3, [pc, #44]	; (801700c <vTaskPlaceOnEventListRestricted+0x58>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	3318      	adds	r3, #24
 8016fe2:	4619      	mov	r1, r3
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	f7fe fb8e 	bl	8015706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d002      	beq.n	8016ff6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ff4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8016ff6:	2024      	movs	r0, #36	; 0x24
 8016ff8:	f001 fea2 	bl	8018d40 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016ffc:	6879      	ldr	r1, [r7, #4]
 8016ffe:	68b8      	ldr	r0, [r7, #8]
 8017000:	f000 fa98 	bl	8017534 <prvAddCurrentTaskToDelayedList>
	}
 8017004:	bf00      	nop
 8017006:	3718      	adds	r7, #24
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	20001f9c 	.word	0x20001f9c

08017010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b086      	sub	sp, #24
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017020:	693b      	ldr	r3, [r7, #16]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d10a      	bne.n	801703c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702a:	f383 8811 	msr	BASEPRI, r3
 801702e:	f3bf 8f6f 	isb	sy
 8017032:	f3bf 8f4f 	dsb	sy
 8017036:	60fb      	str	r3, [r7, #12]
}
 8017038:	bf00      	nop
 801703a:	e7fe      	b.n	801703a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	3318      	adds	r3, #24
 8017040:	4618      	mov	r0, r3
 8017042:	f7fe fbbd 	bl	80157c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017046:	4b20      	ldr	r3, [pc, #128]	; (80170c8 <xTaskRemoveFromEventList+0xb8>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d121      	bne.n	8017092 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	3304      	adds	r3, #4
 8017052:	4618      	mov	r0, r3
 8017054:	f7fe fbb4 	bl	80157c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017058:	693b      	ldr	r3, [r7, #16]
 801705a:	4618      	mov	r0, r3
 801705c:	f002 fb94 	bl	8019788 <SEGGER_SYSVIEW_OnTaskStartReady>
 8017060:	693b      	ldr	r3, [r7, #16]
 8017062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017064:	4b19      	ldr	r3, [pc, #100]	; (80170cc <xTaskRemoveFromEventList+0xbc>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	429a      	cmp	r2, r3
 801706a:	d903      	bls.n	8017074 <xTaskRemoveFromEventList+0x64>
 801706c:	693b      	ldr	r3, [r7, #16]
 801706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017070:	4a16      	ldr	r2, [pc, #88]	; (80170cc <xTaskRemoveFromEventList+0xbc>)
 8017072:	6013      	str	r3, [r2, #0]
 8017074:	693b      	ldr	r3, [r7, #16]
 8017076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017078:	4613      	mov	r3, r2
 801707a:	009b      	lsls	r3, r3, #2
 801707c:	4413      	add	r3, r2
 801707e:	009b      	lsls	r3, r3, #2
 8017080:	4a13      	ldr	r2, [pc, #76]	; (80170d0 <xTaskRemoveFromEventList+0xc0>)
 8017082:	441a      	add	r2, r3
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	3304      	adds	r3, #4
 8017088:	4619      	mov	r1, r3
 801708a:	4610      	mov	r0, r2
 801708c:	f7fe fb3b 	bl	8015706 <vListInsertEnd>
 8017090:	e005      	b.n	801709e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	3318      	adds	r3, #24
 8017096:	4619      	mov	r1, r3
 8017098:	480e      	ldr	r0, [pc, #56]	; (80170d4 <xTaskRemoveFromEventList+0xc4>)
 801709a:	f7fe fb34 	bl	8015706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170a2:	4b0d      	ldr	r3, [pc, #52]	; (80170d8 <xTaskRemoveFromEventList+0xc8>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d905      	bls.n	80170b8 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80170ac:	2301      	movs	r3, #1
 80170ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80170b0:	4b0a      	ldr	r3, [pc, #40]	; (80170dc <xTaskRemoveFromEventList+0xcc>)
 80170b2:	2201      	movs	r2, #1
 80170b4:	601a      	str	r2, [r3, #0]
 80170b6:	e001      	b.n	80170bc <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80170b8:	2300      	movs	r3, #0
 80170ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80170bc:	697b      	ldr	r3, [r7, #20]
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3718      	adds	r7, #24
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	20002498 	.word	0x20002498
 80170cc:	20002478 	.word	0x20002478
 80170d0:	20001fa0 	.word	0x20001fa0
 80170d4:	20002430 	.word	0x20002430
 80170d8:	20001f9c 	.word	0x20001f9c
 80170dc:	20002484 	.word	0x20002484

080170e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80170e0:	b480      	push	{r7}
 80170e2:	b083      	sub	sp, #12
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80170e8:	4b06      	ldr	r3, [pc, #24]	; (8017104 <vTaskInternalSetTimeOutState+0x24>)
 80170ea:	681a      	ldr	r2, [r3, #0]
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80170f0:	4b05      	ldr	r3, [pc, #20]	; (8017108 <vTaskInternalSetTimeOutState+0x28>)
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	605a      	str	r2, [r3, #4]
}
 80170f8:	bf00      	nop
 80170fa:	370c      	adds	r7, #12
 80170fc:	46bd      	mov	sp, r7
 80170fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017102:	4770      	bx	lr
 8017104:	20002488 	.word	0x20002488
 8017108:	20002474 	.word	0x20002474

0801710c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b088      	sub	sp, #32
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d10a      	bne.n	8017132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017120:	f383 8811 	msr	BASEPRI, r3
 8017124:	f3bf 8f6f 	isb	sy
 8017128:	f3bf 8f4f 	dsb	sy
 801712c:	613b      	str	r3, [r7, #16]
}
 801712e:	bf00      	nop
 8017130:	e7fe      	b.n	8017130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d10a      	bne.n	801714e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801713c:	f383 8811 	msr	BASEPRI, r3
 8017140:	f3bf 8f6f 	isb	sy
 8017144:	f3bf 8f4f 	dsb	sy
 8017148:	60fb      	str	r3, [r7, #12]
}
 801714a:	bf00      	nop
 801714c:	e7fe      	b.n	801714c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801714e:	f000 fec1 	bl	8017ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017152:	4b1d      	ldr	r3, [pc, #116]	; (80171c8 <xTaskCheckForTimeOut+0xbc>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	685b      	ldr	r3, [r3, #4]
 801715c:	69ba      	ldr	r2, [r7, #24]
 801715e:	1ad3      	subs	r3, r2, r3
 8017160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801716a:	d102      	bne.n	8017172 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801716c:	2300      	movs	r3, #0
 801716e:	61fb      	str	r3, [r7, #28]
 8017170:	e023      	b.n	80171ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	681a      	ldr	r2, [r3, #0]
 8017176:	4b15      	ldr	r3, [pc, #84]	; (80171cc <xTaskCheckForTimeOut+0xc0>)
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	429a      	cmp	r2, r3
 801717c:	d007      	beq.n	801718e <xTaskCheckForTimeOut+0x82>
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	69ba      	ldr	r2, [r7, #24]
 8017184:	429a      	cmp	r2, r3
 8017186:	d302      	bcc.n	801718e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017188:	2301      	movs	r3, #1
 801718a:	61fb      	str	r3, [r7, #28]
 801718c:	e015      	b.n	80171ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	697a      	ldr	r2, [r7, #20]
 8017194:	429a      	cmp	r2, r3
 8017196:	d20b      	bcs.n	80171b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	681a      	ldr	r2, [r3, #0]
 801719c:	697b      	ldr	r3, [r7, #20]
 801719e:	1ad2      	subs	r2, r2, r3
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	f7ff ff9b 	bl	80170e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80171aa:	2300      	movs	r3, #0
 80171ac:	61fb      	str	r3, [r7, #28]
 80171ae:	e004      	b.n	80171ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80171b0:	683b      	ldr	r3, [r7, #0]
 80171b2:	2200      	movs	r2, #0
 80171b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80171b6:	2301      	movs	r3, #1
 80171b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80171ba:	f000 febb 	bl	8017f34 <vPortExitCritical>

	return xReturn;
 80171be:	69fb      	ldr	r3, [r7, #28]
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3720      	adds	r7, #32
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}
 80171c8:	20002474 	.word	0x20002474
 80171cc:	20002488 	.word	0x20002488

080171d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80171d0:	b480      	push	{r7}
 80171d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80171d4:	4b03      	ldr	r3, [pc, #12]	; (80171e4 <vTaskMissedYield+0x14>)
 80171d6:	2201      	movs	r2, #1
 80171d8:	601a      	str	r2, [r3, #0]
}
 80171da:	bf00      	nop
 80171dc:	46bd      	mov	sp, r7
 80171de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e2:	4770      	bx	lr
 80171e4:	20002484 	.word	0x20002484

080171e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b082      	sub	sp, #8
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80171f0:	f000 f852 	bl	8017298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80171f4:	4b06      	ldr	r3, [pc, #24]	; (8017210 <prvIdleTask+0x28>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	2b01      	cmp	r3, #1
 80171fa:	d9f9      	bls.n	80171f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80171fc:	4b05      	ldr	r3, [pc, #20]	; (8017214 <prvIdleTask+0x2c>)
 80171fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017202:	601a      	str	r2, [r3, #0]
 8017204:	f3bf 8f4f 	dsb	sy
 8017208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801720c:	e7f0      	b.n	80171f0 <prvIdleTask+0x8>
 801720e:	bf00      	nop
 8017210:	20001fa0 	.word	0x20001fa0
 8017214:	e000ed04 	.word	0xe000ed04

08017218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b082      	sub	sp, #8
 801721c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801721e:	2300      	movs	r3, #0
 8017220:	607b      	str	r3, [r7, #4]
 8017222:	e00c      	b.n	801723e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	4613      	mov	r3, r2
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	4413      	add	r3, r2
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	4a12      	ldr	r2, [pc, #72]	; (8017278 <prvInitialiseTaskLists+0x60>)
 8017230:	4413      	add	r3, r2
 8017232:	4618      	mov	r0, r3
 8017234:	f7fe fa3a 	bl	80156ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	3301      	adds	r3, #1
 801723c:	607b      	str	r3, [r7, #4]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2b37      	cmp	r3, #55	; 0x37
 8017242:	d9ef      	bls.n	8017224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017244:	480d      	ldr	r0, [pc, #52]	; (801727c <prvInitialiseTaskLists+0x64>)
 8017246:	f7fe fa31 	bl	80156ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801724a:	480d      	ldr	r0, [pc, #52]	; (8017280 <prvInitialiseTaskLists+0x68>)
 801724c:	f7fe fa2e 	bl	80156ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017250:	480c      	ldr	r0, [pc, #48]	; (8017284 <prvInitialiseTaskLists+0x6c>)
 8017252:	f7fe fa2b 	bl	80156ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017256:	480c      	ldr	r0, [pc, #48]	; (8017288 <prvInitialiseTaskLists+0x70>)
 8017258:	f7fe fa28 	bl	80156ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801725c:	480b      	ldr	r0, [pc, #44]	; (801728c <prvInitialiseTaskLists+0x74>)
 801725e:	f7fe fa25 	bl	80156ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017262:	4b0b      	ldr	r3, [pc, #44]	; (8017290 <prvInitialiseTaskLists+0x78>)
 8017264:	4a05      	ldr	r2, [pc, #20]	; (801727c <prvInitialiseTaskLists+0x64>)
 8017266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017268:	4b0a      	ldr	r3, [pc, #40]	; (8017294 <prvInitialiseTaskLists+0x7c>)
 801726a:	4a05      	ldr	r2, [pc, #20]	; (8017280 <prvInitialiseTaskLists+0x68>)
 801726c:	601a      	str	r2, [r3, #0]
}
 801726e:	bf00      	nop
 8017270:	3708      	adds	r7, #8
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}
 8017276:	bf00      	nop
 8017278:	20001fa0 	.word	0x20001fa0
 801727c:	20002400 	.word	0x20002400
 8017280:	20002414 	.word	0x20002414
 8017284:	20002430 	.word	0x20002430
 8017288:	20002444 	.word	0x20002444
 801728c:	2000245c 	.word	0x2000245c
 8017290:	20002428 	.word	0x20002428
 8017294:	2000242c 	.word	0x2000242c

08017298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801729e:	e019      	b.n	80172d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80172a0:	f000 fe18 	bl	8017ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80172a4:	4b10      	ldr	r3, [pc, #64]	; (80172e8 <prvCheckTasksWaitingTermination+0x50>)
 80172a6:	68db      	ldr	r3, [r3, #12]
 80172a8:	68db      	ldr	r3, [r3, #12]
 80172aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	3304      	adds	r3, #4
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7fe fa85 	bl	80157c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80172b6:	4b0d      	ldr	r3, [pc, #52]	; (80172ec <prvCheckTasksWaitingTermination+0x54>)
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	3b01      	subs	r3, #1
 80172bc:	4a0b      	ldr	r2, [pc, #44]	; (80172ec <prvCheckTasksWaitingTermination+0x54>)
 80172be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80172c0:	4b0b      	ldr	r3, [pc, #44]	; (80172f0 <prvCheckTasksWaitingTermination+0x58>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	3b01      	subs	r3, #1
 80172c6:	4a0a      	ldr	r2, [pc, #40]	; (80172f0 <prvCheckTasksWaitingTermination+0x58>)
 80172c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80172ca:	f000 fe33 	bl	8017f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f000 f848 	bl	8017364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80172d4:	4b06      	ldr	r3, [pc, #24]	; (80172f0 <prvCheckTasksWaitingTermination+0x58>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d1e1      	bne.n	80172a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80172dc:	bf00      	nop
 80172de:	bf00      	nop
 80172e0:	3708      	adds	r7, #8
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	20002444 	.word	0x20002444
 80172ec:	20002470 	.word	0x20002470
 80172f0:	20002458 	.word	0x20002458

080172f4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80172f4:	b480      	push	{r7}
 80172f6:	b085      	sub	sp, #20
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80172fc:	2300      	movs	r3, #0
 80172fe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8017300:	e005      	b.n	801730e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	3301      	adds	r3, #1
 8017306:	607b      	str	r3, [r7, #4]
			ulCount++;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	3301      	adds	r3, #1
 801730c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	2ba5      	cmp	r3, #165	; 0xa5
 8017314:	d0f5      	beq.n	8017302 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	089b      	lsrs	r3, r3, #2
 801731a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	b29b      	uxth	r3, r3
	}
 8017320:	4618      	mov	r0, r3
 8017322:	3714      	adds	r7, #20
 8017324:	46bd      	mov	sp, r7
 8017326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732a:	4770      	bx	lr

0801732c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 801732c:	b580      	push	{r7, lr}
 801732e:	b086      	sub	sp, #24
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d102      	bne.n	8017340 <uxTaskGetStackHighWaterMark+0x14>
 801733a:	4b09      	ldr	r3, [pc, #36]	; (8017360 <uxTaskGetStackHighWaterMark+0x34>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	e000      	b.n	8017342 <uxTaskGetStackHighWaterMark+0x16>
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017348:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801734a:	6938      	ldr	r0, [r7, #16]
 801734c:	f7ff ffd2 	bl	80172f4 <prvTaskCheckFreeStackSpace>
 8017350:	4603      	mov	r3, r0
 8017352:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8017354:	68fb      	ldr	r3, [r7, #12]
	}
 8017356:	4618      	mov	r0, r3
 8017358:	3718      	adds	r7, #24
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
 801735e:	bf00      	nop
 8017360:	20001f9c 	.word	0x20001f9c

08017364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017364:	b580      	push	{r7, lr}
 8017366:	b084      	sub	sp, #16
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	3364      	adds	r3, #100	; 0x64
 8017370:	4618      	mov	r0, r3
 8017372:	f002 fc0f 	bl	8019b94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801737c:	2b00      	cmp	r3, #0
 801737e:	d108      	bne.n	8017392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017384:	4618      	mov	r0, r3
 8017386:	f000 ff93 	bl	80182b0 <vPortFree>
				vPortFree( pxTCB );
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f000 ff90 	bl	80182b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017390:	e018      	b.n	80173c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8017398:	2b01      	cmp	r3, #1
 801739a:	d103      	bne.n	80173a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f000 ff87 	bl	80182b0 <vPortFree>
	}
 80173a2:	e00f      	b.n	80173c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80173aa:	2b02      	cmp	r3, #2
 80173ac:	d00a      	beq.n	80173c4 <prvDeleteTCB+0x60>
	__asm volatile
 80173ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b2:	f383 8811 	msr	BASEPRI, r3
 80173b6:	f3bf 8f6f 	isb	sy
 80173ba:	f3bf 8f4f 	dsb	sy
 80173be:	60fb      	str	r3, [r7, #12]
}
 80173c0:	bf00      	nop
 80173c2:	e7fe      	b.n	80173c2 <prvDeleteTCB+0x5e>
	}
 80173c4:	bf00      	nop
 80173c6:	3710      	adds	r7, #16
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80173cc:	b480      	push	{r7}
 80173ce:	b083      	sub	sp, #12
 80173d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80173d2:	4b0c      	ldr	r3, [pc, #48]	; (8017404 <prvResetNextTaskUnblockTime+0x38>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d104      	bne.n	80173e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80173dc:	4b0a      	ldr	r3, [pc, #40]	; (8017408 <prvResetNextTaskUnblockTime+0x3c>)
 80173de:	f04f 32ff 	mov.w	r2, #4294967295
 80173e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80173e4:	e008      	b.n	80173f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80173e6:	4b07      	ldr	r3, [pc, #28]	; (8017404 <prvResetNextTaskUnblockTime+0x38>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	68db      	ldr	r3, [r3, #12]
 80173ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	685b      	ldr	r3, [r3, #4]
 80173f4:	4a04      	ldr	r2, [pc, #16]	; (8017408 <prvResetNextTaskUnblockTime+0x3c>)
 80173f6:	6013      	str	r3, [r2, #0]
}
 80173f8:	bf00      	nop
 80173fa:	370c      	adds	r7, #12
 80173fc:	46bd      	mov	sp, r7
 80173fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017402:	4770      	bx	lr
 8017404:	20002428 	.word	0x20002428
 8017408:	20002490 	.word	0x20002490

0801740c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801740c:	b480      	push	{r7}
 801740e:	b083      	sub	sp, #12
 8017410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017412:	4b0b      	ldr	r3, [pc, #44]	; (8017440 <xTaskGetSchedulerState+0x34>)
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d102      	bne.n	8017420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801741a:	2301      	movs	r3, #1
 801741c:	607b      	str	r3, [r7, #4]
 801741e:	e008      	b.n	8017432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017420:	4b08      	ldr	r3, [pc, #32]	; (8017444 <xTaskGetSchedulerState+0x38>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d102      	bne.n	801742e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017428:	2302      	movs	r3, #2
 801742a:	607b      	str	r3, [r7, #4]
 801742c:	e001      	b.n	8017432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801742e:	2300      	movs	r3, #0
 8017430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017432:	687b      	ldr	r3, [r7, #4]
	}
 8017434:	4618      	mov	r0, r3
 8017436:	370c      	adds	r7, #12
 8017438:	46bd      	mov	sp, r7
 801743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743e:	4770      	bx	lr
 8017440:	2000247c 	.word	0x2000247c
 8017444:	20002498 	.word	0x20002498

08017448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017448:	b580      	push	{r7, lr}
 801744a:	b086      	sub	sp, #24
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017454:	2300      	movs	r3, #0
 8017456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d05f      	beq.n	801751e <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801745e:	4b32      	ldr	r3, [pc, #200]	; (8017528 <xTaskPriorityDisinherit+0xe0>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	693a      	ldr	r2, [r7, #16]
 8017464:	429a      	cmp	r2, r3
 8017466:	d00a      	beq.n	801747e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746c:	f383 8811 	msr	BASEPRI, r3
 8017470:	f3bf 8f6f 	isb	sy
 8017474:	f3bf 8f4f 	dsb	sy
 8017478:	60fb      	str	r3, [r7, #12]
}
 801747a:	bf00      	nop
 801747c:	e7fe      	b.n	801747c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017482:	2b00      	cmp	r3, #0
 8017484:	d10a      	bne.n	801749c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748a:	f383 8811 	msr	BASEPRI, r3
 801748e:	f3bf 8f6f 	isb	sy
 8017492:	f3bf 8f4f 	dsb	sy
 8017496:	60bb      	str	r3, [r7, #8]
}
 8017498:	bf00      	nop
 801749a:	e7fe      	b.n	801749a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174a0:	1e5a      	subs	r2, r3, #1
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d035      	beq.n	801751e <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d131      	bne.n	801751e <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	3304      	adds	r3, #4
 80174be:	4618      	mov	r0, r3
 80174c0:	f7fe f97e 	bl	80157c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	4619      	mov	r1, r3
 80174c8:	204a      	movs	r0, #74	; 0x4a
 80174ca:	f001 fc57 	bl	8018d7c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80174d2:	693b      	ldr	r3, [r7, #16]
 80174d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	4618      	mov	r0, r3
 80174e6:	f002 f94f 	bl	8019788 <SEGGER_SYSVIEW_OnTaskStartReady>
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174ee:	4b0f      	ldr	r3, [pc, #60]	; (801752c <xTaskPriorityDisinherit+0xe4>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d903      	bls.n	80174fe <xTaskPriorityDisinherit+0xb6>
 80174f6:	693b      	ldr	r3, [r7, #16]
 80174f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174fa:	4a0c      	ldr	r2, [pc, #48]	; (801752c <xTaskPriorityDisinherit+0xe4>)
 80174fc:	6013      	str	r3, [r2, #0]
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017502:	4613      	mov	r3, r2
 8017504:	009b      	lsls	r3, r3, #2
 8017506:	4413      	add	r3, r2
 8017508:	009b      	lsls	r3, r3, #2
 801750a:	4a09      	ldr	r2, [pc, #36]	; (8017530 <xTaskPriorityDisinherit+0xe8>)
 801750c:	441a      	add	r2, r3
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	3304      	adds	r3, #4
 8017512:	4619      	mov	r1, r3
 8017514:	4610      	mov	r0, r2
 8017516:	f7fe f8f6 	bl	8015706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801751a:	2301      	movs	r3, #1
 801751c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801751e:	697b      	ldr	r3, [r7, #20]
	}
 8017520:	4618      	mov	r0, r3
 8017522:	3718      	adds	r7, #24
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}
 8017528:	20001f9c 	.word	0x20001f9c
 801752c:	20002478 	.word	0x20002478
 8017530:	20001fa0 	.word	0x20001fa0

08017534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801753e:	4b21      	ldr	r3, [pc, #132]	; (80175c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017544:	4b20      	ldr	r3, [pc, #128]	; (80175c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	3304      	adds	r3, #4
 801754a:	4618      	mov	r0, r3
 801754c:	f7fe f938 	bl	80157c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017556:	d10a      	bne.n	801756e <prvAddCurrentTaskToDelayedList+0x3a>
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d007      	beq.n	801756e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801755e:	4b1a      	ldr	r3, [pc, #104]	; (80175c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	3304      	adds	r3, #4
 8017564:	4619      	mov	r1, r3
 8017566:	4819      	ldr	r0, [pc, #100]	; (80175cc <prvAddCurrentTaskToDelayedList+0x98>)
 8017568:	f7fe f8cd 	bl	8015706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801756c:	e026      	b.n	80175bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801756e:	68fa      	ldr	r2, [r7, #12]
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	4413      	add	r3, r2
 8017574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017576:	4b14      	ldr	r3, [pc, #80]	; (80175c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	68ba      	ldr	r2, [r7, #8]
 801757c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801757e:	68ba      	ldr	r2, [r7, #8]
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	429a      	cmp	r2, r3
 8017584:	d209      	bcs.n	801759a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017586:	4b12      	ldr	r3, [pc, #72]	; (80175d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	4b0f      	ldr	r3, [pc, #60]	; (80175c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	3304      	adds	r3, #4
 8017590:	4619      	mov	r1, r3
 8017592:	4610      	mov	r0, r2
 8017594:	f7fe f8db 	bl	801574e <vListInsert>
}
 8017598:	e010      	b.n	80175bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801759a:	4b0e      	ldr	r3, [pc, #56]	; (80175d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801759c:	681a      	ldr	r2, [r3, #0]
 801759e:	4b0a      	ldr	r3, [pc, #40]	; (80175c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	3304      	adds	r3, #4
 80175a4:	4619      	mov	r1, r3
 80175a6:	4610      	mov	r0, r2
 80175a8:	f7fe f8d1 	bl	801574e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80175ac:	4b0a      	ldr	r3, [pc, #40]	; (80175d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	68ba      	ldr	r2, [r7, #8]
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d202      	bcs.n	80175bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80175b6:	4a08      	ldr	r2, [pc, #32]	; (80175d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	6013      	str	r3, [r2, #0]
}
 80175bc:	bf00      	nop
 80175be:	3710      	adds	r7, #16
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}
 80175c4:	20002474 	.word	0x20002474
 80175c8:	20001f9c 	.word	0x20001f9c
 80175cc:	2000245c 	.word	0x2000245c
 80175d0:	2000242c 	.word	0x2000242c
 80175d4:	20002428 	.word	0x20002428
 80175d8:	20002490 	.word	0x20002490

080175dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b08a      	sub	sp, #40	; 0x28
 80175e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80175e2:	2300      	movs	r3, #0
 80175e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80175e6:	f000 fb07 	bl	8017bf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80175ea:	4b1c      	ldr	r3, [pc, #112]	; (801765c <xTimerCreateTimerTask+0x80>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d021      	beq.n	8017636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80175f2:	2300      	movs	r3, #0
 80175f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80175f6:	2300      	movs	r3, #0
 80175f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80175fa:	1d3a      	adds	r2, r7, #4
 80175fc:	f107 0108 	add.w	r1, r7, #8
 8017600:	f107 030c 	add.w	r3, r7, #12
 8017604:	4618      	mov	r0, r3
 8017606:	f7fe f837 	bl	8015678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801760a:	6879      	ldr	r1, [r7, #4]
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	68fa      	ldr	r2, [r7, #12]
 8017610:	9202      	str	r2, [sp, #8]
 8017612:	9301      	str	r3, [sp, #4]
 8017614:	2302      	movs	r3, #2
 8017616:	9300      	str	r3, [sp, #0]
 8017618:	2300      	movs	r3, #0
 801761a:	460a      	mov	r2, r1
 801761c:	4910      	ldr	r1, [pc, #64]	; (8017660 <xTimerCreateTimerTask+0x84>)
 801761e:	4811      	ldr	r0, [pc, #68]	; (8017664 <xTimerCreateTimerTask+0x88>)
 8017620:	f7fe ff8c 	bl	801653c <xTaskCreateStatic>
 8017624:	4603      	mov	r3, r0
 8017626:	4a10      	ldr	r2, [pc, #64]	; (8017668 <xTimerCreateTimerTask+0x8c>)
 8017628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801762a:	4b0f      	ldr	r3, [pc, #60]	; (8017668 <xTimerCreateTimerTask+0x8c>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d001      	beq.n	8017636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017632:	2301      	movs	r3, #1
 8017634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d10a      	bne.n	8017652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017640:	f383 8811 	msr	BASEPRI, r3
 8017644:	f3bf 8f6f 	isb	sy
 8017648:	f3bf 8f4f 	dsb	sy
 801764c:	613b      	str	r3, [r7, #16]
}
 801764e:	bf00      	nop
 8017650:	e7fe      	b.n	8017650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017652:	697b      	ldr	r3, [r7, #20]
}
 8017654:	4618      	mov	r0, r3
 8017656:	3718      	adds	r7, #24
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	200024cc 	.word	0x200024cc
 8017660:	0801a87c 	.word	0x0801a87c
 8017664:	080177a1 	.word	0x080177a1
 8017668:	200024d0 	.word	0x200024d0

0801766c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b08a      	sub	sp, #40	; 0x28
 8017670:	af00      	add	r7, sp, #0
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	607a      	str	r2, [r7, #4]
 8017678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801767a:	2300      	movs	r3, #0
 801767c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d10a      	bne.n	801769a <xTimerGenericCommand+0x2e>
	__asm volatile
 8017684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017688:	f383 8811 	msr	BASEPRI, r3
 801768c:	f3bf 8f6f 	isb	sy
 8017690:	f3bf 8f4f 	dsb	sy
 8017694:	623b      	str	r3, [r7, #32]
}
 8017696:	bf00      	nop
 8017698:	e7fe      	b.n	8017698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801769a:	4b1a      	ldr	r3, [pc, #104]	; (8017704 <xTimerGenericCommand+0x98>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d02a      	beq.n	80176f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	2b05      	cmp	r3, #5
 80176b2:	dc18      	bgt.n	80176e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80176b4:	f7ff feaa 	bl	801740c <xTaskGetSchedulerState>
 80176b8:	4603      	mov	r3, r0
 80176ba:	2b02      	cmp	r3, #2
 80176bc:	d109      	bne.n	80176d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80176be:	4b11      	ldr	r3, [pc, #68]	; (8017704 <xTimerGenericCommand+0x98>)
 80176c0:	6818      	ldr	r0, [r3, #0]
 80176c2:	f107 0110 	add.w	r1, r7, #16
 80176c6:	2300      	movs	r3, #0
 80176c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176ca:	f7fe f9e7 	bl	8015a9c <xQueueGenericSend>
 80176ce:	6278      	str	r0, [r7, #36]	; 0x24
 80176d0:	e012      	b.n	80176f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80176d2:	4b0c      	ldr	r3, [pc, #48]	; (8017704 <xTimerGenericCommand+0x98>)
 80176d4:	6818      	ldr	r0, [r3, #0]
 80176d6:	f107 0110 	add.w	r1, r7, #16
 80176da:	2300      	movs	r3, #0
 80176dc:	2200      	movs	r2, #0
 80176de:	f7fe f9dd 	bl	8015a9c <xQueueGenericSend>
 80176e2:	6278      	str	r0, [r7, #36]	; 0x24
 80176e4:	e008      	b.n	80176f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80176e6:	4b07      	ldr	r3, [pc, #28]	; (8017704 <xTimerGenericCommand+0x98>)
 80176e8:	6818      	ldr	r0, [r3, #0]
 80176ea:	f107 0110 	add.w	r1, r7, #16
 80176ee:	2300      	movs	r3, #0
 80176f0:	683a      	ldr	r2, [r7, #0]
 80176f2:	f7fe faf9 	bl	8015ce8 <xQueueGenericSendFromISR>
 80176f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80176f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3728      	adds	r7, #40	; 0x28
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	200024cc 	.word	0x200024cc

08017708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b088      	sub	sp, #32
 801770c:	af02      	add	r7, sp, #8
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017712:	4b22      	ldr	r3, [pc, #136]	; (801779c <prvProcessExpiredTimer+0x94>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	68db      	ldr	r3, [r3, #12]
 8017718:	68db      	ldr	r3, [r3, #12]
 801771a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801771c:	697b      	ldr	r3, [r7, #20]
 801771e:	3304      	adds	r3, #4
 8017720:	4618      	mov	r0, r3
 8017722:	f7fe f84d 	bl	80157c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017726:	697b      	ldr	r3, [r7, #20]
 8017728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801772c:	f003 0304 	and.w	r3, r3, #4
 8017730:	2b00      	cmp	r3, #0
 8017732:	d022      	beq.n	801777a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	699a      	ldr	r2, [r3, #24]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	18d1      	adds	r1, r2, r3
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	6978      	ldr	r0, [r7, #20]
 8017742:	f000 f8d1 	bl	80178e8 <prvInsertTimerInActiveList>
 8017746:	4603      	mov	r3, r0
 8017748:	2b00      	cmp	r3, #0
 801774a:	d01f      	beq.n	801778c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801774c:	2300      	movs	r3, #0
 801774e:	9300      	str	r3, [sp, #0]
 8017750:	2300      	movs	r3, #0
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	2100      	movs	r1, #0
 8017756:	6978      	ldr	r0, [r7, #20]
 8017758:	f7ff ff88 	bl	801766c <xTimerGenericCommand>
 801775c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801775e:	693b      	ldr	r3, [r7, #16]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d113      	bne.n	801778c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017768:	f383 8811 	msr	BASEPRI, r3
 801776c:	f3bf 8f6f 	isb	sy
 8017770:	f3bf 8f4f 	dsb	sy
 8017774:	60fb      	str	r3, [r7, #12]
}
 8017776:	bf00      	nop
 8017778:	e7fe      	b.n	8017778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017780:	f023 0301 	bic.w	r3, r3, #1
 8017784:	b2da      	uxtb	r2, r3
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	6a1b      	ldr	r3, [r3, #32]
 8017790:	6978      	ldr	r0, [r7, #20]
 8017792:	4798      	blx	r3
}
 8017794:	bf00      	nop
 8017796:	3718      	adds	r7, #24
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	200024c4 	.word	0x200024c4

080177a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b084      	sub	sp, #16
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80177a8:	f107 0308 	add.w	r3, r7, #8
 80177ac:	4618      	mov	r0, r3
 80177ae:	f000 f857 	bl	8017860 <prvGetNextExpireTime>
 80177b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	4619      	mov	r1, r3
 80177b8:	68f8      	ldr	r0, [r7, #12]
 80177ba:	f000 f803 	bl	80177c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80177be:	f000 f8d5 	bl	801796c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80177c2:	e7f1      	b.n	80177a8 <prvTimerTask+0x8>

080177c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
 80177cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80177ce:	f7ff f9c5 	bl	8016b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80177d2:	f107 0308 	add.w	r3, r7, #8
 80177d6:	4618      	mov	r0, r3
 80177d8:	f000 f866 	bl	80178a8 <prvSampleTimeNow>
 80177dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d130      	bne.n	8017846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d10a      	bne.n	8017800 <prvProcessTimerOrBlockTask+0x3c>
 80177ea:	687a      	ldr	r2, [r7, #4]
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d806      	bhi.n	8017800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80177f2:	f7ff f9c1 	bl	8016b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80177f6:	68f9      	ldr	r1, [r7, #12]
 80177f8:	6878      	ldr	r0, [r7, #4]
 80177fa:	f7ff ff85 	bl	8017708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80177fe:	e024      	b.n	801784a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d008      	beq.n	8017818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017806:	4b13      	ldr	r3, [pc, #76]	; (8017854 <prvProcessTimerOrBlockTask+0x90>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d101      	bne.n	8017814 <prvProcessTimerOrBlockTask+0x50>
 8017810:	2301      	movs	r3, #1
 8017812:	e000      	b.n	8017816 <prvProcessTimerOrBlockTask+0x52>
 8017814:	2300      	movs	r3, #0
 8017816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017818:	4b0f      	ldr	r3, [pc, #60]	; (8017858 <prvProcessTimerOrBlockTask+0x94>)
 801781a:	6818      	ldr	r0, [r3, #0]
 801781c:	687a      	ldr	r2, [r7, #4]
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	1ad3      	subs	r3, r2, r3
 8017822:	683a      	ldr	r2, [r7, #0]
 8017824:	4619      	mov	r1, r3
 8017826:	f7fe fe55 	bl	80164d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801782a:	f7ff f9a5 	bl	8016b78 <xTaskResumeAll>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d10a      	bne.n	801784a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017834:	4b09      	ldr	r3, [pc, #36]	; (801785c <prvProcessTimerOrBlockTask+0x98>)
 8017836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801783a:	601a      	str	r2, [r3, #0]
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	f3bf 8f6f 	isb	sy
}
 8017844:	e001      	b.n	801784a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017846:	f7ff f997 	bl	8016b78 <xTaskResumeAll>
}
 801784a:	bf00      	nop
 801784c:	3710      	adds	r7, #16
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	200024c8 	.word	0x200024c8
 8017858:	200024cc 	.word	0x200024cc
 801785c:	e000ed04 	.word	0xe000ed04

08017860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017860:	b480      	push	{r7}
 8017862:	b085      	sub	sp, #20
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017868:	4b0e      	ldr	r3, [pc, #56]	; (80178a4 <prvGetNextExpireTime+0x44>)
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d101      	bne.n	8017876 <prvGetNextExpireTime+0x16>
 8017872:	2201      	movs	r2, #1
 8017874:	e000      	b.n	8017878 <prvGetNextExpireTime+0x18>
 8017876:	2200      	movs	r2, #0
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d105      	bne.n	8017890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017884:	4b07      	ldr	r3, [pc, #28]	; (80178a4 <prvGetNextExpireTime+0x44>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	68db      	ldr	r3, [r3, #12]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	60fb      	str	r3, [r7, #12]
 801788e:	e001      	b.n	8017894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017890:	2300      	movs	r3, #0
 8017892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017894:	68fb      	ldr	r3, [r7, #12]
}
 8017896:	4618      	mov	r0, r3
 8017898:	3714      	adds	r7, #20
 801789a:	46bd      	mov	sp, r7
 801789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a0:	4770      	bx	lr
 80178a2:	bf00      	nop
 80178a4:	200024c4 	.word	0x200024c4

080178a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80178b0:	f7ff fa04 	bl	8016cbc <xTaskGetTickCount>
 80178b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80178b6:	4b0b      	ldr	r3, [pc, #44]	; (80178e4 <prvSampleTimeNow+0x3c>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	429a      	cmp	r2, r3
 80178be:	d205      	bcs.n	80178cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80178c0:	f000 f936 	bl	8017b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2201      	movs	r2, #1
 80178c8:	601a      	str	r2, [r3, #0]
 80178ca:	e002      	b.n	80178d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	2200      	movs	r2, #0
 80178d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80178d2:	4a04      	ldr	r2, [pc, #16]	; (80178e4 <prvSampleTimeNow+0x3c>)
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80178d8:	68fb      	ldr	r3, [r7, #12]
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	200024d4 	.word	0x200024d4

080178e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b086      	sub	sp, #24
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	60b9      	str	r1, [r7, #8]
 80178f2:	607a      	str	r2, [r7, #4]
 80178f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80178f6:	2300      	movs	r3, #0
 80178f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	68ba      	ldr	r2, [r7, #8]
 80178fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	68fa      	ldr	r2, [r7, #12]
 8017904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017906:	68ba      	ldr	r2, [r7, #8]
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	429a      	cmp	r2, r3
 801790c:	d812      	bhi.n	8017934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801790e:	687a      	ldr	r2, [r7, #4]
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	1ad2      	subs	r2, r2, r3
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	699b      	ldr	r3, [r3, #24]
 8017918:	429a      	cmp	r2, r3
 801791a:	d302      	bcc.n	8017922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801791c:	2301      	movs	r3, #1
 801791e:	617b      	str	r3, [r7, #20]
 8017920:	e01b      	b.n	801795a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017922:	4b10      	ldr	r3, [pc, #64]	; (8017964 <prvInsertTimerInActiveList+0x7c>)
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	3304      	adds	r3, #4
 801792a:	4619      	mov	r1, r3
 801792c:	4610      	mov	r0, r2
 801792e:	f7fd ff0e 	bl	801574e <vListInsert>
 8017932:	e012      	b.n	801795a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017934:	687a      	ldr	r2, [r7, #4]
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	429a      	cmp	r2, r3
 801793a:	d206      	bcs.n	801794a <prvInsertTimerInActiveList+0x62>
 801793c:	68ba      	ldr	r2, [r7, #8]
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	429a      	cmp	r2, r3
 8017942:	d302      	bcc.n	801794a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017944:	2301      	movs	r3, #1
 8017946:	617b      	str	r3, [r7, #20]
 8017948:	e007      	b.n	801795a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801794a:	4b07      	ldr	r3, [pc, #28]	; (8017968 <prvInsertTimerInActiveList+0x80>)
 801794c:	681a      	ldr	r2, [r3, #0]
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	3304      	adds	r3, #4
 8017952:	4619      	mov	r1, r3
 8017954:	4610      	mov	r0, r2
 8017956:	f7fd fefa 	bl	801574e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801795a:	697b      	ldr	r3, [r7, #20]
}
 801795c:	4618      	mov	r0, r3
 801795e:	3718      	adds	r7, #24
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	200024c8 	.word	0x200024c8
 8017968:	200024c4 	.word	0x200024c4

0801796c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b08e      	sub	sp, #56	; 0x38
 8017970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017972:	e0ca      	b.n	8017b0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	2b00      	cmp	r3, #0
 8017978:	da18      	bge.n	80179ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801797a:	1d3b      	adds	r3, r7, #4
 801797c:	3304      	adds	r3, #4
 801797e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017982:	2b00      	cmp	r3, #0
 8017984:	d10a      	bne.n	801799c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801798a:	f383 8811 	msr	BASEPRI, r3
 801798e:	f3bf 8f6f 	isb	sy
 8017992:	f3bf 8f4f 	dsb	sy
 8017996:	61fb      	str	r3, [r7, #28]
}
 8017998:	bf00      	nop
 801799a:	e7fe      	b.n	801799a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179a2:	6850      	ldr	r0, [r2, #4]
 80179a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179a6:	6892      	ldr	r2, [r2, #8]
 80179a8:	4611      	mov	r1, r2
 80179aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	f2c0 80aa 	blt.w	8017b08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80179b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ba:	695b      	ldr	r3, [r3, #20]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d004      	beq.n	80179ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80179c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c2:	3304      	adds	r3, #4
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7fd fefb 	bl	80157c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80179ca:	463b      	mov	r3, r7
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7ff ff6b 	bl	80178a8 <prvSampleTimeNow>
 80179d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2b09      	cmp	r3, #9
 80179d8:	f200 8097 	bhi.w	8017b0a <prvProcessReceivedCommands+0x19e>
 80179dc:	a201      	add	r2, pc, #4	; (adr r2, 80179e4 <prvProcessReceivedCommands+0x78>)
 80179de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179e2:	bf00      	nop
 80179e4:	08017a0d 	.word	0x08017a0d
 80179e8:	08017a0d 	.word	0x08017a0d
 80179ec:	08017a0d 	.word	0x08017a0d
 80179f0:	08017a81 	.word	0x08017a81
 80179f4:	08017a95 	.word	0x08017a95
 80179f8:	08017adf 	.word	0x08017adf
 80179fc:	08017a0d 	.word	0x08017a0d
 8017a00:	08017a0d 	.word	0x08017a0d
 8017a04:	08017a81 	.word	0x08017a81
 8017a08:	08017a95 	.word	0x08017a95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a12:	f043 0301 	orr.w	r3, r3, #1
 8017a16:	b2da      	uxtb	r2, r3
 8017a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017a1e:	68ba      	ldr	r2, [r7, #8]
 8017a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a22:	699b      	ldr	r3, [r3, #24]
 8017a24:	18d1      	adds	r1, r2, r3
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a2c:	f7ff ff5c 	bl	80178e8 <prvInsertTimerInActiveList>
 8017a30:	4603      	mov	r3, r0
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d069      	beq.n	8017b0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a38:	6a1b      	ldr	r3, [r3, #32]
 8017a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a44:	f003 0304 	and.w	r3, r3, #4
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d05e      	beq.n	8017b0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017a4c:	68ba      	ldr	r2, [r7, #8]
 8017a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a50:	699b      	ldr	r3, [r3, #24]
 8017a52:	441a      	add	r2, r3
 8017a54:	2300      	movs	r3, #0
 8017a56:	9300      	str	r3, [sp, #0]
 8017a58:	2300      	movs	r3, #0
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a5e:	f7ff fe05 	bl	801766c <xTimerGenericCommand>
 8017a62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017a64:	6a3b      	ldr	r3, [r7, #32]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d14f      	bne.n	8017b0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a6e:	f383 8811 	msr	BASEPRI, r3
 8017a72:	f3bf 8f6f 	isb	sy
 8017a76:	f3bf 8f4f 	dsb	sy
 8017a7a:	61bb      	str	r3, [r7, #24]
}
 8017a7c:	bf00      	nop
 8017a7e:	e7fe      	b.n	8017a7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a86:	f023 0301 	bic.w	r3, r3, #1
 8017a8a:	b2da      	uxtb	r2, r3
 8017a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017a92:	e03a      	b.n	8017b0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a9a:	f043 0301 	orr.w	r3, r3, #1
 8017a9e:	b2da      	uxtb	r2, r3
 8017aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017aa6:	68ba      	ldr	r2, [r7, #8]
 8017aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aae:	699b      	ldr	r3, [r3, #24]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d10a      	bne.n	8017aca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ab8:	f383 8811 	msr	BASEPRI, r3
 8017abc:	f3bf 8f6f 	isb	sy
 8017ac0:	f3bf 8f4f 	dsb	sy
 8017ac4:	617b      	str	r3, [r7, #20]
}
 8017ac6:	bf00      	nop
 8017ac8:	e7fe      	b.n	8017ac8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017acc:	699a      	ldr	r2, [r3, #24]
 8017ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad0:	18d1      	adds	r1, r2, r3
 8017ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ad8:	f7ff ff06 	bl	80178e8 <prvInsertTimerInActiveList>
					break;
 8017adc:	e015      	b.n	8017b0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ae4:	f003 0302 	and.w	r3, r3, #2
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d103      	bne.n	8017af4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017aee:	f000 fbdf 	bl	80182b0 <vPortFree>
 8017af2:	e00a      	b.n	8017b0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017afa:	f023 0301 	bic.w	r3, r3, #1
 8017afe:	b2da      	uxtb	r2, r3
 8017b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017b06:	e000      	b.n	8017b0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017b08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017b0a:	4b08      	ldr	r3, [pc, #32]	; (8017b2c <prvProcessReceivedCommands+0x1c0>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	1d39      	adds	r1, r7, #4
 8017b10:	2200      	movs	r2, #0
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7fe f998 	bl	8015e48 <xQueueReceive>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	f47f af2a 	bne.w	8017974 <prvProcessReceivedCommands+0x8>
	}
}
 8017b20:	bf00      	nop
 8017b22:	bf00      	nop
 8017b24:	3730      	adds	r7, #48	; 0x30
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}
 8017b2a:	bf00      	nop
 8017b2c:	200024cc 	.word	0x200024cc

08017b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b088      	sub	sp, #32
 8017b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017b36:	e048      	b.n	8017bca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017b38:	4b2d      	ldr	r3, [pc, #180]	; (8017bf0 <prvSwitchTimerLists+0xc0>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	68db      	ldr	r3, [r3, #12]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b42:	4b2b      	ldr	r3, [pc, #172]	; (8017bf0 <prvSwitchTimerLists+0xc0>)
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	68db      	ldr	r3, [r3, #12]
 8017b48:	68db      	ldr	r3, [r3, #12]
 8017b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	3304      	adds	r3, #4
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7fd fe35 	bl	80157c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	6a1b      	ldr	r3, [r3, #32]
 8017b5a:	68f8      	ldr	r0, [r7, #12]
 8017b5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b64:	f003 0304 	and.w	r3, r3, #4
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d02e      	beq.n	8017bca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	699b      	ldr	r3, [r3, #24]
 8017b70:	693a      	ldr	r2, [r7, #16]
 8017b72:	4413      	add	r3, r2
 8017b74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017b76:	68ba      	ldr	r2, [r7, #8]
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	429a      	cmp	r2, r3
 8017b7c:	d90e      	bls.n	8017b9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	68ba      	ldr	r2, [r7, #8]
 8017b82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	68fa      	ldr	r2, [r7, #12]
 8017b88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017b8a:	4b19      	ldr	r3, [pc, #100]	; (8017bf0 <prvSwitchTimerLists+0xc0>)
 8017b8c:	681a      	ldr	r2, [r3, #0]
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	3304      	adds	r3, #4
 8017b92:	4619      	mov	r1, r3
 8017b94:	4610      	mov	r0, r2
 8017b96:	f7fd fdda 	bl	801574e <vListInsert>
 8017b9a:	e016      	b.n	8017bca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	9300      	str	r3, [sp, #0]
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	693a      	ldr	r2, [r7, #16]
 8017ba4:	2100      	movs	r1, #0
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	f7ff fd60 	bl	801766c <xTimerGenericCommand>
 8017bac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d10a      	bne.n	8017bca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bb8:	f383 8811 	msr	BASEPRI, r3
 8017bbc:	f3bf 8f6f 	isb	sy
 8017bc0:	f3bf 8f4f 	dsb	sy
 8017bc4:	603b      	str	r3, [r7, #0]
}
 8017bc6:	bf00      	nop
 8017bc8:	e7fe      	b.n	8017bc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017bca:	4b09      	ldr	r3, [pc, #36]	; (8017bf0 <prvSwitchTimerLists+0xc0>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d1b1      	bne.n	8017b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017bd4:	4b06      	ldr	r3, [pc, #24]	; (8017bf0 <prvSwitchTimerLists+0xc0>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017bda:	4b06      	ldr	r3, [pc, #24]	; (8017bf4 <prvSwitchTimerLists+0xc4>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4a04      	ldr	r2, [pc, #16]	; (8017bf0 <prvSwitchTimerLists+0xc0>)
 8017be0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017be2:	4a04      	ldr	r2, [pc, #16]	; (8017bf4 <prvSwitchTimerLists+0xc4>)
 8017be4:	697b      	ldr	r3, [r7, #20]
 8017be6:	6013      	str	r3, [r2, #0]
}
 8017be8:	bf00      	nop
 8017bea:	3718      	adds	r7, #24
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}
 8017bf0:	200024c4 	.word	0x200024c4
 8017bf4:	200024c8 	.word	0x200024c8

08017bf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b082      	sub	sp, #8
 8017bfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017bfe:	f000 f969 	bl	8017ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017c02:	4b15      	ldr	r3, [pc, #84]	; (8017c58 <prvCheckForValidListAndQueue+0x60>)
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d120      	bne.n	8017c4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017c0a:	4814      	ldr	r0, [pc, #80]	; (8017c5c <prvCheckForValidListAndQueue+0x64>)
 8017c0c:	f7fd fd4e 	bl	80156ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017c10:	4813      	ldr	r0, [pc, #76]	; (8017c60 <prvCheckForValidListAndQueue+0x68>)
 8017c12:	f7fd fd4b 	bl	80156ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017c16:	4b13      	ldr	r3, [pc, #76]	; (8017c64 <prvCheckForValidListAndQueue+0x6c>)
 8017c18:	4a10      	ldr	r2, [pc, #64]	; (8017c5c <prvCheckForValidListAndQueue+0x64>)
 8017c1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017c1c:	4b12      	ldr	r3, [pc, #72]	; (8017c68 <prvCheckForValidListAndQueue+0x70>)
 8017c1e:	4a10      	ldr	r2, [pc, #64]	; (8017c60 <prvCheckForValidListAndQueue+0x68>)
 8017c20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017c22:	2300      	movs	r3, #0
 8017c24:	9300      	str	r3, [sp, #0]
 8017c26:	4b11      	ldr	r3, [pc, #68]	; (8017c6c <prvCheckForValidListAndQueue+0x74>)
 8017c28:	4a11      	ldr	r2, [pc, #68]	; (8017c70 <prvCheckForValidListAndQueue+0x78>)
 8017c2a:	2110      	movs	r1, #16
 8017c2c:	200a      	movs	r0, #10
 8017c2e:	f7fd fe59 	bl	80158e4 <xQueueGenericCreateStatic>
 8017c32:	4603      	mov	r3, r0
 8017c34:	4a08      	ldr	r2, [pc, #32]	; (8017c58 <prvCheckForValidListAndQueue+0x60>)
 8017c36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017c38:	4b07      	ldr	r3, [pc, #28]	; (8017c58 <prvCheckForValidListAndQueue+0x60>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d005      	beq.n	8017c4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017c40:	4b05      	ldr	r3, [pc, #20]	; (8017c58 <prvCheckForValidListAndQueue+0x60>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	490b      	ldr	r1, [pc, #44]	; (8017c74 <prvCheckForValidListAndQueue+0x7c>)
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7fe fc12 	bl	8016470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017c4c:	f000 f972 	bl	8017f34 <vPortExitCritical>
}
 8017c50:	bf00      	nop
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}
 8017c56:	bf00      	nop
 8017c58:	200024cc 	.word	0x200024cc
 8017c5c:	2000249c 	.word	0x2000249c
 8017c60:	200024b0 	.word	0x200024b0
 8017c64:	200024c4 	.word	0x200024c4
 8017c68:	200024c8 	.word	0x200024c8
 8017c6c:	20002578 	.word	0x20002578
 8017c70:	200024d8 	.word	0x200024d8
 8017c74:	0801a884 	.word	0x0801a884

08017c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017c78:	b480      	push	{r7}
 8017c7a:	b085      	sub	sp, #20
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	3b04      	subs	r3, #4
 8017c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	3b04      	subs	r3, #4
 8017c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	f023 0201 	bic.w	r2, r3, #1
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	3b04      	subs	r3, #4
 8017ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017ca8:	4a0c      	ldr	r2, [pc, #48]	; (8017cdc <pxPortInitialiseStack+0x64>)
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	3b14      	subs	r3, #20
 8017cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017cb4:	687a      	ldr	r2, [r7, #4]
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	3b04      	subs	r3, #4
 8017cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	f06f 0202 	mvn.w	r2, #2
 8017cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	3b20      	subs	r3, #32
 8017ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017cce:	68fb      	ldr	r3, [r7, #12]
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3714      	adds	r7, #20
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cda:	4770      	bx	lr
 8017cdc:	08017ce1 	.word	0x08017ce1

08017ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017ce0:	b480      	push	{r7}
 8017ce2:	b085      	sub	sp, #20
 8017ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017cea:	4b12      	ldr	r3, [pc, #72]	; (8017d34 <prvTaskExitError+0x54>)
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cf2:	d00a      	beq.n	8017d0a <prvTaskExitError+0x2a>
	__asm volatile
 8017cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cf8:	f383 8811 	msr	BASEPRI, r3
 8017cfc:	f3bf 8f6f 	isb	sy
 8017d00:	f3bf 8f4f 	dsb	sy
 8017d04:	60fb      	str	r3, [r7, #12]
}
 8017d06:	bf00      	nop
 8017d08:	e7fe      	b.n	8017d08 <prvTaskExitError+0x28>
	__asm volatile
 8017d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d0e:	f383 8811 	msr	BASEPRI, r3
 8017d12:	f3bf 8f6f 	isb	sy
 8017d16:	f3bf 8f4f 	dsb	sy
 8017d1a:	60bb      	str	r3, [r7, #8]
}
 8017d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017d1e:	bf00      	nop
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d0fc      	beq.n	8017d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017d26:	bf00      	nop
 8017d28:	bf00      	nop
 8017d2a:	3714      	adds	r7, #20
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d32:	4770      	bx	lr
 8017d34:	20001440 	.word	0x20001440
	...

08017d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017d40:	4b07      	ldr	r3, [pc, #28]	; (8017d60 <pxCurrentTCBConst2>)
 8017d42:	6819      	ldr	r1, [r3, #0]
 8017d44:	6808      	ldr	r0, [r1, #0]
 8017d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4a:	f380 8809 	msr	PSP, r0
 8017d4e:	f3bf 8f6f 	isb	sy
 8017d52:	f04f 0000 	mov.w	r0, #0
 8017d56:	f380 8811 	msr	BASEPRI, r0
 8017d5a:	4770      	bx	lr
 8017d5c:	f3af 8000 	nop.w

08017d60 <pxCurrentTCBConst2>:
 8017d60:	20001f9c 	.word	0x20001f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017d64:	bf00      	nop
 8017d66:	bf00      	nop

08017d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017d68:	4808      	ldr	r0, [pc, #32]	; (8017d8c <prvPortStartFirstTask+0x24>)
 8017d6a:	6800      	ldr	r0, [r0, #0]
 8017d6c:	6800      	ldr	r0, [r0, #0]
 8017d6e:	f380 8808 	msr	MSP, r0
 8017d72:	f04f 0000 	mov.w	r0, #0
 8017d76:	f380 8814 	msr	CONTROL, r0
 8017d7a:	b662      	cpsie	i
 8017d7c:	b661      	cpsie	f
 8017d7e:	f3bf 8f4f 	dsb	sy
 8017d82:	f3bf 8f6f 	isb	sy
 8017d86:	df00      	svc	0
 8017d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017d8a:	bf00      	nop
 8017d8c:	e000ed08 	.word	0xe000ed08

08017d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b086      	sub	sp, #24
 8017d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017d96:	4b46      	ldr	r3, [pc, #280]	; (8017eb0 <xPortStartScheduler+0x120>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4a46      	ldr	r2, [pc, #280]	; (8017eb4 <xPortStartScheduler+0x124>)
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d10a      	bne.n	8017db6 <xPortStartScheduler+0x26>
	__asm volatile
 8017da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017da4:	f383 8811 	msr	BASEPRI, r3
 8017da8:	f3bf 8f6f 	isb	sy
 8017dac:	f3bf 8f4f 	dsb	sy
 8017db0:	613b      	str	r3, [r7, #16]
}
 8017db2:	bf00      	nop
 8017db4:	e7fe      	b.n	8017db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017db6:	4b3e      	ldr	r3, [pc, #248]	; (8017eb0 <xPortStartScheduler+0x120>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	4a3f      	ldr	r2, [pc, #252]	; (8017eb8 <xPortStartScheduler+0x128>)
 8017dbc:	4293      	cmp	r3, r2
 8017dbe:	d10a      	bne.n	8017dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8017dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dc4:	f383 8811 	msr	BASEPRI, r3
 8017dc8:	f3bf 8f6f 	isb	sy
 8017dcc:	f3bf 8f4f 	dsb	sy
 8017dd0:	60fb      	str	r3, [r7, #12]
}
 8017dd2:	bf00      	nop
 8017dd4:	e7fe      	b.n	8017dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017dd6:	4b39      	ldr	r3, [pc, #228]	; (8017ebc <xPortStartScheduler+0x12c>)
 8017dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017dda:	697b      	ldr	r3, [r7, #20]
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017de2:	697b      	ldr	r3, [r7, #20]
 8017de4:	22ff      	movs	r2, #255	; 0xff
 8017de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017de8:	697b      	ldr	r3, [r7, #20]
 8017dea:	781b      	ldrb	r3, [r3, #0]
 8017dec:	b2db      	uxtb	r3, r3
 8017dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017df0:	78fb      	ldrb	r3, [r7, #3]
 8017df2:	b2db      	uxtb	r3, r3
 8017df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017df8:	b2da      	uxtb	r2, r3
 8017dfa:	4b31      	ldr	r3, [pc, #196]	; (8017ec0 <xPortStartScheduler+0x130>)
 8017dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017dfe:	4b31      	ldr	r3, [pc, #196]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e00:	2207      	movs	r2, #7
 8017e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e04:	e009      	b.n	8017e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017e06:	4b2f      	ldr	r3, [pc, #188]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	4a2d      	ldr	r2, [pc, #180]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017e10:	78fb      	ldrb	r3, [r7, #3]
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	005b      	lsls	r3, r3, #1
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e1a:	78fb      	ldrb	r3, [r7, #3]
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e22:	2b80      	cmp	r3, #128	; 0x80
 8017e24:	d0ef      	beq.n	8017e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017e26:	4b27      	ldr	r3, [pc, #156]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	f1c3 0307 	rsb	r3, r3, #7
 8017e2e:	2b04      	cmp	r3, #4
 8017e30:	d00a      	beq.n	8017e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8017e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e36:	f383 8811 	msr	BASEPRI, r3
 8017e3a:	f3bf 8f6f 	isb	sy
 8017e3e:	f3bf 8f4f 	dsb	sy
 8017e42:	60bb      	str	r3, [r7, #8]
}
 8017e44:	bf00      	nop
 8017e46:	e7fe      	b.n	8017e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017e48:	4b1e      	ldr	r3, [pc, #120]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	021b      	lsls	r3, r3, #8
 8017e4e:	4a1d      	ldr	r2, [pc, #116]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017e52:	4b1c      	ldr	r3, [pc, #112]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017e5a:	4a1a      	ldr	r2, [pc, #104]	; (8017ec4 <xPortStartScheduler+0x134>)
 8017e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	b2da      	uxtb	r2, r3
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017e66:	4b18      	ldr	r3, [pc, #96]	; (8017ec8 <xPortStartScheduler+0x138>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	4a17      	ldr	r2, [pc, #92]	; (8017ec8 <xPortStartScheduler+0x138>)
 8017e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017e72:	4b15      	ldr	r3, [pc, #84]	; (8017ec8 <xPortStartScheduler+0x138>)
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	4a14      	ldr	r2, [pc, #80]	; (8017ec8 <xPortStartScheduler+0x138>)
 8017e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017e7e:	f000 f8dd 	bl	801803c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017e82:	4b12      	ldr	r3, [pc, #72]	; (8017ecc <xPortStartScheduler+0x13c>)
 8017e84:	2200      	movs	r2, #0
 8017e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017e88:	f000 f8fc 	bl	8018084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017e8c:	4b10      	ldr	r3, [pc, #64]	; (8017ed0 <xPortStartScheduler+0x140>)
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	4a0f      	ldr	r2, [pc, #60]	; (8017ed0 <xPortStartScheduler+0x140>)
 8017e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017e98:	f7ff ff66 	bl	8017d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017e9c:	f7fe ffee 	bl	8016e7c <vTaskSwitchContext>
	prvTaskExitError();
 8017ea0:	f7ff ff1e 	bl	8017ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017ea4:	2300      	movs	r3, #0
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3718      	adds	r7, #24
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}
 8017eae:	bf00      	nop
 8017eb0:	e000ed00 	.word	0xe000ed00
 8017eb4:	410fc271 	.word	0x410fc271
 8017eb8:	410fc270 	.word	0x410fc270
 8017ebc:	e000e400 	.word	0xe000e400
 8017ec0:	200025c8 	.word	0x200025c8
 8017ec4:	200025cc 	.word	0x200025cc
 8017ec8:	e000ed20 	.word	0xe000ed20
 8017ecc:	20001440 	.word	0x20001440
 8017ed0:	e000ef34 	.word	0xe000ef34

08017ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017ed4:	b480      	push	{r7}
 8017ed6:	b083      	sub	sp, #12
 8017ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8017eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ede:	f383 8811 	msr	BASEPRI, r3
 8017ee2:	f3bf 8f6f 	isb	sy
 8017ee6:	f3bf 8f4f 	dsb	sy
 8017eea:	607b      	str	r3, [r7, #4]
}
 8017eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017eee:	4b0f      	ldr	r3, [pc, #60]	; (8017f2c <vPortEnterCritical+0x58>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	4a0d      	ldr	r2, [pc, #52]	; (8017f2c <vPortEnterCritical+0x58>)
 8017ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017ef8:	4b0c      	ldr	r3, [pc, #48]	; (8017f2c <vPortEnterCritical+0x58>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d10f      	bne.n	8017f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017f00:	4b0b      	ldr	r3, [pc, #44]	; (8017f30 <vPortEnterCritical+0x5c>)
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d00a      	beq.n	8017f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8017f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f0e:	f383 8811 	msr	BASEPRI, r3
 8017f12:	f3bf 8f6f 	isb	sy
 8017f16:	f3bf 8f4f 	dsb	sy
 8017f1a:	603b      	str	r3, [r7, #0]
}
 8017f1c:	bf00      	nop
 8017f1e:	e7fe      	b.n	8017f1e <vPortEnterCritical+0x4a>
	}
}
 8017f20:	bf00      	nop
 8017f22:	370c      	adds	r7, #12
 8017f24:	46bd      	mov	sp, r7
 8017f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2a:	4770      	bx	lr
 8017f2c:	20001440 	.word	0x20001440
 8017f30:	e000ed04 	.word	0xe000ed04

08017f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017f3a:	4b12      	ldr	r3, [pc, #72]	; (8017f84 <vPortExitCritical+0x50>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d10a      	bne.n	8017f58 <vPortExitCritical+0x24>
	__asm volatile
 8017f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f46:	f383 8811 	msr	BASEPRI, r3
 8017f4a:	f3bf 8f6f 	isb	sy
 8017f4e:	f3bf 8f4f 	dsb	sy
 8017f52:	607b      	str	r3, [r7, #4]
}
 8017f54:	bf00      	nop
 8017f56:	e7fe      	b.n	8017f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017f58:	4b0a      	ldr	r3, [pc, #40]	; (8017f84 <vPortExitCritical+0x50>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	3b01      	subs	r3, #1
 8017f5e:	4a09      	ldr	r2, [pc, #36]	; (8017f84 <vPortExitCritical+0x50>)
 8017f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017f62:	4b08      	ldr	r3, [pc, #32]	; (8017f84 <vPortExitCritical+0x50>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d105      	bne.n	8017f76 <vPortExitCritical+0x42>
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	f383 8811 	msr	BASEPRI, r3
}
 8017f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017f76:	bf00      	nop
 8017f78:	370c      	adds	r7, #12
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f80:	4770      	bx	lr
 8017f82:	bf00      	nop
 8017f84:	20001440 	.word	0x20001440
	...

08017f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017f90:	f3ef 8009 	mrs	r0, PSP
 8017f94:	f3bf 8f6f 	isb	sy
 8017f98:	4b15      	ldr	r3, [pc, #84]	; (8017ff0 <pxCurrentTCBConst>)
 8017f9a:	681a      	ldr	r2, [r3, #0]
 8017f9c:	f01e 0f10 	tst.w	lr, #16
 8017fa0:	bf08      	it	eq
 8017fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017faa:	6010      	str	r0, [r2, #0]
 8017fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017fb4:	f380 8811 	msr	BASEPRI, r0
 8017fb8:	f3bf 8f4f 	dsb	sy
 8017fbc:	f3bf 8f6f 	isb	sy
 8017fc0:	f7fe ff5c 	bl	8016e7c <vTaskSwitchContext>
 8017fc4:	f04f 0000 	mov.w	r0, #0
 8017fc8:	f380 8811 	msr	BASEPRI, r0
 8017fcc:	bc09      	pop	{r0, r3}
 8017fce:	6819      	ldr	r1, [r3, #0]
 8017fd0:	6808      	ldr	r0, [r1, #0]
 8017fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd6:	f01e 0f10 	tst.w	lr, #16
 8017fda:	bf08      	it	eq
 8017fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017fe0:	f380 8809 	msr	PSP, r0
 8017fe4:	f3bf 8f6f 	isb	sy
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop
 8017fec:	f3af 8000 	nop.w

08017ff0 <pxCurrentTCBConst>:
 8017ff0:	20001f9c 	.word	0x20001f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017ff4:	bf00      	nop
 8017ff6:	bf00      	nop

08017ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b082      	sub	sp, #8
 8017ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8017ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018002:	f383 8811 	msr	BASEPRI, r3
 8018006:	f3bf 8f6f 	isb	sy
 801800a:	f3bf 8f4f 	dsb	sy
 801800e:	607b      	str	r3, [r7, #4]
}
 8018010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018012:	f7fe fe75 	bl	8016d00 <xTaskIncrementTick>
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	d003      	beq.n	8018024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801801c:	4b06      	ldr	r3, [pc, #24]	; (8018038 <xPortSysTickHandler+0x40>)
 801801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018022:	601a      	str	r2, [r3, #0]
 8018024:	2300      	movs	r3, #0
 8018026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	f383 8811 	msr	BASEPRI, r3
}
 801802e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018030:	bf00      	nop
 8018032:	3708      	adds	r7, #8
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	e000ed04 	.word	0xe000ed04

0801803c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801803c:	b480      	push	{r7}
 801803e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018040:	4b0b      	ldr	r3, [pc, #44]	; (8018070 <vPortSetupTimerInterrupt+0x34>)
 8018042:	2200      	movs	r2, #0
 8018044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018046:	4b0b      	ldr	r3, [pc, #44]	; (8018074 <vPortSetupTimerInterrupt+0x38>)
 8018048:	2200      	movs	r2, #0
 801804a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801804c:	4b0a      	ldr	r3, [pc, #40]	; (8018078 <vPortSetupTimerInterrupt+0x3c>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4a0a      	ldr	r2, [pc, #40]	; (801807c <vPortSetupTimerInterrupt+0x40>)
 8018052:	fba2 2303 	umull	r2, r3, r2, r3
 8018056:	099b      	lsrs	r3, r3, #6
 8018058:	4a09      	ldr	r2, [pc, #36]	; (8018080 <vPortSetupTimerInterrupt+0x44>)
 801805a:	3b01      	subs	r3, #1
 801805c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801805e:	4b04      	ldr	r3, [pc, #16]	; (8018070 <vPortSetupTimerInterrupt+0x34>)
 8018060:	2207      	movs	r2, #7
 8018062:	601a      	str	r2, [r3, #0]
}
 8018064:	bf00      	nop
 8018066:	46bd      	mov	sp, r7
 8018068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop
 8018070:	e000e010 	.word	0xe000e010
 8018074:	e000e018 	.word	0xe000e018
 8018078:	20000080 	.word	0x20000080
 801807c:	10624dd3 	.word	0x10624dd3
 8018080:	e000e014 	.word	0xe000e014

08018084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018094 <vPortEnableVFP+0x10>
 8018088:	6801      	ldr	r1, [r0, #0]
 801808a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801808e:	6001      	str	r1, [r0, #0]
 8018090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018092:	bf00      	nop
 8018094:	e000ed88 	.word	0xe000ed88

08018098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018098:	b480      	push	{r7}
 801809a:	b085      	sub	sp, #20
 801809c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801809e:	f3ef 8305 	mrs	r3, IPSR
 80180a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	2b0f      	cmp	r3, #15
 80180a8:	d914      	bls.n	80180d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80180aa:	4a17      	ldr	r2, [pc, #92]	; (8018108 <vPortValidateInterruptPriority+0x70>)
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	4413      	add	r3, r2
 80180b0:	781b      	ldrb	r3, [r3, #0]
 80180b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80180b4:	4b15      	ldr	r3, [pc, #84]	; (801810c <vPortValidateInterruptPriority+0x74>)
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	7afa      	ldrb	r2, [r7, #11]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d20a      	bcs.n	80180d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80180be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c2:	f383 8811 	msr	BASEPRI, r3
 80180c6:	f3bf 8f6f 	isb	sy
 80180ca:	f3bf 8f4f 	dsb	sy
 80180ce:	607b      	str	r3, [r7, #4]
}
 80180d0:	bf00      	nop
 80180d2:	e7fe      	b.n	80180d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80180d4:	4b0e      	ldr	r3, [pc, #56]	; (8018110 <vPortValidateInterruptPriority+0x78>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80180dc:	4b0d      	ldr	r3, [pc, #52]	; (8018114 <vPortValidateInterruptPriority+0x7c>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d90a      	bls.n	80180fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80180e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e8:	f383 8811 	msr	BASEPRI, r3
 80180ec:	f3bf 8f6f 	isb	sy
 80180f0:	f3bf 8f4f 	dsb	sy
 80180f4:	603b      	str	r3, [r7, #0]
}
 80180f6:	bf00      	nop
 80180f8:	e7fe      	b.n	80180f8 <vPortValidateInterruptPriority+0x60>
	}
 80180fa:	bf00      	nop
 80180fc:	3714      	adds	r7, #20
 80180fe:	46bd      	mov	sp, r7
 8018100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018104:	4770      	bx	lr
 8018106:	bf00      	nop
 8018108:	e000e3f0 	.word	0xe000e3f0
 801810c:	200025c8 	.word	0x200025c8
 8018110:	e000ed0c 	.word	0xe000ed0c
 8018114:	200025cc 	.word	0x200025cc

08018118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b08a      	sub	sp, #40	; 0x28
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018120:	2300      	movs	r3, #0
 8018122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018124:	f7fe fd1a 	bl	8016b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018128:	4b5b      	ldr	r3, [pc, #364]	; (8018298 <pvPortMalloc+0x180>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d101      	bne.n	8018134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018130:	f000 f920 	bl	8018374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018134:	4b59      	ldr	r3, [pc, #356]	; (801829c <pvPortMalloc+0x184>)
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	4013      	ands	r3, r2
 801813c:	2b00      	cmp	r3, #0
 801813e:	f040 8093 	bne.w	8018268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d01d      	beq.n	8018184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018148:	2208      	movs	r2, #8
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	4413      	add	r3, r2
 801814e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f003 0307 	and.w	r3, r3, #7
 8018156:	2b00      	cmp	r3, #0
 8018158:	d014      	beq.n	8018184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	f023 0307 	bic.w	r3, r3, #7
 8018160:	3308      	adds	r3, #8
 8018162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	f003 0307 	and.w	r3, r3, #7
 801816a:	2b00      	cmp	r3, #0
 801816c:	d00a      	beq.n	8018184 <pvPortMalloc+0x6c>
	__asm volatile
 801816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018172:	f383 8811 	msr	BASEPRI, r3
 8018176:	f3bf 8f6f 	isb	sy
 801817a:	f3bf 8f4f 	dsb	sy
 801817e:	617b      	str	r3, [r7, #20]
}
 8018180:	bf00      	nop
 8018182:	e7fe      	b.n	8018182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d06e      	beq.n	8018268 <pvPortMalloc+0x150>
 801818a:	4b45      	ldr	r3, [pc, #276]	; (80182a0 <pvPortMalloc+0x188>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	429a      	cmp	r2, r3
 8018192:	d869      	bhi.n	8018268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018194:	4b43      	ldr	r3, [pc, #268]	; (80182a4 <pvPortMalloc+0x18c>)
 8018196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018198:	4b42      	ldr	r3, [pc, #264]	; (80182a4 <pvPortMalloc+0x18c>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801819e:	e004      	b.n	80181aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80181a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80181a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	687a      	ldr	r2, [r7, #4]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d903      	bls.n	80181bc <pvPortMalloc+0xa4>
 80181b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d1f1      	bne.n	80181a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80181bc:	4b36      	ldr	r3, [pc, #216]	; (8018298 <pvPortMalloc+0x180>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d050      	beq.n	8018268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80181c6:	6a3b      	ldr	r3, [r7, #32]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	2208      	movs	r2, #8
 80181cc:	4413      	add	r3, r2
 80181ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	681a      	ldr	r2, [r3, #0]
 80181d4:	6a3b      	ldr	r3, [r7, #32]
 80181d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80181d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181da:	685a      	ldr	r2, [r3, #4]
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	1ad2      	subs	r2, r2, r3
 80181e0:	2308      	movs	r3, #8
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d91f      	bls.n	8018228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80181e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	4413      	add	r3, r2
 80181ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	f003 0307 	and.w	r3, r3, #7
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d00a      	beq.n	8018210 <pvPortMalloc+0xf8>
	__asm volatile
 80181fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181fe:	f383 8811 	msr	BASEPRI, r3
 8018202:	f3bf 8f6f 	isb	sy
 8018206:	f3bf 8f4f 	dsb	sy
 801820a:	613b      	str	r3, [r7, #16]
}
 801820c:	bf00      	nop
 801820e:	e7fe      	b.n	801820e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018212:	685a      	ldr	r2, [r3, #4]
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	1ad2      	subs	r2, r2, r3
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801821e:	687a      	ldr	r2, [r7, #4]
 8018220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018222:	69b8      	ldr	r0, [r7, #24]
 8018224:	f000 f90a 	bl	801843c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018228:	4b1d      	ldr	r3, [pc, #116]	; (80182a0 <pvPortMalloc+0x188>)
 801822a:	681a      	ldr	r2, [r3, #0]
 801822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822e:	685b      	ldr	r3, [r3, #4]
 8018230:	1ad3      	subs	r3, r2, r3
 8018232:	4a1b      	ldr	r2, [pc, #108]	; (80182a0 <pvPortMalloc+0x188>)
 8018234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018236:	4b1a      	ldr	r3, [pc, #104]	; (80182a0 <pvPortMalloc+0x188>)
 8018238:	681a      	ldr	r2, [r3, #0]
 801823a:	4b1b      	ldr	r3, [pc, #108]	; (80182a8 <pvPortMalloc+0x190>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	429a      	cmp	r2, r3
 8018240:	d203      	bcs.n	801824a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018242:	4b17      	ldr	r3, [pc, #92]	; (80182a0 <pvPortMalloc+0x188>)
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	4a18      	ldr	r2, [pc, #96]	; (80182a8 <pvPortMalloc+0x190>)
 8018248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801824c:	685a      	ldr	r2, [r3, #4]
 801824e:	4b13      	ldr	r3, [pc, #76]	; (801829c <pvPortMalloc+0x184>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	431a      	orrs	r2, r3
 8018254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825a:	2200      	movs	r2, #0
 801825c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801825e:	4b13      	ldr	r3, [pc, #76]	; (80182ac <pvPortMalloc+0x194>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	3301      	adds	r3, #1
 8018264:	4a11      	ldr	r2, [pc, #68]	; (80182ac <pvPortMalloc+0x194>)
 8018266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018268:	f7fe fc86 	bl	8016b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801826c:	69fb      	ldr	r3, [r7, #28]
 801826e:	f003 0307 	and.w	r3, r3, #7
 8018272:	2b00      	cmp	r3, #0
 8018274:	d00a      	beq.n	801828c <pvPortMalloc+0x174>
	__asm volatile
 8018276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801827a:	f383 8811 	msr	BASEPRI, r3
 801827e:	f3bf 8f6f 	isb	sy
 8018282:	f3bf 8f4f 	dsb	sy
 8018286:	60fb      	str	r3, [r7, #12]
}
 8018288:	bf00      	nop
 801828a:	e7fe      	b.n	801828a <pvPortMalloc+0x172>
	return pvReturn;
 801828c:	69fb      	ldr	r3, [r7, #28]
}
 801828e:	4618      	mov	r0, r3
 8018290:	3728      	adds	r7, #40	; 0x28
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	2001ac78 	.word	0x2001ac78
 801829c:	2001ac8c 	.word	0x2001ac8c
 80182a0:	2001ac7c 	.word	0x2001ac7c
 80182a4:	2001ac70 	.word	0x2001ac70
 80182a8:	2001ac80 	.word	0x2001ac80
 80182ac:	2001ac84 	.word	0x2001ac84

080182b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b086      	sub	sp, #24
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d04d      	beq.n	801835e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80182c2:	2308      	movs	r3, #8
 80182c4:	425b      	negs	r3, r3
 80182c6:	697a      	ldr	r2, [r7, #20]
 80182c8:	4413      	add	r3, r2
 80182ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80182d0:	693b      	ldr	r3, [r7, #16]
 80182d2:	685a      	ldr	r2, [r3, #4]
 80182d4:	4b24      	ldr	r3, [pc, #144]	; (8018368 <vPortFree+0xb8>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4013      	ands	r3, r2
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d10a      	bne.n	80182f4 <vPortFree+0x44>
	__asm volatile
 80182de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e2:	f383 8811 	msr	BASEPRI, r3
 80182e6:	f3bf 8f6f 	isb	sy
 80182ea:	f3bf 8f4f 	dsb	sy
 80182ee:	60fb      	str	r3, [r7, #12]
}
 80182f0:	bf00      	nop
 80182f2:	e7fe      	b.n	80182f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80182f4:	693b      	ldr	r3, [r7, #16]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d00a      	beq.n	8018312 <vPortFree+0x62>
	__asm volatile
 80182fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018300:	f383 8811 	msr	BASEPRI, r3
 8018304:	f3bf 8f6f 	isb	sy
 8018308:	f3bf 8f4f 	dsb	sy
 801830c:	60bb      	str	r3, [r7, #8]
}
 801830e:	bf00      	nop
 8018310:	e7fe      	b.n	8018310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018312:	693b      	ldr	r3, [r7, #16]
 8018314:	685a      	ldr	r2, [r3, #4]
 8018316:	4b14      	ldr	r3, [pc, #80]	; (8018368 <vPortFree+0xb8>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	4013      	ands	r3, r2
 801831c:	2b00      	cmp	r3, #0
 801831e:	d01e      	beq.n	801835e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018320:	693b      	ldr	r3, [r7, #16]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d11a      	bne.n	801835e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018328:	693b      	ldr	r3, [r7, #16]
 801832a:	685a      	ldr	r2, [r3, #4]
 801832c:	4b0e      	ldr	r3, [pc, #56]	; (8018368 <vPortFree+0xb8>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	43db      	mvns	r3, r3
 8018332:	401a      	ands	r2, r3
 8018334:	693b      	ldr	r3, [r7, #16]
 8018336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018338:	f7fe fc10 	bl	8016b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801833c:	693b      	ldr	r3, [r7, #16]
 801833e:	685a      	ldr	r2, [r3, #4]
 8018340:	4b0a      	ldr	r3, [pc, #40]	; (801836c <vPortFree+0xbc>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	4413      	add	r3, r2
 8018346:	4a09      	ldr	r2, [pc, #36]	; (801836c <vPortFree+0xbc>)
 8018348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801834a:	6938      	ldr	r0, [r7, #16]
 801834c:	f000 f876 	bl	801843c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018350:	4b07      	ldr	r3, [pc, #28]	; (8018370 <vPortFree+0xc0>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	3301      	adds	r3, #1
 8018356:	4a06      	ldr	r2, [pc, #24]	; (8018370 <vPortFree+0xc0>)
 8018358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801835a:	f7fe fc0d 	bl	8016b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801835e:	bf00      	nop
 8018360:	3718      	adds	r7, #24
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	2001ac8c 	.word	0x2001ac8c
 801836c:	2001ac7c 	.word	0x2001ac7c
 8018370:	2001ac88 	.word	0x2001ac88

08018374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801837a:	4b29      	ldr	r3, [pc, #164]	; (8018420 <prvHeapInit+0xac>)
 801837c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801837e:	4b29      	ldr	r3, [pc, #164]	; (8018424 <prvHeapInit+0xb0>)
 8018380:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	f003 0307 	and.w	r3, r3, #7
 8018388:	2b00      	cmp	r3, #0
 801838a:	d00c      	beq.n	80183a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	3307      	adds	r3, #7
 8018390:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	f023 0307 	bic.w	r3, r3, #7
 8018398:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801839a:	68ba      	ldr	r2, [r7, #8]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	1ad3      	subs	r3, r2, r3
 80183a0:	4a20      	ldr	r2, [pc, #128]	; (8018424 <prvHeapInit+0xb0>)
 80183a2:	4413      	add	r3, r2
 80183a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80183aa:	4a1f      	ldr	r2, [pc, #124]	; (8018428 <prvHeapInit+0xb4>)
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80183b0:	4b1d      	ldr	r3, [pc, #116]	; (8018428 <prvHeapInit+0xb4>)
 80183b2:	2200      	movs	r2, #0
 80183b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	68ba      	ldr	r2, [r7, #8]
 80183ba:	4413      	add	r3, r2
 80183bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80183be:	2208      	movs	r2, #8
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	1a9b      	subs	r3, r3, r2
 80183c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	f023 0307 	bic.w	r3, r3, #7
 80183cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	4a16      	ldr	r2, [pc, #88]	; (801842c <prvHeapInit+0xb8>)
 80183d2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80183d4:	4b15      	ldr	r3, [pc, #84]	; (801842c <prvHeapInit+0xb8>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	2200      	movs	r2, #0
 80183da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80183dc:	4b13      	ldr	r3, [pc, #76]	; (801842c <prvHeapInit+0xb8>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	2200      	movs	r2, #0
 80183e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	68fa      	ldr	r2, [r7, #12]
 80183ec:	1ad2      	subs	r2, r2, r3
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80183f2:	4b0e      	ldr	r3, [pc, #56]	; (801842c <prvHeapInit+0xb8>)
 80183f4:	681a      	ldr	r2, [r3, #0]
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	685b      	ldr	r3, [r3, #4]
 80183fe:	4a0c      	ldr	r2, [pc, #48]	; (8018430 <prvHeapInit+0xbc>)
 8018400:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018402:	683b      	ldr	r3, [r7, #0]
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	4a0b      	ldr	r2, [pc, #44]	; (8018434 <prvHeapInit+0xc0>)
 8018408:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801840a:	4b0b      	ldr	r3, [pc, #44]	; (8018438 <prvHeapInit+0xc4>)
 801840c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018410:	601a      	str	r2, [r3, #0]
}
 8018412:	bf00      	nop
 8018414:	3714      	adds	r7, #20
 8018416:	46bd      	mov	sp, r7
 8018418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841c:	4770      	bx	lr
 801841e:	bf00      	nop
 8018420:	000186a0 	.word	0x000186a0
 8018424:	200025d0 	.word	0x200025d0
 8018428:	2001ac70 	.word	0x2001ac70
 801842c:	2001ac78 	.word	0x2001ac78
 8018430:	2001ac80 	.word	0x2001ac80
 8018434:	2001ac7c 	.word	0x2001ac7c
 8018438:	2001ac8c 	.word	0x2001ac8c

0801843c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801843c:	b480      	push	{r7}
 801843e:	b085      	sub	sp, #20
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018444:	4b28      	ldr	r3, [pc, #160]	; (80184e8 <prvInsertBlockIntoFreeList+0xac>)
 8018446:	60fb      	str	r3, [r7, #12]
 8018448:	e002      	b.n	8018450 <prvInsertBlockIntoFreeList+0x14>
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	60fb      	str	r3, [r7, #12]
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	687a      	ldr	r2, [r7, #4]
 8018456:	429a      	cmp	r2, r3
 8018458:	d8f7      	bhi.n	801844a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	68ba      	ldr	r2, [r7, #8]
 8018464:	4413      	add	r3, r2
 8018466:	687a      	ldr	r2, [r7, #4]
 8018468:	429a      	cmp	r2, r3
 801846a:	d108      	bne.n	801847e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	685a      	ldr	r2, [r3, #4]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	441a      	add	r2, r3
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	685b      	ldr	r3, [r3, #4]
 8018486:	68ba      	ldr	r2, [r7, #8]
 8018488:	441a      	add	r2, r3
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	429a      	cmp	r2, r3
 8018490:	d118      	bne.n	80184c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	681a      	ldr	r2, [r3, #0]
 8018496:	4b15      	ldr	r3, [pc, #84]	; (80184ec <prvInsertBlockIntoFreeList+0xb0>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	429a      	cmp	r2, r3
 801849c:	d00d      	beq.n	80184ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	685a      	ldr	r2, [r3, #4]
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	685b      	ldr	r3, [r3, #4]
 80184a8:	441a      	add	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	681a      	ldr	r2, [r3, #0]
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	601a      	str	r2, [r3, #0]
 80184b8:	e008      	b.n	80184cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80184ba:	4b0c      	ldr	r3, [pc, #48]	; (80184ec <prvInsertBlockIntoFreeList+0xb0>)
 80184bc:	681a      	ldr	r2, [r3, #0]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	601a      	str	r2, [r3, #0]
 80184c2:	e003      	b.n	80184cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	681a      	ldr	r2, [r3, #0]
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80184cc:	68fa      	ldr	r2, [r7, #12]
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d002      	beq.n	80184da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80184da:	bf00      	nop
 80184dc:	3714      	adds	r7, #20
 80184de:	46bd      	mov	sp, r7
 80184e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e4:	4770      	bx	lr
 80184e6:	bf00      	nop
 80184e8:	2001ac70 	.word	0x2001ac70
 80184ec:	2001ac78 	.word	0x2001ac78

080184f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80184f0:	b480      	push	{r7}
 80184f2:	b083      	sub	sp, #12
 80184f4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80184f6:	4b24      	ldr	r3, [pc, #144]	; (8018588 <_DoInit+0x98>)
 80184f8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2203      	movs	r2, #3
 80184fe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2203      	movs	r2, #3
 8018504:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	4a20      	ldr	r2, [pc, #128]	; (801858c <_DoInit+0x9c>)
 801850a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	4a20      	ldr	r2, [pc, #128]	; (8018590 <_DoInit+0xa0>)
 8018510:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018518:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	2200      	movs	r2, #0
 801851e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2200      	movs	r2, #0
 8018524:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2200      	movs	r2, #0
 801852a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	4a17      	ldr	r2, [pc, #92]	; (801858c <_DoInit+0x9c>)
 8018530:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	4a17      	ldr	r2, [pc, #92]	; (8018594 <_DoInit+0xa4>)
 8018536:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2210      	movs	r2, #16
 801853c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	2200      	movs	r2, #0
 8018542:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2200      	movs	r2, #0
 8018548:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	2200      	movs	r2, #0
 801854e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	3307      	adds	r3, #7
 8018554:	4a10      	ldr	r2, [pc, #64]	; (8018598 <_DoInit+0xa8>)
 8018556:	6810      	ldr	r0, [r2, #0]
 8018558:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801855a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	4a0e      	ldr	r2, [pc, #56]	; (801859c <_DoInit+0xac>)
 8018562:	6810      	ldr	r0, [r2, #0]
 8018564:	6018      	str	r0, [r3, #0]
 8018566:	8891      	ldrh	r1, [r2, #4]
 8018568:	7992      	ldrb	r2, [r2, #6]
 801856a:	8099      	strh	r1, [r3, #4]
 801856c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 801856e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2220      	movs	r2, #32
 8018576:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8018578:	f3bf 8f5f 	dmb	sy
}
 801857c:	bf00      	nop
 801857e:	370c      	adds	r7, #12
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr
 8018588:	2001e8f8 	.word	0x2001e8f8
 801858c:	0801a88c 	.word	0x0801a88c
 8018590:	2001ac90 	.word	0x2001ac90
 8018594:	2001b090 	.word	0x2001b090
 8018598:	0801a898 	.word	0x0801a898
 801859c:	0801a89c 	.word	0x0801a89c

080185a0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b08c      	sub	sp, #48	; 0x30
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80185ac:	4b3e      	ldr	r3, [pc, #248]	; (80186a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80185ae:	623b      	str	r3, [r7, #32]
 80185b0:	6a3b      	ldr	r3, [r7, #32]
 80185b2:	781b      	ldrb	r3, [r3, #0]
 80185b4:	b2db      	uxtb	r3, r3
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d101      	bne.n	80185be <SEGGER_RTT_ReadNoLock+0x1e>
 80185ba:	f7ff ff99 	bl	80184f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80185be:	68fa      	ldr	r2, [r7, #12]
 80185c0:	4613      	mov	r3, r2
 80185c2:	005b      	lsls	r3, r3, #1
 80185c4:	4413      	add	r3, r2
 80185c6:	00db      	lsls	r3, r3, #3
 80185c8:	3360      	adds	r3, #96	; 0x60
 80185ca:	4a37      	ldr	r2, [pc, #220]	; (80186a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80185cc:	4413      	add	r3, r2
 80185ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	691b      	ldr	r3, [r3, #16]
 80185d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80185da:	69fb      	ldr	r3, [r7, #28]
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80185e0:	2300      	movs	r3, #0
 80185e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80185e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185e6:	69bb      	ldr	r3, [r7, #24]
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d92b      	bls.n	8018644 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80185ec:	69fb      	ldr	r3, [r7, #28]
 80185ee:	689a      	ldr	r2, [r3, #8]
 80185f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80185f6:	697a      	ldr	r2, [r7, #20]
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	4293      	cmp	r3, r2
 80185fc:	bf28      	it	cs
 80185fe:	4613      	movcs	r3, r2
 8018600:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8018602:	69fb      	ldr	r3, [r7, #28]
 8018604:	685a      	ldr	r2, [r3, #4]
 8018606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018608:	4413      	add	r3, r2
 801860a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 801860c:	697a      	ldr	r2, [r7, #20]
 801860e:	6939      	ldr	r1, [r7, #16]
 8018610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018612:	f001 fa9b 	bl	8019b4c <memcpy>
    NumBytesRead += NumBytesRem;
 8018616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	4413      	add	r3, r2
 801861c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 801861e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018620:	697b      	ldr	r3, [r7, #20]
 8018622:	4413      	add	r3, r2
 8018624:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8018626:	687a      	ldr	r2, [r7, #4]
 8018628:	697b      	ldr	r3, [r7, #20]
 801862a:	1ad3      	subs	r3, r2, r3
 801862c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 801862e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	4413      	add	r3, r2
 8018634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8018636:	69fb      	ldr	r3, [r7, #28]
 8018638:	689b      	ldr	r3, [r3, #8]
 801863a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801863c:	429a      	cmp	r2, r3
 801863e:	d101      	bne.n	8018644 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8018640:	2300      	movs	r3, #0
 8018642:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8018644:	69ba      	ldr	r2, [r7, #24]
 8018646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018648:	1ad3      	subs	r3, r2, r3
 801864a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 801864c:	697a      	ldr	r2, [r7, #20]
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	4293      	cmp	r3, r2
 8018652:	bf28      	it	cs
 8018654:	4613      	movcs	r3, r2
 8018656:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d019      	beq.n	8018692 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 801865e:	69fb      	ldr	r3, [r7, #28]
 8018660:	685a      	ldr	r2, [r3, #4]
 8018662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018664:	4413      	add	r3, r2
 8018666:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8018668:	697a      	ldr	r2, [r7, #20]
 801866a:	6939      	ldr	r1, [r7, #16]
 801866c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801866e:	f001 fa6d 	bl	8019b4c <memcpy>
    NumBytesRead += NumBytesRem;
 8018672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	4413      	add	r3, r2
 8018678:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 801867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	4413      	add	r3, r2
 8018680:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8018682:	687a      	ldr	r2, [r7, #4]
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	1ad3      	subs	r3, r2, r3
 8018688:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 801868a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	4413      	add	r3, r2
 8018690:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8018692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018694:	2b00      	cmp	r3, #0
 8018696:	d002      	beq.n	801869e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8018698:	69fb      	ldr	r3, [r7, #28]
 801869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801869c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 801869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3730      	adds	r7, #48	; 0x30
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	2001e8f8 	.word	0x2001e8f8

080186ac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b088      	sub	sp, #32
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	60f8      	str	r0, [r7, #12]
 80186b4:	60b9      	str	r1, [r7, #8]
 80186b6:	607a      	str	r2, [r7, #4]
 80186b8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80186ba:	4b3d      	ldr	r3, [pc, #244]	; (80187b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80186bc:	61bb      	str	r3, [r7, #24]
 80186be:	69bb      	ldr	r3, [r7, #24]
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	b2db      	uxtb	r3, r3
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d101      	bne.n	80186cc <SEGGER_RTT_AllocUpBuffer+0x20>
 80186c8:	f7ff ff12 	bl	80184f0 <_DoInit>
  SEGGER_RTT_LOCK();
 80186cc:	f3ef 8311 	mrs	r3, BASEPRI
 80186d0:	f04f 0120 	mov.w	r1, #32
 80186d4:	f381 8811 	msr	BASEPRI, r1
 80186d8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80186da:	4b35      	ldr	r3, [pc, #212]	; (80187b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80186dc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80186e2:	6939      	ldr	r1, [r7, #16]
 80186e4:	69fb      	ldr	r3, [r7, #28]
 80186e6:	1c5a      	adds	r2, r3, #1
 80186e8:	4613      	mov	r3, r2
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	4413      	add	r3, r2
 80186ee:	00db      	lsls	r3, r3, #3
 80186f0:	440b      	add	r3, r1
 80186f2:	3304      	adds	r3, #4
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d008      	beq.n	801870c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80186fa:	69fb      	ldr	r3, [r7, #28]
 80186fc:	3301      	adds	r3, #1
 80186fe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	691b      	ldr	r3, [r3, #16]
 8018704:	69fa      	ldr	r2, [r7, #28]
 8018706:	429a      	cmp	r2, r3
 8018708:	dbeb      	blt.n	80186e2 <SEGGER_RTT_AllocUpBuffer+0x36>
 801870a:	e000      	b.n	801870e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 801870c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	691b      	ldr	r3, [r3, #16]
 8018712:	69fa      	ldr	r2, [r7, #28]
 8018714:	429a      	cmp	r2, r3
 8018716:	da3f      	bge.n	8018798 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8018718:	6939      	ldr	r1, [r7, #16]
 801871a:	69fb      	ldr	r3, [r7, #28]
 801871c:	1c5a      	adds	r2, r3, #1
 801871e:	4613      	mov	r3, r2
 8018720:	005b      	lsls	r3, r3, #1
 8018722:	4413      	add	r3, r2
 8018724:	00db      	lsls	r3, r3, #3
 8018726:	440b      	add	r3, r1
 8018728:	68fa      	ldr	r2, [r7, #12]
 801872a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 801872c:	6939      	ldr	r1, [r7, #16]
 801872e:	69fb      	ldr	r3, [r7, #28]
 8018730:	1c5a      	adds	r2, r3, #1
 8018732:	4613      	mov	r3, r2
 8018734:	005b      	lsls	r3, r3, #1
 8018736:	4413      	add	r3, r2
 8018738:	00db      	lsls	r3, r3, #3
 801873a:	440b      	add	r3, r1
 801873c:	3304      	adds	r3, #4
 801873e:	68ba      	ldr	r2, [r7, #8]
 8018740:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8018742:	6939      	ldr	r1, [r7, #16]
 8018744:	69fa      	ldr	r2, [r7, #28]
 8018746:	4613      	mov	r3, r2
 8018748:	005b      	lsls	r3, r3, #1
 801874a:	4413      	add	r3, r2
 801874c:	00db      	lsls	r3, r3, #3
 801874e:	440b      	add	r3, r1
 8018750:	3320      	adds	r3, #32
 8018752:	687a      	ldr	r2, [r7, #4]
 8018754:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8018756:	6939      	ldr	r1, [r7, #16]
 8018758:	69fa      	ldr	r2, [r7, #28]
 801875a:	4613      	mov	r3, r2
 801875c:	005b      	lsls	r3, r3, #1
 801875e:	4413      	add	r3, r2
 8018760:	00db      	lsls	r3, r3, #3
 8018762:	440b      	add	r3, r1
 8018764:	3328      	adds	r3, #40	; 0x28
 8018766:	2200      	movs	r2, #0
 8018768:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 801876a:	6939      	ldr	r1, [r7, #16]
 801876c:	69fa      	ldr	r2, [r7, #28]
 801876e:	4613      	mov	r3, r2
 8018770:	005b      	lsls	r3, r3, #1
 8018772:	4413      	add	r3, r2
 8018774:	00db      	lsls	r3, r3, #3
 8018776:	440b      	add	r3, r1
 8018778:	3324      	adds	r3, #36	; 0x24
 801877a:	2200      	movs	r2, #0
 801877c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 801877e:	6939      	ldr	r1, [r7, #16]
 8018780:	69fa      	ldr	r2, [r7, #28]
 8018782:	4613      	mov	r3, r2
 8018784:	005b      	lsls	r3, r3, #1
 8018786:	4413      	add	r3, r2
 8018788:	00db      	lsls	r3, r3, #3
 801878a:	440b      	add	r3, r1
 801878c:	332c      	adds	r3, #44	; 0x2c
 801878e:	683a      	ldr	r2, [r7, #0]
 8018790:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8018792:	f3bf 8f5f 	dmb	sy
 8018796:	e002      	b.n	801879e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8018798:	f04f 33ff 	mov.w	r3, #4294967295
 801879c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80187a4:	69fb      	ldr	r3, [r7, #28]
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	3720      	adds	r7, #32
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}
 80187ae:	bf00      	nop
 80187b0:	2001e8f8 	.word	0x2001e8f8

080187b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b08a      	sub	sp, #40	; 0x28
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
 80187c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80187c2:	4b21      	ldr	r3, [pc, #132]	; (8018848 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80187c4:	623b      	str	r3, [r7, #32]
 80187c6:	6a3b      	ldr	r3, [r7, #32]
 80187c8:	781b      	ldrb	r3, [r3, #0]
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d101      	bne.n	80187d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80187d0:	f7ff fe8e 	bl	80184f0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80187d4:	4b1c      	ldr	r3, [pc, #112]	; (8018848 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80187d6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	2b02      	cmp	r3, #2
 80187dc:	d82c      	bhi.n	8018838 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80187de:	f3ef 8311 	mrs	r3, BASEPRI
 80187e2:	f04f 0120 	mov.w	r1, #32
 80187e6:	f381 8811 	msr	BASEPRI, r1
 80187ea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80187ec:	68fa      	ldr	r2, [r7, #12]
 80187ee:	4613      	mov	r3, r2
 80187f0:	005b      	lsls	r3, r3, #1
 80187f2:	4413      	add	r3, r2
 80187f4:	00db      	lsls	r3, r3, #3
 80187f6:	3360      	adds	r3, #96	; 0x60
 80187f8:	69fa      	ldr	r2, [r7, #28]
 80187fa:	4413      	add	r3, r2
 80187fc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d00e      	beq.n	8018822 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8018804:	697b      	ldr	r3, [r7, #20]
 8018806:	68ba      	ldr	r2, [r7, #8]
 8018808:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 801880a:	697b      	ldr	r3, [r7, #20]
 801880c:	687a      	ldr	r2, [r7, #4]
 801880e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8018810:	697b      	ldr	r3, [r7, #20]
 8018812:	683a      	ldr	r2, [r7, #0]
 8018814:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	2200      	movs	r2, #0
 801881a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	2200      	movs	r2, #0
 8018820:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8018822:	697b      	ldr	r3, [r7, #20]
 8018824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018826:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8018828:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 801882c:	69bb      	ldr	r3, [r7, #24]
 801882e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8018832:	2300      	movs	r3, #0
 8018834:	627b      	str	r3, [r7, #36]	; 0x24
 8018836:	e002      	b.n	801883e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8018838:	f04f 33ff 	mov.w	r3, #4294967295
 801883c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 801883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018840:	4618      	mov	r0, r3
 8018842:	3728      	adds	r7, #40	; 0x28
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}
 8018848:	2001e8f8 	.word	0x2001e8f8

0801884c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 801884c:	b480      	push	{r7}
 801884e:	b087      	sub	sp, #28
 8018850:	af00      	add	r7, sp, #0
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8018858:	2300      	movs	r3, #0
 801885a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d00f      	beq.n	8018882 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8018862:	e002      	b.n	801886a <_EncodeStr+0x1e>
      Len++;
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	3301      	adds	r3, #1
 8018868:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 801886a:	68ba      	ldr	r2, [r7, #8]
 801886c:	693b      	ldr	r3, [r7, #16]
 801886e:	4413      	add	r3, r2
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d1f6      	bne.n	8018864 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8018876:	693a      	ldr	r2, [r7, #16]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	429a      	cmp	r2, r3
 801887c:	d901      	bls.n	8018882 <_EncodeStr+0x36>
      Len = Limit;
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8018882:	693b      	ldr	r3, [r7, #16]
 8018884:	2bfe      	cmp	r3, #254	; 0xfe
 8018886:	d806      	bhi.n	8018896 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	1c5a      	adds	r2, r3, #1
 801888c:	60fa      	str	r2, [r7, #12]
 801888e:	693a      	ldr	r2, [r7, #16]
 8018890:	b2d2      	uxtb	r2, r2
 8018892:	701a      	strb	r2, [r3, #0]
 8018894:	e011      	b.n	80188ba <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	1c5a      	adds	r2, r3, #1
 801889a:	60fa      	str	r2, [r7, #12]
 801889c:	22ff      	movs	r2, #255	; 0xff
 801889e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	1c5a      	adds	r2, r3, #1
 80188a4:	60fa      	str	r2, [r7, #12]
 80188a6:	693a      	ldr	r2, [r7, #16]
 80188a8:	b2d2      	uxtb	r2, r2
 80188aa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	0a19      	lsrs	r1, r3, #8
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	1c5a      	adds	r2, r3, #1
 80188b4:	60fa      	str	r2, [r7, #12]
 80188b6:	b2ca      	uxtb	r2, r1
 80188b8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80188ba:	2300      	movs	r3, #0
 80188bc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80188be:	e00a      	b.n	80188d6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80188c0:	68ba      	ldr	r2, [r7, #8]
 80188c2:	1c53      	adds	r3, r2, #1
 80188c4:	60bb      	str	r3, [r7, #8]
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	1c59      	adds	r1, r3, #1
 80188ca:	60f9      	str	r1, [r7, #12]
 80188cc:	7812      	ldrb	r2, [r2, #0]
 80188ce:	701a      	strb	r2, [r3, #0]
    n++;
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	3301      	adds	r3, #1
 80188d4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80188d6:	697a      	ldr	r2, [r7, #20]
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d3f0      	bcc.n	80188c0 <_EncodeStr+0x74>
  }
  return pPayload;
 80188de:	68fb      	ldr	r3, [r7, #12]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	371c      	adds	r7, #28
 80188e4:	46bd      	mov	sp, r7
 80188e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ea:	4770      	bx	lr

080188ec <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80188ec:	b480      	push	{r7}
 80188ee:	b083      	sub	sp, #12
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	3304      	adds	r3, #4
}
 80188f8:	4618      	mov	r0, r3
 80188fa:	370c      	adds	r7, #12
 80188fc:	46bd      	mov	sp, r7
 80188fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018902:	4770      	bx	lr

08018904 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8018904:	b580      	push	{r7, lr}
 8018906:	b082      	sub	sp, #8
 8018908:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801890a:	4b36      	ldr	r3, [pc, #216]	; (80189e4 <_HandleIncomingPacket+0xe0>)
 801890c:	7e1b      	ldrb	r3, [r3, #24]
 801890e:	4618      	mov	r0, r3
 8018910:	1cfb      	adds	r3, r7, #3
 8018912:	2201      	movs	r2, #1
 8018914:	4619      	mov	r1, r3
 8018916:	f7ff fe43 	bl	80185a0 <SEGGER_RTT_ReadNoLock>
 801891a:	4603      	mov	r3, r0
 801891c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2b00      	cmp	r3, #0
 8018922:	dd54      	ble.n	80189ce <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8018924:	78fb      	ldrb	r3, [r7, #3]
 8018926:	2b80      	cmp	r3, #128	; 0x80
 8018928:	d032      	beq.n	8018990 <_HandleIncomingPacket+0x8c>
 801892a:	2b80      	cmp	r3, #128	; 0x80
 801892c:	dc42      	bgt.n	80189b4 <_HandleIncomingPacket+0xb0>
 801892e:	2b07      	cmp	r3, #7
 8018930:	dc16      	bgt.n	8018960 <_HandleIncomingPacket+0x5c>
 8018932:	2b00      	cmp	r3, #0
 8018934:	dd3e      	ble.n	80189b4 <_HandleIncomingPacket+0xb0>
 8018936:	3b01      	subs	r3, #1
 8018938:	2b06      	cmp	r3, #6
 801893a:	d83b      	bhi.n	80189b4 <_HandleIncomingPacket+0xb0>
 801893c:	a201      	add	r2, pc, #4	; (adr r2, 8018944 <_HandleIncomingPacket+0x40>)
 801893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018942:	bf00      	nop
 8018944:	08018967 	.word	0x08018967
 8018948:	0801896d 	.word	0x0801896d
 801894c:	08018973 	.word	0x08018973
 8018950:	08018979 	.word	0x08018979
 8018954:	0801897f 	.word	0x0801897f
 8018958:	08018985 	.word	0x08018985
 801895c:	0801898b 	.word	0x0801898b
 8018960:	2b7f      	cmp	r3, #127	; 0x7f
 8018962:	d036      	beq.n	80189d2 <_HandleIncomingPacket+0xce>
 8018964:	e026      	b.n	80189b4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8018966:	f000 fba7 	bl	80190b8 <SEGGER_SYSVIEW_Start>
      break;
 801896a:	e037      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 801896c:	f000 fc5e 	bl	801922c <SEGGER_SYSVIEW_Stop>
      break;
 8018970:	e034      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8018972:	f000 fe37 	bl	80195e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8018976:	e031      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8018978:	f000 fdfc 	bl	8019574 <SEGGER_SYSVIEW_SendTaskList>
      break;
 801897c:	e02e      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801897e:	f000 fc7b 	bl	8019278 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8018982:	e02b      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8018984:	f000 fff0 	bl	8019968 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8018988:	e028      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 801898a:	f000 ffcf 	bl	801992c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801898e:	e025      	b.n	80189dc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8018990:	4b14      	ldr	r3, [pc, #80]	; (80189e4 <_HandleIncomingPacket+0xe0>)
 8018992:	7e1b      	ldrb	r3, [r3, #24]
 8018994:	4618      	mov	r0, r3
 8018996:	1cfb      	adds	r3, r7, #3
 8018998:	2201      	movs	r2, #1
 801899a:	4619      	mov	r1, r3
 801899c:	f7ff fe00 	bl	80185a0 <SEGGER_RTT_ReadNoLock>
 80189a0:	4603      	mov	r3, r0
 80189a2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	dd15      	ble.n	80189d6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80189aa:	78fb      	ldrb	r3, [r7, #3]
 80189ac:	4618      	mov	r0, r3
 80189ae:	f000 ff3d 	bl	801982c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80189b2:	e010      	b.n	80189d6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80189b4:	78fb      	ldrb	r3, [r7, #3]
 80189b6:	b25b      	sxtb	r3, r3
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	da0e      	bge.n	80189da <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80189bc:	4b09      	ldr	r3, [pc, #36]	; (80189e4 <_HandleIncomingPacket+0xe0>)
 80189be:	7e1b      	ldrb	r3, [r3, #24]
 80189c0:	4618      	mov	r0, r3
 80189c2:	1cfb      	adds	r3, r7, #3
 80189c4:	2201      	movs	r2, #1
 80189c6:	4619      	mov	r1, r3
 80189c8:	f7ff fdea 	bl	80185a0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80189cc:	e005      	b.n	80189da <_HandleIncomingPacket+0xd6>
    }
  }
 80189ce:	bf00      	nop
 80189d0:	e004      	b.n	80189dc <_HandleIncomingPacket+0xd8>
      break;
 80189d2:	bf00      	nop
 80189d4:	e002      	b.n	80189dc <_HandleIncomingPacket+0xd8>
      break;
 80189d6:	bf00      	nop
 80189d8:	e000      	b.n	80189dc <_HandleIncomingPacket+0xd8>
      break;
 80189da:	bf00      	nop
}
 80189dc:	bf00      	nop
 80189de:	3708      	adds	r7, #8
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}
 80189e4:	2001b4a8 	.word	0x2001b4a8

080189e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b08c      	sub	sp, #48	; 0x30
 80189ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80189ee:	2301      	movs	r3, #1
 80189f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80189f2:	1d3b      	adds	r3, r7, #4
 80189f4:	3301      	adds	r3, #1
 80189f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80189f8:	69fb      	ldr	r3, [r7, #28]
 80189fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80189fc:	4b31      	ldr	r3, [pc, #196]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 80189fe:	695b      	ldr	r3, [r3, #20]
 8018a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a02:	e00b      	b.n	8018a1c <_TrySendOverflowPacket+0x34>
 8018a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a06:	b2da      	uxtb	r2, r3
 8018a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a0a:	1c59      	adds	r1, r3, #1
 8018a0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018a12:	b2d2      	uxtb	r2, r2
 8018a14:	701a      	strb	r2, [r3, #0]
 8018a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a18:	09db      	lsrs	r3, r3, #7
 8018a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8018a20:	d8f0      	bhi.n	8018a04 <_TrySendOverflowPacket+0x1c>
 8018a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a24:	1c5a      	adds	r2, r3, #1
 8018a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018a2a:	b2d2      	uxtb	r2, r2
 8018a2c:	701a      	strb	r2, [r3, #0]
 8018a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a30:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018a32:	4b25      	ldr	r3, [pc, #148]	; (8018ac8 <_TrySendOverflowPacket+0xe0>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8018a38:	4b22      	ldr	r3, [pc, #136]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018a3a:	68db      	ldr	r3, [r3, #12]
 8018a3c:	69ba      	ldr	r2, [r7, #24]
 8018a3e:	1ad3      	subs	r3, r2, r3
 8018a40:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8018a42:	69fb      	ldr	r3, [r7, #28]
 8018a44:	627b      	str	r3, [r7, #36]	; 0x24
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	623b      	str	r3, [r7, #32]
 8018a4a:	e00b      	b.n	8018a64 <_TrySendOverflowPacket+0x7c>
 8018a4c:	6a3b      	ldr	r3, [r7, #32]
 8018a4e:	b2da      	uxtb	r2, r3
 8018a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a52:	1c59      	adds	r1, r3, #1
 8018a54:	6279      	str	r1, [r7, #36]	; 0x24
 8018a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018a5a:	b2d2      	uxtb	r2, r2
 8018a5c:	701a      	strb	r2, [r3, #0]
 8018a5e:	6a3b      	ldr	r3, [r7, #32]
 8018a60:	09db      	lsrs	r3, r3, #7
 8018a62:	623b      	str	r3, [r7, #32]
 8018a64:	6a3b      	ldr	r3, [r7, #32]
 8018a66:	2b7f      	cmp	r3, #127	; 0x7f
 8018a68:	d8f0      	bhi.n	8018a4c <_TrySendOverflowPacket+0x64>
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6c:	1c5a      	adds	r2, r3, #1
 8018a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8018a70:	6a3a      	ldr	r2, [r7, #32]
 8018a72:	b2d2      	uxtb	r2, r2
 8018a74:	701a      	strb	r2, [r3, #0]
 8018a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a78:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8018a7a:	4b12      	ldr	r3, [pc, #72]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018a7c:	785b      	ldrb	r3, [r3, #1]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	1d3b      	adds	r3, r7, #4
 8018a82:	69fa      	ldr	r2, [r7, #28]
 8018a84:	1ad3      	subs	r3, r2, r3
 8018a86:	461a      	mov	r2, r3
 8018a88:	1d3b      	adds	r3, r7, #4
 8018a8a:	4619      	mov	r1, r3
 8018a8c:	f7e7 fba0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8018a90:	4603      	mov	r3, r0
 8018a92:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8018a94:	693b      	ldr	r3, [r7, #16]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d009      	beq.n	8018aae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8018a9a:	4a0a      	ldr	r2, [pc, #40]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018a9c:	69bb      	ldr	r3, [r7, #24]
 8018a9e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8018aa0:	4b08      	ldr	r3, [pc, #32]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	3b01      	subs	r3, #1
 8018aa6:	b2da      	uxtb	r2, r3
 8018aa8:	4b06      	ldr	r3, [pc, #24]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018aaa:	701a      	strb	r2, [r3, #0]
 8018aac:	e004      	b.n	8018ab8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8018aae:	4b05      	ldr	r3, [pc, #20]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018ab0:	695b      	ldr	r3, [r3, #20]
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	4a03      	ldr	r2, [pc, #12]	; (8018ac4 <_TrySendOverflowPacket+0xdc>)
 8018ab6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8018ab8:	693b      	ldr	r3, [r7, #16]
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3730      	adds	r7, #48	; 0x30
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	2001b4a8 	.word	0x2001b4a8
 8018ac8:	e0001004 	.word	0xe0001004

08018acc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b08a      	sub	sp, #40	; 0x28
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	60f8      	str	r0, [r7, #12]
 8018ad4:	60b9      	str	r1, [r7, #8]
 8018ad6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8018ad8:	4b6c      	ldr	r3, [pc, #432]	; (8018c8c <_SendPacket+0x1c0>)
 8018ada:	781b      	ldrb	r3, [r3, #0]
 8018adc:	2b01      	cmp	r3, #1
 8018ade:	d010      	beq.n	8018b02 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8018ae0:	4b6a      	ldr	r3, [pc, #424]	; (8018c8c <_SendPacket+0x1c0>)
 8018ae2:	781b      	ldrb	r3, [r3, #0]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	f000 80a3 	beq.w	8018c30 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8018aea:	4b68      	ldr	r3, [pc, #416]	; (8018c8c <_SendPacket+0x1c0>)
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	2b02      	cmp	r3, #2
 8018af0:	d109      	bne.n	8018b06 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8018af2:	f7ff ff79 	bl	80189e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8018af6:	4b65      	ldr	r3, [pc, #404]	; (8018c8c <_SendPacket+0x1c0>)
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	f040 809a 	bne.w	8018c34 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8018b00:	e001      	b.n	8018b06 <_SendPacket+0x3a>
    goto Send;
 8018b02:	bf00      	nop
 8018b04:	e000      	b.n	8018b08 <_SendPacket+0x3c>
Send:
 8018b06:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2b1f      	cmp	r3, #31
 8018b0c:	d809      	bhi.n	8018b22 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8018b0e:	4b5f      	ldr	r3, [pc, #380]	; (8018c8c <_SendPacket+0x1c0>)
 8018b10:	69da      	ldr	r2, [r3, #28]
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	fa22 f303 	lsr.w	r3, r2, r3
 8018b18:	f003 0301 	and.w	r3, r3, #1
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f040 808b 	bne.w	8018c38 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2b17      	cmp	r3, #23
 8018b26:	d807      	bhi.n	8018b38 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	3b01      	subs	r3, #1
 8018b2c:	60fb      	str	r3, [r7, #12]
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	b2da      	uxtb	r2, r3
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	701a      	strb	r2, [r3, #0]
 8018b36:	e03d      	b.n	8018bb4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8018b38:	68ba      	ldr	r2, [r7, #8]
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	1ad3      	subs	r3, r2, r3
 8018b3e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8018b40:	69fb      	ldr	r3, [r7, #28]
 8018b42:	2b7f      	cmp	r3, #127	; 0x7f
 8018b44:	d912      	bls.n	8018b6c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8018b46:	69fb      	ldr	r3, [r7, #28]
 8018b48:	09da      	lsrs	r2, r3, #7
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	3b01      	subs	r3, #1
 8018b4e:	60fb      	str	r3, [r7, #12]
 8018b50:	b2d2      	uxtb	r2, r2
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8018b56:	69fb      	ldr	r3, [r7, #28]
 8018b58:	b2db      	uxtb	r3, r3
 8018b5a:	68fa      	ldr	r2, [r7, #12]
 8018b5c:	3a01      	subs	r2, #1
 8018b5e:	60fa      	str	r2, [r7, #12]
 8018b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018b64:	b2da      	uxtb	r2, r3
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	701a      	strb	r2, [r3, #0]
 8018b6a:	e006      	b.n	8018b7a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	3b01      	subs	r3, #1
 8018b70:	60fb      	str	r3, [r7, #12]
 8018b72:	69fb      	ldr	r3, [r7, #28]
 8018b74:	b2da      	uxtb	r2, r3
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8018b7e:	d912      	bls.n	8018ba6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	09da      	lsrs	r2, r3, #7
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	3b01      	subs	r3, #1
 8018b88:	60fb      	str	r3, [r7, #12]
 8018b8a:	b2d2      	uxtb	r2, r2
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	68fa      	ldr	r2, [r7, #12]
 8018b96:	3a01      	subs	r2, #1
 8018b98:	60fa      	str	r2, [r7, #12]
 8018b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018b9e:	b2da      	uxtb	r2, r3
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	701a      	strb	r2, [r3, #0]
 8018ba4:	e006      	b.n	8018bb4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	3b01      	subs	r3, #1
 8018baa:	60fb      	str	r3, [r7, #12]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	b2da      	uxtb	r2, r3
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018bb4:	4b36      	ldr	r3, [pc, #216]	; (8018c90 <_SendPacket+0x1c4>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8018bba:	4b34      	ldr	r3, [pc, #208]	; (8018c8c <_SendPacket+0x1c0>)
 8018bbc:	68db      	ldr	r3, [r3, #12]
 8018bbe:	69ba      	ldr	r2, [r7, #24]
 8018bc0:	1ad3      	subs	r3, r2, r3
 8018bc2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	623b      	str	r3, [r7, #32]
 8018bcc:	e00b      	b.n	8018be6 <_SendPacket+0x11a>
 8018bce:	6a3b      	ldr	r3, [r7, #32]
 8018bd0:	b2da      	uxtb	r2, r3
 8018bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd4:	1c59      	adds	r1, r3, #1
 8018bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8018bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018bdc:	b2d2      	uxtb	r2, r2
 8018bde:	701a      	strb	r2, [r3, #0]
 8018be0:	6a3b      	ldr	r3, [r7, #32]
 8018be2:	09db      	lsrs	r3, r3, #7
 8018be4:	623b      	str	r3, [r7, #32]
 8018be6:	6a3b      	ldr	r3, [r7, #32]
 8018be8:	2b7f      	cmp	r3, #127	; 0x7f
 8018bea:	d8f0      	bhi.n	8018bce <_SendPacket+0x102>
 8018bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bee:	1c5a      	adds	r2, r3, #1
 8018bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8018bf2:	6a3a      	ldr	r2, [r7, #32]
 8018bf4:	b2d2      	uxtb	r2, r2
 8018bf6:	701a      	strb	r2, [r3, #0]
 8018bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8018bfc:	4b23      	ldr	r3, [pc, #140]	; (8018c8c <_SendPacket+0x1c0>)
 8018bfe:	785b      	ldrb	r3, [r3, #1]
 8018c00:	4618      	mov	r0, r3
 8018c02:	68ba      	ldr	r2, [r7, #8]
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	1ad3      	subs	r3, r2, r3
 8018c08:	461a      	mov	r2, r3
 8018c0a:	68f9      	ldr	r1, [r7, #12]
 8018c0c:	f7e7 fae0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8018c10:	4603      	mov	r3, r0
 8018c12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d003      	beq.n	8018c22 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8018c1a:	4a1c      	ldr	r2, [pc, #112]	; (8018c8c <_SendPacket+0x1c0>)
 8018c1c:	69bb      	ldr	r3, [r7, #24]
 8018c1e:	60d3      	str	r3, [r2, #12]
 8018c20:	e00b      	b.n	8018c3a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8018c22:	4b1a      	ldr	r3, [pc, #104]	; (8018c8c <_SendPacket+0x1c0>)
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	3301      	adds	r3, #1
 8018c28:	b2da      	uxtb	r2, r3
 8018c2a:	4b18      	ldr	r3, [pc, #96]	; (8018c8c <_SendPacket+0x1c0>)
 8018c2c:	701a      	strb	r2, [r3, #0]
 8018c2e:	e004      	b.n	8018c3a <_SendPacket+0x16e>
    goto SendDone;
 8018c30:	bf00      	nop
 8018c32:	e002      	b.n	8018c3a <_SendPacket+0x16e>
      goto SendDone;
 8018c34:	bf00      	nop
 8018c36:	e000      	b.n	8018c3a <_SendPacket+0x16e>
      goto SendDone;
 8018c38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8018c3a:	4b14      	ldr	r3, [pc, #80]	; (8018c8c <_SendPacket+0x1c0>)
 8018c3c:	7e1b      	ldrb	r3, [r3, #24]
 8018c3e:	4619      	mov	r1, r3
 8018c40:	4a14      	ldr	r2, [pc, #80]	; (8018c94 <_SendPacket+0x1c8>)
 8018c42:	460b      	mov	r3, r1
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	440b      	add	r3, r1
 8018c48:	00db      	lsls	r3, r3, #3
 8018c4a:	4413      	add	r3, r2
 8018c4c:	336c      	adds	r3, #108	; 0x6c
 8018c4e:	681a      	ldr	r2, [r3, #0]
 8018c50:	4b0e      	ldr	r3, [pc, #56]	; (8018c8c <_SendPacket+0x1c0>)
 8018c52:	7e1b      	ldrb	r3, [r3, #24]
 8018c54:	4618      	mov	r0, r3
 8018c56:	490f      	ldr	r1, [pc, #60]	; (8018c94 <_SendPacket+0x1c8>)
 8018c58:	4603      	mov	r3, r0
 8018c5a:	005b      	lsls	r3, r3, #1
 8018c5c:	4403      	add	r3, r0
 8018c5e:	00db      	lsls	r3, r3, #3
 8018c60:	440b      	add	r3, r1
 8018c62:	3370      	adds	r3, #112	; 0x70
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	429a      	cmp	r2, r3
 8018c68:	d00b      	beq.n	8018c82 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8018c6a:	4b08      	ldr	r3, [pc, #32]	; (8018c8c <_SendPacket+0x1c0>)
 8018c6c:	789b      	ldrb	r3, [r3, #2]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d107      	bne.n	8018c82 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8018c72:	4b06      	ldr	r3, [pc, #24]	; (8018c8c <_SendPacket+0x1c0>)
 8018c74:	2201      	movs	r2, #1
 8018c76:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8018c78:	f7ff fe44 	bl	8018904 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8018c7c:	4b03      	ldr	r3, [pc, #12]	; (8018c8c <_SendPacket+0x1c0>)
 8018c7e:	2200      	movs	r2, #0
 8018c80:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8018c82:	bf00      	nop
 8018c84:	3728      	adds	r7, #40	; 0x28
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	2001b4a8 	.word	0x2001b4a8
 8018c90:	e0001004 	.word	0xe0001004
 8018c94:	2001e8f8 	.word	0x2001e8f8

08018c98 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b086      	sub	sp, #24
 8018c9c:	af02      	add	r7, sp, #8
 8018c9e:	60f8      	str	r0, [r7, #12]
 8018ca0:	60b9      	str	r1, [r7, #8]
 8018ca2:	607a      	str	r2, [r7, #4]
 8018ca4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018cac:	4917      	ldr	r1, [pc, #92]	; (8018d0c <SEGGER_SYSVIEW_Init+0x74>)
 8018cae:	4818      	ldr	r0, [pc, #96]	; (8018d10 <SEGGER_SYSVIEW_Init+0x78>)
 8018cb0:	f7ff fcfc 	bl	80186ac <SEGGER_RTT_AllocUpBuffer>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	b2da      	uxtb	r2, r3
 8018cb8:	4b16      	ldr	r3, [pc, #88]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8018cbc:	4b15      	ldr	r3, [pc, #84]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cbe:	785a      	ldrb	r2, [r3, #1]
 8018cc0:	4b14      	ldr	r3, [pc, #80]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cc2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8018cc4:	4b13      	ldr	r3, [pc, #76]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cc6:	7e1b      	ldrb	r3, [r3, #24]
 8018cc8:	4618      	mov	r0, r3
 8018cca:	2300      	movs	r3, #0
 8018ccc:	9300      	str	r3, [sp, #0]
 8018cce:	2308      	movs	r3, #8
 8018cd0:	4a11      	ldr	r2, [pc, #68]	; (8018d18 <SEGGER_SYSVIEW_Init+0x80>)
 8018cd2:	490f      	ldr	r1, [pc, #60]	; (8018d10 <SEGGER_SYSVIEW_Init+0x78>)
 8018cd4:	f7ff fd6e 	bl	80187b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8018cd8:	4b0e      	ldr	r3, [pc, #56]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cda:	2200      	movs	r2, #0
 8018cdc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8018cde:	4b0f      	ldr	r3, [pc, #60]	; (8018d1c <SEGGER_SYSVIEW_Init+0x84>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	4a0c      	ldr	r2, [pc, #48]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018ce4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8018ce6:	4a0b      	ldr	r2, [pc, #44]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8018cec:	4a09      	ldr	r2, [pc, #36]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8018cf2:	4a08      	ldr	r2, [pc, #32]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8018cf8:	4a06      	ldr	r2, [pc, #24]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018cfa:	683b      	ldr	r3, [r7, #0]
 8018cfc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8018cfe:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <SEGGER_SYSVIEW_Init+0x7c>)
 8018d00:	2200      	movs	r2, #0
 8018d02:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8018d04:	bf00      	nop
 8018d06:	3710      	adds	r7, #16
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	bd80      	pop	{r7, pc}
 8018d0c:	2001b0a0 	.word	0x2001b0a0
 8018d10:	0801a8a4 	.word	0x0801a8a4
 8018d14:	2001b4a8 	.word	0x2001b4a8
 8018d18:	2001b4a0 	.word	0x2001b4a0
 8018d1c:	e0001004 	.word	0xe0001004

08018d20 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8018d28:	4a04      	ldr	r2, [pc, #16]	; (8018d3c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6113      	str	r3, [r2, #16]
}
 8018d2e:	bf00      	nop
 8018d30:	370c      	adds	r7, #12
 8018d32:	46bd      	mov	sp, r7
 8018d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d38:	4770      	bx	lr
 8018d3a:	bf00      	nop
 8018d3c:	2001b4a8 	.word	0x2001b4a8

08018d40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8018d48:	f3ef 8311 	mrs	r3, BASEPRI
 8018d4c:	f04f 0120 	mov.w	r1, #32
 8018d50:	f381 8811 	msr	BASEPRI, r1
 8018d54:	60fb      	str	r3, [r7, #12]
 8018d56:	4808      	ldr	r0, [pc, #32]	; (8018d78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8018d58:	f7ff fdc8 	bl	80188ec <_PreparePacket>
 8018d5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	68b9      	ldr	r1, [r7, #8]
 8018d62:	68b8      	ldr	r0, [r7, #8]
 8018d64:	f7ff feb2 	bl	8018acc <_SendPacket>
  RECORD_END();
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	f383 8811 	msr	BASEPRI, r3
}
 8018d6e:	bf00      	nop
 8018d70:	3710      	adds	r7, #16
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}
 8018d76:	bf00      	nop
 8018d78:	2001b4d8 	.word	0x2001b4d8

08018d7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b088      	sub	sp, #32
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
 8018d84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8018d86:	f3ef 8311 	mrs	r3, BASEPRI
 8018d8a:	f04f 0120 	mov.w	r1, #32
 8018d8e:	f381 8811 	msr	BASEPRI, r1
 8018d92:	617b      	str	r3, [r7, #20]
 8018d94:	4816      	ldr	r0, [pc, #88]	; (8018df0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8018d96:	f7ff fda9 	bl	80188ec <_PreparePacket>
 8018d9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	61fb      	str	r3, [r7, #28]
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	61bb      	str	r3, [r7, #24]
 8018da8:	e00b      	b.n	8018dc2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8018daa:	69bb      	ldr	r3, [r7, #24]
 8018dac:	b2da      	uxtb	r2, r3
 8018dae:	69fb      	ldr	r3, [r7, #28]
 8018db0:	1c59      	adds	r1, r3, #1
 8018db2:	61f9      	str	r1, [r7, #28]
 8018db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018db8:	b2d2      	uxtb	r2, r2
 8018dba:	701a      	strb	r2, [r3, #0]
 8018dbc:	69bb      	ldr	r3, [r7, #24]
 8018dbe:	09db      	lsrs	r3, r3, #7
 8018dc0:	61bb      	str	r3, [r7, #24]
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8018dc6:	d8f0      	bhi.n	8018daa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8018dc8:	69fb      	ldr	r3, [r7, #28]
 8018dca:	1c5a      	adds	r2, r3, #1
 8018dcc:	61fa      	str	r2, [r7, #28]
 8018dce:	69ba      	ldr	r2, [r7, #24]
 8018dd0:	b2d2      	uxtb	r2, r2
 8018dd2:	701a      	strb	r2, [r3, #0]
 8018dd4:	69fb      	ldr	r3, [r7, #28]
 8018dd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	68f9      	ldr	r1, [r7, #12]
 8018ddc:	6938      	ldr	r0, [r7, #16]
 8018dde:	f7ff fe75 	bl	8018acc <_SendPacket>
  RECORD_END();
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	f383 8811 	msr	BASEPRI, r3
}
 8018de8:	bf00      	nop
 8018dea:	3720      	adds	r7, #32
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	2001b4d8 	.word	0x2001b4d8

08018df4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b08c      	sub	sp, #48	; 0x30
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	60b9      	str	r1, [r7, #8]
 8018dfe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8018e00:	f3ef 8311 	mrs	r3, BASEPRI
 8018e04:	f04f 0120 	mov.w	r1, #32
 8018e08:	f381 8811 	msr	BASEPRI, r1
 8018e0c:	61fb      	str	r3, [r7, #28]
 8018e0e:	4825      	ldr	r0, [pc, #148]	; (8018ea4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8018e10:	f7ff fd6c 	bl	80188ec <_PreparePacket>
 8018e14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8018e16:	69bb      	ldr	r3, [r7, #24]
 8018e18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e1e:	68bb      	ldr	r3, [r7, #8]
 8018e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e22:	e00b      	b.n	8018e3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8018e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e26:	b2da      	uxtb	r2, r3
 8018e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e2a:	1c59      	adds	r1, r3, #1
 8018e2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018e32:	b2d2      	uxtb	r2, r2
 8018e34:	701a      	strb	r2, [r3, #0]
 8018e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e38:	09db      	lsrs	r3, r3, #7
 8018e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8018e40:	d8f0      	bhi.n	8018e24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8018e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e44:	1c5a      	adds	r2, r3, #1
 8018e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e4a:	b2d2      	uxtb	r2, r2
 8018e4c:	701a      	strb	r2, [r3, #0]
 8018e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	627b      	str	r3, [r7, #36]	; 0x24
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	623b      	str	r3, [r7, #32]
 8018e5a:	e00b      	b.n	8018e74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8018e5c:	6a3b      	ldr	r3, [r7, #32]
 8018e5e:	b2da      	uxtb	r2, r3
 8018e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e62:	1c59      	adds	r1, r3, #1
 8018e64:	6279      	str	r1, [r7, #36]	; 0x24
 8018e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018e6a:	b2d2      	uxtb	r2, r2
 8018e6c:	701a      	strb	r2, [r3, #0]
 8018e6e:	6a3b      	ldr	r3, [r7, #32]
 8018e70:	09db      	lsrs	r3, r3, #7
 8018e72:	623b      	str	r3, [r7, #32]
 8018e74:	6a3b      	ldr	r3, [r7, #32]
 8018e76:	2b7f      	cmp	r3, #127	; 0x7f
 8018e78:	d8f0      	bhi.n	8018e5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8018e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e7c:	1c5a      	adds	r2, r3, #1
 8018e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8018e80:	6a3a      	ldr	r2, [r7, #32]
 8018e82:	b2d2      	uxtb	r2, r2
 8018e84:	701a      	strb	r2, [r3, #0]
 8018e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018e8a:	68fa      	ldr	r2, [r7, #12]
 8018e8c:	6979      	ldr	r1, [r7, #20]
 8018e8e:	69b8      	ldr	r0, [r7, #24]
 8018e90:	f7ff fe1c 	bl	8018acc <_SendPacket>
  RECORD_END();
 8018e94:	69fb      	ldr	r3, [r7, #28]
 8018e96:	f383 8811 	msr	BASEPRI, r3
}
 8018e9a:	bf00      	nop
 8018e9c:	3730      	adds	r7, #48	; 0x30
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bd80      	pop	{r7, pc}
 8018ea2:	bf00      	nop
 8018ea4:	2001b4d8 	.word	0x2001b4d8

08018ea8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b08e      	sub	sp, #56	; 0x38
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	60f8      	str	r0, [r7, #12]
 8018eb0:	60b9      	str	r1, [r7, #8]
 8018eb2:	607a      	str	r2, [r7, #4]
 8018eb4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8018eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8018eba:	f04f 0120 	mov.w	r1, #32
 8018ebe:	f381 8811 	msr	BASEPRI, r1
 8018ec2:	61fb      	str	r3, [r7, #28]
 8018ec4:	4832      	ldr	r0, [pc, #200]	; (8018f90 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8018ec6:	f7ff fd11 	bl	80188ec <_PreparePacket>
 8018eca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8018ecc:	69bb      	ldr	r3, [r7, #24]
 8018ece:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018ed0:	697b      	ldr	r3, [r7, #20]
 8018ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8018ed8:	e00b      	b.n	8018ef2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8018eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018edc:	b2da      	uxtb	r2, r3
 8018ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ee0:	1c59      	adds	r1, r3, #1
 8018ee2:	6379      	str	r1, [r7, #52]	; 0x34
 8018ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018ee8:	b2d2      	uxtb	r2, r2
 8018eea:	701a      	strb	r2, [r3, #0]
 8018eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eee:	09db      	lsrs	r3, r3, #7
 8018ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8018ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8018ef6:	d8f0      	bhi.n	8018eda <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8018ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018efa:	1c5a      	adds	r2, r3, #1
 8018efc:	637a      	str	r2, [r7, #52]	; 0x34
 8018efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f00:	b2d2      	uxtb	r2, r2
 8018f02:	701a      	strb	r2, [r3, #0]
 8018f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8018f08:	697b      	ldr	r3, [r7, #20]
 8018f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f10:	e00b      	b.n	8018f2a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8018f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f14:	b2da      	uxtb	r2, r3
 8018f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f18:	1c59      	adds	r1, r3, #1
 8018f1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018f20:	b2d2      	uxtb	r2, r2
 8018f22:	701a      	strb	r2, [r3, #0]
 8018f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f26:	09db      	lsrs	r3, r3, #7
 8018f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8018f2e:	d8f0      	bhi.n	8018f12 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8018f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f32:	1c5a      	adds	r2, r3, #1
 8018f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f38:	b2d2      	uxtb	r2, r2
 8018f3a:	701a      	strb	r2, [r3, #0]
 8018f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	627b      	str	r3, [r7, #36]	; 0x24
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	623b      	str	r3, [r7, #32]
 8018f48:	e00b      	b.n	8018f62 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8018f4a:	6a3b      	ldr	r3, [r7, #32]
 8018f4c:	b2da      	uxtb	r2, r3
 8018f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f50:	1c59      	adds	r1, r3, #1
 8018f52:	6279      	str	r1, [r7, #36]	; 0x24
 8018f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018f58:	b2d2      	uxtb	r2, r2
 8018f5a:	701a      	strb	r2, [r3, #0]
 8018f5c:	6a3b      	ldr	r3, [r7, #32]
 8018f5e:	09db      	lsrs	r3, r3, #7
 8018f60:	623b      	str	r3, [r7, #32]
 8018f62:	6a3b      	ldr	r3, [r7, #32]
 8018f64:	2b7f      	cmp	r3, #127	; 0x7f
 8018f66:	d8f0      	bhi.n	8018f4a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8018f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f6a:	1c5a      	adds	r2, r3, #1
 8018f6c:	627a      	str	r2, [r7, #36]	; 0x24
 8018f6e:	6a3a      	ldr	r2, [r7, #32]
 8018f70:	b2d2      	uxtb	r2, r2
 8018f72:	701a      	strb	r2, [r3, #0]
 8018f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8018f78:	68fa      	ldr	r2, [r7, #12]
 8018f7a:	6979      	ldr	r1, [r7, #20]
 8018f7c:	69b8      	ldr	r0, [r7, #24]
 8018f7e:	f7ff fda5 	bl	8018acc <_SendPacket>
  RECORD_END();
 8018f82:	69fb      	ldr	r3, [r7, #28]
 8018f84:	f383 8811 	msr	BASEPRI, r3
}
 8018f88:	bf00      	nop
 8018f8a:	3738      	adds	r7, #56	; 0x38
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	2001b4d8 	.word	0x2001b4d8

08018f94 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b090      	sub	sp, #64	; 0x40
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	60b9      	str	r1, [r7, #8]
 8018f9e:	607a      	str	r2, [r7, #4]
 8018fa0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8018fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8018fa6:	f04f 0120 	mov.w	r1, #32
 8018faa:	f381 8811 	msr	BASEPRI, r1
 8018fae:	61fb      	str	r3, [r7, #28]
 8018fb0:	4840      	ldr	r0, [pc, #256]	; (80190b4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8018fb2:	f7ff fc9b 	bl	80188ec <_PreparePacket>
 8018fb6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8018fc4:	e00b      	b.n	8018fde <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8018fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fc8:	b2da      	uxtb	r2, r3
 8018fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fcc:	1c59      	adds	r1, r3, #1
 8018fce:	63f9      	str	r1, [r7, #60]	; 0x3c
 8018fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8018fd4:	b2d2      	uxtb	r2, r2
 8018fd6:	701a      	strb	r2, [r3, #0]
 8018fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fda:	09db      	lsrs	r3, r3, #7
 8018fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8018fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8018fe2:	d8f0      	bhi.n	8018fc6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8018fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fe6:	1c5a      	adds	r2, r3, #1
 8018fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8018fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018fec:	b2d2      	uxtb	r2, r2
 8018fee:	701a      	strb	r2, [r3, #0]
 8018ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ff2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8018ff4:	697b      	ldr	r3, [r7, #20]
 8018ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8018ffc:	e00b      	b.n	8019016 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8018ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019000:	b2da      	uxtb	r2, r3
 8019002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019004:	1c59      	adds	r1, r3, #1
 8019006:	6379      	str	r1, [r7, #52]	; 0x34
 8019008:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801900c:	b2d2      	uxtb	r2, r2
 801900e:	701a      	strb	r2, [r3, #0]
 8019010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019012:	09db      	lsrs	r3, r3, #7
 8019014:	633b      	str	r3, [r7, #48]	; 0x30
 8019016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019018:	2b7f      	cmp	r3, #127	; 0x7f
 801901a:	d8f0      	bhi.n	8018ffe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801901e:	1c5a      	adds	r2, r3, #1
 8019020:	637a      	str	r2, [r7, #52]	; 0x34
 8019022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019024:	b2d2      	uxtb	r2, r2
 8019026:	701a      	strb	r2, [r3, #0]
 8019028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801902a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	62bb      	str	r3, [r7, #40]	; 0x28
 8019034:	e00b      	b.n	801904e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8019036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019038:	b2da      	uxtb	r2, r3
 801903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801903c:	1c59      	adds	r1, r3, #1
 801903e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019040:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019044:	b2d2      	uxtb	r2, r2
 8019046:	701a      	strb	r2, [r3, #0]
 8019048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801904a:	09db      	lsrs	r3, r3, #7
 801904c:	62bb      	str	r3, [r7, #40]	; 0x28
 801904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019050:	2b7f      	cmp	r3, #127	; 0x7f
 8019052:	d8f0      	bhi.n	8019036 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8019054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019056:	1c5a      	adds	r2, r3, #1
 8019058:	62fa      	str	r2, [r7, #44]	; 0x2c
 801905a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801905c:	b2d2      	uxtb	r2, r2
 801905e:	701a      	strb	r2, [r3, #0]
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	627b      	str	r3, [r7, #36]	; 0x24
 8019068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801906a:	623b      	str	r3, [r7, #32]
 801906c:	e00b      	b.n	8019086 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801906e:	6a3b      	ldr	r3, [r7, #32]
 8019070:	b2da      	uxtb	r2, r3
 8019072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019074:	1c59      	adds	r1, r3, #1
 8019076:	6279      	str	r1, [r7, #36]	; 0x24
 8019078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801907c:	b2d2      	uxtb	r2, r2
 801907e:	701a      	strb	r2, [r3, #0]
 8019080:	6a3b      	ldr	r3, [r7, #32]
 8019082:	09db      	lsrs	r3, r3, #7
 8019084:	623b      	str	r3, [r7, #32]
 8019086:	6a3b      	ldr	r3, [r7, #32]
 8019088:	2b7f      	cmp	r3, #127	; 0x7f
 801908a:	d8f0      	bhi.n	801906e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 801908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801908e:	1c5a      	adds	r2, r3, #1
 8019090:	627a      	str	r2, [r7, #36]	; 0x24
 8019092:	6a3a      	ldr	r2, [r7, #32]
 8019094:	b2d2      	uxtb	r2, r2
 8019096:	701a      	strb	r2, [r3, #0]
 8019098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801909a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 801909c:	68fa      	ldr	r2, [r7, #12]
 801909e:	6979      	ldr	r1, [r7, #20]
 80190a0:	69b8      	ldr	r0, [r7, #24]
 80190a2:	f7ff fd13 	bl	8018acc <_SendPacket>
  RECORD_END();
 80190a6:	69fb      	ldr	r3, [r7, #28]
 80190a8:	f383 8811 	msr	BASEPRI, r3
}
 80190ac:	bf00      	nop
 80190ae:	3740      	adds	r7, #64	; 0x40
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}
 80190b4:	2001b4d8 	.word	0x2001b4d8

080190b8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b08c      	sub	sp, #48	; 0x30
 80190bc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80190be:	4b58      	ldr	r3, [pc, #352]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 80190c0:	2201      	movs	r2, #1
 80190c2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80190c4:	f3ef 8311 	mrs	r3, BASEPRI
 80190c8:	f04f 0120 	mov.w	r1, #32
 80190cc:	f381 8811 	msr	BASEPRI, r1
 80190d0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80190d2:	4b53      	ldr	r3, [pc, #332]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 80190d4:	785b      	ldrb	r3, [r3, #1]
 80190d6:	220a      	movs	r2, #10
 80190d8:	4952      	ldr	r1, [pc, #328]	; (8019224 <SEGGER_SYSVIEW_Start+0x16c>)
 80190da:	4618      	mov	r0, r3
 80190dc:	f7e7 f878 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80190e6:	200a      	movs	r0, #10
 80190e8:	f7ff fe2a 	bl	8018d40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80190ec:	f3ef 8311 	mrs	r3, BASEPRI
 80190f0:	f04f 0120 	mov.w	r1, #32
 80190f4:	f381 8811 	msr	BASEPRI, r1
 80190f8:	60bb      	str	r3, [r7, #8]
 80190fa:	484b      	ldr	r0, [pc, #300]	; (8019228 <SEGGER_SYSVIEW_Start+0x170>)
 80190fc:	f7ff fbf6 	bl	80188ec <_PreparePacket>
 8019100:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	62fb      	str	r3, [r7, #44]	; 0x2c
 801910a:	4b45      	ldr	r3, [pc, #276]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 801910c:	685b      	ldr	r3, [r3, #4]
 801910e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019110:	e00b      	b.n	801912a <SEGGER_SYSVIEW_Start+0x72>
 8019112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019114:	b2da      	uxtb	r2, r3
 8019116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019118:	1c59      	adds	r1, r3, #1
 801911a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801911c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019120:	b2d2      	uxtb	r2, r2
 8019122:	701a      	strb	r2, [r3, #0]
 8019124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019126:	09db      	lsrs	r3, r3, #7
 8019128:	62bb      	str	r3, [r7, #40]	; 0x28
 801912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912c:	2b7f      	cmp	r3, #127	; 0x7f
 801912e:	d8f0      	bhi.n	8019112 <SEGGER_SYSVIEW_Start+0x5a>
 8019130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019132:	1c5a      	adds	r2, r3, #1
 8019134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019138:	b2d2      	uxtb	r2, r2
 801913a:	701a      	strb	r2, [r3, #0]
 801913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801913e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	627b      	str	r3, [r7, #36]	; 0x24
 8019144:	4b36      	ldr	r3, [pc, #216]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 8019146:	689b      	ldr	r3, [r3, #8]
 8019148:	623b      	str	r3, [r7, #32]
 801914a:	e00b      	b.n	8019164 <SEGGER_SYSVIEW_Start+0xac>
 801914c:	6a3b      	ldr	r3, [r7, #32]
 801914e:	b2da      	uxtb	r2, r3
 8019150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019152:	1c59      	adds	r1, r3, #1
 8019154:	6279      	str	r1, [r7, #36]	; 0x24
 8019156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801915a:	b2d2      	uxtb	r2, r2
 801915c:	701a      	strb	r2, [r3, #0]
 801915e:	6a3b      	ldr	r3, [r7, #32]
 8019160:	09db      	lsrs	r3, r3, #7
 8019162:	623b      	str	r3, [r7, #32]
 8019164:	6a3b      	ldr	r3, [r7, #32]
 8019166:	2b7f      	cmp	r3, #127	; 0x7f
 8019168:	d8f0      	bhi.n	801914c <SEGGER_SYSVIEW_Start+0x94>
 801916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916c:	1c5a      	adds	r2, r3, #1
 801916e:	627a      	str	r2, [r7, #36]	; 0x24
 8019170:	6a3a      	ldr	r2, [r7, #32]
 8019172:	b2d2      	uxtb	r2, r2
 8019174:	701a      	strb	r2, [r3, #0]
 8019176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019178:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801917a:	683b      	ldr	r3, [r7, #0]
 801917c:	61fb      	str	r3, [r7, #28]
 801917e:	4b28      	ldr	r3, [pc, #160]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 8019180:	691b      	ldr	r3, [r3, #16]
 8019182:	61bb      	str	r3, [r7, #24]
 8019184:	e00b      	b.n	801919e <SEGGER_SYSVIEW_Start+0xe6>
 8019186:	69bb      	ldr	r3, [r7, #24]
 8019188:	b2da      	uxtb	r2, r3
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	1c59      	adds	r1, r3, #1
 801918e:	61f9      	str	r1, [r7, #28]
 8019190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019194:	b2d2      	uxtb	r2, r2
 8019196:	701a      	strb	r2, [r3, #0]
 8019198:	69bb      	ldr	r3, [r7, #24]
 801919a:	09db      	lsrs	r3, r3, #7
 801919c:	61bb      	str	r3, [r7, #24]
 801919e:	69bb      	ldr	r3, [r7, #24]
 80191a0:	2b7f      	cmp	r3, #127	; 0x7f
 80191a2:	d8f0      	bhi.n	8019186 <SEGGER_SYSVIEW_Start+0xce>
 80191a4:	69fb      	ldr	r3, [r7, #28]
 80191a6:	1c5a      	adds	r2, r3, #1
 80191a8:	61fa      	str	r2, [r7, #28]
 80191aa:	69ba      	ldr	r2, [r7, #24]
 80191ac:	b2d2      	uxtb	r2, r2
 80191ae:	701a      	strb	r2, [r3, #0]
 80191b0:	69fb      	ldr	r3, [r7, #28]
 80191b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80191b4:	683b      	ldr	r3, [r7, #0]
 80191b6:	617b      	str	r3, [r7, #20]
 80191b8:	2300      	movs	r3, #0
 80191ba:	613b      	str	r3, [r7, #16]
 80191bc:	e00b      	b.n	80191d6 <SEGGER_SYSVIEW_Start+0x11e>
 80191be:	693b      	ldr	r3, [r7, #16]
 80191c0:	b2da      	uxtb	r2, r3
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	1c59      	adds	r1, r3, #1
 80191c6:	6179      	str	r1, [r7, #20]
 80191c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80191cc:	b2d2      	uxtb	r2, r2
 80191ce:	701a      	strb	r2, [r3, #0]
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	09db      	lsrs	r3, r3, #7
 80191d4:	613b      	str	r3, [r7, #16]
 80191d6:	693b      	ldr	r3, [r7, #16]
 80191d8:	2b7f      	cmp	r3, #127	; 0x7f
 80191da:	d8f0      	bhi.n	80191be <SEGGER_SYSVIEW_Start+0x106>
 80191dc:	697b      	ldr	r3, [r7, #20]
 80191de:	1c5a      	adds	r2, r3, #1
 80191e0:	617a      	str	r2, [r7, #20]
 80191e2:	693a      	ldr	r2, [r7, #16]
 80191e4:	b2d2      	uxtb	r2, r2
 80191e6:	701a      	strb	r2, [r3, #0]
 80191e8:	697b      	ldr	r3, [r7, #20]
 80191ea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80191ec:	2218      	movs	r2, #24
 80191ee:	6839      	ldr	r1, [r7, #0]
 80191f0:	6878      	ldr	r0, [r7, #4]
 80191f2:	f7ff fc6b 	bl	8018acc <_SendPacket>
      RECORD_END();
 80191f6:	68bb      	ldr	r3, [r7, #8]
 80191f8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80191fc:	4b08      	ldr	r3, [pc, #32]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 80191fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019200:	2b00      	cmp	r3, #0
 8019202:	d002      	beq.n	801920a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8019204:	4b06      	ldr	r3, [pc, #24]	; (8019220 <SEGGER_SYSVIEW_Start+0x168>)
 8019206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019208:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 801920a:	f000 f9eb 	bl	80195e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801920e:	f000 f9b1 	bl	8019574 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8019212:	f000 fba9 	bl	8019968 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8019216:	bf00      	nop
 8019218:	3730      	adds	r7, #48	; 0x30
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
 801921e:	bf00      	nop
 8019220:	2001b4a8 	.word	0x2001b4a8
 8019224:	0801af08 	.word	0x0801af08
 8019228:	2001b4d8 	.word	0x2001b4d8

0801922c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 801922c:	b580      	push	{r7, lr}
 801922e:	b082      	sub	sp, #8
 8019230:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019232:	f3ef 8311 	mrs	r3, BASEPRI
 8019236:	f04f 0120 	mov.w	r1, #32
 801923a:	f381 8811 	msr	BASEPRI, r1
 801923e:	607b      	str	r3, [r7, #4]
 8019240:	480b      	ldr	r0, [pc, #44]	; (8019270 <SEGGER_SYSVIEW_Stop+0x44>)
 8019242:	f7ff fb53 	bl	80188ec <_PreparePacket>
 8019246:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8019248:	4b0a      	ldr	r3, [pc, #40]	; (8019274 <SEGGER_SYSVIEW_Stop+0x48>)
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d007      	beq.n	8019260 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8019250:	220b      	movs	r2, #11
 8019252:	6839      	ldr	r1, [r7, #0]
 8019254:	6838      	ldr	r0, [r7, #0]
 8019256:	f7ff fc39 	bl	8018acc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 801925a:	4b06      	ldr	r3, [pc, #24]	; (8019274 <SEGGER_SYSVIEW_Stop+0x48>)
 801925c:	2200      	movs	r2, #0
 801925e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	f383 8811 	msr	BASEPRI, r3
}
 8019266:	bf00      	nop
 8019268:	3708      	adds	r7, #8
 801926a:	46bd      	mov	sp, r7
 801926c:	bd80      	pop	{r7, pc}
 801926e:	bf00      	nop
 8019270:	2001b4d8 	.word	0x2001b4d8
 8019274:	2001b4a8 	.word	0x2001b4a8

08019278 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8019278:	b580      	push	{r7, lr}
 801927a:	b08c      	sub	sp, #48	; 0x30
 801927c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801927e:	f3ef 8311 	mrs	r3, BASEPRI
 8019282:	f04f 0120 	mov.w	r1, #32
 8019286:	f381 8811 	msr	BASEPRI, r1
 801928a:	60fb      	str	r3, [r7, #12]
 801928c:	4845      	ldr	r0, [pc, #276]	; (80193a4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801928e:	f7ff fb2d 	bl	80188ec <_PreparePacket>
 8019292:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801929c:	4b42      	ldr	r3, [pc, #264]	; (80193a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801929e:	685b      	ldr	r3, [r3, #4]
 80192a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80192a2:	e00b      	b.n	80192bc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80192a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192a6:	b2da      	uxtb	r2, r3
 80192a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192aa:	1c59      	adds	r1, r3, #1
 80192ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80192ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80192b2:	b2d2      	uxtb	r2, r2
 80192b4:	701a      	strb	r2, [r3, #0]
 80192b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192b8:	09db      	lsrs	r3, r3, #7
 80192ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80192bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192be:	2b7f      	cmp	r3, #127	; 0x7f
 80192c0:	d8f0      	bhi.n	80192a4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80192c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c4:	1c5a      	adds	r2, r3, #1
 80192c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80192c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192ca:	b2d2      	uxtb	r2, r2
 80192cc:	701a      	strb	r2, [r3, #0]
 80192ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	627b      	str	r3, [r7, #36]	; 0x24
 80192d6:	4b34      	ldr	r3, [pc, #208]	; (80193a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80192d8:	689b      	ldr	r3, [r3, #8]
 80192da:	623b      	str	r3, [r7, #32]
 80192dc:	e00b      	b.n	80192f6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80192de:	6a3b      	ldr	r3, [r7, #32]
 80192e0:	b2da      	uxtb	r2, r3
 80192e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e4:	1c59      	adds	r1, r3, #1
 80192e6:	6279      	str	r1, [r7, #36]	; 0x24
 80192e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80192ec:	b2d2      	uxtb	r2, r2
 80192ee:	701a      	strb	r2, [r3, #0]
 80192f0:	6a3b      	ldr	r3, [r7, #32]
 80192f2:	09db      	lsrs	r3, r3, #7
 80192f4:	623b      	str	r3, [r7, #32]
 80192f6:	6a3b      	ldr	r3, [r7, #32]
 80192f8:	2b7f      	cmp	r3, #127	; 0x7f
 80192fa:	d8f0      	bhi.n	80192de <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80192fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fe:	1c5a      	adds	r2, r3, #1
 8019300:	627a      	str	r2, [r7, #36]	; 0x24
 8019302:	6a3a      	ldr	r2, [r7, #32]
 8019304:	b2d2      	uxtb	r2, r2
 8019306:	701a      	strb	r2, [r3, #0]
 8019308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801930a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	61fb      	str	r3, [r7, #28]
 8019310:	4b25      	ldr	r3, [pc, #148]	; (80193a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019312:	691b      	ldr	r3, [r3, #16]
 8019314:	61bb      	str	r3, [r7, #24]
 8019316:	e00b      	b.n	8019330 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8019318:	69bb      	ldr	r3, [r7, #24]
 801931a:	b2da      	uxtb	r2, r3
 801931c:	69fb      	ldr	r3, [r7, #28]
 801931e:	1c59      	adds	r1, r3, #1
 8019320:	61f9      	str	r1, [r7, #28]
 8019322:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019326:	b2d2      	uxtb	r2, r2
 8019328:	701a      	strb	r2, [r3, #0]
 801932a:	69bb      	ldr	r3, [r7, #24]
 801932c:	09db      	lsrs	r3, r3, #7
 801932e:	61bb      	str	r3, [r7, #24]
 8019330:	69bb      	ldr	r3, [r7, #24]
 8019332:	2b7f      	cmp	r3, #127	; 0x7f
 8019334:	d8f0      	bhi.n	8019318 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8019336:	69fb      	ldr	r3, [r7, #28]
 8019338:	1c5a      	adds	r2, r3, #1
 801933a:	61fa      	str	r2, [r7, #28]
 801933c:	69ba      	ldr	r2, [r7, #24]
 801933e:	b2d2      	uxtb	r2, r2
 8019340:	701a      	strb	r2, [r3, #0]
 8019342:	69fb      	ldr	r3, [r7, #28]
 8019344:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	617b      	str	r3, [r7, #20]
 801934a:	2300      	movs	r3, #0
 801934c:	613b      	str	r3, [r7, #16]
 801934e:	e00b      	b.n	8019368 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8019350:	693b      	ldr	r3, [r7, #16]
 8019352:	b2da      	uxtb	r2, r3
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	1c59      	adds	r1, r3, #1
 8019358:	6179      	str	r1, [r7, #20]
 801935a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801935e:	b2d2      	uxtb	r2, r2
 8019360:	701a      	strb	r2, [r3, #0]
 8019362:	693b      	ldr	r3, [r7, #16]
 8019364:	09db      	lsrs	r3, r3, #7
 8019366:	613b      	str	r3, [r7, #16]
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	2b7f      	cmp	r3, #127	; 0x7f
 801936c:	d8f0      	bhi.n	8019350 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801936e:	697b      	ldr	r3, [r7, #20]
 8019370:	1c5a      	adds	r2, r3, #1
 8019372:	617a      	str	r2, [r7, #20]
 8019374:	693a      	ldr	r2, [r7, #16]
 8019376:	b2d2      	uxtb	r2, r2
 8019378:	701a      	strb	r2, [r3, #0]
 801937a:	697b      	ldr	r3, [r7, #20]
 801937c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801937e:	2218      	movs	r2, #24
 8019380:	6879      	ldr	r1, [r7, #4]
 8019382:	68b8      	ldr	r0, [r7, #8]
 8019384:	f7ff fba2 	bl	8018acc <_SendPacket>
  RECORD_END();
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801938e:	4b06      	ldr	r3, [pc, #24]	; (80193a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019392:	2b00      	cmp	r3, #0
 8019394:	d002      	beq.n	801939c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8019396:	4b04      	ldr	r3, [pc, #16]	; (80193a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801939a:	4798      	blx	r3
  }
}
 801939c:	bf00      	nop
 801939e:	3730      	adds	r7, #48	; 0x30
 80193a0:	46bd      	mov	sp, r7
 80193a2:	bd80      	pop	{r7, pc}
 80193a4:	2001b4d8 	.word	0x2001b4d8
 80193a8:	2001b4a8 	.word	0x2001b4a8

080193ac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b092      	sub	sp, #72	; 0x48
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80193b4:	f3ef 8311 	mrs	r3, BASEPRI
 80193b8:	f04f 0120 	mov.w	r1, #32
 80193bc:	f381 8811 	msr	BASEPRI, r1
 80193c0:	617b      	str	r3, [r7, #20]
 80193c2:	486a      	ldr	r0, [pc, #424]	; (801956c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80193c4:	f7ff fa92 	bl	80188ec <_PreparePacket>
 80193c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80193ca:	693b      	ldr	r3, [r7, #16]
 80193cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	647b      	str	r3, [r7, #68]	; 0x44
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	4b66      	ldr	r3, [pc, #408]	; (8019570 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80193d8:	691b      	ldr	r3, [r3, #16]
 80193da:	1ad3      	subs	r3, r2, r3
 80193dc:	643b      	str	r3, [r7, #64]	; 0x40
 80193de:	e00b      	b.n	80193f8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80193e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193e2:	b2da      	uxtb	r2, r3
 80193e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193e6:	1c59      	adds	r1, r3, #1
 80193e8:	6479      	str	r1, [r7, #68]	; 0x44
 80193ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80193ee:	b2d2      	uxtb	r2, r2
 80193f0:	701a      	strb	r2, [r3, #0]
 80193f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193f4:	09db      	lsrs	r3, r3, #7
 80193f6:	643b      	str	r3, [r7, #64]	; 0x40
 80193f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193fa:	2b7f      	cmp	r3, #127	; 0x7f
 80193fc:	d8f0      	bhi.n	80193e0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80193fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019400:	1c5a      	adds	r2, r3, #1
 8019402:	647a      	str	r2, [r7, #68]	; 0x44
 8019404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019406:	b2d2      	uxtb	r2, r2
 8019408:	701a      	strb	r2, [r3, #0]
 801940a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801940c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	689b      	ldr	r3, [r3, #8]
 8019416:	63bb      	str	r3, [r7, #56]	; 0x38
 8019418:	e00b      	b.n	8019432 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 801941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801941c:	b2da      	uxtb	r2, r3
 801941e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019420:	1c59      	adds	r1, r3, #1
 8019422:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019428:	b2d2      	uxtb	r2, r2
 801942a:	701a      	strb	r2, [r3, #0]
 801942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801942e:	09db      	lsrs	r3, r3, #7
 8019430:	63bb      	str	r3, [r7, #56]	; 0x38
 8019432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019434:	2b7f      	cmp	r3, #127	; 0x7f
 8019436:	d8f0      	bhi.n	801941a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8019438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801943a:	1c5a      	adds	r2, r3, #1
 801943c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801943e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019440:	b2d2      	uxtb	r2, r2
 8019442:	701a      	strb	r2, [r3, #0]
 8019444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019446:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	685b      	ldr	r3, [r3, #4]
 801944c:	2220      	movs	r2, #32
 801944e:	4619      	mov	r1, r3
 8019450:	68f8      	ldr	r0, [r7, #12]
 8019452:	f7ff f9fb 	bl	801884c <_EncodeStr>
 8019456:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8019458:	2209      	movs	r2, #9
 801945a:	68f9      	ldr	r1, [r7, #12]
 801945c:	6938      	ldr	r0, [r7, #16]
 801945e:	f7ff fb35 	bl	8018acc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8019462:	693b      	ldr	r3, [r7, #16]
 8019464:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	637b      	str	r3, [r7, #52]	; 0x34
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681a      	ldr	r2, [r3, #0]
 801946e:	4b40      	ldr	r3, [pc, #256]	; (8019570 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8019470:	691b      	ldr	r3, [r3, #16]
 8019472:	1ad3      	subs	r3, r2, r3
 8019474:	633b      	str	r3, [r7, #48]	; 0x30
 8019476:	e00b      	b.n	8019490 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8019478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801947a:	b2da      	uxtb	r2, r3
 801947c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801947e:	1c59      	adds	r1, r3, #1
 8019480:	6379      	str	r1, [r7, #52]	; 0x34
 8019482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019486:	b2d2      	uxtb	r2, r2
 8019488:	701a      	strb	r2, [r3, #0]
 801948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801948c:	09db      	lsrs	r3, r3, #7
 801948e:	633b      	str	r3, [r7, #48]	; 0x30
 8019490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019492:	2b7f      	cmp	r3, #127	; 0x7f
 8019494:	d8f0      	bhi.n	8019478 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8019496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019498:	1c5a      	adds	r2, r3, #1
 801949a:	637a      	str	r2, [r7, #52]	; 0x34
 801949c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801949e:	b2d2      	uxtb	r2, r2
 80194a0:	701a      	strb	r2, [r3, #0]
 80194a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	68db      	ldr	r3, [r3, #12]
 80194ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80194b0:	e00b      	b.n	80194ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80194b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194b4:	b2da      	uxtb	r2, r3
 80194b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b8:	1c59      	adds	r1, r3, #1
 80194ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80194bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80194c0:	b2d2      	uxtb	r2, r2
 80194c2:	701a      	strb	r2, [r3, #0]
 80194c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194c6:	09db      	lsrs	r3, r3, #7
 80194c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80194ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194cc:	2b7f      	cmp	r3, #127	; 0x7f
 80194ce:	d8f0      	bhi.n	80194b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80194d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d2:	1c5a      	adds	r2, r3, #1
 80194d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80194d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194d8:	b2d2      	uxtb	r2, r2
 80194da:	701a      	strb	r2, [r3, #0]
 80194dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	627b      	str	r3, [r7, #36]	; 0x24
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	691b      	ldr	r3, [r3, #16]
 80194e8:	623b      	str	r3, [r7, #32]
 80194ea:	e00b      	b.n	8019504 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80194ec:	6a3b      	ldr	r3, [r7, #32]
 80194ee:	b2da      	uxtb	r2, r3
 80194f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f2:	1c59      	adds	r1, r3, #1
 80194f4:	6279      	str	r1, [r7, #36]	; 0x24
 80194f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80194fa:	b2d2      	uxtb	r2, r2
 80194fc:	701a      	strb	r2, [r3, #0]
 80194fe:	6a3b      	ldr	r3, [r7, #32]
 8019500:	09db      	lsrs	r3, r3, #7
 8019502:	623b      	str	r3, [r7, #32]
 8019504:	6a3b      	ldr	r3, [r7, #32]
 8019506:	2b7f      	cmp	r3, #127	; 0x7f
 8019508:	d8f0      	bhi.n	80194ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 801950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801950c:	1c5a      	adds	r2, r3, #1
 801950e:	627a      	str	r2, [r7, #36]	; 0x24
 8019510:	6a3a      	ldr	r2, [r7, #32]
 8019512:	b2d2      	uxtb	r2, r2
 8019514:	701a      	strb	r2, [r3, #0]
 8019516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019518:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	61fb      	str	r3, [r7, #28]
 801951e:	2300      	movs	r3, #0
 8019520:	61bb      	str	r3, [r7, #24]
 8019522:	e00b      	b.n	801953c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8019524:	69bb      	ldr	r3, [r7, #24]
 8019526:	b2da      	uxtb	r2, r3
 8019528:	69fb      	ldr	r3, [r7, #28]
 801952a:	1c59      	adds	r1, r3, #1
 801952c:	61f9      	str	r1, [r7, #28]
 801952e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019532:	b2d2      	uxtb	r2, r2
 8019534:	701a      	strb	r2, [r3, #0]
 8019536:	69bb      	ldr	r3, [r7, #24]
 8019538:	09db      	lsrs	r3, r3, #7
 801953a:	61bb      	str	r3, [r7, #24]
 801953c:	69bb      	ldr	r3, [r7, #24]
 801953e:	2b7f      	cmp	r3, #127	; 0x7f
 8019540:	d8f0      	bhi.n	8019524 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8019542:	69fb      	ldr	r3, [r7, #28]
 8019544:	1c5a      	adds	r2, r3, #1
 8019546:	61fa      	str	r2, [r7, #28]
 8019548:	69ba      	ldr	r2, [r7, #24]
 801954a:	b2d2      	uxtb	r2, r2
 801954c:	701a      	strb	r2, [r3, #0]
 801954e:	69fb      	ldr	r3, [r7, #28]
 8019550:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8019552:	2215      	movs	r2, #21
 8019554:	68f9      	ldr	r1, [r7, #12]
 8019556:	6938      	ldr	r0, [r7, #16]
 8019558:	f7ff fab8 	bl	8018acc <_SendPacket>
  RECORD_END();
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	f383 8811 	msr	BASEPRI, r3
}
 8019562:	bf00      	nop
 8019564:	3748      	adds	r7, #72	; 0x48
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}
 801956a:	bf00      	nop
 801956c:	2001b4d8 	.word	0x2001b4d8
 8019570:	2001b4a8 	.word	0x2001b4a8

08019574 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8019574:	b580      	push	{r7, lr}
 8019576:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8019578:	4b07      	ldr	r3, [pc, #28]	; (8019598 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801957a:	6a1b      	ldr	r3, [r3, #32]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d008      	beq.n	8019592 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8019580:	4b05      	ldr	r3, [pc, #20]	; (8019598 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019582:	6a1b      	ldr	r3, [r3, #32]
 8019584:	685b      	ldr	r3, [r3, #4]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d003      	beq.n	8019592 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 801958a:	4b03      	ldr	r3, [pc, #12]	; (8019598 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801958c:	6a1b      	ldr	r3, [r3, #32]
 801958e:	685b      	ldr	r3, [r3, #4]
 8019590:	4798      	blx	r3
  }
}
 8019592:	bf00      	nop
 8019594:	bd80      	pop	{r7, pc}
 8019596:	bf00      	nop
 8019598:	2001b4a8 	.word	0x2001b4a8

0801959c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 801959c:	b580      	push	{r7, lr}
 801959e:	b086      	sub	sp, #24
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80195a4:	f3ef 8311 	mrs	r3, BASEPRI
 80195a8:	f04f 0120 	mov.w	r1, #32
 80195ac:	f381 8811 	msr	BASEPRI, r1
 80195b0:	617b      	str	r3, [r7, #20]
 80195b2:	480b      	ldr	r0, [pc, #44]	; (80195e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80195b4:	f7ff f99a 	bl	80188ec <_PreparePacket>
 80195b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80195ba:	2280      	movs	r2, #128	; 0x80
 80195bc:	6879      	ldr	r1, [r7, #4]
 80195be:	6938      	ldr	r0, [r7, #16]
 80195c0:	f7ff f944 	bl	801884c <_EncodeStr>
 80195c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80195c6:	220e      	movs	r2, #14
 80195c8:	68f9      	ldr	r1, [r7, #12]
 80195ca:	6938      	ldr	r0, [r7, #16]
 80195cc:	f7ff fa7e 	bl	8018acc <_SendPacket>
  RECORD_END();
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	f383 8811 	msr	BASEPRI, r3
}
 80195d6:	bf00      	nop
 80195d8:	3718      	adds	r7, #24
 80195da:	46bd      	mov	sp, r7
 80195dc:	bd80      	pop	{r7, pc}
 80195de:	bf00      	nop
 80195e0:	2001b4d8 	.word	0x2001b4d8

080195e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80195e4:	b590      	push	{r4, r7, lr}
 80195e6:	b083      	sub	sp, #12
 80195e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80195ea:	4b15      	ldr	r3, [pc, #84]	; (8019640 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80195ec:	6a1b      	ldr	r3, [r3, #32]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d01a      	beq.n	8019628 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80195f2:	4b13      	ldr	r3, [pc, #76]	; (8019640 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80195f4:	6a1b      	ldr	r3, [r3, #32]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d015      	beq.n	8019628 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80195fc:	4b10      	ldr	r3, [pc, #64]	; (8019640 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80195fe:	6a1b      	ldr	r3, [r3, #32]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	4798      	blx	r3
 8019604:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8019608:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 801960a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801960e:	f04f 0200 	mov.w	r2, #0
 8019612:	f04f 0300 	mov.w	r3, #0
 8019616:	000a      	movs	r2, r1
 8019618:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 801961a:	4613      	mov	r3, r2
 801961c:	461a      	mov	r2, r3
 801961e:	4621      	mov	r1, r4
 8019620:	200d      	movs	r0, #13
 8019622:	f7ff fbe7 	bl	8018df4 <SEGGER_SYSVIEW_RecordU32x2>
 8019626:	e006      	b.n	8019636 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8019628:	4b06      	ldr	r3, [pc, #24]	; (8019644 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	4619      	mov	r1, r3
 801962e:	200c      	movs	r0, #12
 8019630:	f7ff fba4 	bl	8018d7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8019634:	bf00      	nop
 8019636:	bf00      	nop
 8019638:	370c      	adds	r7, #12
 801963a:	46bd      	mov	sp, r7
 801963c:	bd90      	pop	{r4, r7, pc}
 801963e:	bf00      	nop
 8019640:	2001b4a8 	.word	0x2001b4a8
 8019644:	e0001004 	.word	0xe0001004

08019648 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801964e:	f3ef 8311 	mrs	r3, BASEPRI
 8019652:	f04f 0120 	mov.w	r1, #32
 8019656:	f381 8811 	msr	BASEPRI, r1
 801965a:	607b      	str	r3, [r7, #4]
 801965c:	4807      	ldr	r0, [pc, #28]	; (801967c <SEGGER_SYSVIEW_OnIdle+0x34>)
 801965e:	f7ff f945 	bl	80188ec <_PreparePacket>
 8019662:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8019664:	2211      	movs	r2, #17
 8019666:	6839      	ldr	r1, [r7, #0]
 8019668:	6838      	ldr	r0, [r7, #0]
 801966a:	f7ff fa2f 	bl	8018acc <_SendPacket>
  RECORD_END();
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f383 8811 	msr	BASEPRI, r3
}
 8019674:	bf00      	nop
 8019676:	3708      	adds	r7, #8
 8019678:	46bd      	mov	sp, r7
 801967a:	bd80      	pop	{r7, pc}
 801967c:	2001b4d8 	.word	0x2001b4d8

08019680 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8019680:	b580      	push	{r7, lr}
 8019682:	b088      	sub	sp, #32
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019688:	f3ef 8311 	mrs	r3, BASEPRI
 801968c:	f04f 0120 	mov.w	r1, #32
 8019690:	f381 8811 	msr	BASEPRI, r1
 8019694:	617b      	str	r3, [r7, #20]
 8019696:	4819      	ldr	r0, [pc, #100]	; (80196fc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8019698:	f7ff f928 	bl	80188ec <_PreparePacket>
 801969c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801969e:	693b      	ldr	r3, [r7, #16]
 80196a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80196a2:	4b17      	ldr	r3, [pc, #92]	; (8019700 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80196a4:	691b      	ldr	r3, [r3, #16]
 80196a6:	687a      	ldr	r2, [r7, #4]
 80196a8:	1ad3      	subs	r3, r2, r3
 80196aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	61fb      	str	r3, [r7, #28]
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	61bb      	str	r3, [r7, #24]
 80196b4:	e00b      	b.n	80196ce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	b2da      	uxtb	r2, r3
 80196ba:	69fb      	ldr	r3, [r7, #28]
 80196bc:	1c59      	adds	r1, r3, #1
 80196be:	61f9      	str	r1, [r7, #28]
 80196c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80196c4:	b2d2      	uxtb	r2, r2
 80196c6:	701a      	strb	r2, [r3, #0]
 80196c8:	69bb      	ldr	r3, [r7, #24]
 80196ca:	09db      	lsrs	r3, r3, #7
 80196cc:	61bb      	str	r3, [r7, #24]
 80196ce:	69bb      	ldr	r3, [r7, #24]
 80196d0:	2b7f      	cmp	r3, #127	; 0x7f
 80196d2:	d8f0      	bhi.n	80196b6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	1c5a      	adds	r2, r3, #1
 80196d8:	61fa      	str	r2, [r7, #28]
 80196da:	69ba      	ldr	r2, [r7, #24]
 80196dc:	b2d2      	uxtb	r2, r2
 80196de:	701a      	strb	r2, [r3, #0]
 80196e0:	69fb      	ldr	r3, [r7, #28]
 80196e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80196e4:	2208      	movs	r2, #8
 80196e6:	68f9      	ldr	r1, [r7, #12]
 80196e8:	6938      	ldr	r0, [r7, #16]
 80196ea:	f7ff f9ef 	bl	8018acc <_SendPacket>
  RECORD_END();
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	f383 8811 	msr	BASEPRI, r3
}
 80196f4:	bf00      	nop
 80196f6:	3720      	adds	r7, #32
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}
 80196fc:	2001b4d8 	.word	0x2001b4d8
 8019700:	2001b4a8 	.word	0x2001b4a8

08019704 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8019704:	b580      	push	{r7, lr}
 8019706:	b088      	sub	sp, #32
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801970c:	f3ef 8311 	mrs	r3, BASEPRI
 8019710:	f04f 0120 	mov.w	r1, #32
 8019714:	f381 8811 	msr	BASEPRI, r1
 8019718:	617b      	str	r3, [r7, #20]
 801971a:	4819      	ldr	r0, [pc, #100]	; (8019780 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 801971c:	f7ff f8e6 	bl	80188ec <_PreparePacket>
 8019720:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019726:	4b17      	ldr	r3, [pc, #92]	; (8019784 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8019728:	691b      	ldr	r3, [r3, #16]
 801972a:	687a      	ldr	r2, [r7, #4]
 801972c:	1ad3      	subs	r3, r2, r3
 801972e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	61fb      	str	r3, [r7, #28]
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	61bb      	str	r3, [r7, #24]
 8019738:	e00b      	b.n	8019752 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	b2da      	uxtb	r2, r3
 801973e:	69fb      	ldr	r3, [r7, #28]
 8019740:	1c59      	adds	r1, r3, #1
 8019742:	61f9      	str	r1, [r7, #28]
 8019744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019748:	b2d2      	uxtb	r2, r2
 801974a:	701a      	strb	r2, [r3, #0]
 801974c:	69bb      	ldr	r3, [r7, #24]
 801974e:	09db      	lsrs	r3, r3, #7
 8019750:	61bb      	str	r3, [r7, #24]
 8019752:	69bb      	ldr	r3, [r7, #24]
 8019754:	2b7f      	cmp	r3, #127	; 0x7f
 8019756:	d8f0      	bhi.n	801973a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8019758:	69fb      	ldr	r3, [r7, #28]
 801975a:	1c5a      	adds	r2, r3, #1
 801975c:	61fa      	str	r2, [r7, #28]
 801975e:	69ba      	ldr	r2, [r7, #24]
 8019760:	b2d2      	uxtb	r2, r2
 8019762:	701a      	strb	r2, [r3, #0]
 8019764:	69fb      	ldr	r3, [r7, #28]
 8019766:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8019768:	2204      	movs	r2, #4
 801976a:	68f9      	ldr	r1, [r7, #12]
 801976c:	6938      	ldr	r0, [r7, #16]
 801976e:	f7ff f9ad 	bl	8018acc <_SendPacket>
  RECORD_END();
 8019772:	697b      	ldr	r3, [r7, #20]
 8019774:	f383 8811 	msr	BASEPRI, r3
}
 8019778:	bf00      	nop
 801977a:	3720      	adds	r7, #32
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}
 8019780:	2001b4d8 	.word	0x2001b4d8
 8019784:	2001b4a8 	.word	0x2001b4a8

08019788 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8019788:	b580      	push	{r7, lr}
 801978a:	b088      	sub	sp, #32
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019790:	f3ef 8311 	mrs	r3, BASEPRI
 8019794:	f04f 0120 	mov.w	r1, #32
 8019798:	f381 8811 	msr	BASEPRI, r1
 801979c:	617b      	str	r3, [r7, #20]
 801979e:	4819      	ldr	r0, [pc, #100]	; (8019804 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80197a0:	f7ff f8a4 	bl	80188ec <_PreparePacket>
 80197a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80197aa:	4b17      	ldr	r3, [pc, #92]	; (8019808 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80197ac:	691b      	ldr	r3, [r3, #16]
 80197ae:	687a      	ldr	r2, [r7, #4]
 80197b0:	1ad3      	subs	r3, r2, r3
 80197b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	61fb      	str	r3, [r7, #28]
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	61bb      	str	r3, [r7, #24]
 80197bc:	e00b      	b.n	80197d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80197be:	69bb      	ldr	r3, [r7, #24]
 80197c0:	b2da      	uxtb	r2, r3
 80197c2:	69fb      	ldr	r3, [r7, #28]
 80197c4:	1c59      	adds	r1, r3, #1
 80197c6:	61f9      	str	r1, [r7, #28]
 80197c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80197cc:	b2d2      	uxtb	r2, r2
 80197ce:	701a      	strb	r2, [r3, #0]
 80197d0:	69bb      	ldr	r3, [r7, #24]
 80197d2:	09db      	lsrs	r3, r3, #7
 80197d4:	61bb      	str	r3, [r7, #24]
 80197d6:	69bb      	ldr	r3, [r7, #24]
 80197d8:	2b7f      	cmp	r3, #127	; 0x7f
 80197da:	d8f0      	bhi.n	80197be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	1c5a      	adds	r2, r3, #1
 80197e0:	61fa      	str	r2, [r7, #28]
 80197e2:	69ba      	ldr	r2, [r7, #24]
 80197e4:	b2d2      	uxtb	r2, r2
 80197e6:	701a      	strb	r2, [r3, #0]
 80197e8:	69fb      	ldr	r3, [r7, #28]
 80197ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80197ec:	2206      	movs	r2, #6
 80197ee:	68f9      	ldr	r1, [r7, #12]
 80197f0:	6938      	ldr	r0, [r7, #16]
 80197f2:	f7ff f96b 	bl	8018acc <_SendPacket>
  RECORD_END();
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	f383 8811 	msr	BASEPRI, r3
}
 80197fc:	bf00      	nop
 80197fe:	3720      	adds	r7, #32
 8019800:	46bd      	mov	sp, r7
 8019802:	bd80      	pop	{r7, pc}
 8019804:	2001b4d8 	.word	0x2001b4d8
 8019808:	2001b4a8 	.word	0x2001b4a8

0801980c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 801980c:	b480      	push	{r7}
 801980e:	b083      	sub	sp, #12
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8019814:	4b04      	ldr	r3, [pc, #16]	; (8019828 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8019816:	691b      	ldr	r3, [r3, #16]
 8019818:	687a      	ldr	r2, [r7, #4]
 801981a:	1ad3      	subs	r3, r2, r3
}
 801981c:	4618      	mov	r0, r3
 801981e:	370c      	adds	r7, #12
 8019820:	46bd      	mov	sp, r7
 8019822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019826:	4770      	bx	lr
 8019828:	2001b4a8 	.word	0x2001b4a8

0801982c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 801982c:	b580      	push	{r7, lr}
 801982e:	b08c      	sub	sp, #48	; 0x30
 8019830:	af00      	add	r7, sp, #0
 8019832:	4603      	mov	r3, r0
 8019834:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8019836:	4b3b      	ldr	r3, [pc, #236]	; (8019924 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d06d      	beq.n	801991a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801983e:	4b39      	ldr	r3, [pc, #228]	; (8019924 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8019844:	2300      	movs	r3, #0
 8019846:	62bb      	str	r3, [r7, #40]	; 0x28
 8019848:	e008      	b.n	801985c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801984c:	691b      	ldr	r3, [r3, #16]
 801984e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8019850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019852:	2b00      	cmp	r3, #0
 8019854:	d007      	beq.n	8019866 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8019856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019858:	3301      	adds	r3, #1
 801985a:	62bb      	str	r3, [r7, #40]	; 0x28
 801985c:	79fb      	ldrb	r3, [r7, #7]
 801985e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019860:	429a      	cmp	r2, r3
 8019862:	d3f2      	bcc.n	801984a <SEGGER_SYSVIEW_SendModule+0x1e>
 8019864:	e000      	b.n	8019868 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8019866:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8019868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801986a:	2b00      	cmp	r3, #0
 801986c:	d055      	beq.n	801991a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801986e:	f3ef 8311 	mrs	r3, BASEPRI
 8019872:	f04f 0120 	mov.w	r1, #32
 8019876:	f381 8811 	msr	BASEPRI, r1
 801987a:	617b      	str	r3, [r7, #20]
 801987c:	482a      	ldr	r0, [pc, #168]	; (8019928 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801987e:	f7ff f835 	bl	80188ec <_PreparePacket>
 8019882:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8019884:	693b      	ldr	r3, [r7, #16]
 8019886:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	627b      	str	r3, [r7, #36]	; 0x24
 801988c:	79fb      	ldrb	r3, [r7, #7]
 801988e:	623b      	str	r3, [r7, #32]
 8019890:	e00b      	b.n	80198aa <SEGGER_SYSVIEW_SendModule+0x7e>
 8019892:	6a3b      	ldr	r3, [r7, #32]
 8019894:	b2da      	uxtb	r2, r3
 8019896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019898:	1c59      	adds	r1, r3, #1
 801989a:	6279      	str	r1, [r7, #36]	; 0x24
 801989c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80198a0:	b2d2      	uxtb	r2, r2
 80198a2:	701a      	strb	r2, [r3, #0]
 80198a4:	6a3b      	ldr	r3, [r7, #32]
 80198a6:	09db      	lsrs	r3, r3, #7
 80198a8:	623b      	str	r3, [r7, #32]
 80198aa:	6a3b      	ldr	r3, [r7, #32]
 80198ac:	2b7f      	cmp	r3, #127	; 0x7f
 80198ae:	d8f0      	bhi.n	8019892 <SEGGER_SYSVIEW_SendModule+0x66>
 80198b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b2:	1c5a      	adds	r2, r3, #1
 80198b4:	627a      	str	r2, [r7, #36]	; 0x24
 80198b6:	6a3a      	ldr	r2, [r7, #32]
 80198b8:	b2d2      	uxtb	r2, r2
 80198ba:	701a      	strb	r2, [r3, #0]
 80198bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198be:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	61fb      	str	r3, [r7, #28]
 80198c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c6:	689b      	ldr	r3, [r3, #8]
 80198c8:	61bb      	str	r3, [r7, #24]
 80198ca:	e00b      	b.n	80198e4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80198cc:	69bb      	ldr	r3, [r7, #24]
 80198ce:	b2da      	uxtb	r2, r3
 80198d0:	69fb      	ldr	r3, [r7, #28]
 80198d2:	1c59      	adds	r1, r3, #1
 80198d4:	61f9      	str	r1, [r7, #28]
 80198d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80198da:	b2d2      	uxtb	r2, r2
 80198dc:	701a      	strb	r2, [r3, #0]
 80198de:	69bb      	ldr	r3, [r7, #24]
 80198e0:	09db      	lsrs	r3, r3, #7
 80198e2:	61bb      	str	r3, [r7, #24]
 80198e4:	69bb      	ldr	r3, [r7, #24]
 80198e6:	2b7f      	cmp	r3, #127	; 0x7f
 80198e8:	d8f0      	bhi.n	80198cc <SEGGER_SYSVIEW_SendModule+0xa0>
 80198ea:	69fb      	ldr	r3, [r7, #28]
 80198ec:	1c5a      	adds	r2, r3, #1
 80198ee:	61fa      	str	r2, [r7, #28]
 80198f0:	69ba      	ldr	r2, [r7, #24]
 80198f2:	b2d2      	uxtb	r2, r2
 80198f4:	701a      	strb	r2, [r3, #0]
 80198f6:	69fb      	ldr	r3, [r7, #28]
 80198f8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80198fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	2280      	movs	r2, #128	; 0x80
 8019900:	4619      	mov	r1, r3
 8019902:	68f8      	ldr	r0, [r7, #12]
 8019904:	f7fe ffa2 	bl	801884c <_EncodeStr>
 8019908:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801990a:	2216      	movs	r2, #22
 801990c:	68f9      	ldr	r1, [r7, #12]
 801990e:	6938      	ldr	r0, [r7, #16]
 8019910:	f7ff f8dc 	bl	8018acc <_SendPacket>
      RECORD_END();
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 801991a:	bf00      	nop
 801991c:	3730      	adds	r7, #48	; 0x30
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
 8019922:	bf00      	nop
 8019924:	2001b4d0 	.word	0x2001b4d0
 8019928:	2001b4d8 	.word	0x2001b4d8

0801992c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8019932:	4b0c      	ldr	r3, [pc, #48]	; (8019964 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d00f      	beq.n	801995a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801993a:	4b0a      	ldr	r3, [pc, #40]	; (8019964 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	68db      	ldr	r3, [r3, #12]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d002      	beq.n	801994e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	68db      	ldr	r3, [r3, #12]
 801994c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	691b      	ldr	r3, [r3, #16]
 8019952:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d1f2      	bne.n	8019940 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801995a:	bf00      	nop
 801995c:	3708      	adds	r7, #8
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	2001b4d0 	.word	0x2001b4d0

08019968 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8019968:	b580      	push	{r7, lr}
 801996a:	b086      	sub	sp, #24
 801996c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801996e:	f3ef 8311 	mrs	r3, BASEPRI
 8019972:	f04f 0120 	mov.w	r1, #32
 8019976:	f381 8811 	msr	BASEPRI, r1
 801997a:	60fb      	str	r3, [r7, #12]
 801997c:	4817      	ldr	r0, [pc, #92]	; (80199dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801997e:	f7fe ffb5 	bl	80188ec <_PreparePacket>
 8019982:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	617b      	str	r3, [r7, #20]
 801998c:	4b14      	ldr	r3, [pc, #80]	; (80199e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801998e:	781b      	ldrb	r3, [r3, #0]
 8019990:	613b      	str	r3, [r7, #16]
 8019992:	e00b      	b.n	80199ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	b2da      	uxtb	r2, r3
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	1c59      	adds	r1, r3, #1
 801999c:	6179      	str	r1, [r7, #20]
 801999e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80199a2:	b2d2      	uxtb	r2, r2
 80199a4:	701a      	strb	r2, [r3, #0]
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	09db      	lsrs	r3, r3, #7
 80199aa:	613b      	str	r3, [r7, #16]
 80199ac:	693b      	ldr	r3, [r7, #16]
 80199ae:	2b7f      	cmp	r3, #127	; 0x7f
 80199b0:	d8f0      	bhi.n	8019994 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	1c5a      	adds	r2, r3, #1
 80199b6:	617a      	str	r2, [r7, #20]
 80199b8:	693a      	ldr	r2, [r7, #16]
 80199ba:	b2d2      	uxtb	r2, r2
 80199bc:	701a      	strb	r2, [r3, #0]
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80199c2:	221b      	movs	r2, #27
 80199c4:	6879      	ldr	r1, [r7, #4]
 80199c6:	68b8      	ldr	r0, [r7, #8]
 80199c8:	f7ff f880 	bl	8018acc <_SendPacket>
  RECORD_END();
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	f383 8811 	msr	BASEPRI, r3
}
 80199d2:	bf00      	nop
 80199d4:	3718      	adds	r7, #24
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd80      	pop	{r7, pc}
 80199da:	bf00      	nop
 80199dc:	2001b4d8 	.word	0x2001b4d8
 80199e0:	2001b4d4 	.word	0x2001b4d4

080199e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b08a      	sub	sp, #40	; 0x28
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80199ec:	f3ef 8311 	mrs	r3, BASEPRI
 80199f0:	f04f 0120 	mov.w	r1, #32
 80199f4:	f381 8811 	msr	BASEPRI, r1
 80199f8:	617b      	str	r3, [r7, #20]
 80199fa:	4827      	ldr	r0, [pc, #156]	; (8019a98 <SEGGER_SYSVIEW_Warn+0xb4>)
 80199fc:	f7fe ff76 	bl	80188ec <_PreparePacket>
 8019a00:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019a02:	2280      	movs	r2, #128	; 0x80
 8019a04:	6879      	ldr	r1, [r7, #4]
 8019a06:	6938      	ldr	r0, [r7, #16]
 8019a08:	f7fe ff20 	bl	801884c <_EncodeStr>
 8019a0c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	627b      	str	r3, [r7, #36]	; 0x24
 8019a12:	2301      	movs	r3, #1
 8019a14:	623b      	str	r3, [r7, #32]
 8019a16:	e00b      	b.n	8019a30 <SEGGER_SYSVIEW_Warn+0x4c>
 8019a18:	6a3b      	ldr	r3, [r7, #32]
 8019a1a:	b2da      	uxtb	r2, r3
 8019a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a1e:	1c59      	adds	r1, r3, #1
 8019a20:	6279      	str	r1, [r7, #36]	; 0x24
 8019a22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019a26:	b2d2      	uxtb	r2, r2
 8019a28:	701a      	strb	r2, [r3, #0]
 8019a2a:	6a3b      	ldr	r3, [r7, #32]
 8019a2c:	09db      	lsrs	r3, r3, #7
 8019a2e:	623b      	str	r3, [r7, #32]
 8019a30:	6a3b      	ldr	r3, [r7, #32]
 8019a32:	2b7f      	cmp	r3, #127	; 0x7f
 8019a34:	d8f0      	bhi.n	8019a18 <SEGGER_SYSVIEW_Warn+0x34>
 8019a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a38:	1c5a      	adds	r2, r3, #1
 8019a3a:	627a      	str	r2, [r7, #36]	; 0x24
 8019a3c:	6a3a      	ldr	r2, [r7, #32]
 8019a3e:	b2d2      	uxtb	r2, r2
 8019a40:	701a      	strb	r2, [r3, #0]
 8019a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	61fb      	str	r3, [r7, #28]
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	61bb      	str	r3, [r7, #24]
 8019a4e:	e00b      	b.n	8019a68 <SEGGER_SYSVIEW_Warn+0x84>
 8019a50:	69bb      	ldr	r3, [r7, #24]
 8019a52:	b2da      	uxtb	r2, r3
 8019a54:	69fb      	ldr	r3, [r7, #28]
 8019a56:	1c59      	adds	r1, r3, #1
 8019a58:	61f9      	str	r1, [r7, #28]
 8019a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019a5e:	b2d2      	uxtb	r2, r2
 8019a60:	701a      	strb	r2, [r3, #0]
 8019a62:	69bb      	ldr	r3, [r7, #24]
 8019a64:	09db      	lsrs	r3, r3, #7
 8019a66:	61bb      	str	r3, [r7, #24]
 8019a68:	69bb      	ldr	r3, [r7, #24]
 8019a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8019a6c:	d8f0      	bhi.n	8019a50 <SEGGER_SYSVIEW_Warn+0x6c>
 8019a6e:	69fb      	ldr	r3, [r7, #28]
 8019a70:	1c5a      	adds	r2, r3, #1
 8019a72:	61fa      	str	r2, [r7, #28]
 8019a74:	69ba      	ldr	r2, [r7, #24]
 8019a76:	b2d2      	uxtb	r2, r2
 8019a78:	701a      	strb	r2, [r3, #0]
 8019a7a:	69fb      	ldr	r3, [r7, #28]
 8019a7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8019a7e:	221a      	movs	r2, #26
 8019a80:	68f9      	ldr	r1, [r7, #12]
 8019a82:	6938      	ldr	r0, [r7, #16]
 8019a84:	f7ff f822 	bl	8018acc <_SendPacket>
  RECORD_END();
 8019a88:	697b      	ldr	r3, [r7, #20]
 8019a8a:	f383 8811 	msr	BASEPRI, r3
}
 8019a8e:	bf00      	nop
 8019a90:	3728      	adds	r7, #40	; 0x28
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd80      	pop	{r7, pc}
 8019a96:	bf00      	nop
 8019a98:	2001b4d8 	.word	0x2001b4d8

08019a9c <arm_pid_init_f32>:
 8019a9c:	edd0 6a08 	vldr	s13, [r0, #32]
 8019aa0:	edd0 7a06 	vldr	s15, [r0, #24]
 8019aa4:	ed90 7a07 	vldr	s14, [r0, #28]
 8019aa8:	edc0 6a02 	vstr	s13, [r0, #8]
 8019aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8019ab0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8019ab4:	eef1 7a67 	vneg.f32	s15, s15
 8019ab8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019abc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019ac0:	ed80 7a00 	vstr	s14, [r0]
 8019ac4:	edc0 7a01 	vstr	s15, [r0, #4]
 8019ac8:	b901      	cbnz	r1, 8019acc <arm_pid_init_f32+0x30>
 8019aca:	4770      	bx	lr
 8019acc:	2300      	movs	r3, #0
 8019ace:	60c3      	str	r3, [r0, #12]
 8019ad0:	6103      	str	r3, [r0, #16]
 8019ad2:	6143      	str	r3, [r0, #20]
 8019ad4:	4770      	bx	lr
 8019ad6:	bf00      	nop

08019ad8 <__errno>:
 8019ad8:	4b01      	ldr	r3, [pc, #4]	; (8019ae0 <__errno+0x8>)
 8019ada:	6818      	ldr	r0, [r3, #0]
 8019adc:	4770      	bx	lr
 8019ade:	bf00      	nop
 8019ae0:	20001444 	.word	0x20001444

08019ae4 <__libc_init_array>:
 8019ae4:	b570      	push	{r4, r5, r6, lr}
 8019ae6:	4d0d      	ldr	r5, [pc, #52]	; (8019b1c <__libc_init_array+0x38>)
 8019ae8:	4c0d      	ldr	r4, [pc, #52]	; (8019b20 <__libc_init_array+0x3c>)
 8019aea:	1b64      	subs	r4, r4, r5
 8019aec:	10a4      	asrs	r4, r4, #2
 8019aee:	2600      	movs	r6, #0
 8019af0:	42a6      	cmp	r6, r4
 8019af2:	d109      	bne.n	8019b08 <__libc_init_array+0x24>
 8019af4:	4d0b      	ldr	r5, [pc, #44]	; (8019b24 <__libc_init_array+0x40>)
 8019af6:	4c0c      	ldr	r4, [pc, #48]	; (8019b28 <__libc_init_array+0x44>)
 8019af8:	f000 fe22 	bl	801a740 <_init>
 8019afc:	1b64      	subs	r4, r4, r5
 8019afe:	10a4      	asrs	r4, r4, #2
 8019b00:	2600      	movs	r6, #0
 8019b02:	42a6      	cmp	r6, r4
 8019b04:	d105      	bne.n	8019b12 <__libc_init_array+0x2e>
 8019b06:	bd70      	pop	{r4, r5, r6, pc}
 8019b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b0c:	4798      	blx	r3
 8019b0e:	3601      	adds	r6, #1
 8019b10:	e7ee      	b.n	8019af0 <__libc_init_array+0xc>
 8019b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b16:	4798      	blx	r3
 8019b18:	3601      	adds	r6, #1
 8019b1a:	e7f2      	b.n	8019b02 <__libc_init_array+0x1e>
 8019b1c:	0801afb0 	.word	0x0801afb0
 8019b20:	0801afb0 	.word	0x0801afb0
 8019b24:	0801afb0 	.word	0x0801afb0
 8019b28:	0801afb4 	.word	0x0801afb4

08019b2c <__retarget_lock_acquire_recursive>:
 8019b2c:	4770      	bx	lr

08019b2e <__retarget_lock_release_recursive>:
 8019b2e:	4770      	bx	lr

08019b30 <memcmp>:
 8019b30:	b530      	push	{r4, r5, lr}
 8019b32:	3901      	subs	r1, #1
 8019b34:	2400      	movs	r4, #0
 8019b36:	42a2      	cmp	r2, r4
 8019b38:	d101      	bne.n	8019b3e <memcmp+0xe>
 8019b3a:	2000      	movs	r0, #0
 8019b3c:	e005      	b.n	8019b4a <memcmp+0x1a>
 8019b3e:	5d03      	ldrb	r3, [r0, r4]
 8019b40:	3401      	adds	r4, #1
 8019b42:	5d0d      	ldrb	r5, [r1, r4]
 8019b44:	42ab      	cmp	r3, r5
 8019b46:	d0f6      	beq.n	8019b36 <memcmp+0x6>
 8019b48:	1b58      	subs	r0, r3, r5
 8019b4a:	bd30      	pop	{r4, r5, pc}

08019b4c <memcpy>:
 8019b4c:	440a      	add	r2, r1
 8019b4e:	4291      	cmp	r1, r2
 8019b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8019b54:	d100      	bne.n	8019b58 <memcpy+0xc>
 8019b56:	4770      	bx	lr
 8019b58:	b510      	push	{r4, lr}
 8019b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019b62:	4291      	cmp	r1, r2
 8019b64:	d1f9      	bne.n	8019b5a <memcpy+0xe>
 8019b66:	bd10      	pop	{r4, pc}

08019b68 <memset>:
 8019b68:	4402      	add	r2, r0
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	d100      	bne.n	8019b72 <memset+0xa>
 8019b70:	4770      	bx	lr
 8019b72:	f803 1b01 	strb.w	r1, [r3], #1
 8019b76:	e7f9      	b.n	8019b6c <memset+0x4>

08019b78 <cleanup_glue>:
 8019b78:	b538      	push	{r3, r4, r5, lr}
 8019b7a:	460c      	mov	r4, r1
 8019b7c:	6809      	ldr	r1, [r1, #0]
 8019b7e:	4605      	mov	r5, r0
 8019b80:	b109      	cbz	r1, 8019b86 <cleanup_glue+0xe>
 8019b82:	f7ff fff9 	bl	8019b78 <cleanup_glue>
 8019b86:	4621      	mov	r1, r4
 8019b88:	4628      	mov	r0, r5
 8019b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b8e:	f000 b869 	b.w	8019c64 <_free_r>
	...

08019b94 <_reclaim_reent>:
 8019b94:	4b2c      	ldr	r3, [pc, #176]	; (8019c48 <_reclaim_reent+0xb4>)
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	4283      	cmp	r3, r0
 8019b9a:	b570      	push	{r4, r5, r6, lr}
 8019b9c:	4604      	mov	r4, r0
 8019b9e:	d051      	beq.n	8019c44 <_reclaim_reent+0xb0>
 8019ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019ba2:	b143      	cbz	r3, 8019bb6 <_reclaim_reent+0x22>
 8019ba4:	68db      	ldr	r3, [r3, #12]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d14a      	bne.n	8019c40 <_reclaim_reent+0xac>
 8019baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019bac:	6819      	ldr	r1, [r3, #0]
 8019bae:	b111      	cbz	r1, 8019bb6 <_reclaim_reent+0x22>
 8019bb0:	4620      	mov	r0, r4
 8019bb2:	f000 f857 	bl	8019c64 <_free_r>
 8019bb6:	6961      	ldr	r1, [r4, #20]
 8019bb8:	b111      	cbz	r1, 8019bc0 <_reclaim_reent+0x2c>
 8019bba:	4620      	mov	r0, r4
 8019bbc:	f000 f852 	bl	8019c64 <_free_r>
 8019bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019bc2:	b111      	cbz	r1, 8019bca <_reclaim_reent+0x36>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f000 f84d 	bl	8019c64 <_free_r>
 8019bca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019bcc:	b111      	cbz	r1, 8019bd4 <_reclaim_reent+0x40>
 8019bce:	4620      	mov	r0, r4
 8019bd0:	f000 f848 	bl	8019c64 <_free_r>
 8019bd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019bd6:	b111      	cbz	r1, 8019bde <_reclaim_reent+0x4a>
 8019bd8:	4620      	mov	r0, r4
 8019bda:	f000 f843 	bl	8019c64 <_free_r>
 8019bde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019be0:	b111      	cbz	r1, 8019be8 <_reclaim_reent+0x54>
 8019be2:	4620      	mov	r0, r4
 8019be4:	f000 f83e 	bl	8019c64 <_free_r>
 8019be8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019bea:	b111      	cbz	r1, 8019bf2 <_reclaim_reent+0x5e>
 8019bec:	4620      	mov	r0, r4
 8019bee:	f000 f839 	bl	8019c64 <_free_r>
 8019bf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019bf4:	b111      	cbz	r1, 8019bfc <_reclaim_reent+0x68>
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	f000 f834 	bl	8019c64 <_free_r>
 8019bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019bfe:	b111      	cbz	r1, 8019c06 <_reclaim_reent+0x72>
 8019c00:	4620      	mov	r0, r4
 8019c02:	f000 f82f 	bl	8019c64 <_free_r>
 8019c06:	69a3      	ldr	r3, [r4, #24]
 8019c08:	b1e3      	cbz	r3, 8019c44 <_reclaim_reent+0xb0>
 8019c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	4798      	blx	r3
 8019c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019c12:	b1b9      	cbz	r1, 8019c44 <_reclaim_reent+0xb0>
 8019c14:	4620      	mov	r0, r4
 8019c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c1a:	f7ff bfad 	b.w	8019b78 <cleanup_glue>
 8019c1e:	5949      	ldr	r1, [r1, r5]
 8019c20:	b941      	cbnz	r1, 8019c34 <_reclaim_reent+0xa0>
 8019c22:	3504      	adds	r5, #4
 8019c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c26:	2d80      	cmp	r5, #128	; 0x80
 8019c28:	68d9      	ldr	r1, [r3, #12]
 8019c2a:	d1f8      	bne.n	8019c1e <_reclaim_reent+0x8a>
 8019c2c:	4620      	mov	r0, r4
 8019c2e:	f000 f819 	bl	8019c64 <_free_r>
 8019c32:	e7ba      	b.n	8019baa <_reclaim_reent+0x16>
 8019c34:	680e      	ldr	r6, [r1, #0]
 8019c36:	4620      	mov	r0, r4
 8019c38:	f000 f814 	bl	8019c64 <_free_r>
 8019c3c:	4631      	mov	r1, r6
 8019c3e:	e7ef      	b.n	8019c20 <_reclaim_reent+0x8c>
 8019c40:	2500      	movs	r5, #0
 8019c42:	e7ef      	b.n	8019c24 <_reclaim_reent+0x90>
 8019c44:	bd70      	pop	{r4, r5, r6, pc}
 8019c46:	bf00      	nop
 8019c48:	20001444 	.word	0x20001444

08019c4c <__malloc_lock>:
 8019c4c:	4801      	ldr	r0, [pc, #4]	; (8019c54 <__malloc_lock+0x8>)
 8019c4e:	f7ff bf6d 	b.w	8019b2c <__retarget_lock_acquire_recursive>
 8019c52:	bf00      	nop
 8019c54:	2001e9a4 	.word	0x2001e9a4

08019c58 <__malloc_unlock>:
 8019c58:	4801      	ldr	r0, [pc, #4]	; (8019c60 <__malloc_unlock+0x8>)
 8019c5a:	f7ff bf68 	b.w	8019b2e <__retarget_lock_release_recursive>
 8019c5e:	bf00      	nop
 8019c60:	2001e9a4 	.word	0x2001e9a4

08019c64 <_free_r>:
 8019c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c66:	2900      	cmp	r1, #0
 8019c68:	d048      	beq.n	8019cfc <_free_r+0x98>
 8019c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c6e:	9001      	str	r0, [sp, #4]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	f1a1 0404 	sub.w	r4, r1, #4
 8019c76:	bfb8      	it	lt
 8019c78:	18e4      	addlt	r4, r4, r3
 8019c7a:	f7ff ffe7 	bl	8019c4c <__malloc_lock>
 8019c7e:	4a20      	ldr	r2, [pc, #128]	; (8019d00 <_free_r+0x9c>)
 8019c80:	9801      	ldr	r0, [sp, #4]
 8019c82:	6813      	ldr	r3, [r2, #0]
 8019c84:	4615      	mov	r5, r2
 8019c86:	b933      	cbnz	r3, 8019c96 <_free_r+0x32>
 8019c88:	6063      	str	r3, [r4, #4]
 8019c8a:	6014      	str	r4, [r2, #0]
 8019c8c:	b003      	add	sp, #12
 8019c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c92:	f7ff bfe1 	b.w	8019c58 <__malloc_unlock>
 8019c96:	42a3      	cmp	r3, r4
 8019c98:	d90b      	bls.n	8019cb2 <_free_r+0x4e>
 8019c9a:	6821      	ldr	r1, [r4, #0]
 8019c9c:	1862      	adds	r2, r4, r1
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	bf04      	itt	eq
 8019ca2:	681a      	ldreq	r2, [r3, #0]
 8019ca4:	685b      	ldreq	r3, [r3, #4]
 8019ca6:	6063      	str	r3, [r4, #4]
 8019ca8:	bf04      	itt	eq
 8019caa:	1852      	addeq	r2, r2, r1
 8019cac:	6022      	streq	r2, [r4, #0]
 8019cae:	602c      	str	r4, [r5, #0]
 8019cb0:	e7ec      	b.n	8019c8c <_free_r+0x28>
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	685b      	ldr	r3, [r3, #4]
 8019cb6:	b10b      	cbz	r3, 8019cbc <_free_r+0x58>
 8019cb8:	42a3      	cmp	r3, r4
 8019cba:	d9fa      	bls.n	8019cb2 <_free_r+0x4e>
 8019cbc:	6811      	ldr	r1, [r2, #0]
 8019cbe:	1855      	adds	r5, r2, r1
 8019cc0:	42a5      	cmp	r5, r4
 8019cc2:	d10b      	bne.n	8019cdc <_free_r+0x78>
 8019cc4:	6824      	ldr	r4, [r4, #0]
 8019cc6:	4421      	add	r1, r4
 8019cc8:	1854      	adds	r4, r2, r1
 8019cca:	42a3      	cmp	r3, r4
 8019ccc:	6011      	str	r1, [r2, #0]
 8019cce:	d1dd      	bne.n	8019c8c <_free_r+0x28>
 8019cd0:	681c      	ldr	r4, [r3, #0]
 8019cd2:	685b      	ldr	r3, [r3, #4]
 8019cd4:	6053      	str	r3, [r2, #4]
 8019cd6:	4421      	add	r1, r4
 8019cd8:	6011      	str	r1, [r2, #0]
 8019cda:	e7d7      	b.n	8019c8c <_free_r+0x28>
 8019cdc:	d902      	bls.n	8019ce4 <_free_r+0x80>
 8019cde:	230c      	movs	r3, #12
 8019ce0:	6003      	str	r3, [r0, #0]
 8019ce2:	e7d3      	b.n	8019c8c <_free_r+0x28>
 8019ce4:	6825      	ldr	r5, [r4, #0]
 8019ce6:	1961      	adds	r1, r4, r5
 8019ce8:	428b      	cmp	r3, r1
 8019cea:	bf04      	itt	eq
 8019cec:	6819      	ldreq	r1, [r3, #0]
 8019cee:	685b      	ldreq	r3, [r3, #4]
 8019cf0:	6063      	str	r3, [r4, #4]
 8019cf2:	bf04      	itt	eq
 8019cf4:	1949      	addeq	r1, r1, r5
 8019cf6:	6021      	streq	r1, [r4, #0]
 8019cf8:	6054      	str	r4, [r2, #4]
 8019cfa:	e7c7      	b.n	8019c8c <_free_r+0x28>
 8019cfc:	b003      	add	sp, #12
 8019cfe:	bd30      	pop	{r4, r5, pc}
 8019d00:	2001b5bc 	.word	0x2001b5bc

08019d04 <fmax>:
 8019d04:	b508      	push	{r3, lr}
 8019d06:	ed2d 8b04 	vpush	{d8-d9}
 8019d0a:	eeb0 8a40 	vmov.f32	s16, s0
 8019d0e:	eef0 8a60 	vmov.f32	s17, s1
 8019d12:	eeb0 9a41 	vmov.f32	s18, s2
 8019d16:	eef0 9a61 	vmov.f32	s19, s3
 8019d1a:	f000 f81b 	bl	8019d54 <__fpclassifyd>
 8019d1e:	b168      	cbz	r0, 8019d3c <fmax+0x38>
 8019d20:	eeb0 0a49 	vmov.f32	s0, s18
 8019d24:	eef0 0a69 	vmov.f32	s1, s19
 8019d28:	f000 f814 	bl	8019d54 <__fpclassifyd>
 8019d2c:	b150      	cbz	r0, 8019d44 <fmax+0x40>
 8019d2e:	ec53 2b19 	vmov	r2, r3, d9
 8019d32:	ec51 0b18 	vmov	r0, r1, d8
 8019d36:	f7e6 fee1 	bl	8000afc <__aeabi_dcmpgt>
 8019d3a:	b918      	cbnz	r0, 8019d44 <fmax+0x40>
 8019d3c:	eeb0 8a49 	vmov.f32	s16, s18
 8019d40:	eef0 8a69 	vmov.f32	s17, s19
 8019d44:	eeb0 0a48 	vmov.f32	s0, s16
 8019d48:	eef0 0a68 	vmov.f32	s1, s17
 8019d4c:	ecbd 8b04 	vpop	{d8-d9}
 8019d50:	bd08      	pop	{r3, pc}
	...

08019d54 <__fpclassifyd>:
 8019d54:	ec51 0b10 	vmov	r0, r1, d0
 8019d58:	b510      	push	{r4, lr}
 8019d5a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8019d5e:	460b      	mov	r3, r1
 8019d60:	d019      	beq.n	8019d96 <__fpclassifyd+0x42>
 8019d62:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8019d66:	490e      	ldr	r1, [pc, #56]	; (8019da0 <__fpclassifyd+0x4c>)
 8019d68:	428a      	cmp	r2, r1
 8019d6a:	d90e      	bls.n	8019d8a <__fpclassifyd+0x36>
 8019d6c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8019d70:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8019d74:	428a      	cmp	r2, r1
 8019d76:	d908      	bls.n	8019d8a <__fpclassifyd+0x36>
 8019d78:	4a0a      	ldr	r2, [pc, #40]	; (8019da4 <__fpclassifyd+0x50>)
 8019d7a:	4213      	tst	r3, r2
 8019d7c:	d007      	beq.n	8019d8e <__fpclassifyd+0x3a>
 8019d7e:	4294      	cmp	r4, r2
 8019d80:	d107      	bne.n	8019d92 <__fpclassifyd+0x3e>
 8019d82:	fab0 f080 	clz	r0, r0
 8019d86:	0940      	lsrs	r0, r0, #5
 8019d88:	bd10      	pop	{r4, pc}
 8019d8a:	2004      	movs	r0, #4
 8019d8c:	e7fc      	b.n	8019d88 <__fpclassifyd+0x34>
 8019d8e:	2003      	movs	r0, #3
 8019d90:	e7fa      	b.n	8019d88 <__fpclassifyd+0x34>
 8019d92:	2000      	movs	r0, #0
 8019d94:	e7f8      	b.n	8019d88 <__fpclassifyd+0x34>
 8019d96:	2800      	cmp	r0, #0
 8019d98:	d1ee      	bne.n	8019d78 <__fpclassifyd+0x24>
 8019d9a:	2002      	movs	r0, #2
 8019d9c:	e7f4      	b.n	8019d88 <__fpclassifyd+0x34>
 8019d9e:	bf00      	nop
 8019da0:	7fdfffff 	.word	0x7fdfffff
 8019da4:	7ff00000 	.word	0x7ff00000

08019da8 <exp>:
 8019da8:	b538      	push	{r3, r4, r5, lr}
 8019daa:	ed2d 8b02 	vpush	{d8}
 8019dae:	ec55 4b10 	vmov	r4, r5, d0
 8019db2:	f000 f8c5 	bl	8019f40 <__ieee754_exp>
 8019db6:	4b22      	ldr	r3, [pc, #136]	; (8019e40 <exp+0x98>)
 8019db8:	eeb0 8a40 	vmov.f32	s16, s0
 8019dbc:	eef0 8a60 	vmov.f32	s17, s1
 8019dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	d012      	beq.n	8019dee <exp+0x46>
 8019dc8:	ec45 4b10 	vmov	d0, r4, r5
 8019dcc:	f000 fca2 	bl	801a714 <finite>
 8019dd0:	b168      	cbz	r0, 8019dee <exp+0x46>
 8019dd2:	a313      	add	r3, pc, #76	; (adr r3, 8019e20 <exp+0x78>)
 8019dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd8:	4620      	mov	r0, r4
 8019dda:	4629      	mov	r1, r5
 8019ddc:	f7e6 fe8e 	bl	8000afc <__aeabi_dcmpgt>
 8019de0:	b160      	cbz	r0, 8019dfc <exp+0x54>
 8019de2:	f7ff fe79 	bl	8019ad8 <__errno>
 8019de6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8019e28 <exp+0x80>
 8019dea:	2322      	movs	r3, #34	; 0x22
 8019dec:	6003      	str	r3, [r0, #0]
 8019dee:	eeb0 0a48 	vmov.f32	s0, s16
 8019df2:	eef0 0a68 	vmov.f32	s1, s17
 8019df6:	ecbd 8b02 	vpop	{d8}
 8019dfa:	bd38      	pop	{r3, r4, r5, pc}
 8019dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8019e30 <exp+0x88>)
 8019dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e02:	4620      	mov	r0, r4
 8019e04:	4629      	mov	r1, r5
 8019e06:	f7e6 fe5b 	bl	8000ac0 <__aeabi_dcmplt>
 8019e0a:	2800      	cmp	r0, #0
 8019e0c:	d0ef      	beq.n	8019dee <exp+0x46>
 8019e0e:	f7ff fe63 	bl	8019ad8 <__errno>
 8019e12:	2322      	movs	r3, #34	; 0x22
 8019e14:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8019e38 <exp+0x90>
 8019e18:	6003      	str	r3, [r0, #0]
 8019e1a:	e7e8      	b.n	8019dee <exp+0x46>
 8019e1c:	f3af 8000 	nop.w
 8019e20:	fefa39ef 	.word	0xfefa39ef
 8019e24:	40862e42 	.word	0x40862e42
 8019e28:	00000000 	.word	0x00000000
 8019e2c:	7ff00000 	.word	0x7ff00000
 8019e30:	d52d3051 	.word	0xd52d3051
 8019e34:	c0874910 	.word	0xc0874910
	...
 8019e40:	200014a8 	.word	0x200014a8
 8019e44:	00000000 	.word	0x00000000

08019e48 <log>:
 8019e48:	b538      	push	{r3, r4, r5, lr}
 8019e4a:	ed2d 8b02 	vpush	{d8}
 8019e4e:	ec55 4b10 	vmov	r4, r5, d0
 8019e52:	f000 f9f1 	bl	801a238 <__ieee754_log>
 8019e56:	4b1e      	ldr	r3, [pc, #120]	; (8019ed0 <log+0x88>)
 8019e58:	eeb0 8a40 	vmov.f32	s16, s0
 8019e5c:	eef0 8a60 	vmov.f32	s17, s1
 8019e60:	f993 3000 	ldrsb.w	r3, [r3]
 8019e64:	3301      	adds	r3, #1
 8019e66:	d01a      	beq.n	8019e9e <log+0x56>
 8019e68:	4622      	mov	r2, r4
 8019e6a:	462b      	mov	r3, r5
 8019e6c:	4620      	mov	r0, r4
 8019e6e:	4629      	mov	r1, r5
 8019e70:	f7e6 fe4e 	bl	8000b10 <__aeabi_dcmpun>
 8019e74:	b998      	cbnz	r0, 8019e9e <log+0x56>
 8019e76:	2200      	movs	r2, #0
 8019e78:	2300      	movs	r3, #0
 8019e7a:	4620      	mov	r0, r4
 8019e7c:	4629      	mov	r1, r5
 8019e7e:	f7e6 fe3d 	bl	8000afc <__aeabi_dcmpgt>
 8019e82:	b960      	cbnz	r0, 8019e9e <log+0x56>
 8019e84:	2200      	movs	r2, #0
 8019e86:	2300      	movs	r3, #0
 8019e88:	4620      	mov	r0, r4
 8019e8a:	4629      	mov	r1, r5
 8019e8c:	f7e6 fe0e 	bl	8000aac <__aeabi_dcmpeq>
 8019e90:	b160      	cbz	r0, 8019eac <log+0x64>
 8019e92:	f7ff fe21 	bl	8019ad8 <__errno>
 8019e96:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8019ec8 <log+0x80>
 8019e9a:	2322      	movs	r3, #34	; 0x22
 8019e9c:	6003      	str	r3, [r0, #0]
 8019e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8019ea2:	eef0 0a68 	vmov.f32	s1, s17
 8019ea6:	ecbd 8b02 	vpop	{d8}
 8019eaa:	bd38      	pop	{r3, r4, r5, pc}
 8019eac:	f7ff fe14 	bl	8019ad8 <__errno>
 8019eb0:	ecbd 8b02 	vpop	{d8}
 8019eb4:	2321      	movs	r3, #33	; 0x21
 8019eb6:	6003      	str	r3, [r0, #0]
 8019eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ebc:	4805      	ldr	r0, [pc, #20]	; (8019ed4 <log+0x8c>)
 8019ebe:	f000 bc37 	b.w	801a730 <nan>
 8019ec2:	bf00      	nop
 8019ec4:	f3af 8000 	nop.w
 8019ec8:	00000000 	.word	0x00000000
 8019ecc:	fff00000 	.word	0xfff00000
 8019ed0:	200014a8 	.word	0x200014a8
 8019ed4:	0801af74 	.word	0x0801af74

08019ed8 <sqrt>:
 8019ed8:	b538      	push	{r3, r4, r5, lr}
 8019eda:	ed2d 8b02 	vpush	{d8}
 8019ede:	ec55 4b10 	vmov	r4, r5, d0
 8019ee2:	f000 fb63 	bl	801a5ac <__ieee754_sqrt>
 8019ee6:	4b15      	ldr	r3, [pc, #84]	; (8019f3c <sqrt+0x64>)
 8019ee8:	eeb0 8a40 	vmov.f32	s16, s0
 8019eec:	eef0 8a60 	vmov.f32	s17, s1
 8019ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8019ef4:	3301      	adds	r3, #1
 8019ef6:	d019      	beq.n	8019f2c <sqrt+0x54>
 8019ef8:	4622      	mov	r2, r4
 8019efa:	462b      	mov	r3, r5
 8019efc:	4620      	mov	r0, r4
 8019efe:	4629      	mov	r1, r5
 8019f00:	f7e6 fe06 	bl	8000b10 <__aeabi_dcmpun>
 8019f04:	b990      	cbnz	r0, 8019f2c <sqrt+0x54>
 8019f06:	2200      	movs	r2, #0
 8019f08:	2300      	movs	r3, #0
 8019f0a:	4620      	mov	r0, r4
 8019f0c:	4629      	mov	r1, r5
 8019f0e:	f7e6 fdd7 	bl	8000ac0 <__aeabi_dcmplt>
 8019f12:	b158      	cbz	r0, 8019f2c <sqrt+0x54>
 8019f14:	f7ff fde0 	bl	8019ad8 <__errno>
 8019f18:	2321      	movs	r3, #33	; 0x21
 8019f1a:	6003      	str	r3, [r0, #0]
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	2300      	movs	r3, #0
 8019f20:	4610      	mov	r0, r2
 8019f22:	4619      	mov	r1, r3
 8019f24:	f7e6 fc84 	bl	8000830 <__aeabi_ddiv>
 8019f28:	ec41 0b18 	vmov	d8, r0, r1
 8019f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8019f30:	eef0 0a68 	vmov.f32	s1, s17
 8019f34:	ecbd 8b02 	vpop	{d8}
 8019f38:	bd38      	pop	{r3, r4, r5, pc}
 8019f3a:	bf00      	nop
 8019f3c:	200014a8 	.word	0x200014a8

08019f40 <__ieee754_exp>:
 8019f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f44:	ec55 4b10 	vmov	r4, r5, d0
 8019f48:	49b1      	ldr	r1, [pc, #708]	; (801a210 <__ieee754_exp+0x2d0>)
 8019f4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019f4e:	428b      	cmp	r3, r1
 8019f50:	ed2d 8b04 	vpush	{d8-d9}
 8019f54:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8019f58:	d937      	bls.n	8019fca <__ieee754_exp+0x8a>
 8019f5a:	49ae      	ldr	r1, [pc, #696]	; (801a214 <__ieee754_exp+0x2d4>)
 8019f5c:	428b      	cmp	r3, r1
 8019f5e:	d916      	bls.n	8019f8e <__ieee754_exp+0x4e>
 8019f60:	ee10 3a10 	vmov	r3, s0
 8019f64:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8019f68:	4313      	orrs	r3, r2
 8019f6a:	d009      	beq.n	8019f80 <__ieee754_exp+0x40>
 8019f6c:	ee10 2a10 	vmov	r2, s0
 8019f70:	462b      	mov	r3, r5
 8019f72:	4620      	mov	r0, r4
 8019f74:	4629      	mov	r1, r5
 8019f76:	f7e6 f97b 	bl	8000270 <__adddf3>
 8019f7a:	4604      	mov	r4, r0
 8019f7c:	460d      	mov	r5, r1
 8019f7e:	e000      	b.n	8019f82 <__ieee754_exp+0x42>
 8019f80:	bb06      	cbnz	r6, 8019fc4 <__ieee754_exp+0x84>
 8019f82:	ecbd 8b04 	vpop	{d8-d9}
 8019f86:	ec45 4b10 	vmov	d0, r4, r5
 8019f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f8e:	a38a      	add	r3, pc, #552	; (adr r3, 801a1b8 <__ieee754_exp+0x278>)
 8019f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f94:	ee10 0a10 	vmov	r0, s0
 8019f98:	4629      	mov	r1, r5
 8019f9a:	f7e6 fdaf 	bl	8000afc <__aeabi_dcmpgt>
 8019f9e:	b138      	cbz	r0, 8019fb0 <__ieee754_exp+0x70>
 8019fa0:	a387      	add	r3, pc, #540	; (adr r3, 801a1c0 <__ieee754_exp+0x280>)
 8019fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa6:	4610      	mov	r0, r2
 8019fa8:	4619      	mov	r1, r3
 8019faa:	f7e6 fb17 	bl	80005dc <__aeabi_dmul>
 8019fae:	e7e4      	b.n	8019f7a <__ieee754_exp+0x3a>
 8019fb0:	a385      	add	r3, pc, #532	; (adr r3, 801a1c8 <__ieee754_exp+0x288>)
 8019fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	4629      	mov	r1, r5
 8019fba:	f7e6 fd81 	bl	8000ac0 <__aeabi_dcmplt>
 8019fbe:	2800      	cmp	r0, #0
 8019fc0:	f000 8087 	beq.w	801a0d2 <__ieee754_exp+0x192>
 8019fc4:	2400      	movs	r4, #0
 8019fc6:	2500      	movs	r5, #0
 8019fc8:	e7db      	b.n	8019f82 <__ieee754_exp+0x42>
 8019fca:	4a93      	ldr	r2, [pc, #588]	; (801a218 <__ieee754_exp+0x2d8>)
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	f240 80ac 	bls.w	801a12a <__ieee754_exp+0x1ea>
 8019fd2:	4a92      	ldr	r2, [pc, #584]	; (801a21c <__ieee754_exp+0x2dc>)
 8019fd4:	4293      	cmp	r3, r2
 8019fd6:	d87c      	bhi.n	801a0d2 <__ieee754_exp+0x192>
 8019fd8:	4b91      	ldr	r3, [pc, #580]	; (801a220 <__ieee754_exp+0x2e0>)
 8019fda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe2:	ee10 0a10 	vmov	r0, s0
 8019fe6:	4629      	mov	r1, r5
 8019fe8:	f7e6 f940 	bl	800026c <__aeabi_dsub>
 8019fec:	4b8d      	ldr	r3, [pc, #564]	; (801a224 <__ieee754_exp+0x2e4>)
 8019fee:	00f7      	lsls	r7, r6, #3
 8019ff0:	443b      	add	r3, r7
 8019ff2:	ed93 7b00 	vldr	d7, [r3]
 8019ff6:	f1c6 0a01 	rsb	sl, r6, #1
 8019ffa:	4680      	mov	r8, r0
 8019ffc:	4689      	mov	r9, r1
 8019ffe:	ebaa 0a06 	sub.w	sl, sl, r6
 801a002:	eeb0 8a47 	vmov.f32	s16, s14
 801a006:	eef0 8a67 	vmov.f32	s17, s15
 801a00a:	ec53 2b18 	vmov	r2, r3, d8
 801a00e:	4640      	mov	r0, r8
 801a010:	4649      	mov	r1, r9
 801a012:	f7e6 f92b 	bl	800026c <__aeabi_dsub>
 801a016:	4604      	mov	r4, r0
 801a018:	460d      	mov	r5, r1
 801a01a:	4622      	mov	r2, r4
 801a01c:	462b      	mov	r3, r5
 801a01e:	4620      	mov	r0, r4
 801a020:	4629      	mov	r1, r5
 801a022:	f7e6 fadb 	bl	80005dc <__aeabi_dmul>
 801a026:	a36a      	add	r3, pc, #424	; (adr r3, 801a1d0 <__ieee754_exp+0x290>)
 801a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a02c:	4606      	mov	r6, r0
 801a02e:	460f      	mov	r7, r1
 801a030:	f7e6 fad4 	bl	80005dc <__aeabi_dmul>
 801a034:	a368      	add	r3, pc, #416	; (adr r3, 801a1d8 <__ieee754_exp+0x298>)
 801a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03a:	f7e6 f917 	bl	800026c <__aeabi_dsub>
 801a03e:	4632      	mov	r2, r6
 801a040:	463b      	mov	r3, r7
 801a042:	f7e6 facb 	bl	80005dc <__aeabi_dmul>
 801a046:	a366      	add	r3, pc, #408	; (adr r3, 801a1e0 <__ieee754_exp+0x2a0>)
 801a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a04c:	f7e6 f910 	bl	8000270 <__adddf3>
 801a050:	4632      	mov	r2, r6
 801a052:	463b      	mov	r3, r7
 801a054:	f7e6 fac2 	bl	80005dc <__aeabi_dmul>
 801a058:	a363      	add	r3, pc, #396	; (adr r3, 801a1e8 <__ieee754_exp+0x2a8>)
 801a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a05e:	f7e6 f905 	bl	800026c <__aeabi_dsub>
 801a062:	4632      	mov	r2, r6
 801a064:	463b      	mov	r3, r7
 801a066:	f7e6 fab9 	bl	80005dc <__aeabi_dmul>
 801a06a:	a361      	add	r3, pc, #388	; (adr r3, 801a1f0 <__ieee754_exp+0x2b0>)
 801a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a070:	f7e6 f8fe 	bl	8000270 <__adddf3>
 801a074:	4632      	mov	r2, r6
 801a076:	463b      	mov	r3, r7
 801a078:	f7e6 fab0 	bl	80005dc <__aeabi_dmul>
 801a07c:	4602      	mov	r2, r0
 801a07e:	460b      	mov	r3, r1
 801a080:	4620      	mov	r0, r4
 801a082:	4629      	mov	r1, r5
 801a084:	f7e6 f8f2 	bl	800026c <__aeabi_dsub>
 801a088:	4602      	mov	r2, r0
 801a08a:	460b      	mov	r3, r1
 801a08c:	4606      	mov	r6, r0
 801a08e:	460f      	mov	r7, r1
 801a090:	4620      	mov	r0, r4
 801a092:	4629      	mov	r1, r5
 801a094:	f7e6 faa2 	bl	80005dc <__aeabi_dmul>
 801a098:	ec41 0b19 	vmov	d9, r0, r1
 801a09c:	f1ba 0f00 	cmp.w	sl, #0
 801a0a0:	d15d      	bne.n	801a15e <__ieee754_exp+0x21e>
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a0a8:	4630      	mov	r0, r6
 801a0aa:	4639      	mov	r1, r7
 801a0ac:	f7e6 f8de 	bl	800026c <__aeabi_dsub>
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	460b      	mov	r3, r1
 801a0b4:	ec51 0b19 	vmov	r0, r1, d9
 801a0b8:	f7e6 fbba 	bl	8000830 <__aeabi_ddiv>
 801a0bc:	4622      	mov	r2, r4
 801a0be:	462b      	mov	r3, r5
 801a0c0:	f7e6 f8d4 	bl	800026c <__aeabi_dsub>
 801a0c4:	4602      	mov	r2, r0
 801a0c6:	460b      	mov	r3, r1
 801a0c8:	2000      	movs	r0, #0
 801a0ca:	4957      	ldr	r1, [pc, #348]	; (801a228 <__ieee754_exp+0x2e8>)
 801a0cc:	f7e6 f8ce 	bl	800026c <__aeabi_dsub>
 801a0d0:	e753      	b.n	8019f7a <__ieee754_exp+0x3a>
 801a0d2:	4856      	ldr	r0, [pc, #344]	; (801a22c <__ieee754_exp+0x2ec>)
 801a0d4:	a348      	add	r3, pc, #288	; (adr r3, 801a1f8 <__ieee754_exp+0x2b8>)
 801a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0da:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801a0de:	4629      	mov	r1, r5
 801a0e0:	4620      	mov	r0, r4
 801a0e2:	f7e6 fa7b 	bl	80005dc <__aeabi_dmul>
 801a0e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a0ea:	f7e6 f8c1 	bl	8000270 <__adddf3>
 801a0ee:	f7e6 fd25 	bl	8000b3c <__aeabi_d2iz>
 801a0f2:	4682      	mov	sl, r0
 801a0f4:	f7e6 fa08 	bl	8000508 <__aeabi_i2d>
 801a0f8:	a341      	add	r3, pc, #260	; (adr r3, 801a200 <__ieee754_exp+0x2c0>)
 801a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0fe:	4606      	mov	r6, r0
 801a100:	460f      	mov	r7, r1
 801a102:	f7e6 fa6b 	bl	80005dc <__aeabi_dmul>
 801a106:	4602      	mov	r2, r0
 801a108:	460b      	mov	r3, r1
 801a10a:	4620      	mov	r0, r4
 801a10c:	4629      	mov	r1, r5
 801a10e:	f7e6 f8ad 	bl	800026c <__aeabi_dsub>
 801a112:	a33d      	add	r3, pc, #244	; (adr r3, 801a208 <__ieee754_exp+0x2c8>)
 801a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a118:	4680      	mov	r8, r0
 801a11a:	4689      	mov	r9, r1
 801a11c:	4630      	mov	r0, r6
 801a11e:	4639      	mov	r1, r7
 801a120:	f7e6 fa5c 	bl	80005dc <__aeabi_dmul>
 801a124:	ec41 0b18 	vmov	d8, r0, r1
 801a128:	e76f      	b.n	801a00a <__ieee754_exp+0xca>
 801a12a:	4a41      	ldr	r2, [pc, #260]	; (801a230 <__ieee754_exp+0x2f0>)
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d811      	bhi.n	801a154 <__ieee754_exp+0x214>
 801a130:	a323      	add	r3, pc, #140	; (adr r3, 801a1c0 <__ieee754_exp+0x280>)
 801a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a136:	ee10 0a10 	vmov	r0, s0
 801a13a:	4629      	mov	r1, r5
 801a13c:	f7e6 f898 	bl	8000270 <__adddf3>
 801a140:	4b39      	ldr	r3, [pc, #228]	; (801a228 <__ieee754_exp+0x2e8>)
 801a142:	2200      	movs	r2, #0
 801a144:	f7e6 fcda 	bl	8000afc <__aeabi_dcmpgt>
 801a148:	b138      	cbz	r0, 801a15a <__ieee754_exp+0x21a>
 801a14a:	4b37      	ldr	r3, [pc, #220]	; (801a228 <__ieee754_exp+0x2e8>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	4620      	mov	r0, r4
 801a150:	4629      	mov	r1, r5
 801a152:	e710      	b.n	8019f76 <__ieee754_exp+0x36>
 801a154:	f04f 0a00 	mov.w	sl, #0
 801a158:	e75f      	b.n	801a01a <__ieee754_exp+0xda>
 801a15a:	4682      	mov	sl, r0
 801a15c:	e75d      	b.n	801a01a <__ieee754_exp+0xda>
 801a15e:	4632      	mov	r2, r6
 801a160:	463b      	mov	r3, r7
 801a162:	2000      	movs	r0, #0
 801a164:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a168:	f7e6 f880 	bl	800026c <__aeabi_dsub>
 801a16c:	4602      	mov	r2, r0
 801a16e:	460b      	mov	r3, r1
 801a170:	ec51 0b19 	vmov	r0, r1, d9
 801a174:	f7e6 fb5c 	bl	8000830 <__aeabi_ddiv>
 801a178:	4602      	mov	r2, r0
 801a17a:	460b      	mov	r3, r1
 801a17c:	ec51 0b18 	vmov	r0, r1, d8
 801a180:	f7e6 f874 	bl	800026c <__aeabi_dsub>
 801a184:	4642      	mov	r2, r8
 801a186:	464b      	mov	r3, r9
 801a188:	f7e6 f870 	bl	800026c <__aeabi_dsub>
 801a18c:	4602      	mov	r2, r0
 801a18e:	460b      	mov	r3, r1
 801a190:	2000      	movs	r0, #0
 801a192:	4925      	ldr	r1, [pc, #148]	; (801a228 <__ieee754_exp+0x2e8>)
 801a194:	f7e6 f86a 	bl	800026c <__aeabi_dsub>
 801a198:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801a19c:	4592      	cmp	sl, r2
 801a19e:	db02      	blt.n	801a1a6 <__ieee754_exp+0x266>
 801a1a0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a1a4:	e6e9      	b.n	8019f7a <__ieee754_exp+0x3a>
 801a1a6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801a1aa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801a1b4:	e6f9      	b.n	8019faa <__ieee754_exp+0x6a>
 801a1b6:	bf00      	nop
 801a1b8:	fefa39ef 	.word	0xfefa39ef
 801a1bc:	40862e42 	.word	0x40862e42
 801a1c0:	8800759c 	.word	0x8800759c
 801a1c4:	7e37e43c 	.word	0x7e37e43c
 801a1c8:	d52d3051 	.word	0xd52d3051
 801a1cc:	c0874910 	.word	0xc0874910
 801a1d0:	72bea4d0 	.word	0x72bea4d0
 801a1d4:	3e663769 	.word	0x3e663769
 801a1d8:	c5d26bf1 	.word	0xc5d26bf1
 801a1dc:	3ebbbd41 	.word	0x3ebbbd41
 801a1e0:	af25de2c 	.word	0xaf25de2c
 801a1e4:	3f11566a 	.word	0x3f11566a
 801a1e8:	16bebd93 	.word	0x16bebd93
 801a1ec:	3f66c16c 	.word	0x3f66c16c
 801a1f0:	5555553e 	.word	0x5555553e
 801a1f4:	3fc55555 	.word	0x3fc55555
 801a1f8:	652b82fe 	.word	0x652b82fe
 801a1fc:	3ff71547 	.word	0x3ff71547
 801a200:	fee00000 	.word	0xfee00000
 801a204:	3fe62e42 	.word	0x3fe62e42
 801a208:	35793c76 	.word	0x35793c76
 801a20c:	3dea39ef 	.word	0x3dea39ef
 801a210:	40862e41 	.word	0x40862e41
 801a214:	7fefffff 	.word	0x7fefffff
 801a218:	3fd62e42 	.word	0x3fd62e42
 801a21c:	3ff0a2b1 	.word	0x3ff0a2b1
 801a220:	0801af88 	.word	0x0801af88
 801a224:	0801af98 	.word	0x0801af98
 801a228:	3ff00000 	.word	0x3ff00000
 801a22c:	0801af78 	.word	0x0801af78
 801a230:	3e2fffff 	.word	0x3e2fffff
 801a234:	00000000 	.word	0x00000000

0801a238 <__ieee754_log>:
 801a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a23c:	ec51 0b10 	vmov	r0, r1, d0
 801a240:	ed2d 8b04 	vpush	{d8-d9}
 801a244:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a248:	b083      	sub	sp, #12
 801a24a:	460d      	mov	r5, r1
 801a24c:	da29      	bge.n	801a2a2 <__ieee754_log+0x6a>
 801a24e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a252:	4303      	orrs	r3, r0
 801a254:	ee10 2a10 	vmov	r2, s0
 801a258:	d10c      	bne.n	801a274 <__ieee754_log+0x3c>
 801a25a:	49cf      	ldr	r1, [pc, #828]	; (801a598 <__ieee754_log+0x360>)
 801a25c:	2200      	movs	r2, #0
 801a25e:	2300      	movs	r3, #0
 801a260:	2000      	movs	r0, #0
 801a262:	f7e6 fae5 	bl	8000830 <__aeabi_ddiv>
 801a266:	ec41 0b10 	vmov	d0, r0, r1
 801a26a:	b003      	add	sp, #12
 801a26c:	ecbd 8b04 	vpop	{d8-d9}
 801a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a274:	2900      	cmp	r1, #0
 801a276:	da05      	bge.n	801a284 <__ieee754_log+0x4c>
 801a278:	460b      	mov	r3, r1
 801a27a:	f7e5 fff7 	bl	800026c <__aeabi_dsub>
 801a27e:	2200      	movs	r2, #0
 801a280:	2300      	movs	r3, #0
 801a282:	e7ee      	b.n	801a262 <__ieee754_log+0x2a>
 801a284:	4bc5      	ldr	r3, [pc, #788]	; (801a59c <__ieee754_log+0x364>)
 801a286:	2200      	movs	r2, #0
 801a288:	f7e6 f9a8 	bl	80005dc <__aeabi_dmul>
 801a28c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a290:	460d      	mov	r5, r1
 801a292:	4ac3      	ldr	r2, [pc, #780]	; (801a5a0 <__ieee754_log+0x368>)
 801a294:	4295      	cmp	r5, r2
 801a296:	dd06      	ble.n	801a2a6 <__ieee754_log+0x6e>
 801a298:	4602      	mov	r2, r0
 801a29a:	460b      	mov	r3, r1
 801a29c:	f7e5 ffe8 	bl	8000270 <__adddf3>
 801a2a0:	e7e1      	b.n	801a266 <__ieee754_log+0x2e>
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	e7f5      	b.n	801a292 <__ieee754_log+0x5a>
 801a2a6:	152c      	asrs	r4, r5, #20
 801a2a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a2ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a2b0:	441c      	add	r4, r3
 801a2b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a2b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a2be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a2c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a2c6:	ea42 0105 	orr.w	r1, r2, r5
 801a2ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	4bb4      	ldr	r3, [pc, #720]	; (801a5a4 <__ieee754_log+0x36c>)
 801a2d2:	f7e5 ffcb 	bl	800026c <__aeabi_dsub>
 801a2d6:	1cab      	adds	r3, r5, #2
 801a2d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a2dc:	2b02      	cmp	r3, #2
 801a2de:	4682      	mov	sl, r0
 801a2e0:	468b      	mov	fp, r1
 801a2e2:	f04f 0200 	mov.w	r2, #0
 801a2e6:	dc53      	bgt.n	801a390 <__ieee754_log+0x158>
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	f7e6 fbdf 	bl	8000aac <__aeabi_dcmpeq>
 801a2ee:	b1d0      	cbz	r0, 801a326 <__ieee754_log+0xee>
 801a2f0:	2c00      	cmp	r4, #0
 801a2f2:	f000 8122 	beq.w	801a53a <__ieee754_log+0x302>
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f7e6 f906 	bl	8000508 <__aeabi_i2d>
 801a2fc:	a390      	add	r3, pc, #576	; (adr r3, 801a540 <__ieee754_log+0x308>)
 801a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a302:	4606      	mov	r6, r0
 801a304:	460f      	mov	r7, r1
 801a306:	f7e6 f969 	bl	80005dc <__aeabi_dmul>
 801a30a:	a38f      	add	r3, pc, #572	; (adr r3, 801a548 <__ieee754_log+0x310>)
 801a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a310:	4604      	mov	r4, r0
 801a312:	460d      	mov	r5, r1
 801a314:	4630      	mov	r0, r6
 801a316:	4639      	mov	r1, r7
 801a318:	f7e6 f960 	bl	80005dc <__aeabi_dmul>
 801a31c:	4602      	mov	r2, r0
 801a31e:	460b      	mov	r3, r1
 801a320:	4620      	mov	r0, r4
 801a322:	4629      	mov	r1, r5
 801a324:	e7ba      	b.n	801a29c <__ieee754_log+0x64>
 801a326:	a38a      	add	r3, pc, #552	; (adr r3, 801a550 <__ieee754_log+0x318>)
 801a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a32c:	4650      	mov	r0, sl
 801a32e:	4659      	mov	r1, fp
 801a330:	f7e6 f954 	bl	80005dc <__aeabi_dmul>
 801a334:	4602      	mov	r2, r0
 801a336:	460b      	mov	r3, r1
 801a338:	2000      	movs	r0, #0
 801a33a:	499b      	ldr	r1, [pc, #620]	; (801a5a8 <__ieee754_log+0x370>)
 801a33c:	f7e5 ff96 	bl	800026c <__aeabi_dsub>
 801a340:	4652      	mov	r2, sl
 801a342:	4606      	mov	r6, r0
 801a344:	460f      	mov	r7, r1
 801a346:	465b      	mov	r3, fp
 801a348:	4650      	mov	r0, sl
 801a34a:	4659      	mov	r1, fp
 801a34c:	f7e6 f946 	bl	80005dc <__aeabi_dmul>
 801a350:	4602      	mov	r2, r0
 801a352:	460b      	mov	r3, r1
 801a354:	4630      	mov	r0, r6
 801a356:	4639      	mov	r1, r7
 801a358:	f7e6 f940 	bl	80005dc <__aeabi_dmul>
 801a35c:	4606      	mov	r6, r0
 801a35e:	460f      	mov	r7, r1
 801a360:	b914      	cbnz	r4, 801a368 <__ieee754_log+0x130>
 801a362:	4632      	mov	r2, r6
 801a364:	463b      	mov	r3, r7
 801a366:	e0a2      	b.n	801a4ae <__ieee754_log+0x276>
 801a368:	4620      	mov	r0, r4
 801a36a:	f7e6 f8cd 	bl	8000508 <__aeabi_i2d>
 801a36e:	a374      	add	r3, pc, #464	; (adr r3, 801a540 <__ieee754_log+0x308>)
 801a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a374:	4680      	mov	r8, r0
 801a376:	4689      	mov	r9, r1
 801a378:	f7e6 f930 	bl	80005dc <__aeabi_dmul>
 801a37c:	a372      	add	r3, pc, #456	; (adr r3, 801a548 <__ieee754_log+0x310>)
 801a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a382:	4604      	mov	r4, r0
 801a384:	460d      	mov	r5, r1
 801a386:	4640      	mov	r0, r8
 801a388:	4649      	mov	r1, r9
 801a38a:	f7e6 f927 	bl	80005dc <__aeabi_dmul>
 801a38e:	e0a7      	b.n	801a4e0 <__ieee754_log+0x2a8>
 801a390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a394:	f7e5 ff6c 	bl	8000270 <__adddf3>
 801a398:	4602      	mov	r2, r0
 801a39a:	460b      	mov	r3, r1
 801a39c:	4650      	mov	r0, sl
 801a39e:	4659      	mov	r1, fp
 801a3a0:	f7e6 fa46 	bl	8000830 <__aeabi_ddiv>
 801a3a4:	ec41 0b18 	vmov	d8, r0, r1
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f7e6 f8ad 	bl	8000508 <__aeabi_i2d>
 801a3ae:	ec53 2b18 	vmov	r2, r3, d8
 801a3b2:	ec41 0b19 	vmov	d9, r0, r1
 801a3b6:	ec51 0b18 	vmov	r0, r1, d8
 801a3ba:	f7e6 f90f 	bl	80005dc <__aeabi_dmul>
 801a3be:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801a3c2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801a3c6:	9301      	str	r3, [sp, #4]
 801a3c8:	4602      	mov	r2, r0
 801a3ca:	460b      	mov	r3, r1
 801a3cc:	4680      	mov	r8, r0
 801a3ce:	4689      	mov	r9, r1
 801a3d0:	f7e6 f904 	bl	80005dc <__aeabi_dmul>
 801a3d4:	a360      	add	r3, pc, #384	; (adr r3, 801a558 <__ieee754_log+0x320>)
 801a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3da:	4606      	mov	r6, r0
 801a3dc:	460f      	mov	r7, r1
 801a3de:	f7e6 f8fd 	bl	80005dc <__aeabi_dmul>
 801a3e2:	a35f      	add	r3, pc, #380	; (adr r3, 801a560 <__ieee754_log+0x328>)
 801a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e8:	f7e5 ff42 	bl	8000270 <__adddf3>
 801a3ec:	4632      	mov	r2, r6
 801a3ee:	463b      	mov	r3, r7
 801a3f0:	f7e6 f8f4 	bl	80005dc <__aeabi_dmul>
 801a3f4:	a35c      	add	r3, pc, #368	; (adr r3, 801a568 <__ieee754_log+0x330>)
 801a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3fa:	f7e5 ff39 	bl	8000270 <__adddf3>
 801a3fe:	4632      	mov	r2, r6
 801a400:	463b      	mov	r3, r7
 801a402:	f7e6 f8eb 	bl	80005dc <__aeabi_dmul>
 801a406:	a35a      	add	r3, pc, #360	; (adr r3, 801a570 <__ieee754_log+0x338>)
 801a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a40c:	f7e5 ff30 	bl	8000270 <__adddf3>
 801a410:	4642      	mov	r2, r8
 801a412:	464b      	mov	r3, r9
 801a414:	f7e6 f8e2 	bl	80005dc <__aeabi_dmul>
 801a418:	a357      	add	r3, pc, #348	; (adr r3, 801a578 <__ieee754_log+0x340>)
 801a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a41e:	4680      	mov	r8, r0
 801a420:	4689      	mov	r9, r1
 801a422:	4630      	mov	r0, r6
 801a424:	4639      	mov	r1, r7
 801a426:	f7e6 f8d9 	bl	80005dc <__aeabi_dmul>
 801a42a:	a355      	add	r3, pc, #340	; (adr r3, 801a580 <__ieee754_log+0x348>)
 801a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a430:	f7e5 ff1e 	bl	8000270 <__adddf3>
 801a434:	4632      	mov	r2, r6
 801a436:	463b      	mov	r3, r7
 801a438:	f7e6 f8d0 	bl	80005dc <__aeabi_dmul>
 801a43c:	a352      	add	r3, pc, #328	; (adr r3, 801a588 <__ieee754_log+0x350>)
 801a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a442:	f7e5 ff15 	bl	8000270 <__adddf3>
 801a446:	4632      	mov	r2, r6
 801a448:	463b      	mov	r3, r7
 801a44a:	f7e6 f8c7 	bl	80005dc <__aeabi_dmul>
 801a44e:	460b      	mov	r3, r1
 801a450:	4602      	mov	r2, r0
 801a452:	4649      	mov	r1, r9
 801a454:	4640      	mov	r0, r8
 801a456:	f7e5 ff0b 	bl	8000270 <__adddf3>
 801a45a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801a45e:	9b01      	ldr	r3, [sp, #4]
 801a460:	3551      	adds	r5, #81	; 0x51
 801a462:	431d      	orrs	r5, r3
 801a464:	2d00      	cmp	r5, #0
 801a466:	4680      	mov	r8, r0
 801a468:	4689      	mov	r9, r1
 801a46a:	dd48      	ble.n	801a4fe <__ieee754_log+0x2c6>
 801a46c:	4b4e      	ldr	r3, [pc, #312]	; (801a5a8 <__ieee754_log+0x370>)
 801a46e:	2200      	movs	r2, #0
 801a470:	4650      	mov	r0, sl
 801a472:	4659      	mov	r1, fp
 801a474:	f7e6 f8b2 	bl	80005dc <__aeabi_dmul>
 801a478:	4652      	mov	r2, sl
 801a47a:	465b      	mov	r3, fp
 801a47c:	f7e6 f8ae 	bl	80005dc <__aeabi_dmul>
 801a480:	4602      	mov	r2, r0
 801a482:	460b      	mov	r3, r1
 801a484:	4606      	mov	r6, r0
 801a486:	460f      	mov	r7, r1
 801a488:	4640      	mov	r0, r8
 801a48a:	4649      	mov	r1, r9
 801a48c:	f7e5 fef0 	bl	8000270 <__adddf3>
 801a490:	ec53 2b18 	vmov	r2, r3, d8
 801a494:	f7e6 f8a2 	bl	80005dc <__aeabi_dmul>
 801a498:	4680      	mov	r8, r0
 801a49a:	4689      	mov	r9, r1
 801a49c:	b964      	cbnz	r4, 801a4b8 <__ieee754_log+0x280>
 801a49e:	4602      	mov	r2, r0
 801a4a0:	460b      	mov	r3, r1
 801a4a2:	4630      	mov	r0, r6
 801a4a4:	4639      	mov	r1, r7
 801a4a6:	f7e5 fee1 	bl	800026c <__aeabi_dsub>
 801a4aa:	4602      	mov	r2, r0
 801a4ac:	460b      	mov	r3, r1
 801a4ae:	4650      	mov	r0, sl
 801a4b0:	4659      	mov	r1, fp
 801a4b2:	f7e5 fedb 	bl	800026c <__aeabi_dsub>
 801a4b6:	e6d6      	b.n	801a266 <__ieee754_log+0x2e>
 801a4b8:	a321      	add	r3, pc, #132	; (adr r3, 801a540 <__ieee754_log+0x308>)
 801a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4be:	ec51 0b19 	vmov	r0, r1, d9
 801a4c2:	f7e6 f88b 	bl	80005dc <__aeabi_dmul>
 801a4c6:	a320      	add	r3, pc, #128	; (adr r3, 801a548 <__ieee754_log+0x310>)
 801a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	460d      	mov	r5, r1
 801a4d0:	ec51 0b19 	vmov	r0, r1, d9
 801a4d4:	f7e6 f882 	bl	80005dc <__aeabi_dmul>
 801a4d8:	4642      	mov	r2, r8
 801a4da:	464b      	mov	r3, r9
 801a4dc:	f7e5 fec8 	bl	8000270 <__adddf3>
 801a4e0:	4602      	mov	r2, r0
 801a4e2:	460b      	mov	r3, r1
 801a4e4:	4630      	mov	r0, r6
 801a4e6:	4639      	mov	r1, r7
 801a4e8:	f7e5 fec0 	bl	800026c <__aeabi_dsub>
 801a4ec:	4652      	mov	r2, sl
 801a4ee:	465b      	mov	r3, fp
 801a4f0:	f7e5 febc 	bl	800026c <__aeabi_dsub>
 801a4f4:	4602      	mov	r2, r0
 801a4f6:	460b      	mov	r3, r1
 801a4f8:	4620      	mov	r0, r4
 801a4fa:	4629      	mov	r1, r5
 801a4fc:	e7d9      	b.n	801a4b2 <__ieee754_log+0x27a>
 801a4fe:	4602      	mov	r2, r0
 801a500:	460b      	mov	r3, r1
 801a502:	4650      	mov	r0, sl
 801a504:	4659      	mov	r1, fp
 801a506:	f7e5 feb1 	bl	800026c <__aeabi_dsub>
 801a50a:	ec53 2b18 	vmov	r2, r3, d8
 801a50e:	f7e6 f865 	bl	80005dc <__aeabi_dmul>
 801a512:	4606      	mov	r6, r0
 801a514:	460f      	mov	r7, r1
 801a516:	2c00      	cmp	r4, #0
 801a518:	f43f af23 	beq.w	801a362 <__ieee754_log+0x12a>
 801a51c:	a308      	add	r3, pc, #32	; (adr r3, 801a540 <__ieee754_log+0x308>)
 801a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a522:	ec51 0b19 	vmov	r0, r1, d9
 801a526:	f7e6 f859 	bl	80005dc <__aeabi_dmul>
 801a52a:	a307      	add	r3, pc, #28	; (adr r3, 801a548 <__ieee754_log+0x310>)
 801a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a530:	4604      	mov	r4, r0
 801a532:	460d      	mov	r5, r1
 801a534:	ec51 0b19 	vmov	r0, r1, d9
 801a538:	e727      	b.n	801a38a <__ieee754_log+0x152>
 801a53a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801a590 <__ieee754_log+0x358>
 801a53e:	e694      	b.n	801a26a <__ieee754_log+0x32>
 801a540:	fee00000 	.word	0xfee00000
 801a544:	3fe62e42 	.word	0x3fe62e42
 801a548:	35793c76 	.word	0x35793c76
 801a54c:	3dea39ef 	.word	0x3dea39ef
 801a550:	55555555 	.word	0x55555555
 801a554:	3fd55555 	.word	0x3fd55555
 801a558:	df3e5244 	.word	0xdf3e5244
 801a55c:	3fc2f112 	.word	0x3fc2f112
 801a560:	96cb03de 	.word	0x96cb03de
 801a564:	3fc74664 	.word	0x3fc74664
 801a568:	94229359 	.word	0x94229359
 801a56c:	3fd24924 	.word	0x3fd24924
 801a570:	55555593 	.word	0x55555593
 801a574:	3fe55555 	.word	0x3fe55555
 801a578:	d078c69f 	.word	0xd078c69f
 801a57c:	3fc39a09 	.word	0x3fc39a09
 801a580:	1d8e78af 	.word	0x1d8e78af
 801a584:	3fcc71c5 	.word	0x3fcc71c5
 801a588:	9997fa04 	.word	0x9997fa04
 801a58c:	3fd99999 	.word	0x3fd99999
	...
 801a598:	c3500000 	.word	0xc3500000
 801a59c:	43500000 	.word	0x43500000
 801a5a0:	7fefffff 	.word	0x7fefffff
 801a5a4:	3ff00000 	.word	0x3ff00000
 801a5a8:	3fe00000 	.word	0x3fe00000

0801a5ac <__ieee754_sqrt>:
 801a5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5b0:	ec55 4b10 	vmov	r4, r5, d0
 801a5b4:	4e56      	ldr	r6, [pc, #344]	; (801a710 <__ieee754_sqrt+0x164>)
 801a5b6:	43ae      	bics	r6, r5
 801a5b8:	ee10 0a10 	vmov	r0, s0
 801a5bc:	ee10 3a10 	vmov	r3, s0
 801a5c0:	4629      	mov	r1, r5
 801a5c2:	462a      	mov	r2, r5
 801a5c4:	d110      	bne.n	801a5e8 <__ieee754_sqrt+0x3c>
 801a5c6:	ee10 2a10 	vmov	r2, s0
 801a5ca:	462b      	mov	r3, r5
 801a5cc:	f7e6 f806 	bl	80005dc <__aeabi_dmul>
 801a5d0:	4602      	mov	r2, r0
 801a5d2:	460b      	mov	r3, r1
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	4629      	mov	r1, r5
 801a5d8:	f7e5 fe4a 	bl	8000270 <__adddf3>
 801a5dc:	4604      	mov	r4, r0
 801a5de:	460d      	mov	r5, r1
 801a5e0:	ec45 4b10 	vmov	d0, r4, r5
 801a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e8:	2d00      	cmp	r5, #0
 801a5ea:	dc10      	bgt.n	801a60e <__ieee754_sqrt+0x62>
 801a5ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a5f0:	4330      	orrs	r0, r6
 801a5f2:	d0f5      	beq.n	801a5e0 <__ieee754_sqrt+0x34>
 801a5f4:	b15d      	cbz	r5, 801a60e <__ieee754_sqrt+0x62>
 801a5f6:	ee10 2a10 	vmov	r2, s0
 801a5fa:	462b      	mov	r3, r5
 801a5fc:	ee10 0a10 	vmov	r0, s0
 801a600:	f7e5 fe34 	bl	800026c <__aeabi_dsub>
 801a604:	4602      	mov	r2, r0
 801a606:	460b      	mov	r3, r1
 801a608:	f7e6 f912 	bl	8000830 <__aeabi_ddiv>
 801a60c:	e7e6      	b.n	801a5dc <__ieee754_sqrt+0x30>
 801a60e:	1509      	asrs	r1, r1, #20
 801a610:	d076      	beq.n	801a700 <__ieee754_sqrt+0x154>
 801a612:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a616:	07ce      	lsls	r6, r1, #31
 801a618:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a61c:	bf5e      	ittt	pl
 801a61e:	0fda      	lsrpl	r2, r3, #31
 801a620:	005b      	lslpl	r3, r3, #1
 801a622:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a626:	0fda      	lsrs	r2, r3, #31
 801a628:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a62c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a630:	2000      	movs	r0, #0
 801a632:	106d      	asrs	r5, r5, #1
 801a634:	005b      	lsls	r3, r3, #1
 801a636:	f04f 0e16 	mov.w	lr, #22
 801a63a:	4684      	mov	ip, r0
 801a63c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a640:	eb0c 0401 	add.w	r4, ip, r1
 801a644:	4294      	cmp	r4, r2
 801a646:	bfde      	ittt	le
 801a648:	1b12      	suble	r2, r2, r4
 801a64a:	eb04 0c01 	addle.w	ip, r4, r1
 801a64e:	1840      	addle	r0, r0, r1
 801a650:	0052      	lsls	r2, r2, #1
 801a652:	f1be 0e01 	subs.w	lr, lr, #1
 801a656:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a65a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a65e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a662:	d1ed      	bne.n	801a640 <__ieee754_sqrt+0x94>
 801a664:	4671      	mov	r1, lr
 801a666:	2720      	movs	r7, #32
 801a668:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a66c:	4562      	cmp	r2, ip
 801a66e:	eb04 060e 	add.w	r6, r4, lr
 801a672:	dc02      	bgt.n	801a67a <__ieee754_sqrt+0xce>
 801a674:	d113      	bne.n	801a69e <__ieee754_sqrt+0xf2>
 801a676:	429e      	cmp	r6, r3
 801a678:	d811      	bhi.n	801a69e <__ieee754_sqrt+0xf2>
 801a67a:	2e00      	cmp	r6, #0
 801a67c:	eb06 0e04 	add.w	lr, r6, r4
 801a680:	da43      	bge.n	801a70a <__ieee754_sqrt+0x15e>
 801a682:	f1be 0f00 	cmp.w	lr, #0
 801a686:	db40      	blt.n	801a70a <__ieee754_sqrt+0x15e>
 801a688:	f10c 0801 	add.w	r8, ip, #1
 801a68c:	eba2 020c 	sub.w	r2, r2, ip
 801a690:	429e      	cmp	r6, r3
 801a692:	bf88      	it	hi
 801a694:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a698:	1b9b      	subs	r3, r3, r6
 801a69a:	4421      	add	r1, r4
 801a69c:	46c4      	mov	ip, r8
 801a69e:	0052      	lsls	r2, r2, #1
 801a6a0:	3f01      	subs	r7, #1
 801a6a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a6a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a6aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a6ae:	d1dd      	bne.n	801a66c <__ieee754_sqrt+0xc0>
 801a6b0:	4313      	orrs	r3, r2
 801a6b2:	d006      	beq.n	801a6c2 <__ieee754_sqrt+0x116>
 801a6b4:	1c4c      	adds	r4, r1, #1
 801a6b6:	bf13      	iteet	ne
 801a6b8:	3101      	addne	r1, #1
 801a6ba:	3001      	addeq	r0, #1
 801a6bc:	4639      	moveq	r1, r7
 801a6be:	f021 0101 	bicne.w	r1, r1, #1
 801a6c2:	1043      	asrs	r3, r0, #1
 801a6c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a6c8:	0849      	lsrs	r1, r1, #1
 801a6ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a6ce:	07c2      	lsls	r2, r0, #31
 801a6d0:	bf48      	it	mi
 801a6d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a6d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a6da:	460c      	mov	r4, r1
 801a6dc:	463d      	mov	r5, r7
 801a6de:	e77f      	b.n	801a5e0 <__ieee754_sqrt+0x34>
 801a6e0:	0ada      	lsrs	r2, r3, #11
 801a6e2:	3815      	subs	r0, #21
 801a6e4:	055b      	lsls	r3, r3, #21
 801a6e6:	2a00      	cmp	r2, #0
 801a6e8:	d0fa      	beq.n	801a6e0 <__ieee754_sqrt+0x134>
 801a6ea:	02d7      	lsls	r7, r2, #11
 801a6ec:	d50a      	bpl.n	801a704 <__ieee754_sqrt+0x158>
 801a6ee:	f1c1 0420 	rsb	r4, r1, #32
 801a6f2:	fa23 f404 	lsr.w	r4, r3, r4
 801a6f6:	1e4d      	subs	r5, r1, #1
 801a6f8:	408b      	lsls	r3, r1
 801a6fa:	4322      	orrs	r2, r4
 801a6fc:	1b41      	subs	r1, r0, r5
 801a6fe:	e788      	b.n	801a612 <__ieee754_sqrt+0x66>
 801a700:	4608      	mov	r0, r1
 801a702:	e7f0      	b.n	801a6e6 <__ieee754_sqrt+0x13a>
 801a704:	0052      	lsls	r2, r2, #1
 801a706:	3101      	adds	r1, #1
 801a708:	e7ef      	b.n	801a6ea <__ieee754_sqrt+0x13e>
 801a70a:	46e0      	mov	r8, ip
 801a70c:	e7be      	b.n	801a68c <__ieee754_sqrt+0xe0>
 801a70e:	bf00      	nop
 801a710:	7ff00000 	.word	0x7ff00000

0801a714 <finite>:
 801a714:	b082      	sub	sp, #8
 801a716:	ed8d 0b00 	vstr	d0, [sp]
 801a71a:	9801      	ldr	r0, [sp, #4]
 801a71c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a720:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a724:	0fc0      	lsrs	r0, r0, #31
 801a726:	b002      	add	sp, #8
 801a728:	4770      	bx	lr
 801a72a:	0000      	movs	r0, r0
 801a72c:	0000      	movs	r0, r0
	...

0801a730 <nan>:
 801a730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a738 <nan+0x8>
 801a734:	4770      	bx	lr
 801a736:	bf00      	nop
 801a738:	00000000 	.word	0x00000000
 801a73c:	7ff80000 	.word	0x7ff80000

0801a740 <_init>:
 801a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a742:	bf00      	nop
 801a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a746:	bc08      	pop	{r3}
 801a748:	469e      	mov	lr, r3
 801a74a:	4770      	bx	lr

0801a74c <_fini>:
 801a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74e:	bf00      	nop
 801a750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a752:	bc08      	pop	{r3}
 801a754:	469e      	mov	lr, r3
 801a756:	4770      	bx	lr
