
AMS-CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b4  080083b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083bc  080083bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080083c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ce4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d58  20004d58  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020f76  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043d9  00000000  00000000  0004101a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  000453f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001650  00000000  00000000  00046c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247c3  00000000  00000000  00048270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be17  00000000  00000000  0006ca33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e434d  00000000  00000000  0008884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016cb97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006734  00000000  00000000  0016cbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080f0 	.word	0x080080f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080080f0 	.word	0x080080f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80004dc:	4a37      	ldr	r2, [pc, #220]	; (80005bc <MX_ADC1_Init+0xf4>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_ADC1_Init+0xf0>)
 8000504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_ADC1_Init+0xf0>)
 800050c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_ADC1_Init+0xf0>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_ADC1_Init+0xf0>)
 800051a:	2204      	movs	r2, #4
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_ADC1_Init+0xf0>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC1_Init+0xf0>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	4822      	ldr	r0, [pc, #136]	; (80005b8 <MX_ADC1_Init+0xf0>)
 800052e:	f001 fa99 	bl	8001a64 <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000538:	f000 fe40 	bl	80011bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053c:	2301      	movs	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000544:	2302      	movs	r3, #2
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	481a      	ldr	r0, [pc, #104]	; (80005b8 <MX_ADC1_Init+0xf0>)
 800054e:	f001 fc2b 	bl	8001da8 <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000558:	f000 fe30 	bl	80011bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800055c:	2302      	movs	r3, #2
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000560:	2302      	movs	r3, #2
 8000562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <MX_ADC1_Init+0xf0>)
 800056a:	f001 fc1d 	bl	8001da8 <HAL_ADC_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 fe22 	bl	80011bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000578:	2303      	movs	r3, #3
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800057c:	2303      	movs	r3, #3
 800057e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_ADC1_Init+0xf0>)
 8000586:	f001 fc0f 	bl	8001da8 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000590:	f000 fe14 	bl	80011bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000594:	2304      	movs	r3, #4
 8000596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_ADC1_Init+0xf0>)
 80005a2:	f001 fc01 	bl	8001da8 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80005ac:	f000 fe06 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20004a68 	.word	0x20004a68
 80005bc:	40012000 	.word	0x40012000

080005c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a33      	ldr	r2, [pc, #204]	; (80006ac <HAL_ADC_MspInit+0xec>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d15f      	bne.n	80006a2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <HAL_ADC_MspInit+0xf0>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a31      	ldr	r2, [pc, #196]	; (80006b0 <HAL_ADC_MspInit+0xf0>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <HAL_ADC_MspInit+0xf0>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <HAL_ADC_MspInit+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <HAL_ADC_MspInit+0xf0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <HAL_ADC_MspInit+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = precharge_resistor_temperature_Pin|fuse_resistor_temperature_Pin|aux_temp1_Pin|aux_temp2_Pin;
 800061a:	231e      	movs	r3, #30
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4821      	ldr	r0, [pc, #132]	; (80006b4 <HAL_ADC_MspInit+0xf4>)
 800062e:	f002 fce3 	bl	8002ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <HAL_ADC_MspInit+0xfc>)
 8000636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 800064c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 800065c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 800066a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800066e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 8000678:	f002 f9d4 	bl	8002a24 <HAL_DMA_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000682:	f000 fd9b 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 800068a:	639a      	str	r2, [r3, #56]	; 0x38
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_ADC_MspInit+0xf8>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	2012      	movs	r0, #18
 8000698:	f002 f99a 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800069c:	2012      	movs	r0, #18
 800069e:	f002 f9b3 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012000 	.word	0x40012000
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	20004ab0 	.word	0x20004ab0
 80006bc:	40026410 	.word	0x40026410

080006c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_CAN1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_CAN1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_CAN1_Init+0x64>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_CAN1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_CAN1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_CAN1_Init+0x64>)
 80006de:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80006e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_CAN1_Init+0x64>)
 80006e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_CAN1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_CAN1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_CAN1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_CAN1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_CAN1_Init+0x64>)
 8000712:	f001 fd71 	bl	80021f8 <HAL_CAN_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 fd4e 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20004b38 	.word	0x20004b38
 8000728:	40006400 	.word	0x40006400

0800072c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_CAN2_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_CAN2_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_CAN2_Init+0x64>)
 8000738:	2206      	movs	r2, #6
 800073a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_CAN2_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_CAN2_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_CAN2_Init+0x64>)
 800074a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800074e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_CAN2_Init+0x64>)
 8000752:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000756:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_CAN2_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_CAN2_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_CAN2_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_CAN2_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_CAN2_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CAN2_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_CAN2_Init+0x64>)
 800077e:	f001 fd3b 	bl	80021f8 <HAL_CAN_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 fd18 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20004b10 	.word	0x20004b10
 8000794:	40006800 	.word	0x40006800

08000798 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a4f      	ldr	r2, [pc, #316]	; (80008f4 <HAL_CAN_MspInit+0x15c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d14e      	bne.n	8000858 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <HAL_CAN_MspInit+0x160>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a4d      	ldr	r2, [pc, #308]	; (80008f8 <HAL_CAN_MspInit+0x160>)
 80007c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007c4:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_CAN_MspInit+0x160>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10d      	bne.n	80007e8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a49      	ldr	r2, [pc, #292]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80007d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b47      	ldr	r3, [pc, #284]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	4b43      	ldr	r3, [pc, #268]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a42      	ldr	r2, [pc, #264]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b40      	ldr	r3, [pc, #256]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000804:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000816:	2309      	movs	r3, #9
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4837      	ldr	r0, [pc, #220]	; (8000900 <HAL_CAN_MspInit+0x168>)
 8000822:	f002 fbe9 	bl	8002ff8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	2013      	movs	r0, #19
 800082c:	f002 f8d0 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000830:	2013      	movs	r0, #19
 8000832:	f002 f8e9 	bl	8002a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2105      	movs	r1, #5
 800083a:	2014      	movs	r0, #20
 800083c:	f002 f8c8 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000840:	2014      	movs	r0, #20
 8000842:	f002 f8e1 	bl	8002a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2105      	movs	r1, #5
 800084a:	2015      	movs	r0, #21
 800084c:	f002 f8c0 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000850:	2015      	movs	r0, #21
 8000852:	f002 f8d9 	bl	8002a08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000856:	e048      	b.n	80008ea <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a29      	ldr	r2, [pc, #164]	; (8000904 <HAL_CAN_MspInit+0x16c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d143      	bne.n	80008ea <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <HAL_CAN_MspInit+0x164>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <HAL_CAN_MspInit+0x164>)
 800086c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <HAL_CAN_MspInit+0x164>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <HAL_CAN_MspInit+0x160>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_CAN_MspInit+0x160>)
 8000886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_CAN_MspInit+0x160>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10d      	bne.n	80008ac <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_CAN_MspInit+0x164>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_CAN_MspInit+0x164>)
 800089a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_CAN_MspInit+0x164>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80008da:	2309      	movs	r3, #9
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <HAL_CAN_MspInit+0x170>)
 80008e6:	f002 fb87 	bl	8002ff8 <HAL_GPIO_Init>
}
 80008ea:	bf00      	nop
 80008ec:	3730      	adds	r7, #48	; 0x30
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40006400 	.word	0x40006400
 80008f8:	20000090 	.word	0x20000090
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40006800 	.word	0x40006800
 8000908:	40020400 	.word	0x40020400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_DMA_Init+0x3c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <MX_DMA_Init+0x3c>)
 800091c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_DMA_Init+0x3c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2038      	movs	r0, #56	; 0x38
 8000934:	f002 f84c 	bl	80029d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000938:	2038      	movs	r0, #56	; 0x38
 800093a:	f002 f865 	bl	8002a08 <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x150>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a45      	ldr	r2, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <MX_GPIO_Init+0x150>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <MX_GPIO_Init+0x150>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a3e      	ldr	r2, [pc, #248]	; (8000a9c <MX_GPIO_Init+0x150>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x150>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <MX_GPIO_Init+0x150>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <MX_GPIO_Init+0x150>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_GPIO_Init+0x150>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210e      	movs	r1, #14
 80009d6:	4832      	ldr	r0, [pc, #200]	; (8000aa0 <MX_GPIO_Init+0x154>)
 80009d8:	f002 fcaa 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	21e0      	movs	r1, #224	; 0xe0
 80009e0:	4830      	ldr	r0, [pc, #192]	; (8000aa4 <MX_GPIO_Init+0x158>)
 80009e2:	f002 fca5 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 80009ee:	f002 fc9f 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = enable_AIR_plus_Pin|enable_AIR_minus_Pin|enable_precharge_Pin;
 80009f2:	230e      	movs	r3, #14
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x154>)
 8000a0a:	f002 faf5 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = AIR_plus_closed_Pin|AIR_minus_closed_Pin|precharge_closed_Pin;
 8000a0e:	2370      	movs	r3, #112	; 0x70
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0x154>)
 8000a22:	f002 fae9 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WARNING_LED_Pin|HEARTBEAT_LED_Pin|OK_LED_Pin;
 8000a26:	23e0      	movs	r3, #224	; 0xe0
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0x158>)
 8000a3e:	f002 fadb 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTC_CS_Pin|error_LED_Pin|AMS_error_Pin|IMD_error_Pin;
 8000a42:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000a5c:	f002 facc 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SC_probe_Pin|IMD_ok_Pin;
 8000a60:	2306      	movs	r3, #6
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x160>)
 8000a74:	f002 fac0 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AMS_error_latched_Pin|IMD_error_latched_Pin;
 8000a78:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x15c>)
 8000a8e:	f002 fab3 	bl	8002ff8 <HAL_GPIO_Init>

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	//SEGGER_SYSVIEW_Conf();

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ab4:	f000 ff94 	bl	80019e0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000ab8:	f000 f8b2 	bl	8000c20 <SystemClock_Config>

	/* Initialize all configured peripherals  - in the correct order*/
	MX_GPIO_Init();
 8000abc:	f7ff ff46 	bl	800094c <MX_GPIO_Init>
	MX_SPI2_Init();
 8000ac0:	f000 fb82 	bl	80011c8 <MX_SPI2_Init>
	MX_CAN1_Init();
 8000ac4:	f7ff fdfc 	bl	80006c0 <MX_CAN1_Init>
	MX_CAN2_Init();
 8000ac8:	f7ff fe30 	bl	800072c <MX_CAN2_Init>
	MX_TIM1_Init();
 8000acc:	f000 fd18 	bl	8001500 <MX_TIM1_Init>
	MX_DMA_Init();
 8000ad0:	f7ff ff1c 	bl	800090c <MX_DMA_Init>
	MX_TIM3_Init();
 8000ad4:	f000 fe50 	bl	8001778 <MX_TIM3_Init>
	MX_TIM2_Init();
 8000ad8:	f000 fdb2 	bl	8001640 <MX_TIM2_Init>
	MX_ADC1_Init();
 8000adc:	f7ff fcf4 	bl	80004c8 <MX_ADC1_Init>
	/* Initialize peripherals */
	//initialize_can(&hcan1, &hcan2);
	//initialize_LTC(&hspi2);

	/* Initialize kernel */
	osKernelInitialize();
 8000ae0:	f004 fc04 	bl	80052ec <osKernelInitialize>

	/* Start threads */

	SM_task_handle = osThreadNew(start_SM_task, NULL, &SM_task_attributes);
 8000ae4:	4a2d      	ldr	r2, [pc, #180]	; (8000b9c <main+0xec>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <main+0xf0>)
 8000aea:	f004 fc5e 	bl	80053aa <osThreadNew>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <main+0xf4>)
 8000af2:	6013      	str	r3, [r2, #0]

	IWDG_task_handle = osThreadNew(start_IWDG_task, NULL,
 8000af4:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <main+0xf8>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	482c      	ldr	r0, [pc, #176]	; (8000bac <main+0xfc>)
 8000afa:	f004 fc56 	bl	80053aa <osThreadNew>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <main+0x100>)
 8000b02:	6013      	str	r3, [r2, #0]
			&IWDG_task_attributes);

	event_handler_task_handle = osThreadNew(start_event_handler_task, NULL,
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <main+0x104>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <main+0x108>)
 8000b0a:	f004 fc4e 	bl	80053aa <osThreadNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <main+0x10c>)
 8000b12:	6013      	str	r3, [r2, #0]
			&event_handler_task_attributes);

	IMD_task_handle = osThreadNew(start_IMD_task, NULL, &IMD_task_attributes);
 8000b14:	4a2a      	ldr	r2, [pc, #168]	; (8000bc0 <main+0x110>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	482a      	ldr	r0, [pc, #168]	; (8000bc4 <main+0x114>)
 8000b1a:	f004 fc46 	bl	80053aa <osThreadNew>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <main+0x118>)
 8000b22:	6013      	str	r3, [r2, #0]

	GPIO_task_handle = osThreadNew(start_GPIO_task, NULL,
 8000b24:	4a29      	ldr	r2, [pc, #164]	; (8000bcc <main+0x11c>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4829      	ldr	r0, [pc, #164]	; (8000bd0 <main+0x120>)
 8000b2a:	f004 fc3e 	bl	80053aa <osThreadNew>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <main+0x124>)
 8000b32:	6013      	str	r3, [r2, #0]
			&GPIO_task_attributes);

	ADC_task_handle = osThreadNew(start_ADC_task, NULL, &ADC_task_attributes);
 8000b34:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <main+0x128>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4828      	ldr	r0, [pc, #160]	; (8000bdc <main+0x12c>)
 8000b3a:	f004 fc36 	bl	80053aa <osThreadNew>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a27      	ldr	r2, [pc, #156]	; (8000be0 <main+0x130>)
 8000b42:	6013      	str	r3, [r2, #0]

	COM_task_handle = osThreadNew(start_COM_task, NULL, &COM_task_attributes);
 8000b44:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <main+0x134>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4827      	ldr	r0, [pc, #156]	; (8000be8 <main+0x138>)
 8000b4a:	f004 fc2e 	bl	80053aa <osThreadNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <main+0x13c>)
 8000b52:	6013      	str	r3, [r2, #0]

	CAN_rx_task_handle = osThreadNew(start_CAN_rx_task, NULL,
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <main+0x140>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <main+0x144>)
 8000b5a:	f004 fc26 	bl	80053aa <osThreadNew>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <main+0x148>)
 8000b62:	6013      	str	r3, [r2, #0]
			&CAN_rx_task_attributes);

	CAN_tx_task_handle = osThreadNew(start_CAN_tx_task, NULL,
 8000b64:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <main+0x14c>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4825      	ldr	r0, [pc, #148]	; (8000c00 <main+0x150>)
 8000b6a:	f004 fc1e 	bl	80053aa <osThreadNew>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <main+0x154>)
 8000b72:	6013      	str	r3, [r2, #0]
			&CAN_tx_task_attributes);

	COOL_task_handle = osThreadNew(start_COOL_task, NULL,
 8000b74:	4a24      	ldr	r2, [pc, #144]	; (8000c08 <main+0x158>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <main+0x15c>)
 8000b7a:	f004 fc16 	bl	80053aa <osThreadNew>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <main+0x160>)
 8000b82:	6013      	str	r3, [r2, #0]
			&COOL_task_attributes);

	SIM_task_handle = osThreadNew(start_SIM_task, NULL, &SIM_task_attributes);
 8000b84:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <main+0x164>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4823      	ldr	r0, [pc, #140]	; (8000c18 <main+0x168>)
 8000b8a:	f004 fc0e 	bl	80053aa <osThreadNew>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <main+0x16c>)
 8000b92:	6013      	str	r3, [r2, #0]

	/* Launch RTOS ! */
	osKernelStart();
 8000b94:	f004 fbce 	bl	8005334 <osKernelStart>

	for (;;)
 8000b98:	e7fe      	b.n	8000b98 <main+0xe8>
 8000b9a:	bf00      	nop
 8000b9c:	080081a8 	.word	0x080081a8
 8000ba0:	08000cf5 	.word	0x08000cf5
 8000ba4:	20004b6c 	.word	0x20004b6c
 8000ba8:	080081cc 	.word	0x080081cc
 8000bac:	08000d61 	.word	0x08000d61
 8000bb0:	20004b88 	.word	0x20004b88
 8000bb4:	080081f0 	.word	0x080081f0
 8000bb8:	08000dcd 	.word	0x08000dcd
 8000bbc:	20004b60 	.word	0x20004b60
 8000bc0:	08008214 	.word	0x08008214
 8000bc4:	08000e39 	.word	0x08000e39
 8000bc8:	20004b8c 	.word	0x20004b8c
 8000bcc:	08008238 	.word	0x08008238
 8000bd0:	08000ea5 	.word	0x08000ea5
 8000bd4:	20004b68 	.word	0x20004b68
 8000bd8:	0800825c 	.word	0x0800825c
 8000bdc:	08000f11 	.word	0x08000f11
 8000be0:	20004b84 	.word	0x20004b84
 8000be4:	08008280 	.word	0x08008280
 8000be8:	08000f7d 	.word	0x08000f7d
 8000bec:	20004b64 	.word	0x20004b64
 8000bf0:	080082a4 	.word	0x080082a4
 8000bf4:	08000fe9 	.word	0x08000fe9
 8000bf8:	20004b80 	.word	0x20004b80
 8000bfc:	080082c8 	.word	0x080082c8
 8000c00:	08001055 	.word	0x08001055
 8000c04:	20004b70 	.word	0x20004b70
 8000c08:	080082ec 	.word	0x080082ec
 8000c0c:	080010c1 	.word	0x080010c1
 8000c10:	20004b78 	.word	0x20004b78
 8000c14:	08008310 	.word	0x08008310
 8000c18:	0800112d 	.word	0x0800112d
 8000c1c:	20004b74 	.word	0x20004b74

08000c20 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	2230      	movs	r2, #48	; 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f007 f990 	bl	8007f54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <SystemClock_Config+0xcc>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <SystemClock_Config+0xcc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c94:	2308      	movs	r3, #8
 8000c96:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000c98:	2354      	movs	r3, #84	; 0x54
 8000c9a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fb5b 	bl	8003364 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x98>
		Error_Handler();
 8000cb4:	f000 fa82 	bl	80011bc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cb8:	230f      	movs	r3, #15
 8000cba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fdbd 	bl	8003854 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xc4>
		Error_Handler();
 8000ce0:	f000 fa6c 	bl	80011bc <Error_Handler>
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3750      	adds	r7, #80	; 0x50
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <start_SM_task>:

/* USER CODE BEGIN 4 */

/* ENTER TASKS */

void start_SM_task(void *argument) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000cfc:	f004 fb40 	bl	8005380 <osKernelGetTickCount>
 8000d00:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * SM_task_info.periodicity;
 8000d02:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000d54 <start_SM_task+0x60>
 8000d06:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000d58 <start_SM_task+0x64>
 8000d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d12:	ee17 3a90 	vmov	r3, s15
 8000d16:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * SM_task_info.offset;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d22:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000d5c <start_SM_task+0x68>
 8000d26:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000d58 <start_SM_task+0x64>
 8000d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d36:	ee17 3a90 	vmov	r3, s15
 8000d3a:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f004 fbc6 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f004 fbbf 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000d50:	e7f7      	b.n	8000d42 <start_SM_task+0x4e>
 8000d52:	bf00      	nop
 8000d54:	3e4ccccd 	.word	0x3e4ccccd
 8000d58:	447a0000 	.word	0x447a0000
 8000d5c:	00000000 	.word	0x00000000

08000d60 <start_IWDG_task>:
	}
}

void start_IWDG_task(void *argument) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000d68:	f004 fb0a 	bl	8005380 <osKernelGetTickCount>
 8000d6c:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * IWDG_task_info.periodicity;
 8000d6e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000dc0 <start_IWDG_task+0x60>
 8000d72:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000dc4 <start_IWDG_task+0x64>
 8000d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7e:	ee17 3a90 	vmov	r3, s15
 8000d82:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * IWDG_task_info.offset;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	ee07 3a90 	vmov	s15, r3
 8000d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d8e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000dc8 <start_IWDG_task+0x68>
 8000d92:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000dc4 <start_IWDG_task+0x64>
 8000d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da2:	ee17 3a90 	vmov	r3, s15
 8000da6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f004 fb90 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f004 fb89 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000dbc:	e7f7      	b.n	8000dae <start_IWDG_task+0x4e>
 8000dbe:	bf00      	nop
 8000dc0:	3e4ccccd 	.word	0x3e4ccccd
 8000dc4:	447a0000 	.word	0x447a0000
 8000dc8:	3c23d70a 	.word	0x3c23d70a

08000dcc <start_event_handler_task>:
	}
}

void start_event_handler_task(void *argument) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000dd4:	f004 fad4 	bl	8005380 <osKernelGetTickCount>
 8000dd8:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * event_handler_task_info.periodicity;
 8000dda:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e2c <start_event_handler_task+0x60>
 8000dde:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000e30 <start_event_handler_task+0x64>
 8000de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dea:	ee17 3a90 	vmov	r3, s15
 8000dee:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * event_handler_task_info.offset;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dfa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000e34 <start_event_handler_task+0x68>
 8000dfe:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000e30 <start_event_handler_task+0x64>
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0e:	ee17 3a90 	vmov	r3, s15
 8000e12:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f004 fb5a 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f004 fb53 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000e28:	e7f7      	b.n	8000e1a <start_event_handler_task+0x4e>
 8000e2a:	bf00      	nop
 8000e2c:	3dcccccd 	.word	0x3dcccccd
 8000e30:	447a0000 	.word	0x447a0000
 8000e34:	3c343958 	.word	0x3c343958

08000e38 <start_IMD_task>:
	}
}

void start_IMD_task(void *argument) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000e40:	f004 fa9e 	bl	8005380 <osKernelGetTickCount>
 8000e44:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * IMD_task_info.periodicity;
 8000e46:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e98 <start_IMD_task+0x60>
 8000e4a:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000e9c <start_IMD_task+0x64>
 8000e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e56:	ee17 3a90 	vmov	r3, s15
 8000e5a:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * IMD_task_info.offset;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e66:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000ea0 <start_IMD_task+0x68>
 8000e6a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000e9c <start_IMD_task+0x64>
 8000e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
 8000e7e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f004 fb24 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f004 fb1d 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000e94:	e7f7      	b.n	8000e86 <start_IMD_task+0x4e>
 8000e96:	bf00      	nop
 8000e98:	3e4ccccd 	.word	0x3e4ccccd
 8000e9c:	447a0000 	.word	0x447a0000
 8000ea0:	3c449ba6 	.word	0x3c449ba6

08000ea4 <start_GPIO_task>:
	}
}

void start_GPIO_task(void *argument) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000eac:	f004 fa68 	bl	8005380 <osKernelGetTickCount>
 8000eb0:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * GPIO_task_info.periodicity;
 8000eb2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f04 <start_GPIO_task+0x60>
 8000eb6:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000f08 <start_GPIO_task+0x64>
 8000eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec2:	ee17 3a90 	vmov	r3, s15
 8000ec6:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * GPIO_task_info.offset;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ed2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000f0c <start_GPIO_task+0x68>
 8000ed6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f08 <start_GPIO_task+0x64>
 8000eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee6:	ee17 3a90 	vmov	r3, s15
 8000eea:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f004 faee 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f004 fae7 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000f00:	e7f7      	b.n	8000ef2 <start_GPIO_task+0x4e>
 8000f02:	bf00      	nop
 8000f04:	3e4ccccd 	.word	0x3e4ccccd
 8000f08:	447a0000 	.word	0x447a0000
 8000f0c:	3c54fdf4 	.word	0x3c54fdf4

08000f10 <start_ADC_task>:
	}
}

void start_ADC_task(void *argument) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000f18:	f004 fa32 	bl	8005380 <osKernelGetTickCount>
 8000f1c:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * ADC_task_info.periodicity;
 8000f1e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f70 <start_ADC_task+0x60>
 8000f22:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000f74 <start_ADC_task+0x64>
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * ADC_task_info.offset;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f3e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000f78 <start_ADC_task+0x68>
 8000f42:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f74 <start_ADC_task+0x64>
 8000f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f52:	ee17 3a90 	vmov	r3, s15
 8000f56:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f004 fab8 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f004 fab1 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000f6c:	e7f7      	b.n	8000f5e <start_ADC_task+0x4e>
 8000f6e:	bf00      	nop
 8000f70:	3e4ccccd 	.word	0x3e4ccccd
 8000f74:	447a0000 	.word	0x447a0000
 8000f78:	3c656042 	.word	0x3c656042

08000f7c <start_COM_task>:
	}
}

void start_COM_task(void *argument) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000f84:	f004 f9fc 	bl	8005380 <osKernelGetTickCount>
 8000f88:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * COM_task_info.periodicity;
 8000f8a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000fdc <start_COM_task+0x60>
 8000f8e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000fe0 <start_COM_task+0x64>
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9a:	ee17 3a90 	vmov	r3, s15
 8000f9e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * COM_task_info.offset;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000faa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000fe4 <start_COM_task+0x68>
 8000fae:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000fe0 <start_COM_task+0x64>
 8000fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f004 fa82 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f004 fa7b 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8000fd8:	e7f7      	b.n	8000fca <start_COM_task+0x4e>
 8000fda:	bf00      	nop
 8000fdc:	3e4ccccd 	.word	0x3e4ccccd
 8000fe0:	447a0000 	.word	0x447a0000
 8000fe4:	3c75c28f 	.word	0x3c75c28f

08000fe8 <start_CAN_rx_task>:
	}
}

void start_CAN_rx_task(void *argument) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8000ff0:	f004 f9c6 	bl	8005380 <osKernelGetTickCount>
 8000ff4:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * CAN_rx_task_info.periodicity;
 8000ff6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001048 <start_CAN_rx_task+0x60>
 8000ffa:	eddf 7a14 	vldr	s15, [pc, #80]	; 800104c <start_CAN_rx_task+0x64>
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * CAN_rx_task_info.offset;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001016:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001050 <start_CAN_rx_task+0x68>
 800101a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800104c <start_CAN_rx_task+0x64>
 800101e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800102a:	ee17 3a90 	vmov	r3, s15
 800102e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f004 fa4c 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f004 fa45 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8001044:	e7f7      	b.n	8001036 <start_CAN_rx_task+0x4e>
 8001046:	bf00      	nop
 8001048:	3e4ccccd 	.word	0x3e4ccccd
 800104c:	447a0000 	.word	0x447a0000
 8001050:	3d6147ae 	.word	0x3d6147ae

08001054 <start_CAN_tx_task>:
	}
}

void start_CAN_tx_task(void *argument) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 800105c:	f004 f990 	bl	8005380 <osKernelGetTickCount>
 8001060:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * CAN_tx_task_info.periodicity;
 8001062:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80010b4 <start_CAN_tx_task+0x60>
 8001066:	eddf 7a14 	vldr	s15, [pc, #80]	; 80010b8 <start_CAN_tx_task+0x64>
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001072:	ee17 3a90 	vmov	r3, s15
 8001076:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * CAN_tx_task_info.offset;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001082:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80010bc <start_CAN_tx_task+0x68>
 8001086:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80010b8 <start_CAN_tx_task+0x64>
 800108a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f004 fa16 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f004 fa0f 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 80010b0:	e7f7      	b.n	80010a2 <start_CAN_tx_task+0x4e>
 80010b2:	bf00      	nop
 80010b4:	3e4ccccd 	.word	0x3e4ccccd
 80010b8:	447a0000 	.word	0x447a0000
 80010bc:	3d99999a 	.word	0x3d99999a

080010c0 <start_COOL_task>:
		next_tick += tick_increment;
		osDelayUntil(next_tick);
	}
}

void start_COOL_task(void *argument) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 80010c8:	f004 f95a 	bl	8005380 <osKernelGetTickCount>
 80010cc:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * COOL_task_info.periodicity;
 80010ce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001120 <start_COOL_task+0x60>
 80010d2:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001124 <start_COOL_task+0x64>
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010de:	ee17 3a90 	vmov	r3, s15
 80010e2:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * COOL_task_info.offset;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001128 <start_COOL_task+0x68>
 80010f2:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001124 <start_COOL_task+0x64>
 80010f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001102:	ee17 3a90 	vmov	r3, s15
 8001106:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f004 f9e0 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f004 f9d9 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 800111c:	e7f7      	b.n	800110e <start_COOL_task+0x4e>
 800111e:	bf00      	nop
 8001120:	3e4ccccd 	.word	0x3e4ccccd
 8001124:	447a0000 	.word	0x447a0000
 8001128:	3de147ae 	.word	0x3de147ae

0800112c <start_SIM_task>:
	}
}

void start_SIM_task(void *argument) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	/* Set up task-specific timing parameters */
	uint32_t next_tick = osKernelGetTickCount();
 8001134:	f004 f924 	bl	8005380 <osKernelGetTickCount>
 8001138:	60f8      	str	r0, [r7, #12]
	uint32_t tick_increment = configTICK_RATE_HZ * SIM_task_info.periodicity;
 800113a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800118c <start_SIM_task+0x60>
 800113e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001190 <start_SIM_task+0x64>
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114a:	ee17 3a90 	vmov	r3, s15
 800114e:	60bb      	str	r3, [r7, #8]

	/* Make task-specific structures */

	/* Wait until offset */
	next_tick += configTICK_RATE_HZ * SIM_task_info.offset;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001194 <start_SIM_task+0x68>
 800115e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001190 <start_SIM_task+0x64>
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	60fb      	str	r3, [r7, #12]
	osDelayUntil(next_tick);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f004 f9aa 	bl	80054ce <osDelayUntil>

	/* Enter periodic behaviour */
	for (;;) {

		/* Wait until next period */
		next_tick += tick_increment;
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
		osDelayUntil(next_tick);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f004 f9a3 	bl	80054ce <osDelayUntil>
		next_tick += tick_increment;
 8001188:	e7f7      	b.n	800117a <start_SIM_task+0x4e>
 800118a:	bf00      	nop
 800118c:	3e4ccccd 	.word	0x3e4ccccd
 8001190:	447a0000 	.word	0x447a0000
 8001194:	3de353f8 	.word	0x3de353f8

08001198 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80011aa:	f000 fc3b 	bl	8001a24 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40000c00 	.word	0x40000c00

080011bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_SPI2_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_SPI2_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI2_Init+0x64>)
 80011d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI2_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_SPI2_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI2_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI2_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI2_Init+0x64>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI2_Init+0x64>)
 80011fc:	2220      	movs	r2, #32
 80011fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_SPI2_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI2_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_SPI2_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI2_Init+0x64>)
 8001214:	220a      	movs	r2, #10
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_SPI2_Init+0x64>)
 800121a:	f002 fd09 	bl	8003c30 <HAL_SPI_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001224:	f7ff ffca 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20004b90 	.word	0x20004b90
 8001230:	40003800 	.word	0x40003800

08001234 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <HAL_SPI_MspInit+0xc0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d14a      	bne.n	80012ec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_SPI_MspInit+0xc4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012aa:	230c      	movs	r3, #12
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ba:	2305      	movs	r3, #5
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <HAL_SPI_MspInit+0xc8>)
 80012c6:	f001 fe97 	bl	8002ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012dc:	2305      	movs	r3, #5
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <HAL_SPI_MspInit+0xcc>)
 80012e8:	f001 fe86 	bl	8002ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40003800 	.word	0x40003800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020400 	.word	0x40020400

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_MspInit+0x54>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <HAL_MspInit+0x54>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x54>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_MspInit+0x54>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_MspInit+0x54>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_MspInit+0x54>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	210f      	movs	r1, #15
 8001346:	f06f 0001 	mvn.w	r0, #1
 800134a:	f001 fb41 	bl	80029d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f001 fb2d 	bl	80029d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001376:	2032      	movs	r0, #50	; 0x32
 8001378:	f001 fb46 	bl	8002a08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_InitTick+0xa4>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_InitTick+0xa4>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_InitTick+0xa4>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001398:	f107 0210 	add.w	r2, r7, #16
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fc12 	bl	8003bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013a8:	f002 fbfc 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_InitTick+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3b01      	subs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_InitTick+0xac>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_InitTick+0xb0>)
 80013c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_InitTick+0xac>)
 80013c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013cc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_InitTick+0xac>)
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_InitTick+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_InitTick+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <HAL_InitTick+0xac>)
 80013e2:	f002 fcae 	bl	8003d42 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d104      	bne.n	80013f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_InitTick+0xac>)
 80013ee:	f002 fcf7 	bl	8003de0 <HAL_TIM_Base_Start_IT>
 80013f2:	4603      	mov	r3, r0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	431bde83 	.word	0x431bde83
 8001408:	20004be8 	.word	0x20004be8
 800140c:	40000c00 	.word	0x40000c00

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <ADC_IRQHandler+0x10>)
 8001442:	f000 fb52 	bl	8001aea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20004a68 	.word	0x20004a68

08001450 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <CAN1_TX_IRQHandler+0x10>)
 8001456:	f000 ffca 	bl	80023ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20004b38 	.word	0x20004b38

08001464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <CAN1_RX0_IRQHandler+0x10>)
 800146a:	f000 ffc0 	bl	80023ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20004b38 	.word	0x20004b38

08001478 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <CAN1_RX1_IRQHandler+0x10>)
 800147e:	f000 ffb6 	bl	80023ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20004b38 	.word	0x20004b38

0800148c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM2_IRQHandler+0x10>)
 8001492:	f002 fdc7 	bl	8004024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20004cc0 	.word	0x20004cc0

080014a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM3_IRQHandler+0x10>)
 80014a6:	f002 fdbd 	bl	8004024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20004c30 	.word	0x20004c30

080014b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM5_IRQHandler+0x10>)
 80014ba:	f002 fdb3 	bl	8004024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20004be8 	.word	0x20004be8

080014c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA2_Stream0_IRQHandler+0x10>)
 80014ce:	f001 fb57 	bl	8002b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20004ab0 	.word	0x20004ab0

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b096      	sub	sp, #88	; 0x58
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2220      	movs	r2, #32
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fd0b 	bl	8007f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <MX_TIM1_Init+0x138>)
 8001540:	4a3e      	ldr	r2, [pc, #248]	; (800163c <MX_TIM1_Init+0x13c>)
 8001542:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001544:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_TIM1_Init+0x138>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <MX_TIM1_Init+0x138>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <MX_TIM1_Init+0x138>)
 8001552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001556:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b37      	ldr	r3, [pc, #220]	; (8001638 <MX_TIM1_Init+0x138>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <MX_TIM1_Init+0x138>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <MX_TIM1_Init+0x138>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156a:	4833      	ldr	r0, [pc, #204]	; (8001638 <MX_TIM1_Init+0x138>)
 800156c:	f002 fbe9 	bl	8003d42 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001576:	f7ff fe21 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001580:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001584:	4619      	mov	r1, r3
 8001586:	482c      	ldr	r0, [pc, #176]	; (8001638 <MX_TIM1_Init+0x138>)
 8001588:	f002 ffb2 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001592:	f7ff fe13 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001596:	4828      	ldr	r0, [pc, #160]	; (8001638 <MX_TIM1_Init+0x138>)
 8001598:	f002 fc92 	bl	8003ec0 <HAL_TIM_PWM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015a2:	f7ff fe0b 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b2:	4619      	mov	r1, r3
 80015b4:	4820      	ldr	r0, [pc, #128]	; (8001638 <MX_TIM1_Init+0x138>)
 80015b6:	f003 fd73 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015c0:	f7ff fdfc 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	2208      	movs	r2, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_TIM1_Init+0x138>)
 80015ea:	f002 febf 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015f4:	f7ff fde2 	bl	80011bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM1_Init+0x138>)
 800161c:	f003 fdbc 	bl	8005198 <HAL_TIMEx_ConfigBreakDeadTime>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001626:	f7ff fdc9 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM1_Init+0x138>)
 800162c:	f000 f974 	bl	8001918 <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3758      	adds	r7, #88	; 0x58
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20004c78 	.word	0x20004c78
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b090      	sub	sp, #64	; 0x40
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167a:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <MX_TIM2_Init+0x134>)
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <MX_TIM2_Init+0x134>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <MX_TIM2_Init+0x134>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <MX_TIM2_Init+0x134>)
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <MX_TIM2_Init+0x134>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <MX_TIM2_Init+0x134>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a2:	4834      	ldr	r0, [pc, #208]	; (8001774 <MX_TIM2_Init+0x134>)
 80016a4:	f002 fb4d 	bl	8003d42 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ae:	f7ff fd85 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016bc:	4619      	mov	r1, r3
 80016be:	482d      	ldr	r0, [pc, #180]	; (8001774 <MX_TIM2_Init+0x134>)
 80016c0:	f002 ff16 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ca:	f7ff fd77 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80016ce:	4829      	ldr	r0, [pc, #164]	; (8001774 <MX_TIM2_Init+0x134>)
 80016d0:	f002 fc4f 	bl	8003f72 <HAL_TIM_IC_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016da:	f7ff fd6f 	bl	80011bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016de:	2304      	movs	r3, #4
 80016e0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80016e2:	2350      	movs	r3, #80	; 0x50
 80016e4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	481e      	ldr	r0, [pc, #120]	; (8001774 <MX_TIM2_Init+0x134>)
 80016fa:	f002 ffc0 	bl	800467e <HAL_TIM_SlaveConfigSynchro>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001704:	f7ff fd5a 	bl	80011bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_TIM2_Init+0x134>)
 8001722:	f002 fd87 	bl	8004234 <HAL_TIM_IC_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800172c:	f7ff fd46 	bl	80011bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001730:	2302      	movs	r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2204      	movs	r2, #4
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM2_Init+0x134>)
 8001742:	f002 fd77 	bl	8004234 <HAL_TIM_IC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 800174c:	f7ff fd36 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM2_Init+0x134>)
 800175e:	f003 fc9f 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001768:	f7ff fd28 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3740      	adds	r7, #64	; 0x40
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20004cc0 	.word	0x20004cc0

08001778 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM3_Init+0x94>)
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <MX_TIM3_Init+0x98>)
 8001798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_TIM3_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM3_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <MX_TIM3_Init+0x94>)
 80017a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_TIM3_Init+0x94>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_TIM3_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_TIM3_Init+0x94>)
 80017bc:	f002 fac1 	bl	8003d42 <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017c6:	f7ff fcf9 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_TIM3_Init+0x94>)
 80017d8:	f002 fe8a 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017e2:	f7ff fceb 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017e6:	2320      	movs	r3, #32
 80017e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <MX_TIM3_Init+0x94>)
 80017f4:	f003 fc54 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017fe:	f7ff fcdd 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20004c30 	.word	0x20004c30
 8001810:	40000400 	.word	0x40000400

08001814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a35      	ldr	r2, [pc, #212]	; (8001908 <HAL_TIM_Base_MspInit+0xf4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10e      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a33      	ldr	r2, [pc, #204]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001852:	e055      	b.n	8001900 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d135      	bne.n	80018ca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a22      	ldr	r2, [pc, #136]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMD_data_Pin;
 8001896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMD_data_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4817      	ldr	r0, [pc, #92]	; (8001910 <HAL_TIM_Base_MspInit+0xfc>)
 80018b4:	f001 fba0 	bl	8002ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2105      	movs	r1, #5
 80018bc:	201c      	movs	r0, #28
 80018be:	f001 f887 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c2:	201c      	movs	r0, #28
 80018c4:	f001 f8a0 	bl	8002a08 <HAL_NVIC_EnableIRQ>
}
 80018c8:	e01a      	b.n	8001900 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_TIM_Base_MspInit+0x100>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d115      	bne.n	8001900 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0xf8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2105      	movs	r1, #5
 80018f4:	201d      	movs	r0, #29
 80018f6:	f001 f86b 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018fa:	201d      	movs	r0, #29
 80018fc:	f001 f884 	bl	8002a08 <HAL_NVIC_EnableIRQ>
}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010000 	.word	0x40010000
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	40000400 	.word	0x40000400

08001918 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_TIM_MspPostInit+0x68>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d11e      	bne.n	8001978 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_TIM_MspPostInit+0x6c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_TIM_MspPostInit+0x6c>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_TIM_MspPostInit+0x6c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = fan_PWM_Pin;
 8001956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fan_PWM_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_TIM_MspPostInit+0x70>)
 8001974:	f001 fb40 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010000 	.word	0x40010000
 8001984:	40023800 	.word	0x40023800
 8001988:	40021000 	.word	0x40021000

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019b6:	f7ff fd91 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f006 fa97 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff f877 	bl	8000ab0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019d0:	080083c4 	.word	0x080083c4
  ldr r2, =_sbss
 80019d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019d8:	20004d58 	.word	0x20004d58

080019dc <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <CAN1_SCE_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 ffd6 	bl	80029ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff fca4 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fc76 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20004d08 	.word	0x20004d08

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20004d08 	.word	0x20004d08

08001a64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e033      	b.n	8001ae2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fd9c 	bl	80005c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	f043 0202 	orr.w	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa98 	bl	8001fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad2:	e001      	b.n	8001ad8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d049      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0xd6>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d046      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d12b      	bne.n	8001bb0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d127      	bne.n	8001bb0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d119      	bne.n	8001bb0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0220 	bic.w	r2, r2, #32
 8001b8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8db 	bl	8001d6c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0212 	mvn.w	r2, #18
 8001bbe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d057      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x1b8>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d054      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d139      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d12b      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d124      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11d      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 faa6 	bl	80021e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 020c 	mvn.w	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d017      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x21a>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d014      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10d      	bne.n	8001d04 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f843 	bl	8001d80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0201 	mvn.w	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x27a>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0220 	mvn.w	r2, #32
 8001d52:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f81d 	bl	8001d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0220 	mvn.w	r2, #32
 8001d62:	601a      	str	r2, [r3, #0]
  }
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1c>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e105      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x228>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d925      	bls.n	8001e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68d9      	ldr	r1, [r3, #12]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	3b1e      	subs	r3, #30
 8001dea:	2207      	movs	r2, #7
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43da      	mvns	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	400a      	ands	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68d9      	ldr	r1, [r3, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4403      	add	r3, r0
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	409a      	lsls	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	e022      	b.n	8001e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	2207      	movs	r2, #7
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4403      	add	r3, r0
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d824      	bhi.n	8001eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b05      	subs	r3, #5
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b05      	subs	r3, #5
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb6:	e04c      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d824      	bhi.n	8001f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b23      	subs	r3, #35	; 0x23
 8001ed2:	221f      	movs	r2, #31
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	400a      	ands	r2, r1
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b23      	subs	r3, #35	; 0x23
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
 8001f08:	e023      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b41      	subs	r3, #65	; 0x41
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b41      	subs	r3, #65	; 0x41
 8001f46:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_ADC_ConfigChannel+0x234>)
 8001f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <HAL_ADC_ConfigChannel+0x238>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1cc>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_ADC_ConfigChannel+0x238>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x21e>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d003      	beq.n	8001f8e <HAL_ADC_ConfigChannel+0x1e6>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b11      	cmp	r3, #17
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d111      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_ADC_ConfigChannel+0x23c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_ADC_ConfigChannel+0x240>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	0c9a      	lsrs	r2, r3, #18
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff4:	4b79      	ldr	r3, [pc, #484]	; (80021dc <ADC_Init+0x1f0>)
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	021a      	lsls	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <ADC_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e00f      	b.n	80020ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0202 	bic.w	r2, r2, #2
 80020f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
 8002104:	005a      	lsls	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	3b01      	subs	r3, #1
 8002144:	035a      	lsls	r2, r3, #13
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e007      	b.n	8002160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	3b01      	subs	r3, #1
 800217c:	051a      	lsls	r2, r3, #20
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a2:	025a      	lsls	r2, r3, #9
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	029a      	lsls	r2, r3, #10
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40012300 	.word	0x40012300
 80021e0:	0f000001 	.word	0x0f000001

080021e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0ed      	b.n	80023e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fabe 	bl	8000798 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800222c:	f7ff fc0e 	bl	8001a4c <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002232:	e012      	b.n	800225a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002234:	f7ff fc0a 	bl	8001a4c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b0a      	cmp	r3, #10
 8002240:	d90b      	bls.n	800225a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2205      	movs	r2, #5
 8002252:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0c5      	b.n	80023e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0e5      	beq.n	8002234 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0202 	bic.w	r2, r2, #2
 8002276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002278:	f7ff fbe8 	bl	8001a4c <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800227e:	e012      	b.n	80022a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002280:	f7ff fbe4 	bl	8001a4c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d90b      	bls.n	80022a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2205      	movs	r2, #5
 800229e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e09f      	b.n	80023e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e5      	bne.n	8002280 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d108      	bne.n	80022ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e007      	b.n	80022de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7e5b      	ldrb	r3, [r3, #25]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d108      	bne.n	80022f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e007      	b.n	8002308 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7e9b      	ldrb	r3, [r3, #26]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d108      	bne.n	8002322 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0220 	orr.w	r2, r2, #32
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e007      	b.n	8002332 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0220 	bic.w	r2, r2, #32
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7edb      	ldrb	r3, [r3, #27]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0210 	bic.w	r2, r2, #16
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0210 	orr.w	r2, r2, #16
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7f1b      	ldrb	r3, [r3, #28]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d108      	bne.n	8002376 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0208 	orr.w	r2, r2, #8
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e007      	b.n	8002386 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0208 	bic.w	r2, r2, #8
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7f5b      	ldrb	r3, [r3, #29]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0204 	orr.w	r2, r2, #4
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e007      	b.n	80023b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	ea42 0103 	orr.w	r1, r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d07c      	beq.n	800252e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d023      	beq.n	8002486 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f983 	bl	800275c <HAL_CAN_TxMailbox0CompleteCallback>
 8002456:	e016      	b.n	8002486 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e00c      	b.n	8002486 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e002      	b.n	8002486 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f989 	bl	8002798 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d024      	beq.n	80024da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002498:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f963 	bl	8002770 <HAL_CAN_TxMailbox1CompleteCallback>
 80024aa:	e016      	b.n	80024da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	e00c      	b.n	80024da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	e002      	b.n	80024da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f969 	bl	80027ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d024      	beq.n	800252e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f943 	bl	8002784 <HAL_CAN_TxMailbox2CompleteCallback>
 80024fe:	e016      	b.n	800252e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	e00c      	b.n	800252e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	e002      	b.n	800252e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f949 	bl	80027c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002548:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2210      	movs	r2, #16
 8002550:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2208      	movs	r2, #8
 800256c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f93a 	bl	80027e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f921 	bl	80027d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2210      	movs	r2, #16
 80025b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2208      	movs	r2, #8
 80025d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f91c 	bl	8002810 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f903 	bl	80027fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00b      	beq.n	8002618 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2210      	movs	r2, #16
 8002610:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f906 	bl	8002824 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2208      	movs	r2, #8
 8002632:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8ff 	bl	8002838 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d07b      	beq.n	800273c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d072      	beq.n	8002734 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03e      	beq.n	8002734 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d02b      	beq.n	8002718 <HAL_CAN_IRQHandler+0x32a>
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d82e      	bhi.n	8002722 <HAL_CAN_IRQHandler+0x334>
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d022      	beq.n	800270e <HAL_CAN_IRQHandler+0x320>
 80026c8:	2b50      	cmp	r3, #80	; 0x50
 80026ca:	d82a      	bhi.n	8002722 <HAL_CAN_IRQHandler+0x334>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d019      	beq.n	8002704 <HAL_CAN_IRQHandler+0x316>
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d826      	bhi.n	8002722 <HAL_CAN_IRQHandler+0x334>
 80026d4:	2b30      	cmp	r3, #48	; 0x30
 80026d6:	d010      	beq.n	80026fa <HAL_CAN_IRQHandler+0x30c>
 80026d8:	2b30      	cmp	r3, #48	; 0x30
 80026da:	d822      	bhi.n	8002722 <HAL_CAN_IRQHandler+0x334>
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d002      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x2f8>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d005      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026e4:	e01d      	b.n	8002722 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026ee:	e019      	b.n	8002724 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026f8:	e014      	b.n	8002724 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f043 0320 	orr.w	r3, r3, #32
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002702:	e00f      	b.n	8002724 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800270c:	e00a      	b.n	8002724 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002716:	e005      	b.n	8002724 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002720:	e000      	b.n	8002724 <HAL_CAN_IRQHandler+0x336>
            break;
 8002722:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002732:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2204      	movs	r2, #4
 800273a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f87c 	bl	800284c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff4c 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e2:	f7ff ff61 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 80029e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	6978      	ldr	r0, [r7, #20]
 80029ee:	f7ff ffb1 	bl	8002954 <NVIC_EncodePriority>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff80 	bl	8002900 <__NVIC_SetPriority>
}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff54 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff f80c 	bl	8001a4c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e099      	b.n	8002b74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a60:	e00f      	b.n	8002a82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a62:	f7fe fff3 	bl	8001a4c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d908      	bls.n	8002a82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e078      	b.n	8002b74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e8      	bne.n	8002a62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_DMA_Init+0x158>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d117      	bne.n	8002b46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f9e9 	bl	8002f00 <DMA_CheckFifoParam>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b42:	2301      	movs	r3, #1
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f9a0 	bl	8002e94 <DMA_CalcBaseAndBitshift>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	223f      	movs	r2, #63	; 0x3f
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f010803f 	.word	0xf010803f

08002b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b8c:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_DMA_IRQHandler+0x258>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a92      	ldr	r2, [pc, #584]	; (8002ddc <HAL_DMA_IRQHandler+0x25c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a9b      	lsrs	r3, r3, #10
 8002b98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2208      	movs	r2, #8
 8002bac:	409a      	lsls	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01a      	beq.n	8002bec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2208      	movs	r2, #8
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	2204      	movs	r2, #4
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d012      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	2204      	movs	r2, #4
 8002c46:	409a      	lsls	r2, r3
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d043      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d03c      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d018      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d024      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
 8002cae:	e01f      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e016      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0208 	bic.w	r2, r2, #8
 8002cde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 808e 	beq.w	8002e1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8086 	beq.w	8002e1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2220      	movs	r2, #32
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d136      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0216 	bic.w	r2, r2, #22
 8002d38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x1da>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0208 	bic.w	r2, r2, #8
 8002d68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	223f      	movs	r2, #63	; 0x3f
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d07d      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
        }
        return;
 8002d96:	e078      	b.n	8002e8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01c      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d030      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e02b      	b.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d027      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
 8002dd6:	e022      	b.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0210 	bic.w	r2, r2, #16
 8002dfc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d032      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d022      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2205      	movs	r2, #5
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d307      	bcc.n	8002e66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f2      	bne.n	8002e4a <HAL_DMA_IRQHandler+0x2ca>
 8002e64:	e000      	b.n	8002e68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e66:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e8a:	bf00      	nop
    }
  }
}
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop

08002e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3b10      	subs	r3, #16
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eae:	4a13      	ldr	r2, [pc, #76]	; (8002efc <DMA_CalcBaseAndBitshift+0x68>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d909      	bls.n	8002ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	1d1a      	adds	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed4:	e007      	b.n	8002ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	aaaaaaab 	.word	0xaaaaaaab
 8002efc:	0800834c 	.word	0x0800834c

08002f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11f      	bne.n	8002f5a <DMA_CheckFifoParam+0x5a>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d856      	bhi.n	8002fce <DMA_CheckFifoParam+0xce>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <DMA_CheckFifoParam+0x28>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f4b 	.word	0x08002f4b
 8002f30:	08002f39 	.word	0x08002f39
 8002f34:	08002fcf 	.word	0x08002fcf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d046      	beq.n	8002fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f48:	e043      	b.n	8002fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f52:	d140      	bne.n	8002fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f58:	e03d      	b.n	8002fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d121      	bne.n	8002fa8 <DMA_CheckFifoParam+0xa8>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d837      	bhi.n	8002fda <DMA_CheckFifoParam+0xda>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <DMA_CheckFifoParam+0x70>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f87 	.word	0x08002f87
 8002f78:	08002f81 	.word	0x08002f81
 8002f7c:	08002f99 	.word	0x08002f99
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e030      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d025      	beq.n	8002fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f96:	e022      	b.n	8002fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa0:	d11f      	bne.n	8002fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fa6:	e01c      	b.n	8002fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d903      	bls.n	8002fb6 <DMA_CheckFifoParam+0xb6>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d003      	beq.n	8002fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb4:	e018      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fba:	e015      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e00b      	b.n	8002fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e00a      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e008      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e006      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e004      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e16b      	b.n	80032ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 815a 	bne.w	80032e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d005      	beq.n	800304a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003046:	2b02      	cmp	r3, #2
 8003048:	d130      	bne.n	80030ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003080:	2201      	movs	r2, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 0201 	and.w	r2, r3, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d017      	beq.n	80030e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d123      	bne.n	800313c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	08da      	lsrs	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3208      	adds	r2, #8
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b4 	beq.w	80032e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b60      	ldr	r3, [pc, #384]	; (8003304 <HAL_GPIO_Init+0x30c>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a5f      	ldr	r2, [pc, #380]	; (8003304 <HAL_GPIO_Init+0x30c>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_GPIO_Init+0x30c>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319a:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <HAL_GPIO_Init+0x310>)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_GPIO_Init+0x314>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d02b      	beq.n	800321e <HAL_GPIO_Init+0x226>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a51      	ldr	r2, [pc, #324]	; (8003310 <HAL_GPIO_Init+0x318>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d025      	beq.n	800321a <HAL_GPIO_Init+0x222>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a50      	ldr	r2, [pc, #320]	; (8003314 <HAL_GPIO_Init+0x31c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01f      	beq.n	8003216 <HAL_GPIO_Init+0x21e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4f      	ldr	r2, [pc, #316]	; (8003318 <HAL_GPIO_Init+0x320>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d019      	beq.n	8003212 <HAL_GPIO_Init+0x21a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4e      	ldr	r2, [pc, #312]	; (800331c <HAL_GPIO_Init+0x324>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_GPIO_Init+0x216>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4d      	ldr	r2, [pc, #308]	; (8003320 <HAL_GPIO_Init+0x328>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00d      	beq.n	800320a <HAL_GPIO_Init+0x212>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <HAL_GPIO_Init+0x32c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <HAL_GPIO_Init+0x20e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_GPIO_Init+0x330>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_GPIO_Init+0x20a>
 80031fe:	2307      	movs	r3, #7
 8003200:	e00e      	b.n	8003220 <HAL_GPIO_Init+0x228>
 8003202:	2308      	movs	r3, #8
 8003204:	e00c      	b.n	8003220 <HAL_GPIO_Init+0x228>
 8003206:	2306      	movs	r3, #6
 8003208:	e00a      	b.n	8003220 <HAL_GPIO_Init+0x228>
 800320a:	2305      	movs	r3, #5
 800320c:	e008      	b.n	8003220 <HAL_GPIO_Init+0x228>
 800320e:	2304      	movs	r3, #4
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x228>
 8003212:	2303      	movs	r3, #3
 8003214:	e004      	b.n	8003220 <HAL_GPIO_Init+0x228>
 8003216:	2302      	movs	r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_Init+0x228>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_GPIO_Init+0x228>
 800321e:	2300      	movs	r3, #0
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f002 0203 	and.w	r2, r2, #3
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	4093      	lsls	r3, r2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003230:	4935      	ldr	r1, [pc, #212]	; (8003308 <HAL_GPIO_Init+0x310>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	089b      	lsrs	r3, r3, #2
 8003236:	3302      	adds	r3, #2
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_GPIO_Init+0x334>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003262:	4a32      	ldr	r2, [pc, #200]	; (800332c <HAL_GPIO_Init+0x334>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003268:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_GPIO_Init+0x334>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328c:	4a27      	ldr	r2, [pc, #156]	; (800332c <HAL_GPIO_Init+0x334>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_GPIO_Init+0x334>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_GPIO_Init+0x334>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_GPIO_Init+0x334>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_GPIO_Init+0x334>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	f67f ae90 	bls.w	8003014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40021400 	.word	0x40021400
 8003324:	40021800 	.word	0x40021800
 8003328:	40021c00 	.word	0x40021c00
 800332c:	40013c00 	.word	0x40013c00

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e264      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d075      	beq.n	800346e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	4ba3      	ldr	r3, [pc, #652]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d00c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338e:	4ba0      	ldr	r3, [pc, #640]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003396:	2b08      	cmp	r3, #8
 8003398:	d112      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b9d      	ldr	r3, [pc, #628]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	4b99      	ldr	r3, [pc, #612]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05b      	beq.n	800346c <HAL_RCC_OscConfig+0x108>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d157      	bne.n	800346c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e23f      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x74>
 80033ca:	4b91      	ldr	r3, [pc, #580]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a90      	ldr	r2, [pc, #576]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b8b      	ldr	r3, [pc, #556]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a8a      	ldr	r2, [pc, #552]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a87      	ldr	r2, [pc, #540]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033fc:	4b84      	ldr	r3, [pc, #528]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a83      	ldr	r2, [pc, #524]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b81      	ldr	r3, [pc, #516]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fb16 	bl	8001a4c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fb12 	bl	8001a4c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e204      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xc0>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fb02 	bl	8001a4c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fafe 	bl	8001a4c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1f0      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0xe8>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	4b65      	ldr	r3, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b62      	ldr	r3, [pc, #392]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b5f      	ldr	r3, [pc, #380]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b5c      	ldr	r3, [pc, #368]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c4      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b56      	ldr	r3, [pc, #344]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4952      	ldr	r1, [pc, #328]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b4f      	ldr	r3, [pc, #316]	; (8003614 <HAL_RCC_OscConfig+0x2b0>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fe fab7 	bl	8001a4c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe fab3 	bl	8001a4c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a5      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b46      	ldr	r3, [pc, #280]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4940      	ldr	r1, [pc, #256]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <HAL_RCC_OscConfig+0x2b0>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fa96 	bl	8001a4c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003524:	f7fe fa92 	bl	8001a4c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e184      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d030      	beq.n	80035b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b30      	ldr	r3, [pc, #192]	; (8003618 <HAL_RCC_OscConfig+0x2b4>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fa76 	bl	8001a4c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe fa72 	bl	8001a4c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e164      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x200>
 8003582:	e015      	b.n	80035b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x2b4>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe fa5f 	bl	8001a4c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fa5b 	bl	8001a4c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e14d      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80a0 	beq.w	80036fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_OscConfig+0x2b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d121      	bne.n	800363e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_RCC_OscConfig+0x2b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <HAL_RCC_OscConfig+0x2b8>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7fe fa21 	bl	8001a4c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e011      	b.n	8003632 <HAL_RCC_OscConfig+0x2ce>
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
 800361c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003620:	f7fe fa14 	bl	8001a4c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e106      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	4b85      	ldr	r3, [pc, #532]	; (8003848 <HAL_RCC_OscConfig+0x4e4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x2f0>
 8003646:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a80      	ldr	r2, [pc, #512]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	e01c      	b.n	800368e <HAL_RCC_OscConfig+0x32a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0x312>
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a7a      	ldr	r2, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b78      	ldr	r3, [pc, #480]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a77      	ldr	r2, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0x32a>
 8003676:	4b75      	ldr	r3, [pc, #468]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a74      	ldr	r2, [pc, #464]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	4b72      	ldr	r3, [pc, #456]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a71      	ldr	r2, [pc, #452]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe f9d9 	bl	8001a4c <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe f9d5 	bl	8001a4c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0c5      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	4b65      	ldr	r3, [pc, #404]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <HAL_RCC_OscConfig+0x33a>
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7fe f9c3 	bl	8001a4c <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe f9bf 	bl	8001a4c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0af      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e0:	4b5a      	ldr	r3, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ee      	bne.n	80036ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f2:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a55      	ldr	r2, [pc, #340]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 80036f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 809b 	beq.w	800383e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d05c      	beq.n	80037ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d141      	bne.n	80037a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_RCC_OscConfig+0x4ec>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fe f993 	bl	8001a4c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe f98f 	bl	8001a4c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e081      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373c:	4b43      	ldr	r3, [pc, #268]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	019b      	lsls	r3, r3, #6
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	061b      	lsls	r3, r3, #24
 800376c:	4937      	ldr	r1, [pc, #220]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <HAL_RCC_OscConfig+0x4ec>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe f968 	bl	8001a4c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003780:	f7fe f964 	bl	8001a4c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e056      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x41c>
 800379e:	e04e      	b.n	800383e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCC_OscConfig+0x4ec>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fe f951 	bl	8001a4c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe f94d 	bl	8001a4c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e03f      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c0:	4b22      	ldr	r3, [pc, #136]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x44a>
 80037cc:	e037      	b.n	800383e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e032      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_OscConfig+0x4e8>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d028      	beq.n	800383a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d121      	bne.n	800383a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d11a      	bne.n	800383a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800380a:	4013      	ands	r3, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003810:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d107      	bne.n	800383a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40007000 	.word	0x40007000
 800384c:	40023800 	.word	0x40023800
 8003850:	42470060 	.word	0x42470060

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe f882 	bl	8001a4c <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe f87e 	bl	8001a4c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fcae 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08008334 	.word	0x08008334
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	20000004 	.word	0x20000004

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a26:	2100      	movs	r1, #0
 8003a28:	6079      	str	r1, [r7, #4]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	60f9      	str	r1, [r7, #12]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a32:	2100      	movs	r1, #0
 8003a34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a36:	4952      	ldr	r1, [pc, #328]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a38:	6889      	ldr	r1, [r1, #8]
 8003a3a:	f001 010c 	and.w	r1, r1, #12
 8003a3e:	2908      	cmp	r1, #8
 8003a40:	d00d      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x3e>
 8003a42:	2908      	cmp	r1, #8
 8003a44:	f200 8094 	bhi.w	8003b70 <HAL_RCC_GetSysClockFreq+0x150>
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x32>
 8003a4c:	2904      	cmp	r1, #4
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x38>
 8003a50:	e08e      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a52:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a54:	60bb      	str	r3, [r7, #8]
       break;
 8003a56:	e08e      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a5a:	60bb      	str	r3, [r7, #8]
      break;
 8003a5c:	e08b      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a5e:	4948      	ldr	r1, [pc, #288]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a60:	6849      	ldr	r1, [r1, #4]
 8003a62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a66:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a68:	4945      	ldr	r1, [pc, #276]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a6a:	6849      	ldr	r1, [r1, #4]
 8003a6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d024      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4942      	ldr	r1, [pc, #264]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a76:	6849      	ldr	r1, [r1, #4]
 8003a78:	0989      	lsrs	r1, r1, #6
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a84:	f04f 0500 	mov.w	r5, #0
 8003a88:	ea00 0204 	and.w	r2, r0, r4
 8003a8c:	ea01 0305 	and.w	r3, r1, r5
 8003a90:	493d      	ldr	r1, [pc, #244]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a92:	fb01 f003 	mul.w	r0, r1, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	fb01 f102 	mul.w	r1, r1, r2
 8003a9c:	1844      	adds	r4, r0, r1
 8003a9e:	493a      	ldr	r1, [pc, #232]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aa0:	fba2 0101 	umull	r0, r1, r2, r1
 8003aa4:	1863      	adds	r3, r4, r1
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	f7fc fb8e 	bl	80001d0 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e04a      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	ea02 0400 	and.w	r4, r2, r0
 8003ad6:	ea03 0501 	and.w	r5, r3, r1
 8003ada:	4620      	mov	r0, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	014b      	lsls	r3, r1, #5
 8003ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003aec:	0142      	lsls	r2, r0, #5
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	1b00      	subs	r0, r0, r4
 8003af4:	eb61 0105 	sbc.w	r1, r1, r5
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	018b      	lsls	r3, r1, #6
 8003b02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b06:	0182      	lsls	r2, r0, #6
 8003b08:	1a12      	subs	r2, r2, r0
 8003b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0e:	f04f 0000 	mov.w	r0, #0
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	00d9      	lsls	r1, r3, #3
 8003b18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b1c:	00d0      	lsls	r0, r2, #3
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	1912      	adds	r2, r2, r4
 8003b24:	eb45 0303 	adc.w	r3, r5, r3
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	0299      	lsls	r1, r3, #10
 8003b32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b36:	0290      	lsls	r0, r2, #10
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7fc fb42 	bl	80001d0 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	60bb      	str	r3, [r7, #8]
      break;
 8003b6e:	e002      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b72:	60bb      	str	r3, [r7, #8]
      break;
 8003b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b76:	68bb      	ldr	r3, [r7, #8]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	017d7840 	.word	0x017d7840

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000000 	.word	0x20000000

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08008344 	.word	0x08008344

08003bcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	220f      	movs	r2, #15
 8003bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0203 	and.w	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <HAL_RCC_GetClockConfig+0x5c>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_GetClockConfig+0x5c>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	08db      	lsrs	r3, r3, #3
 8003c06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c0e:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <HAL_RCC_GetClockConfig+0x60>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0207 	and.w	r2, r3, #7
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40023c00 	.word	0x40023c00

08003c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07b      	b.n	8003d3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c52:	d009      	beq.n	8003c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
 8003c5a:	e005      	b.n	8003c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd fad6 	bl	8001234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0104 	and.w	r1, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0210 	and.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e041      	b.n	8003dd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fd fd53 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fce7 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04e      	b.n	8003e96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d022      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d01d      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d018      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <HAL_TIM_Base_Start_IT+0xcc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x80>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d111      	bne.n	8003e84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d010      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e007      	b.n	8003e94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40010400 	.word	0x40010400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40001800 	.word	0x40001800

08003ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e041      	b.n	8003f56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f839 	bl	8003f5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f000 fc28 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e041      	b.n	8004008 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f839 	bl	8004010 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f000 fbcf 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0202 	mvn.w	r2, #2
 8004050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fb55 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fb47 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb58 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0204 	mvn.w	r2, #4
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb2b 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb1d 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb2e 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0208 	mvn.w	r2, #8
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fb01 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 faf3 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb04 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b10      	cmp	r3, #16
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0210 	mvn.w	r2, #16
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2208      	movs	r2, #8
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fad7 	bl	8004716 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fac9 	bl	8004702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fada 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0201 	mvn.w	r2, #1
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc fff8 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f001 f83e 	bl	8005250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa9f 	bl	800473e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0220 	mvn.w	r2, #32
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f001 f808 	bl	800523c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_TIM_IC_ConfigChannel+0x1e>
 800424e:	2302      	movs	r3, #2
 8004250:	e088      	b.n	8004364 <HAL_TIM_IC_ConfigChannel+0x130>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f000 fd52 	bl	8004d18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020c 	bic.w	r2, r2, #12
 8004282:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
 8004296:	e060      	b.n	800435a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d11c      	bne.n	80042d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f000 fdd6 	bl	8004e5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6999      	ldr	r1, [r3, #24]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	619a      	str	r2, [r3, #24]
 80042d6:	e040      	b.n	800435a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d11b      	bne.n	8004316 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f000 fe23 	bl	8004f38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 020c 	bic.w	r2, r2, #12
 8004300:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69d9      	ldr	r1, [r3, #28]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	61da      	str	r2, [r3, #28]
 8004314:	e021      	b.n	800435a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d11c      	bne.n	8004356 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f000 fe40 	bl	8004fb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800433e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69d9      	ldr	r1, [r3, #28]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	61da      	str	r2, [r3, #28]
 8004354:	e001      	b.n	800435a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e0ae      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	f200 809f 	bhi.w	80044d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	080044d9 	.word	0x080044d9
 80043a8:	080044d9 	.word	0x080044d9
 80043ac:	080044d9 	.word	0x080044d9
 80043b0:	08004415 	.word	0x08004415
 80043b4:	080044d9 	.word	0x080044d9
 80043b8:	080044d9 	.word	0x080044d9
 80043bc:	080044d9 	.word	0x080044d9
 80043c0:	08004457 	.word	0x08004457
 80043c4:	080044d9 	.word	0x080044d9
 80043c8:	080044d9 	.word	0x080044d9
 80043cc:	080044d9 	.word	0x080044d9
 80043d0:	08004497 	.word	0x08004497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fa5a 	bl	8004894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0208 	orr.w	r2, r2, #8
 80043ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0204 	bic.w	r2, r2, #4
 80043fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6999      	ldr	r1, [r3, #24]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	619a      	str	r2, [r3, #24]
      break;
 8004412:	e064      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 faaa 	bl	8004974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]
      break;
 8004454:	e043      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 faff 	bl	8004a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0208 	orr.w	r2, r2, #8
 8004470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0204 	bic.w	r2, r2, #4
 8004480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69d9      	ldr	r1, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	61da      	str	r2, [r3, #28]
      break;
 8004494:	e023      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb53 	bl	8004b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	61da      	str	r2, [r3, #28]
      break;
 80044d6:	e002      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIM_ConfigClockSource+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e0b4      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x186>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	f000 8086 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x172>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xa6>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x11a>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xfa>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x13a>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f000 fd5b 	bl	8005060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04f      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f000 fd44 	bl	8005060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 fc02 	bl	8004e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fd11 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004608:	e02c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	461a      	mov	r2, r3
 8004618:	f000 fc5e 	bl	8004ed8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	; 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fd01 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004628:	e01c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	461a      	mov	r2, r3
 8004638:	f000 fbe2 	bl	8004e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fcf1 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 8004648:	e00c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 fce8 	bl	800502a <TIM_ITRx_SetConfig>
      break;
 800465a:	e003      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004692:	2302      	movs	r3, #2
 8004694:	e031      	b.n	80046fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 faa3 	bl	8004bf4 <TIM_SlaveTimer_SetConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e018      	b.n	80046fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <TIM_Base_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d00f      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3d      	ldr	r2, [pc, #244]	; (800486c <TIM_Base_SetConfig+0x118>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <TIM_Base_SetConfig+0x11c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3b      	ldr	r2, [pc, #236]	; (8004874 <TIM_Base_SetConfig+0x120>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3a      	ldr	r2, [pc, #232]	; (8004878 <TIM_Base_SetConfig+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <TIM_Base_SetConfig+0x114>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d027      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2c      	ldr	r2, [pc, #176]	; (800486c <TIM_Base_SetConfig+0x118>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d023      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <TIM_Base_SetConfig+0x11c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2a      	ldr	r2, [pc, #168]	; (8004874 <TIM_Base_SetConfig+0x120>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a29      	ldr	r2, [pc, #164]	; (8004878 <TIM_Base_SetConfig+0x124>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d017      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a28      	ldr	r2, [pc, #160]	; (800487c <TIM_Base_SetConfig+0x128>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a27      	ldr	r2, [pc, #156]	; (8004880 <TIM_Base_SetConfig+0x12c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <TIM_Base_SetConfig+0x130>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <TIM_Base_SetConfig+0x134>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a24      	ldr	r2, [pc, #144]	; (800488c <TIM_Base_SetConfig+0x138>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <TIM_Base_SetConfig+0x13c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <TIM_Base_SetConfig+0x114>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <TIM_Base_SetConfig+0x124>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40010400 	.word	0x40010400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	40001800 	.word	0x40001800
 800488c:	40001c00 	.word	0x40001c00
 8004890:	40002000 	.word	0x40002000

08004894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0201 	bic.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 0302 	bic.w	r3, r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a20      	ldr	r2, [pc, #128]	; (800496c <TIM_OC1_SetConfig+0xd8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_OC1_SetConfig+0x64>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <TIM_OC1_SetConfig+0xdc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10c      	bne.n	8004912 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0308 	bic.w	r3, r3, #8
 80048fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0304 	bic.w	r3, r3, #4
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <TIM_OC1_SetConfig+0xd8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_OC1_SetConfig+0x8e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <TIM_OC1_SetConfig+0xdc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	621a      	str	r2, [r3, #32]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40010000 	.word	0x40010000
 8004970:	40010400 	.word	0x40010400

08004974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0210 	bic.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0320 	bic.w	r3, r3, #32
 80049be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <TIM_OC2_SetConfig+0xe4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_OC2_SetConfig+0x68>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a21      	ldr	r2, [pc, #132]	; (8004a5c <TIM_OC2_SetConfig+0xe8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d10d      	bne.n	80049f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <TIM_OC2_SetConfig+0xe4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC2_SetConfig+0x94>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <TIM_OC2_SetConfig+0xe8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d113      	bne.n	8004a30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010400 	.word	0x40010400

08004a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <TIM_OC3_SetConfig+0xe0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <TIM_OC3_SetConfig+0x66>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <TIM_OC3_SetConfig+0xe4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10d      	bne.n	8004ae2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <TIM_OC3_SetConfig+0xe0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC3_SetConfig+0x92>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <TIM_OC3_SetConfig+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d113      	bne.n	8004b1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400

08004b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	031b      	lsls	r3, r3, #12
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <TIM_OC4_SetConfig+0xa4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC4_SetConfig+0x68>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <TIM_OC4_SetConfig+0xa8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	019b      	lsls	r3, r3, #6
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40010400 	.word	0x40010400

08004bf4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f023 0307 	bic.w	r3, r3, #7
 8004c22:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b70      	cmp	r3, #112	; 0x70
 8004c3c:	d01a      	beq.n	8004c74 <TIM_SlaveTimer_SetConfig+0x80>
 8004c3e:	2b70      	cmp	r3, #112	; 0x70
 8004c40:	d860      	bhi.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
 8004c42:	2b60      	cmp	r3, #96	; 0x60
 8004c44:	d054      	beq.n	8004cf0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004c46:	2b60      	cmp	r3, #96	; 0x60
 8004c48:	d85c      	bhi.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
 8004c4a:	2b50      	cmp	r3, #80	; 0x50
 8004c4c:	d046      	beq.n	8004cdc <TIM_SlaveTimer_SetConfig+0xe8>
 8004c4e:	2b50      	cmp	r3, #80	; 0x50
 8004c50:	d858      	bhi.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d019      	beq.n	8004c8a <TIM_SlaveTimer_SetConfig+0x96>
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d854      	bhi.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
 8004c5a:	2b30      	cmp	r3, #48	; 0x30
 8004c5c:	d055      	beq.n	8004d0a <TIM_SlaveTimer_SetConfig+0x116>
 8004c5e:	2b30      	cmp	r3, #48	; 0x30
 8004c60:	d850      	bhi.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d051      	beq.n	8004d0a <TIM_SlaveTimer_SetConfig+0x116>
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d84c      	bhi.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d04d      	beq.n	8004d0a <TIM_SlaveTimer_SetConfig+0x116>
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d04b      	beq.n	8004d0a <TIM_SlaveTimer_SetConfig+0x116>
 8004c72:	e047      	b.n	8004d04 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68d9      	ldr	r1, [r3, #12]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f000 f9ec 	bl	8005060 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004c88:	e040      	b.n	8004d0c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d101      	bne.n	8004c96 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e03b      	b.n	8004d0e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cbc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
      break;
 8004cda:	e017      	b.n	8004d0c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f000 f889 	bl	8004e00 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004cee:	e00d      	b.n	8004d0c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f000 f8eb 	bl	8004ed8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d02:	e003      	b.n	8004d0c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	e000      	b.n	8004d0c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004d0a:	bf00      	nop
  }

  return status;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <TIM_TI1_SetConfig+0xcc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01b      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d017      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <TIM_TI1_SetConfig+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a24      	ldr	r2, [pc, #144]	; (8004dec <TIM_TI1_SetConfig+0xd4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00f      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a23      	ldr	r2, [pc, #140]	; (8004df0 <TIM_TI1_SetConfig+0xd8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <TIM_TI1_SetConfig+0xdc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <TIM_TI1_SetConfig+0xe0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_TI1_SetConfig+0x66>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <TIM_TI1_SetConfig+0xe4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <TIM_TI1_SetConfig+0x6a>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <TIM_TI1_SetConfig+0x6c>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e003      	b.n	8004da2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f023 030a 	bic.w	r3, r3, #10
 8004dbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 030a 	and.w	r3, r3, #10
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40001800 	.word	0x40001800

08004e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0201 	bic.w	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 030a 	bic.w	r3, r3, #10
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b087      	sub	sp, #28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	031b      	lsls	r3, r3, #12
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f023 0210 	bic.w	r2, r3, #16
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	031b      	lsls	r3, r3, #12
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 0303 	bic.w	r3, r3, #3
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	031b      	lsls	r3, r3, #12
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005002:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	031b      	lsls	r3, r3, #12
 8005008:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	f043 0307 	orr.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	431a      	orrs	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e05a      	b.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d01d      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40010400 	.word	0x40010400
 8005190:	40014000 	.word	0x40014000
 8005194:	40001800 	.word	0x40001800

08005198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e03d      	b.n	8005230 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <__NVIC_SetPriority>:
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	db0a      	blt.n	800528e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	490c      	ldr	r1, [pc, #48]	; (80052b0 <__NVIC_SetPriority+0x4c>)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	440b      	add	r3, r1
 8005288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800528c:	e00a      	b.n	80052a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4908      	ldr	r1, [pc, #32]	; (80052b4 <__NVIC_SetPriority+0x50>)
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	3b04      	subs	r3, #4
 800529c:	0112      	lsls	r2, r2, #4
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	440b      	add	r3, r1
 80052a2:	761a      	strb	r2, [r3, #24]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	e000e100 	.word	0xe000e100
 80052b4:	e000ed00 	.word	0xe000ed00

080052b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <SysTick_Handler+0x1c>)
 80052be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052c0:	f001 fdaa 	bl	8006e18 <xTaskGetSchedulerState>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d001      	beq.n	80052ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052ca:	f002 fb95 	bl	80079f8 <xPortSysTickHandler>
  }
}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	e000e010 	.word	0xe000e010

080052d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052dc:	2100      	movs	r1, #0
 80052de:	f06f 0004 	mvn.w	r0, #4
 80052e2:	f7ff ffbf 	bl	8005264 <__NVIC_SetPriority>
#endif
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f2:	f3ef 8305 	mrs	r3, IPSR
 80052f6:	603b      	str	r3, [r7, #0]
  return(result);
 80052f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052fe:	f06f 0305 	mvn.w	r3, #5
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e00c      	b.n	8005320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <osKernelInitialize+0x44>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d105      	bne.n	800531a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <osKernelInitialize+0x44>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005314:	2300      	movs	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e002      	b.n	8005320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005320:	687b      	ldr	r3, [r7, #4]
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000094 	.word	0x20000094

08005334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800533a:	f3ef 8305 	mrs	r3, IPSR
 800533e:	603b      	str	r3, [r7, #0]
  return(result);
 8005340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005346:	f06f 0305 	mvn.w	r3, #5
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	e010      	b.n	8005370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <osKernelStart+0x48>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d109      	bne.n	800536a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005356:	f7ff ffbf 	bl	80052d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <osKernelStart+0x48>)
 800535c:	2202      	movs	r2, #2
 800535e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005360:	f001 f8ec 	bl	800653c <vTaskStartScheduler>
      stat = osOK;
 8005364:	2300      	movs	r3, #0
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e002      	b.n	8005370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005370:	687b      	ldr	r3, [r7, #4]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000094 	.word	0x20000094

08005380 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005386:	f3ef 8305 	mrs	r3, IPSR
 800538a:	603b      	str	r3, [r7, #0]
  return(result);
 800538c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005392:	f001 f9ff 	bl	8006794 <xTaskGetTickCountFromISR>
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	e002      	b.n	80053a0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800539a:	f001 f9eb 	bl	8006774 <xTaskGetTickCount>
 800539e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80053a0:	687b      	ldr	r3, [r7, #4]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b08e      	sub	sp, #56	; 0x38
 80053ae:	af04      	add	r7, sp, #16
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ba:	f3ef 8305 	mrs	r3, IPSR
 80053be:	617b      	str	r3, [r7, #20]
  return(result);
 80053c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d17e      	bne.n	80054c4 <osThreadNew+0x11a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d07b      	beq.n	80054c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053d0:	2318      	movs	r3, #24
 80053d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d045      	beq.n	8005470 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <osThreadNew+0x48>
        name = attr->name;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <osThreadNew+0x6e>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2b38      	cmp	r3, #56	; 0x38
 800540a:	d805      	bhi.n	8005418 <osThreadNew+0x6e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <osThreadNew+0x72>
        return (NULL);
 8005418:	2300      	movs	r3, #0
 800541a:	e054      	b.n	80054c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	089b      	lsrs	r3, r3, #2
 800542a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <osThreadNew+0xa8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2bbb      	cmp	r3, #187	; 0xbb
 800543a:	d90a      	bls.n	8005452 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <osThreadNew+0xa8>
        mem = 1;
 800544c:	2301      	movs	r3, #1
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	e010      	b.n	8005474 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10c      	bne.n	8005474 <osThreadNew+0xca>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <osThreadNew+0xca>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <osThreadNew+0xca>
          mem = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e001      	b.n	8005474 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d110      	bne.n	800549c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005482:	9202      	str	r2, [sp, #8]
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fe1d 	bl	80060d0 <xTaskCreateStatic>
 8005496:	4603      	mov	r3, r0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	e013      	b.n	80054c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d110      	bne.n	80054c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f107 0310 	add.w	r3, r7, #16
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fe68 	bl	800618a <xTaskCreate>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <osThreadNew+0x11a>
            hTask = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054c4:	693b      	ldr	r3, [r7, #16]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3728      	adds	r7, #40	; 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d6:	f3ef 8305 	mrs	r3, IPSR
 80054da:	60fb      	str	r3, [r7, #12]
  return(result);
 80054dc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <osDelayUntil+0x1c>
    stat = osErrorISR;
 80054e2:	f06f 0305 	mvn.w	r3, #5
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e019      	b.n	800551e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80054ee:	f001 f941 	bl	8006774 <xTaskGetTickCount>
 80054f2:	4603      	mov	r3, r0
 80054f4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <osDelayUntil+0x4a>
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	db06      	blt.n	8005518 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	6939      	ldr	r1, [r7, #16]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 ff95 	bl	8006440 <vTaskDelayUntil>
 8005516:	e002      	b.n	800551e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005518:	f06f 0303 	mvn.w	r3, #3
 800551c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800551e:	697b      	ldr	r3, [r7, #20]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <vApplicationGetIdleTaskMemory+0x2c>)
 8005538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a06      	ldr	r2, [pc, #24]	; (8005558 <vApplicationGetIdleTaskMemory+0x30>)
 800553e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000098 	.word	0x20000098
 8005558:	20000154 	.word	0x20000154

0800555c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a07      	ldr	r2, [pc, #28]	; (8005588 <vApplicationGetTimerTaskMemory+0x2c>)
 800556c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a06      	ldr	r2, [pc, #24]	; (800558c <vApplicationGetTimerTaskMemory+0x30>)
 8005572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800557a:	601a      	str	r2, [r3, #0]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000354 	.word	0x20000354
 800558c:	20000410 	.word	0x20000410

08005590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 0208 	add.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f103 0208 	add.w	r2, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f103 0208 	add.w	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e00c      	b.n	800566c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3308      	adds	r3, #8
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e002      	b.n	8005660 <vListInsert+0x2e>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d2f6      	bcs.n	800565a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6892      	ldr	r2, [r2, #8]
 80056ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6852      	ldr	r2, [r2, #4]
 80056c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d103      	bne.n	80056d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005722:	f002 f8d7 	bl	80078d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	3b01      	subs	r3, #1
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	441a      	add	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d114      	bne.n	80057a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3310      	adds	r3, #16
 8005784:	4618      	mov	r0, r3
 8005786:	f001 f985 	bl	8006a94 <xTaskRemoveFromEventList>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d012      	beq.n	80057b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <xQueueGenericReset+0xcc>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	e009      	b.n	80057b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3310      	adds	r3, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fef2 	bl	8005590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff feed 	bl	8005590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057b6:	f002 f8bd 	bl	8007934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057ba:	2301      	movs	r3, #1
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08e      	sub	sp, #56	; 0x38
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <xQueueGenericCreateStatic+0x52>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <xQueueGenericCreateStatic+0x56>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericCreateStatic+0x58>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	623b      	str	r3, [r7, #32]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <xQueueGenericCreateStatic+0x7e>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <xQueueGenericCreateStatic+0x82>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <xQueueGenericCreateStatic+0x84>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61fb      	str	r3, [r7, #28]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005866:	2350      	movs	r3, #80	; 0x50
 8005868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b50      	cmp	r3, #80	; 0x50
 800586e:	d00a      	beq.n	8005886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	61bb      	str	r3, [r7, #24]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800589a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	4613      	mov	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f805 	bl	80058b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3730      	adds	r7, #48	; 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e002      	b.n	80058da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058e6:	2101      	movs	r1, #1
 80058e8:	69b8      	ldr	r0, [r7, #24]
 80058ea:	f7ff ff05 	bl	80056f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	78fa      	ldrb	r2, [r7, #3]
 80058f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08e      	sub	sp, #56	; 0x38
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <xQueueGenericSend+0x32>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <xQueueGenericSend+0x40>
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <xQueueGenericSend+0x44>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <xQueueGenericSend+0x46>
 8005944:	2300      	movs	r3, #0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <xQueueGenericSend+0x60>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d103      	bne.n	800596e <xQueueGenericSend+0x6e>
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <xQueueGenericSend+0x72>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <xQueueGenericSend+0x74>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <xQueueGenericSend+0x8e>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	623b      	str	r3, [r7, #32]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800598e:	f001 fa43 	bl	8006e18 <xTaskGetSchedulerState>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <xQueueGenericSend+0x9e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <xQueueGenericSend+0xa2>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <xQueueGenericSend+0xa4>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xQueueGenericSend+0xbe>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	61fb      	str	r3, [r7, #28]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059be:	f001 ff89 	bl	80078d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <xQueueGenericSend+0xd4>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d129      	bne.n	8005a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059da:	f000 fa0b 	bl	8005df4 <prvCopyDataToQueue>
 80059de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	3324      	adds	r3, #36	; 0x24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 f851 	bl	8006a94 <xTaskRemoveFromEventList>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d013      	beq.n	8005a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059f8:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <xQueueGenericSend+0x1f8>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	e00a      	b.n	8005a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a10:	4b39      	ldr	r3, [pc, #228]	; (8005af8 <xQueueGenericSend+0x1f8>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a20:	f001 ff88 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e063      	b.n	8005af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a2e:	f001 ff81 	bl	8007934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e05c      	b.n	8005af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f88b 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a46:	2301      	movs	r3, #1
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a4a:	f001 ff73 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a4e:	f000 fde5 	bl	800661c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a52:	f001 ff3f 	bl	80078d4 <vPortEnterCritical>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <xQueueGenericSend+0x16c>
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a72:	b25b      	sxtb	r3, r3
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0x182>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a82:	f001 ff57 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a86:	1d3a      	adds	r2, r7, #4
 8005a88:	f107 0314 	add.w	r3, r7, #20
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f87a 	bl	8006b88 <xTaskCheckForTimeOut>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d124      	bne.n	8005ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9c:	f000 faa2 	bl	8005fe4 <prvIsQueueFull>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d018      	beq.n	8005ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 ffa0 	bl	80069f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab6:	f000 fa2d 	bl	8005f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aba:	f000 fdbd 	bl	8006638 <xTaskResumeAll>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f af7c 	bne.w	80059be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <xQueueGenericSend+0x1f8>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e772      	b.n	80059be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ada:	f000 fa1b 	bl	8005f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ade:	f000 fdab 	bl	8006638 <xTaskResumeAll>
 8005ae2:	e76c      	b.n	80059be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ae6:	f000 fa15 	bl	8005f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aea:	f000 fda5 	bl	8006638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3738      	adds	r7, #56	; 0x38
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b090      	sub	sp, #64	; 0x40
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <xQueueGenericSendFromISR+0x3c>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <xQueueGenericSendFromISR+0x40>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <xQueueGenericSendFromISR+0x42>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d103      	bne.n	8005b66 <xQueueGenericSendFromISR+0x6a>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <xQueueGenericSendFromISR+0x6e>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <xQueueGenericSendFromISR+0x70>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	623b      	str	r3, [r7, #32]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b86:	f001 ff87 	bl	8007a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	61fa      	str	r2, [r7, #28]
 8005ba0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <xQueueGenericSendFromISR+0xbc>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d12f      	bne.n	8005c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bce:	f000 f911 	bl	8005df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d112      	bne.n	8005c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d016      	beq.n	8005c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	3324      	adds	r3, #36	; 0x24
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 ff53 	bl	8006a94 <xTaskRemoveFromEventList>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00e      	beq.n	8005c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e007      	b.n	8005c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c06:	3301      	adds	r3, #1
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	b25a      	sxtb	r2, r3
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c12:	2301      	movs	r3, #1
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c16:	e001      	b.n	8005c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3740      	adds	r7, #64	; 0x40
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	; 0x30
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <xQueueReceive+0x30>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	623b      	str	r3, [r7, #32]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <xQueueReceive+0x3e>
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <xQueueReceive+0x42>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <xQueueReceive+0x44>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xQueueReceive+0x5e>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	61fb      	str	r3, [r7, #28]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c92:	f001 f8c1 	bl	8006e18 <xTaskGetSchedulerState>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <xQueueReceive+0x6e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xQueueReceive+0x72>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xQueueReceive+0x74>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueReceive+0x8e>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61bb      	str	r3, [r7, #24]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cc2:	f001 fe07 	bl	80078d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01f      	beq.n	8005d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd6:	f000 f8f7 	bl	8005ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	1e5a      	subs	r2, r3, #1
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00f      	beq.n	8005d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	3310      	adds	r3, #16
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fed0 	bl	8006a94 <xTaskRemoveFromEventList>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cfa:	4b3d      	ldr	r3, [pc, #244]	; (8005df0 <xQueueReceive+0x1bc>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d0a:	f001 fe13 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e069      	b.n	8005de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d18:	f001 fe0c 	bl	8007934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e062      	b.n	8005de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 ff16 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d34:	f001 fdfe 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d38:	f000 fc70 	bl	800661c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d3c:	f001 fdca 	bl	80078d4 <vPortEnterCritical>
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d103      	bne.n	8005d56 <xQueueReceive+0x122>
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueReceive+0x138>
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d6c:	f001 fde2 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d70:	1d3a      	adds	r2, r7, #4
 8005d72:	f107 0310 	add.w	r3, r7, #16
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 ff05 	bl	8006b88 <xTaskCheckForTimeOut>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d123      	bne.n	8005dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d86:	f000 f917 	bl	8005fb8 <prvIsQueueEmpty>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fe2b 	bl	80069f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da0:	f000 f8b8 	bl	8005f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005da4:	f000 fc48 	bl	8006638 <xTaskResumeAll>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d189      	bne.n	8005cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xQueueReceive+0x1bc>)
 8005db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	e780      	b.n	8005cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc2:	f000 f8a7 	bl	8005f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dc6:	f000 fc37 	bl	8006638 <xTaskResumeAll>
 8005dca:	e77a      	b.n	8005cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dce:	f000 f8a1 	bl	8005f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dd2:	f000 fc31 	bl	8006638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd8:	f000 f8ee 	bl	8005fb8 <prvIsQueueEmpty>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f43f af6f 	beq.w	8005cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3730      	adds	r7, #48	; 0x30
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d14d      	bne.n	8005eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 f818 	bl	8006e54 <xTaskPriorityDisinherit>
 8005e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	e043      	b.n	8005eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d119      	bne.n	8005e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6858      	ldr	r0, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	f002 f87a 	bl	8007f38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d32b      	bcc.n	8005eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	e026      	b.n	8005eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68d8      	ldr	r0, [r3, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	461a      	mov	r2, r3
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	f002 f860 	bl	8007f38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	425b      	negs	r3, r3
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d207      	bcs.n	8005ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	441a      	add	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d105      	bne.n	8005eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ebe:	697b      	ldr	r3, [r7, #20]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d018      	beq.n	8005f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	441a      	add	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d303      	bcc.n	8005efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68d9      	ldr	r1, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	461a      	mov	r2, r3
 8005f06:	6838      	ldr	r0, [r7, #0]
 8005f08:	f002 f816 	bl	8007f38 <memcpy>
	}
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f1c:	f001 fcda 	bl	80078d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f28:	e011      	b.n	8005f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d012      	beq.n	8005f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3324      	adds	r3, #36	; 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fdac 	bl	8006a94 <xTaskRemoveFromEventList>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f42:	f000 fe83 	bl	8006c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dce9      	bgt.n	8005f2a <prvUnlockQueue+0x16>
 8005f56:	e000      	b.n	8005f5a <prvUnlockQueue+0x46>
					break;
 8005f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	22ff      	movs	r2, #255	; 0xff
 8005f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f62:	f001 fce7 	bl	8007934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f66:	f001 fcb5 	bl	80078d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f72:	e011      	b.n	8005f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d012      	beq.n	8005fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3310      	adds	r3, #16
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fd87 	bl	8006a94 <xTaskRemoveFromEventList>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f8c:	f000 fe5e 	bl	8006c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dce9      	bgt.n	8005f74 <prvUnlockQueue+0x60>
 8005fa0:	e000      	b.n	8005fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fac:	f001 fcc2 	bl	8007934 <vPortExitCritical>
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fc0:	f001 fc88 	bl	80078d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e001      	b.n	8005fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fd6:	f001 fcad 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fec:	f001 fc72 	bl	80078d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d102      	bne.n	8006002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e001      	b.n	8006006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006006:	f001 fc95 	bl	8007934 <vPortExitCritical>

	return xReturn;
 800600a:	68fb      	ldr	r3, [r7, #12]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e014      	b.n	800604e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006024:	4a0f      	ldr	r2, [pc, #60]	; (8006064 <vQueueAddToRegistry+0x50>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10b      	bne.n	8006048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006030:	490c      	ldr	r1, [pc, #48]	; (8006064 <vQueueAddToRegistry+0x50>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <vQueueAddToRegistry+0x50>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	4413      	add	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006046:	e006      	b.n	8006056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b07      	cmp	r3, #7
 8006052:	d9e7      	bls.n	8006024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20004d0c 	.word	0x20004d0c

08006068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006078:	f001 fc2c 	bl	80078d4 <vPortEnterCritical>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006082:	b25b      	sxtb	r3, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d103      	bne.n	8006092 <vQueueWaitForMessageRestricted+0x2a>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <vQueueWaitForMessageRestricted+0x40>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a8:	f001 fc44 	bl	8007934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	3324      	adds	r3, #36	; 0x24
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fcbd 	bl	8006a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	f7ff ff26 	bl	8005f14 <prvUnlockQueue>
	}
 80060c8:	bf00      	nop
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	; 0x38
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	623b      	str	r3, [r7, #32]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xTaskCreateStatic+0x46>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61fb      	str	r3, [r7, #28]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006116:	23bc      	movs	r3, #188	; 0xbc
 8006118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2bbc      	cmp	r3, #188	; 0xbc
 800611e:	d00a      	beq.n	8006136 <xTaskCreateStatic+0x66>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	61bb      	str	r3, [r7, #24]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01e      	beq.n	800617c <xTaskCreateStatic+0xac>
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01b      	beq.n	800617c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	2202      	movs	r2, #2
 8006152:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006156:	2300      	movs	r3, #0
 8006158:	9303      	str	r3, [sp, #12]
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	9302      	str	r3, [sp, #8]
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f850 	bl	8006214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006176:	f000 f8f3 	bl	8006360 <prvAddNewTaskToReadyList>
 800617a:	e001      	b.n	8006180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006180:	697b      	ldr	r3, [r7, #20]
	}
 8006182:	4618      	mov	r0, r3
 8006184:	3728      	adds	r7, #40	; 0x28
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800618a:	b580      	push	{r7, lr}
 800618c:	b08c      	sub	sp, #48	; 0x30
 800618e:	af04      	add	r7, sp, #16
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fcba 	bl	8007b18 <pvPortMalloc>
 80061a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061ac:	20bc      	movs	r0, #188	; 0xbc
 80061ae:	f001 fcb3 	bl	8007b18 <pvPortMalloc>
 80061b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
 80061c0:	e005      	b.n	80061ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061c2:	6978      	ldr	r0, [r7, #20]
 80061c4:	f001 fd74 	bl	8007cb0 <vPortFree>
 80061c8:	e001      	b.n	80061ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d017      	beq.n	8006204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	2300      	movs	r3, #0
 80061e0:	9303      	str	r3, [sp, #12]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f80e 	bl	8006214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f8:	69f8      	ldr	r0, [r7, #28]
 80061fa:	f000 f8b1 	bl	8006360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061fe:	2301      	movs	r3, #1
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e002      	b.n	800620a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800620a:	69bb      	ldr	r3, [r7, #24]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	461a      	mov	r2, r3
 800622c:	21a5      	movs	r1, #165	; 0xa5
 800622e:	f001 fe91 	bl	8007f54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800623c:	3b01      	subs	r3, #1
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	617b      	str	r3, [r7, #20]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01f      	beq.n	80062b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e012      	b.n	800629e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	3334      	adds	r3, #52	; 0x34
 8006288:	460a      	mov	r2, r1
 800628a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3301      	adds	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	d9e9      	bls.n	8006278 <prvInitialiseNewTask+0x64>
 80062a4:	e000      	b.n	80062a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80062a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b0:	e003      	b.n	80062ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	2b37      	cmp	r3, #55	; 0x37
 80062be:	d901      	bls.n	80062c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062c0:	2337      	movs	r3, #55	; 0x37
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	2200      	movs	r2, #0
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	3304      	adds	r3, #4
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff f978 	bl	80055d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	3318      	adds	r3, #24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff f973 	bl	80055d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2200      	movs	r2, #0
 800630c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	3354      	adds	r3, #84	; 0x54
 8006314:	2260      	movs	r2, #96	; 0x60
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fe1b 	bl	8007f54 <memset>
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <prvInitialiseNewTask+0x140>)
 8006322:	659a      	str	r2, [r3, #88]	; 0x58
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	4a0c      	ldr	r2, [pc, #48]	; (8006358 <prvInitialiseNewTask+0x144>)
 8006328:	65da      	str	r2, [r3, #92]	; 0x5c
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	4a0b      	ldr	r2, [pc, #44]	; (800635c <prvInitialiseNewTask+0x148>)
 800632e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	69b8      	ldr	r0, [r7, #24]
 8006336:	f001 f99d 	bl	8007674 <pxPortInitialiseStack>
 800633a:	4602      	mov	r2, r0
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	08008374 	.word	0x08008374
 8006358:	08008394 	.word	0x08008394
 800635c:	08008354 	.word	0x08008354

08006360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006368:	f001 fab4 	bl	80078d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800636c:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <prvAddNewTaskToReadyList+0xc4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a2c      	ldr	r2, [pc, #176]	; (8006424 <prvAddNewTaskToReadyList+0xc4>)
 8006374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006376:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800637e:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006384:	4b27      	ldr	r3, [pc, #156]	; (8006424 <prvAddNewTaskToReadyList+0xc4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d110      	bne.n	80063ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800638c:	f000 fc82 	bl	8006c94 <prvInitialiseTaskLists>
 8006390:	e00d      	b.n	80063ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006392:	4b26      	ldr	r3, [pc, #152]	; (800642c <prvAddNewTaskToReadyList+0xcc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d802      	bhi.n	80063ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <prvAddNewTaskToReadyList+0xd0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <prvAddNewTaskToReadyList+0xd0>)
 80063b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <prvAddNewTaskToReadyList+0xd0>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <prvAddNewTaskToReadyList+0xd4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d903      	bls.n	80063d4 <prvAddNewTaskToReadyList+0x74>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	4a18      	ldr	r2, [pc, #96]	; (8006434 <prvAddNewTaskToReadyList+0xd4>)
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <prvAddNewTaskToReadyList+0xd8>)
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7ff f8fd 	bl	80055ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063f0:	f001 faa0 	bl	8007934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <prvAddNewTaskToReadyList+0xcc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	429a      	cmp	r2, r3
 8006408:	d207      	bcs.n	800641a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800640a:	4b0c      	ldr	r3, [pc, #48]	; (800643c <prvAddNewTaskToReadyList+0xdc>)
 800640c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000ce4 	.word	0x20000ce4
 8006428:	20000810 	.word	0x20000810
 800642c:	20000cf0 	.word	0x20000cf0
 8006430:	20000d00 	.word	0x20000d00
 8006434:	20000cec 	.word	0x20000cec
 8006438:	20000814 	.word	0x20000814
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <vTaskDelayUntil+0x2a>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	617b      	str	r3, [r7, #20]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <vTaskDelayUntil+0x46>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	613b      	str	r3, [r7, #16]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006486:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <vTaskDelayUntil+0xf0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <vTaskDelayUntil+0x64>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60fb      	str	r3, [r7, #12]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80064a4:	f000 f8ba 	bl	800661c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80064a8:	4b22      	ldr	r3, [pc, #136]	; (8006534 <vTaskDelayUntil+0xf4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d20b      	bcs.n	80064da <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d211      	bcs.n	80064f0 <vTaskDelayUntil+0xb0>
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d90d      	bls.n	80064f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	e00a      	b.n	80064f0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d303      	bcc.n	80064ec <vTaskDelayUntil+0xac>
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d901      	bls.n	80064f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2100      	movs	r1, #0
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fd13 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800650a:	f000 f895 	bl	8006638 <xTaskResumeAll>
 800650e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006516:	4b08      	ldr	r3, [pc, #32]	; (8006538 <vTaskDelayUntil+0xf8>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006526:	bf00      	nop
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000d0c 	.word	0x20000d0c
 8006534:	20000ce8 	.word	0x20000ce8
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	; 0x28
 8006540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006546:	2300      	movs	r3, #0
 8006548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800654a:	463a      	mov	r2, r7
 800654c:	1d39      	adds	r1, r7, #4
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe ffe8 	bl	8005528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	9202      	str	r2, [sp, #8]
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	2300      	movs	r3, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	2300      	movs	r3, #0
 8006568:	460a      	mov	r2, r1
 800656a:	4924      	ldr	r1, [pc, #144]	; (80065fc <vTaskStartScheduler+0xc0>)
 800656c:	4824      	ldr	r0, [pc, #144]	; (8006600 <vTaskStartScheduler+0xc4>)
 800656e:	f7ff fdaf 	bl	80060d0 <xTaskCreateStatic>
 8006572:	4603      	mov	r3, r0
 8006574:	4a23      	ldr	r2, [pc, #140]	; (8006604 <vTaskStartScheduler+0xc8>)
 8006576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006578:	4b22      	ldr	r3, [pc, #136]	; (8006604 <vTaskStartScheduler+0xc8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e001      	b.n	800658a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d102      	bne.n	8006596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006590:	f000 fd22 	bl	8006fd8 <xTimerCreateTimerTask>
 8006594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d11b      	bne.n	80065d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	613b      	str	r3, [r7, #16]
}
 80065ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065b0:	4b15      	ldr	r3, [pc, #84]	; (8006608 <vTaskStartScheduler+0xcc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3354      	adds	r3, #84	; 0x54
 80065b6:	4a15      	ldr	r2, [pc, #84]	; (800660c <vTaskStartScheduler+0xd0>)
 80065b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <vTaskStartScheduler+0xd4>)
 80065bc:	f04f 32ff 	mov.w	r2, #4294967295
 80065c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065c2:	4b14      	ldr	r3, [pc, #80]	; (8006614 <vTaskStartScheduler+0xd8>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <vTaskStartScheduler+0xdc>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065ce:	f001 f8df 	bl	8007790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065d2:	e00e      	b.n	80065f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d10a      	bne.n	80065f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60fb      	str	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <vTaskStartScheduler+0xb4>
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	08008190 	.word	0x08008190
 8006600:	08006c65 	.word	0x08006c65
 8006604:	20000d08 	.word	0x20000d08
 8006608:	20000810 	.word	0x20000810
 800660c:	20000010 	.word	0x20000010
 8006610:	20000d04 	.word	0x20000d04
 8006614:	20000cf0 	.word	0x20000cf0
 8006618:	20000ce8 	.word	0x20000ce8

0800661c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <vTaskSuspendAll+0x18>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	4a03      	ldr	r2, [pc, #12]	; (8006634 <vTaskSuspendAll+0x18>)
 8006628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800662a:	bf00      	nop
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000d0c 	.word	0x20000d0c

08006638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006646:	4b42      	ldr	r3, [pc, #264]	; (8006750 <xTaskResumeAll+0x118>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xTaskResumeAll+0x2c>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	603b      	str	r3, [r7, #0]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006664:	f001 f936 	bl	80078d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006668:	4b39      	ldr	r3, [pc, #228]	; (8006750 <xTaskResumeAll+0x118>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a38      	ldr	r2, [pc, #224]	; (8006750 <xTaskResumeAll+0x118>)
 8006670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006672:	4b37      	ldr	r3, [pc, #220]	; (8006750 <xTaskResumeAll+0x118>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d162      	bne.n	8006740 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800667a:	4b36      	ldr	r3, [pc, #216]	; (8006754 <xTaskResumeAll+0x11c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d05e      	beq.n	8006740 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006682:	e02f      	b.n	80066e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006684:	4b34      	ldr	r3, [pc, #208]	; (8006758 <xTaskResumeAll+0x120>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3318      	adds	r3, #24
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff f807 	bl	80056a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff f802 	bl	80056a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4b2d      	ldr	r3, [pc, #180]	; (800675c <xTaskResumeAll+0x124>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d903      	bls.n	80066b4 <xTaskResumeAll+0x7c>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	4a2a      	ldr	r2, [pc, #168]	; (800675c <xTaskResumeAll+0x124>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4a27      	ldr	r2, [pc, #156]	; (8006760 <xTaskResumeAll+0x128>)
 80066c2:	441a      	add	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fe ff8d 	bl	80055ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4b23      	ldr	r3, [pc, #140]	; (8006764 <xTaskResumeAll+0x12c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066de:	4b22      	ldr	r3, [pc, #136]	; (8006768 <xTaskResumeAll+0x130>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e4:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <xTaskResumeAll+0x120>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1cb      	bne.n	8006684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066f2:	f000 fb71 	bl	8006dd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066f6:	4b1d      	ldr	r3, [pc, #116]	; (800676c <xTaskResumeAll+0x134>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d010      	beq.n	8006724 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006702:	f000 f859 	bl	80067b8 <xTaskIncrementTick>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <xTaskResumeAll+0x130>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3b01      	subs	r3, #1
 8006716:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f1      	bne.n	8006702 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <xTaskResumeAll+0x134>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006724:	4b10      	ldr	r3, [pc, #64]	; (8006768 <xTaskResumeAll+0x130>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <xTaskResumeAll+0x138>)
 8006732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006740:	f001 f8f8 	bl	8007934 <vPortExitCritical>

	return xAlreadyYielded;
 8006744:	68bb      	ldr	r3, [r7, #8]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000d0c 	.word	0x20000d0c
 8006754:	20000ce4 	.word	0x20000ce4
 8006758:	20000ca4 	.word	0x20000ca4
 800675c:	20000cec 	.word	0x20000cec
 8006760:	20000814 	.word	0x20000814
 8006764:	20000810 	.word	0x20000810
 8006768:	20000cf8 	.word	0x20000cf8
 800676c:	20000cf4 	.word	0x20000cf4
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <xTaskGetTickCount+0x1c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006780:	687b      	ldr	r3, [r7, #4]
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000ce8 	.word	0x20000ce8

08006794 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679a:	f001 f97d 	bl	8007a98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80067a2:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <xTaskGetTickCountFromISR+0x20>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067a8:	683b      	ldr	r3, [r7, #0]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000ce8 	.word	0x20000ce8

080067b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c2:	4b4f      	ldr	r3, [pc, #316]	; (8006900 <xTaskIncrementTick+0x148>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 808f 	bne.w	80068ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067cc:	4b4d      	ldr	r3, [pc, #308]	; (8006904 <xTaskIncrementTick+0x14c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067d4:	4a4b      	ldr	r2, [pc, #300]	; (8006904 <xTaskIncrementTick+0x14c>)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d120      	bne.n	8006822 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067e0:	4b49      	ldr	r3, [pc, #292]	; (8006908 <xTaskIncrementTick+0x150>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <xTaskIncrementTick+0x48>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	603b      	str	r3, [r7, #0]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xTaskIncrementTick+0x46>
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <xTaskIncrementTick+0x150>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4b41      	ldr	r3, [pc, #260]	; (800690c <xTaskIncrementTick+0x154>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <xTaskIncrementTick+0x150>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	4a3f      	ldr	r2, [pc, #252]	; (800690c <xTaskIncrementTick+0x154>)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	4b3e      	ldr	r3, [pc, #248]	; (8006910 <xTaskIncrementTick+0x158>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	4a3d      	ldr	r2, [pc, #244]	; (8006910 <xTaskIncrementTick+0x158>)
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	f000 fadb 	bl	8006dd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006822:	4b3c      	ldr	r3, [pc, #240]	; (8006914 <xTaskIncrementTick+0x15c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d349      	bcc.n	80068c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <xTaskIncrementTick+0x150>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <xTaskIncrementTick+0x15c>)
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	601a      	str	r2, [r3, #0]
					break;
 800683e:	e03f      	b.n	80068c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006840:	4b31      	ldr	r3, [pc, #196]	; (8006908 <xTaskIncrementTick+0x150>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d203      	bcs.n	8006860 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006858:	4a2e      	ldr	r2, [pc, #184]	; (8006914 <xTaskIncrementTick+0x15c>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800685e:	e02f      	b.n	80068c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe ff1d 	bl	80056a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	3318      	adds	r3, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe ff14 	bl	80056a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <xTaskIncrementTick+0x160>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d903      	bls.n	8006890 <xTaskIncrementTick+0xd8>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a22      	ldr	r2, [pc, #136]	; (8006918 <xTaskIncrementTick+0x160>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <xTaskIncrementTick+0x164>)
 800689e:	441a      	add	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe fe9f 	bl	80055ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <xTaskIncrementTick+0x168>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3b8      	bcc.n	800682c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068be:	e7b5      	b.n	800682c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c0:	4b17      	ldr	r3, [pc, #92]	; (8006920 <xTaskIncrementTick+0x168>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	4915      	ldr	r1, [pc, #84]	; (800691c <xTaskIncrementTick+0x164>)
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d901      	bls.n	80068dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068dc:	4b11      	ldr	r3, [pc, #68]	; (8006924 <xTaskIncrementTick+0x16c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e004      	b.n	80068f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068ea:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <xTaskIncrementTick+0x170>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <xTaskIncrementTick+0x170>)
 80068f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068f4:	697b      	ldr	r3, [r7, #20]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000d0c 	.word	0x20000d0c
 8006904:	20000ce8 	.word	0x20000ce8
 8006908:	20000c9c 	.word	0x20000c9c
 800690c:	20000ca0 	.word	0x20000ca0
 8006910:	20000cfc 	.word	0x20000cfc
 8006914:	20000d04 	.word	0x20000d04
 8006918:	20000cec 	.word	0x20000cec
 800691c:	20000814 	.word	0x20000814
 8006920:	20000810 	.word	0x20000810
 8006924:	20000cf8 	.word	0x20000cf8
 8006928:	20000cf4 	.word	0x20000cf4

0800692c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <vTaskSwitchContext+0xb0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800693a:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <vTaskSwitchContext+0xb4>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006940:	e046      	b.n	80069d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006942:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <vTaskSwitchContext+0xb4>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006948:	4b26      	ldr	r3, [pc, #152]	; (80069e4 <vTaskSwitchContext+0xb8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e010      	b.n	8006972 <vTaskSwitchContext+0x46>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <vTaskSwitchContext+0x40>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	607b      	str	r3, [r7, #4]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <vTaskSwitchContext+0x3e>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	491d      	ldr	r1, [pc, #116]	; (80069e8 <vTaskSwitchContext+0xbc>)
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0e4      	beq.n	8006950 <vTaskSwitchContext+0x24>
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <vTaskSwitchContext+0xbc>)
 8006992:	4413      	add	r3, r2
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3308      	adds	r3, #8
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d104      	bne.n	80069b6 <vTaskSwitchContext+0x8a>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <vTaskSwitchContext+0xc0>)
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <vTaskSwitchContext+0xb8>)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <vTaskSwitchContext+0xc0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3354      	adds	r3, #84	; 0x54
 80069cc:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <vTaskSwitchContext+0xc4>)
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000d0c 	.word	0x20000d0c
 80069e0:	20000cf8 	.word	0x20000cf8
 80069e4:	20000cec 	.word	0x20000cec
 80069e8:	20000814 	.word	0x20000814
 80069ec:	20000810 	.word	0x20000810
 80069f0:	20000010 	.word	0x20000010

080069f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <vTaskPlaceOnEventList+0x44>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe fe05 	bl	8005632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f000 fa80 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000810 	.word	0x20000810

08006a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	617b      	str	r3, [r7, #20]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7fe fdbc 	bl	80055ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f000 fa55 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
	}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000810 	.word	0x20000810

08006a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fded 	bl	80056a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11d      	bne.n	8006b0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fde4 	bl	80056a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d903      	bls.n	8006af0 <xTaskRemoveFromEventList+0x5c>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <xTaskRemoveFromEventList+0xb8>)
 8006afe:	441a      	add	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fd6f 	bl	80055ea <vListInsertEnd>
 8006b0c:	e005      	b.n	8006b1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4619      	mov	r1, r3
 8006b14:	480e      	ldr	r0, [pc, #56]	; (8006b50 <xTaskRemoveFromEventList+0xbc>)
 8006b16:	f7fe fd68 	bl	80055ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <xTaskRemoveFromEventList+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d905      	bls.n	8006b34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <xTaskRemoveFromEventList+0xc4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e001      	b.n	8006b38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b38:	697b      	ldr	r3, [r7, #20]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000d0c 	.word	0x20000d0c
 8006b48:	20000cec 	.word	0x20000cec
 8006b4c:	20000814 	.word	0x20000814
 8006b50:	20000ca4 	.word	0x20000ca4
 8006b54:	20000810 	.word	0x20000810
 8006b58:	20000cf8 	.word	0x20000cf8

08006b5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <vTaskInternalSetTimeOutState+0x24>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <vTaskInternalSetTimeOutState+0x28>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	605a      	str	r2, [r3, #4]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000cfc 	.word	0x20000cfc
 8006b84:	20000ce8 	.word	0x20000ce8

08006b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	613b      	str	r3, [r7, #16]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	60fb      	str	r3, [r7, #12]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bca:	f000 fe83 	bl	80078d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bce:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <xTaskCheckForTimeOut+0xbc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d102      	bne.n	8006bee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e023      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <xTaskCheckForTimeOut+0xc0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d007      	beq.n	8006c0a <xTaskCheckForTimeOut+0x82>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e015      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d20b      	bcs.n	8006c2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff ff9b 	bl	8006b5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e004      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c36:	f000 fe7d 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000ce8 	.word	0x20000ce8
 8006c48:	20000cfc 	.word	0x20000cfc

08006c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c50:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <vTaskMissedYield+0x14>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000cf8 	.word	0x20000cf8

08006c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c6c:	f000 f852 	bl	8006d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <prvIdleTask+0x28>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d9f9      	bls.n	8006c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c78:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <prvIdleTask+0x2c>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c88:	e7f0      	b.n	8006c6c <prvIdleTask+0x8>
 8006c8a:	bf00      	nop
 8006c8c:	20000814 	.word	0x20000814
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e00c      	b.n	8006cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <prvInitialiseTaskLists+0x60>)
 8006cac:	4413      	add	r3, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fc6e 	bl	8005590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b37      	cmp	r3, #55	; 0x37
 8006cbe:	d9ef      	bls.n	8006ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cc0:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006cc2:	f7fe fc65 	bl	8005590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cc6:	480d      	ldr	r0, [pc, #52]	; (8006cfc <prvInitialiseTaskLists+0x68>)
 8006cc8:	f7fe fc62 	bl	8005590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ccc:	480c      	ldr	r0, [pc, #48]	; (8006d00 <prvInitialiseTaskLists+0x6c>)
 8006cce:	f7fe fc5f 	bl	8005590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cd2:	480c      	ldr	r0, [pc, #48]	; (8006d04 <prvInitialiseTaskLists+0x70>)
 8006cd4:	f7fe fc5c 	bl	8005590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cd8:	480b      	ldr	r0, [pc, #44]	; (8006d08 <prvInitialiseTaskLists+0x74>)
 8006cda:	f7fe fc59 	bl	8005590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <prvInitialiseTaskLists+0x78>)
 8006ce0:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <prvInitialiseTaskLists+0x7c>)
 8006ce6:	4a05      	ldr	r2, [pc, #20]	; (8006cfc <prvInitialiseTaskLists+0x68>)
 8006ce8:	601a      	str	r2, [r3, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000814 	.word	0x20000814
 8006cf8:	20000c74 	.word	0x20000c74
 8006cfc:	20000c88 	.word	0x20000c88
 8006d00:	20000ca4 	.word	0x20000ca4
 8006d04:	20000cb8 	.word	0x20000cb8
 8006d08:	20000cd0 	.word	0x20000cd0
 8006d0c:	20000c9c 	.word	0x20000c9c
 8006d10:	20000ca0 	.word	0x20000ca0

08006d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d1a:	e019      	b.n	8006d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d1c:	f000 fdda 	bl	80078d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d20:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <prvCheckTasksWaitingTermination+0x50>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fcb9 	bl	80056a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	4a0b      	ldr	r2, [pc, #44]	; (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d46:	f000 fdf5 	bl	8007934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f810 	bl	8006d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e1      	bne.n	8006d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000cb8 	.word	0x20000cb8
 8006d68:	20000ce4 	.word	0x20000ce4
 8006d6c:	20000ccc 	.word	0x20000ccc

08006d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3354      	adds	r3, #84	; 0x54
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f8ff 	bl	8007f80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d108      	bne.n	8006d9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 ff8d 	bl	8007cb0 <vPortFree>
				vPortFree( pxTCB );
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 ff8a 	bl	8007cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d9c:	e018      	b.n	8006dd0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d103      	bne.n	8006db0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 ff81 	bl	8007cb0 <vPortFree>
	}
 8006dae:	e00f      	b.n	8006dd0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d00a      	beq.n	8006dd0 <prvDeleteTCB+0x60>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60fb      	str	r3, [r7, #12]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <prvDeleteTCB+0x5e>
	}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <prvResetNextTaskUnblockTime+0x38>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <prvResetNextTaskUnblockTime+0x3c>)
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295
 8006dee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006df0:	e008      	b.n	8006e04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <prvResetNextTaskUnblockTime+0x38>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4a04      	ldr	r2, [pc, #16]	; (8006e14 <prvResetNextTaskUnblockTime+0x3c>)
 8006e02:	6013      	str	r3, [r2, #0]
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	20000c9c 	.word	0x20000c9c
 8006e14:	20000d04 	.word	0x20000d04

08006e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <xTaskGetSchedulerState+0x34>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e26:	2301      	movs	r3, #1
 8006e28:	607b      	str	r3, [r7, #4]
 8006e2a:	e008      	b.n	8006e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e2c:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <xTaskGetSchedulerState+0x38>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e34:	2302      	movs	r3, #2
 8006e36:	607b      	str	r3, [r7, #4]
 8006e38:	e001      	b.n	8006e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e3e:	687b      	ldr	r3, [r7, #4]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000cf0 	.word	0x20000cf0
 8006e50:	20000d0c 	.word	0x20000d0c

08006e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d056      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e6a:	4b2e      	ldr	r3, [pc, #184]	; (8006f24 <xTaskPriorityDisinherit+0xd0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d00a      	beq.n	8006e8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d02c      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d128      	bne.n	8006f18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fbea 	bl	80056a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <xTaskPriorityDisinherit+0xa4>
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <xTaskPriorityDisinherit+0xd8>)
 8006f06:	441a      	add	r2, r3
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fe fb6b 	bl	80055ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f18:	697b      	ldr	r3, [r7, #20]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000810 	.word	0x20000810
 8006f28:	20000cec 	.word	0x20000cec
 8006f2c:	20000814 	.word	0x20000814

08006f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f3a:	4b21      	ldr	r3, [pc, #132]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f40:	4b20      	ldr	r3, [pc, #128]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fbac 	bl	80056a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d10a      	bne.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4819      	ldr	r0, [pc, #100]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f64:	f7fe fb41 	bl	80055ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f68:	e026      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d209      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fe fb4f 	bl	8005632 <vListInsert>
}
 8006f94:	e010      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f96:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe fb45 	bl	8005632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d202      	bcs.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fb2:	4a08      	ldr	r2, [pc, #32]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000ce8 	.word	0x20000ce8
 8006fc4:	20000810 	.word	0x20000810
 8006fc8:	20000cd0 	.word	0x20000cd0
 8006fcc:	20000ca0 	.word	0x20000ca0
 8006fd0:	20000c9c 	.word	0x20000c9c
 8006fd4:	20000d04 	.word	0x20000d04

08006fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fe2:	f000 fb07 	bl	80075f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fe6:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <xTimerCreateTimerTask+0x80>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d021      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ff6:	1d3a      	adds	r2, r7, #4
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe faab 	bl	800555c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	9202      	str	r2, [sp, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2302      	movs	r3, #2
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	460a      	mov	r2, r1
 8007018:	4910      	ldr	r1, [pc, #64]	; (800705c <xTimerCreateTimerTask+0x84>)
 800701a:	4811      	ldr	r0, [pc, #68]	; (8007060 <xTimerCreateTimerTask+0x88>)
 800701c:	f7ff f858 	bl	80060d0 <xTaskCreateStatic>
 8007020:	4603      	mov	r3, r0
 8007022:	4a10      	ldr	r2, [pc, #64]	; (8007064 <xTimerCreateTimerTask+0x8c>)
 8007024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007026:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <xTimerCreateTimerTask+0x8c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	613b      	str	r3, [r7, #16]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800704e:	697b      	ldr	r3, [r7, #20]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000d40 	.word	0x20000d40
 800705c:	08008198 	.word	0x08008198
 8007060:	0800719d 	.word	0x0800719d
 8007064:	20000d44 	.word	0x20000d44

08007068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	623b      	str	r3, [r7, #32]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <xTimerGenericCommand+0x98>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d02a      	beq.n	80070f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	dc18      	bgt.n	80070e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070b0:	f7ff feb2 	bl	8006e18 <xTaskGetSchedulerState>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d109      	bne.n	80070ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <xTimerGenericCommand+0x98>)
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	f107 0110 	add.w	r1, r7, #16
 80070c2:	2300      	movs	r3, #0
 80070c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c6:	f7fe fc1b 	bl	8005900 <xQueueGenericSend>
 80070ca:	6278      	str	r0, [r7, #36]	; 0x24
 80070cc:	e012      	b.n	80070f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <xTimerGenericCommand+0x98>)
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	f107 0110 	add.w	r1, r7, #16
 80070d6:	2300      	movs	r3, #0
 80070d8:	2200      	movs	r2, #0
 80070da:	f7fe fc11 	bl	8005900 <xQueueGenericSend>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
 80070e0:	e008      	b.n	80070f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <xTimerGenericCommand+0x98>)
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f107 0110 	add.w	r1, r7, #16
 80070ea:	2300      	movs	r3, #0
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	f7fe fd05 	bl	8005afc <xQueueGenericSendFromISR>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3728      	adds	r7, #40	; 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000d40 	.word	0x20000d40

08007104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710e:	4b22      	ldr	r3, [pc, #136]	; (8007198 <prvProcessExpiredTimer+0x94>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fac1 	bl	80056a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d022      	beq.n	8007176 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	18d1      	adds	r1, r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	6978      	ldr	r0, [r7, #20]
 800713e:	f000 f8d1 	bl	80072e4 <prvInsertTimerInActiveList>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01f      	beq.n	8007188 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f7ff ff88 	bl	8007068 <xTimerGenericCommand>
 8007158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d113      	bne.n	8007188 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	6978      	ldr	r0, [r7, #20]
 800718e:	4798      	blx	r3
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000d38 	.word	0x20000d38

0800719c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071a4:	f107 0308 	add.w	r3, r7, #8
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f857 	bl	800725c <prvGetNextExpireTime>
 80071ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4619      	mov	r1, r3
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f803 	bl	80071c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071ba:	f000 f8d5 	bl	8007368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071be:	e7f1      	b.n	80071a4 <prvTimerTask+0x8>

080071c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ca:	f7ff fa27 	bl	800661c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f866 	bl	80072a4 <prvSampleTimeNow>
 80071d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d130      	bne.n	8007242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d806      	bhi.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071ee:	f7ff fa23 	bl	8006638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff85 	bl	8007104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071fa:	e024      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <prvProcessTimerOrBlockTask+0x90>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <prvProcessTimerOrBlockTask+0x50>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <prvProcessTimerOrBlockTask+0x52>
 8007210:	2300      	movs	r3, #0
 8007212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <prvProcessTimerOrBlockTask+0x94>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4619      	mov	r1, r3
 8007222:	f7fe ff21 	bl	8006068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f7ff fa07 	bl	8006638 <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <prvProcessTimerOrBlockTask+0x98>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
}
 8007240:	e001      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007242:	f7ff f9f9 	bl	8006638 <xTaskResumeAll>
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000d3c 	.word	0x20000d3c
 8007254:	20000d40 	.word	0x20000d40
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <prvGetNextExpireTime+0x44>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <prvGetNextExpireTime+0x16>
 800726e:	2201      	movs	r2, #1
 8007270:	e000      	b.n	8007274 <prvGetNextExpireTime+0x18>
 8007272:	2200      	movs	r2, #0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <prvGetNextExpireTime+0x44>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e001      	b.n	8007290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20000d38 	.word	0x20000d38

080072a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072ac:	f7ff fa62 	bl	8006774 <xTaskGetTickCount>
 80072b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <prvSampleTimeNow+0x3c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d205      	bcs.n	80072c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072bc:	f000 f936 	bl	800752c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e002      	b.n	80072ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ce:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <prvSampleTimeNow+0x3c>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000d48 	.word	0x20000d48

080072e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d812      	bhi.n	8007330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e01b      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <prvInsertTimerInActiveList+0x7c>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3304      	adds	r3, #4
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f7fe f982 	bl	8005632 <vListInsert>
 800732e:	e012      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d206      	bcs.n	8007346 <prvInsertTimerInActiveList+0x62>
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d302      	bcc.n	8007346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e007      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <prvInsertTimerInActiveList+0x80>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe f96e 	bl	8005632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000d3c 	.word	0x20000d3c
 8007364:	20000d38 	.word	0x20000d38

08007368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	; 0x38
 800736c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800736e:	e0ca      	b.n	8007506 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da18      	bge.n	80073a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	3304      	adds	r3, #4
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	61fb      	str	r3, [r7, #28]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739e:	6850      	ldr	r0, [r2, #4]
 80073a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a2:	6892      	ldr	r2, [r2, #8]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f2c0 80aa 	blt.w	8007504 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	3304      	adds	r3, #4
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe f96f 	bl	80056a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073c6:	463b      	mov	r3, r7
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff6b 	bl	80072a4 <prvSampleTimeNow>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	f200 8097 	bhi.w	8007506 <prvProcessReceivedCommands+0x19e>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <prvProcessReceivedCommands+0x78>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007409 	.word	0x08007409
 80073ec:	0800747d 	.word	0x0800747d
 80073f0:	08007491 	.word	0x08007491
 80073f4:	080074db 	.word	0x080074db
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007409 	.word	0x08007409
 8007400:	0800747d 	.word	0x0800747d
 8007404:	08007491 	.word	0x08007491
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	b2da      	uxtb	r2, r3
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	18d1      	adds	r1, r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007428:	f7ff ff5c 	bl	80072e4 <prvInsertTimerInActiveList>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d069      	beq.n	8007506 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d05e      	beq.n	8007506 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	441a      	add	r2, r3
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	2100      	movs	r1, #0
 8007458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745a:	f7ff fe05 	bl	8007068 <xTimerGenericCommand>
 800745e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d14f      	bne.n	8007506 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61bb      	str	r3, [r7, #24]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	b2da      	uxtb	r2, r3
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800748e:	e03a      	b.n	8007506 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	617b      	str	r3, [r7, #20]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	18d1      	adds	r1, r2, r3
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d4:	f7ff ff06 	bl	80072e4 <prvInsertTimerInActiveList>
					break;
 80074d8:	e015      	b.n	8007506 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80074e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ea:	f000 fbe1 	bl	8007cb0 <vPortFree>
 80074ee:	e00a      	b.n	8007506 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007502:	e000      	b.n	8007506 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007504:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <prvProcessReceivedCommands+0x1c0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	1d39      	adds	r1, r7, #4
 800750c:	2200      	movs	r2, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fb90 	bl	8005c34 <xQueueReceive>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	f47f af2a 	bne.w	8007370 <prvProcessReceivedCommands+0x8>
	}
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3730      	adds	r7, #48	; 0x30
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000d40 	.word	0x20000d40

0800752c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007532:	e048      	b.n	80075c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007534:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <prvSwitchTimerLists+0xc0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b2b      	ldr	r3, [pc, #172]	; (80075ec <prvSwitchTimerLists+0xc0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe f8a9 	bl	80056a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02e      	beq.n	80075c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4413      	add	r3, r2
 8007570:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	d90e      	bls.n	8007598 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007586:	4b19      	ldr	r3, [pc, #100]	; (80075ec <prvSwitchTimerLists+0xc0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7fe f84e 	bl	8005632 <vListInsert>
 8007596:	e016      	b.n	80075c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007598:	2300      	movs	r3, #0
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	2100      	movs	r1, #0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fd60 	bl	8007068 <xTimerGenericCommand>
 80075a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	603b      	str	r3, [r7, #0]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <prvSwitchTimerLists+0xc0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1b1      	bne.n	8007534 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <prvSwitchTimerLists+0xc0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075d6:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <prvSwitchTimerLists+0xc4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a04      	ldr	r2, [pc, #16]	; (80075ec <prvSwitchTimerLists+0xc0>)
 80075dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075de:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <prvSwitchTimerLists+0xc4>)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	6013      	str	r3, [r2, #0]
}
 80075e4:	bf00      	nop
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000d38 	.word	0x20000d38
 80075f0:	20000d3c 	.word	0x20000d3c

080075f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075fa:	f000 f96b 	bl	80078d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d120      	bne.n	8007648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007606:	4814      	ldr	r0, [pc, #80]	; (8007658 <prvCheckForValidListAndQueue+0x64>)
 8007608:	f7fd ffc2 	bl	8005590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800760c:	4813      	ldr	r0, [pc, #76]	; (800765c <prvCheckForValidListAndQueue+0x68>)
 800760e:	f7fd ffbf 	bl	8005590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007612:	4b13      	ldr	r3, [pc, #76]	; (8007660 <prvCheckForValidListAndQueue+0x6c>)
 8007614:	4a10      	ldr	r2, [pc, #64]	; (8007658 <prvCheckForValidListAndQueue+0x64>)
 8007616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007618:	4b12      	ldr	r3, [pc, #72]	; (8007664 <prvCheckForValidListAndQueue+0x70>)
 800761a:	4a10      	ldr	r2, [pc, #64]	; (800765c <prvCheckForValidListAndQueue+0x68>)
 800761c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800761e:	2300      	movs	r3, #0
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <prvCheckForValidListAndQueue+0x74>)
 8007624:	4a11      	ldr	r2, [pc, #68]	; (800766c <prvCheckForValidListAndQueue+0x78>)
 8007626:	2110      	movs	r1, #16
 8007628:	200a      	movs	r0, #10
 800762a:	f7fe f8cd 	bl	80057c8 <xQueueGenericCreateStatic>
 800762e:	4603      	mov	r3, r0
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007634:	4b07      	ldr	r3, [pc, #28]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <prvCheckForValidListAndQueue+0x60>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	490b      	ldr	r1, [pc, #44]	; (8007670 <prvCheckForValidListAndQueue+0x7c>)
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fce6 	bl	8006014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007648:	f000 f974 	bl	8007934 <vPortExitCritical>
}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000d40 	.word	0x20000d40
 8007658:	20000d10 	.word	0x20000d10
 800765c:	20000d24 	.word	0x20000d24
 8007660:	20000d38 	.word	0x20000d38
 8007664:	20000d3c 	.word	0x20000d3c
 8007668:	20000dec 	.word	0x20000dec
 800766c:	20000d4c 	.word	0x20000d4c
 8007670:	080081a0 	.word	0x080081a0

08007674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b04      	subs	r3, #4
 8007684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800768c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b04      	subs	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076a4:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <pxPortInitialiseStack+0x64>)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b14      	subs	r3, #20
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f06f 0202 	mvn.w	r2, #2
 80076c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b20      	subs	r3, #32
 80076c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	080076dd 	.word	0x080076dd

080076dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <prvTaskExitError+0x54>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d00a      	beq.n	8007706 <prvTaskExitError+0x2a>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <prvTaskExitError+0x28>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800771a:	bf00      	nop
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0fc      	beq.n	800771c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	2000000c 	.word	0x2000000c
	...

08007740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <pxCurrentTCBConst2>)
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f380 8809 	msr	PSP, r0
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8811 	msr	BASEPRI, r0
 800775a:	4770      	bx	lr
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst2>:
 8007760:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007768:	4808      	ldr	r0, [pc, #32]	; (800778c <prvPortStartFirstTask+0x24>)
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	6800      	ldr	r0, [r0, #0]
 800776e:	f380 8808 	msr	MSP, r0
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8814 	msr	CONTROL, r0
 800777a:	b662      	cpsie	i
 800777c:	b661      	cpsie	f
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	df00      	svc	0
 8007788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800778a:	bf00      	nop
 800778c:	e000ed08 	.word	0xe000ed08

08007790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007796:	4b46      	ldr	r3, [pc, #280]	; (80078b0 <xPortStartScheduler+0x120>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a46      	ldr	r2, [pc, #280]	; (80078b4 <xPortStartScheduler+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10a      	bne.n	80077b6 <xPortStartScheduler+0x26>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077b6:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <xPortStartScheduler+0x120>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3f      	ldr	r2, [pc, #252]	; (80078b8 <xPortStartScheduler+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10a      	bne.n	80077d6 <xPortStartScheduler+0x46>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077d6:	4b39      	ldr	r3, [pc, #228]	; (80078bc <xPortStartScheduler+0x12c>)
 80077d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	22ff      	movs	r2, #255	; 0xff
 80077e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <xPortStartScheduler+0x130>)
 80077fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077fe:	4b31      	ldr	r3, [pc, #196]	; (80078c4 <xPortStartScheduler+0x134>)
 8007800:	2207      	movs	r2, #7
 8007802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007804:	e009      	b.n	800781a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007806:	4b2f      	ldr	r3, [pc, #188]	; (80078c4 <xPortStartScheduler+0x134>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3b01      	subs	r3, #1
 800780c:	4a2d      	ldr	r2, [pc, #180]	; (80078c4 <xPortStartScheduler+0x134>)
 800780e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	b2db      	uxtb	r3, r3
 8007818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d0ef      	beq.n	8007806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007826:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <xPortStartScheduler+0x134>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1c3 0307 	rsb	r3, r3, #7
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00a      	beq.n	8007848 <xPortStartScheduler+0xb8>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007848:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <xPortStartScheduler+0x134>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <xPortStartScheduler+0x134>)
 8007850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <xPortStartScheduler+0x134>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800785a:	4a1a      	ldr	r2, [pc, #104]	; (80078c4 <xPortStartScheduler+0x134>)
 800785c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	b2da      	uxtb	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <xPortStartScheduler+0x138>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <xPortStartScheduler+0x138>)
 800786c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <xPortStartScheduler+0x138>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <xPortStartScheduler+0x138>)
 8007878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800787c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800787e:	f000 f8dd 	bl	8007a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007882:	4b12      	ldr	r3, [pc, #72]	; (80078cc <xPortStartScheduler+0x13c>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007888:	f000 f8fc 	bl	8007a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <xPortStartScheduler+0x140>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0f      	ldr	r2, [pc, #60]	; (80078d0 <xPortStartScheduler+0x140>)
 8007892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007898:	f7ff ff66 	bl	8007768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800789c:	f7ff f846 	bl	800692c <vTaskSwitchContext>
	prvTaskExitError();
 80078a0:	f7ff ff1c 	bl	80076dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	e000ed00 	.word	0xe000ed00
 80078b4:	410fc271 	.word	0x410fc271
 80078b8:	410fc270 	.word	0x410fc270
 80078bc:	e000e400 	.word	0xe000e400
 80078c0:	20000e3c 	.word	0x20000e3c
 80078c4:	20000e40 	.word	0x20000e40
 80078c8:	e000ed20 	.word	0xe000ed20
 80078cc:	2000000c 	.word	0x2000000c
 80078d0:	e000ef34 	.word	0xe000ef34

080078d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
}
 80078ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <vPortEnterCritical+0x58>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a0d      	ldr	r2, [pc, #52]	; (800792c <vPortEnterCritical+0x58>)
 80078f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <vPortEnterCritical+0x58>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10f      	bne.n	8007920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <vPortEnterCritical+0x5c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <vPortEnterCritical+0x4c>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	603b      	str	r3, [r7, #0]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <vPortEnterCritical+0x4a>
	}
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	2000000c 	.word	0x2000000c
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <vPortExitCritical+0x50>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <vPortExitCritical+0x24>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	607b      	str	r3, [r7, #4]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vPortExitCritical+0x50>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3b01      	subs	r3, #1
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <vPortExitCritical+0x50>)
 8007960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <vPortExitCritical+0x50>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <vPortExitCritical+0x42>
 800796a:	2300      	movs	r3, #0
 800796c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	f383 8811 	msr	BASEPRI, r3
}
 8007974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
	...

08007990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007990:	f3ef 8009 	mrs	r0, PSP
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <pxCurrentTCBConst>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f01e 0f10 	tst.w	lr, #16
 80079a0:	bf08      	it	eq
 80079a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	6010      	str	r0, [r2, #0]
 80079ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079b4:	f380 8811 	msr	BASEPRI, r0
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f7fe ffb4 	bl	800692c <vTaskSwitchContext>
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	f380 8811 	msr	BASEPRI, r0
 80079cc:	bc09      	pop	{r0, r3}
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	6808      	ldr	r0, [r1, #0]
 80079d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d6:	f01e 0f10 	tst.w	lr, #16
 80079da:	bf08      	it	eq
 80079dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079e0:	f380 8809 	msr	PSP, r0
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst>:
 80079f0:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a12:	f7fe fed1 	bl	80067b8 <xTaskIncrementTick>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <xPortSysTickHandler+0x40>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <vPortSetupTimerInterrupt+0x38>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <vPortSetupTimerInterrupt+0x3c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a0a      	ldr	r2, [pc, #40]	; (8007a7c <vPortSetupTimerInterrupt+0x40>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <vPortSetupTimerInterrupt+0x44>)
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e010 	.word	0xe000e010
 8007a74:	e000e018 	.word	0xe000e018
 8007a78:	20000000 	.word	0x20000000
 8007a7c:	10624dd3 	.word	0x10624dd3
 8007a80:	e000e014 	.word	0xe000e014

08007a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a94 <vPortEnableVFP+0x10>
 8007a88:	6801      	ldr	r1, [r0, #0]
 8007a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a8e:	6001      	str	r1, [r0, #0]
 8007a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a92:	bf00      	nop
 8007a94:	e000ed88 	.word	0xe000ed88

08007a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a9e:	f3ef 8305 	mrs	r3, IPSR
 8007aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d914      	bls.n	8007ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aaa:	4a17      	ldr	r2, [pc, #92]	; (8007b08 <vPortValidateInterruptPriority+0x70>)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ab4:	4b15      	ldr	r3, [pc, #84]	; (8007b0c <vPortValidateInterruptPriority+0x74>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	7afa      	ldrb	r2, [r7, #11]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d20a      	bcs.n	8007ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <vPortValidateInterruptPriority+0x78>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007adc:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <vPortValidateInterruptPriority+0x7c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d90a      	bls.n	8007afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	603b      	str	r3, [r7, #0]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <vPortValidateInterruptPriority+0x60>
	}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	e000e3f0 	.word	0xe000e3f0
 8007b0c:	20000e3c 	.word	0x20000e3c
 8007b10:	e000ed0c 	.word	0xe000ed0c
 8007b14:	20000e40 	.word	0x20000e40

08007b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b24:	f7fe fd7a 	bl	800661c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b28:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <pvPortMalloc+0x180>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b30:	f000 f920 	bl	8007d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b34:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <pvPortMalloc+0x184>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8093 	bne.w	8007c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01d      	beq.n	8007b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b48:	2208      	movs	r2, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	3308      	adds	r3, #8
 8007b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <pvPortMalloc+0x6c>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	617b      	str	r3, [r7, #20]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d06e      	beq.n	8007c68 <pvPortMalloc+0x150>
 8007b8a:	4b45      	ldr	r3, [pc, #276]	; (8007ca0 <pvPortMalloc+0x188>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d869      	bhi.n	8007c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b94:	4b43      	ldr	r3, [pc, #268]	; (8007ca4 <pvPortMalloc+0x18c>)
 8007b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b98:	4b42      	ldr	r3, [pc, #264]	; (8007ca4 <pvPortMalloc+0x18c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b9e:	e004      	b.n	8007baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <pvPortMalloc+0xa4>
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f1      	bne.n	8007ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bbc:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <pvPortMalloc+0x180>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d050      	beq.n	8007c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2208      	movs	r2, #8
 8007bcc:	4413      	add	r3, r2
 8007bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	2308      	movs	r3, #8
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d91f      	bls.n	8007c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <pvPortMalloc+0xf8>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	613b      	str	r3, [r7, #16]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f000 f908 	bl	8007e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <pvPortMalloc+0x190>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d203      	bcs.n	8007c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c42:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <pvPortMalloc+0x190>)
 8007c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <pvPortMalloc+0x184>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <pvPortMalloc+0x194>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <pvPortMalloc+0x194>)
 8007c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c68:	f7fe fce6 	bl	8006638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <pvPortMalloc+0x174>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	60fb      	str	r3, [r7, #12]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <pvPortMalloc+0x172>
	return pvReturn;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3728      	adds	r7, #40	; 0x28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20004a4c 	.word	0x20004a4c
 8007c9c:	20004a60 	.word	0x20004a60
 8007ca0:	20004a50 	.word	0x20004a50
 8007ca4:	20004a44 	.word	0x20004a44
 8007ca8:	20004a54 	.word	0x20004a54
 8007cac:	20004a58 	.word	0x20004a58

08007cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d04d      	beq.n	8007d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <vPortFree+0xb8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <vPortFree+0x44>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60fb      	str	r3, [r7, #12]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <vPortFree+0x62>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <vPortFree+0xb8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01e      	beq.n	8007d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d11a      	bne.n	8007d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <vPortFree+0xb8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	401a      	ands	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d38:	f7fe fc70 	bl	800661c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <vPortFree+0xbc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4413      	add	r3, r2
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <vPortFree+0xbc>)
 8007d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f000 f874 	bl	8007e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <vPortFree+0xc0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	4a06      	ldr	r2, [pc, #24]	; (8007d70 <vPortFree+0xc0>)
 8007d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d5a:	f7fe fc6d 	bl	8006638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d5e:	bf00      	nop
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20004a60 	.word	0x20004a60
 8007d6c:	20004a50 	.word	0x20004a50
 8007d70:	20004a5c 	.word	0x20004a5c

08007d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d80:	4b27      	ldr	r3, [pc, #156]	; (8007e20 <prvHeapInit+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3307      	adds	r3, #7
 8007d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <prvHeapInit+0xac>)
 8007da4:	4413      	add	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <prvHeapInit+0xb0>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <prvHeapInit+0xb0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <prvHeapInit+0xb4>)
 8007dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <prvHeapInit+0xb4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dde:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <prvHeapInit+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvHeapInit+0xb4>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <prvHeapInit+0xb8>)
 8007e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <prvHeapInit+0xbc>)
 8007e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <prvHeapInit+0xc0>)
 8007e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000e44 	.word	0x20000e44
 8007e24:	20004a44 	.word	0x20004a44
 8007e28:	20004a4c 	.word	0x20004a4c
 8007e2c:	20004a54 	.word	0x20004a54
 8007e30:	20004a50 	.word	0x20004a50
 8007e34:	20004a60 	.word	0x20004a60

08007e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e40:	4b28      	ldr	r3, [pc, #160]	; (8007ee4 <prvInsertBlockIntoFreeList+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e002      	b.n	8007e4c <prvInsertBlockIntoFreeList+0x14>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d8f7      	bhi.n	8007e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d108      	bne.n	8007e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	441a      	add	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d118      	bne.n	8007ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d00d      	beq.n	8007eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e008      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e003      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d002      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20004a44 	.word	0x20004a44
 8007ee8:	20004a4c 	.word	0x20004a4c

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4d0d      	ldr	r5, [pc, #52]	; (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1b64      	subs	r4, r4, r5
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4d0b      	ldr	r5, [pc, #44]	; (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	; (8007f30 <__libc_init_array+0x44>)
 8007f00:	f000 f8f6 	bl	80080f0 <_init>
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2600      	movs	r6, #0
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	080083bc 	.word	0x080083bc
 8007f28:	080083bc 	.word	0x080083bc
 8007f2c:	080083bc 	.word	0x080083bc
 8007f30:	080083c0 	.word	0x080083c0

08007f34 <__retarget_lock_acquire_recursive>:
 8007f34:	4770      	bx	lr

08007f36 <__retarget_lock_release_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <memcpy>:
 8007f38:	440a      	add	r2, r1
 8007f3a:	4291      	cmp	r1, r2
 8007f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f40:	d100      	bne.n	8007f44 <memcpy+0xc>
 8007f42:	4770      	bx	lr
 8007f44:	b510      	push	{r4, lr}
 8007f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4e:	4291      	cmp	r1, r2
 8007f50:	d1f9      	bne.n	8007f46 <memcpy+0xe>
 8007f52:	bd10      	pop	{r4, pc}

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <cleanup_glue>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	460c      	mov	r4, r1
 8007f68:	6809      	ldr	r1, [r1, #0]
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b109      	cbz	r1, 8007f72 <cleanup_glue+0xe>
 8007f6e:	f7ff fff9 	bl	8007f64 <cleanup_glue>
 8007f72:	4621      	mov	r1, r4
 8007f74:	4628      	mov	r0, r5
 8007f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7a:	f000 b869 	b.w	8008050 <_free_r>
	...

08007f80 <_reclaim_reent>:
 8007f80:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <_reclaim_reent+0xb4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4283      	cmp	r3, r0
 8007f86:	b570      	push	{r4, r5, r6, lr}
 8007f88:	4604      	mov	r4, r0
 8007f8a:	d051      	beq.n	8008030 <_reclaim_reent+0xb0>
 8007f8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f8e:	b143      	cbz	r3, 8007fa2 <_reclaim_reent+0x22>
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d14a      	bne.n	800802c <_reclaim_reent+0xac>
 8007f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	b111      	cbz	r1, 8007fa2 <_reclaim_reent+0x22>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 f857 	bl	8008050 <_free_r>
 8007fa2:	6961      	ldr	r1, [r4, #20]
 8007fa4:	b111      	cbz	r1, 8007fac <_reclaim_reent+0x2c>
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 f852 	bl	8008050 <_free_r>
 8007fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007fae:	b111      	cbz	r1, 8007fb6 <_reclaim_reent+0x36>
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 f84d 	bl	8008050 <_free_r>
 8007fb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007fb8:	b111      	cbz	r1, 8007fc0 <_reclaim_reent+0x40>
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 f848 	bl	8008050 <_free_r>
 8007fc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007fc2:	b111      	cbz	r1, 8007fca <_reclaim_reent+0x4a>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 f843 	bl	8008050 <_free_r>
 8007fca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007fcc:	b111      	cbz	r1, 8007fd4 <_reclaim_reent+0x54>
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 f83e 	bl	8008050 <_free_r>
 8007fd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007fd6:	b111      	cbz	r1, 8007fde <_reclaim_reent+0x5e>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f839 	bl	8008050 <_free_r>
 8007fde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007fe0:	b111      	cbz	r1, 8007fe8 <_reclaim_reent+0x68>
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 f834 	bl	8008050 <_free_r>
 8007fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fea:	b111      	cbz	r1, 8007ff2 <_reclaim_reent+0x72>
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f82f 	bl	8008050 <_free_r>
 8007ff2:	69a3      	ldr	r3, [r4, #24]
 8007ff4:	b1e3      	cbz	r3, 8008030 <_reclaim_reent+0xb0>
 8007ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4798      	blx	r3
 8007ffc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ffe:	b1b9      	cbz	r1, 8008030 <_reclaim_reent+0xb0>
 8008000:	4620      	mov	r0, r4
 8008002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008006:	f7ff bfad 	b.w	8007f64 <cleanup_glue>
 800800a:	5949      	ldr	r1, [r1, r5]
 800800c:	b941      	cbnz	r1, 8008020 <_reclaim_reent+0xa0>
 800800e:	3504      	adds	r5, #4
 8008010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008012:	2d80      	cmp	r5, #128	; 0x80
 8008014:	68d9      	ldr	r1, [r3, #12]
 8008016:	d1f8      	bne.n	800800a <_reclaim_reent+0x8a>
 8008018:	4620      	mov	r0, r4
 800801a:	f000 f819 	bl	8008050 <_free_r>
 800801e:	e7ba      	b.n	8007f96 <_reclaim_reent+0x16>
 8008020:	680e      	ldr	r6, [r1, #0]
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f814 	bl	8008050 <_free_r>
 8008028:	4631      	mov	r1, r6
 800802a:	e7ef      	b.n	800800c <_reclaim_reent+0x8c>
 800802c:	2500      	movs	r5, #0
 800802e:	e7ef      	b.n	8008010 <_reclaim_reent+0x90>
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	bf00      	nop
 8008034:	20000010 	.word	0x20000010

08008038 <__malloc_lock>:
 8008038:	4801      	ldr	r0, [pc, #4]	; (8008040 <__malloc_lock+0x8>)
 800803a:	f7ff bf7b 	b.w	8007f34 <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	20004d50 	.word	0x20004d50

08008044 <__malloc_unlock>:
 8008044:	4801      	ldr	r0, [pc, #4]	; (800804c <__malloc_unlock+0x8>)
 8008046:	f7ff bf76 	b.w	8007f36 <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	20004d50 	.word	0x20004d50

08008050 <_free_r>:
 8008050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008052:	2900      	cmp	r1, #0
 8008054:	d048      	beq.n	80080e8 <_free_r+0x98>
 8008056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805a:	9001      	str	r0, [sp, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f1a1 0404 	sub.w	r4, r1, #4
 8008062:	bfb8      	it	lt
 8008064:	18e4      	addlt	r4, r4, r3
 8008066:	f7ff ffe7 	bl	8008038 <__malloc_lock>
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <_free_r+0x9c>)
 800806c:	9801      	ldr	r0, [sp, #4]
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	4615      	mov	r5, r2
 8008072:	b933      	cbnz	r3, 8008082 <_free_r+0x32>
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6014      	str	r4, [r2, #0]
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800807e:	f7ff bfe1 	b.w	8008044 <__malloc_unlock>
 8008082:	42a3      	cmp	r3, r4
 8008084:	d90b      	bls.n	800809e <_free_r+0x4e>
 8008086:	6821      	ldr	r1, [r4, #0]
 8008088:	1862      	adds	r2, r4, r1
 800808a:	4293      	cmp	r3, r2
 800808c:	bf04      	itt	eq
 800808e:	681a      	ldreq	r2, [r3, #0]
 8008090:	685b      	ldreq	r3, [r3, #4]
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	bf04      	itt	eq
 8008096:	1852      	addeq	r2, r2, r1
 8008098:	6022      	streq	r2, [r4, #0]
 800809a:	602c      	str	r4, [r5, #0]
 800809c:	e7ec      	b.n	8008078 <_free_r+0x28>
 800809e:	461a      	mov	r2, r3
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	b10b      	cbz	r3, 80080a8 <_free_r+0x58>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d9fa      	bls.n	800809e <_free_r+0x4e>
 80080a8:	6811      	ldr	r1, [r2, #0]
 80080aa:	1855      	adds	r5, r2, r1
 80080ac:	42a5      	cmp	r5, r4
 80080ae:	d10b      	bne.n	80080c8 <_free_r+0x78>
 80080b0:	6824      	ldr	r4, [r4, #0]
 80080b2:	4421      	add	r1, r4
 80080b4:	1854      	adds	r4, r2, r1
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	d1dd      	bne.n	8008078 <_free_r+0x28>
 80080bc:	681c      	ldr	r4, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	6053      	str	r3, [r2, #4]
 80080c2:	4421      	add	r1, r4
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	e7d7      	b.n	8008078 <_free_r+0x28>
 80080c8:	d902      	bls.n	80080d0 <_free_r+0x80>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	e7d3      	b.n	8008078 <_free_r+0x28>
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	1961      	adds	r1, r4, r5
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf04      	itt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	bf04      	itt	eq
 80080e0:	1949      	addeq	r1, r1, r5
 80080e2:	6021      	streq	r1, [r4, #0]
 80080e4:	6054      	str	r4, [r2, #4]
 80080e6:	e7c7      	b.n	8008078 <_free_r+0x28>
 80080e8:	b003      	add	sp, #12
 80080ea:	bd30      	pop	{r4, r5, pc}
 80080ec:	20004a64 	.word	0x20004a64

080080f0 <_init>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	bf00      	nop
 80080f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f6:	bc08      	pop	{r3}
 80080f8:	469e      	mov	lr, r3
 80080fa:	4770      	bx	lr

080080fc <_fini>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	bf00      	nop
 8008100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008102:	bc08      	pop	{r3}
 8008104:	469e      	mov	lr, r3
 8008106:	4770      	bx	lr
